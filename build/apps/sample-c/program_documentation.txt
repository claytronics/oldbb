FINA'S INTERNSHIP WORK:

PROGRAM FOR TESTING THE BLINKY BLOCKS
- color, accelerometer and network testing program and program for changing the blinky blocks ID


SET ID:
apps/sample-c/setID_ensemble.bb and setID_single.bb are the programs for changing the blinky blocks id.setID_single.bb is for only one block and setID_ensemble.bb is for
several blocks. When you use setID_all.bb you have to line up every block so that you can set their id depending on the first block
id (the one connected to the host).Both of the program use the logger so uncomment the LOG_DEBUG flags into the Makefile.
you can enable this test mode by adding "-t"when starting the logger, the logger program will provide instructions.

COLOR AND ACCELEROMETER:
apps/sample-c/color_accel_tester.bb is the program used for testing color and accelerometer. 
To see the result you have to use the logger,so don't forget to uncomment the LOG_DEBUG flags into the makefile before compiling the program. 
You can enable this test mode by adding "-t" when starting the logger, the logger program will provide instructions.

NETWORK:
apps/sample-c/network_test_ensemble.bb is the program for testing the blinky block networks. 
This program will create a spanning tree, when the spanning tree is set up, all the blocks will turn Blue. 
The root block is the one connected to the host, it will send a message to all the spanning tree leaves. 
Then the leaves will send back a message to the root. Once the root receives all the message from the leaves, one cycle is complete.
The test suceed if we reach 100 (you can change this number by changing MAX_CYCLE).
In case of success or failure, a log message is sent to the host, the user can then judge the quality of the communications.



ADDED THE VERSION 10 INSIDE THE LINKER 


THE GAME 
apps/sample-c/game_with_coord.bb is a game. In the game,there is an ensemble of block where you have a red and blue block. The goal of the game is to get the
red block to the blue block with the help of the accelerometer. The red block movement depends on the orientation of block relative to the ground.
In the game we have 3 steps : elaboration of layer, red block election, blue block election, coordination system and the start of the game.

We have to elaborate the layer because we need it for the red block election.The red block has to be on the highest layer of the ensemble.So the layer is just to 
find where is the highest layer.

For the red block election, every block on the highest layer will start their own spanning tree and send their ID at the same time. Every blocks will compare
the ID of the tree before entering to it, they will enter a tree only if the ID is inferior of what they have. And the ensemble will end up with only 
one tree with one root, and this root is red block.

For the blue block election, we do it the same way as for the red block but instead of comparing the ID we compare a random number that each block will get 
during the red block election.

To make the game more robust in case there is an issue with connection, there is the coordination system where all the blocks will have coordinate and will store each 
blocks coordinates of the ensemble too with the port to get to them. During the game when a neighbor is missing check first if it is an issue with the block face,by checking
 "coord[20][4]", it is the table where all the blocks coordinates with the port to get to them are stored. So when a neighbor is missing and if his coordinates is inside coord table
It means there is a connection issue so we have to use the coordinate to reach the missing neighbor. 

During the game, each 1 second the red block checks his orientation and send a message to the neighbor opposed to the orientation. The block which receives
the message changes into red and register a timeout for 1 second, and after 1 second he will check at his turn his orientation and the game
continue.A block checks every time he receives a message if he is the blue block or not, if he is change into green and the game end.

We use a lot of timeout in the game and since the timeout still has problems when registering several of them, the game has some bugs.

SPANNINGTREE LIBRARY  
src-bobby/system/span.bb and src-bobby/system/span.bbh, all the informations about the function are on the span.bbh 
we have the createSpanningTree which create spanning tree, but still can't find why we can't create 2 successives spanning tree after adding the timeout into the structure of the spanning tree.

Also when creating the spanning tree in some case the handler mydonefunc that should be called at the end of the spanning tree is called several times before the spanning tree end. And it we don't know exactly when 
the spanning tree is finished so we can use the function like treeBroadcast and treeBarrier.

If the spanning tree is well done and that the mydonefunc is executed only one time in each block it. The treeBroadcast and treeBarrier run without a problem. 

apps/sample-c/spTest.bb is the test program used to test the library of spanning tree where we use a while loop which check a variable spFinished. spFinished is initialized to 0 and
when mydonefunc is executed it is set to 1. And it is the problem why when mydonefunc is executed several times, it creates a bug.


COORDINATE LIBRARY
First important thing is that if you use this system all the blocks in the ensemble have to be on the same orientation.

src-bobby/system/coordinate.bb and src-bobby/system/coordinate.bbh this library use the same coordinate system in the game. 

apps/sample-c/testCoordinate.bb is the test program for using the library. We have to wait for the coordinate to be placed before sending any data so, there is a timeout in the program which wait for 2 seconds the initCoordination to be complete.
this timeout depend on the number of block.


These are the function used for the library:

void  initCoordination(uint16_t id, MsgHandler donefunc); 
// it is the function which give coordinates to all the blocks and make each blocks share their coordinates to each other, the block with the ID id will be the origin with the coordinate (0, 0, 0)
//the donefunc is the handler used when a virtual neighbor receives a data.

byte checkVirtualNeighbor(PRef port); 
//check if a virtual neighbor exist somewhere in case the neighbor at the port put in the argument is vacant
//if a virtual neighbor exist return 1 and if not return 0

void sendDataToVirtualNeighbor(PRef port,byte *data, byte size);
//send a data to a virtual neighbor to the port where the real neighbor should have been detected.

There is a lot of broadcast message during the step of sharing the coordinates so an ensemble with several blocks may have some bugs.
