
arch-blocks/test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005414  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000126  00802000  00005414  000054c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000005c2  00802126  00802126  000055ee  2**0
                  ALLOC
  3 .eeprom       00000004  00810000  00810000  000055ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00005cdc  00000000  00000000  000055f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000012b7  00000000  00000000  0000b2d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000022  00000000  00000000  0000c587  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000460  00000000  00000000  0000c5a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0000cc07  00000000  00000000  0000ca09  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00003a7d  00000000  00000000  00019610  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000344f  00000000  00000000  0001d08d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00001d4c  00000000  00000000  000204dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00003217  00000000  00000000  00022228  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00005fd3  00000000  00000000  0002543f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000178  00000000  00000000  0002b412  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <__ctors_end>
       4:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
       8:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
       c:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      10:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      14:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      18:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      1c:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      20:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      24:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      28:	0c 94 0f 1d 	jmp	0x3a1e	; 0x3a1e <__vector_10>
      2c:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      30:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      34:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      38:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      3c:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      40:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      44:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      48:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      4c:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      50:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      54:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      58:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      5c:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      60:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      64:	0c 94 11 1c 	jmp	0x3822	; 0x3822 <__vector_25>
      68:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      6c:	0c 94 3d 1c 	jmp	0x387a	; 0x387a <__vector_27>
      70:	0c 94 fd 1a 	jmp	0x35fa	; 0x35fa <__vector_28>
      74:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      78:	0c 94 29 1b 	jmp	0x3652	; 0x3652 <__vector_30>
      7c:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      80:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      84:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      88:	0c 94 84 15 	jmp	0x2b08	; 0x2b08 <__vector_34>
      8c:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      90:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      94:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      98:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      9c:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      a0:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      a4:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      a8:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      ac:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      b0:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      b4:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      b8:	0c 94 c3 15 	jmp	0x2b86	; 0x2b86 <__vector_46>
      bc:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      c0:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      c4:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      c8:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      cc:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      d0:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      d4:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      d8:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      dc:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      e0:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      e4:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      e8:	0c 94 b5 1b 	jmp	0x376a	; 0x376a <__vector_58>
      ec:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      f0:	0c 94 e1 1b 	jmp	0x37c2	; 0x37c2 <__vector_60>
      f4:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      f8:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      fc:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     100:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     104:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     108:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     10c:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     110:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     114:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     118:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     11c:	0c 94 56 1d 	jmp	0x3aac	; 0x3aac <__vector_71>
     120:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     124:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     128:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     12c:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     130:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     134:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     138:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     13c:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     140:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     144:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     148:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     14c:	0c 94 32 1e 	jmp	0x3c64	; 0x3c64 <__vector_83>
     150:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     154:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     158:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     15c:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     160:	0c 94 6d 1c 	jmp	0x38da	; 0x38da <__vector_88>
     164:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     168:	0c 94 99 1c 	jmp	0x3932	; 0x3932 <__vector_90>
     16c:	0c 94 a1 1a 	jmp	0x3542	; 0x3542 <__vector_91>
     170:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     174:	0c 94 cd 1a 	jmp	0x359a	; 0x359a <__vector_93>
     178:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     17c:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     180:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     184:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     188:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     18c:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     190:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     194:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     198:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     19c:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     1a0:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     1a4:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     1a8:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     1ac:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     1b0:	0c 94 22 16 	jmp	0x2c44	; 0x2c44 <__vector_108>
     1b4:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     1b8:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     1bc:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     1c0:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     1c4:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     1c8:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     1cc:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     1d0:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     1d4:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     1d8:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     1dc:	0c 94 59 1b 	jmp	0x36b2	; 0x36b2 <__vector_119>
     1e0:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     1e4:	0c 94 85 1b 	jmp	0x370a	; 0x370a <__vector_121>

000001e8 <__c.1975>:
     1e8:	6e 61 6e 00                                         nan.

000001ec <__c.1973>:
     1ec:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     1fc:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     20c:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     21c:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     22c:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     23c:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     24c:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     25c:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     26c:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     27c:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     28c:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     29c:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     2ac:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     2bc:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     2cc:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     2dc:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000002ea <__ctors_end>:
     2ea:	11 24       	eor	r1, r1
     2ec:	1f be       	out	0x3f, r1	; 63
     2ee:	cf ef       	ldi	r28, 0xFF	; 255
     2f0:	df e5       	ldi	r29, 0x5F	; 95
     2f2:	de bf       	out	0x3e, r29	; 62
     2f4:	cd bf       	out	0x3d, r28	; 61
     2f6:	00 e0       	ldi	r16, 0x00	; 0
     2f8:	0c bf       	out	0x3c, r16	; 60

000002fa <__do_copy_data>:
     2fa:	11 e2       	ldi	r17, 0x21	; 33
     2fc:	a0 e0       	ldi	r26, 0x00	; 0
     2fe:	b0 e2       	ldi	r27, 0x20	; 32
     300:	e4 e1       	ldi	r30, 0x14	; 20
     302:	f4 e5       	ldi	r31, 0x54	; 84
     304:	00 e0       	ldi	r16, 0x00	; 0
     306:	0b bf       	out	0x3b, r16	; 59
     308:	02 c0       	rjmp	.+4      	; 0x30e <__do_copy_data+0x14>
     30a:	07 90       	elpm	r0, Z+
     30c:	0d 92       	st	X+, r0
     30e:	a6 32       	cpi	r26, 0x26	; 38
     310:	b1 07       	cpc	r27, r17
     312:	d9 f7       	brne	.-10     	; 0x30a <__do_copy_data+0x10>

00000314 <__do_clear_bss>:
     314:	16 e2       	ldi	r17, 0x26	; 38
     316:	a6 e2       	ldi	r26, 0x26	; 38
     318:	b1 e2       	ldi	r27, 0x21	; 33
     31a:	01 c0       	rjmp	.+2      	; 0x31e <.do_clear_bss_start>

0000031c <.do_clear_bss_loop>:
     31c:	1d 92       	st	X+, r1

0000031e <.do_clear_bss_start>:
     31e:	a8 3e       	cpi	r26, 0xE8	; 232
     320:	b1 07       	cpc	r27, r17
     322:	e1 f7       	brne	.-8      	; 0x31c <.do_clear_bss_loop>
     324:	0e 94 77 23 	call	0x46ee	; 0x46ee <main>
     328:	0c 94 08 2a 	jmp	0x5410	; 0x5410 <_exit>

0000032c <__bad_interrupt>:
     32c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000330 <myMain>:
void getCmdData(void);

void myMain(void)
{

  setColor(WHITE);
     330:	86 e0       	ldi	r24, 0x06	; 6
     332:	0e 94 df 07 	call	0xfbe	; 0xfbe <setColor>
     336:	ff cf       	rjmp	.-2      	; 0x336 <myMain+0x6>

00000338 <getCmdData>:
  
  while(1);
}

void getCmdData(void)
{
     338:	cf 93       	push	r28
     33a:	df 93       	push	r29
     33c:	cd b7       	in	r28, 0x3d	; 61
     33e:	de b7       	in	r29, 0x3e	; 62
     340:	c6 59       	subi	r28, 0x96	; 150
     342:	d1 09       	sbc	r29, r1
     344:	cd bf       	out	0x3d, r28	; 61
     346:	de bf       	out	0x3e, r29	; 62
  #ifdef LOG_DEBUG
  char s[150];
  switch (thisChunk->data[3]){ //thisChunk->data[3] always = 0, can't figure out WHY???
     348:	e0 91 4f 21 	lds	r30, 0x214F
     34c:	f0 91 50 21 	lds	r31, 0x2150
     350:	83 81       	ldd	r24, Z+3	; 0x03
     352:	84 30       	cpi	r24, 0x04	; 4
     354:	51 f1       	breq	.+84     	; 0x3aa <getCmdData+0x72>
     356:	48 f4       	brcc	.+18     	; 0x36a <getCmdData+0x32>
     358:	81 30       	cpi	r24, 0x01	; 1
     35a:	a9 f0       	breq	.+42     	; 0x386 <getCmdData+0x4e>
     35c:	70 f0       	brcs	.+28     	; 0x37a <getCmdData+0x42>
     35e:	82 30       	cpi	r24, 0x02	; 2
     360:	c1 f0       	breq	.+48     	; 0x392 <getCmdData+0x5a>
     362:	83 30       	cpi	r24, 0x03	; 3
     364:	09 f0       	breq	.+2      	; 0x368 <getCmdData+0x30>
     366:	3f c0       	rjmp	.+126    	; 0x3e6 <getCmdData+0xae>
     368:	1a c0       	rjmp	.+52     	; 0x39e <getCmdData+0x66>
     36a:	86 30       	cpi	r24, 0x06	; 6
     36c:	51 f1       	breq	.+84     	; 0x3c2 <getCmdData+0x8a>
     36e:	18 f1       	brcs	.+70     	; 0x3b6 <getCmdData+0x7e>
     370:	87 30       	cpi	r24, 0x07	; 7
     372:	69 f1       	breq	.+90     	; 0x3ce <getCmdData+0x96>
     374:	88 30       	cpi	r24, 0x08	; 8
     376:	b9 f5       	brne	.+110    	; 0x3e6 <getCmdData+0xae>
     378:	30 c0       	rjmp	.+96     	; 0x3da <getCmdData+0xa2>
    case 0:
      setColor(RED);
     37a:	80 e0       	ldi	r24, 0x00	; 0
     37c:	0e 94 df 07 	call	0xfbe	; 0xfbe <setColor>
      snprintf(s, 150*sizeof(char), "color change to RED");
     380:	67 e2       	ldi	r22, 0x27	; 39
     382:	70 e2       	ldi	r23, 0x20	; 32
     384:	35 c0       	rjmp	.+106    	; 0x3f0 <getCmdData+0xb8>
    break;
    case 1:
      setColor(ORANGE);
     386:	81 e0       	ldi	r24, 0x01	; 1
     388:	0e 94 df 07 	call	0xfbe	; 0xfbe <setColor>
      snprintf(s, 150*sizeof(char), "color change to ORANGE");
     38c:	6b e3       	ldi	r22, 0x3B	; 59
     38e:	70 e2       	ldi	r23, 0x20	; 32
     390:	2f c0       	rjmp	.+94     	; 0x3f0 <getCmdData+0xb8>
    break;
    case 2:
      setColor(YELLOW);
     392:	82 e0       	ldi	r24, 0x02	; 2
     394:	0e 94 df 07 	call	0xfbe	; 0xfbe <setColor>
      snprintf(s, 150*sizeof(char), "color change to YELLOW");
     398:	62 e5       	ldi	r22, 0x52	; 82
     39a:	70 e2       	ldi	r23, 0x20	; 32
     39c:	29 c0       	rjmp	.+82     	; 0x3f0 <getCmdData+0xb8>
    break;
    case 3:
      setColor(GREEN);
     39e:	83 e0       	ldi	r24, 0x03	; 3
     3a0:	0e 94 df 07 	call	0xfbe	; 0xfbe <setColor>
      snprintf(s, 150*sizeof(char), "color change to GREEN");
     3a4:	69 e6       	ldi	r22, 0x69	; 105
     3a6:	70 e2       	ldi	r23, 0x20	; 32
     3a8:	23 c0       	rjmp	.+70     	; 0x3f0 <getCmdData+0xb8>
    break;
    case 4:
      setColor(AQUA);
     3aa:	84 e0       	ldi	r24, 0x04	; 4
     3ac:	0e 94 df 07 	call	0xfbe	; 0xfbe <setColor>
      snprintf(s, 150*sizeof(char), "color change to AQUA");
     3b0:	6f e7       	ldi	r22, 0x7F	; 127
     3b2:	70 e2       	ldi	r23, 0x20	; 32
     3b4:	1d c0       	rjmp	.+58     	; 0x3f0 <getCmdData+0xb8>
    break;
    case 5:
      setColor(BLUE);
     3b6:	85 e0       	ldi	r24, 0x05	; 5
     3b8:	0e 94 df 07 	call	0xfbe	; 0xfbe <setColor>
      snprintf(s, 150*sizeof(char), "color change to BLUE");
     3bc:	64 e9       	ldi	r22, 0x94	; 148
     3be:	70 e2       	ldi	r23, 0x20	; 32
     3c0:	17 c0       	rjmp	.+46     	; 0x3f0 <getCmdData+0xb8>
    break;
    case 6:
      setColor(WHITE);
     3c2:	86 e0       	ldi	r24, 0x06	; 6
     3c4:	0e 94 df 07 	call	0xfbe	; 0xfbe <setColor>
      snprintf(s, 150*sizeof(char), "color change to WHITE");
     3c8:	69 ea       	ldi	r22, 0xA9	; 169
     3ca:	70 e2       	ldi	r23, 0x20	; 32
     3cc:	11 c0       	rjmp	.+34     	; 0x3f0 <getCmdData+0xb8>
    break;
    case 7:
      setColor(PURPLE);
     3ce:	87 e0       	ldi	r24, 0x07	; 7
     3d0:	0e 94 df 07 	call	0xfbe	; 0xfbe <setColor>
      snprintf(s, 150*sizeof(char), "color change to PURPLE");
     3d4:	6f eb       	ldi	r22, 0xBF	; 191
     3d6:	70 e2       	ldi	r23, 0x20	; 32
     3d8:	0b c0       	rjmp	.+22     	; 0x3f0 <getCmdData+0xb8>
    break;
    case 8:
      setColor(PINK);
     3da:	88 e0       	ldi	r24, 0x08	; 8
     3dc:	0e 94 df 07 	call	0xfbe	; 0xfbe <setColor>
      snprintf(s, 150*sizeof(char), "color change to PINK");
     3e0:	66 ed       	ldi	r22, 0xD6	; 214
     3e2:	70 e2       	ldi	r23, 0x20	; 32
     3e4:	05 c0       	rjmp	.+10     	; 0x3f0 <getCmdData+0xb8>
    break;
    default:
      setIntensity(0);
     3e6:	80 e0       	ldi	r24, 0x00	; 0
     3e8:	0e 94 f9 07 	call	0xff2	; 0xff2 <setIntensity>
      snprintf(s, 150*sizeof(char), "UNKNOWN COMMAND");
     3ec:	6b ee       	ldi	r22, 0xEB	; 235
     3ee:	70 e2       	ldi	r23, 0x20	; 32
     3f0:	ce 01       	movw	r24, r28
     3f2:	01 96       	adiw	r24, 0x01	; 1
     3f4:	0e 94 f7 28 	call	0x51ee	; 0x51ee <strcpy>
    break;
  }      
  s[149] = '\0';
     3f8:	ca 56       	subi	r28, 0x6A	; 106
     3fa:	df 4f       	sbci	r29, 0xFF	; 255
     3fc:	18 82       	st	Y, r1
     3fe:	c6 59       	subi	r28, 0x96	; 150
     400:	d0 40       	sbci	r29, 0x00	; 0
  printDebug(s);
     402:	ce 01       	movw	r24, r28
     404:	01 96       	adiw	r24, 0x01	; 1
     406:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <printDebug>
  #endif
}
     40a:	ca 56       	subi	r28, 0x6A	; 106
     40c:	df 4f       	sbci	r29, 0xFF	; 255
     40e:	cd bf       	out	0x3d, r28	; 61
     410:	de bf       	out	0x3e, r29	; 62
     412:	df 91       	pop	r29
     414:	cf 91       	pop	r28
     416:	08 95       	ret

00000418 <userRegistration>:

void userRegistration(void)
{
	registerHandler(SYSTEM_MAIN, (GenericHandler)&myMain);
     418:	68 e9       	ldi	r22, 0x98	; 152
     41a:	71 e0       	ldi	r23, 0x01	; 1
     41c:	81 e0       	ldi	r24, 0x01	; 1
     41e:	0e 94 9c 07 	call	0xf38	; 0xf38 <registerHandler>
	registerHandler(EVENT_COMMAND_RECEIVED, (GenericHandler)&getCmdData);
     422:	6c e9       	ldi	r22, 0x9C	; 156
     424:	71 e0       	ldi	r23, 0x01	; 1
     426:	85 e1       	ldi	r24, 0x15	; 21
     428:	0c 94 9c 07 	jmp	0xf38	; 0xf38 <registerHandler>

0000042c <getAccelData>:

threadvar AccelData _acc;

AccelData getAccelData()
{
	return _acc;
     42c:	60 91 46 21 	lds	r22, 0x2146
     430:	70 91 47 21 	lds	r23, 0x2147
}
     434:	80 91 48 21 	lds	r24, 0x2148
     438:	90 91 49 21 	lds	r25, 0x2149
     43c:	08 95       	ret

0000043e <newAccelData>:

int newAccelData()
{
	return newHWAccelData();
     43e:	0c 94 87 14 	jmp	0x290e	; 0x290e <newHWAccelData>

00000442 <updateAccel>:
void updateAccel()
{
	//byte oldstatus = _acc.status & ACC_O_MASK;

	// this changes the _acc datastructure with new data, if available
	updateHWAccel();
     442:	0c 94 95 14 	jmp	0x292a	; 0x292a <updateHWAccel>

00000446 <blockTick>:
//
// Polling-based hack to step through and update block state, as necessary.
//
// Much of this can probably be done via ISRs and other state change triggers and this function eliminated.
void blockTick()
{
     446:	cf 93       	push	r28
    // and never do anything again
    pauseForever();
  }
#endif
  //int input;
  blockTickRunning = 1;
     448:	81 e0       	ldi	r24, 0x01	; 1
     44a:	90 e0       	ldi	r25, 0x00	; 0
     44c:	80 93 28 21 	sts	0x2128, r24
     450:	90 93 29 21 	sts	0x2129, r25
  
  if(accelReady){
     454:	80 91 26 21 	lds	r24, 0x2126
     458:	90 91 27 21 	lds	r25, 0x2127
     45c:	89 2b       	or	r24, r25
     45e:	31 f0       	breq	.+12     	; 0x46c <blockTick+0x26>
    if(newAccelData()){
     460:	0e 94 1f 02 	call	0x43e	; 0x43e <newAccelData>
     464:	89 2b       	or	r24, r25
     466:	11 f0       	breq	.+4      	; 0x46c <blockTick+0x26>
      updateAccel();
     468:	0e 94 21 02 	call	0x442	; 0x442 <updateAccel>
    }
  }
  
  checkTimeout();
     46c:	0e 94 5e 09 	call	0x12bc	; 0x12bc <checkTimeout>
  
  checkTimer();
     470:	0e 94 45 0a 	call	0x148a	; 0x148a <checkTimer>
  
  for(i = 0; i < NUM_PORTS; ++i)
     474:	c0 e0       	ldi	r28, 0x00	; 0
    {
      // read from serial
      processBuffer(i);
     476:	8c 2f       	mov	r24, r28
     478:	0e 94 6d 17 	call	0x2eda	; 0x2eda <processBuffer>
      
      // active messaging (handle at most one per port)
      handleOneMessage();
     47c:	0e 94 9c 03 	call	0x738	; 0x738 <handleOneMessage>
      
      //send packets/ACKS
      sendOnSerial(i);
     480:	8c 2f       	mov	r24, r28
     482:	0e 94 a0 18 	call	0x3140	; 0x3140 <sendOnSerial>
  
  checkTimeout();
  
  checkTimer();
  
  for(i = 0; i < NUM_PORTS; ++i)
     486:	cf 5f       	subi	r28, 0xFF	; 255
     488:	c6 30       	cpi	r28, 0x06	; 6
     48a:	a9 f7       	brne	.-22     	; 0x476 <blockTick+0x30>
      
      //send packets/ACKS
      sendOnSerial(i);
    }
  
  executeHandlers();	
     48c:	0e 94 ee 06 	call	0xddc	; 0xddc <executeHandlers>
  blockTickRunning = 0;
     490:	10 92 28 21 	sts	0x2128, r1
     494:	10 92 29 21 	sts	0x2129, r1
  
}
     498:	cf 91       	pop	r28
     49a:	08 95       	ret

0000049c <initBlock>:

// Ties all the horrifying subfunctions together into one simple function
void initBlock()
{
	//software initialization
	initHandlers();
     49c:	0e 94 d5 06 	call	0xdaa	; 0xdaa <initHandlers>

	//hardware related initialization
	initTime();
     4a0:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <initTime>

	initializeMemory();
     4a4:	0e 94 09 08 	call	0x1012	; 0x1012 <initializeMemory>

	initPorts();
     4a8:	0e 94 0e 09 	call	0x121c	; 0x121c <initPorts>
#ifdef DEBUG
	initDebug();
    	//printf("System Debug Enabled\r\n");
#endif

	initDataLink();	
     4ac:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <initDataLink>

   	initHWLED();
     4b0:	0e 94 58 19 	call	0x32b0	; 0x32b0 <initHWLED>
	//initAudio();

	initSystemMessage();
     4b4:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <initSystemMessage>
	initEnsemble();
     4b8:	0e 94 b0 06 	call	0xd60	; 0xd60 <initEnsemble>

	initBlockTick();		// HW INITIALIZATION ROUTINE
     4bc:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <initBlockTick>

	initHWAccel();
     4c0:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <initHWAccel>
	accelReady=1;
     4c4:	81 e0       	ldi	r24, 0x01	; 1
     4c6:	90 e0       	ldi	r25, 0x00	; 0
     4c8:	80 93 26 21 	sts	0x2126, r24
     4cc:	90 93 27 21 	sts	0x2127, r25

#ifdef CLOCK_SYNC
	initClock();
#endif
#ifdef LOG_DEBUG
	initLogDebug();
     4d0:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <initLogDebug>
#endif

#ifndef BBSIM
    initHWMic();
     4d4:	0c 94 37 1d 	jmp	0x3a6e	; 0x3a6e <initHWMic>

000004d8 <setUID>:
threadextern blockConf conf;

// sets local copy of UID
void setUID(uint16_t newID)
{
    conf.UID = newID;
     4d8:	80 93 0f 22 	sts	0x220F, r24
     4dc:	90 93 10 22 	sts	0x2210, r25
     4e0:	08 95       	ret

000004e2 <setAndStoreUID>:
}

// sets local copy of UID and stores in EEPROM
void setAndStoreUID(uint16_t newID)
{
    conf.UID = newID;
     4e2:	80 93 0f 22 	sts	0x220F, r24
     4e6:	90 93 10 22 	sts	0x2210, r25
    store(&nv_conf, &conf, sizeof(blockConf));
     4ea:	44 e0       	ldi	r20, 0x04	; 4
     4ec:	50 e0       	ldi	r21, 0x00	; 0
     4ee:	6f e0       	ldi	r22, 0x0F	; 15
     4f0:	72 e2       	ldi	r23, 0x22	; 34
     4f2:	80 e0       	ldi	r24, 0x00	; 0
     4f4:	90 e0       	ldi	r25, 0x00	; 0
     4f6:	0c 94 88 19 	jmp	0x3310	; 0x3310 <store>

000004fa <jumpToBootSection>:

// Jumps into the bootloader section.  This function never returns.
// Note that this function only works if the BOOTRST fuse is set to Boot Loader Reset
void jumpToBootSection()
{
	jumpToHWBootSection();
     4fa:	0c 94 51 16 	jmp	0x2ca2	; 0x2ca2 <jumpToHWBootSection>

000004fe <push>:
#ifndef BBSIM
#include "util/atomic.h"
#endif

void push(byte data, CircBuf * b)
{ 
     4fe:	fb 01       	movw	r30, r22
  #ifndef BBSIM
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     500:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     502:	f8 94       	cli
  {
  #endif

    b->buf[b->end++] = data;
     504:	97 8d       	ldd	r25, Z+31	; 0x1f
     506:	db 01       	movw	r26, r22
     508:	a9 0f       	add	r26, r25
     50a:	b1 1d       	adc	r27, r1
     50c:	8c 93       	st	X, r24
     50e:	89 2f       	mov	r24, r25
     510:	8f 5f       	subi	r24, 0xFF	; 255

    if(b->end == CIRC_BUF_LEN)
     512:	8e 31       	cpi	r24, 0x1E	; 30
     514:	11 f0       	breq	.+4      	; 0x51a <push+0x1c>
  #ifndef BBSIM
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
  {
  #endif

    b->buf[b->end++] = data;
     516:	87 8f       	std	Z+31, r24	; 0x1f
     518:	01 c0       	rjmp	.+2      	; 0x51c <push+0x1e>

    if(b->end == CIRC_BUF_LEN)
    {
      b->end = 0;
     51a:	17 8e       	std	Z+31, r1	; 0x1f
    }

    if(b->end == b->start)
     51c:	87 8d       	ldd	r24, Z+31	; 0x1f
     51e:	96 8d       	ldd	r25, Z+30	; 0x1e
     520:	89 17       	cp	r24, r25
     522:	11 f0       	breq	.+4      	; 0x528 <push+0x2a>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     524:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
     526:	08 95       	ret
    {
      b->start++;
     528:	8f 5f       	subi	r24, 0xFF	; 255
     52a:	86 8f       	std	Z+30, r24	; 0x1e
	
      if(b->start == CIRC_BUF_LEN)
     52c:	8e 31       	cpi	r24, 0x1E	; 30
     52e:	d1 f7       	brne	.-12     	; 0x524 <push+0x26>
	  {
	    b->start = 0;
     530:	16 8e       	std	Z+30, r1	; 0x1e
     532:	f8 cf       	rjmp	.-16     	; 0x524 <push+0x26>

00000534 <pop>:
  }
  #endif
}

int pop(CircBuf * b)
{
     534:	fc 01       	movw	r30, r24
  return data;
}

byte isEmpty(CircBuf * b)
{
  if(b->start == b->end)
     536:	96 8d       	ldd	r25, Z+30	; 0x1e
     538:	87 8d       	ldd	r24, Z+31	; 0x1f
     53a:	98 13       	cpse	r25, r24
     53c:	08 c0       	rjmp	.+16     	; 0x54e <pop+0x1a>
     53e:	04 c0       	rjmp	.+8      	; 0x548 <pop+0x14>
  #endif
    data = b->buf[b->start++];
  
    if(b->start == CIRC_BUF_LEN)
    {
      b->start = 0;
     540:	16 8e       	std	Z+30, r1	; 0x1e
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     542:	9f bf       	out	0x3f, r25	; 63
    }
  #ifndef BBSIM
  }
  #endif
  
  return data;
     544:	30 e0       	ldi	r19, 0x00	; 0
     546:	0f c0       	rjmp	.+30     	; 0x566 <pop+0x32>
{
  uint8_t data;

  if( isEmpty(b) )
  {
	return -1;
     548:	2f ef       	ldi	r18, 0xFF	; 255
     54a:	3f ef       	ldi	r19, 0xFF	; 255
     54c:	0c c0       	rjmp	.+24     	; 0x566 <pop+0x32>
  }
  #ifndef BBSIM
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     54e:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     550:	f8 94       	cli
  {
  #endif
    data = b->buf[b->start++];
     552:	86 8d       	ldd	r24, Z+30	; 0x1e
     554:	df 01       	movw	r26, r30
     556:	a8 0f       	add	r26, r24
     558:	b1 1d       	adc	r27, r1
     55a:	2c 91       	ld	r18, X
     55c:	8f 5f       	subi	r24, 0xFF	; 255
  
    if(b->start == CIRC_BUF_LEN)
     55e:	8e 31       	cpi	r24, 0x1E	; 30
     560:	79 f3       	breq	.-34     	; 0x540 <pop+0xc>
  }
  #ifndef BBSIM
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
  {
  #endif
    data = b->buf[b->start++];
     562:	86 8f       	std	Z+30, r24	; 0x1e
     564:	ee cf       	rjmp	.-36     	; 0x542 <pop+0xe>
  #ifndef BBSIM
  }
  #endif
  
  return data;
}
     566:	c9 01       	movw	r24, r18
     568:	08 95       	ret

0000056a <isEmpty>:

byte isEmpty(CircBuf * b)
{
     56a:	fc 01       	movw	r30, r24
  if(b->start == b->end)
     56c:	81 e0       	ldi	r24, 0x01	; 1
     56e:	26 8d       	ldd	r18, Z+30	; 0x1e
     570:	97 8d       	ldd	r25, Z+31	; 0x1f
     572:	29 13       	cpse	r18, r25
     574:	80 e0       	ldi	r24, 0x00	; 0
  {
    return 1;
  }
  return 0;
}
     576:	08 95       	ret

00000578 <defaultMsgHandler>:
/////////////////// PROTECTED FUNCTIONS ///////////////////
// default message handler - does nothing
byte defaultMsgHandler(void)
{
    return 1;
}
     578:	81 e0       	ldi	r24, 0x01	; 1
     57a:	08 95       	ret

0000057c <reservedSystemHandler>:
//   using 0x0000 as message handler allows blocks 
//   running different programs to communicate at the system level.
byte reservedSystemHandler(void)
{
    // bogus
    if(thisChunk == NULL) {
     57c:	e0 91 4f 21 	lds	r30, 0x214F
     580:	f0 91 50 21 	lds	r31, 0x2150
     584:	30 97       	sbiw	r30, 0x00	; 0
     586:	79 f0       	breq	.+30     	; 0x5a6 <reservedSystemHandler+0x2a>
        return 0;
    }
  
    // find msg type and check
    switch( thisChunk->data[0] )
     588:	80 81       	ld	r24, Z
     58a:	80 35       	cpi	r24, 0x50	; 80
     58c:	51 f0       	breq	.+20     	; 0x5a2 <reservedSystemHandler+0x26>
     58e:	8f 3f       	cpi	r24, 0xFF	; 255
     590:	19 f0       	breq	.+6      	; 0x598 <reservedSystemHandler+0x1c>
     592:	81 30       	cpi	r24, 0x01	; 1
     594:	41 f4       	brne	.+16     	; 0x5a6 <reservedSystemHandler+0x2a>
     596:	02 c0       	rjmp	.+4      	; 0x59c <reservedSystemHandler+0x20>
	                break;
	            }
	            i++;
	        }
	        // consistent
    	    jumpToBootSection();
     598:	0e 94 7d 02 	call	0x4fa	; 0x4fa <jumpToBootSection>
        }
        case NEIGHBOR_MSG:
            handleNeighborMessage();
     59c:	0e 94 28 05 	call	0xa50	; 0xa50 <handleNeighborMessage>
            break;
     5a0:	02 c0       	rjmp	.+4      	; 0x5a6 <reservedSystemHandler+0x2a>
#ifdef LOG_DEBUG
        case LOG_MSG:
			handleLogMessage();
     5a2:	0e 94 17 0c 	call	0x182e	; 0x182e <handleLogMessage>
        default:
            break;
    }
  
    return 0;
}
     5a6:	80 e0       	ldi	r24, 0x00	; 0
     5a8:	08 95       	ret

000005aa <removeFromSq>:
// inputs:  port
// output:  1-success, 0-failure
byte removeFromSq(PRef p, byte response)
{
    // empty or bad
    if( (p >= NUM_PORTS) || (port[p].sq.head == NULL) ) 
     5aa:	86 30       	cpi	r24, 0x06	; 6
     5ac:	08 f0       	brcs	.+2      	; 0x5b0 <removeFromSq+0x6>
     5ae:	3f c0       	rjmp	.+126    	; 0x62e <removeFromSq+0x84>
     5b0:	98 e5       	ldi	r25, 0x58	; 88
     5b2:	89 9f       	mul	r24, r25
     5b4:	f0 01       	movw	r30, r0
     5b6:	11 24       	eor	r1, r1
     5b8:	ec 5a       	subi	r30, 0xAC	; 172
     5ba:	fb 4d       	sbci	r31, 0xDB	; 219
     5bc:	87 85       	ldd	r24, Z+15	; 0x0f
     5be:	90 89       	ldd	r25, Z+16	; 0x10
     5c0:	89 2b       	or	r24, r25
     5c2:	a9 f1       	breq	.+106    	; 0x62e <removeFromSq+0x84>
    {
        return 0;
    }

    BB_LOCK(SQ_LOCK)
     5c4:	2f b7       	in	r18, 0x3f	; 63
     5c6:	f8 94       	cli

    // get the first Chunk
    thisChunk = port[p].sq.head;
     5c8:	a7 85       	ldd	r26, Z+15	; 0x0f
     5ca:	b0 89       	ldd	r27, Z+16	; 0x10

    // move the head of the queue
    port[p].sq.head = thisChunk->next;
     5cc:	52 96       	adiw	r26, 0x12	; 18
     5ce:	8d 91       	ld	r24, X+
     5d0:	9c 91       	ld	r25, X
     5d2:	53 97       	sbiw	r26, 0x13	; 19
     5d4:	87 87       	std	Z+15, r24	; 0x0f
     5d6:	90 8b       	std	Z+16, r25	; 0x10

    // tail was pointing to head, remove tail as well
    if( port[p].sq.head == NULL ) 
     5d8:	89 2b       	or	r24, r25
     5da:	a1 f0       	breq	.+40     	; 0x604 <removeFromSq+0x5a>
     5dc:	a0 93 4f 21 	sts	0x214F, r26
     5e0:	b0 93 50 21 	sts	0x2150, r27
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     5e4:	2f bf       	out	0x3f, r18	; 63
    // otherwise, leave it to what it was pointing to

    BB_UNLOCK(SQ_LOCK)

    // remove thisChunk's references to queue
    thisChunk->next = NULL;
     5e6:	a0 91 4f 21 	lds	r26, 0x214F
     5ea:	b0 91 50 21 	lds	r27, 0x2150
     5ee:	52 96       	adiw	r26, 0x12	; 18
     5f0:	1d 92       	st	X+, r1
     5f2:	1c 92       	st	X, r1
     5f4:	53 97       	sbiw	r26, 0x13	; 19

    if(thisChunk->callback != NULL)
     5f6:	56 96       	adiw	r26, 0x16	; 22
     5f8:	ed 91       	ld	r30, X+
     5fa:	fc 91       	ld	r31, X
     5fc:	57 97       	sbiw	r26, 0x17	; 23
     5fe:	30 97       	sbiw	r30, 0x00	; 0
     600:	39 f4       	brne	.+14     	; 0x610 <removeFromSq+0x66>
     602:	0f c0       	rjmp	.+30     	; 0x622 <removeFromSq+0x78>
    port[p].sq.head = thisChunk->next;

    // tail was pointing to head, remove tail as well
    if( port[p].sq.head == NULL ) 
    {
        port[p].sq.tail   = NULL;
     604:	11 8a       	std	Z+17, r1	; 0x11
     606:	12 8a       	std	Z+18, r1	; 0x12
        port[p].sq.flags &= ~CHUNK_READY;
     608:	86 85       	ldd	r24, Z+14	; 0x0e
     60a:	8f 77       	andi	r24, 0x7F	; 127
     60c:	86 87       	std	Z+14, r24	; 0x0e
     60e:	e6 cf       	rjmp	.-52     	; 0x5dc <removeFromSq+0x32>
    thisChunk->next = NULL;

    if(thisChunk->callback != NULL)
    {
        // set response type for callback
        setChunkResponse(thisChunk, response);
     610:	68 71       	andi	r22, 0x18	; 24
     612:	51 96       	adiw	r26, 0x11	; 17
     614:	8c 91       	ld	r24, X
     616:	51 97       	sbiw	r26, 0x11	; 17
     618:	87 7e       	andi	r24, 0xE7	; 231
     61a:	68 2b       	or	r22, r24
     61c:	51 96       	adiw	r26, 0x11	; 17
     61e:	6c 93       	st	X, r22
	
        // execute callback to clear memory and other user actions
        (thisChunk->callback)();
     620:	19 95       	eicall
    }

    // we assume that the callback has freed memory
    thisChunk = NULL;
     622:	10 92 4f 21 	sts	0x214F, r1
     626:	10 92 50 21 	sts	0x2150, r1
    return 1;
     62a:	81 e0       	ldi	r24, 0x01	; 1
     62c:	08 95       	ret
byte removeFromSq(PRef p, byte response)
{
    // empty or bad
    if( (p >= NUM_PORTS) || (port[p].sq.head == NULL) ) 
    {
        return 0;
     62e:	80 e0       	ldi	r24, 0x00	; 0
    }

    // we assume that the callback has freed memory
    thisChunk = NULL;
    return 1;
}
     630:	08 95       	ret

00000632 <flushSendQueue>:

// flush a send queue (used when retries fails)
void flushSendQueue(PRef p)
{
     632:	cf 93       	push	r28
     634:	c8 2f       	mov	r28, r24
#ifdef LOG_DEBUG
	if (isHostPort(p)) {
     636:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <isHostPort>
     63a:	88 23       	and	r24, r24
     63c:	29 f0       	breq	.+10     	; 0x648 <flushSendQueue+0x16>
		removeFromSq(p, MSG_RESP_NOREPLY); // ONLY ONE
     63e:	68 e1       	ldi	r22, 0x18	; 24
     640:	8c 2f       	mov	r24, r28
    if(p < NUM_PORTS)
    {
        // flush buffer (call all callbacks as if all messages failed)
        while( removeFromSq(p, MSG_RESP_NOREPLY) );
    }
}
     642:	cf 91       	pop	r28
// flush a send queue (used when retries fails)
void flushSendQueue(PRef p)
{
#ifdef LOG_DEBUG
	if (isHostPort(p)) {
		removeFromSq(p, MSG_RESP_NOREPLY); // ONLY ONE
     644:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <removeFromSq>
		return;
	}
#endif
    if(p < NUM_PORTS)
     648:	c6 30       	cpi	r28, 0x06	; 6
     64a:	30 f4       	brcc	.+12     	; 0x658 <flushSendQueue+0x26>
    {
        // flush buffer (call all callbacks as if all messages failed)
        while( removeFromSq(p, MSG_RESP_NOREPLY) );
     64c:	68 e1       	ldi	r22, 0x18	; 24
     64e:	8c 2f       	mov	r24, r28
     650:	0e 94 d5 02 	call	0x5aa	; 0x5aa <removeFromSq>
     654:	81 11       	cpse	r24, r1
     656:	fa cf       	rjmp	.-12     	; 0x64c <flushSendQueue+0x1a>
    }
}
     658:	cf 91       	pop	r28
     65a:	08 95       	ret

0000065c <setupChunk>:
//          mh - handler for this message
//          cb - callback on send failure
// outputs: 1 - chunk correctly formatted
//          0 - inputs contained error, format failed
byte setupChunk(Chunk* c, PRef p, byte * msg, byte length, MsgHandler mh, GenericHandler cb)
{
     65c:	ef 92       	push	r14
     65e:	ff 92       	push	r15
     660:	0f 93       	push	r16
     662:	1f 93       	push	r17
     664:	cf 93       	push	r28
     666:	df 93       	push	r29
     668:	ec 01       	movw	r28, r24
     66a:	ca 01       	movw	r24, r20
    // invalid Chunk, invalid port, message too long, or no message
    if( (c == NULL) || (p >= NUM_PORTS) || (length > DATA_SIZE) || (msg == NULL) )
     66c:	20 97       	sbiw	r28, 0x00	; 0
     66e:	51 f1       	breq	.+84     	; 0x6c4 <setupChunk+0x68>
     670:	66 30       	cpi	r22, 0x06	; 6
     672:	40 f5       	brcc	.+80     	; 0x6c4 <setupChunk+0x68>
     674:	22 31       	cpi	r18, 0x12	; 18
     676:	30 f5       	brcc	.+76     	; 0x6c4 <setupChunk+0x68>
     678:	00 97       	sbiw	r24, 0x00	; 0
     67a:	21 f1       	breq	.+72     	; 0x6c4 <setupChunk+0x68>
    {
        return 0;
    }

    // set the flags
    c->status = CHUNK_USED | CHUNK_FILLED | MSG_RESP_SENDING | port[p].pnum;
     67c:	38 e5       	ldi	r19, 0x58	; 88
     67e:	63 9f       	mul	r22, r19
     680:	f0 01       	movw	r30, r0
     682:	11 24       	eor	r1, r1
     684:	ec 5a       	subi	r30, 0xAC	; 172
     686:	fb 4d       	sbci	r31, 0xDB	; 219
     688:	30 81       	ld	r19, Z
     68a:	30 68       	ori	r19, 0x80	; 128
     68c:	39 8b       	std	Y+17, r19	; 0x11
    
    // clear out next pointer
    c->next = NULL;
     68e:	1a 8a       	std	Y+18, r1	; 0x12
     690:	1b 8a       	std	Y+19, r1	; 0x13

    // set message handler
    *((MsgHandler*)(c->handler)) = mh;
     692:	0c 8b       	std	Y+20, r16	; 0x14
     694:	1d 8b       	std	Y+21, r17	; 0x15

    // setup callback
    c->callback = cb;
     696:	ee 8a       	std	Y+22, r14	; 0x16
     698:	ff 8a       	std	Y+23, r15	; 0x17

    // copy message
    memcpy(c->data, msg, length);
     69a:	02 2f       	mov	r16, r18
     69c:	10 e0       	ldi	r17, 0x00	; 0
     69e:	42 2f       	mov	r20, r18
     6a0:	50 e0       	ldi	r21, 0x00	; 0
     6a2:	bc 01       	movw	r22, r24
     6a4:	ce 01       	movw	r24, r28
     6a6:	0e 94 e7 28 	call	0x51ce	; 0x51ce <memcpy>
    
    // 'zero' out extra bytes (use ff's)
    memset((c->data)+length, 0xFF, DATA_SIZE-length);
     6aa:	c0 0f       	add	r28, r16
     6ac:	d1 1f       	adc	r29, r17
     6ae:	41 e1       	ldi	r20, 0x11	; 17
     6b0:	50 e0       	ldi	r21, 0x00	; 0
     6b2:	40 1b       	sub	r20, r16
     6b4:	51 0b       	sbc	r21, r17
     6b6:	6f ef       	ldi	r22, 0xFF	; 255
     6b8:	70 e0       	ldi	r23, 0x00	; 0
     6ba:	ce 01       	movw	r24, r28
     6bc:	0e 94 f0 28 	call	0x51e0	; 0x51e0 <memset>
    
    return 1;
     6c0:	81 e0       	ldi	r24, 0x01	; 1
     6c2:	01 c0       	rjmp	.+2      	; 0x6c6 <setupChunk+0x6a>
byte setupChunk(Chunk* c, PRef p, byte * msg, byte length, MsgHandler mh, GenericHandler cb)
{
    // invalid Chunk, invalid port, message too long, or no message
    if( (c == NULL) || (p >= NUM_PORTS) || (length > DATA_SIZE) || (msg == NULL) )
    {
        return 0;
     6c4:	80 e0       	ldi	r24, 0x00	; 0
    
    // 'zero' out extra bytes (use ff's)
    memset((c->data)+length, 0xFF, DATA_SIZE-length);
    
    return 1;
}
     6c6:	df 91       	pop	r29
     6c8:	cf 91       	pop	r28
     6ca:	1f 91       	pop	r17
     6cc:	0f 91       	pop	r16
     6ce:	ff 90       	pop	r15
     6d0:	ef 90       	pop	r14
     6d2:	08 95       	ret

000006d4 <queueChunk>:
// outputs: 1 - chunk successfully queued
//          0 - error, chunk was not queued
byte queueChunk(Chunk* c)
{
    // null Chunk
    if(c == NULL)
     6d4:	00 97       	sbiw	r24, 0x00	; 0
     6d6:	71 f1       	breq	.+92     	; 0x734 <queueChunk+0x60>
    {
        return 0;    
    }
    
    byte p = faceNum(c);
     6d8:	dc 01       	movw	r26, r24
     6da:	51 96       	adiw	r26, 0x11	; 17
     6dc:	ec 91       	ld	r30, X
     6de:	e7 70       	andi	r30, 0x07	; 7
    
    if(p < NUM_PORTS)
     6e0:	e6 30       	cpi	r30, 0x06	; 6
     6e2:	30 f5       	brcc	.+76     	; 0x730 <queueChunk+0x5c>
            freeChunk(c);
            return 0;
        }
#endif    
    
        BB_LOCK(SQ_LOCK)
     6e4:	6f b7       	in	r22, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     6e6:	f8 94       	cli

        // add to queue - queue empty
        if( port[p].sq.head == NULL ) 
     6e8:	2e 2f       	mov	r18, r30
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	b8 e5       	ldi	r27, 0x58	; 88
     6ee:	eb 9f       	mul	r30, r27
     6f0:	f0 01       	movw	r30, r0
     6f2:	11 24       	eor	r1, r1
     6f4:	ec 5a       	subi	r30, 0xAC	; 172
     6f6:	fb 4d       	sbci	r31, 0xDB	; 219
     6f8:	47 85       	ldd	r20, Z+15	; 0x0f
     6fa:	50 89       	ldd	r21, Z+16	; 0x10
     6fc:	45 2b       	or	r20, r21
     6fe:	19 f4       	brne	.+6      	; 0x706 <queueChunk+0x32>
        {
            port[p].sq.head = c;
     700:	87 87       	std	Z+15, r24	; 0x0f
     702:	90 8b       	std	Z+16, r25	; 0x10
     704:	05 c0       	rjmp	.+10     	; 0x710 <queueChunk+0x3c>
        }
        // queue has stuff
        else 
        {
            port[p].sq.tail->next = c;
     706:	01 88       	ldd	r0, Z+17	; 0x11
     708:	f2 89       	ldd	r31, Z+18	; 0x12
     70a:	e0 2d       	mov	r30, r0
     70c:	82 8b       	std	Z+18, r24	; 0x12
     70e:	93 8b       	std	Z+19, r25	; 0x13
        }
        // add to tail and update flags
        port[p].sq.tail   = c;
     710:	48 e5       	ldi	r20, 0x58	; 88
     712:	42 9f       	mul	r20, r18
     714:	f0 01       	movw	r30, r0
     716:	43 9f       	mul	r20, r19
     718:	f0 0d       	add	r31, r0
     71a:	11 24       	eor	r1, r1
     71c:	ec 5a       	subi	r30, 0xAC	; 172
     71e:	fb 4d       	sbci	r31, 0xDB	; 219
     720:	81 8b       	std	Z+17, r24	; 0x11
     722:	92 8b       	std	Z+18, r25	; 0x12
        port[p].sq.flags |= CHUNK_READY;
     724:	86 85       	ldd	r24, Z+14	; 0x0e
     726:	80 68       	ori	r24, 0x80	; 128
     728:	86 87       	std	Z+14, r24	; 0x0e
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     72a:	6f bf       	out	0x3f, r22	; 63

        BB_UNLOCK(SQ_LOCK)

        return 1;
     72c:	81 e0       	ldi	r24, 0x01	; 1
     72e:	08 95       	ret
    }
    else
    {
        freeChunk(c);
     730:	0e 94 1a 08 	call	0x1034	; 0x1034 <freeChunk>
byte queueChunk(Chunk* c)
{
    // null Chunk
    if(c == NULL)
    {
        return 0;    
     734:	80 e0       	ldi	r24, 0x00	; 0
    else
    {
        freeChunk(c);
        return 0;
    }
}
     736:	08 95       	ret

00000738 <handleOneMessage>:
// returns: 1 - message processed
//          0 - no new messages
byte handleOneMessage()
{
    // set the global chunk that needs to be processed by the handler
    thisChunk = nextPacket();
     738:	0e 94 7b 18 	call	0x30f6	; 0x30f6 <nextPacket>
     73c:	80 93 4f 21 	sts	0x214F, r24
     740:	90 93 50 21 	sts	0x2150, r25

    // no packet, no action
    if( thisChunk == NULL )
     744:	00 97       	sbiw	r24, 0x00	; 0
     746:	69 f1       	breq	.+90     	; 0x7a2 <handleOneMessage+0x6a>
    {
        return 0;
    }

    // call handler
    if( *((MsgHandler*)thisChunk->handler) == RES_SYS_HANDLER ) 
     748:	dc 01       	movw	r26, r24
     74a:	54 96       	adiw	r26, 0x14	; 20
     74c:	ed 91       	ld	r30, X+
     74e:	fc 91       	ld	r31, X
     750:	55 97       	sbiw	r26, 0x15	; 21
     752:	30 97       	sbiw	r30, 0x00	; 0
     754:	19 f4       	brne	.+6      	; 0x75c <handleOneMessage+0x24>
    {
	    reservedSystemHandler();
     756:	0e 94 be 02 	call	0x57c	; 0x57c <reservedSystemHandler>
     75a:	01 c0       	rjmp	.+2      	; 0x75e <handleOneMessage+0x26>
    }
    else 
    {
	    (*((MsgHandler*)(thisChunk->handler)))();
     75c:	19 95       	eicall
    }

    // set flag to send ACK
    port[faceNum(thisChunk)].sq.flags |= setAck(thisChunk);
     75e:	80 91 4f 21 	lds	r24, 0x214F
     762:	90 91 50 21 	lds	r25, 0x2150
     766:	fc 01       	movw	r30, r24
     768:	21 89       	ldd	r18, Z+17	; 0x11
     76a:	e2 2f       	mov	r30, r18
     76c:	e7 70       	andi	r30, 0x07	; 7
     76e:	38 e5       	ldi	r19, 0x58	; 88
     770:	e3 9f       	mul	r30, r19
     772:	f0 01       	movw	r30, r0
     774:	11 24       	eor	r1, r1
     776:	ec 5a       	subi	r30, 0xAC	; 172
     778:	fb 4d       	sbci	r31, 0xDB	; 219
     77a:	25 fb       	bst	r18, 5
     77c:	44 27       	eor	r20, r20
     77e:	40 f9       	bld	r20, 0
     780:	21 e0       	ldi	r18, 0x01	; 1
     782:	30 e0       	ldi	r19, 0x00	; 0
     784:	01 c0       	rjmp	.+2      	; 0x788 <handleOneMessage+0x50>
     786:	22 0f       	add	r18, r18
     788:	4a 95       	dec	r20
     78a:	ea f7       	brpl	.-6      	; 0x786 <handleOneMessage+0x4e>
     78c:	36 85       	ldd	r19, Z+14	; 0x0e
     78e:	32 2b       	or	r19, r18
     790:	36 87       	std	Z+14, r19	; 0x0e

    // free the rx chunk
    freeChunk(thisChunk);
     792:	0e 94 1a 08 	call	0x1034	; 0x1034 <freeChunk>

    // reset the global chunk since memory is no longer valid
    thisChunk = NULL;
     796:	10 92 4f 21 	sts	0x214F, r1
     79a:	10 92 50 21 	sts	0x2150, r1

    return 1;
     79e:	81 e0       	ldi	r24, 0x01	; 1
     7a0:	08 95       	ret
    thisChunk = nextPacket();

    // no packet, no action
    if( thisChunk == NULL )
    {
        return 0;
     7a2:	80 e0       	ldi	r24, 0x00	; 0

    // reset the global chunk since memory is no longer valid
    thisChunk = NULL;

    return 1;
}
     7a4:	08 95       	ret

000007a6 <initDataLink>:

// initialization
void initDataLink()
{
    initHWDataLink();
     7a6:	0e 94 2f 19 	call	0x325e	; 0x325e <initHWDataLink>

    globalRq.head  = NULL;
     7aa:	10 92 4a 21 	sts	0x214A, r1
     7ae:	10 92 4b 21 	sts	0x214B, r1
    globalRq.tail  = NULL;
     7b2:	10 92 4c 21 	sts	0x214C, r1
     7b6:	10 92 4d 21 	sts	0x214D, r1
    globalRq.flags = 0;
     7ba:	10 92 4e 21 	sts	0x214E, r1
     7be:	08 95       	ret

000007c0 <initDebug>:
#include "debug.bbh"
#include "../hw-api/hwDebug.h"

void initDebug() 
{
  initHWDebug();
     7c0:	0c 94 cf 1f 	jmp	0x3f9e	; 0x3f9e <initHWDebug>

000007c4 <neighborKeepalive>:
    freeChunk(thisChunk);
}

// this is called periodically to verify neighbor is still there and in the right state
void neighborKeepalive(void)
{
     7c4:	0f 93       	push	r16
     7c6:	1f 93       	push	r17
     7c8:	cf 93       	push	r28
     7ca:	df 93       	push	r29
     7cc:	00 d0       	rcall	.+0      	; 0x7ce <neighborKeepalive+0xa>
     7ce:	00 d0       	rcall	.+0      	; 0x7d0 <neighborKeepalive+0xc>
     7d0:	cd b7       	in	r28, 0x3d	; 61
     7d2:	de b7       	in	r29, 0x3e	; 62
  // craft and send a keeplive message of the form:
  // [header] [myGUID][yourGUID]
  byte buf[6];
  buf[0] = NEIGHBOR_MSG;
     7d4:	81 e0       	ldi	r24, 0x01	; 1
     7d6:	89 83       	std	Y+1, r24	; 0x01
  buf[1] = MSG_NEIGHBOR_KEEPALIVE;
     7d8:	83 e0       	ldi	r24, 0x03	; 3
     7da:	8a 83       	std	Y+2, r24	; 0x02
  GUIDIntoChar(getGUID(), &(buf[2]));
     7dc:	0e 94 e4 19 	call	0x33c8	; 0x33c8 <getGUID>
threadvar Timer ttNeighbor[6];

// converts a UID into a passed in character stream.  Assumes 2-byte GUIDs.
void GUIDIntoChar(Uid id, byte * c)
{
    c[0] = (id >> 8) & 0x00FF;
     7e0:	9b 83       	std	Y+3, r25	; 0x03
    c[1] = (id & 0x00FF); 
     7e2:	8c 83       	std	Y+4, r24	; 0x04
  // [header] [myGUID][yourGUID]
  byte buf[6];
  buf[0] = NEIGHBOR_MSG;
  buf[1] = MSG_NEIGHBOR_KEEPALIVE;
  GUIDIntoChar(getGUID(), &(buf[2]));
  GUIDIntoChar(thisNeighborhood.n[thisTimeout->arg], &(buf[4]));
     7e4:	a0 91 64 26 	lds	r26, 0x2664
     7e8:	b0 91 65 26 	lds	r27, 0x2665
     7ec:	19 96       	adiw	r26, 0x09	; 9
     7ee:	8c 91       	ld	r24, X
     7f0:	19 97       	sbiw	r26, 0x09	; 9
     7f2:	90 e0       	ldi	r25, 0x00	; 0
     7f4:	fc 01       	movw	r30, r24
     7f6:	ee 0f       	add	r30, r30
     7f8:	ff 1f       	adc	r31, r31
     7fa:	ef 5a       	subi	r30, 0xAF	; 175
     7fc:	fe 4d       	sbci	r31, 0xDE	; 222
     7fe:	20 81       	ld	r18, Z
     800:	31 81       	ldd	r19, Z+1	; 0x01
threadvar Timer ttNeighbor[6];

// converts a UID into a passed in character stream.  Assumes 2-byte GUIDs.
void GUIDIntoChar(Uid id, byte * c)
{
    c[0] = (id >> 8) & 0x00FF;
     802:	3d 83       	std	Y+5, r19	; 0x05
    c[1] = (id & 0x00FF); 
     804:	2e 83       	std	Y+6, r18	; 0x06
  buf[1] = MSG_NEIGHBOR_KEEPALIVE;
  GUIDIntoChar(getGUID(), &(buf[2]));
  GUIDIntoChar(thisNeighborhood.n[thisTimeout->arg], &(buf[4]));

  // prevent timer from calling this again, message callback will reenable as necessary
  disableTimer(ttNeighbor[thisTimeout->arg]);
     806:	21 e1       	ldi	r18, 0x11	; 17
     808:	28 9f       	mul	r18, r24
     80a:	f0 01       	movw	r30, r0
     80c:	29 9f       	mul	r18, r25
     80e:	f0 0d       	add	r31, r0
     810:	11 24       	eor	r1, r1
     812:	e3 5a       	subi	r30, 0xA3	; 163
     814:	fe 4d       	sbci	r31, 0xDE	; 222
     816:	10 8a       	std	Z+16, r1	; 0x10

  // send message - CB will either re-add timer, or restart scanning for neighbors
  sendSystemMessage(thisTimeout->arg, buf, 6, RES_SYS_HANDLER, (GenericHandler)&neighborKeepaliveCB);
     818:	05 e9       	ldi	r16, 0x95	; 149
     81a:	16 e0       	ldi	r17, 0x06	; 6
     81c:	20 e0       	ldi	r18, 0x00	; 0
     81e:	30 e0       	ldi	r19, 0x00	; 0
     820:	46 e0       	ldi	r20, 0x06	; 6
     822:	be 01       	movw	r22, r28
     824:	6f 5f       	subi	r22, 0xFF	; 255
     826:	7f 4f       	sbci	r23, 0xFF	; 255
     828:	19 96       	adiw	r26, 0x09	; 9
     82a:	8c 91       	ld	r24, X
     82c:	0e 94 8f 08 	call	0x111e	; 0x111e <sendSystemMessage>
}
     830:	26 96       	adiw	r28, 0x06	; 6
     832:	cd bf       	out	0x3d, r28	; 61
     834:	de bf       	out	0x3e, r29	; 62
     836:	df 91       	pop	r29
     838:	cf 91       	pop	r28
     83a:	1f 91       	pop	r17
     83c:	0f 91       	pop	r16
     83e:	08 95       	ret

00000840 <neighborScan>:
  freeChunk(thisChunk);
}

// send a start handshake message to a vacant port
void neighborScan(void)
{
     840:	ff 92       	push	r15
     842:	0f 93       	push	r16
     844:	1f 93       	push	r17
     846:	cf 93       	push	r28
     848:	df 93       	push	r29
     84a:	00 d0       	rcall	.+0      	; 0x84c <neighborScan+0xc>
     84c:	1f 92       	push	r1
     84e:	cd b7       	in	r28, 0x3d	; 61
     850:	de b7       	in	r29, 0x3e	; 62
  byte buf[4];
  PRef p = thisTimeout->arg;
     852:	e0 91 64 26 	lds	r30, 0x2664
     856:	f0 91 65 26 	lds	r31, 0x2665
     85a:	f1 84       	ldd	r15, Z+9	; 0x09
  if(p == DEBUGPORT) {
      return;
  }
  #endif
  #ifdef LOG_DEBUG
  if(isHostPort(p)) {
     85c:	8f 2d       	mov	r24, r15
     85e:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <isHostPort>
     862:	81 11       	cpse	r24, r1
     864:	22 c0       	rjmp	.+68     	; 0x8aa <neighborScan+0x6a>
      return;
  }
  #endif

  // prepare message
  buf[0] = NEIGHBOR_MSG;
     866:	81 e0       	ldi	r24, 0x01	; 1
     868:	89 83       	std	Y+1, r24	; 0x01
  buf[1] = MSG_NEIGHBOR_START;
     86a:	8a 83       	std	Y+2, r24	; 0x02
  GUIDIntoChar(getGUID(), &(buf[2]));
     86c:	0e 94 e4 19 	call	0x33c8	; 0x33c8 <getGUID>
threadvar Timer ttNeighbor[6];

// converts a UID into a passed in character stream.  Assumes 2-byte GUIDs.
void GUIDIntoChar(Uid id, byte * c)
{
    c[0] = (id >> 8) & 0x00FF;
     870:	9b 83       	std	Y+3, r25	; 0x03
    c[1] = (id & 0x00FF); 
     872:	8c 83       	std	Y+4, r24	; 0x04
  buf[0] = NEIGHBOR_MSG;
  buf[1] = MSG_NEIGHBOR_START;
  GUIDIntoChar(getGUID(), &(buf[2]));
  
  // disable timer so no extra time-based calls are executed until sent message callback
  disableTimer(ttNeighbor[p]);
     874:	81 e1       	ldi	r24, 0x11	; 17
     876:	f8 9e       	mul	r15, r24
     878:	90 01       	movw	r18, r0
     87a:	11 24       	eor	r1, r1
     87c:	f9 01       	movw	r30, r18
     87e:	e3 5a       	subi	r30, 0xA3	; 163
     880:	fe 4d       	sbci	r31, 0xDE	; 222
     882:	10 8a       	std	Z+16, r1	; 0x10
  if(ttNeighbor[p].t.state != INACTIVE)
     884:	82 85       	ldd	r24, Z+10	; 0x0a
     886:	88 23       	and	r24, r24
     888:	29 f0       	breq	.+10     	; 0x894 <neighborScan+0x54>
    {
      deregisterTimeout(&(ttNeighbor[p].t));
     88a:	c9 01       	movw	r24, r18
     88c:	81 5a       	subi	r24, 0xA1	; 161
     88e:	9e 4d       	sbci	r25, 0xDE	; 222
     890:	0e 94 ef 09 	call	0x13de	; 0x13de <deregisterTimeout>
    }

  // enqueue message
  sendSystemMessage(p, buf, 4, RES_SYS_HANDLER, (GenericHandler)&neighborScanCB);
     894:	0e e5       	ldi	r16, 0x5E	; 94
     896:	14 e0       	ldi	r17, 0x04	; 4
     898:	20 e0       	ldi	r18, 0x00	; 0
     89a:	30 e0       	ldi	r19, 0x00	; 0
     89c:	44 e0       	ldi	r20, 0x04	; 4
     89e:	be 01       	movw	r22, r28
     8a0:	6f 5f       	subi	r22, 0xFF	; 255
     8a2:	7f 4f       	sbci	r23, 0xFF	; 255
     8a4:	8f 2d       	mov	r24, r15
     8a6:	0e 94 8f 08 	call	0x111e	; 0x111e <sendSystemMessage>
}
     8aa:	24 96       	adiw	r28, 0x04	; 4
     8ac:	cd bf       	out	0x3d, r28	; 61
     8ae:	de bf       	out	0x3e, r29	; 62
     8b0:	df 91       	pop	r29
     8b2:	cf 91       	pop	r28
     8b4:	1f 91       	pop	r17
     8b6:	0f 91       	pop	r16
     8b8:	ff 90       	pop	r15
     8ba:	08 95       	ret

000008bc <neighborScanCB>:

// called when start handshake message is complete by success or failure
void neighborScanCB(void)
{
#ifdef LOG_DEBUG
  if(isHostPort(faceNum(thisChunk))) {
     8bc:	e0 91 4f 21 	lds	r30, 0x214F
     8c0:	f0 91 50 21 	lds	r31, 0x2150
     8c4:	81 89       	ldd	r24, Z+17	; 0x11
     8c6:	87 70       	andi	r24, 0x07	; 7
     8c8:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <isHostPort>
     8cc:	e0 91 4f 21 	lds	r30, 0x214F
     8d0:	f0 91 50 21 	lds	r31, 0x2150
     8d4:	81 11       	cpse	r24, r1
     8d6:	2c c0       	rjmp	.+88     	; 0x930 <neighborScanCB+0x74>
      return;
  }
#endif

  // message was received.  wait for handshake to return, but allow for timeout to restart scan
  if(chunkResponseType(thisChunk) == MSG_RESP_ACK)
     8d8:	a1 89       	ldd	r26, Z+17	; 0x11
     8da:	8a 2f       	mov	r24, r26
     8dc:	88 71       	andi	r24, 0x18	; 24
     8de:	a7 70       	andi	r26, 0x07	; 7
     8e0:	88 30       	cpi	r24, 0x08	; 8
     8e2:	59 f4       	brne	.+22     	; 0x8fa <neighborScanCB+0x3e>
    {
      (ttNeighbor[faceNum(thisChunk)]).period = NEIGHBOR_HANDSHAKE_TIMEOUT_PERIOD;
     8e4:	81 e1       	ldi	r24, 0x11	; 17
     8e6:	a8 9f       	mul	r26, r24
     8e8:	d0 01       	movw	r26, r0
     8ea:	11 24       	eor	r1, r1
     8ec:	a3 5a       	subi	r26, 0xA3	; 163
     8ee:	be 4d       	sbci	r27, 0xDE	; 222
     8f0:	44 e6       	ldi	r20, 0x64	; 100
     8f2:	50 e0       	ldi	r21, 0x00	; 0
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	0a c0       	rjmp	.+20     	; 0x90e <neighborScanCB+0x52>
    }
  // else failure
  else
    {
      (ttNeighbor[faceNum(thisChunk)]).period = NEIGHBOR_SCAN_PERIOD;
     8fa:	81 e1       	ldi	r24, 0x11	; 17
     8fc:	a8 9f       	mul	r26, r24
     8fe:	d0 01       	movw	r26, r0
     900:	11 24       	eor	r1, r1
     902:	a3 5a       	subi	r26, 0xA3	; 163
     904:	be 4d       	sbci	r27, 0xDE	; 222
     906:	42 e3       	ldi	r20, 0x32	; 50
     908:	50 e0       	ldi	r21, 0x00	; 0
     90a:	60 e0       	ldi	r22, 0x00	; 0
     90c:	70 e0       	ldi	r23, 0x00	; 0
     90e:	1c 96       	adiw	r26, 0x0c	; 12
     910:	4d 93       	st	X+, r20
     912:	5d 93       	st	X+, r21
     914:	6d 93       	st	X+, r22
     916:	7c 93       	st	X, r23
     918:	1f 97       	sbiw	r26, 0x0f	; 15
    }

  // re-enable timer with potentially new period
  enableTimer(ttNeighbor[faceNum(thisChunk)]);
     91a:	a1 89       	ldd	r26, Z+17	; 0x11
     91c:	a7 70       	andi	r26, 0x07	; 7
     91e:	81 e1       	ldi	r24, 0x11	; 17
     920:	a8 9f       	mul	r26, r24
     922:	d0 01       	movw	r26, r0
     924:	11 24       	eor	r1, r1
     926:	a3 5a       	subi	r26, 0xA3	; 163
     928:	be 4d       	sbci	r27, 0xDE	; 222
     92a:	81 e0       	ldi	r24, 0x01	; 1
     92c:	50 96       	adiw	r26, 0x10	; 16
     92e:	8c 93       	st	X, r24
 
  freeChunk(thisChunk);
     930:	cf 01       	movw	r24, r30
     932:	0c 94 1a 08 	jmp	0x1034	; 0x1034 <freeChunk>

00000936 <GUIDIntoChar>:
threadvar Timer ttNeighbor[6];

// converts a UID into a passed in character stream.  Assumes 2-byte GUIDs.
void GUIDIntoChar(Uid id, byte * c)
{
    c[0] = (id >> 8) & 0x00FF;
     936:	fb 01       	movw	r30, r22
     938:	90 83       	st	Z, r25
    c[1] = (id & 0x00FF); 
     93a:	81 83       	std	Z+1, r24	; 0x01
     93c:	08 95       	ret

0000093e <charToGUID>:
// takes a passed in character array and returns a UID representing the array.  Assumes 2-byte GUIDs.
Uid charToGUID(byte * c)
{
    Uid tmp;

    tmp = (Uid)(c[0]) << 8;
     93e:	fc 01       	movw	r30, r24
     940:	30 81       	ld	r19, Z
     942:	20 e0       	ldi	r18, 0x00	; 0
    tmp |= c[1];
     944:	81 81       	ldd	r24, Z+1	; 0x01
     946:	28 2b       	or	r18, r24

    return tmp;
}
     948:	c9 01       	movw	r24, r18
     94a:	08 95       	ret

0000094c <getNeighborCount>:

// returns number of neighbors that are not VACANT.
byte getNeighborCount()
{
     94c:	e1 e5       	ldi	r30, 0x51	; 81
     94e:	f1 e2       	ldi	r31, 0x21	; 33
	uint8_t count, i;
	
	for(count = 0, i = 0; i < NUM_PORTS; ++i)
     950:	80 e0       	ldi	r24, 0x00	; 0
	{
		if(thisNeighborhood.n[i] != VACANT)
     952:	21 91       	ld	r18, Z+
     954:	31 91       	ld	r19, Z+
     956:	23 2b       	or	r18, r19
     958:	09 f0       	breq	.+2      	; 0x95c <getNeighborCount+0x10>
		{
			count++;
     95a:	8f 5f       	subi	r24, 0xFF	; 255
// returns number of neighbors that are not VACANT.
byte getNeighborCount()
{
	uint8_t count, i;
	
	for(count = 0, i = 0; i < NUM_PORTS; ++i)
     95c:	91 e2       	ldi	r25, 0x21	; 33
     95e:	ed 35       	cpi	r30, 0x5D	; 93
     960:	f9 07       	cpc	r31, r25
     962:	b9 f7       	brne	.-18     	; 0x952 <getNeighborCount+0x6>
	}

//	if(count>0)
//	  printf("NEIGHBORCOUNT = %d\r\n", count);
	return count;
}
     964:	08 95       	ret

00000966 <down>:

// simple functions to access geographic neighbors
Uid down(void) { return thisNeighborhood.n[DOWN]; }
     966:	e1 e5       	ldi	r30, 0x51	; 81
     968:	f1 e2       	ldi	r31, 0x21	; 33
     96a:	80 81       	ld	r24, Z
     96c:	91 81       	ldd	r25, Z+1	; 0x01
     96e:	08 95       	ret

00000970 <up>:
Uid up(void) { return thisNeighborhood.n[UP]; }
     970:	eb e5       	ldi	r30, 0x5B	; 91
     972:	f1 e2       	ldi	r31, 0x21	; 33
     974:	80 81       	ld	r24, Z
     976:	91 81       	ldd	r25, Z+1	; 0x01
     978:	08 95       	ret

0000097a <north>:
Uid north(void) { return thisNeighborhood.n[NORTH]; }
     97a:	e3 e5       	ldi	r30, 0x53	; 83
     97c:	f1 e2       	ldi	r31, 0x21	; 33
     97e:	80 81       	ld	r24, Z
     980:	91 81       	ldd	r25, Z+1	; 0x01
     982:	08 95       	ret

00000984 <south>:
Uid south(void) { return thisNeighborhood.n[SOUTH]; }
     984:	e9 e5       	ldi	r30, 0x59	; 89
     986:	f1 e2       	ldi	r31, 0x21	; 33
     988:	80 81       	ld	r24, Z
     98a:	91 81       	ldd	r25, Z+1	; 0x01
     98c:	08 95       	ret

0000098e <east>:
Uid east(void) { return thisNeighborhood.n[EAST]; }
     98e:	e5 e5       	ldi	r30, 0x55	; 85
     990:	f1 e2       	ldi	r31, 0x21	; 33
     992:	80 81       	ld	r24, Z
     994:	91 81       	ldd	r25, Z+1	; 0x01
     996:	08 95       	ret

00000998 <west>:
Uid west(void) { return thisNeighborhood.n[WEST]; }
     998:	e7 e5       	ldi	r30, 0x57	; 87
     99a:	f1 e2       	ldi	r31, 0x21	; 33
     99c:	80 81       	ld	r24, Z
     99e:	91 81       	ldd	r25, Z+1	; 0x01
     9a0:	08 95       	ret

000009a2 <updateNeighbor>:

// called to set the GUID of a neighbor.
// if the neighbor is the same as before, do nothing.
// if the neighbor has a different GUID (or VACANT), trigger a neighbor change event.
void	updateNeighbor(PRef p, Uid b)
{
     9a2:	1f 93       	push	r17
     9a4:	cf 93       	push	r28
     9a6:	df 93       	push	r29
     9a8:	18 2f       	mov	r17, r24
     9aa:	eb 01       	movw	r28, r22
	}

#endif

#ifdef LOG_DEBUG
  if(isHostPort(p)) {
     9ac:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <isHostPort>
     9b0:	81 11       	cpse	r24, r1
     9b2:	15 c0       	rjmp	.+42     	; 0x9de <updateNeighbor+0x3c>
      return;
  }
#endif

	if(p < NUM_PORTS)
     9b4:	16 30       	cpi	r17, 0x06	; 6
     9b6:	98 f4       	brcc	.+38     	; 0x9de <updateNeighbor+0x3c>
	{
		// is the state changing?  Trigger handler
	    if(thisNeighborhood.n[p] != b)
     9b8:	e1 2f       	mov	r30, r17
     9ba:	f0 e0       	ldi	r31, 0x00	; 0
     9bc:	ee 0f       	add	r30, r30
     9be:	ff 1f       	adc	r31, r31
     9c0:	ef 5a       	subi	r30, 0xAF	; 175
     9c2:	fe 4d       	sbci	r31, 0xDE	; 222
     9c4:	80 81       	ld	r24, Z
     9c6:	91 81       	ldd	r25, Z+1	; 0x01
     9c8:	8c 17       	cp	r24, r28
     9ca:	9d 07       	cpc	r25, r29
     9cc:	41 f0       	breq	.+16     	; 0x9de <updateNeighbor+0x3c>
	    {
	        thisNeighborhood.n[p] = b;
     9ce:	c0 83       	st	Z, r28
     9d0:	d1 83       	std	Z+1, r29	; 0x01
	        triggerHandler(EVENT_NEIGHBOR_CHANGE);
     9d2:	83 e1       	ldi	r24, 0x13	; 19
	    }
	  
	}
	
	//	printf("Block %d now has %d neighbors \n",getGUID(),getNeighborCount());
}
     9d4:	df 91       	pop	r29
     9d6:	cf 91       	pop	r28
     9d8:	1f 91       	pop	r17
	{
		// is the state changing?  Trigger handler
	    if(thisNeighborhood.n[p] != b)
	    {
	        thisNeighborhood.n[p] = b;
	        triggerHandler(EVENT_NEIGHBOR_CHANGE);
     9da:	0c 94 65 07 	jmp	0xeca	; 0xeca <triggerHandler>
	    }
	  
	}
	
	//	printf("Block %d now has %d neighbors \n",getGUID(),getNeighborCount());
}
     9de:	df 91       	pop	r29
     9e0:	cf 91       	pop	r28
     9e2:	1f 91       	pop	r17
     9e4:	08 95       	ret

000009e6 <restartScan>:
    return 1;
}

// sets neighbor to VACANT, and starts a timer/timeout to send handshake initialization messages
void restartScan(PRef i)
{
     9e6:	1f 93       	push	r17
     9e8:	cf 93       	push	r28
     9ea:	df 93       	push	r29
     9ec:	18 2f       	mov	r17, r24
  updateNeighbor(i, VACANT);
     9ee:	60 e0       	ldi	r22, 0x00	; 0
     9f0:	70 e0       	ldi	r23, 0x00	; 0
     9f2:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <updateNeighbor>

  // deregister timer and deregister timeouts if they are already in the lists
  disableTimer(ttNeighbor[i]);
     9f6:	c1 2f       	mov	r28, r17
     9f8:	d0 e0       	ldi	r29, 0x00	; 0
     9fa:	81 e1       	ldi	r24, 0x11	; 17
     9fc:	18 9f       	mul	r17, r24
     9fe:	90 01       	movw	r18, r0
     a00:	11 24       	eor	r1, r1
     a02:	f9 01       	movw	r30, r18
     a04:	e3 5a       	subi	r30, 0xA3	; 163
     a06:	fe 4d       	sbci	r31, 0xDE	; 222
     a08:	10 8a       	std	Z+16, r1	; 0x10
  if(ttNeighbor[i].t.state != INACTIVE)
     a0a:	82 85       	ldd	r24, Z+10	; 0x0a
     a0c:	88 23       	and	r24, r24
     a0e:	29 f0       	breq	.+10     	; 0xa1a <restartScan+0x34>
    {
      deregisterTimeout(&(ttNeighbor[i].t));
     a10:	c9 01       	movw	r24, r18
     a12:	81 5a       	subi	r24, 0xA1	; 161
     a14:	9e 4d       	sbci	r25, 0xDE	; 222
     a16:	0e 94 ef 09 	call	0x13de	; 0x13de <deregisterTimeout>
    }

  // set up timer to call neighbor scan
  (ttNeighbor[i]).t.arg = i;
     a1a:	81 e1       	ldi	r24, 0x11	; 17
     a1c:	8c 9f       	mul	r24, r28
     a1e:	f0 01       	movw	r30, r0
     a20:	8d 9f       	mul	r24, r29
     a22:	f0 0d       	add	r31, r0
     a24:	11 24       	eor	r1, r1
     a26:	e3 5a       	subi	r30, 0xA3	; 163
     a28:	fe 4d       	sbci	r31, 0xDE	; 222
     a2a:	13 87       	std	Z+11, r17	; 0x0b
  (ttNeighbor[i]).t.callback = (GenericHandler)&neighborScan;
     a2c:	80 e2       	ldi	r24, 0x20	; 32
     a2e:	94 e0       	ldi	r25, 0x04	; 4
     a30:	80 87       	std	Z+8, r24	; 0x08
     a32:	91 87       	std	Z+9, r25	; 0x09
  (ttNeighbor[i]).period = NEIGHBOR_SCAN_PERIOD;
     a34:	82 e3       	ldi	r24, 0x32	; 50
     a36:	90 e0       	ldi	r25, 0x00	; 0
     a38:	a0 e0       	ldi	r26, 0x00	; 0
     a3a:	b0 e0       	ldi	r27, 0x00	; 0
     a3c:	84 87       	std	Z+12, r24	; 0x0c
     a3e:	95 87       	std	Z+13, r25	; 0x0d
     a40:	a6 87       	std	Z+14, r26	; 0x0e
     a42:	b7 87       	std	Z+15, r27	; 0x0f
  enableTimer(ttNeighbor[i]);
     a44:	81 e0       	ldi	r24, 0x01	; 1
     a46:	80 8b       	std	Z+16, r24	; 0x10
}
     a48:	df 91       	pop	r29
     a4a:	cf 91       	pop	r28
     a4c:	1f 91       	pop	r17
     a4e:	08 95       	ret

00000a50 <handleNeighborMessage>:
  freeChunk(thisChunk);
}

// called for all NEIGHBOR_MSG type reserved system handlers
byte handleNeighborMessage(void)
{
     a50:	df 92       	push	r13
     a52:	ef 92       	push	r14
     a54:	ff 92       	push	r15
     a56:	0f 93       	push	r16
     a58:	1f 93       	push	r17
     a5a:	cf 93       	push	r28
     a5c:	df 93       	push	r29
     a5e:	00 d0       	rcall	.+0      	; 0xa60 <handleNeighborMessage+0x10>
     a60:	00 d0       	rcall	.+0      	; 0xa62 <handleNeighborMessage+0x12>
     a62:	cd b7       	in	r28, 0x3d	; 61
     a64:	de b7       	in	r29, 0x3e	; 62
    if( thisChunk == NULL ) 
     a66:	e0 91 4f 21 	lds	r30, 0x214F
     a6a:	f0 91 50 21 	lds	r31, 0x2150
     a6e:	30 97       	sbiw	r30, 0x00	; 0
     a70:	09 f4       	brne	.+2      	; 0xa74 <handleNeighborMessage+0x24>
     a72:	00 c1       	rjmp	.+512    	; 0xc74 <handleNeighborMessage+0x224>
    {
      return 0;
    }
  
    switch(thisChunk->data[1])
     a74:	91 81       	ldd	r25, Z+1	; 0x01
     a76:	92 30       	cpi	r25, 0x02	; 2
     a78:	09 f4       	brne	.+2      	; 0xa7c <handleNeighborMessage+0x2c>
     a7a:	5c c0       	rjmp	.+184    	; 0xb34 <handleNeighborMessage+0xe4>
     a7c:	93 30       	cpi	r25, 0x03	; 3
     a7e:	09 f4       	brne	.+2      	; 0xa82 <handleNeighborMessage+0x32>
     a80:	be c0       	rjmp	.+380    	; 0xbfe <handleNeighborMessage+0x1ae>
     a82:	91 30       	cpi	r25, 0x01	; 1
     a84:	09 f0       	breq	.+2      	; 0xa88 <handleNeighborMessage+0x38>
     a86:	f8 c0       	rjmp	.+496    	; 0xc78 <handleNeighborMessage+0x228>
    {
      // a neighbor wants to initiate a response with us, craft a response
      case MSG_NEIGHBOR_START:
      {
	    // have we already received an ACK to our own NEIGHBOR_MSG?  If not, respond
	    if((ttNeighbor[faceNum(thisChunk)]).period != NEIGHBOR_HANDSHAKE_TIMEOUT_PERIOD)
     a88:	e1 89       	ldd	r30, Z+17	; 0x11
     a8a:	e7 70       	andi	r30, 0x07	; 7
     a8c:	11 e1       	ldi	r17, 0x11	; 17
     a8e:	1e 9f       	mul	r17, r30
     a90:	f0 01       	movw	r30, r0
     a92:	11 24       	eor	r1, r1
     a94:	e3 5a       	subi	r30, 0xA3	; 163
     a96:	fe 4d       	sbci	r31, 0xDE	; 222
     a98:	44 85       	ldd	r20, Z+12	; 0x0c
     a9a:	55 85       	ldd	r21, Z+13	; 0x0d
     a9c:	66 85       	ldd	r22, Z+14	; 0x0e
     a9e:	77 85       	ldd	r23, Z+15	; 0x0f
     aa0:	44 36       	cpi	r20, 0x64	; 100
     aa2:	51 05       	cpc	r21, r1
     aa4:	61 05       	cpc	r22, r1
     aa6:	71 05       	cpc	r23, r1
     aa8:	09 f4       	brne	.+2      	; 0xaac <handleNeighborMessage+0x5c>
     aaa:	e6 c0       	rjmp	.+460    	; 0xc78 <handleNeighborMessage+0x228>
	    {
	      // build a neighbor handshake packet
	      // of the form:
	      // [handshake header] [my guid] [your guid]
	      byte buf[6];
	      buf[0] = NEIGHBOR_MSG;
     aac:	99 83       	std	Y+1, r25	; 0x01
	      buf[1] = MSG_NEIGHBOR_RESPONSE;
     aae:	82 e0       	ldi	r24, 0x02	; 2
     ab0:	8a 83       	std	Y+2, r24	; 0x02
	      GUIDIntoChar(getGUID(), &(buf[2]));
     ab2:	0e 94 e4 19 	call	0x33c8	; 0x33c8 <getGUID>
threadvar Timer ttNeighbor[6];

// converts a UID into a passed in character stream.  Assumes 2-byte GUIDs.
void GUIDIntoChar(Uid id, byte * c)
{
    c[0] = (id >> 8) & 0x00FF;
     ab6:	9b 83       	std	Y+3, r25	; 0x03
    c[1] = (id & 0x00FF); 
     ab8:	8c 83       	std	Y+4, r24	; 0x04
	      // [handshake header] [my guid] [your guid]
	      byte buf[6];
	      buf[0] = NEIGHBOR_MSG;
	      buf[1] = MSG_NEIGHBOR_RESPONSE;
	      GUIDIntoChar(getGUID(), &(buf[2]));
	      buf[4] = thisChunk->data[2];
     aba:	e0 91 4f 21 	lds	r30, 0x214F
     abe:	f0 91 50 21 	lds	r31, 0x2150
     ac2:	82 81       	ldd	r24, Z+2	; 0x02
     ac4:	8d 83       	std	Y+5, r24	; 0x05
	      buf[5] = thisChunk->data[3];
     ac6:	83 81       	ldd	r24, Z+3	; 0x03
     ac8:	8e 83       	std	Y+6, r24	; 0x06
	
	      // if our neighbor is already vacant, nothing happens.
	      // if this guid == old guid, they got reset somehow, so drop neighbor so user can re-add gracefully
	      // if this guid != old guid, then we got a new block, so drop neighbor so user can re-add gracefully
	      updateNeighbor(faceNum(thisChunk), VACANT);
     aca:	81 89       	ldd	r24, Z+17	; 0x11
     acc:	60 e0       	ldi	r22, 0x00	; 0
     ace:	70 e0       	ldi	r23, 0x00	; 0
     ad0:	87 70       	andi	r24, 0x07	; 7
     ad2:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <updateNeighbor>
	    
	      // stop any imminent timeouts such as neighborscanning
	      disableTimer(ttNeighbor[faceNum(thisChunk)]);
     ad6:	a0 91 4f 21 	lds	r26, 0x214F
     ada:	b0 91 50 21 	lds	r27, 0x2150
     ade:	51 96       	adiw	r26, 0x11	; 17
     ae0:	ec 91       	ld	r30, X
     ae2:	51 97       	sbiw	r26, 0x11	; 17
     ae4:	e7 70       	andi	r30, 0x07	; 7
     ae6:	1e 9f       	mul	r17, r30
     ae8:	f0 01       	movw	r30, r0
     aea:	11 24       	eor	r1, r1
     aec:	e3 5a       	subi	r30, 0xA3	; 163
     aee:	fe 4d       	sbci	r31, 0xDE	; 222
     af0:	10 8a       	std	Z+16, r1	; 0x10
	      if(ttNeighbor[faceNum(thisChunk)].t.state != INACTIVE)
     af2:	51 96       	adiw	r26, 0x11	; 17
     af4:	8c 91       	ld	r24, X
     af6:	87 70       	andi	r24, 0x07	; 7
     af8:	18 9f       	mul	r17, r24
     afa:	c0 01       	movw	r24, r0
     afc:	11 24       	eor	r1, r1
     afe:	fc 01       	movw	r30, r24
     b00:	e3 5a       	subi	r30, 0xA3	; 163
     b02:	fe 4d       	sbci	r31, 0xDE	; 222
     b04:	22 85       	ldd	r18, Z+10	; 0x0a
     b06:	22 23       	and	r18, r18
     b08:	21 f0       	breq	.+8      	; 0xb12 <handleNeighborMessage+0xc2>
		{
		  deregisterTimeout(&(ttNeighbor[faceNum(thisChunk)].t));
     b0a:	81 5a       	subi	r24, 0xA1	; 161
     b0c:	9e 4d       	sbci	r25, 0xDE	; 222
     b0e:	0e 94 ef 09 	call	0x13de	; 0x13de <deregisterTimeout>
		}

	      // callback will add neighbor or restart scanning, as necessary
	      sendSystemMessage(faceNum(thisChunk), buf, 6, RES_SYS_HANDLER, (GenericHandler)&neighborHandshakeCB);
     b12:	e0 91 4f 21 	lds	r30, 0x214F
     b16:	f0 91 50 21 	lds	r31, 0x2150
     b1a:	81 89       	ldd	r24, Z+17	; 0x11
     b1c:	08 e4       	ldi	r16, 0x48	; 72
     b1e:	16 e0       	ldi	r17, 0x06	; 6
     b20:	20 e0       	ldi	r18, 0x00	; 0
     b22:	30 e0       	ldi	r19, 0x00	; 0
     b24:	46 e0       	ldi	r20, 0x06	; 6
     b26:	be 01       	movw	r22, r28
     b28:	6f 5f       	subi	r22, 0xFF	; 255
     b2a:	7f 4f       	sbci	r23, 0xFF	; 255
     b2c:	87 70       	andi	r24, 0x07	; 7
     b2e:	0e 94 8f 08 	call	0x111e	; 0x111e <sendSystemMessage>
     b32:	a2 c0       	rjmp	.+324    	; 0xc78 <handleNeighborMessage+0x228>
      }
      // got a response to our request for a neighbor handshake
      case MSG_NEIGHBOR_RESPONSE:
      {
	    // are we waiting for a handshake?  well, here it is!
	    if((ttNeighbor[faceNum(thisChunk)]).period == NEIGHBOR_HANDSHAKE_TIMEOUT_PERIOD)
     b34:	a1 89       	ldd	r26, Z+17	; 0x11
     b36:	a7 70       	andi	r26, 0x07	; 7
     b38:	51 e1       	ldi	r21, 0x11	; 17
     b3a:	d5 2e       	mov	r13, r21
     b3c:	da 9e       	mul	r13, r26
     b3e:	d0 01       	movw	r26, r0
     b40:	11 24       	eor	r1, r1
     b42:	a3 5a       	subi	r26, 0xA3	; 163
     b44:	be 4d       	sbci	r27, 0xDE	; 222
     b46:	1c 96       	adiw	r26, 0x0c	; 12
     b48:	4d 91       	ld	r20, X+
     b4a:	5d 91       	ld	r21, X+
     b4c:	6d 91       	ld	r22, X+
     b4e:	7c 91       	ld	r23, X
     b50:	1f 97       	sbiw	r26, 0x0f	; 15
     b52:	44 36       	cpi	r20, 0x64	; 100
     b54:	51 05       	cpc	r21, r1
     b56:	61 05       	cpc	r22, r1
     b58:	71 05       	cpc	r23, r1
     b5a:	09 f0       	breq	.+2      	; 0xb5e <handleNeighborMessage+0x10e>
     b5c:	8d c0       	rjmp	.+282    	; 0xc78 <handleNeighborMessage+0x228>
// takes a passed in character array and returns a UID representing the array.  Assumes 2-byte GUIDs.
Uid charToGUID(byte * c)
{
    Uid tmp;

    tmp = (Uid)(c[0]) << 8;
     b5e:	02 81       	ldd	r16, Z+2	; 0x02
    tmp |= c[1];
     b60:	13 81       	ldd	r17, Z+3	; 0x03
// takes a passed in character array and returns a UID representing the array.  Assumes 2-byte GUIDs.
Uid charToGUID(byte * c)
{
    Uid tmp;

    tmp = (Uid)(c[0]) << 8;
     b62:	34 81       	ldd	r19, Z+4	; 0x04
     b64:	20 e0       	ldi	r18, 0x00	; 0
    tmp |= c[1];
     b66:	85 81       	ldd	r24, Z+5	; 0x05
     b68:	79 01       	movw	r14, r18
     b6a:	e8 2a       	or	r14, r24
	        // pull [your guid][my guid] from the handshake packet - reversed from how it was sent
	        neighbor = charToGUID(&(thisChunk->data[2]));
	        me = charToGUID(&(thisChunk->data[4]));
	    
	        // got a sensible response
	        if(me == getGUID())
     b6c:	0e 94 e4 19 	call	0x33c8	; 0x33c8 <getGUID>
     b70:	e8 16       	cp	r14, r24
     b72:	f9 06       	cpc	r15, r25
     b74:	09 f0       	breq	.+2      	; 0xb78 <handleNeighborMessage+0x128>
     b76:	80 c0       	rjmp	.+256    	; 0xc78 <handleNeighborMessage+0x228>
	        {
		        // stop any imminent rescans
		        disableTimer(ttNeighbor[faceNum(thisChunk)]);
     b78:	a0 91 4f 21 	lds	r26, 0x214F
     b7c:	b0 91 50 21 	lds	r27, 0x2150
     b80:	51 96       	adiw	r26, 0x11	; 17
     b82:	ec 91       	ld	r30, X
     b84:	51 97       	sbiw	r26, 0x11	; 17
     b86:	e7 70       	andi	r30, 0x07	; 7
     b88:	de 9e       	mul	r13, r30
     b8a:	f0 01       	movw	r30, r0
     b8c:	11 24       	eor	r1, r1
     b8e:	e3 5a       	subi	r30, 0xA3	; 163
     b90:	fe 4d       	sbci	r31, 0xDE	; 222
     b92:	10 8a       	std	Z+16, r1	; 0x10
			if(ttNeighbor[faceNum(thisChunk)].t.state != INACTIVE)
     b94:	51 96       	adiw	r26, 0x11	; 17
     b96:	8c 91       	ld	r24, X
     b98:	87 70       	andi	r24, 0x07	; 7
     b9a:	d8 9e       	mul	r13, r24
     b9c:	c0 01       	movw	r24, r0
     b9e:	11 24       	eor	r1, r1
     ba0:	fc 01       	movw	r30, r24
     ba2:	e3 5a       	subi	r30, 0xA3	; 163
     ba4:	fe 4d       	sbci	r31, 0xDE	; 222
     ba6:	22 85       	ldd	r18, Z+10	; 0x0a
     ba8:	22 23       	and	r18, r18
     baa:	21 f0       	breq	.+8      	; 0xbb4 <handleNeighborMessage+0x164>
			  {
			    deregisterTimeout(&(ttNeighbor[faceNum(thisChunk)].t));
     bac:	81 5a       	subi	r24, 0xA1	; 161
     bae:	9e 4d       	sbci	r25, 0xDE	; 222
     bb0:	0e 94 ef 09 	call	0x13de	; 0x13de <deregisterTimeout>
			  }
		
		        // re-add timer, but now for keepalive purposes
		        ttNeighbor[faceNum(thisChunk)].period = NEIGHBOR_KEEPALIVE_PERIOD;
     bb4:	20 91 4f 21 	lds	r18, 0x214F
     bb8:	30 91 50 21 	lds	r19, 0x2150
     bbc:	d9 01       	movw	r26, r18
     bbe:	51 96       	adiw	r26, 0x11	; 17
     bc0:	ec 91       	ld	r30, X
     bc2:	e7 70       	andi	r30, 0x07	; 7
     bc4:	b1 e1       	ldi	r27, 0x11	; 17
     bc6:	eb 9f       	mul	r30, r27
     bc8:	f0 01       	movw	r30, r0
     bca:	11 24       	eor	r1, r1
     bcc:	e3 5a       	subi	r30, 0xA3	; 163
     bce:	fe 4d       	sbci	r31, 0xDE	; 222
     bd0:	84 ef       	ldi	r24, 0xF4	; 244
     bd2:	91 e0       	ldi	r25, 0x01	; 1
     bd4:	a0 e0       	ldi	r26, 0x00	; 0
     bd6:	b0 e0       	ldi	r27, 0x00	; 0
     bd8:	84 87       	std	Z+12, r24	; 0x0c
     bda:	95 87       	std	Z+13, r25	; 0x0d
     bdc:	a6 87       	std	Z+14, r26	; 0x0e
     bde:	b7 87       	std	Z+15, r27	; 0x0f
		        ttNeighbor[faceNum(thisChunk)].t.callback = (GenericHandler)&neighborKeepalive;
     be0:	82 ee       	ldi	r24, 0xE2	; 226
     be2:	93 e0       	ldi	r25, 0x03	; 3
     be4:	80 87       	std	Z+8, r24	; 0x08
     be6:	91 87       	std	Z+9, r25	; 0x09
        		enableTimer(ttNeighbor[faceNum(thisChunk)]);
     be8:	81 e0       	ldi	r24, 0x01	; 1
     bea:	80 8b       	std	Z+16, r24	; 0x10
// takes a passed in character array and returns a UID representing the array.  Assumes 2-byte GUIDs.
Uid charToGUID(byte * c)
{
    Uid tmp;

    tmp = (Uid)(c[0]) << 8;
     bec:	70 2f       	mov	r23, r16
     bee:	60 e0       	ldi	r22, 0x00	; 0
    tmp |= c[1];
     bf0:	61 2b       	or	r22, r17
		        ttNeighbor[faceNum(thisChunk)].period = NEIGHBOR_KEEPALIVE_PERIOD;
		        ttNeighbor[faceNum(thisChunk)].t.callback = (GenericHandler)&neighborKeepalive;
        		enableTimer(ttNeighbor[faceNum(thisChunk)]);
		
		        // add new neighbor to neighborhood
        		updateNeighbor(faceNum(thisChunk), neighbor);
     bf2:	f9 01       	movw	r30, r18
     bf4:	81 89       	ldd	r24, Z+17	; 0x11
     bf6:	87 70       	andi	r24, 0x07	; 7
     bf8:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <updateNeighbor>
     bfc:	3d c0       	rjmp	.+122    	; 0xc78 <handleNeighborMessage+0x228>
	    break;
      }
      case MSG_NEIGHBOR_KEEPALIVE:
      {
	    // are we currently looking for keepalives?  if yes, here it is!
	    if((ttNeighbor[faceNum(thisChunk)]).period == NEIGHBOR_KEEPALIVE_PERIOD)
     bfe:	a1 89       	ldd	r26, Z+17	; 0x11
     c00:	a7 70       	andi	r26, 0x07	; 7
     c02:	21 e1       	ldi	r18, 0x11	; 17
     c04:	a2 9f       	mul	r26, r18
     c06:	d0 01       	movw	r26, r0
     c08:	11 24       	eor	r1, r1
     c0a:	a3 5a       	subi	r26, 0xA3	; 163
     c0c:	be 4d       	sbci	r27, 0xDE	; 222
     c0e:	1c 96       	adiw	r26, 0x0c	; 12
     c10:	8d 91       	ld	r24, X+
     c12:	9d 91       	ld	r25, X+
     c14:	0d 90       	ld	r0, X+
     c16:	bc 91       	ld	r27, X
     c18:	a0 2d       	mov	r26, r0
     c1a:	84 3f       	cpi	r24, 0xF4	; 244
     c1c:	91 40       	sbci	r25, 0x01	; 1
     c1e:	a1 05       	cpc	r26, r1
     c20:	b1 05       	cpc	r27, r1
     c22:	51 f5       	brne	.+84     	; 0xc78 <handleNeighborMessage+0x228>
// takes a passed in character array and returns a UID representing the array.  Assumes 2-byte GUIDs.
Uid charToGUID(byte * c)
{
    Uid tmp;

    tmp = (Uid)(c[0]) << 8;
     c24:	e2 80       	ldd	r14, Z+2	; 0x02
    tmp |= c[1];
     c26:	f3 80       	ldd	r15, Z+3	; 0x03
// takes a passed in character array and returns a UID representing the array.  Assumes 2-byte GUIDs.
Uid charToGUID(byte * c)
{
    Uid tmp;

    tmp = (Uid)(c[0]) << 8;
     c28:	94 81       	ldd	r25, Z+4	; 0x04
     c2a:	80 e0       	ldi	r24, 0x00	; 0
    tmp |= c[1];
     c2c:	25 81       	ldd	r18, Z+5	; 0x05
     c2e:	8c 01       	movw	r16, r24
     c30:	02 2b       	or	r16, r18

	        neighbor = charToGUID(&(thisChunk->data[2]));
	        me = charToGUID(&(thisChunk->data[4]));

	        // got a bad or unexpected response - clear neighbor and restart scan
	        if(me != getGUID() || neighbor != thisNeighborhood.n[faceNum(thisChunk)])
     c32:	0e 94 e4 19 	call	0x33c8	; 0x33c8 <getGUID>
     c36:	08 17       	cp	r16, r24
     c38:	19 07       	cpc	r17, r25
     c3a:	99 f4       	brne	.+38     	; 0xc62 <handleNeighborMessage+0x212>
// takes a passed in character array and returns a UID representing the array.  Assumes 2-byte GUIDs.
Uid charToGUID(byte * c)
{
    Uid tmp;

    tmp = (Uid)(c[0]) << 8;
     c3c:	9e 2d       	mov	r25, r14
     c3e:	80 e0       	ldi	r24, 0x00	; 0
    tmp |= c[1];
     c40:	8f 29       	or	r24, r15

	        neighbor = charToGUID(&(thisChunk->data[2]));
	        me = charToGUID(&(thisChunk->data[4]));

	        // got a bad or unexpected response - clear neighbor and restart scan
	        if(me != getGUID() || neighbor != thisNeighborhood.n[faceNum(thisChunk)])
     c42:	e0 91 4f 21 	lds	r30, 0x214F
     c46:	f0 91 50 21 	lds	r31, 0x2150
     c4a:	e1 89       	ldd	r30, Z+17	; 0x11
     c4c:	e7 70       	andi	r30, 0x07	; 7
     c4e:	f0 e0       	ldi	r31, 0x00	; 0
     c50:	ee 0f       	add	r30, r30
     c52:	ff 1f       	adc	r31, r31
     c54:	ef 5a       	subi	r30, 0xAF	; 175
     c56:	fe 4d       	sbci	r31, 0xDE	; 222
     c58:	20 81       	ld	r18, Z
     c5a:	31 81       	ldd	r19, Z+1	; 0x01
     c5c:	82 17       	cp	r24, r18
     c5e:	93 07       	cpc	r25, r19
     c60:	59 f0       	breq	.+22     	; 0xc78 <handleNeighborMessage+0x228>
	        {
		        restartScan(faceNum(thisChunk));
     c62:	e0 91 4f 21 	lds	r30, 0x214F
     c66:	f0 91 50 21 	lds	r31, 0x2150
     c6a:	81 89       	ldd	r24, Z+17	; 0x11
     c6c:	87 70       	andi	r24, 0x07	; 7
     c6e:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <restartScan>
     c72:	02 c0       	rjmp	.+4      	; 0xc78 <handleNeighborMessage+0x228>
// called for all NEIGHBOR_MSG type reserved system handlers
byte handleNeighborMessage(void)
{
    if( thisChunk == NULL ) 
    {
      return 0;
     c74:	80 e0       	ldi	r24, 0x00	; 0
     c76:	01 c0       	rjmp	.+2      	; 0xc7a <handleNeighborMessage+0x22a>
        break;
      }
      default: 
        break;  
    }
    return 1;
     c78:	81 e0       	ldi	r24, 0x01	; 1
}
     c7a:	26 96       	adiw	r28, 0x06	; 6
     c7c:	cd bf       	out	0x3d, r28	; 61
     c7e:	de bf       	out	0x3e, r29	; 62
     c80:	df 91       	pop	r29
     c82:	cf 91       	pop	r28
     c84:	1f 91       	pop	r17
     c86:	0f 91       	pop	r16
     c88:	ff 90       	pop	r15
     c8a:	ef 90       	pop	r14
     c8c:	df 90       	pop	r13
     c8e:	08 95       	ret

00000c90 <neighborHandshakeCB>:
  sendSystemMessage(thisTimeout->arg, buf, 6, RES_SYS_HANDLER, (GenericHandler)&neighborKeepaliveCB);
}

// callback for neighbor_response packet
void neighborHandshakeCB(void)
{
     c90:	cf 93       	push	r28
     c92:	df 93       	push	r29
    // message was received.  add neighbor to neighborhood and initiate keepalives
    if(chunkResponseType(thisChunk) == MSG_RESP_ACK)
     c94:	e0 91 4f 21 	lds	r30, 0x214F
     c98:	f0 91 50 21 	lds	r31, 0x2150
     c9c:	81 89       	ldd	r24, Z+17	; 0x11
     c9e:	98 2f       	mov	r25, r24
     ca0:	98 71       	andi	r25, 0x18	; 24
     ca2:	98 30       	cpi	r25, 0x08	; 8
     ca4:	b9 f5       	brne	.+110    	; 0xd14 <neighborHandshakeCB+0x84>
// takes a passed in character array and returns a UID representing the array.  Assumes 2-byte GUIDs.
Uid charToGUID(byte * c)
{
    Uid tmp;

    tmp = (Uid)(c[0]) << 8;
     ca6:	74 81       	ldd	r23, Z+4	; 0x04
     ca8:	60 e0       	ldi	r22, 0x00	; 0
    tmp |= c[1];
     caa:	95 81       	ldd	r25, Z+5	; 0x05
     cac:	eb 01       	movw	r28, r22
     cae:	c9 2b       	or	r28, r25
    {
      // pull neighbor from packet, same position as how we initially sent it
      Uid neighbor = charToGUID(&(thisChunk->data[4]));
      
      // re-add timer for keepalive purposes
      ttNeighbor[faceNum(thisChunk)].period = NEIGHBOR_KEEPALIVE_PERIOD;
     cb0:	87 70       	andi	r24, 0x07	; 7
     cb2:	21 e1       	ldi	r18, 0x11	; 17
     cb4:	82 9f       	mul	r24, r18
     cb6:	c0 01       	movw	r24, r0
     cb8:	11 24       	eor	r1, r1
     cba:	fc 01       	movw	r30, r24
     cbc:	e3 5a       	subi	r30, 0xA3	; 163
     cbe:	fe 4d       	sbci	r31, 0xDE	; 222
     cc0:	44 ef       	ldi	r20, 0xF4	; 244
     cc2:	51 e0       	ldi	r21, 0x01	; 1
     cc4:	60 e0       	ldi	r22, 0x00	; 0
     cc6:	70 e0       	ldi	r23, 0x00	; 0
     cc8:	44 87       	std	Z+12, r20	; 0x0c
     cca:	55 87       	std	Z+13, r21	; 0x0d
     ccc:	66 87       	std	Z+14, r22	; 0x0e
     cce:	77 87       	std	Z+15, r23	; 0x0f
      if(ttNeighbor[faceNum(thisChunk)].t.state != INACTIVE)
     cd0:	22 85       	ldd	r18, Z+10	; 0x0a
     cd2:	22 23       	and	r18, r18
     cd4:	21 f0       	breq	.+8      	; 0xcde <neighborHandshakeCB+0x4e>
	{
	  deregisterTimeout(&(ttNeighbor[faceNum(thisChunk)].t));
     cd6:	81 5a       	subi	r24, 0xA1	; 161
     cd8:	9e 4d       	sbci	r25, 0xDE	; 222
     cda:	0e 94 ef 09 	call	0x13de	; 0x13de <deregisterTimeout>
	}
      ttNeighbor[faceNum(thisChunk)].t.callback = (GenericHandler)&neighborKeepalive;
     cde:	a0 91 4f 21 	lds	r26, 0x214F
     ce2:	b0 91 50 21 	lds	r27, 0x2150
     ce6:	51 96       	adiw	r26, 0x11	; 17
     ce8:	ec 91       	ld	r30, X
     cea:	51 97       	sbiw	r26, 0x11	; 17
     cec:	e7 70       	andi	r30, 0x07	; 7
     cee:	81 e1       	ldi	r24, 0x11	; 17
     cf0:	e8 9f       	mul	r30, r24
     cf2:	f0 01       	movw	r30, r0
     cf4:	11 24       	eor	r1, r1
     cf6:	e3 5a       	subi	r30, 0xA3	; 163
     cf8:	fe 4d       	sbci	r31, 0xDE	; 222
     cfa:	82 ee       	ldi	r24, 0xE2	; 226
     cfc:	93 e0       	ldi	r25, 0x03	; 3
     cfe:	80 87       	std	Z+8, r24	; 0x08
     d00:	91 87       	std	Z+9, r25	; 0x09
      enableTimer(ttNeighbor[faceNum(thisChunk)]);
     d02:	81 e0       	ldi	r24, 0x01	; 1
     d04:	80 8b       	std	Z+16, r24	; 0x10
      
      // add new neighbor to neighborhood
      updateNeighbor(faceNum(thisChunk), neighbor);
     d06:	51 96       	adiw	r26, 0x11	; 17
     d08:	8c 91       	ld	r24, X
     d0a:	be 01       	movw	r22, r28
     d0c:	87 70       	andi	r24, 0x07	; 7
     d0e:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <updateNeighbor>
     d12:	03 c0       	rjmp	.+6      	; 0xd1a <neighborHandshakeCB+0x8a>

    }
    else // no neighbor ACK!  begin rescanning
    {
      restartScan(faceNum(thisChunk));
     d14:	87 70       	andi	r24, 0x07	; 7
     d16:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <restartScan>
    }
  
  freeChunk(thisChunk);
     d1a:	80 91 4f 21 	lds	r24, 0x214F
     d1e:	90 91 50 21 	lds	r25, 0x2150
}
     d22:	df 91       	pop	r29
     d24:	cf 91       	pop	r28
    else // no neighbor ACK!  begin rescanning
    {
      restartScan(faceNum(thisChunk));
    }
  
  freeChunk(thisChunk);
     d26:	0c 94 1a 08 	jmp	0x1034	; 0x1034 <freeChunk>

00000d2a <neighborKeepaliveCB>:
void neighborKeepaliveCB(void)
{
    // message was received.  re-enable timer and continue as normal
    // note that since we always ACK a received message, this will happen even if the other block 
    // does not understand why the keepalive was sent.  however, the other block will restart a handshake.
    if(chunkResponseType(thisChunk) == MSG_RESP_ACK)
     d2a:	e0 91 4f 21 	lds	r30, 0x214F
     d2e:	f0 91 50 21 	lds	r31, 0x2150
     d32:	81 89       	ldd	r24, Z+17	; 0x11
     d34:	98 2f       	mov	r25, r24
     d36:	98 71       	andi	r25, 0x18	; 24
     d38:	87 70       	andi	r24, 0x07	; 7
     d3a:	98 30       	cpi	r25, 0x08	; 8
     d3c:	49 f4       	brne	.+18     	; 0xd50 <neighborKeepaliveCB+0x26>
    {
        enableTimer(ttNeighbor[faceNum(thisChunk)]);
     d3e:	91 e1       	ldi	r25, 0x11	; 17
     d40:	89 9f       	mul	r24, r25
     d42:	f0 01       	movw	r30, r0
     d44:	11 24       	eor	r1, r1
     d46:	e3 5a       	subi	r30, 0xA3	; 163
     d48:	fe 4d       	sbci	r31, 0xDE	; 222
     d4a:	81 e0       	ldi	r24, 0x01	; 1
     d4c:	80 8b       	std	Z+16, r24	; 0x10
     d4e:	02 c0       	rjmp	.+4      	; 0xd54 <neighborKeepaliveCB+0x2a>
    }
    else // neighbor lost!  begin rescanning
    {
        restartScan(faceNum(thisChunk));
     d50:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <restartScan>
    }

    freeChunk(thisChunk);
     d54:	80 91 4f 21 	lds	r24, 0x214F
     d58:	90 91 50 21 	lds	r25, 0x2150
     d5c:	0c 94 1a 08 	jmp	0x1034	; 0x1034 <freeChunk>

00000d60 <initEnsemble>:
  (ttNeighbor[i]).period = NEIGHBOR_SCAN_PERIOD;
  enableTimer(ttNeighbor[i]);
}

void initEnsemble(void)
{
     d60:	ff 92       	push	r15
     d62:	0f 93       	push	r16
     d64:	1f 93       	push	r17
     d66:	cf 93       	push	r28
     d68:	df 93       	push	r29
     d6a:	0d e6       	ldi	r16, 0x6D	; 109
     d6c:	11 e2       	ldi	r17, 0x21	; 33
    int i;
  
    // restart scanning for neighbors on all ports
    for( i=0; i<NUM_PORTS; ++i)
     d6e:	c0 e0       	ldi	r28, 0x00	; 0
     d70:	d0 e0       	ldi	r29, 0x00	; 0
        if(i == DEBUGPORT) {
            continue;
        }
        #endif

	registerTimer(&(ttNeighbor[i]));
     d72:	61 e1       	ldi	r22, 0x11	; 17
     d74:	f6 2e       	mov	r15, r22
     d76:	fc 9e       	mul	r15, r28
     d78:	c0 01       	movw	r24, r0
     d7a:	fd 9e       	mul	r15, r29
     d7c:	90 0d       	add	r25, r0
     d7e:	11 24       	eor	r1, r1
     d80:	83 5a       	subi	r24, 0xA3	; 163
     d82:	9e 4d       	sbci	r25, 0xDE	; 222
     d84:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <registerTimer>
	disableTimer(ttNeighbor[i]);
     d88:	f8 01       	movw	r30, r16
     d8a:	10 82       	st	Z, r1
        restartScan(i);
     d8c:	8c 2f       	mov	r24, r28
     d8e:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <restartScan>
void initEnsemble(void)
{
    int i;
  
    // restart scanning for neighbors on all ports
    for( i=0; i<NUM_PORTS; ++i)
     d92:	21 96       	adiw	r28, 0x01	; 1
     d94:	0f 5e       	subi	r16, 0xEF	; 239
     d96:	1f 4f       	sbci	r17, 0xFF	; 255
     d98:	c6 30       	cpi	r28, 0x06	; 6
     d9a:	d1 05       	cpc	r29, r1
     d9c:	61 f7       	brne	.-40     	; 0xd76 <initEnsemble+0x16>

	registerTimer(&(ttNeighbor[i]));
	disableTimer(ttNeighbor[i]);
        restartScan(i);
    }
}
     d9e:	df 91       	pop	r29
     da0:	cf 91       	pop	r28
     da2:	1f 91       	pop	r17
     da4:	0f 91       	pop	r16
     da6:	ff 90       	pop	r15
     da8:	08 95       	ret

00000daa <initHandlers>:
threadvar SystemHandler system;


void initHandlers(void){
  int i;
  system.HandlerMask=0;
     daa:	10 92 c3 21 	sts	0x21C3, r1
     dae:	10 92 c4 21 	sts	0x21C4, r1
     db2:	10 92 c5 21 	sts	0x21C5, r1
     db6:	10 92 c6 21 	sts	0x21C6, r1
     dba:	10 92 c7 21 	sts	0x21C7, r1
     dbe:	10 92 c8 21 	sts	0x21C8, r1
     dc2:	10 92 c9 21 	sts	0x21C9, r1
     dc6:	10 92 ca 21 	sts	0x21CA, r1
     dca:	eb ec       	ldi	r30, 0xCB	; 203
     dcc:	f1 e2       	ldi	r31, 0x21	; 33
  for( i=0; i<NUM_HANDLERS; i++){
    system.HandlerTable[i]=NULL;
     dce:	11 92       	st	Z+, r1
     dd0:	11 92       	st	Z+, r1


void initHandlers(void){
  int i;
  system.HandlerMask=0;
  for( i=0; i<NUM_HANDLERS; i++){
     dd2:	82 e2       	ldi	r24, 0x22	; 34
     dd4:	eb 30       	cpi	r30, 0x0B	; 11
     dd6:	f8 07       	cpc	r31, r24
     dd8:	d1 f7       	brne	.-12     	; 0xdce <initHandlers+0x24>
    system.HandlerTable[i]=NULL;
  }
}
     dda:	08 95       	ret

00000ddc <executeHandlers>:
//
//  if any mask is set, will scan through and execute handlers in ascending numerical order.
//  it is technically possible to trigger handlers during earlier handlers, or even the same handler repeatedly.
//  triggering an earlier handler will cause it to execute during the next iteration.
void executeHandlers(void)
{
     ddc:	8f 92       	push	r8
     dde:	9f 92       	push	r9
     de0:	af 92       	push	r10
     de2:	bf 92       	push	r11
     de4:	cf 92       	push	r12
     de6:	df 92       	push	r13
     de8:	ef 92       	push	r14
     dea:	ff 92       	push	r15
     dec:	0f 93       	push	r16
     dee:	1f 93       	push	r17
     df0:	cf 93       	push	r28
     df2:	df 93       	push	r29
	if(system.HandlerMask)
     df4:	20 91 c3 21 	lds	r18, 0x21C3
     df8:	30 91 c4 21 	lds	r19, 0x21C4
     dfc:	40 91 c5 21 	lds	r20, 0x21C5
     e00:	50 91 c6 21 	lds	r21, 0x21C6
     e04:	60 91 c7 21 	lds	r22, 0x21C7
     e08:	70 91 c8 21 	lds	r23, 0x21C8
     e0c:	80 91 c9 21 	lds	r24, 0x21C9
     e10:	90 91 ca 21 	lds	r25, 0x21CA
     e14:	a0 e0       	ldi	r26, 0x00	; 0
     e16:	0e 94 31 26 	call	0x4c62	; 0x4c62 <__cmpdi2_s8>
     e1a:	09 f4       	brne	.+2      	; 0xe1e <executeHandlers+0x42>
     e1c:	49 c0       	rjmp	.+146    	; 0xeb0 <executeHandlers+0xd4>
     e1e:	0b ec       	ldi	r16, 0xCB	; 203
     e20:	11 e2       	ldi	r17, 0x21	; 33
//  ExecuteHandlers
//
//  if any mask is set, will scan through and execute handlers in ascending numerical order.
//  it is technically possible to trigger handlers during earlier handlers, or even the same handler repeatedly.
//  triggering an earlier handler will cause it to execute during the next iteration.
void executeHandlers(void)
     e22:	c1 2c       	mov	r12, r1
     e24:	d1 2c       	mov	r13, r1
     e26:	76 01       	movw	r14, r12
     e28:	c3 94       	inc	r12
		Event i = 0;
		uint32_t j = 0x00000001;
	
		while(i < NUM_HANDLERS)
		{
			if(system.HandlerMask & j)
     e2a:	80 90 c3 21 	lds	r8, 0x21C3
     e2e:	90 90 c4 21 	lds	r9, 0x21C4
     e32:	a0 90 c5 21 	lds	r10, 0x21C5
     e36:	b0 90 c6 21 	lds	r11, 0x21C6
     e3a:	d7 01       	movw	r26, r14
     e3c:	c6 01       	movw	r24, r12
     e3e:	2c 2d       	mov	r18, r12
     e40:	28 21       	and	r18, r8
     e42:	39 2f       	mov	r19, r25
     e44:	39 21       	and	r19, r9
     e46:	4a 2f       	mov	r20, r26
     e48:	4a 21       	and	r20, r10
     e4a:	5b 2f       	mov	r21, r27
     e4c:	5b 21       	and	r21, r11
     e4e:	60 e0       	ldi	r22, 0x00	; 0
     e50:	70 e0       	ldi	r23, 0x00	; 0
     e52:	80 e0       	ldi	r24, 0x00	; 0
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	a0 e0       	ldi	r26, 0x00	; 0
     e58:	0e 94 31 26 	call	0x4c62	; 0x4c62 <__cmpdi2_s8>
     e5c:	f1 f0       	breq	.+60     	; 0xe9a <executeHandlers+0xbe>
			{
				// clear mask bit1
				system.HandlerMask &= ~j;
     e5e:	d7 01       	movw	r26, r14
     e60:	c6 01       	movw	r24, r12
     e62:	80 95       	com	r24
     e64:	90 95       	com	r25
     e66:	a0 95       	com	r26
     e68:	b0 95       	com	r27
     e6a:	88 22       	and	r8, r24
     e6c:	99 22       	and	r9, r25
     e6e:	aa 22       	and	r10, r26
     e70:	bb 22       	and	r11, r27
     e72:	80 92 c3 21 	sts	0x21C3, r8
     e76:	90 92 c4 21 	sts	0x21C4, r9
     e7a:	a0 92 c5 21 	sts	0x21C5, r10
     e7e:	b0 92 c6 21 	sts	0x21C6, r11
     e82:	10 92 c7 21 	sts	0x21C7, r1
     e86:	10 92 c8 21 	sts	0x21C8, r1
     e8a:	10 92 c9 21 	sts	0x21C9, r1
     e8e:	10 92 ca 21 	sts	0x21CA, r1
				
				// execute callback
				(*(system.HandlerTable[i]))();
     e92:	d8 01       	movw	r26, r16
     e94:	ed 91       	ld	r30, X+
     e96:	fc 91       	ld	r31, X
     e98:	19 95       	eicall
			}

			i++;
			j <<= 1;
     e9a:	cc 0c       	add	r12, r12
     e9c:	dd 1c       	adc	r13, r13
     e9e:	ee 1c       	adc	r14, r14
     ea0:	ff 1c       	adc	r15, r15
     ea2:	0e 5f       	subi	r16, 0xFE	; 254
     ea4:	1f 4f       	sbci	r17, 0xFF	; 255
	if(system.HandlerMask)
	{
		Event i = 0;
		uint32_t j = 0x00000001;
	
		while(i < NUM_HANDLERS)
     ea6:	b2 e2       	ldi	r27, 0x22	; 34
     ea8:	0b 30       	cpi	r16, 0x0B	; 11
     eaa:	1b 07       	cpc	r17, r27
     eac:	09 f0       	breq	.+2      	; 0xeb0 <executeHandlers+0xd4>
     eae:	bd cf       	rjmp	.-134    	; 0xe2a <executeHandlers+0x4e>

			i++;
			j <<= 1;
		}
	}
}
     eb0:	df 91       	pop	r29
     eb2:	cf 91       	pop	r28
     eb4:	1f 91       	pop	r17
     eb6:	0f 91       	pop	r16
     eb8:	ff 90       	pop	r15
     eba:	ef 90       	pop	r14
     ebc:	df 90       	pop	r13
     ebe:	cf 90       	pop	r12
     ec0:	bf 90       	pop	r11
     ec2:	af 90       	pop	r10
     ec4:	9f 90       	pop	r9
     ec6:	8f 90       	pop	r8
     ec8:	08 95       	ret

00000eca <triggerHandler>:
//TriggerHandler
//	will trigger a callback for a valid event and valid handler
//  execution will occur during the CURRENT or NEXT handler scan
// 	returns 1 on success, 0 on failure
int triggerHandler(Event e)
{
     eca:	cf 93       	push	r28
     ecc:	df 93       	push	r29
     ece:	48 2f       	mov	r20, r24
	if(e < NUM_HANDLERS)
     ed0:	80 32       	cpi	r24, 0x20	; 32
     ed2:	60 f5       	brcc	.+88     	; 0xf2c <triggerHandler+0x62>
	{
		if(system.HandlerTable[e] == NULL)
     ed4:	e8 2f       	mov	r30, r24
     ed6:	f0 e0       	ldi	r31, 0x00	; 0
     ed8:	ee 0f       	add	r30, r30
     eda:	ff 1f       	adc	r31, r31
     edc:	e5 53       	subi	r30, 0x35	; 53
     ede:	fe 4d       	sbci	r31, 0xDE	; 222
     ee0:	20 81       	ld	r18, Z
     ee2:	31 81       	ldd	r19, Z+1	; 0x01
     ee4:	23 2b       	or	r18, r19
     ee6:	11 f1       	breq	.+68     	; 0xf2c <triggerHandler+0x62>
		{
			return 0;
		}
		
		system.HandlerMask |= (uint32_t)1 << e;
     ee8:	81 e0       	ldi	r24, 0x01	; 1
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	a0 e0       	ldi	r26, 0x00	; 0
     eee:	b0 e0       	ldi	r27, 0x00	; 0
     ef0:	04 c0       	rjmp	.+8      	; 0xefa <triggerHandler+0x30>
     ef2:	88 0f       	add	r24, r24
     ef4:	99 1f       	adc	r25, r25
     ef6:	aa 1f       	adc	r26, r26
     ef8:	bb 1f       	adc	r27, r27
     efa:	4a 95       	dec	r20
     efc:	d2 f7       	brpl	.-12     	; 0xef2 <triggerHandler+0x28>
     efe:	50 91 c3 21 	lds	r21, 0x21C3
     f02:	58 2b       	or	r21, r24
     f04:	40 91 c4 21 	lds	r20, 0x21C4
     f08:	49 2b       	or	r20, r25
     f0a:	30 91 c5 21 	lds	r19, 0x21C5
     f0e:	3a 2b       	or	r19, r26
     f10:	20 91 c6 21 	lds	r18, 0x21C6
     f14:	2b 2b       	or	r18, r27
     f16:	50 93 c3 21 	sts	0x21C3, r21
     f1a:	40 93 c4 21 	sts	0x21C4, r20
     f1e:	30 93 c5 21 	sts	0x21C5, r19
     f22:	20 93 c6 21 	sts	0x21C6, r18
		return 1;
     f26:	21 e0       	ldi	r18, 0x01	; 1
     f28:	30 e0       	ldi	r19, 0x00	; 0
     f2a:	02 c0       	rjmp	.+4      	; 0xf30 <triggerHandler+0x66>
	}
	
	return 0;	
     f2c:	20 e0       	ldi	r18, 0x00	; 0
     f2e:	30 e0       	ldi	r19, 0x00	; 0
}
     f30:	c9 01       	movw	r24, r18
     f32:	df 91       	pop	r29
     f34:	cf 91       	pop	r28
     f36:	08 95       	ret

00000f38 <registerHandler>:
// will register a callback for a valid event with currently NULL callback.
// must unregister a valid handler before re-registering.
// returns 1 on success, 0 on failure.
int registerHandler(Event e, GenericHandler callback)
{
	if(e < NUM_HANDLERS)
     f38:	80 32       	cpi	r24, 0x20	; 32
     f3a:	78 f4       	brcc	.+30     	; 0xf5a <registerHandler+0x22>
	{
		if(system.HandlerTable[e] == NULL)
     f3c:	e8 2f       	mov	r30, r24
     f3e:	f0 e0       	ldi	r31, 0x00	; 0
     f40:	ee 0f       	add	r30, r30
     f42:	ff 1f       	adc	r31, r31
     f44:	e5 53       	subi	r30, 0x35	; 53
     f46:	fe 4d       	sbci	r31, 0xDE	; 222
     f48:	80 81       	ld	r24, Z
     f4a:	91 81       	ldd	r25, Z+1	; 0x01
     f4c:	89 2b       	or	r24, r25
     f4e:	29 f4       	brne	.+10     	; 0xf5a <registerHandler+0x22>
		{
			system.HandlerTable[e] = callback;
     f50:	60 83       	st	Z, r22
     f52:	71 83       	std	Z+1, r23	; 0x01
			return 1;
     f54:	21 e0       	ldi	r18, 0x01	; 1
     f56:	30 e0       	ldi	r19, 0x00	; 0
     f58:	02 c0       	rjmp	.+4      	; 0xf5e <registerHandler+0x26>
		}
		
		return 0;
	}
	
	return 0;
     f5a:	20 e0       	ldi	r18, 0x00	; 0
     f5c:	30 e0       	ldi	r19, 0x00	; 0
}
     f5e:	c9 01       	movw	r24, r18
     f60:	08 95       	ret

00000f62 <unregisterHandler>:
// will unregister a valid callback for a valid event, setting it to NULL.
// must unregister a valid handler before re-registering.
// returns 1 on success, 0 on failure.
int unregisterHandler(Event e)
{
	if(e < NUM_HANDLERS)
     f62:	80 32       	cpi	r24, 0x20	; 32
     f64:	78 f4       	brcc	.+30     	; 0xf84 <unregisterHandler+0x22>
	{
		if(system.HandlerTable[e] == NULL)
     f66:	e8 2f       	mov	r30, r24
     f68:	f0 e0       	ldi	r31, 0x00	; 0
     f6a:	ee 0f       	add	r30, r30
     f6c:	ff 1f       	adc	r31, r31
     f6e:	e5 53       	subi	r30, 0x35	; 53
     f70:	fe 4d       	sbci	r31, 0xDE	; 222
     f72:	80 81       	ld	r24, Z
     f74:	91 81       	ldd	r25, Z+1	; 0x01
     f76:	89 2b       	or	r24, r25
     f78:	29 f0       	breq	.+10     	; 0xf84 <unregisterHandler+0x22>
		{
			return 0;
		}
		
		system.HandlerTable[e] = NULL;
     f7a:	10 82       	st	Z, r1
     f7c:	11 82       	std	Z+1, r1	; 0x01
		return 1;
     f7e:	21 e0       	ldi	r18, 0x01	; 1
     f80:	30 e0       	ldi	r19, 0x00	; 0
     f82:	02 c0       	rjmp	.+4      	; 0xf88 <unregisterHandler+0x26>
	}
	
	return 0;
     f84:	20 e0       	ldi	r18, 0x00	; 0
     f86:	30 e0       	ldi	r19, 0x00	; 0
}
     f88:	c9 01       	movw	r24, r18
     f8a:	08 95       	ret

00000f8c <callHandler>:

void callHandler(Event e)
{
	if(e < NUM_HANDLERS)
     f8c:	80 32       	cpi	r24, 0x20	; 32
     f8e:	60 f4       	brcc	.+24     	; 0xfa8 <callHandler+0x1c>
	{
		if(system.HandlerTable[e] != NULL)
     f90:	e8 2f       	mov	r30, r24
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	ee 0f       	add	r30, r30
     f96:	ff 1f       	adc	r31, r31
     f98:	e5 53       	subi	r30, 0x35	; 53
     f9a:	fe 4d       	sbci	r31, 0xDE	; 222
     f9c:	01 90       	ld	r0, Z+
     f9e:	f0 81       	ld	r31, Z
     fa0:	e0 2d       	mov	r30, r0
     fa2:	30 97       	sbiw	r30, 0x00	; 0
     fa4:	09 f0       	breq	.+2      	; 0xfa8 <callHandler+0x1c>
		{
			(system.HandlerTable[e])();
     fa6:	19 94       	eijmp
     fa8:	08 95       	ret

00000faa <getColor>:
threadvar Intensity 	currentIntensity = INTENSITY_MAX;

Color getColor()
{
	return currentColor;
}
     faa:	80 91 0e 22 	lds	r24, 0x220E
     fae:	08 95       	ret

00000fb0 <getNextColor>:

Color getNextColor()
{
	Color tmp = currentColor;
     fb0:	80 91 0e 22 	lds	r24, 0x220E
	
	tmp++;
     fb4:	8f 5f       	subi	r24, 0xFF	; 255
	
	if(tmp >= NUM_COLORS)
     fb6:	89 30       	cpi	r24, 0x09	; 9
     fb8:	08 f0       	brcs	.+2      	; 0xfbc <getNextColor+0xc>
	{
		tmp = 0;
     fba:	80 e0       	ldi	r24, 0x00	; 0
	}

	return tmp;
}
     fbc:	08 95       	ret

00000fbe <setColor>:

void setColor(Color c)
{
	currentColor = c;
     fbe:	80 93 0e 22 	sts	0x220E, r24

	setLED(colors[c][0], colors[c][1], colors[c][2], currentIntensity);
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	fc 01       	movw	r30, r24
     fc6:	ee 0f       	add	r30, r30
     fc8:	ff 1f       	adc	r31, r31
     fca:	e8 0f       	add	r30, r24
     fcc:	f9 1f       	adc	r31, r25
     fce:	ef 5f       	subi	r30, 0xFF	; 255
     fd0:	ff 4d       	sbci	r31, 0xDF	; 223
	return currentColor;
}

void setLED(byte r, byte g, byte b, Intensity i)
{
	setHWLED(r,g,b,i);
     fd2:	20 91 00 20 	lds	r18, 0x2000
     fd6:	42 81       	ldd	r20, Z+2	; 0x02
     fd8:	61 81       	ldd	r22, Z+1	; 0x01
     fda:	80 81       	ld	r24, Z
     fdc:	0c 94 30 19 	jmp	0x3260	; 0x3260 <setHWLED>

00000fe0 <setNextColor>:
	setLED(colors[c][0], colors[c][1], colors[c][2], currentIntensity);
}

Color setNextColor()
{
	Color tmp = getNextColor();
     fe0:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <getNextColor>

	setColor(tmp);
     fe4:	0e 94 df 07 	call	0xfbe	; 0xfbe <setColor>
	
	return currentColor;
}
     fe8:	80 91 0e 22 	lds	r24, 0x220E
     fec:	08 95       	ret

00000fee <setLED>:

void setLED(byte r, byte g, byte b, Intensity i)
{
	setHWLED(r,g,b,i);
     fee:	0c 94 30 19 	jmp	0x3260	; 0x3260 <setHWLED>

00000ff2 <setIntensity>:
}

void setIntensity(Intensity i)
{
	currentIntensity = i;
     ff2:	80 93 00 20 	sts	0x2000, r24
	return currentColor;
}

void setLED(byte r, byte g, byte b, Intensity i)
{
	setHWLED(r,g,b,i);
     ff6:	28 2f       	mov	r18, r24
     ff8:	40 91 0d 22 	lds	r20, 0x220D
     ffc:	60 91 0c 22 	lds	r22, 0x220C
    1000:	80 91 0b 22 	lds	r24, 0x220B
    1004:	0c 94 30 19 	jmp	0x3260	; 0x3260 <setHWLED>

00001008 <getIntensity>:
}

Intensity getIntensity()
{
	return currentIntensity;
}
    1008:	80 91 00 20 	lds	r24, 0x2000
    100c:	08 95       	ret

0000100e <initLED>:

void initLED()
{
	initHWLED();
    100e:	0c 94 58 19 	jmp	0x32b0	; 0x32b0 <initHWLED>

00001012 <initializeMemory>:
threadvar blockConf conf;

//////////////////// PUBLIC FUNCTIONS /////////////////////
// set-up memory
void initializeMemory(void)
{
    1012:	e4 e4       	ldi	r30, 0x44	; 68
    1014:	f3 e2       	ldi	r31, 0x23	; 35
    uint8_t i;

    // clear all status bits for receive chunks
    for( i=0; i<NUM_RXCHUNKS; i++ )
    {
        rxChunks[i].status = CHUNK_FREE;
    1016:	10 82       	st	Z, r1
    1018:	78 96       	adiw	r30, 0x18	; 24
void initializeMemory(void)
{
    uint8_t i;

    // clear all status bits for receive chunks
    for( i=0; i<NUM_RXCHUNKS; i++ )
    101a:	84 e2       	ldi	r24, 0x24	; 36
    101c:	e4 36       	cpi	r30, 0x64	; 100
    101e:	f8 07       	cpc	r31, r24
    1020:	d1 f7       	brne	.-12     	; 0x1016 <initializeMemory+0x4>
    1022:	e4 e2       	ldi	r30, 0x24	; 36
    1024:	f2 e2       	ldi	r31, 0x22	; 34
    }
    
    // clear all status bits for receive chunks
    for( i=0; i<NUM_TXCHUNKS; i++ )
    {
        txChunks[i].status = CHUNK_FREE;
    1026:	10 82       	st	Z, r1
    1028:	78 96       	adiw	r30, 0x18	; 24
    {
        rxChunks[i].status = CHUNK_FREE;
    }
    
    // clear all status bits for receive chunks
    for( i=0; i<NUM_TXCHUNKS; i++ )
    102a:	83 e2       	ldi	r24, 0x23	; 35
    102c:	e4 34       	cpi	r30, 0x44	; 68
    102e:	f8 07       	cpc	r31, r24
    1030:	d1 f7       	brne	.-12     	; 0x1026 <initializeMemory+0x14>
    }

    // load config data
    //TODO: re-enable
    //restore(&conf, &nv_conf, sizeof(blockConf));
}
    1032:	08 95       	ret

00001034 <freeChunk>:

// this loops through and frees all connected Chunks in the list.
void freeChunk(Chunk * c)
{
    1034:	fc 01       	movw	r30, r24
  Chunk * tmp;	

  while(c != NULL)
    1036:	09 c0       	rjmp	.+18     	; 0x104a <freeChunk+0x16>
    {
      if(chunkInUse(c))
    1038:	81 89       	ldd	r24, Z+17	; 0x11
    103a:	87 fd       	sbrc	r24, 7
        {
	  c->status = CHUNK_FREE;
    103c:	11 8a       	std	Z+17, r1	; 0x11
        }
      tmp = c->next;
    103e:	92 89       	ldd	r25, Z+18	; 0x12
    1040:	83 89       	ldd	r24, Z+19	; 0x13
      c->next = NULL;
    1042:	12 8a       	std	Z+18, r1	; 0x12
    1044:	13 8a       	std	Z+19, r1	; 0x13
      c = tmp;
    1046:	e9 2f       	mov	r30, r25
    1048:	f8 2f       	mov	r31, r24
// this loops through and frees all connected Chunks in the list.
void freeChunk(Chunk * c)
{
  Chunk * tmp;	

  while(c != NULL)
    104a:	30 97       	sbiw	r30, 0x00	; 0
    104c:	a9 f7       	brne	.-22     	; 0x1038 <freeChunk+0x4>
        }
      tmp = c->next;
      c->next = NULL;
      c = tmp;
    }
}
    104e:	08 95       	ret

00001050 <getSystemChunk>:
Chunk* getSystemChunk(byte which)
{
    int8_t i;
    Chunk*  current;

    if(which == RXCHUNK)
    1050:	81 11       	cpse	r24, r1
    1052:	03 c0       	rjmp	.+6      	; 0x105a <getSystemChunk+0xa>
      {
	current = rxChunks;
    1054:	83 e3       	ldi	r24, 0x33	; 51
    1056:	93 e2       	ldi	r25, 0x23	; 35
    1058:	02 c0       	rjmp	.+4      	; 0x105e <getSystemChunk+0xe>

	i = NUM_RXCHUNKS-1;
      }
    else
      {
	current = txChunks;
    105a:	83 e1       	ldi	r24, 0x13	; 19
    105c:	92 e2       	ldi	r25, 0x22	; 34
    int8_t i;
    Chunk*  current;

    if(which == RXCHUNK)
      {
	current = rxChunks;
    105e:	2c e0       	ldi	r18, 0x0C	; 12
      c->next = NULL;
      c = tmp;
    }
}

Chunk* getSystemChunk(byte which)
    1060:	fc 01       	movw	r30, r24
    1062:	e8 5f       	subi	r30, 0xF8	; 248
    1064:	fe 4f       	sbci	r31, 0xFE	; 254
    1066:	dc 01       	movw	r26, r24
    1068:	a7 5e       	subi	r26, 0xE7	; 231
    106a:	be 4f       	sbci	r27, 0xFE	; 254

    // look for unused Chunk
    for(; i>=0; i--)
    {
        // check top bit to indicate usage
      if( !chunkInUse((&(current[i]))) )
    106c:	3c 91       	ld	r19, X
    106e:	37 fd       	sbrc	r19, 7
    1070:	05 c0       	rjmp	.+10     	; 0x107c <getSystemChunk+0x2c>
        {
            // indicate in use
	  (current[i]).status = CHUNK_USED;
    1072:	80 e8       	ldi	r24, 0x80	; 128
    1074:	81 8b       	std	Z+17, r24	; 0x11
          
	  // clear old next ptr in case non-NULL
	  (current[i]).next = NULL;
    1076:	12 8a       	std	Z+18, r1	; 0x12
    1078:	13 8a       	std	Z+19, r1	; 0x13
	  return &(current[i]);
    107a:	06 c0       	rjmp	.+12     	; 0x1088 <getSystemChunk+0x38>
    107c:	21 50       	subi	r18, 0x01	; 1
    107e:	48 97       	sbiw	r24, 0x18	; 24

	i = NUM_TXCHUNKS-1;
      }

    // look for unused Chunk
    for(; i>=0; i--)
    1080:	21 11       	cpse	r18, r1
    1082:	ee cf       	rjmp	.-36     	; 0x1060 <getSystemChunk+0x10>
	  return &(current[i]);
        }
        // else, in use (supposedly)
    }
    // none free!
    return NULL;  
    1084:	e0 e0       	ldi	r30, 0x00	; 0
    1086:	f0 e0       	ldi	r31, 0x00	; 0
}
    1088:	cf 01       	movw	r24, r30
    108a:	08 95       	ret

0000108c <getSystemRXChunk>:

// return pointer to free memory Chunk
Chunk* getSystemRXChunk()
{
  return getSystemChunk(RXCHUNK);
    108c:	80 e0       	ldi	r24, 0x00	; 0
    108e:	0c 94 28 08 	jmp	0x1050	; 0x1050 <getSystemChunk>

00001092 <getSystemTXChunk>:
}

Chunk* getSystemTXChunk()
{
  return getSystemChunk(TXCHUNK);
    1092:	81 e0       	ldi	r24, 0x01	; 1
    1094:	0c 94 28 08 	jmp	0x1050	; 0x1050 <getSystemChunk>

00001098 <sendMessageToUid>:
#include "led.bbh"



byte sendMessageToUid(Chunk* c, Uid dest, byte * msg, byte length, MsgHandler mh, GenericHandler cb)
{
    1098:	ef 92       	push	r14
    109a:	ff 92       	push	r15
    109c:	0f 93       	push	r16
    109e:	1f 93       	push	r17
    10a0:	cf 93       	push	r28
    10a2:	df 93       	push	r29
    10a4:	ec 01       	movw	r28, r24
    10a6:	cb 01       	movw	r24, r22
    10a8:	e1 e5       	ldi	r30, 0x51	; 81
    10aa:	f1 e2       	ldi	r31, 0x21	; 33
    byte i;

    for(i = 0; i < NUM_PORTS; ++i)
    10ac:	60 e0       	ldi	r22, 0x00	; 0
    {
        if(thisNeighborhood.n[i] == dest)
    10ae:	a1 91       	ld	r26, Z+
    10b0:	b1 91       	ld	r27, Z+
    10b2:	a8 17       	cp	r26, r24
    10b4:	b9 07       	cpc	r27, r25
    10b6:	61 f4       	brne	.+24     	; 0x10d0 <sendMessageToUid+0x38>
        {
            if(setupChunk(c,i, msg, length, mh, cb) == 0)
    10b8:	ce 01       	movw	r24, r28
    10ba:	0e 94 2e 03 	call	0x65c	; 0x65c <setupChunk>
    10be:	81 11       	cpse	r24, r1
    10c0:	02 c0       	rjmp	.+4      	; 0x10c6 <sendMessageToUid+0x2e>
            {
                return 0;
    10c2:	80 e0       	ldi	r24, 0x00	; 0
    10c4:	09 c0       	rjmp	.+18     	; 0x10d8 <sendMessageToUid+0x40>
            }
            queueChunk(c);
    10c6:	ce 01       	movw	r24, r28
    10c8:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <queueChunk>
            return 1;
    10cc:	81 e0       	ldi	r24, 0x01	; 1
    10ce:	04 c0       	rjmp	.+8      	; 0x10d8 <sendMessageToUid+0x40>

byte sendMessageToUid(Chunk* c, Uid dest, byte * msg, byte length, MsgHandler mh, GenericHandler cb)
{
    byte i;

    for(i = 0; i < NUM_PORTS; ++i)
    10d0:	6f 5f       	subi	r22, 0xFF	; 255
    10d2:	66 30       	cpi	r22, 0x06	; 6
    10d4:	61 f7       	brne	.-40     	; 0x10ae <sendMessageToUid+0x16>
    10d6:	f5 cf       	rjmp	.-22     	; 0x10c2 <sendMessageToUid+0x2a>
            return 1;
        }
    }

    return 0;
}
    10d8:	df 91       	pop	r29
    10da:	cf 91       	pop	r28
    10dc:	1f 91       	pop	r17
    10de:	0f 91       	pop	r16
    10e0:	ff 90       	pop	r15
    10e2:	ef 90       	pop	r14
    10e4:	08 95       	ret

000010e6 <sendMessageToPort>:

byte sendMessageToPort(Chunk* c, PRef dest, byte * msg, byte length, MsgHandler mh, GenericHandler cb)
{
    10e6:	ef 92       	push	r14
    10e8:	ff 92       	push	r15
    10ea:	0f 93       	push	r16
    10ec:	1f 93       	push	r17
    10ee:	cf 93       	push	r28
    10f0:	df 93       	push	r29
    10f2:	ec 01       	movw	r28, r24
    // NOTE: Can no longer support BROADCAST since requires 6 memory chunks passed in
    if(dest == BROADCAST)
    10f4:	6f 3f       	cpi	r22, 0xFF	; 255
    10f6:	11 f4       	brne	.+4      	; 0x10fc <sendMessageToPort+0x16>
    {
        return 0;
    10f8:	80 e0       	ldi	r24, 0x00	; 0
    10fa:	0a c0       	rjmp	.+20     	; 0x1110 <sendMessageToPort+0x2a>
    }
    else
    {
        if(dest < NUM_PORTS)
    10fc:	66 30       	cpi	r22, 0x06	; 6
    10fe:	e0 f7       	brcc	.-8      	; 0x10f8 <sendMessageToPort+0x12>
        {
            if(setupChunk(c,dest, msg, length, mh, cb) == 0)
    1100:	0e 94 2e 03 	call	0x65c	; 0x65c <setupChunk>
    1104:	88 23       	and	r24, r24
    1106:	c1 f3       	breq	.-16     	; 0x10f8 <sendMessageToPort+0x12>
            {
                return 0;
            }
            queueChunk(c);
    1108:	ce 01       	movw	r24, r28
    110a:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <queueChunk>
            return 1;
    110e:	81 e0       	ldi	r24, 0x01	; 1
        }
    }
    
    return 0;
}
    1110:	df 91       	pop	r29
    1112:	cf 91       	pop	r28
    1114:	1f 91       	pop	r17
    1116:	0f 91       	pop	r16
    1118:	ff 90       	pop	r15
    111a:	ef 90       	pop	r14
    111c:	08 95       	ret

0000111e <sendSystemMessage>:

// ----------- SEND SYSTEM MESSAGE to PORT
//
// Probably shouldn't be used by a user, but needed by various sytem routines.
byte sendSystemMessage(PRef dest, byte * msg, byte length, MsgHandler mh, GenericHandler cb)
{
    111e:	6f 92       	push	r6
    1120:	7f 92       	push	r7
    1122:	8f 92       	push	r8
    1124:	9f 92       	push	r9
    1126:	af 92       	push	r10
    1128:	bf 92       	push	r11
    112a:	cf 92       	push	r12
    112c:	df 92       	push	r13
    112e:	ef 92       	push	r14
    1130:	ff 92       	push	r15
    1132:	0f 93       	push	r16
    1134:	1f 93       	push	r17
    1136:	cf 93       	push	r28
    1138:	df 93       	push	r29
    113a:	78 2e       	mov	r7, r24
    113c:	6b 01       	movw	r12, r22
    113e:	64 2e       	mov	r6, r20
    1140:	59 01       	movw	r10, r18
    1142:	48 01       	movw	r8, r16
    Chunk* c;

    if(dest == BROADCAST)
    1144:	8f ef       	ldi	r24, 0xFF	; 255
    1146:	78 12       	cpse	r7, r24
    1148:	1b c0       	rjmp	.+54     	; 0x1180 <sendSystemMessage+0x62>
    114a:	71 2c       	mov	r7, r1
        byte i;
        
        for(i = 0; i < NUM_PORTS; ++i)
        {
            // set it to appropriate chunk
            c = getSystemTXChunk();
    114c:	0e 94 49 08 	call	0x1092	; 0x1092 <getSystemTXChunk>
    1150:	ec 01       	movw	r28, r24
            
            // in use - can't send
            if( c == NULL ) 
    1152:	00 97       	sbiw	r24, 0x00	; 0
    1154:	81 f0       	breq	.+32     	; 0x1176 <sendSystemMessage+0x58>
            {
                continue;
            }
            
            if(setupChunk(c,i, msg, length, mh, cb) == 0)
    1156:	74 01       	movw	r14, r8
    1158:	85 01       	movw	r16, r10
    115a:	26 2d       	mov	r18, r6
    115c:	a6 01       	movw	r20, r12
    115e:	67 2d       	mov	r22, r7
    1160:	0e 94 2e 03 	call	0x65c	; 0x65c <setupChunk>
    1164:	81 11       	cpse	r24, r1
    1166:	04 c0       	rjmp	.+8      	; 0x1170 <sendSystemMessage+0x52>
            {
                freeChunk(c);
    1168:	ce 01       	movw	r24, r28
    116a:	0e 94 1a 08 	call	0x1034	; 0x1034 <freeChunk>
                continue;
    116e:	03 c0       	rjmp	.+6      	; 0x1176 <sendSystemMessage+0x58>
            }
            queueChunk(c);
    1170:	ce 01       	movw	r24, r28
    1172:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <queueChunk>

    if(dest == BROADCAST)
    {
        byte i;
        
        for(i = 0; i < NUM_PORTS; ++i)
    1176:	73 94       	inc	r7
    1178:	86 e0       	ldi	r24, 0x06	; 6
    117a:	78 12       	cpse	r7, r24
    117c:	e7 cf       	rjmp	.-50     	; 0x114c <sendSystemMessage+0x2e>
    117e:	1c c0       	rjmp	.+56     	; 0x11b8 <sendSystemMessage+0x9a>
        
        return i;
    }
    else
    {
        if(dest < NUM_PORTS)
    1180:	85 e0       	ldi	r24, 0x05	; 5
    1182:	87 15       	cp	r24, r7
    1184:	08 f4       	brcc	.+2      	; 0x1188 <sendSystemMessage+0x6a>
    1186:	11 c0       	rjmp	.+34     	; 0x11aa <sendSystemMessage+0x8c>
        {
            // set it to appropriate chunk
            c = getSystemTXChunk();
    1188:	0e 94 49 08 	call	0x1092	; 0x1092 <getSystemTXChunk>
    118c:	ec 01       	movw	r28, r24
            
            // in use - can't send
            if( c == NULL ) 
    118e:	00 97       	sbiw	r24, 0x00	; 0
    1190:	61 f0       	breq	.+24     	; 0x11aa <sendSystemMessage+0x8c>
            {
                return 0;
            }
            
            if(setupChunk(c,dest, msg, length, mh, cb) == 0)
    1192:	78 01       	movw	r14, r16
    1194:	85 01       	movw	r16, r10
    1196:	26 2d       	mov	r18, r6
    1198:	a6 01       	movw	r20, r12
    119a:	67 2d       	mov	r22, r7
    119c:	0e 94 2e 03 	call	0x65c	; 0x65c <setupChunk>
    11a0:	81 11       	cpse	r24, r1
    11a2:	05 c0       	rjmp	.+10     	; 0x11ae <sendSystemMessage+0x90>
            {
                freeChunk(c);
    11a4:	ce 01       	movw	r24, r28
    11a6:	0e 94 1a 08 	call	0x1034	; 0x1034 <freeChunk>
                return 0;
    11aa:	71 2c       	mov	r7, r1
    11ac:	05 c0       	rjmp	.+10     	; 0x11b8 <sendSystemMessage+0x9a>
            }
            queueChunk(c);
    11ae:	ce 01       	movw	r24, r28
    11b0:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <queueChunk>
            return 1;
    11b4:	77 24       	eor	r7, r7
    11b6:	73 94       	inc	r7
        }
    }
    
    return 0;
}
    11b8:	87 2d       	mov	r24, r7
    11ba:	df 91       	pop	r29
    11bc:	cf 91       	pop	r28
    11be:	1f 91       	pop	r17
    11c0:	0f 91       	pop	r16
    11c2:	ff 90       	pop	r15
    11c4:	ef 90       	pop	r14
    11c6:	df 90       	pop	r13
    11c8:	cf 90       	pop	r12
    11ca:	bf 90       	pop	r11
    11cc:	af 90       	pop	r10
    11ce:	9f 90       	pop	r9
    11d0:	8f 90       	pop	r8
    11d2:	7f 90       	pop	r7
    11d4:	6f 90       	pop	r6
    11d6:	08 95       	ret

000011d8 <initSystemMessage>:


void initSystemMessage()
{
    11d8:	08 95       	ret

000011da <retrySend>:

#include "queues.bbh"

void retrySend(void)
{
    SendChunkQueue* currSq = ((SQTimeout *)thisTimeout)->sq;
    11da:	e0 91 64 26 	lds	r30, 0x2664
    11de:	f0 91 65 26 	lds	r31, 0x2665
    11e2:	02 84       	ldd	r0, Z+10	; 0x0a
    11e4:	f3 85       	ldd	r31, Z+11	; 0x0b
    11e6:	e0 2d       	mov	r30, r0
    
    //Try to resend
    currSq->flags |= CLEAR_TO_SEND;
    11e8:	85 85       	ldd	r24, Z+13	; 0x0d
    11ea:	80 64       	ori	r24, 0x40	; 64
    11ec:	85 87       	std	Z+13, r24	; 0x0d
    11ee:	08 95       	ret

000011f0 <initPortQueues>:
#include "../hw-api/hwSerial.h"

threadvar Port port[NUM_PORTS];

void initPortQueues(Port* p)
{
    11f0:	fc 01       	movw	r30, r24
    // reset send queue status
    p->sq.retry         = 0;
    11f2:	15 86       	std	Z+13, r1	; 0x0d
    p->sq.flags         = CLEAR_TO_SEND;
    11f4:	80 e4       	ldi	r24, 0x40	; 64
    11f6:	86 87       	std	Z+14, r24	; 0x0e
	
	// send queue timers
	p->sq.qtout.sq = &(p->sq);
    11f8:	cf 01       	movw	r24, r30
    11fa:	01 96       	adiw	r24, 0x01	; 1
    11fc:	83 87       	std	Z+11, r24	; 0x0b
    11fe:	94 87       	std	Z+12, r25	; 0x0c
	p->sq.qtout.tout.callback = (GenericHandler)&retrySend;
    1200:	8d ee       	ldi	r24, 0xED	; 237
    1202:	98 e0       	ldi	r25, 0x08	; 8
    1204:	87 83       	std	Z+7, r24	; 0x07
    1206:	90 87       	std	Z+8, r25	; 0x08


	
	// empty the send queue
	//freeChunk(p->sq.head);
    p->sq.head = NULL;
    1208:	17 86       	std	Z+15, r1	; 0x0f
    120a:	10 8a       	std	Z+16, r1	; 0x10
    //freeChunk(p->sq.tail);
    p->sq.tail = NULL;
    120c:	11 8a       	std	Z+17, r1	; 0x11
    120e:	12 8a       	std	Z+18, r1	; 0x12
	
	// reset receive queue status
    p->rq.index         = 0;
    1210:	13 8a       	std	Z+19, r1	; 0x13
	p->rq.checksum      = 0;
    1212:	14 8a       	std	Z+20, r1	; 0x14
    p->rq.flags         = NO_CHUNK_READY;
    1214:	15 8a       	std	Z+21, r1	; 0x15

	// empty receive queues
    //freeReceiveChunk(p->rq.curr);
	p->rq.curr = NULL;
    1216:	16 8a       	std	Z+22, r1	; 0x16
    1218:	17 8a       	std	Z+23, r1	; 0x17
    121a:	08 95       	ret

0000121c <initPorts>:
}

void initPorts()
{
    121c:	ff 92       	push	r15
    121e:	0f 93       	push	r16
    1220:	1f 93       	push	r17
    1222:	cf 93       	push	r28
    1224:	df 93       	push	r29
    1226:	04 e5       	ldi	r16, 0x54	; 84
    1228:	14 e2       	ldi	r17, 0x24	; 36
    122a:	c0 e0       	ldi	r28, 0x00	; 0
    122c:	d0 e0       	ldi	r29, 0x00	; 0
	PRef i;
	for(i = 0; i < NUM_PORTS; i++)
	{
		port[i].pnum  = i;
		initPortQueues(&port[i]);
    122e:	88 e5       	ldi	r24, 0x58	; 88
    1230:	f8 2e       	mov	r15, r24
void initPorts()
{
	PRef i;
	for(i = 0; i < NUM_PORTS; i++)
	{
		port[i].pnum  = i;
    1232:	f8 01       	movw	r30, r16
    1234:	c0 83       	st	Z, r28
		initPortQueues(&port[i]);
    1236:	fc 9e       	mul	r15, r28
    1238:	c0 01       	movw	r24, r0
    123a:	fd 9e       	mul	r15, r29
    123c:	90 0d       	add	r25, r0
    123e:	11 24       	eor	r1, r1
    1240:	8c 5a       	subi	r24, 0xAC	; 172
    1242:	9b 4d       	sbci	r25, 0xDB	; 219
    1244:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <initPortQueues>
    1248:	21 96       	adiw	r28, 0x01	; 1
    124a:	08 5a       	subi	r16, 0xA8	; 168
    124c:	1f 4f       	sbci	r17, 0xFF	; 255
}

void initPorts()
{
	PRef i;
	for(i = 0; i < NUM_PORTS; i++)
    124e:	c6 30       	cpi	r28, 0x06	; 6
    1250:	d1 05       	cpc	r29, r1
    1252:	79 f7       	brne	.-34     	; 0x1232 <initPorts+0x16>
	{
		port[i].pnum  = i;
		initPortQueues(&port[i]);
	}
	initHWPorts();
}
    1254:	df 91       	pop	r29
    1256:	cf 91       	pop	r28
    1258:	1f 91       	pop	r17
    125a:	0f 91       	pop	r16
    125c:	ff 90       	pop	r15
	for(i = 0; i < NUM_PORTS; i++)
	{
		port[i].pnum  = i;
		initPortQueues(&port[i]);
	}
	initHWPorts();
    125e:	0c 94 47 1a 	jmp	0x348e	; 0x348e <initHWPorts>

00001262 <blockProgram>:
#include "led.bbh"

int blockProgram(void)
{

    initBlock();
    1262:	0e 94 4e 02 	call	0x49c	; 0x49c <initBlock>

    
    // low-level robot initialization routine
    
    // handler registration / load control structure
    userRegistration();
    1266:	0e 94 0c 02 	call	0x418	; 0x418 <userRegistration>
    
    // Call user-based system_init function, if registered
    // A good idea to separate from UserRegistration?
    callHandler(SYSTEM_INIT);    
    126a:	80 e0       	ldi	r24, 0x00	; 0
    126c:	0e 94 c6 07 	call	0xf8c	; 0xf8c <callHandler>

        // step through triggered handler functions
	//printf("%d\r\n",count++);
	    
        // Run user system_main function, if registered
	callHandler(SYSTEM_MAIN);
    1270:	81 e0       	ldi	r24, 0x01	; 1
    1272:	fc cf       	rjmp	.-8      	; 0x126c <blockProgram+0xa>

00001274 <delayMS>:
#ifdef BBSIM
extern void yieldTil(Time x);
#endif

void delayMS(int ms) 
{
    1274:	cf 92       	push	r12
    1276:	df 92       	push	r13
    1278:	ef 92       	push	r14
    127a:	ff 92       	push	r15
    127c:	cf 93       	push	r28
    127e:	df 93       	push	r29
    1280:	ec 01       	movw	r28, r24
  }
}

Time getTime()
{
	return getHWTime();
    1282:	0e 94 c9 1c 	call	0x3992	; 0x3992 <getHWTime>
    1286:	6b 01       	movw	r12, r22
    1288:	7c 01       	movw	r14, r24
extern void yieldTil(Time x);
#endif

void delayMS(int ms) 
{
  Time until = getTime() + ms;
    128a:	ce 01       	movw	r24, r28
    128c:	aa 27       	eor	r26, r26
    128e:	97 fd       	sbrc	r25, 7
    1290:	a0 95       	com	r26
    1292:	ba 2f       	mov	r27, r26
    1294:	c8 0e       	add	r12, r24
    1296:	d9 1e       	adc	r13, r25
    1298:	ea 1e       	adc	r14, r26
    129a:	fb 1e       	adc	r15, r27
  }
}

Time getTime()
{
	return getHWTime();
    129c:	0e 94 c9 1c 	call	0x3992	; 0x3992 <getHWTime>

void delayMS(int ms) 
{
  Time until = getTime() + ms;
	
  while(getTime() < until) {
    12a0:	6c 15       	cp	r22, r12
    12a2:	7d 05       	cpc	r23, r13
    12a4:	8e 05       	cpc	r24, r14
    12a6:	9f 05       	cpc	r25, r15
    12a8:	c8 f3       	brcs	.-14     	; 0x129c <delayMS+0x28>
#ifdef BBSIM
    yieldTil(until);
#endif
  }
}
    12aa:	df 91       	pop	r29
    12ac:	cf 91       	pop	r28
    12ae:	ff 90       	pop	r15
    12b0:	ef 90       	pop	r14
    12b2:	df 90       	pop	r13
    12b4:	cf 90       	pop	r12
    12b6:	08 95       	ret

000012b8 <getTime>:

Time getTime()
{
	return getHWTime();
    12b8:	0c 94 c9 1c 	jmp	0x3992	; 0x3992 <getHWTime>

000012bc <checkTimeout>:
}

void checkTimeout()
{
    12bc:	0f 93       	push	r16
    12be:	1f 93       	push	r17
    12c0:	cf 93       	push	r28
    12c2:	df 93       	push	r29
    12c4:	00 d0       	rcall	.+0      	; 0x12c6 <checkTimeout+0xa>
    12c6:	1f 92       	push	r1
    12c8:	cd b7       	in	r28, 0x3d	; 61
    12ca:	de b7       	in	r29, 0x3e	; 62
	if(timeoutList != NULL)
    12cc:	80 91 68 26 	lds	r24, 0x2668
    12d0:	90 91 69 26 	lds	r25, 0x2669
    12d4:	89 2b       	or	r24, r25
    12d6:	99 f1       	breq	.+102    	; 0x133e <checkTimeout+0x82>
  }
}

Time getTime()
{
	return getHWTime();
    12d8:	0e 94 c9 1c 	call	0x3992	; 0x3992 <getHWTime>
		Time now = getTime();
		
		do
		{
			// check list, remove timer and call function
			if(now >= timeoutList->calltime)
    12dc:	e0 91 68 26 	lds	r30, 0x2668
    12e0:	f0 91 69 26 	lds	r31, 0x2669
    12e4:	02 81       	ldd	r16, Z+2	; 0x02
    12e6:	13 81       	ldd	r17, Z+3	; 0x03
    12e8:	24 81       	ldd	r18, Z+4	; 0x04
    12ea:	35 81       	ldd	r19, Z+5	; 0x05
    12ec:	60 17       	cp	r22, r16
    12ee:	71 07       	cpc	r23, r17
    12f0:	82 07       	cpc	r24, r18
    12f2:	93 07       	cpc	r25, r19
    12f4:	20 f1       	brcs	.+72     	; 0x133e <checkTimeout+0x82>
			{
				// set reference variable, remove timeout from list
				thisTimeout = timeoutList;
    12f6:	e0 93 64 26 	sts	0x2664, r30
    12fa:	f0 93 65 26 	sts	0x2665, r31
				timeoutList = timeoutList->next;
    12fe:	20 81       	ld	r18, Z
    1300:	31 81       	ldd	r19, Z+1	; 0x01
    1302:	20 93 68 26 	sts	0x2668, r18
    1306:	30 93 69 26 	sts	0x2669, r19

				// if timeout was not pre-emptively disable, execute callback();
				if(thisTimeout->state != INACTIVE)
    130a:	20 85       	ldd	r18, Z+8	; 0x08
    130c:	22 23       	and	r18, r18
    130e:	61 f0       	breq	.+24     	; 0x1328 <checkTimeout+0x6c>
				  {
				    (thisTimeout->callback)();	
    1310:	06 80       	ldd	r0, Z+6	; 0x06
    1312:	f7 81       	ldd	r31, Z+7	; 0x07
    1314:	e0 2d       	mov	r30, r0
    1316:	69 83       	std	Y+1, r22	; 0x01
    1318:	7a 83       	std	Y+2, r23	; 0x02
    131a:	8b 83       	std	Y+3, r24	; 0x03
    131c:	9c 83       	std	Y+4, r25	; 0x04
    131e:	19 95       	eicall
    1320:	9c 81       	ldd	r25, Y+4	; 0x04
    1322:	8b 81       	ldd	r24, Y+3	; 0x03
    1324:	7a 81       	ldd	r23, Y+2	; 0x02
    1326:	69 81       	ldd	r22, Y+1	; 0x01
				  }

				// disable callback until reactivated/reinserted into list.
				thisTimeout->state = INACTIVE;
    1328:	e0 91 64 26 	lds	r30, 0x2664
    132c:	f0 91 65 26 	lds	r31, 0x2665
    1330:	10 86       	std	Z+8, r1	; 0x08
			{
				// stop searching list
				break;
			}
			
		} while (timeoutList != NULL);
    1332:	20 91 68 26 	lds	r18, 0x2668
    1336:	30 91 69 26 	lds	r19, 0x2669
    133a:	23 2b       	or	r18, r19
    133c:	79 f6       	brne	.-98     	; 0x12dc <checkTimeout+0x20>
	}
}
    133e:	24 96       	adiw	r28, 0x04	; 4
    1340:	cd bf       	out	0x3d, r28	; 61
    1342:	de bf       	out	0x3e, r29	; 62
    1344:	df 91       	pop	r29
    1346:	cf 91       	pop	r28
    1348:	1f 91       	pop	r17
    134a:	0f 91       	pop	r16
    134c:	08 95       	ret

0000134e <registerTimeout>:

int registerTimeout(Timeout * t)
{
    134e:	0f 93       	push	r16
    1350:	1f 93       	push	r17
    1352:	cf 93       	push	r28
    1354:	df 93       	push	r29
    1356:	fc 01       	movw	r30, r24
	t->next = NULL;
    1358:	10 82       	st	Z, r1
    135a:	11 82       	std	Z+1, r1	; 0x01

	if(timeoutList == NULL)
    135c:	a0 91 68 26 	lds	r26, 0x2668
    1360:	b0 91 69 26 	lds	r27, 0x2669
    1364:	10 97       	sbiw	r26, 0x00	; 0
    1366:	29 f4       	brne	.+10     	; 0x1372 <registerTimeout+0x24>
	{
		timeoutList = t;
    1368:	80 93 68 26 	sts	0x2668, r24
    136c:	90 93 69 26 	sts	0x2669, r25
    1370:	2d c0       	rjmp	.+90     	; 0x13cc <registerTimeout+0x7e>
		Timeout * prev = NULL;
		Timeout * cur;
		
		cur = timeoutList;
		
		while((cur->calltime < t->calltime) && (cur->next != NULL))
    1372:	42 81       	ldd	r20, Z+2	; 0x02
    1374:	53 81       	ldd	r21, Z+3	; 0x03
    1376:	64 81       	ldd	r22, Z+4	; 0x04
    1378:	75 81       	ldd	r23, Z+5	; 0x05
    137a:	c0 e0       	ldi	r28, 0x00	; 0
    137c:	d0 e0       	ldi	r29, 0x00	; 0
    137e:	03 c0       	rjmp	.+6      	; 0x1386 <registerTimeout+0x38>
		{
			prev = cur;
			cur = cur->next;
    1380:	dc 01       	movw	r26, r24
		Timeout * prev = NULL;
		Timeout * cur;
		
		cur = timeoutList;
		
		while((cur->calltime < t->calltime) && (cur->next != NULL))
    1382:	c3 2f       	mov	r28, r19
    1384:	d2 2f       	mov	r29, r18
    1386:	12 96       	adiw	r26, 0x02	; 2
    1388:	0d 91       	ld	r16, X+
    138a:	1d 91       	ld	r17, X+
    138c:	2d 91       	ld	r18, X+
    138e:	3c 91       	ld	r19, X
    1390:	15 97       	sbiw	r26, 0x05	; 5
    1392:	04 17       	cp	r16, r20
    1394:	15 07       	cpc	r17, r21
    1396:	26 07       	cpc	r18, r22
    1398:	37 07       	cpc	r19, r23
    139a:	18 f0       	brcs	.+6      	; 0x13a2 <registerTimeout+0x54>
			cur = cur->next;
		}		
		
		if(cur->calltime >= t->calltime)
		{
			if(prev == NULL)
    139c:	20 97       	sbiw	r28, 0x00	; 0
    139e:	91 f4       	brne	.+36     	; 0x13c4 <registerTimeout+0x76>
    13a0:	0c c0       	rjmp	.+24     	; 0x13ba <registerTimeout+0x6c>
		Timeout * prev = NULL;
		Timeout * cur;
		
		cur = timeoutList;
		
		while((cur->calltime < t->calltime) && (cur->next != NULL))
    13a2:	8d 91       	ld	r24, X+
    13a4:	9c 91       	ld	r25, X
    13a6:	11 97       	sbiw	r26, 0x01	; 1
    13a8:	3a 2f       	mov	r19, r26
    13aa:	2b 2f       	mov	r18, r27
    13ac:	00 97       	sbiw	r24, 0x00	; 0
    13ae:	41 f7       	brne	.-48     	; 0x1380 <registerTimeout+0x32>
			
			t->next = cur;
		}
		else
		{
			cur->next = t;
    13b0:	ed 93       	st	X+, r30
    13b2:	fc 93       	st	X, r31
			t->next = NULL;
    13b4:	10 82       	st	Z, r1
    13b6:	11 82       	std	Z+1, r1	; 0x01
    13b8:	09 c0       	rjmp	.+18     	; 0x13cc <registerTimeout+0x7e>
		
		if(cur->calltime >= t->calltime)
		{
			if(prev == NULL)
			{
				timeoutList = t;
    13ba:	e0 93 68 26 	sts	0x2668, r30
    13be:	f0 93 69 26 	sts	0x2669, r31
    13c2:	02 c0       	rjmp	.+4      	; 0x13c8 <registerTimeout+0x7a>
			}
			else
			{
				prev->next = t;
    13c4:	e8 83       	st	Y, r30
    13c6:	f9 83       	std	Y+1, r31	; 0x01
			}
			
			t->next = cur;
    13c8:	a0 83       	st	Z, r26
    13ca:	b1 83       	std	Z+1, r27	; 0x01
			cur->next = t;
			t->next = NULL;
		}
	}
	
	t->state = ACTIVE;
    13cc:	81 e0       	ldi	r24, 0x01	; 1
    13ce:	80 87       	std	Z+8, r24	; 0x08
	
	return 1;	
}
    13d0:	81 e0       	ldi	r24, 0x01	; 1
    13d2:	90 e0       	ldi	r25, 0x00	; 0
    13d4:	df 91       	pop	r29
    13d6:	cf 91       	pop	r28
    13d8:	1f 91       	pop	r17
    13da:	0f 91       	pop	r16
    13dc:	08 95       	ret

000013de <deregisterTimeout>:

int deregisterTimeout(Timeout * t)
{
	if(timeoutList == NULL)
    13de:	e0 91 68 26 	lds	r30, 0x2668
    13e2:	f0 91 69 26 	lds	r31, 0x2669
    13e6:	30 97       	sbiw	r30, 0x00	; 0
    13e8:	d1 f0       	breq	.+52     	; 0x141e <deregisterTimeout+0x40>
    13ea:	a0 e0       	ldi	r26, 0x00	; 0
    13ec:	b0 e0       	ldi	r27, 0x00	; 0
    13ee:	07 c0       	rjmp	.+14     	; 0x13fe <deregisterTimeout+0x20>
		

		while((cur != NULL) && (t != cur)) //(cur->callback != t->callback) && (cur->calltime != t->calltime))
		{
			prev = cur;
			cur = cur->next;
    13f0:	20 81       	ld	r18, Z
    13f2:	31 81       	ldd	r19, Z+1	; 0x01
    13f4:	df 01       	movw	r26, r30
		Timeout * cur;

		cur = timeoutList;
		

		while((cur != NULL) && (t != cur)) //(cur->callback != t->callback) && (cur->calltime != t->calltime))
    13f6:	21 15       	cp	r18, r1
    13f8:	31 05       	cpc	r19, r1
    13fa:	89 f0       	breq	.+34     	; 0x141e <deregisterTimeout+0x40>
		{
			prev = cur;
			cur = cur->next;
    13fc:	f9 01       	movw	r30, r18
		Timeout * cur;

		cur = timeoutList;
		

		while((cur != NULL) && (t != cur)) //(cur->callback != t->callback) && (cur->calltime != t->calltime))
    13fe:	8e 17       	cp	r24, r30
    1400:	9f 07       	cpc	r25, r31
    1402:	b1 f7       	brne	.-20     	; 0x13f0 <deregisterTimeout+0x12>
    1404:	0f c0       	rjmp	.+30     	; 0x1424 <deregisterTimeout+0x46>
		}
		else
		{
			if(prev == NULL)
			{
				timeoutList = cur->next;
    1406:	20 93 68 26 	sts	0x2668, r18
    140a:	30 93 69 26 	sts	0x2669, r19
    140e:	02 c0       	rjmp	.+4      	; 0x1414 <deregisterTimeout+0x36>
			}
			else
			{
				prev->next = cur->next;
    1410:	2d 93       	st	X+, r18
    1412:	3c 93       	st	X, r19
			}
			
			t->state = INACTIVE;
    1414:	fc 01       	movw	r30, r24
    1416:	10 86       	std	Z+8, r1	; 0x08
			
			return 1;
    1418:	21 e0       	ldi	r18, 0x01	; 1
    141a:	30 e0       	ldi	r19, 0x00	; 0
    141c:	09 c0       	rjmp	.+18     	; 0x1430 <deregisterTimeout+0x52>

int deregisterTimeout(Timeout * t)
{
	if(timeoutList == NULL)
	{		
		return 0;
    141e:	20 e0       	ldi	r18, 0x00	; 0
    1420:	30 e0       	ldi	r19, 0x00	; 0
    1422:	06 c0       	rjmp	.+12     	; 0x1430 <deregisterTimeout+0x52>
    1424:	fc 01       	movw	r30, r24
    1426:	20 81       	ld	r18, Z
    1428:	31 81       	ldd	r19, Z+1	; 0x01
		{
			return 0;
		}
		else
		{
			if(prev == NULL)
    142a:	10 97       	sbiw	r26, 0x00	; 0
    142c:	89 f7       	brne	.-30     	; 0x1410 <deregisterTimeout+0x32>
    142e:	eb cf       	rjmp	.-42     	; 0x1406 <deregisterTimeout+0x28>
			t->state = INACTIVE;
			
			return 1;
		}
	}
}
    1430:	c9 01       	movw	r24, r18
    1432:	08 95       	ret

00001434 <deregisterTimeoutByHandler>:

int deregisterTimeoutByHandler(GenericHandler h)
{
	if(timeoutList == NULL)
    1434:	e0 91 68 26 	lds	r30, 0x2668
    1438:	f0 91 69 26 	lds	r31, 0x2669
    143c:	30 97       	sbiw	r30, 0x00	; 0
    143e:	d9 f0       	breq	.+54     	; 0x1476 <deregisterTimeoutByHandler+0x42>
    1440:	a0 e0       	ldi	r26, 0x00	; 0
    1442:	b0 e0       	ldi	r27, 0x00	; 0
    1444:	07 c0       	rjmp	.+14     	; 0x1454 <deregisterTimeoutByHandler+0x20>
		cur = timeoutList;
		
		while((cur != NULL) && (cur->callback != h))
		{
			prev = cur;
			cur = cur->next;
    1446:	20 81       	ld	r18, Z
    1448:	31 81       	ldd	r19, Z+1	; 0x01
    144a:	df 01       	movw	r26, r30
		Timeout * prev = NULL;
		Timeout * cur;

		cur = timeoutList;
		
		while((cur != NULL) && (cur->callback != h))
    144c:	21 15       	cp	r18, r1
    144e:	31 05       	cpc	r19, r1
    1450:	91 f0       	breq	.+36     	; 0x1476 <deregisterTimeoutByHandler+0x42>
		{
			prev = cur;
			cur = cur->next;
    1452:	f9 01       	movw	r30, r18
		Timeout * prev = NULL;
		Timeout * cur;

		cur = timeoutList;
		
		while((cur != NULL) && (cur->callback != h))
    1454:	26 81       	ldd	r18, Z+6	; 0x06
    1456:	37 81       	ldd	r19, Z+7	; 0x07
    1458:	28 17       	cp	r18, r24
    145a:	39 07       	cpc	r19, r25
    145c:	a1 f7       	brne	.-24     	; 0x1446 <deregisterTimeoutByHandler+0x12>
    145e:	0e c0       	rjmp	.+28     	; 0x147c <deregisterTimeoutByHandler+0x48>
		}
		else
		{
			if(prev == NULL)
			{
				timeoutList = cur->next;
    1460:	80 93 68 26 	sts	0x2668, r24
    1464:	90 93 69 26 	sts	0x2669, r25
    1468:	02 c0       	rjmp	.+4      	; 0x146e <deregisterTimeoutByHandler+0x3a>
			}
			else
			{
				prev->next = cur->next;
    146a:	8d 93       	st	X+, r24
    146c:	9c 93       	st	X, r25
			}
			
			cur->state = INACTIVE;
    146e:	10 86       	std	Z+8, r1	; 0x08
			
			return 1;
    1470:	21 e0       	ldi	r18, 0x01	; 1
    1472:	30 e0       	ldi	r19, 0x00	; 0
    1474:	08 c0       	rjmp	.+16     	; 0x1486 <deregisterTimeoutByHandler+0x52>

int deregisterTimeoutByHandler(GenericHandler h)
{
	if(timeoutList == NULL)
	{		
		return 0;
    1476:	20 e0       	ldi	r18, 0x00	; 0
    1478:	30 e0       	ldi	r19, 0x00	; 0
    147a:	05 c0       	rjmp	.+10     	; 0x1486 <deregisterTimeoutByHandler+0x52>
    147c:	80 81       	ld	r24, Z
    147e:	91 81       	ldd	r25, Z+1	; 0x01
		{
			return 0;
		}
		else
		{
			if(prev == NULL)
    1480:	10 97       	sbiw	r26, 0x00	; 0
    1482:	99 f7       	brne	.-26     	; 0x146a <deregisterTimeoutByHandler+0x36>
    1484:	ed cf       	rjmp	.-38     	; 0x1460 <deregisterTimeoutByHandler+0x2c>
			
			return 1;
		}
	}

}
    1486:	c9 01       	movw	r24, r18
    1488:	08 95       	ret

0000148a <checkTimer>:

void checkTimer()
{
    148a:	0f 93       	push	r16
    148c:	1f 93       	push	r17
    148e:	cf 93       	push	r28
    1490:	df 93       	push	r29
	Timer * tt = timerList;
    1492:	c0 91 66 26 	lds	r28, 0x2666
    1496:	d0 91 67 26 	lds	r29, 0x2667
	
	while(tt != NULL)
    149a:	1b c0       	rjmp	.+54     	; 0x14d2 <checkTimer+0x48>
	{
		if(tt->state == ACTIVE)
    149c:	88 89       	ldd	r24, Y+16	; 0x10
    149e:	81 30       	cpi	r24, 0x01	; 1
    14a0:	a9 f4       	brne	.+42     	; 0x14cc <checkTimer+0x42>
		{
			if((tt->t).state == INACTIVE)
    14a2:	8a 85       	ldd	r24, Y+10	; 0x0a
    14a4:	81 11       	cpse	r24, r1
    14a6:	12 c0       	rjmp	.+36     	; 0x14cc <checkTimer+0x42>
  }
}

Time getTime()
{
	return getHWTime();
    14a8:	0e 94 c9 1c 	call	0x3992	; 0x3992 <getHWTime>
	{
		if(tt->state == ACTIVE)
		{
			if((tt->t).state == INACTIVE)
			{
				(tt->t).calltime = getTime() + tt->period;
    14ac:	0c 85       	ldd	r16, Y+12	; 0x0c
    14ae:	1d 85       	ldd	r17, Y+13	; 0x0d
    14b0:	2e 85       	ldd	r18, Y+14	; 0x0e
    14b2:	3f 85       	ldd	r19, Y+15	; 0x0f
    14b4:	60 0f       	add	r22, r16
    14b6:	71 1f       	adc	r23, r17
    14b8:	82 1f       	adc	r24, r18
    14ba:	93 1f       	adc	r25, r19
    14bc:	6c 83       	std	Y+4, r22	; 0x04
    14be:	7d 83       	std	Y+5, r23	; 0x05
    14c0:	8e 83       	std	Y+6, r24	; 0x06
    14c2:	9f 83       	std	Y+7, r25	; 0x07
				registerTimeout(&(tt->t));
    14c4:	ce 01       	movw	r24, r28
    14c6:	02 96       	adiw	r24, 0x02	; 2
    14c8:	0e 94 a7 09 	call	0x134e	; 0x134e <registerTimeout>
				
			}
		}
	
		tt = tt->next;
    14cc:	09 90       	ld	r0, Y+
    14ce:	d8 81       	ld	r29, Y
    14d0:	c0 2d       	mov	r28, r0

void checkTimer()
{
	Timer * tt = timerList;
	
	while(tt != NULL)
    14d2:	20 97       	sbiw	r28, 0x00	; 0
    14d4:	19 f7       	brne	.-58     	; 0x149c <checkTimer+0x12>
			}
		}
	
		tt = tt->next;
	}
}
    14d6:	df 91       	pop	r29
    14d8:	cf 91       	pop	r28
    14da:	1f 91       	pop	r17
    14dc:	0f 91       	pop	r16
    14de:	08 95       	ret

000014e0 <registerTimer>:

int registerTimer(Timer * tt)
{
  tt->next = NULL;
    14e0:	fc 01       	movw	r30, r24
    14e2:	10 82       	st	Z, r1
    14e4:	11 82       	std	Z+1, r1	; 0x01

	if(timerList == NULL)
    14e6:	e0 91 66 26 	lds	r30, 0x2666
    14ea:	f0 91 67 26 	lds	r31, 0x2667
    14ee:	30 97       	sbiw	r30, 0x00	; 0
    14f0:	59 f4       	brne	.+22     	; 0x1508 <registerTimer+0x28>
	{
		timerList = tt;
    14f2:	80 93 66 26 	sts	0x2666, r24
    14f6:	90 93 67 26 	sts	0x2667, r25
    14fa:	10 c0       	rjmp	.+32     	; 0x151c <registerTimer+0x3c>
		Timer * cur = timerList;
		
		
		while(cur->next != NULL)
		{
		  assert(tt != cur);
    14fc:	8e 17       	cp	r24, r30
    14fe:	9f 07       	cpc	r25, r31
    1500:	11 f4       	brne	.+4      	; 0x1506 <registerTimer+0x26>
    1502:	0e 94 ff 27 	call	0x4ffe	; 0x4ffe <abort>
			cur = cur->next;
    1506:	f9 01       	movw	r30, r18
	else
	{
		Timer * cur = timerList;
		
		
		while(cur->next != NULL)
    1508:	20 81       	ld	r18, Z
    150a:	31 81       	ldd	r19, Z+1	; 0x01
    150c:	21 15       	cp	r18, r1
    150e:	31 05       	cpc	r19, r1
    1510:	a9 f7       	brne	.-22     	; 0x14fc <registerTimer+0x1c>
		{
		  assert(tt != cur);
			cur = cur->next;
		}
		assert(tt != cur);
    1512:	8e 17       	cp	r24, r30
    1514:	9f 07       	cpc	r25, r31
    1516:	a9 f3       	breq	.-22     	; 0x1502 <registerTimer+0x22>
		
		cur->next = tt;
    1518:	80 83       	st	Z, r24
    151a:	91 83       	std	Z+1, r25	; 0x01
	}
	
	tt->state = ACTIVE;	
    151c:	21 e0       	ldi	r18, 0x01	; 1
    151e:	fc 01       	movw	r30, r24
    1520:	20 8b       	std	Z+16, r18	; 0x10
	
	return 1;
}
    1522:	81 e0       	ldi	r24, 0x01	; 1
    1524:	90 e0       	ldi	r25, 0x00	; 0
    1526:	08 95       	ret

00001528 <deregisterTimer>:

int deregisterTimer(Timer * tt)
{
	if(timerList == NULL)
    1528:	e0 91 66 26 	lds	r30, 0x2666
    152c:	f0 91 67 26 	lds	r31, 0x2667
    1530:	30 97       	sbiw	r30, 0x00	; 0
    1532:	d9 f0       	breq	.+54     	; 0x156a <deregisterTimer+0x42>
    1534:	a0 e0       	ldi	r26, 0x00	; 0
    1536:	b0 e0       	ldi	r27, 0x00	; 0
    1538:	07 c0       	rjmp	.+14     	; 0x1548 <deregisterTimer+0x20>
		Timer * cur = timerList;
	
		while(cur != NULL && cur != tt)
		{
			prev = cur;
			cur = cur->next;
    153a:	20 81       	ld	r18, Z
    153c:	31 81       	ldd	r19, Z+1	; 0x01
    153e:	df 01       	movw	r26, r30
	else
	{
		Timer * prev = NULL;
		Timer * cur = timerList;
	
		while(cur != NULL && cur != tt)
    1540:	21 15       	cp	r18, r1
    1542:	31 05       	cpc	r19, r1
    1544:	91 f0       	breq	.+36     	; 0x156a <deregisterTimer+0x42>
		{
			prev = cur;
			cur = cur->next;
    1546:	f9 01       	movw	r30, r18
	else
	{
		Timer * prev = NULL;
		Timer * cur = timerList;
	
		while(cur != NULL && cur != tt)
    1548:	e8 17       	cp	r30, r24
    154a:	f9 07       	cpc	r31, r25
    154c:	b1 f7       	brne	.-20     	; 0x153a <deregisterTimer+0x12>
    154e:	10 c0       	rjmp	.+32     	; 0x1570 <deregisterTimer+0x48>
		}
		else
		{
			if(prev == NULL)
			{
				timerList = cur->next;
    1550:	80 93 66 26 	sts	0x2666, r24
    1554:	90 93 67 26 	sts	0x2667, r25
    1558:	02 c0       	rjmp	.+4      	; 0x155e <deregisterTimer+0x36>
			}
			else
			{
				prev->next = cur->next;
    155a:	8d 93       	st	X+, r24
    155c:	9c 93       	st	X, r25
			}
			cur->next = NULL;
    155e:	10 82       	st	Z, r1
    1560:	11 82       	std	Z+1, r1	; 0x01
			cur->state = INACTIVE;
    1562:	10 8a       	std	Z+16, r1	; 0x10
			
			return 1;
    1564:	21 e0       	ldi	r18, 0x01	; 1
    1566:	30 e0       	ldi	r19, 0x00	; 0
    1568:	08 c0       	rjmp	.+16     	; 0x157a <deregisterTimer+0x52>

int deregisterTimer(Timer * tt)
{
	if(timerList == NULL)
	{
		return 0;
    156a:	20 e0       	ldi	r18, 0x00	; 0
    156c:	30 e0       	ldi	r19, 0x00	; 0
    156e:	05 c0       	rjmp	.+10     	; 0x157a <deregisterTimer+0x52>
    1570:	80 81       	ld	r24, Z
    1572:	91 81       	ldd	r25, Z+1	; 0x01
		{
			return 0;
		}
		else
		{
			if(prev == NULL)
    1574:	10 97       	sbiw	r26, 0x00	; 0
    1576:	89 f7       	brne	.-30     	; 0x155a <deregisterTimer+0x32>
    1578:	eb cf       	rjmp	.-42     	; 0x1550 <deregisterTimer+0x28>
			cur->state = INACTIVE;
			
			return 1;
		}
	}
}
    157a:	c9 01       	movw	r24, r18
    157c:	08 95       	ret

0000157e <clearTimer>:

// attempts to deregister the timer and its timeout from both queues.
// returns the sum of the component deregistrations.
int clearTimer(Timer * tt)
{
    157e:	0f 93       	push	r16
    1580:	1f 93       	push	r17
    1582:	cf 93       	push	r28
    1584:	df 93       	push	r29
    1586:	8c 01       	movw	r16, r24

  int ret = deregisterTimer(tt);
    1588:	0e 94 94 0a 	call	0x1528	; 0x1528 <deregisterTimer>
    158c:	ec 01       	movw	r28, r24


  if(tt != NULL)
    158e:	01 15       	cp	r16, r1
    1590:	11 05       	cpc	r17, r1
    1592:	31 f0       	breq	.+12     	; 0x15a0 <clearTimer+0x22>
    {
      ret += deregisterTimeout(&(tt->t));
    1594:	c8 01       	movw	r24, r16
    1596:	02 96       	adiw	r24, 0x02	; 2
    1598:	0e 94 ef 09 	call	0x13de	; 0x13de <deregisterTimeout>
    159c:	c8 0f       	add	r28, r24
    159e:	d9 1f       	adc	r29, r25
    }

  return ret;
}
    15a0:	ce 01       	movw	r24, r28
    15a2:	df 91       	pop	r29
    15a4:	cf 91       	pop	r28
    15a6:	1f 91       	pop	r17
    15a8:	0f 91       	pop	r16
    15aa:	08 95       	ret

000015ac <initTime>:

void initTime()
{
	timeoutList = NULL;
    15ac:	10 92 68 26 	sts	0x2668, r1
    15b0:	10 92 69 26 	sts	0x2669, r1
	thisTimeout = NULL;
    15b4:	10 92 64 26 	sts	0x2664, r1
    15b8:	10 92 65 26 	sts	0x2665, r1
	timerList = NULL;
    15bc:	10 92 66 26 	sts	0x2666, r1
    15c0:	10 92 67 26 	sts	0x2667, r1
	
	initHWTime();
    15c4:	0c 94 0b 1d 	jmp	0x3a16	; 0x3a16 <initHWTime>

000015c8 <getMicData>:
threadvar MicData _mic;

MicData getMicData()
{
    return _mic;
}
    15c8:	80 91 6a 26 	lds	r24, 0x266A
    15cc:	90 91 6b 26 	lds	r25, 0x266B
    15d0:	08 95       	ret

000015d2 <freeLogChunk>:
		// try again
		sendLogChunk(faceNum(thisChunk), thisChunk->data, DATA_SIZE);
		free(thisChunk);
	}
#else
	free(thisChunk);
    15d2:	80 91 4f 21 	lds	r24, 0x214F
    15d6:	90 91 50 21 	lds	r25, 0x2150
    15da:	0c 94 02 27 	jmp	0x4e04	; 0x4e04 <free>

000015de <freeMyChunk>:
void freeLogChunk(void);
byte sendMyChunk(PRef port, byte *data, byte size, MsgHandler mh);

void freeMyChunk(void)
{
    free(thisChunk);
    15de:	80 91 4f 21 	lds	r24, 0x214F
    15e2:	90 91 50 21 	lds	r25, 0x2150
    15e6:	0c 94 02 27 	jmp	0x4e04	; 0x4e04 <free>

000015ea <sendMyChunk>:
	free(thisChunk);
#endif
}

byte sendMyChunk(PRef port, byte *data, byte size, MsgHandler mh) 
{
    15ea:	8f 92       	push	r8
    15ec:	9f 92       	push	r9
    15ee:	bf 92       	push	r11
    15f0:	cf 92       	push	r12
    15f2:	df 92       	push	r13
    15f4:	ef 92       	push	r14
    15f6:	ff 92       	push	r15
    15f8:	0f 93       	push	r16
    15fa:	1f 93       	push	r17
    15fc:	cf 93       	push	r28
    15fe:	df 93       	push	r29
    1600:	1f 92       	push	r1
    1602:	cd b7       	in	r28, 0x3d	; 61
    1604:	de b7       	in	r29, 0x3e	; 62
    1606:	b8 2e       	mov	r11, r24
    1608:	6b 01       	movw	r12, r22
    160a:	89 01       	movw	r16, r18
    Chunk *c=calloc(sizeof(Chunk), 1);
    160c:	61 e0       	ldi	r22, 0x01	; 1
    160e:	70 e0       	ldi	r23, 0x00	; 0
    1610:	88 e1       	ldi	r24, 0x18	; 24
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	49 83       	std	Y+1, r20	; 0x01
    1616:	0e 94 49 26 	call	0x4c92	; 0x4c92 <calloc>
    161a:	4c 01       	movw	r8, r24
    if (c == NULL)
    161c:	49 81       	ldd	r20, Y+1	; 0x01
    161e:	00 97       	sbiw	r24, 0x00	; 0
    1620:	79 f0       	breq	.+30     	; 0x1640 <sendMyChunk+0x56>
    {
        return 0;
    }
    if (sendMessageToPort(c, port, data, size, mh, (GenericHandler)&freeMyChunk) == 0)
    1622:	8f ee       	ldi	r24, 0xEF	; 239
    1624:	e8 2e       	mov	r14, r24
    1626:	8a e0       	ldi	r24, 0x0A	; 10
    1628:	f8 2e       	mov	r15, r24
    162a:	24 2f       	mov	r18, r20
    162c:	a6 01       	movw	r20, r12
    162e:	6b 2d       	mov	r22, r11
    1630:	c4 01       	movw	r24, r8
    1632:	0e 94 73 08 	call	0x10e6	; 0x10e6 <sendMessageToPort>
    1636:	81 11       	cpse	r24, r1
    1638:	05 c0       	rjmp	.+10     	; 0x1644 <sendMyChunk+0x5a>
    {
        free(c);
    163a:	c4 01       	movw	r24, r8
    163c:	0e 94 02 27 	call	0x4e04	; 0x4e04 <free>
byte sendMyChunk(PRef port, byte *data, byte size, MsgHandler mh) 
{
    Chunk *c=calloc(sizeof(Chunk), 1);
    if (c == NULL)
    {
        return 0;
    1640:	80 e0       	ldi	r24, 0x00	; 0
    1642:	01 c0       	rjmp	.+2      	; 0x1646 <sendMyChunk+0x5c>
    if (sendMessageToPort(c, port, data, size, mh, (GenericHandler)&freeMyChunk) == 0)
    {
        free(c);
        return 0;
    }
    return 1;
    1644:	81 e0       	ldi	r24, 0x01	; 1
}
    1646:	0f 90       	pop	r0
    1648:	df 91       	pop	r29
    164a:	cf 91       	pop	r28
    164c:	1f 91       	pop	r17
    164e:	0f 91       	pop	r16
    1650:	ff 90       	pop	r15
    1652:	ef 90       	pop	r14
    1654:	df 90       	pop	r13
    1656:	cf 90       	pop	r12
    1658:	bf 90       	pop	r11
    165a:	9f 90       	pop	r9
    165c:	8f 90       	pop	r8
    165e:	08 95       	ret

00001660 <processCmd>:

void processCmd(void) 
{
    1660:	cf 93       	push	r28
   int X = 0;
    if (seq < thisChunk->data[2]) {
    1662:	e0 91 4f 21 	lds	r30, 0x214F
    1666:	f0 91 50 21 	lds	r31, 0x2150
    166a:	82 81       	ldd	r24, Z+2	; 0x02
    166c:	90 e0       	ldi	r25, 0x00	; 0
    166e:	20 91 2a 21 	lds	r18, 0x212A
    1672:	30 91 2b 21 	lds	r19, 0x212B
    1676:	28 17       	cp	r18, r24
    1678:	39 07       	cpc	r19, r25
    167a:	b4 f4       	brge	.+44     	; 0x16a8 <processCmd+0x48>
	  seq = thisChunk->data[2];
    167c:	80 93 2a 21 	sts	0x212A, r24
    1680:	90 93 2b 21 	sts	0x212B, r25
    1684:	c0 e0       	ldi	r28, 0x00	; 0
	  for (X ; X <= 5 ; X++) {
	    sendMyChunk(X, thisChunk->data, 4, (MsgHandler)myMsgHandler);
    1686:	60 91 4f 21 	lds	r22, 0x214F
    168a:	70 91 50 21 	lds	r23, 0x2150
    168e:	26 e5       	ldi	r18, 0x56	; 86
    1690:	3b e0       	ldi	r19, 0x0B	; 11
    1692:	44 e0       	ldi	r20, 0x04	; 4
    1694:	8c 2f       	mov	r24, r28
    1696:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <sendMyChunk>
    169a:	cf 5f       	subi	r28, 0xFF	; 255
void processCmd(void) 
{
   int X = 0;
    if (seq < thisChunk->data[2]) {
	  seq = thisChunk->data[2];
	  for (X ; X <= 5 ; X++) {
    169c:	c6 30       	cpi	r28, 0x06	; 6
    169e:	99 f7       	brne	.-26     	; 0x1686 <processCmd+0x26>
	    sendMyChunk(X, thisChunk->data, 4, (MsgHandler)myMsgHandler);
	  }
	  callHandler(EVENT_COMMAND_RECEIVED);
    16a0:	85 e1       	ldi	r24, 0x15	; 21
	  //triggerHandler(EVENT_COMMAND_RECEIVED);
    }
}
    16a2:	cf 91       	pop	r28
    if (seq < thisChunk->data[2]) {
	  seq = thisChunk->data[2];
	  for (X ; X <= 5 ; X++) {
	    sendMyChunk(X, thisChunk->data, 4, (MsgHandler)myMsgHandler);
	  }
	  callHandler(EVENT_COMMAND_RECEIVED);
    16a4:	0c 94 c6 07 	jmp	0xf8c	; 0xf8c <callHandler>
	  //triggerHandler(EVENT_COMMAND_RECEIVED);
    }
}
    16a8:	cf 91       	pop	r28
    16aa:	08 95       	ret

000016ac <myMsgHandler>:

void myMsgHandler(void)
{
  processCmd();
    16ac:	0c 94 30 0b 	jmp	0x1660	; 0x1660 <processCmd>

000016b0 <isHostPort>:
}

byte isHostPort(PRef p)
{
	return ((p == toHost) && (PCConnection == 1));
    16b0:	90 91 1c 20 	lds	r25, 0x201C
    16b4:	89 13       	cpse	r24, r25
    16b6:	06 c0       	rjmp	.+12     	; 0x16c4 <isHostPort+0x14>
    16b8:	81 e0       	ldi	r24, 0x01	; 1
    16ba:	90 e0       	ldi	r25, 0x00	; 0
    16bc:	20 91 2c 21 	lds	r18, 0x212C
    16c0:	21 30       	cpi	r18, 0x01	; 1
    16c2:	11 f0       	breq	.+4      	; 0x16c8 <isHostPort+0x18>
    16c4:	80 e0       	ldi	r24, 0x00	; 0
    16c6:	90 e0       	ldi	r25, 0x00	; 0
}
    16c8:	08 95       	ret

000016ca <sendLogChunk>:

byte sendLogChunk(PRef p, byte *d, byte s)
{
    16ca:	8f 92       	push	r8
    16cc:	9f 92       	push	r9
    16ce:	bf 92       	push	r11
    16d0:	cf 92       	push	r12
    16d2:	df 92       	push	r13
    16d4:	ef 92       	push	r14
    16d6:	ff 92       	push	r15
    16d8:	0f 93       	push	r16
    16da:	1f 93       	push	r17
    16dc:	cf 93       	push	r28
    16de:	df 93       	push	r29
    16e0:	1f 92       	push	r1
    16e2:	cd b7       	in	r28, 0x3d	; 61
    16e4:	de b7       	in	r29, 0x3e	; 62
    16e6:	b8 2e       	mov	r11, r24
    16e8:	6b 01       	movw	r12, r22
	Chunk *c=calloc(sizeof(Chunk), 1);
    16ea:	61 e0       	ldi	r22, 0x01	; 1
    16ec:	70 e0       	ldi	r23, 0x00	; 0
    16ee:	88 e1       	ldi	r24, 0x18	; 24
    16f0:	90 e0       	ldi	r25, 0x00	; 0
    16f2:	49 83       	std	Y+1, r20	; 0x01
    16f4:	0e 94 49 26 	call	0x4c92	; 0x4c92 <calloc>
    16f8:	4c 01       	movw	r8, r24
		c=calloc(sizeof(Chunk), 1);
	}
	while (sendMessageToPort(c, p, d, s, (MsgHandler)RES_SYS_HANDLER, (GenericHandler)&freeLogChunk) == 0);
	return 1;
#else
	if (c == NULL)
    16fa:	29 81       	ldd	r18, Y+1	; 0x01
    16fc:	00 97       	sbiw	r24, 0x00	; 0
    16fe:	81 f0       	breq	.+32     	; 0x1720 <sendLogChunk+0x56>
	{
		return 0;
	}
	if (sendMessageToPort(c, p, d, s, (MsgHandler)RES_SYS_HANDLER, (GenericHandler)&freeLogChunk) == 0)
    1700:	99 ee       	ldi	r25, 0xE9	; 233
    1702:	e9 2e       	mov	r14, r25
    1704:	9a e0       	ldi	r25, 0x0A	; 10
    1706:	f9 2e       	mov	r15, r25
    1708:	00 e0       	ldi	r16, 0x00	; 0
    170a:	10 e0       	ldi	r17, 0x00	; 0
    170c:	a6 01       	movw	r20, r12
    170e:	6b 2d       	mov	r22, r11
    1710:	c4 01       	movw	r24, r8
    1712:	0e 94 73 08 	call	0x10e6	; 0x10e6 <sendMessageToPort>
    1716:	81 11       	cpse	r24, r1
    1718:	05 c0       	rjmp	.+10     	; 0x1724 <sendLogChunk+0x5a>
	{
		free(c);
    171a:	c4 01       	movw	r24, r8
    171c:	0e 94 02 27 	call	0x4e04	; 0x4e04 <free>
	while (sendMessageToPort(c, p, d, s, (MsgHandler)RES_SYS_HANDLER, (GenericHandler)&freeLogChunk) == 0);
	return 1;
#else
	if (c == NULL)
	{
		return 0;
    1720:	80 e0       	ldi	r24, 0x00	; 0
    1722:	01 c0       	rjmp	.+2      	; 0x1726 <sendLogChunk+0x5c>
	if (sendMessageToPort(c, p, d, s, (MsgHandler)RES_SYS_HANDLER, (GenericHandler)&freeLogChunk) == 0)
	{
		free(c);
		return 0;
	}
	return 1;
    1724:	81 e0       	ldi	r24, 0x01	; 1
#endif

}
    1726:	0f 90       	pop	r0
    1728:	df 91       	pop	r29
    172a:	cf 91       	pop	r28
    172c:	1f 91       	pop	r17
    172e:	0f 91       	pop	r16
    1730:	ff 90       	pop	r15
    1732:	ef 90       	pop	r14
    1734:	df 90       	pop	r13
    1736:	cf 90       	pop	r12
    1738:	bf 90       	pop	r11
    173a:	9f 90       	pop	r9
    173c:	8f 90       	pop	r8
    173e:	08 95       	ret

00001740 <sendPathToHost>:


void sendPathToHost(PRef p)
{
    1740:	cf 93       	push	r28
    1742:	df 93       	push	r29
    1744:	1f 92       	push	r1
    1746:	1f 92       	push	r1
    1748:	cd b7       	in	r28, 0x3d	; 61
    174a:	de b7       	in	r29, 0x3e	; 62
	byte buf[2];
	
	buf[0] = LOG_MSG;
    174c:	90 e5       	ldi	r25, 0x50	; 80
    174e:	99 83       	std	Y+1, r25	; 0x01
	buf[1] = LOG_PATH_TO_HOST;
    1750:	92 e0       	ldi	r25, 0x02	; 2
    1752:	9a 83       	std	Y+2, r25	; 0x02
	sendLogChunk(p, buf, 2);
    1754:	42 e0       	ldi	r20, 0x02	; 2
    1756:	be 01       	movw	r22, r28
    1758:	6f 5f       	subi	r22, 0xFF	; 255
    175a:	7f 4f       	sbci	r23, 0xFF	; 255
    175c:	0e 94 65 0b 	call	0x16ca	; 0x16ca <sendLogChunk>
	
}
    1760:	0f 90       	pop	r0
    1762:	0f 90       	pop	r0
    1764:	df 91       	pop	r29
    1766:	cf 91       	pop	r28
    1768:	08 95       	ret

0000176a <spreadPathToHost>:

void spreadPathToHost(PRef excluded)
{
    176a:	0f 93       	push	r16
    176c:	1f 93       	push	r17
    176e:	cf 93       	push	r28
    1770:	df 93       	push	r29
    1772:	08 2f       	mov	r16, r24
    1774:	c1 e5       	ldi	r28, 0x51	; 81
    1776:	d1 e2       	ldi	r29, 0x21	; 33
	byte p;

	for( p = 0; p < NUM_PORTS; p++)
    1778:	10 e0       	ldi	r17, 0x00	; 0
	{
		if ((p == excluded) || (thisNeighborhood.n[p] == VACANT))
    177a:	10 17       	cp	r17, r16
    177c:	39 f0       	breq	.+14     	; 0x178c <spreadPathToHost+0x22>
    177e:	28 81       	ld	r18, Y
    1780:	39 81       	ldd	r19, Y+1	; 0x01
    1782:	23 2b       	or	r18, r19
    1784:	19 f0       	breq	.+6      	; 0x178c <spreadPathToHost+0x22>
		{
			continue;
		}
		sendPathToHost(p);
    1786:	81 2f       	mov	r24, r17
    1788:	0e 94 a0 0b 	call	0x1740	; 0x1740 <sendPathToHost>

void spreadPathToHost(PRef excluded)
{
	byte p;

	for( p = 0; p < NUM_PORTS; p++)
    178c:	1f 5f       	subi	r17, 0xFF	; 255
    178e:	22 96       	adiw	r28, 0x02	; 2
    1790:	16 30       	cpi	r17, 0x06	; 6
    1792:	99 f7       	brne	.-26     	; 0x177a <spreadPathToHost+0x10>
		{
			continue;
		}
		sendPathToHost(p);
	}
}
    1794:	df 91       	pop	r29
    1796:	cf 91       	pop	r28
    1798:	1f 91       	pop	r17
    179a:	0f 91       	pop	r16
    179c:	08 95       	ret

0000179e <forwardToHost>:

void forwardToHost(Chunk *c)
{
    179e:	bc 01       	movw	r22, r24
	if(toHost != UNDEFINED_HOST) {
    17a0:	80 91 1c 20 	lds	r24, 0x201C
    17a4:	88 3c       	cpi	r24, 0xC8	; 200
    17a6:	19 f0       	breq	.+6      	; 0x17ae <forwardToHost+0x10>
		sendLogChunk(toHost, c->data, DATA_SIZE);
    17a8:	41 e1       	ldi	r20, 0x11	; 17
    17aa:	0c 94 65 0b 	jmp	0x16ca	; 0x16ca <sendLogChunk>
    17ae:	08 95       	ret

000017b0 <initLogDebug>:
	}
}

void initLogDebug(void)
{
    17b0:	ff 92       	push	r15
    17b2:	0f 93       	push	r16
    17b4:	1f 93       	push	r17
    17b6:	cf 93       	push	r28
    17b8:	df 93       	push	r29
    17ba:	1f 92       	push	r1
    17bc:	1f 92       	push	r1
    17be:	cd b7       	in	r28, 0x3d	; 61
    17c0:	de b7       	in	r29, 0x3e	; 62
	byte buf[2];
	
	toHost = UNDEFINED_HOST;
    17c2:	88 ec       	ldi	r24, 0xC8	; 200
    17c4:	80 93 1c 20 	sts	0x201C, r24
	PCConnection = 0;
    17c8:	10 92 2c 21 	sts	0x212C, r1
	
	buf[0] = LOG_MSG;
    17cc:	80 e5       	ldi	r24, 0x50	; 80
    17ce:	89 83       	std	Y+1, r24	; 0x01
	buf[1] = LOG_NEED_PATH_TO_HOST;
    17d0:	83 e0       	ldi	r24, 0x03	; 3
    17d2:	8a 83       	std	Y+2, r24	; 0x02
	byte p;
	
	setColor(ORANGE); // to remember to the user that the block is waiting
    17d4:	81 e0       	ldi	r24, 0x01	; 1
    17d6:	0e 94 df 07 	call	0xfbe	; 0xfbe <setColor>
	while(toHost == UNDEFINED_HOST)
    17da:	15 c0       	rjmp	.+42     	; 0x1806 <initLogDebug+0x56>
	{
		for( p = 0; p < NUM_PORTS; p++)
		{
			if ((thisNeighborhood.n[p] == VACANT))
    17dc:	f8 01       	movw	r30, r16
    17de:	21 91       	ld	r18, Z+
    17e0:	31 91       	ld	r19, Z+
    17e2:	8f 01       	movw	r16, r30
    17e4:	23 2b       	or	r18, r19
    17e6:	39 f0       	breq	.+14     	; 0x17f6 <initLogDebug+0x46>
			{
				continue;
			}
			sendLogChunk(p, buf, 2);
    17e8:	42 e0       	ldi	r20, 0x02	; 2
    17ea:	be 01       	movw	r22, r28
    17ec:	6f 5f       	subi	r22, 0xFF	; 255
    17ee:	7f 4f       	sbci	r23, 0xFF	; 255
    17f0:	8f 2d       	mov	r24, r15
    17f2:	0e 94 65 0b 	call	0x16ca	; 0x16ca <sendLogChunk>
	byte p;
	
	setColor(ORANGE); // to remember to the user that the block is waiting
	while(toHost == UNDEFINED_HOST)
	{
		for( p = 0; p < NUM_PORTS; p++)
    17f6:	f3 94       	inc	r15
    17f8:	f6 e0       	ldi	r31, 0x06	; 6
    17fa:	ff 12       	cpse	r15, r31
    17fc:	ef cf       	rjmp	.-34     	; 0x17dc <initLogDebug+0x2c>
			{
				continue;
			}
			sendLogChunk(p, buf, 2);
		}
		delayMS(200);
    17fe:	88 ec       	ldi	r24, 0xC8	; 200
    1800:	90 e0       	ldi	r25, 0x00	; 0
    1802:	0e 94 3a 09 	call	0x1274	; 0x1274 <delayMS>
	buf[0] = LOG_MSG;
	buf[1] = LOG_NEED_PATH_TO_HOST;
	byte p;
	
	setColor(ORANGE); // to remember to the user that the block is waiting
	while(toHost == UNDEFINED_HOST)
    1806:	80 91 1c 20 	lds	r24, 0x201C
    180a:	88 3c       	cpi	r24, 0xC8	; 200
    180c:	21 f4       	brne	.+8      	; 0x1816 <initLogDebug+0x66>
    180e:	01 e5       	ldi	r16, 0x51	; 81
    1810:	11 e2       	ldi	r17, 0x21	; 33
    1812:	f1 2c       	mov	r15, r1
    1814:	e3 cf       	rjmp	.-58     	; 0x17dc <initLogDebug+0x2c>
			}
			sendLogChunk(p, buf, 2);
		}
		delayMS(200);
	}
	srand(getGUID());
    1816:	0e 94 e4 19 	call	0x33c8	; 0x33c8 <getGUID>
    181a:	0e 94 f4 27 	call	0x4fe8	; 0x4fe8 <srand>
}
    181e:	0f 90       	pop	r0
    1820:	0f 90       	pop	r0
    1822:	df 91       	pop	r29
    1824:	cf 91       	pop	r28
    1826:	1f 91       	pop	r17
    1828:	0f 91       	pop	r16
    182a:	ff 90       	pop	r15
    182c:	08 95       	ret

0000182e <handleLogMessage>:

byte handleLogMessage(void)
{
	if( thisChunk == NULL ) 
    182e:	e0 91 4f 21 	lds	r30, 0x214F
    1832:	f0 91 50 21 	lds	r31, 0x2150
    1836:	30 97       	sbiw	r30, 0x00	; 0
    1838:	b1 f1       	breq	.+108    	; 0x18a6 <handleLogMessage+0x78>
	{
		return 0;
	}
	

	switch(thisChunk->data[1])
    183a:	91 81       	ldd	r25, Z+1	; 0x01
    183c:	93 30       	cpi	r25, 0x03	; 3
    183e:	f9 f0       	breq	.+62     	; 0x187e <handleLogMessage+0x50>
    1840:	28 f4       	brcc	.+10     	; 0x184c <handleLogMessage+0x1e>
    1842:	91 30       	cpi	r25, 0x01	; 1
    1844:	41 f0       	breq	.+16     	; 0x1856 <handleLogMessage+0x28>
    1846:	92 30       	cpi	r25, 0x02	; 2
    1848:	81 f5       	brne	.+96     	; 0x18aa <handleLogMessage+0x7c>
    184a:	0c c0       	rjmp	.+24     	; 0x1864 <handleLogMessage+0x36>
    184c:	94 30       	cpi	r25, 0x04	; 4
    184e:	01 f1       	breq	.+64     	; 0x1890 <handleLogMessage+0x62>
    1850:	95 30       	cpi	r25, 0x05	; 5
    1852:	59 f5       	brne	.+86     	; 0x18aa <handleLogMessage+0x7c>
    1854:	25 c0       	rjmp	.+74     	; 0x18a0 <handleLogMessage+0x72>
	{
		case LOG_I_AM_HOST:
			toHost = faceNum(thisChunk);			
    1856:	81 89       	ldd	r24, Z+17	; 0x11
    1858:	87 70       	andi	r24, 0x07	; 7
    185a:	80 93 1c 20 	sts	0x201C, r24
			PCConnection = 1;
    185e:	90 93 2c 21 	sts	0x212C, r25
    1862:	0a c0       	rjmp	.+20     	; 0x1878 <handleLogMessage+0x4a>
			spreadPathToHost(faceNum(thisChunk));
		break;
		case LOG_PATH_TO_HOST:
			if (toHost == UNDEFINED_HOST) {
    1864:	80 91 1c 20 	lds	r24, 0x201C
    1868:	88 3c       	cpi	r24, 0xC8	; 200
    186a:	f9 f4       	brne	.+62     	; 0x18aa <handleLogMessage+0x7c>
				toHost = faceNum(thisChunk);
    186c:	81 89       	ldd	r24, Z+17	; 0x11
    186e:	87 70       	andi	r24, 0x07	; 7
    1870:	80 93 1c 20 	sts	0x201C, r24
				PCConnection = 0;
    1874:	10 92 2c 21 	sts	0x212C, r1
				spreadPathToHost(faceNum(thisChunk));
    1878:	0e 94 b5 0b 	call	0x176a	; 0x176a <spreadPathToHost>
    187c:	16 c0       	rjmp	.+44     	; 0x18aa <handleLogMessage+0x7c>
			}
		break;
		case LOG_NEED_PATH_TO_HOST:
			if (toHost != UNDEFINED_HOST) {
    187e:	80 91 1c 20 	lds	r24, 0x201C
    1882:	88 3c       	cpi	r24, 0xC8	; 200
    1884:	91 f0       	breq	.+36     	; 0x18aa <handleLogMessage+0x7c>
				sendPathToHost(faceNum(thisChunk));
    1886:	81 89       	ldd	r24, Z+17	; 0x11
    1888:	87 70       	andi	r24, 0x07	; 7
    188a:	0e 94 a0 0b 	call	0x1740	; 0x1740 <sendPathToHost>
    188e:	0d c0       	rjmp	.+26     	; 0x18aa <handleLogMessage+0x7c>
			}
		break;
		case LOG_DATA:
			if(toHost != UNDEFINED_HOST) {
    1890:	80 91 1c 20 	lds	r24, 0x201C
    1894:	88 3c       	cpi	r24, 0xC8	; 200
    1896:	49 f0       	breq	.+18     	; 0x18aa <handleLogMessage+0x7c>
				forwardToHost(thisChunk);
    1898:	cf 01       	movw	r24, r30
    189a:	0e 94 cf 0b 	call	0x179e	; 0x179e <forwardToHost>
    189e:	05 c0       	rjmp	.+10     	; 0x18aa <handleLogMessage+0x7c>
			}
		break;		
		case LOG_CMD:
			processCmd();
    18a0:	0e 94 30 0b 	call	0x1660	; 0x1660 <processCmd>
    18a4:	02 c0       	rjmp	.+4      	; 0x18aa <handleLogMessage+0x7c>

byte handleLogMessage(void)
{
	if( thisChunk == NULL ) 
	{
		return 0;
    18a6:	80 e0       	ldi	r24, 0x00	; 0
    18a8:	08 95       	ret
		case LOG_CMD:
			processCmd();
		break;
	}
	
	return 1;
    18aa:	81 e0       	ldi	r24, 0x01	; 1
}
    18ac:	08 95       	ret

000018ae <getSize>:

byte getSize(char* str) {
	byte sizeCar = 0;
	byte sizeChunk = 1;
	
	if (str == NULL) {
    18ae:	00 97       	sbiw	r24, 0x00	; 0
    18b0:	a1 f0       	breq	.+40     	; 0x18da <getSize+0x2c>
        return 0;
    }
	
	sizeCar = strlen(str) + 1;
    18b2:	dc 01       	movw	r26, r24
    18b4:	0d 90       	ld	r0, X+
    18b6:	00 20       	and	r0, r0
    18b8:	e9 f7       	brne	.-6      	; 0x18b4 <getSize+0x6>
    18ba:	11 97       	sbiw	r26, 0x01	; 1
    18bc:	a8 1b       	sub	r26, r24
    18be:	8a 2f       	mov	r24, r26
    18c0:	8f 5f       	subi	r24, 0xFF	; 255

    if (sizeCar < 11) {
    18c2:	8b 30       	cpi	r24, 0x0B	; 11
    18c4:	60 f0       	brcs	.+24     	; 0x18de <getSize+0x30>
        return 1;
    }
    
    sizeCar -= 10;
    18c6:	8a 50       	subi	r24, 0x0A	; 10
    sizeChunk += sizeCar / 11;
    18c8:	6b e0       	ldi	r22, 0x0B	; 11
    18ca:	0e 94 db 25 	call	0x4bb6	; 0x4bb6 <__udivmodqi4>
	if ((sizeCar % 11) != 0) {
    18ce:	91 11       	cpse	r25, r1
    18d0:	02 c0       	rjmp	.+4      	; 0x18d6 <getSize+0x28>
    if (sizeCar < 11) {
        return 1;
    }
    
    sizeCar -= 10;
    sizeChunk += sizeCar / 11;
    18d2:	8f 5f       	subi	r24, 0xFF	; 255
    18d4:	08 95       	ret
	if ((sizeCar % 11) != 0) {
		sizeChunk++;
    18d6:	8e 5f       	subi	r24, 0xFE	; 254
    18d8:	08 95       	ret
byte getSize(char* str) {
	byte sizeCar = 0;
	byte sizeChunk = 1;
	
	if (str == NULL) {
        return 0;
    18da:	80 e0       	ldi	r24, 0x00	; 0
    18dc:	08 95       	ret
    }
	
	sizeCar = strlen(str) + 1;

    if (sizeCar < 11) {
        return 1;
    18de:	81 e0       	ldi	r24, 0x01	; 1
    sizeChunk += sizeCar / 11;
	if ((sizeCar % 11) != 0) {
		sizeChunk++;
	}
	return sizeChunk;
}
    18e0:	08 95       	ret

000018e2 <printDebug>:

// format: <LOG_MSG> <LOG_DATA> <block id (2 bytes) > <message # (1 byte)> < fragment # (1 byte)> < if fragment # = 1, number of fragments. Otherwise data> < log data: 17 - 7 = 10>.
byte printDebug(char* str) {
    18e2:	7f 92       	push	r7
    18e4:	8f 92       	push	r8
    18e6:	9f 92       	push	r9
    18e8:	af 92       	push	r10
    18ea:	bf 92       	push	r11
    18ec:	cf 92       	push	r12
    18ee:	df 92       	push	r13
    18f0:	ef 92       	push	r14
    18f2:	ff 92       	push	r15
    18f4:	0f 93       	push	r16
    18f6:	1f 93       	push	r17
    18f8:	cf 93       	push	r28
    18fa:	df 93       	push	r29
    18fc:	cd b7       	in	r28, 0x3d	; 61
    18fe:	de b7       	in	r29, 0x3e	; 62
    1900:	61 97       	sbiw	r28, 0x11	; 17
    1902:	cd bf       	out	0x3d, r28	; 61
    1904:	de bf       	out	0x3e, r29	; 62
    1906:	8c 01       	movw	r16, r24
	byte size = getSize(str);
    1908:	0e 94 57 0c 	call	0x18ae	; 0x18ae <getSize>
    190c:	b8 2e       	mov	r11, r24
	uint8_t index = 0;
	byte buf[DATA_SIZE];
	byte s = 0;	
	byte fId = 0;
	byte off = 6;
	byte random =  rand() % 45 + 1; 
    190e:	0e 94 f0 27 	call	0x4fe0	; 0x4fe0 <rand>
    1912:	7c 01       	movw	r14, r24
	if (toHost == UNDEFINED_HOST)
    1914:	80 91 1c 20 	lds	r24, 0x201C
    1918:	88 3c       	cpi	r24, 0xC8	; 200
    191a:	09 f4       	brne	.+2      	; 0x191e <printDebug+0x3c>
    191c:	84 c0       	rjmp	.+264    	; 0x1a26 <printDebug+0x144>
	{
		return 0;
	}
	
	buf[0] = LOG_MSG;
    191e:	80 e5       	ldi	r24, 0x50	; 80
    1920:	89 83       	std	Y+1, r24	; 0x01
	buf[1] = LOG_DATA;
    1922:	84 e0       	ldi	r24, 0x04	; 4
    1924:	8a 83       	std	Y+2, r24	; 0x02
	GUIDIntoChar(getGUID(), &(buf[2]));
    1926:	0e 94 e4 19 	call	0x33c8	; 0x33c8 <getGUID>
    192a:	be 01       	movw	r22, r28
    192c:	6d 5f       	subi	r22, 0xFD	; 253
    192e:	7f 4f       	sbci	r23, 0xFF	; 255
    1930:	0e 94 9b 04 	call	0x936	; 0x936 <GUIDIntoChar>
	buf[4] = mId;
    1934:	80 91 2d 21 	lds	r24, 0x212D
    1938:	8d 83       	std	Y+5, r24	; 0x05
	
	if (size == 1) 
    193a:	81 e0       	ldi	r24, 0x01	; 1
    193c:	b8 16       	cp	r11, r24
    193e:	81 f0       	breq	.+32     	; 0x1960 <printDebug+0x7e>
	uint8_t index = 0;
	byte buf[DATA_SIZE];
	byte s = 0;	
	byte fId = 0;
	byte off = 6;
	byte random =  rand() % 45 + 1; 
    1940:	c7 01       	movw	r24, r14
    1942:	6d e2       	ldi	r22, 0x2D	; 45
    1944:	70 e0       	ldi	r23, 0x00	; 0
    1946:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <__divmodhi4>
    194a:	a8 2e       	mov	r10, r24
    194c:	a3 94       	inc	r10
			{
				s = 11;
			}
			memcpy(buf+off, str+index, s);
			index += s;
			delayMS(random);
    194e:	e1 2c       	mov	r14, r1
    1950:	f1 2c       	mov	r15, r1
    1952:	81 2c       	mov	r8, r1
			{
				buf[6] = size;
				off = 7;
				s = 10;
			}
			else if (fId == (size -1))
    1954:	cb 2c       	mov	r12, r11
    1956:	d1 2c       	mov	r13, r1
    1958:	81 e0       	ldi	r24, 0x01	; 1
    195a:	c8 1a       	sub	r12, r24
    195c:	d1 08       	sbc	r13, r1
    195e:	59 c0       	rjmp	.+178    	; 0x1a12 <printDebug+0x130>
	buf[4] = mId;
	
	if (size == 1) 
	{
		off = 7;
		s = strlen(str)+1;
    1960:	d8 01       	movw	r26, r16
    1962:	0d 90       	ld	r0, X+
    1964:	00 20       	and	r0, r0
    1966:	e9 f7       	brne	.-6      	; 0x1962 <printDebug+0x80>
    1968:	11 97       	sbiw	r26, 0x01	; 1
    196a:	fa 2e       	mov	r15, r26
    196c:	f0 1a       	sub	r15, r16
		memcpy(buf+off, str, s);
    196e:	9e 01       	movw	r18, r28
    1970:	28 5f       	subi	r18, 0xF8	; 248
    1972:	3f 4f       	sbci	r19, 0xFF	; 255
	buf[4] = mId;
	
	if (size == 1) 
	{
		off = 7;
		s = strlen(str)+1;
    1974:	4f 2d       	mov	r20, r15
    1976:	4f 5f       	subi	r20, 0xFF	; 255
		memcpy(buf+off, str, s);
    1978:	50 e0       	ldi	r21, 0x00	; 0
    197a:	b8 01       	movw	r22, r16
    197c:	c9 01       	movw	r24, r18
    197e:	0e 94 e7 28 	call	0x51ce	; 0x51ce <memcpy>
		buf[5] = 0;	
    1982:	1e 82       	std	Y+6, r1	; 0x06
		buf[6] = size;
    1984:	bf 82       	std	Y+7, r11	; 0x07
		sendLogChunk(toHost, buf, s+off);
    1986:	4f 2d       	mov	r20, r15
    1988:	48 5f       	subi	r20, 0xF8	; 248
    198a:	be 01       	movw	r22, r28
    198c:	6f 5f       	subi	r22, 0xFF	; 255
    198e:	7f 4f       	sbci	r23, 0xFF	; 255
    1990:	80 91 1c 20 	lds	r24, 0x201C
    1994:	0e 94 65 0b 	call	0x16ca	; 0x16ca <sendLogChunk>
    1998:	3f c0       	rjmp	.+126    	; 0x1a18 <printDebug+0x136>
	} 
	else
	{	
		for (fId = 0; fId < size; fId++)
		{
			buf[5] = fId;
    199a:	ee 82       	std	Y+6, r14	; 0x06
			if (fId == 0)
    199c:	81 11       	cpse	r24, r1
    199e:	06 c0       	rjmp	.+12     	; 0x19ac <printDebug+0xca>
			{
				buf[6] = size;
    19a0:	bf 82       	std	Y+7, r11	; 0x07
				off = 7;
    19a2:	57 e0       	ldi	r21, 0x07	; 7
    19a4:	75 2e       	mov	r7, r21
				s = 10;
    19a6:	6a e0       	ldi	r22, 0x0A	; 10
    19a8:	96 2e       	mov	r9, r22
    19aa:	13 c0       	rjmp	.+38     	; 0x19d2 <printDebug+0xf0>
			}
			else if (fId == (size -1))
    19ac:	ec 14       	cp	r14, r12
    19ae:	fd 04       	cpc	r15, r13
    19b0:	61 f4       	brne	.+24     	; 0x19ca <printDebug+0xe8>
			{
				s = strlen(str+index)+1 ;
    19b2:	f8 01       	movw	r30, r16
    19b4:	e8 0d       	add	r30, r8
    19b6:	f1 1d       	adc	r31, r1
    19b8:	df 01       	movw	r26, r30
    19ba:	0d 90       	ld	r0, X+
    19bc:	00 20       	and	r0, r0
    19be:	e9 f7       	brne	.-6      	; 0x19ba <printDebug+0xd8>
    19c0:	9a 2e       	mov	r9, r26
    19c2:	9e 1a       	sub	r9, r30
    19c4:	46 e0       	ldi	r20, 0x06	; 6
    19c6:	74 2e       	mov	r7, r20
    19c8:	04 c0       	rjmp	.+8      	; 0x19d2 <printDebug+0xf0>
			{
				buf[6] = size;
				off = 7;
				s = 10;
			}
			else if (fId == (size -1))
    19ca:	26 e0       	ldi	r18, 0x06	; 6
    19cc:	72 2e       	mov	r7, r18
			{
				s = strlen(str+index)+1 ;
			} 
			else
			{
				s = 11;
    19ce:	3b e0       	ldi	r19, 0x0B	; 11
    19d0:	93 2e       	mov	r9, r19
			}
			memcpy(buf+off, str+index, s);
    19d2:	21 e0       	ldi	r18, 0x01	; 1
    19d4:	30 e0       	ldi	r19, 0x00	; 0
    19d6:	2c 0f       	add	r18, r28
    19d8:	3d 1f       	adc	r19, r29
    19da:	27 0d       	add	r18, r7
    19dc:	31 1d       	adc	r19, r1
    19de:	f8 01       	movw	r30, r16
    19e0:	e8 0d       	add	r30, r8
    19e2:	f1 1d       	adc	r31, r1
    19e4:	49 2d       	mov	r20, r9
    19e6:	50 e0       	ldi	r21, 0x00	; 0
    19e8:	bf 01       	movw	r22, r30
    19ea:	c9 01       	movw	r24, r18
    19ec:	0e 94 e7 28 	call	0x51ce	; 0x51ce <memcpy>
			index += s;
    19f0:	89 0c       	add	r8, r9
			delayMS(random);
    19f2:	8a 2d       	mov	r24, r10
    19f4:	90 e0       	ldi	r25, 0x00	; 0
    19f6:	0e 94 3a 09 	call	0x1274	; 0x1274 <delayMS>
			sendLogChunk(toHost, buf, s+off);
    19fa:	47 2d       	mov	r20, r7
    19fc:	49 0d       	add	r20, r9
    19fe:	be 01       	movw	r22, r28
    1a00:	6f 5f       	subi	r22, 0xFF	; 255
    1a02:	7f 4f       	sbci	r23, 0xFF	; 255
    1a04:	80 91 1c 20 	lds	r24, 0x201C
    1a08:	0e 94 65 0b 	call	0x16ca	; 0x16ca <sendLogChunk>
    1a0c:	8f ef       	ldi	r24, 0xFF	; 255
    1a0e:	e8 1a       	sub	r14, r24
    1a10:	f8 0a       	sbc	r15, r24
    1a12:	8e 2d       	mov	r24, r14
		buf[6] = size;
		sendLogChunk(toHost, buf, s+off);
	} 
	else
	{	
		for (fId = 0; fId < size; fId++)
    1a14:	eb 14       	cp	r14, r11
    1a16:	08 f2       	brcs	.-126    	; 0x199a <printDebug+0xb8>
			delayMS(random);
			sendLogChunk(toHost, buf, s+off);
			off = 6;
		}
	}
	mId++;
    1a18:	80 91 2d 21 	lds	r24, 0x212D
    1a1c:	8f 5f       	subi	r24, 0xFF	; 255
    1a1e:	80 93 2d 21 	sts	0x212D, r24
	return 1;
    1a22:	81 e0       	ldi	r24, 0x01	; 1
    1a24:	01 c0       	rjmp	.+2      	; 0x1a28 <printDebug+0x146>
	byte fId = 0;
	byte off = 6;
	byte random =  rand() % 45 + 1; 
	if (toHost == UNDEFINED_HOST)
	{
		return 0;
    1a26:	80 e0       	ldi	r24, 0x00	; 0
			off = 6;
		}
	}
	mId++;
	return 1;
}
    1a28:	61 96       	adiw	r28, 0x11	; 17
    1a2a:	cd bf       	out	0x3d, r28	; 61
    1a2c:	de bf       	out	0x3e, r29	; 62
    1a2e:	df 91       	pop	r29
    1a30:	cf 91       	pop	r28
    1a32:	1f 91       	pop	r17
    1a34:	0f 91       	pop	r16
    1a36:	ff 90       	pop	r15
    1a38:	ef 90       	pop	r14
    1a3a:	df 90       	pop	r13
    1a3c:	cf 90       	pop	r12
    1a3e:	bf 90       	pop	r11
    1a40:	af 90       	pop	r10
    1a42:	9f 90       	pop	r9
    1a44:	8f 90       	pop	r8
    1a46:	7f 90       	pop	r7
    1a48:	08 95       	ret

00001a4a <blockingPrintDebug>:

byte blockingPrintDebug(char *s)
{
    1a4a:	cf 93       	push	r28
    1a4c:	df 93       	push	r29
    1a4e:	ec 01       	movw	r28, r24
	while(toHost == UNDEFINED_HOST)
    1a50:	04 c0       	rjmp	.+8      	; 0x1a5a <blockingPrintDebug+0x10>
	{
		delayMS(1);
    1a52:	81 e0       	ldi	r24, 0x01	; 1
    1a54:	90 e0       	ldi	r25, 0x00	; 0
    1a56:	0e 94 3a 09 	call	0x1274	; 0x1274 <delayMS>
	return 1;
}

byte blockingPrintDebug(char *s)
{
	while(toHost == UNDEFINED_HOST)
    1a5a:	80 91 1c 20 	lds	r24, 0x201C
    1a5e:	88 3c       	cpi	r24, 0xC8	; 200
    1a60:	c1 f3       	breq	.-16     	; 0x1a52 <blockingPrintDebug+0x8>
	{
		delayMS(1);
	}
	return printDebug(s);
    1a62:	ce 01       	movw	r24, r28
}
    1a64:	df 91       	pop	r29
    1a66:	cf 91       	pop	r28
{
	while(toHost == UNDEFINED_HOST)
	{
		delayMS(1);
	}
	return printDebug(s);
    1a68:	0c 94 71 0c 	jmp	0x18e2	; 0x18e2 <printDebug>

00001a6c <freeClockChunk>:
 * Chunk Management Functions
 *****************************************************/

void freeClockChunk(void)
{
	free(thisChunk);
    1a6c:	80 91 4f 21 	lds	r24, 0x214F
    1a70:	90 91 50 21 	lds	r25, 0x2150
    1a74:	0c 94 02 27 	jmp	0x4e04	; 0x4e04 <free>

00001a78 <printSlope>:
	}
#endif */
}

void printSlope(void)
{
    1a78:	08 95       	ret

00001a7a <getClockForTime>:
	printDebug(s);
#endif*/
}

Time getClockForTime(Time t)
{
    1a7a:	cf 92       	push	r12
    1a7c:	df 92       	push	r13
    1a7e:	ef 92       	push	r14
    1a80:	ff 92       	push	r15
#ifdef LINEAR_CORRECTION
	return ((double)t*speedAvg) + offset;
    1a82:	0e 94 77 24 	call	0x48ee	; 0x48ee <__floatunsisf>
    1a86:	20 91 40 21 	lds	r18, 0x2140
    1a8a:	30 91 41 21 	lds	r19, 0x2141
    1a8e:	40 91 42 21 	lds	r20, 0x2142
    1a92:	50 91 43 21 	lds	r21, 0x2143
    1a96:	0e 94 24 25 	call	0x4a48	; 0x4a48 <__mulsf3>
    1a9a:	6b 01       	movw	r12, r22
    1a9c:	7c 01       	movw	r14, r24
    1a9e:	60 91 36 21 	lds	r22, 0x2136
    1aa2:	70 91 37 21 	lds	r23, 0x2137
    1aa6:	80 91 38 21 	lds	r24, 0x2138
    1aaa:	90 91 39 21 	lds	r25, 0x2139
    1aae:	0e 94 79 24 	call	0x48f2	; 0x48f2 <__floatsisf>
    1ab2:	9b 01       	movw	r18, r22
    1ab4:	ac 01       	movw	r20, r24
    1ab6:	c7 01       	movw	r24, r14
    1ab8:	b6 01       	movw	r22, r12
    1aba:	0e 94 7a 23 	call	0x46f4	; 0x46f4 <__addsf3>
    1abe:	0e 94 4b 24 	call	0x4896	; 0x4896 <__fixunssfsi>
#else
	return t + offset;
#endif
}
    1ac2:	ff 90       	pop	r15
    1ac4:	ef 90       	pop	r14
    1ac6:	df 90       	pop	r13
    1ac8:	cf 90       	pop	r12
    1aca:	08 95       	ret

00001acc <getEstimatedGlobalClock>:

Time getEstimatedGlobalClock(void)
{
    1acc:	cf 92       	push	r12
    1ace:	df 92       	push	r13
    1ad0:	ef 92       	push	r14
    1ad2:	ff 92       	push	r15
#ifdef LINEAR_CORRECTION
	return ((double)getTime()*speedAvg) + offset;
    1ad4:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <getTime>
    1ad8:	0e 94 77 24 	call	0x48ee	; 0x48ee <__floatunsisf>
    1adc:	20 91 40 21 	lds	r18, 0x2140
    1ae0:	30 91 41 21 	lds	r19, 0x2141
    1ae4:	40 91 42 21 	lds	r20, 0x2142
    1ae8:	50 91 43 21 	lds	r21, 0x2143
    1aec:	0e 94 24 25 	call	0x4a48	; 0x4a48 <__mulsf3>
    1af0:	6b 01       	movw	r12, r22
    1af2:	7c 01       	movw	r14, r24
    1af4:	60 91 36 21 	lds	r22, 0x2136
    1af8:	70 91 37 21 	lds	r23, 0x2137
    1afc:	80 91 38 21 	lds	r24, 0x2138
    1b00:	90 91 39 21 	lds	r25, 0x2139
    1b04:	0e 94 79 24 	call	0x48f2	; 0x48f2 <__floatsisf>
    1b08:	9b 01       	movw	r18, r22
    1b0a:	ac 01       	movw	r20, r24
    1b0c:	c7 01       	movw	r24, r14
    1b0e:	b6 01       	movw	r22, r12
    1b10:	0e 94 7a 23 	call	0x46f4	; 0x46f4 <__addsf3>
    1b14:	0e 94 4b 24 	call	0x4896	; 0x4896 <__fixunssfsi>
#else
	return getTime() + offset;
#endif
}
    1b18:	ff 90       	pop	r15
    1b1a:	ef 90       	pop	r14
    1b1c:	df 90       	pop	r13
    1b1e:	cf 90       	pop	r12
    1b20:	08 95       	ret

00001b22 <getClock>:

Time getClock(void) {
    1b22:	cf 93       	push	r28
    1b24:	df 93       	push	r29
    1b26:	00 d0       	rcall	.+0      	; 0x1b28 <getClock+0x6>
    1b28:	1f 92       	push	r1
    1b2a:	cd b7       	in	r28, 0x3d	; 61
    1b2c:	de b7       	in	r29, 0x3e	; 62
	return fmax(getEstimatedGlobalClock(), localClockMaxReach);
    1b2e:	60 91 2e 21 	lds	r22, 0x212E
    1b32:	70 91 2f 21 	lds	r23, 0x212F
    1b36:	80 91 30 21 	lds	r24, 0x2130
    1b3a:	90 91 31 21 	lds	r25, 0x2131
    1b3e:	0e 94 77 24 	call	0x48ee	; 0x48ee <__floatunsisf>
    1b42:	9b 01       	movw	r18, r22
    1b44:	ac 01       	movw	r20, r24
    1b46:	69 83       	std	Y+1, r22	; 0x01
    1b48:	3a 83       	std	Y+2, r19	; 0x02
    1b4a:	4b 83       	std	Y+3, r20	; 0x03
    1b4c:	5c 83       	std	Y+4, r21	; 0x04
    1b4e:	0e 94 66 0d 	call	0x1acc	; 0x1acc <getEstimatedGlobalClock>
    1b52:	0e 94 77 24 	call	0x48ee	; 0x48ee <__floatunsisf>
    1b56:	29 81       	ldd	r18, Y+1	; 0x01
    1b58:	3a 81       	ldd	r19, Y+2	; 0x02
    1b5a:	4b 81       	ldd	r20, Y+3	; 0x03
    1b5c:	5c 81       	ldd	r21, Y+4	; 0x04
    1b5e:	0e 94 b4 24 	call	0x4968	; 0x4968 <fmax>
    1b62:	0e 94 4b 24 	call	0x4896	; 0x4896 <__fixunssfsi>
}
    1b66:	24 96       	adiw	r28, 0x04	; 4
    1b68:	cd bf       	out	0x3d, r28	; 61
    1b6a:	de bf       	out	0x3e, r29	; 62
    1b6c:	df 91       	pop	r29
    1b6e:	cf 91       	pop	r28
    1b70:	08 95       	ret

00001b72 <isTimeLeader>:
#ifdef STATIC_TIME_LEADER
	return (getGUID() == TIME_LEADER_ID);
#elif defined MIN_ID_TIME_LEADER
	return isLeader;
#endif
}
    1b72:	80 91 45 21 	lds	r24, 0x2145
    1b76:	08 95       	ret

00001b78 <isElecting>:
#ifdef MIN_ID_TIME_LEADER
	return electing;
#else
	return 0;
#endif
}
    1b78:	80 91 44 21 	lds	r24, 0x2144
    1b7c:	08 95       	ret

00001b7e <isAClockSyncMessage>:
#endif
	return 0;
}

byte isAClockSyncMessage(Chunk *c)
{	
    1b7e:	fc 01       	movw	r30, r24
	if ((*((MsgHandler*)c->handler) == RES_SYS_HANDLER) && (c->data[0] == CLOCK_SYNC_MSG) && (c->data[1] == CLOCK_INFO))
    1b80:	84 89       	ldd	r24, Z+20	; 0x14
    1b82:	95 89       	ldd	r25, Z+21	; 0x15
    1b84:	89 2b       	or	r24, r25
    1b86:	39 f4       	brne	.+14     	; 0x1b96 <isAClockSyncMessage+0x18>
    1b88:	80 81       	ld	r24, Z
    1b8a:	80 36       	cpi	r24, 0x60	; 96
    1b8c:	21 f4       	brne	.+8      	; 0x1b96 <isAClockSyncMessage+0x18>
    1b8e:	81 e0       	ldi	r24, 0x01	; 1
    1b90:	91 81       	ldd	r25, Z+1	; 0x01
    1b92:	93 30       	cpi	r25, 0x03	; 3
    1b94:	09 f0       	breq	.+2      	; 0x1b98 <isAClockSyncMessage+0x1a>
	{
		return 1;
	}
	return 0;
    1b96:	80 e0       	ldi	r24, 0x00	; 0
}
    1b98:	08 95       	ret

00001b9a <insertReceiveTime>:
/******************************************************
 * Clock (Time) Synchronization Functions
 *****************************************************/

void insertReceiveTime(Chunk *c)
{
    1b9a:	cf 93       	push	r28
    1b9c:	df 93       	push	r29
    1b9e:	ec 01       	movw	r28, r24
	Time t = getTime();
    1ba0:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <getTime>
	
	//PRINT_BBSIM("insert receive time: %u\n", t);
	c->data[RECEIVE_TIME_INDEX+3] = (byte) (t & 0xFF);
    1ba4:	69 87       	std	Y+9, r22	; 0x09
	c->data[RECEIVE_TIME_INDEX+2] = (byte) ((t >>  8) & 0xFF);
    1ba6:	78 87       	std	Y+8, r23	; 0x08
	c->data[RECEIVE_TIME_INDEX+1] = (byte) ((t >> 16) & 0xFF);
    1ba8:	8f 83       	std	Y+7, r24	; 0x07
	c->data[RECEIVE_TIME_INDEX] = (byte) ((t >> 24) & 0xFF);
    1baa:	9e 83       	std	Y+6, r25	; 0x06
}
    1bac:	df 91       	pop	r29
    1bae:	cf 91       	pop	r28
    1bb0:	08 95       	ret

00001bb2 <insertSendTime>:

void insertSendTime(Chunk *c)
{
    1bb2:	cf 93       	push	r28
    1bb4:	df 93       	push	r29
    1bb6:	ec 01       	movw	r28, r24
	Time t = getEstimatedGlobalClock(); // Global Clock
    1bb8:	0e 94 66 0d 	call	0x1acc	; 0x1acc <getEstimatedGlobalClock>
	
	//PRINT_BBSIM("insert send time: %u\n", t);
	c->data[SEND_TIME_INDEX+3] = (byte) (t & 0xFF);
    1bbc:	6d 83       	std	Y+5, r22	; 0x05
	c->data[SEND_TIME_INDEX+2] = (byte) ((t >>  8) & 0xFF);
    1bbe:	7c 83       	std	Y+4, r23	; 0x04
	c->data[SEND_TIME_INDEX+1] = (byte) ((t >> 16) & 0xFF);
    1bc0:	8b 83       	std	Y+3, r24	; 0x03
	c->data[SEND_TIME_INDEX] = (byte) ((t >> 24) & 0xFF);
    1bc2:	9a 83       	std	Y+2, r25	; 0x02
}
    1bc4:	df 91       	pop	r29
    1bc6:	cf 91       	pop	r28
    1bc8:	08 95       	ret

00001bca <isSynchronized>:
	return n;
}

byte isSynchronized(void)
{
	return (isTimeLeader() || (firstCalibRec > 0));
    1bca:	80 91 45 21 	lds	r24, 0x2145
    1bce:	81 11       	cpse	r24, r1
    1bd0:	11 c0       	rjmp	.+34     	; 0x1bf4 <isSynchronized+0x2a>
    1bd2:	81 e0       	ldi	r24, 0x01	; 1
    1bd4:	90 e0       	ldi	r25, 0x00	; 0
    1bd6:	40 91 32 21 	lds	r20, 0x2132
    1bda:	50 91 33 21 	lds	r21, 0x2133
    1bde:	60 91 34 21 	lds	r22, 0x2134
    1be2:	70 91 35 21 	lds	r23, 0x2135
    1be6:	45 2b       	or	r20, r21
    1be8:	46 2b       	or	r20, r22
    1bea:	47 2b       	or	r20, r23
    1bec:	29 f4       	brne	.+10     	; 0x1bf8 <isSynchronized+0x2e>
    1bee:	80 e0       	ldi	r24, 0x00	; 0
    1bf0:	90 e0       	ldi	r25, 0x00	; 0
    1bf2:	08 95       	ret
    1bf4:	81 e0       	ldi	r24, 0x01	; 1
    1bf6:	90 e0       	ldi	r25, 0x00	; 0
	//return (isTimeLeader() || ( (firstCalibRec != 0) && ((getEstimatedLocalClock() - firstCalibRec) < CLOCK_VALIDITY_PERIOD )));
}
    1bf8:	08 95       	ret

00001bfa <initSTChildren>:
{
	byte p;
	
	for (p = 0; p < NUM_PORTS; p++)
	{
		syncChildren[p] = 0;
    1bfa:	10 92 8b 26 	sts	0x268B, r1
    1bfe:	10 92 8c 26 	sts	0x268C, r1
    1c02:	10 92 8d 26 	sts	0x268D, r1
    1c06:	10 92 8e 26 	sts	0x268E, r1
    1c0a:	10 92 8f 26 	sts	0x268F, r1
    1c0e:	10 92 90 26 	sts	0x2690, r1
    1c12:	08 95       	ret

00001c14 <setSlave>:
}

void setSlave(void) {
	//PRINT_BBSIM("block %u: de-elected!\n", getGUID());
#ifdef MIN_ID_TIME_LEADER
	isLeader = 0;
    1c14:	10 92 45 21 	sts	0x2145, r1
#endif
	disableTimer(syncTimer);
    1c18:	10 92 7d 26 	sts	0x267D, r1
	deregisterTimer(&syncTimer);
    1c1c:	8d e6       	ldi	r24, 0x6D	; 109
    1c1e:	96 e2       	ldi	r25, 0x26	; 38
    1c20:	0e 94 94 0a 	call	0x1528	; 0x1528 <deregisterTimer>
	deregisterTimeout(&(syncTimer.t));
    1c24:	8f e6       	ldi	r24, 0x6F	; 111
    1c26:	96 e2       	ldi	r25, 0x26	; 38
    1c28:	0c 94 ef 09 	jmp	0x13de	; 0x13de <deregisterTimeout>

00001c2c <scheduleLeaderElection>:
	return broadcastClockChunk(p, data, 4);
}

void scheduleLeaderElection(void)
{
	if (!electing)
    1c2c:	80 91 44 21 	lds	r24, 0x2144
    1c30:	81 11       	cpse	r24, r1
    1c32:	1c c0       	rjmp	.+56     	; 0x1c6c <scheduleLeaderElection+0x40>
	{
		deregisterTimeout(&leaderElectionTimeOut);
    1c34:	80 e8       	ldi	r24, 0x80	; 128
    1c36:	96 e2       	ldi	r25, 0x26	; 38
    1c38:	0e 94 ef 09 	call	0x13de	; 0x13de <deregisterTimeout>
		leaderElectionTimeOut.calltime = getTime() + LEADER_ELECTION_TIMEOUT;
    1c3c:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <getTime>
    1c40:	6c 50       	subi	r22, 0x0C	; 12
    1c42:	7e 4f       	sbci	r23, 0xFE	; 254
    1c44:	8f 4f       	sbci	r24, 0xFF	; 255
    1c46:	9f 4f       	sbci	r25, 0xFF	; 255
    1c48:	60 93 82 26 	sts	0x2682, r22
    1c4c:	70 93 83 26 	sts	0x2683, r23
    1c50:	80 93 84 26 	sts	0x2684, r24
    1c54:	90 93 85 26 	sts	0x2685, r25
		leaderElectionTimeOut.callback = (GenericHandler)(&startLeaderElection);
    1c58:	8f eb       	ldi	r24, 0xBF	; 191
    1c5a:	9f e0       	ldi	r25, 0x0F	; 15
    1c5c:	80 93 86 26 	sts	0x2686, r24
    1c60:	90 93 87 26 	sts	0x2687, r25
		registerTimeout(&leaderElectionTimeOut);
    1c64:	80 e8       	ldi	r24, 0x80	; 128
    1c66:	96 e2       	ldi	r25, 0x26	; 38
    1c68:	0c 94 a7 09 	jmp	0x134e	; 0x134e <registerTimeout>
    1c6c:	08 95       	ret

00001c6e <handleNeighborChange>:

byte handleNeighborChange(PRef p)
{
	PRINT_BBSIM("Neighbor change at Time %u\n", getTime());
#ifdef MIN_ID_TIME_LEADER
	electing = 0;
    1c6e:	10 92 44 21 	sts	0x2144, r1
	if (!electing)
	{
		scheduleLeaderElection();
    1c72:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <scheduleLeaderElection>
			requestSync(p);
		}
	}
#endif
	return 0;
}
    1c76:	80 e0       	ldi	r24, 0x00	; 0
    1c78:	08 95       	ret

00001c7a <initClock>:
byte sendClockChunk(PRef p, byte *d, byte s);
byte requestSync(PRef p);

void initClock(void)
{
	offset = 0;
    1c7a:	10 92 36 21 	sts	0x2136, r1
    1c7e:	10 92 37 21 	sts	0x2137, r1
    1c82:	10 92 38 21 	sts	0x2138, r1
    1c86:	10 92 39 21 	sts	0x2139, r1
	firstCalibRec = 0;
    1c8a:	10 92 32 21 	sts	0x2132, r1
    1c8e:	10 92 33 21 	sts	0x2133, r1
    1c92:	10 92 34 21 	sts	0x2134, r1
    1c96:	10 92 35 21 	sts	0x2135, r1
	localClockMaxReach = 0;
    1c9a:	10 92 2e 21 	sts	0x212E, r1
    1c9e:	10 92 2f 21 	sts	0x212F, r1
    1ca2:	10 92 30 21 	sts	0x2130, r1
    1ca6:	10 92 31 21 	sts	0x2131, r1

#ifdef LINEAR_CORRECTION
	speedAvg = 1.0;
    1caa:	80 e0       	ldi	r24, 0x00	; 0
    1cac:	90 e0       	ldi	r25, 0x00	; 0
    1cae:	a0 e8       	ldi	r26, 0x80	; 128
    1cb0:	bf e3       	ldi	r27, 0x3F	; 63
    1cb2:	80 93 40 21 	sts	0x2140, r24
    1cb6:	90 93 41 21 	sts	0x2141, r25
    1cba:	a0 93 42 21 	sts	0x2142, r26
    1cbe:	b0 93 43 21 	sts	0x2143, r27
	firstCalibSend = 0;
    1cc2:	10 92 3c 21 	sts	0x213C, r1
    1cc6:	10 92 3d 21 	sts	0x213D, r1
    1cca:	10 92 3e 21 	sts	0x213E, r1
    1cce:	10 92 3f 21 	sts	0x213F, r1
	nbSync = 0;
    1cd2:	10 92 3a 21 	sts	0x213A, r1
    1cd6:	10 92 3b 21 	sts	0x213B, r1

#ifdef WAVE
	lastWaveId = 0;
	syncBy = NUM_PORTS;
#elif defined SPANNING_TREE
	initSTChildren();
    1cda:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <initSTChildren>
#ifdef STATIC_TIME_LEADER
	if (isTimeLeader()) {
		setLeader();
	}
#elif defined MIN_ID_TIME_LEADER
	minIdSender = 255;
    1cde:	8f ef       	ldi	r24, 0xFF	; 255
    1ce0:	80 93 8a 26 	sts	0x268A, r24
	minId = getGUID();
    1ce4:	0e 94 e4 19 	call	0x33c8	; 0x33c8 <getGUID>
    1ce8:	80 93 7e 26 	sts	0x267E, r24
    1cec:	90 93 7f 26 	sts	0x267F, r25
	electing = 0;
    1cf0:	10 92 44 21 	sts	0x2144, r1
	setSlave();
    1cf4:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <setSlave>
	scheduleLeaderElection();
    1cf8:	0c 94 16 0e 	jmp	0x1c2c	; 0x1c2c <scheduleLeaderElection>

00001cfc <sendClockChunk>:
{
	free(thisChunk);
}

byte sendClockChunk(PRef p, byte *d, byte s)
{
    1cfc:	8f 92       	push	r8
    1cfe:	9f 92       	push	r9
    1d00:	bf 92       	push	r11
    1d02:	cf 92       	push	r12
    1d04:	df 92       	push	r13
    1d06:	ef 92       	push	r14
    1d08:	ff 92       	push	r15
    1d0a:	0f 93       	push	r16
    1d0c:	1f 93       	push	r17
    1d0e:	cf 93       	push	r28
    1d10:	df 93       	push	r29
    1d12:	1f 92       	push	r1
    1d14:	cd b7       	in	r28, 0x3d	; 61
    1d16:	de b7       	in	r29, 0x3e	; 62
    1d18:	b8 2e       	mov	r11, r24
    1d1a:	6b 01       	movw	r12, r22
	Chunk *c=calloc(sizeof(Chunk), 1);
    1d1c:	61 e0       	ldi	r22, 0x01	; 1
    1d1e:	70 e0       	ldi	r23, 0x00	; 0
    1d20:	88 e1       	ldi	r24, 0x18	; 24
    1d22:	90 e0       	ldi	r25, 0x00	; 0
    1d24:	49 83       	std	Y+1, r20	; 0x01
    1d26:	0e 94 49 26 	call	0x4c92	; 0x4c92 <calloc>
    1d2a:	4c 01       	movw	r8, r24
	if (c == NULL)
    1d2c:	29 81       	ldd	r18, Y+1	; 0x01
    1d2e:	00 97       	sbiw	r24, 0x00	; 0
    1d30:	81 f0       	breq	.+32     	; 0x1d52 <sendClockChunk+0x56>
	{
		return 0;
	}
	if (sendMessageToPort(c, p, d, s, (MsgHandler)RES_SYS_HANDLER, (GenericHandler)&freeClockChunk) == 0)
    1d32:	86 e3       	ldi	r24, 0x36	; 54
    1d34:	e8 2e       	mov	r14, r24
    1d36:	8d e0       	ldi	r24, 0x0D	; 13
    1d38:	f8 2e       	mov	r15, r24
    1d3a:	00 e0       	ldi	r16, 0x00	; 0
    1d3c:	10 e0       	ldi	r17, 0x00	; 0
    1d3e:	a6 01       	movw	r20, r12
    1d40:	6b 2d       	mov	r22, r11
    1d42:	c4 01       	movw	r24, r8
    1d44:	0e 94 73 08 	call	0x10e6	; 0x10e6 <sendMessageToPort>
    1d48:	81 11       	cpse	r24, r1
    1d4a:	05 c0       	rjmp	.+10     	; 0x1d56 <sendClockChunk+0x5a>
	{
		free(c);
    1d4c:	c4 01       	movw	r24, r8
    1d4e:	0e 94 02 27 	call	0x4e04	; 0x4e04 <free>
byte sendClockChunk(PRef p, byte *d, byte s)
{
	Chunk *c=calloc(sizeof(Chunk), 1);
	if (c == NULL)
	{
		return 0;
    1d52:	80 e0       	ldi	r24, 0x00	; 0
    1d54:	01 c0       	rjmp	.+2      	; 0x1d58 <sendClockChunk+0x5c>
	if (sendMessageToPort(c, p, d, s, (MsgHandler)RES_SYS_HANDLER, (GenericHandler)&freeClockChunk) == 0)
	{
		free(c);
		return 0;
	}
	return 1;
    1d56:	81 e0       	ldi	r24, 0x01	; 1
}
    1d58:	0f 90       	pop	r0
    1d5a:	df 91       	pop	r29
    1d5c:	cf 91       	pop	r28
    1d5e:	1f 91       	pop	r17
    1d60:	0f 91       	pop	r16
    1d62:	ff 90       	pop	r15
    1d64:	ef 90       	pop	r14
    1d66:	df 90       	pop	r13
    1d68:	cf 90       	pop	r12
    1d6a:	bf 90       	pop	r11
    1d6c:	9f 90       	pop	r9
    1d6e:	8f 90       	pop	r8
    1d70:	08 95       	ret

00001d72 <sendGoMsg>:
	
	return sendClockChunk(p, data, 5);
}

byte sendGoMsg(PRef p, uint16_t id)
{
    1d72:	1f 93       	push	r17
    1d74:	cf 93       	push	r28
    1d76:	df 93       	push	r29
    1d78:	00 d0       	rcall	.+0      	; 0x1d7a <sendGoMsg+0x8>
    1d7a:	1f 92       	push	r1
    1d7c:	cd b7       	in	r28, 0x3d	; 61
    1d7e:	de b7       	in	r29, 0x3e	; 62
    1d80:	18 2f       	mov	r17, r24
    1d82:	9b 01       	movw	r18, r22
	byte data[4];
	
	data[0] = CLOCK_SYNC_MSG;
    1d84:	80 e6       	ldi	r24, 0x60	; 96
    1d86:	89 83       	std	Y+1, r24	; 0x01
	data[1] = MIN_ID_TIME_LEADER_ELECTION_GO_MSG;
    1d88:	81 e0       	ldi	r24, 0x01	; 1
    1d8a:	8a 83       	std	Y+2, r24	; 0x02
	GUIDIntoChar(id, &(data[2]));
    1d8c:	be 01       	movw	r22, r28
    1d8e:	6d 5f       	subi	r22, 0xFD	; 253
    1d90:	7f 4f       	sbci	r23, 0xFF	; 255
    1d92:	c9 01       	movw	r24, r18
    1d94:	0e 94 9b 04 	call	0x936	; 0x936 <GUIDIntoChar>
	
	return sendClockChunk(p, data, 4);
    1d98:	44 e0       	ldi	r20, 0x04	; 4
    1d9a:	be 01       	movw	r22, r28
    1d9c:	6f 5f       	subi	r22, 0xFF	; 255
    1d9e:	7f 4f       	sbci	r23, 0xFF	; 255
    1da0:	81 2f       	mov	r24, r17
    1da2:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <sendClockChunk>
}
    1da6:	24 96       	adiw	r28, 0x04	; 4
    1da8:	cd bf       	out	0x3d, r28	; 61
    1daa:	de bf       	out	0x3e, r29	; 62
    1dac:	df 91       	pop	r29
    1dae:	cf 91       	pop	r28
    1db0:	1f 91       	pop	r17
    1db2:	08 95       	ret

00001db4 <sendBackMsg>:
	deregisterTimeout(&(syncTimer.t));
}

#ifdef MIN_ID_TIME_LEADER
byte sendBackMsg(PRef p, byte a)
{
    1db4:	0f 93       	push	r16
    1db6:	1f 93       	push	r17
    1db8:	cf 93       	push	r28
    1dba:	df 93       	push	r29
    1dbc:	cd b7       	in	r28, 0x3d	; 61
    1dbe:	de b7       	in	r29, 0x3e	; 62
    1dc0:	25 97       	sbiw	r28, 0x05	; 5
    1dc2:	cd bf       	out	0x3d, r28	; 61
    1dc4:	de bf       	out	0x3e, r29	; 62
    1dc6:	18 2f       	mov	r17, r24
    1dc8:	06 2f       	mov	r16, r22
	byte data[5];
	
	data[0] = CLOCK_SYNC_MSG;
    1dca:	80 e6       	ldi	r24, 0x60	; 96
    1dcc:	89 83       	std	Y+1, r24	; 0x01
	data[1] = MIN_ID_TIME_LEADER_ELECTION_BACK_MSG;
    1dce:	82 e0       	ldi	r24, 0x02	; 2
    1dd0:	8a 83       	std	Y+2, r24	; 0x02
	GUIDIntoChar(minId, &(data[2]));
    1dd2:	be 01       	movw	r22, r28
    1dd4:	6d 5f       	subi	r22, 0xFD	; 253
    1dd6:	7f 4f       	sbci	r23, 0xFF	; 255
    1dd8:	80 91 7e 26 	lds	r24, 0x267E
    1ddc:	90 91 7f 26 	lds	r25, 0x267F
    1de0:	0e 94 9b 04 	call	0x936	; 0x936 <GUIDIntoChar>
	data[4] = a;
    1de4:	0d 83       	std	Y+5, r16	; 0x05
	
	return sendClockChunk(p, data, 5);
    1de6:	45 e0       	ldi	r20, 0x05	; 5
    1de8:	be 01       	movw	r22, r28
    1dea:	6f 5f       	subi	r22, 0xFF	; 255
    1dec:	7f 4f       	sbci	r23, 0xFF	; 255
    1dee:	81 2f       	mov	r24, r17
    1df0:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <sendClockChunk>
}
    1df4:	25 96       	adiw	r28, 0x05	; 5
    1df6:	cd bf       	out	0x3d, r28	; 61
    1df8:	de bf       	out	0x3e, r29	; 62
    1dfa:	df 91       	pop	r29
    1dfc:	cf 91       	pop	r28
    1dfe:	1f 91       	pop	r17
    1e00:	0f 91       	pop	r16
    1e02:	08 95       	ret

00001e04 <synchronizeNeighbor>:
	//return 1;
	return sendClockChunk(p, data, 2);
}

byte synchronizeNeighbor(PRef p)
{
    1e04:	cf 93       	push	r28
    1e06:	df 93       	push	r29
    1e08:	00 d0       	rcall	.+0      	; 0x1e0a <synchronizeNeighbor+0x6>
    1e0a:	1f 92       	push	r1
    1e0c:	cd b7       	in	r28, 0x3d	; 61
    1e0e:	de b7       	in	r29, 0x3e	; 62
	byte data[4];
	
	data[0] = CLOCK_SYNC_MSG;
    1e10:	90 e6       	ldi	r25, 0x60	; 96
    1e12:	99 83       	std	Y+1, r25	; 0x01
	data[1] = CLOCK_INFO;
    1e14:	93 e0       	ldi	r25, 0x03	; 3
    1e16:	9a 83       	std	Y+2, r25	; 0x02
#ifdef WAVE
	data[WAVE_ID_INDEX+1] = (byte) (lastWaveId & 0xFF);
	data[WAVE_ID_INDEX] = (byte) ((lastWaveId >>  8) & 0xFF);
	return sendClockChunk(p, data, 4);
#elif defined SPANNING_TREE
	return sendClockChunk(p, data, 2);
    1e18:	42 e0       	ldi	r20, 0x02	; 2
    1e1a:	be 01       	movw	r22, r28
    1e1c:	6f 5f       	subi	r22, 0xFF	; 255
    1e1e:	7f 4f       	sbci	r23, 0xFF	; 255
    1e20:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <sendClockChunk>
#endif
}
    1e24:	24 96       	adiw	r28, 0x04	; 4
    1e26:	cd bf       	out	0x3d, r28	; 61
    1e28:	de bf       	out	0x3e, r29	; 62
    1e2a:	df 91       	pop	r29
    1e2c:	cf 91       	pop	r28
    1e2e:	08 95       	ret

00001e30 <synchronizeNeighbors>:

byte synchronizeNeighbors(void)
{
    1e30:	ef 92       	push	r14
    1e32:	ff 92       	push	r15
    1e34:	0f 93       	push	r16
    1e36:	1f 93       	push	r17
    1e38:	cf 93       	push	r28
    1e3a:	df 93       	push	r29
    1e3c:	0b e8       	ldi	r16, 0x8B	; 139
    1e3e:	16 e2       	ldi	r17, 0x26	; 38
    1e40:	c1 e5       	ldi	r28, 0x51	; 81
    1e42:	d1 e2       	ldi	r29, 0x21	; 33
	byte p;
	byte n = 0;
    1e44:	e1 2c       	mov	r14, r1
		}
		synchronizeNeighbor(p);
		n++;
	}
#else
	for( p = 0; p < NUM_PORTS; p++)
    1e46:	f1 2c       	mov	r15, r1
	{
		if ((syncChildren[p] == 0) || (thisNeighborhood.n[p] == VACANT))
    1e48:	f8 01       	movw	r30, r16
    1e4a:	81 91       	ld	r24, Z+
    1e4c:	8f 01       	movw	r16, r30
    1e4e:	88 23       	and	r24, r24
    1e50:	41 f0       	breq	.+16     	; 0x1e62 <synchronizeNeighbors+0x32>
    1e52:	28 81       	ld	r18, Y
    1e54:	39 81       	ldd	r19, Y+1	; 0x01
    1e56:	23 2b       	or	r18, r19
    1e58:	21 f0       	breq	.+8      	; 0x1e62 <synchronizeNeighbors+0x32>
		{
			continue;
		}
		synchronizeNeighbor(p);
    1e5a:	8f 2d       	mov	r24, r15
    1e5c:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <synchronizeNeighbor>
		n++;
    1e60:	e3 94       	inc	r14
		}
		synchronizeNeighbor(p);
		n++;
	}
#else
	for( p = 0; p < NUM_PORTS; p++)
    1e62:	f3 94       	inc	r15
    1e64:	22 96       	adiw	r28, 0x02	; 2
    1e66:	f6 e0       	ldi	r31, 0x06	; 6
    1e68:	ff 12       	cpse	r15, r31
    1e6a:	ee cf       	rjmp	.-36     	; 0x1e48 <synchronizeNeighbors+0x18>
		synchronizeNeighbor(p);
		n++;
	}
#endif
	return n;
}
    1e6c:	8e 2d       	mov	r24, r14
    1e6e:	df 91       	pop	r29
    1e70:	cf 91       	pop	r28
    1e72:	1f 91       	pop	r17
    1e74:	0f 91       	pop	r16
    1e76:	ff 90       	pop	r15
    1e78:	ef 90       	pop	r14
    1e7a:	08 95       	ret

00001e7c <setLeader>:

/******************************************************
 * Time Leader Election Functions
 *****************************************************/

void setLeader(void) {
    1e7c:	cf 93       	push	r28

	PRINT_BBSIM2("block %u: leader!\n", getGUID());
#ifdef MIN_ID_TIME_LEADER
	isLeader = 1;
    1e7e:	c1 e0       	ldi	r28, 0x01	; 1
    1e80:	c0 93 45 21 	sts	0x2145, r28
#endif
	syncTimer.period = SYNC_PERIOD;
    1e84:	88 eb       	ldi	r24, 0xB8	; 184
    1e86:	9b e0       	ldi	r25, 0x0B	; 11
    1e88:	a0 e0       	ldi	r26, 0x00	; 0
    1e8a:	b0 e0       	ldi	r27, 0x00	; 0
    1e8c:	80 93 79 26 	sts	0x2679, r24
    1e90:	90 93 7a 26 	sts	0x267A, r25
    1e94:	a0 93 7b 26 	sts	0x267B, r26
    1e98:	b0 93 7c 26 	sts	0x267C, r27
#ifdef WAVE
	syncTimer.t.callback = (GenericHandler)&launchSynchronizationWave;
	launchSynchronizationWave();
#elif defined SPANNING_TREE
	syncTimer.t.callback = (GenericHandler)&synchronizeNeighbors;
    1e9c:	88 e1       	ldi	r24, 0x18	; 24
    1e9e:	9f e0       	ldi	r25, 0x0F	; 15
    1ea0:	80 93 75 26 	sts	0x2675, r24
    1ea4:	90 93 76 26 	sts	0x2676, r25
	synchronizeNeighbors();
    1ea8:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <synchronizeNeighbors>
#endif
	registerTimer(&(syncTimer));
    1eac:	8d e6       	ldi	r24, 0x6D	; 109
    1eae:	96 e2       	ldi	r25, 0x26	; 38
    1eb0:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <registerTimer>
	enableTimer(syncTimer);
    1eb4:	c0 93 7d 26 	sts	0x267D, r28
}
    1eb8:	cf 91       	pop	r28
    1eba:	08 95       	ret

00001ebc <requestSync>:
	c->data[SEND_TIME_INDEX+1] = (byte) ((t >> 16) & 0xFF);
	c->data[SEND_TIME_INDEX] = (byte) ((t >> 24) & 0xFF);
}

byte requestSync(PRef p)
{
    1ebc:	cf 93       	push	r28
    1ebe:	df 93       	push	r29
    1ec0:	1f 92       	push	r1
    1ec2:	1f 92       	push	r1
    1ec4:	cd b7       	in	r28, 0x3d	; 61
    1ec6:	de b7       	in	r29, 0x3e	; 62
	byte data[2];
	
	data[0] = CLOCK_SYNC_MSG;
    1ec8:	90 e6       	ldi	r25, 0x60	; 96
    1eca:	99 83       	std	Y+1, r25	; 0x01
	data[1] = REQUEST_CLOCK_SYNC;
    1ecc:	94 e0       	ldi	r25, 0x04	; 4
    1ece:	9a 83       	std	Y+2, r25	; 0x02
	
	//return 1;
	return sendClockChunk(p, data, 2);
    1ed0:	42 e0       	ldi	r20, 0x02	; 2
    1ed2:	be 01       	movw	r22, r28
    1ed4:	6f 5f       	subi	r22, 0xFF	; 255
    1ed6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ed8:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <sendClockChunk>
}
    1edc:	0f 90       	pop	r0
    1ede:	0f 90       	pop	r0
    1ee0:	df 91       	pop	r29
    1ee2:	cf 91       	pop	r28
    1ee4:	08 95       	ret

00001ee6 <broadcastClockChunk>:
	}
	return 1;
}

byte broadcastClockChunk(PRef excludedPort, byte *d, byte s)
{
    1ee6:	cf 92       	push	r12
    1ee8:	df 92       	push	r13
    1eea:	ef 92       	push	r14
    1eec:	ff 92       	push	r15
    1eee:	0f 93       	push	r16
    1ef0:	1f 93       	push	r17
    1ef2:	cf 93       	push	r28
    1ef4:	df 93       	push	r29
    1ef6:	d8 2e       	mov	r13, r24
    1ef8:	8b 01       	movw	r16, r22
    1efa:	c4 2e       	mov	r12, r20
    1efc:	c1 e5       	ldi	r28, 0x51	; 81
    1efe:	d1 e2       	ldi	r29, 0x21	; 33
	byte p;
	byte sent = 0;
    1f00:	e1 2c       	mov	r14, r1
	
	for( p = 0; p < NUM_PORTS; p++)
    1f02:	f1 2c       	mov	r15, r1
	{
		if ((p == excludedPort) || (thisNeighborhood.n[p] == VACANT))
    1f04:	fd 14       	cp	r15, r13
    1f06:	59 f0       	breq	.+22     	; 0x1f1e <broadcastClockChunk+0x38>
    1f08:	28 81       	ld	r18, Y
    1f0a:	39 81       	ldd	r19, Y+1	; 0x01
    1f0c:	23 2b       	or	r18, r19
    1f0e:	39 f0       	breq	.+14     	; 0x1f1e <broadcastClockChunk+0x38>
		{
			continue;
		}
		if(sendClockChunk(p, d, s)) {
    1f10:	4c 2d       	mov	r20, r12
    1f12:	b8 01       	movw	r22, r16
    1f14:	8f 2d       	mov	r24, r15
    1f16:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <sendClockChunk>
    1f1a:	81 11       	cpse	r24, r1
			sent++;
    1f1c:	e3 94       	inc	r14
byte broadcastClockChunk(PRef excludedPort, byte *d, byte s)
{
	byte p;
	byte sent = 0;
	
	for( p = 0; p < NUM_PORTS; p++)
    1f1e:	f3 94       	inc	r15
    1f20:	22 96       	adiw	r28, 0x02	; 2
    1f22:	86 e0       	ldi	r24, 0x06	; 6
    1f24:	f8 12       	cpse	r15, r24
    1f26:	ee cf       	rjmp	.-36     	; 0x1f04 <broadcastClockChunk+0x1e>
		if(sendClockChunk(p, d, s)) {
			sent++;
		}
	}
	return sent;
}
    1f28:	8e 2d       	mov	r24, r14
    1f2a:	df 91       	pop	r29
    1f2c:	cf 91       	pop	r28
    1f2e:	1f 91       	pop	r17
    1f30:	0f 91       	pop	r16
    1f32:	ff 90       	pop	r15
    1f34:	ef 90       	pop	r14
    1f36:	df 90       	pop	r13
    1f38:	cf 90       	pop	r12
    1f3a:	08 95       	ret

00001f3c <broadcastGoMsg>:
	
	return sendClockChunk(p, data, 4);
}

byte broadcastGoMsg(PRef p, uint16_t id)
{
    1f3c:	1f 93       	push	r17
    1f3e:	cf 93       	push	r28
    1f40:	df 93       	push	r29
    1f42:	00 d0       	rcall	.+0      	; 0x1f44 <broadcastGoMsg+0x8>
    1f44:	1f 92       	push	r1
    1f46:	cd b7       	in	r28, 0x3d	; 61
    1f48:	de b7       	in	r29, 0x3e	; 62
    1f4a:	18 2f       	mov	r17, r24
    1f4c:	9b 01       	movw	r18, r22
	byte data[4];
	
	data[0] = CLOCK_SYNC_MSG;
    1f4e:	80 e6       	ldi	r24, 0x60	; 96
    1f50:	89 83       	std	Y+1, r24	; 0x01
	data[1] = MIN_ID_TIME_LEADER_ELECTION_GO_MSG;
    1f52:	81 e0       	ldi	r24, 0x01	; 1
    1f54:	8a 83       	std	Y+2, r24	; 0x02
	GUIDIntoChar(id, &(data[2]));
    1f56:	be 01       	movw	r22, r28
    1f58:	6d 5f       	subi	r22, 0xFD	; 253
    1f5a:	7f 4f       	sbci	r23, 0xFF	; 255
    1f5c:	c9 01       	movw	r24, r18
    1f5e:	0e 94 9b 04 	call	0x936	; 0x936 <GUIDIntoChar>
	
	return broadcastClockChunk(p, data, 4);
    1f62:	44 e0       	ldi	r20, 0x04	; 4
    1f64:	be 01       	movw	r22, r28
    1f66:	6f 5f       	subi	r22, 0xFF	; 255
    1f68:	7f 4f       	sbci	r23, 0xFF	; 255
    1f6a:	81 2f       	mov	r24, r17
    1f6c:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <broadcastClockChunk>
}
    1f70:	24 96       	adiw	r28, 0x04	; 4
    1f72:	cd bf       	out	0x3d, r28	; 61
    1f74:	de bf       	out	0x3e, r29	; 62
    1f76:	df 91       	pop	r29
    1f78:	cf 91       	pop	r28
    1f7a:	1f 91       	pop	r17
    1f7c:	08 95       	ret

00001f7e <startLeaderElection>:
		//printf("too late!\n");
	}
}

void startLeaderElection(void)
{
    1f7e:	cf 93       	push	r28
    1f80:	df 93       	push	r29
	//static int i = 0;
	//i++;
	//printf("block %u: start election function at %u\n", getGUID(), getTime());
	//printf("%d election\n", i);
	if (!electing) {
    1f82:	80 91 44 21 	lds	r24, 0x2144
    1f86:	81 11       	cpse	r24, r1
    1f88:	30 c0       	rjmp	.+96     	; 0x1fea <startLeaderElection+0x6c>
	//	printf("block %u: start - election\n", getGUID()); 
		setSlave();
    1f8a:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <setSlave>
		minId = getGUID();
    1f8e:	0e 94 e4 19 	call	0x33c8	; 0x33c8 <getGUID>
    1f92:	80 93 7e 26 	sts	0x267E, r24
    1f96:	90 93 7f 26 	sts	0x267F, r25
		minIdSender = 255;
    1f9a:	8f ef       	ldi	r24, 0xFF	; 255
    1f9c:	80 93 8a 26 	sts	0x268A, r24
		electing = 1;
    1fa0:	81 e0       	ldi	r24, 0x01	; 1
    1fa2:	80 93 44 21 	sts	0x2144, r24
		initSTChildren();
    1fa6:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <initSTChildren>
		nbNeededAnswers = broadcastGoMsg(255, getGUID());
    1faa:	0e 94 e4 19 	call	0x33c8	; 0x33c8 <getGUID>
    1fae:	bc 01       	movw	r22, r24
    1fb0:	8f ef       	ldi	r24, 0xFF	; 255
    1fb2:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <broadcastGoMsg>
    1fb6:	80 93 6c 26 	sts	0x266C, r24
		if (nbNeededAnswers == 0) 
    1fba:	81 11       	cpse	r24, r1
    1fbc:	16 c0       	rjmp	.+44     	; 0x1fea <startLeaderElection+0x6c>
		{
			electing = 0;
    1fbe:	10 92 44 21 	sts	0x2144, r1
			if (minId == getGUID())
    1fc2:	c0 91 7e 26 	lds	r28, 0x267E
    1fc6:	d0 91 7f 26 	lds	r29, 0x267F
    1fca:	0e 94 e4 19 	call	0x33c8	; 0x33c8 <getGUID>
    1fce:	c8 17       	cp	r28, r24
    1fd0:	d9 07       	cpc	r29, r25
    1fd2:	21 f4       	brne	.+8      	; 0x1fdc <startLeaderElection+0x5e>
			{
				sendBackMsg(minIdSender, 1);
			}
		}
	}
}
    1fd4:	df 91       	pop	r29
    1fd6:	cf 91       	pop	r28
		{
			electing = 0;
			if (minId == getGUID())
			{
				//printf("block %u: direct win\n", getGUID());
				setLeader();
    1fd8:	0c 94 3e 0f 	jmp	0x1e7c	; 0x1e7c <setLeader>
			}
			else 
			{
				sendBackMsg(minIdSender, 1);
    1fdc:	61 e0       	ldi	r22, 0x01	; 1
    1fde:	80 91 8a 26 	lds	r24, 0x268A
			}
		}
	}
}
    1fe2:	df 91       	pop	r29
    1fe4:	cf 91       	pop	r28
				//printf("block %u: direct win\n", getGUID());
				setLeader();
			}
			else 
			{
				sendBackMsg(minIdSender, 1);
    1fe6:	0c 94 da 0e 	jmp	0x1db4	; 0x1db4 <sendBackMsg>
			}
		}
	}
}
    1fea:	df 91       	pop	r29
    1fec:	cf 91       	pop	r28
    1fee:	08 95       	ret

00001ff0 <handleClockSyncMessage>:
	return 0;
#endif
}

byte handleClockSyncMessage(void)
{
    1ff0:	2f 92       	push	r2
    1ff2:	3f 92       	push	r3
    1ff4:	4f 92       	push	r4
    1ff6:	5f 92       	push	r5
    1ff8:	6f 92       	push	r6
    1ffa:	7f 92       	push	r7
    1ffc:	8f 92       	push	r8
    1ffe:	9f 92       	push	r9
    2000:	af 92       	push	r10
    2002:	bf 92       	push	r11
    2004:	cf 92       	push	r12
    2006:	df 92       	push	r13
    2008:	ef 92       	push	r14
    200a:	ff 92       	push	r15
    200c:	0f 93       	push	r16
    200e:	1f 93       	push	r17
    2010:	cf 93       	push	r28
    2012:	df 93       	push	r29
    2014:	cd b7       	in	r28, 0x3d	; 61
    2016:	de b7       	in	r29, 0x3e	; 62
    2018:	ce 59       	subi	r28, 0x9E	; 158
    201a:	d1 09       	sbc	r29, r1
    201c:	cd bf       	out	0x3d, r28	; 61
    201e:	de bf       	out	0x3e, r29	; 62
	if (thisChunk == NULL) 
    2020:	00 91 4f 21 	lds	r16, 0x214F
    2024:	10 91 50 21 	lds	r17, 0x2150
    2028:	01 15       	cp	r16, r1
    202a:	11 05       	cpc	r17, r1
    202c:	09 f4       	brne	.+2      	; 0x2030 <handleClockSyncMessage+0x40>
    202e:	f3 c1       	rjmp	.+998    	; 0x2416 <handleClockSyncMessage+0x426>
	{
		return 0;
	}
    
	switch(thisChunk->data[1])
    2030:	f8 01       	movw	r30, r16
    2032:	81 81       	ldd	r24, Z+1	; 0x01
    2034:	82 30       	cpi	r24, 0x02	; 2
    2036:	09 f4       	brne	.+2      	; 0x203a <handleClockSyncMessage+0x4a>
    2038:	c0 c1       	rjmp	.+896    	; 0x23ba <handleClockSyncMessage+0x3ca>
    203a:	20 f4       	brcc	.+8      	; 0x2044 <handleClockSyncMessage+0x54>
    203c:	81 30       	cpi	r24, 0x01	; 1
    203e:	09 f0       	breq	.+2      	; 0x2042 <handleClockSyncMessage+0x52>
    2040:	ec c1       	rjmp	.+984    	; 0x241a <handleClockSyncMessage+0x42a>
    2042:	63 c1       	rjmp	.+710    	; 0x230a <handleClockSyncMessage+0x31a>
    2044:	83 30       	cpi	r24, 0x03	; 3
    2046:	21 f0       	breq	.+8      	; 0x2050 <handleClockSyncMessage+0x60>
    2048:	84 30       	cpi	r24, 0x04	; 4
    204a:	09 f0       	breq	.+2      	; 0x204e <handleClockSyncMessage+0x5e>
    204c:	e6 c1       	rjmp	.+972    	; 0x241a <handleClockSyncMessage+0x42a>
    204e:	52 c1       	rjmp	.+676    	; 0x22f4 <handleClockSyncMessage+0x304>
			}
			lastWaveId = waveId;
			syncBy = faceNum(thisChunk);
#endif		
			
			sendTime  = (Time)(thisChunk->data[SEND_TIME_INDEX+3]) & 0xFF;
    2050:	f8 01       	movw	r30, r16
    2052:	c5 80       	ldd	r12, Z+5	; 0x05
			sendTime |= ((Time)(thisChunk->data[SEND_TIME_INDEX+2]) << 8) & 0xFF00;
			sendTime |= ((Time)(thisChunk->data[SEND_TIME_INDEX+1]) << 16) & 0xFF0000;
			sendTime |= ((Time)(thisChunk->data[SEND_TIME_INDEX]) << 24)  & 0xFF000000;
    2054:	82 81       	ldd	r24, Z+2	; 0x02
    2056:	d1 2c       	mov	r13, r1
    2058:	e1 2c       	mov	r14, r1
    205a:	f1 2c       	mov	r15, r1
			lastWaveId = waveId;
			syncBy = faceNum(thisChunk);
#endif		
			
			sendTime  = (Time)(thisChunk->data[SEND_TIME_INDEX+3]) & 0xFF;
			sendTime |= ((Time)(thisChunk->data[SEND_TIME_INDEX+2]) << 8) & 0xFF00;
    205c:	f8 2a       	or	r15, r24
    205e:	84 81       	ldd	r24, Z+4	; 0x04
			sendTime |= ((Time)(thisChunk->data[SEND_TIME_INDEX+1]) << 16) & 0xFF0000;
    2060:	d8 2a       	or	r13, r24
    2062:	83 81       	ldd	r24, Z+3	; 0x03
			sendTime |= ((Time)(thisChunk->data[SEND_TIME_INDEX]) << 24)  & 0xFF000000;
    2064:	e8 2a       	or	r14, r24
	
			receiveTime  = (Time)(thisChunk->data[RECEIVE_TIME_INDEX+3]) & 0xFF;
    2066:	81 84       	ldd	r8, Z+9	; 0x09
			receiveTime |= ((Time)(thisChunk->data[RECEIVE_TIME_INDEX+2]) << 8) & 0xFF00;
			receiveTime |= ((Time)(thisChunk->data[RECEIVE_TIME_INDEX+1]) << 16) & 0xFF0000;
			receiveTime |= ((Time)(thisChunk->data[RECEIVE_TIME_INDEX]) << 24)  & 0xFF000000;
    2068:	86 81       	ldd	r24, Z+6	; 0x06
    206a:	91 2c       	mov	r9, r1
    206c:	a1 2c       	mov	r10, r1
    206e:	b1 2c       	mov	r11, r1
			sendTime |= ((Time)(thisChunk->data[SEND_TIME_INDEX+2]) << 8) & 0xFF00;
			sendTime |= ((Time)(thisChunk->data[SEND_TIME_INDEX+1]) << 16) & 0xFF0000;
			sendTime |= ((Time)(thisChunk->data[SEND_TIME_INDEX]) << 24)  & 0xFF000000;
	
			receiveTime  = (Time)(thisChunk->data[RECEIVE_TIME_INDEX+3]) & 0xFF;
			receiveTime |= ((Time)(thisChunk->data[RECEIVE_TIME_INDEX+2]) << 8) & 0xFF00;
    2070:	b8 2a       	or	r11, r24
    2072:	80 85       	ldd	r24, Z+8	; 0x08
			receiveTime |= ((Time)(thisChunk->data[RECEIVE_TIME_INDEX+1]) << 16) & 0xFF0000;
    2074:	98 2a       	or	r9, r24
    2076:	87 81       	ldd	r24, Z+7	; 0x07
			receiveTime |= ((Time)(thisChunk->data[RECEIVE_TIME_INDEX]) << 24)  & 0xFF000000;
    2078:	a8 2a       	or	r10, r24
			
			localClockMaxReach = fmax(getClock(), localClockMaxReach);
    207a:	60 91 2e 21 	lds	r22, 0x212E
    207e:	70 91 2f 21 	lds	r23, 0x212F
    2082:	80 91 30 21 	lds	r24, 0x2130
    2086:	90 91 31 21 	lds	r25, 0x2131
    208a:	0e 94 77 24 	call	0x48ee	; 0x48ee <__floatunsisf>
    208e:	9b 01       	movw	r18, r22
    2090:	ac 01       	movw	r20, r24
    2092:	c5 56       	subi	r28, 0x65	; 101
    2094:	df 4f       	sbci	r29, 0xFF	; 255
    2096:	68 83       	st	Y, r22
    2098:	cb 59       	subi	r28, 0x9B	; 155
    209a:	d0 40       	sbci	r29, 0x00	; 0
    209c:	c4 56       	subi	r28, 0x64	; 100
    209e:	df 4f       	sbci	r29, 0xFF	; 255
    20a0:	38 83       	st	Y, r19
    20a2:	cc 59       	subi	r28, 0x9C	; 156
    20a4:	d0 40       	sbci	r29, 0x00	; 0
    20a6:	c3 56       	subi	r28, 0x63	; 99
    20a8:	df 4f       	sbci	r29, 0xFF	; 255
    20aa:	48 83       	st	Y, r20
    20ac:	cd 59       	subi	r28, 0x9D	; 157
    20ae:	d0 40       	sbci	r29, 0x00	; 0
    20b0:	c2 56       	subi	r28, 0x62	; 98
    20b2:	df 4f       	sbci	r29, 0xFF	; 255
    20b4:	58 83       	st	Y, r21
    20b6:	ce 59       	subi	r28, 0x9E	; 158
    20b8:	d0 40       	sbci	r29, 0x00	; 0
    20ba:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <getClock>
    20be:	0e 94 77 24 	call	0x48ee	; 0x48ee <__floatunsisf>
    20c2:	c5 56       	subi	r28, 0x65	; 101
    20c4:	df 4f       	sbci	r29, 0xFF	; 255
    20c6:	28 81       	ld	r18, Y
    20c8:	cb 59       	subi	r28, 0x9B	; 155
    20ca:	d0 40       	sbci	r29, 0x00	; 0
    20cc:	c4 56       	subi	r28, 0x64	; 100
    20ce:	df 4f       	sbci	r29, 0xFF	; 255
    20d0:	38 81       	ld	r19, Y
    20d2:	cc 59       	subi	r28, 0x9C	; 156
    20d4:	d0 40       	sbci	r29, 0x00	; 0
    20d6:	c3 56       	subi	r28, 0x63	; 99
    20d8:	df 4f       	sbci	r29, 0xFF	; 255
    20da:	48 81       	ld	r20, Y
    20dc:	cd 59       	subi	r28, 0x9D	; 157
    20de:	d0 40       	sbci	r29, 0x00	; 0
    20e0:	c2 56       	subi	r28, 0x62	; 98
    20e2:	df 4f       	sbci	r29, 0xFF	; 255
    20e4:	58 81       	ld	r21, Y
    20e6:	ce 59       	subi	r28, 0x9E	; 158
    20e8:	d0 40       	sbci	r29, 0x00	; 0
    20ea:	0e 94 b4 24 	call	0x4968	; 0x4968 <fmax>
    20ee:	0e 94 4b 24 	call	0x4896	; 0x4896 <__fixunssfsi>
    20f2:	60 93 2e 21 	sts	0x212E, r22
    20f6:	70 93 2f 21 	sts	0x212F, r23
    20fa:	80 93 30 21 	sts	0x2130, r24
    20fe:	90 93 31 21 	sts	0x2131, r25
			estimatedGlobalTime = sendTime + ESTIMATED_TRANSMISSION_DELAY;
    2102:	f6 e0       	ldi	r31, 0x06	; 6
    2104:	cf 0e       	add	r12, r31
    2106:	d1 1c       	adc	r13, r1
    2108:	e1 1c       	adc	r14, r1
    210a:	f1 1c       	adc	r15, r1

#ifdef LOG_DEBUG
			char s[150];
			snprintf(s, 150*sizeof(char), "s: %lu, r: %lu, c: %lu, sp: %f", estimatedGlobalTime, receiveTime, getClockForTime(receiveTime), speedAvg);
    210c:	10 91 40 21 	lds	r17, 0x2140
    2110:	00 91 41 21 	lds	r16, 0x2141
    2114:	70 90 42 21 	lds	r7, 0x2142
    2118:	60 90 43 21 	lds	r6, 0x2143
    211c:	c5 01       	movw	r24, r10
    211e:	b4 01       	movw	r22, r8
    2120:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <getClockForTime>
    2124:	6f 92       	push	r6
    2126:	7f 92       	push	r7
    2128:	0f 93       	push	r16
    212a:	1f 93       	push	r17
    212c:	9f 93       	push	r25
    212e:	8f 93       	push	r24
    2130:	7f 93       	push	r23
    2132:	6f 93       	push	r22
    2134:	bf 92       	push	r11
    2136:	af 92       	push	r10
    2138:	9f 92       	push	r9
    213a:	8f 92       	push	r8
    213c:	ff 92       	push	r15
    213e:	ef 92       	push	r14
    2140:	df 92       	push	r13
    2142:	cf 92       	push	r12
    2144:	8b ef       	ldi	r24, 0xFB	; 251
    2146:	90 e2       	ldi	r25, 0x20	; 32
    2148:	9f 93       	push	r25
    214a:	8f 93       	push	r24
    214c:	1f 92       	push	r1
    214e:	86 e9       	ldi	r24, 0x96	; 150
    2150:	8f 93       	push	r24
    2152:	8e 01       	movw	r16, r28
    2154:	0f 5f       	subi	r16, 0xFF	; 255
    2156:	1f 4f       	sbci	r17, 0xFF	; 255
    2158:	1f 93       	push	r17
    215a:	0f 93       	push	r16
    215c:	0e 94 4d 29 	call	0x529a	; 0x529a <snprintf>
			s[149] = '\0';
    2160:	ca 56       	subi	r28, 0x6A	; 106
    2162:	df 4f       	sbci	r29, 0xFF	; 255
    2164:	18 82       	st	Y, r1
    2166:	c6 59       	subi	r28, 0x96	; 150
    2168:	d0 40       	sbci	r29, 0x00	; 0
			printDebug(s);
    216a:	c8 01       	movw	r24, r16
    216c:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <printDebug>

#ifdef LINEAR_CORRECTION
	#ifdef TEST_LINEAR_CORRECTION
		if(nbSync < IGNORE_AFTER) {
	#endif
			nbSync++;
    2170:	80 91 3a 21 	lds	r24, 0x213A
    2174:	90 91 3b 21 	lds	r25, 0x213B
    2178:	01 96       	adiw	r24, 0x01	; 1
    217a:	80 93 3a 21 	sts	0x213A, r24
    217e:	90 93 3b 21 	sts	0x213B, r25
			if ((nbSync == 1) || ( (getTime() - firstCalibRec) < (SYNC_PERIOD/2))) {
    2182:	cd bf       	out	0x3d, r28	; 61
    2184:	de bf       	out	0x3e, r29	; 62
    2186:	01 97       	sbiw	r24, 0x01	; 1
    2188:	79 f4       	brne	.+30     	; 0x21a8 <handleClockSyncMessage+0x1b8>
				offset = estimatedGlobalTime - receiveTime;
    218a:	d7 01       	movw	r26, r14
    218c:	c6 01       	movw	r24, r12
    218e:	88 19       	sub	r24, r8
    2190:	99 09       	sbc	r25, r9
    2192:	aa 09       	sbc	r26, r10
    2194:	bb 09       	sbc	r27, r11
    2196:	80 93 36 21 	sts	0x2136, r24
    219a:	90 93 37 21 	sts	0x2137, r25
    219e:	a0 93 38 21 	sts	0x2138, r26
    21a2:	b0 93 39 21 	sts	0x2139, r27
    21a6:	93 c0       	rjmp	.+294    	; 0x22ce <handleClockSyncMessage+0x2de>
#ifdef LINEAR_CORRECTION
	#ifdef TEST_LINEAR_CORRECTION
		if(nbSync < IGNORE_AFTER) {
	#endif
			nbSync++;
			if ((nbSync == 1) || ( (getTime() - firstCalibRec) < (SYNC_PERIOD/2))) {
    21a8:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <getTime>
    21ac:	40 90 32 21 	lds	r4, 0x2132
    21b0:	50 90 33 21 	lds	r5, 0x2133
    21b4:	60 90 34 21 	lds	r6, 0x2134
    21b8:	70 90 35 21 	lds	r7, 0x2135
    21bc:	64 19       	sub	r22, r4
    21be:	75 09       	sbc	r23, r5
    21c0:	86 09       	sbc	r24, r6
    21c2:	97 09       	sbc	r25, r7
    21c4:	6c 3d       	cpi	r22, 0xDC	; 220
    21c6:	75 40       	sbci	r23, 0x05	; 5
    21c8:	81 05       	cpc	r24, r1
    21ca:	91 05       	cpc	r25, r1
    21cc:	f0 f2       	brcs	.-68     	; 0x218a <handleClockSyncMessage+0x19a>
				firstCalibSend = estimatedGlobalTime;
				firstCalibRec = receiveTime;
			} else {
				//double n = (double) nbSync;
				//speedAvg = (speedAvg*(n-1) + observedSpeed) / n;
				speedAvg = ((double) (estimatedGlobalTime - firstCalibSend))/ ((double) (receiveTime - firstCalibRec));
    21ce:	80 91 3c 21 	lds	r24, 0x213C
    21d2:	90 91 3d 21 	lds	r25, 0x213D
    21d6:	a0 91 3e 21 	lds	r26, 0x213E
    21da:	b0 91 3f 21 	lds	r27, 0x213F
    21de:	a7 01       	movw	r20, r14
    21e0:	96 01       	movw	r18, r12
    21e2:	28 1b       	sub	r18, r24
    21e4:	39 0b       	sbc	r19, r25
    21e6:	4a 0b       	sbc	r20, r26
    21e8:	5b 0b       	sbc	r21, r27
    21ea:	ca 01       	movw	r24, r20
    21ec:	b9 01       	movw	r22, r18
    21ee:	0e 94 77 24 	call	0x48ee	; 0x48ee <__floatunsisf>
    21f2:	c9 56       	subi	r28, 0x69	; 105
    21f4:	df 4f       	sbci	r29, 0xFF	; 255
    21f6:	68 83       	st	Y, r22
    21f8:	79 83       	std	Y+1, r23	; 0x01
    21fa:	8a 83       	std	Y+2, r24	; 0x02
    21fc:	9b 83       	std	Y+3, r25	; 0x03
    21fe:	c7 59       	subi	r28, 0x97	; 151
    2200:	d0 40       	sbci	r29, 0x00	; 0
    2202:	c5 01       	movw	r24, r10
    2204:	b4 01       	movw	r22, r8
    2206:	64 19       	sub	r22, r4
    2208:	75 09       	sbc	r23, r5
    220a:	86 09       	sbc	r24, r6
    220c:	97 09       	sbc	r25, r7
    220e:	0e 94 77 24 	call	0x48ee	; 0x48ee <__floatunsisf>
    2212:	9b 01       	movw	r18, r22
    2214:	ac 01       	movw	r20, r24
    2216:	c9 56       	subi	r28, 0x69	; 105
    2218:	df 4f       	sbci	r29, 0xFF	; 255
    221a:	68 81       	ld	r22, Y
    221c:	79 81       	ldd	r23, Y+1	; 0x01
    221e:	8a 81       	ldd	r24, Y+2	; 0x02
    2220:	9b 81       	ldd	r25, Y+3	; 0x03
    2222:	c7 59       	subi	r28, 0x97	; 151
    2224:	d0 40       	sbci	r29, 0x00	; 0
    2226:	0e 94 de 23 	call	0x47bc	; 0x47bc <__divsf3>
    222a:	16 2f       	mov	r17, r22
    222c:	07 2f       	mov	r16, r23
    222e:	38 2e       	mov	r3, r24
    2230:	29 2e       	mov	r2, r25
    2232:	a8 01       	movw	r20, r16
    2234:	91 01       	movw	r18, r2
    2236:	85 2f       	mov	r24, r21
    2238:	94 2f       	mov	r25, r20
    223a:	a3 2f       	mov	r26, r19
    223c:	b2 2f       	mov	r27, r18
    223e:	80 93 40 21 	sts	0x2140, r24
    2242:	90 93 41 21 	sts	0x2141, r25
    2246:	a0 93 42 21 	sts	0x2142, r26
    224a:	b0 93 43 21 	sts	0x2143, r27
				offset = round(estimatedGlobalTime - (speedAvg*((double)getTime())));
    224e:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <getTime>
    2252:	c9 56       	subi	r28, 0x69	; 105
    2254:	df 4f       	sbci	r29, 0xFF	; 255
    2256:	68 83       	st	Y, r22
    2258:	79 83       	std	Y+1, r23	; 0x01
    225a:	8a 83       	std	Y+2, r24	; 0x02
    225c:	9b 83       	std	Y+3, r25	; 0x03
    225e:	c7 59       	subi	r28, 0x97	; 151
    2260:	d0 40       	sbci	r29, 0x00	; 0
    2262:	c7 01       	movw	r24, r14
    2264:	b6 01       	movw	r22, r12
    2266:	0e 94 77 24 	call	0x48ee	; 0x48ee <__floatunsisf>
    226a:	2b 01       	movw	r4, r22
    226c:	3c 01       	movw	r6, r24
    226e:	c9 56       	subi	r28, 0x69	; 105
    2270:	df 4f       	sbci	r29, 0xFF	; 255
    2272:	68 81       	ld	r22, Y
    2274:	79 81       	ldd	r23, Y+1	; 0x01
    2276:	8a 81       	ldd	r24, Y+2	; 0x02
    2278:	9b 81       	ldd	r25, Y+3	; 0x03
    227a:	c7 59       	subi	r28, 0x97	; 151
    227c:	d0 40       	sbci	r29, 0x00	; 0
    227e:	0e 94 77 24 	call	0x48ee	; 0x48ee <__floatunsisf>
    2282:	9b 01       	movw	r18, r22
    2284:	ac 01       	movw	r20, r24
    2286:	d8 01       	movw	r26, r16
    2288:	f1 01       	movw	r30, r2
    228a:	6b 2f       	mov	r22, r27
    228c:	7a 2f       	mov	r23, r26
    228e:	8f 2f       	mov	r24, r31
    2290:	9e 2f       	mov	r25, r30
    2292:	0e 94 24 25 	call	0x4a48	; 0x4a48 <__mulsf3>
    2296:	9b 01       	movw	r18, r22
    2298:	ac 01       	movw	r20, r24
    229a:	c3 01       	movw	r24, r6
    229c:	b2 01       	movw	r22, r4
    229e:	0e 94 79 23 	call	0x46f2	; 0x46f2 <__subsf3>
    22a2:	0e 94 87 25 	call	0x4b0e	; 0x4b0e <round>
    22a6:	0e 94 46 24 	call	0x488c	; 0x488c <__fixsfsi>
    22aa:	60 93 36 21 	sts	0x2136, r22
    22ae:	70 93 37 21 	sts	0x2137, r23
    22b2:	80 93 38 21 	sts	0x2138, r24
    22b6:	90 93 39 21 	sts	0x2139, r25
				#ifdef RESET_SLOPE_AFTER
				if ((nbSync % RESET_SLOPE_AFTER) == 0 ) 
    22ba:	80 91 3a 21 	lds	r24, 0x213A
    22be:	90 91 3b 21 	lds	r25, 0x213B
    22c2:	65 e0       	ldi	r22, 0x05	; 5
    22c4:	70 e0       	ldi	r23, 0x00	; 0
    22c6:	0e 94 e7 25 	call	0x4bce	; 0x4bce <__udivmodhi4>
    22ca:	89 2b       	or	r24, r25
    22cc:	81 f4       	brne	.+32     	; 0x22ee <handleClockSyncMessage+0x2fe>
				{
					firstCalibSend = estimatedGlobalTime;
    22ce:	c0 92 3c 21 	sts	0x213C, r12
    22d2:	d0 92 3d 21 	sts	0x213D, r13
    22d6:	e0 92 3e 21 	sts	0x213E, r14
    22da:	f0 92 3f 21 	sts	0x213F, r15
					firstCalibRec = receiveTime;
    22de:	80 92 32 21 	sts	0x2132, r8
    22e2:	90 92 33 21 	sts	0x2133, r9
    22e6:	a0 92 34 21 	sts	0x2134, r10
    22ea:	b0 92 35 21 	sts	0x2135, r11
			char s[150];
			snprintf(s, 150*sizeof(char), "s: %lu, r: %lu, o: %d, t: %lu, c: %lu", sendTime, receiveTime, offset, getTime(), getClock());
			s[149] = '\0';
			printDebug(s);
#endif*/
			synchronizeNeighbors();
    22ee:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <synchronizeNeighbors>
    22f2:	93 c0       	rjmp	.+294    	; 0x241a <handleClockSyncMessage+0x42a>
			break;
		}
		
		case REQUEST_CLOCK_SYNC :
		{	PRINT_BBSIM("block %u: sync request from %u\n", getGUID(), thisNeighborhood.n[faceNum(thisChunk)]);
			if(isSynchronized())
    22f4:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <isSynchronized>
    22f8:	81 11       	cpse	r24, r1
    22fa:	01 c0       	rjmp	.+2      	; 0x22fe <handleClockSyncMessage+0x30e>
    22fc:	8e c0       	rjmp	.+284    	; 0x241a <handleClockSyncMessage+0x42a>
			{
				synchronizeNeighbor(faceNum(thisChunk));
    22fe:	f8 01       	movw	r30, r16
    2300:	81 89       	ldd	r24, Z+17	; 0x11
    2302:	87 70       	andi	r24, 0x07	; 7
    2304:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <synchronizeNeighbor>
    2308:	88 c0       	rjmp	.+272    	; 0x241a <handleClockSyncMessage+0x42a>
			break;
		}
#ifdef MIN_ID_TIME_LEADER
		case MIN_ID_TIME_LEADER_ELECTION_GO_MSG :
		{
			uint16_t id = charToGUID(&(thisChunk->data[2]));
    230a:	c8 01       	movw	r24, r16
    230c:	02 96       	adiw	r24, 0x02	; 2
    230e:	0e 94 9f 04 	call	0x93e	; 0x93e <charToGUID>
    2312:	8c 01       	movw	r16, r24
			
			if (!electing)
    2314:	80 91 44 21 	lds	r24, 0x2144
    2318:	81 11       	cpse	r24, r1
    231a:	06 c0       	rjmp	.+12     	; 0x2328 <handleClockSyncMessage+0x338>
			{
				PRINT_BBSIM("block %u: go msg - election\n", getGUID()); 
				deregisterTimeout(&leaderElectionTimeOut);
    231c:	80 e8       	ldi	r24, 0x80	; 128
    231e:	96 e2       	ldi	r25, 0x26	; 38
    2320:	0e 94 ef 09 	call	0x13de	; 0x13de <deregisterTimeout>
				startLeaderElection();
    2324:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <startLeaderElection>
			}
			
			if (id == minId)
    2328:	80 91 7e 26 	lds	r24, 0x267E
    232c:	90 91 7f 26 	lds	r25, 0x267F
    2330:	08 17       	cp	r16, r24
    2332:	19 07       	cpc	r17, r25
    2334:	49 f4       	brne	.+18     	; 0x2348 <handleClockSyncMessage+0x358>
			{
				sendBackMsg(faceNum(thisChunk), 0);
    2336:	e0 91 4f 21 	lds	r30, 0x214F
    233a:	f0 91 50 21 	lds	r31, 0x2150
    233e:	81 89       	ldd	r24, Z+17	; 0x11
    2340:	60 e0       	ldi	r22, 0x00	; 0
    2342:	87 70       	andi	r24, 0x07	; 7
    2344:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <sendBackMsg>
			}
			if (id < minId)
    2348:	80 91 7e 26 	lds	r24, 0x267E
    234c:	90 91 7f 26 	lds	r25, 0x267F
    2350:	08 17       	cp	r16, r24
    2352:	19 07       	cpc	r17, r25
    2354:	08 f0       	brcs	.+2      	; 0x2358 <handleClockSyncMessage+0x368>
    2356:	61 c0       	rjmp	.+194    	; 0x241a <handleClockSyncMessage+0x42a>
			{
				minId = id;
    2358:	00 93 7e 26 	sts	0x267E, r16
    235c:	10 93 7f 26 	sts	0x267F, r17
				minIdSender = faceNum(thisChunk);
    2360:	e0 91 4f 21 	lds	r30, 0x214F
    2364:	f0 91 50 21 	lds	r31, 0x2150
    2368:	81 89       	ldd	r24, Z+17	; 0x11
    236a:	87 70       	andi	r24, 0x07	; 7
    236c:	80 93 8a 26 	sts	0x268A, r24
				initSTChildren();
    2370:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <initSTChildren>
				nbNeededAnswers = broadcastGoMsg(faceNum(thisChunk), id);
    2374:	e0 91 4f 21 	lds	r30, 0x214F
    2378:	f0 91 50 21 	lds	r31, 0x2150
    237c:	81 89       	ldd	r24, Z+17	; 0x11
    237e:	b8 01       	movw	r22, r16
    2380:	87 70       	andi	r24, 0x07	; 7
    2382:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <broadcastGoMsg>
    2386:	80 93 6c 26 	sts	0x266C, r24
				
				if (nbNeededAnswers == 0) 
    238a:	81 11       	cpse	r24, r1
    238c:	46 c0       	rjmp	.+140    	; 0x241a <handleClockSyncMessage+0x42a>
				{
					electing = 0;
    238e:	10 92 44 21 	sts	0x2144, r1
					if (minId == getGUID())
    2392:	00 91 7e 26 	lds	r16, 0x267E
    2396:	10 91 7f 26 	lds	r17, 0x267F
    239a:	0e 94 e4 19 	call	0x33c8	; 0x33c8 <getGUID>
    239e:	08 17       	cp	r16, r24
    23a0:	19 07       	cpc	r17, r25
    23a2:	19 f4       	brne	.+6      	; 0x23aa <handleClockSyncMessage+0x3ba>
					{
						setLeader();
    23a4:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <setLeader>
    23a8:	38 c0       	rjmp	.+112    	; 0x241a <handleClockSyncMessage+0x42a>
					}
					else 
					{
						sendBackMsg(faceNum(thisChunk), 1);
    23aa:	e0 91 4f 21 	lds	r30, 0x214F
    23ae:	f0 91 50 21 	lds	r31, 0x2150
    23b2:	81 89       	ldd	r24, Z+17	; 0x11
    23b4:	61 e0       	ldi	r22, 0x01	; 1
    23b6:	87 70       	andi	r24, 0x07	; 7
    23b8:	2b c0       	rjmp	.+86     	; 0x2410 <handleClockSyncMessage+0x420>
			}
			break;
		}
		case MIN_ID_TIME_LEADER_ELECTION_BACK_MSG :
		{
			uint16_t id = charToGUID(&(thisChunk->data[2]));
    23ba:	c8 01       	movw	r24, r16
    23bc:	02 96       	adiw	r24, 0x02	; 2
    23be:	0e 94 9f 04 	call	0x93e	; 0x93e <charToGUID>
    23c2:	8c 01       	movw	r16, r24
			
			if (id == minId)
    23c4:	80 91 7e 26 	lds	r24, 0x267E
    23c8:	90 91 7f 26 	lds	r25, 0x267F
    23cc:	08 17       	cp	r16, r24
    23ce:	19 07       	cpc	r17, r25
    23d0:	21 f5       	brne	.+72     	; 0x241a <handleClockSyncMessage+0x42a>
			{
				nbNeededAnswers--;
    23d2:	80 91 6c 26 	lds	r24, 0x266C
    23d6:	81 50       	subi	r24, 0x01	; 1
    23d8:	80 93 6c 26 	sts	0x266C, r24
				syncChildren[faceNum(thisChunk)] = thisChunk->data[4];
    23dc:	a0 91 4f 21 	lds	r26, 0x214F
    23e0:	b0 91 50 21 	lds	r27, 0x2150
    23e4:	51 96       	adiw	r26, 0x11	; 17
    23e6:	ec 91       	ld	r30, X
    23e8:	51 97       	sbiw	r26, 0x11	; 17
    23ea:	e7 70       	andi	r30, 0x07	; 7
    23ec:	f0 e0       	ldi	r31, 0x00	; 0
    23ee:	e5 57       	subi	r30, 0x75	; 117
    23f0:	f9 4d       	sbci	r31, 0xD9	; 217
    23f2:	14 96       	adiw	r26, 0x04	; 4
    23f4:	9c 91       	ld	r25, X
    23f6:	90 83       	st	Z, r25
				if (nbNeededAnswers == 0)
    23f8:	81 11       	cpse	r24, r1
    23fa:	0f c0       	rjmp	.+30     	; 0x241a <handleClockSyncMessage+0x42a>
				{
					electing = 0;
    23fc:	10 92 44 21 	sts	0x2144, r1
					if (id == getGUID())
    2400:	0e 94 e4 19 	call	0x33c8	; 0x33c8 <getGUID>
    2404:	08 17       	cp	r16, r24
    2406:	19 07       	cpc	r17, r25
    2408:	69 f2       	breq	.-102    	; 0x23a4 <handleClockSyncMessage+0x3b4>
					{
						setLeader();
					}
					else
					{
						sendBackMsg(minIdSender, 1);
    240a:	61 e0       	ldi	r22, 0x01	; 1
    240c:	80 91 8a 26 	lds	r24, 0x268A
    2410:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <sendBackMsg>
    2414:	02 c0       	rjmp	.+4      	; 0x241a <handleClockSyncMessage+0x42a>

byte handleClockSyncMessage(void)
{
	if (thisChunk == NULL) 
	{
		return 0;
    2416:	80 e0       	ldi	r24, 0x00	; 0
    2418:	01 c0       	rjmp	.+2      	; 0x241c <handleClockSyncMessage+0x42c>
			}
			break;
		}
#endif
	}
	return 1;
    241a:	81 e0       	ldi	r24, 0x01	; 1
}
    241c:	c2 56       	subi	r28, 0x62	; 98
    241e:	df 4f       	sbci	r29, 0xFF	; 255
    2420:	cd bf       	out	0x3d, r28	; 61
    2422:	de bf       	out	0x3e, r29	; 62
    2424:	df 91       	pop	r29
    2426:	cf 91       	pop	r28
    2428:	1f 91       	pop	r17
    242a:	0f 91       	pop	r16
    242c:	ff 90       	pop	r15
    242e:	ef 90       	pop	r14
    2430:	df 90       	pop	r13
    2432:	cf 90       	pop	r12
    2434:	bf 90       	pop	r11
    2436:	af 90       	pop	r10
    2438:	9f 90       	pop	r9
    243a:	8f 90       	pop	r8
    243c:	7f 90       	pop	r7
    243e:	6f 90       	pop	r6
    2440:	5f 90       	pop	r5
    2442:	4f 90       	pop	r4
    2444:	3f 90       	pop	r3
    2446:	2f 90       	pop	r2
    2448:	08 95       	ret

0000244a <EEPROM_WaitForNVM>:
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    244a:	80 91 cf 01 	lds	r24, 0x01CF
    244e:	87 fd       	sbrc	r24, 7
    2450:	fc cf       	rjmp	.-8      	; 0x244a <EEPROM_WaitForNVM>
}
    2452:	08 95       	ret

00002454 <EEPROM_ReadByte>:
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGESIZE.
 *
 *  \return  Byte value read from EEPROM.
 */
uint8_t EEPROM_ReadByte( uint8_t pageAddr, uint8_t byteAddr )
{
    2454:	cf 93       	push	r28
    2456:	df 93       	push	r29
    2458:	1f 92       	push	r1
    245a:	1f 92       	push	r1
    245c:	cd b7       	in	r28, 0x3d	; 61
    245e:	de b7       	in	r29, 0x3e	; 62
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();
    2460:	6a 83       	std	Y+2, r22	; 0x02
    2462:	89 83       	std	Y+1, r24	; 0x01
    2464:	0e 94 25 12 	call	0x244a	; 0x244a <EEPROM_WaitForNVM>

	/* Calculate address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE)
	                            |(byteAddr & (EEPROM_PAGESIZE-1));
    2468:	6a 81       	ldd	r22, Y+2	; 0x02
    246a:	6f 71       	andi	r22, 0x1F	; 31
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE)
    246c:	89 81       	ldd	r24, Y+1	; 0x01
    246e:	20 e2       	ldi	r18, 0x20	; 32
    2470:	82 9f       	mul	r24, r18
    2472:	c0 01       	movw	r24, r0
    2474:	11 24       	eor	r1, r1
    2476:	86 2b       	or	r24, r22
	                            |(byteAddr & (EEPROM_PAGESIZE-1));

	/* Set address to read from. */
	NVM.ADDR0 = address & 0xFF;
    2478:	e0 ec       	ldi	r30, 0xC0	; 192
    247a:	f1 e0       	ldi	r31, 0x01	; 1
    247c:	80 83       	st	Z, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    247e:	91 83       	std	Z+1, r25	; 0x01
	NVM.ADDR2 = 0x00;
    2480:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Read command. */
	NVM.CMD = NVM_CMD_READ_EEPROM_gc;
    2482:	86 e0       	ldi	r24, 0x06	; 6
    2484:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    2486:	ef 93       	push	r30
    2488:	ff 93       	push	r31
    248a:	0f 93       	push	r16
    248c:	2f 93       	push	r18
    248e:	eb ec       	ldi	r30, 0xCB	; 203
    2490:	f1 e0       	ldi	r31, 0x01	; 1
    2492:	08 ed       	ldi	r16, 0xD8	; 216
    2494:	21 e0       	ldi	r18, 0x01	; 1
    2496:	04 bf       	out	0x34, r16	; 52
    2498:	20 83       	st	Z, r18
    249a:	2f 91       	pop	r18
    249c:	0f 91       	pop	r16
    249e:	ff 91       	pop	r31
    24a0:	ef 91       	pop	r30

	return NVM.DATA0;
    24a2:	84 81       	ldd	r24, Z+4	; 0x04
}
    24a4:	0f 90       	pop	r0
    24a6:	0f 90       	pop	r0
    24a8:	df 91       	pop	r29
    24aa:	cf 91       	pop	r28
    24ac:	08 95       	ret

000024ae <EEPROM_FlushBuffer>:
 *  \note The EEPROM write operations will automatically flush the buffer for you.
 */
void EEPROM_FlushBuffer( void )
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();
    24ae:	0e 94 25 12 	call	0x244a	; 0x244a <EEPROM_WaitForNVM>

	/* Flush EEPROM page buffer if necessary. */
	if ((NVM.STATUS & NVM_EELOAD_bm) != 0) {
    24b2:	80 91 cf 01 	lds	r24, 0x01CF
    24b6:	81 ff       	sbrs	r24, 1
    24b8:	11 c0       	rjmp	.+34     	; 0x24dc <EEPROM_FlushBuffer+0x2e>
		NVM.CMD = NVM_CMD_ERASE_EEPROM_BUFFER_gc;
    24ba:	86 e3       	ldi	r24, 0x36	; 54
    24bc:	80 93 ca 01 	sts	0x01CA, r24
		NVM_EXEC();
    24c0:	ef 93       	push	r30
    24c2:	ff 93       	push	r31
    24c4:	0f 93       	push	r16
    24c6:	2f 93       	push	r18
    24c8:	eb ec       	ldi	r30, 0xCB	; 203
    24ca:	f1 e0       	ldi	r31, 0x01	; 1
    24cc:	08 ed       	ldi	r16, 0xD8	; 216
    24ce:	21 e0       	ldi	r18, 0x01	; 1
    24d0:	04 bf       	out	0x34, r16	; 52
    24d2:	20 83       	st	Z, r18
    24d4:	2f 91       	pop	r18
    24d6:	0f 91       	pop	r16
    24d8:	ff 91       	pop	r31
    24da:	ef 91       	pop	r30
    24dc:	08 95       	ret

000024de <EEPROM_WriteByte>:
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGESIZE.
 *  \param  value     Byte value to write to EEPROM.
 */
void EEPROM_WriteByte( uint8_t pageAddr, uint8_t byteAddr, uint8_t value )
{
    24de:	cf 93       	push	r28
    24e0:	df 93       	push	r29
    24e2:	00 d0       	rcall	.+0      	; 0x24e4 <EEPROM_WriteByte+0x6>
    24e4:	cd b7       	in	r28, 0x3d	; 61
    24e6:	de b7       	in	r29, 0x3e	; 62
	/*  Flush buffer to make sure no unintetional data is written and load
	 *  the "Page Load" command into the command register.
	 */
	EEPROM_FlushBuffer();
    24e8:	4b 83       	std	Y+3, r20	; 0x03
    24ea:	6a 83       	std	Y+2, r22	; 0x02
    24ec:	89 83       	std	Y+1, r24	; 0x01
    24ee:	0e 94 57 12 	call	0x24ae	; 0x24ae <EEPROM_FlushBuffer>
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    24f2:	e0 ec       	ldi	r30, 0xC0	; 192
    24f4:	f1 e0       	ldi	r31, 0x01	; 1
    24f6:	93 e3       	ldi	r25, 0x33	; 51
    24f8:	92 87       	std	Z+10, r25	; 0x0a

	/* Calculate address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE)
	                            |(byteAddr & (EEPROM_PAGESIZE-1));
    24fa:	6a 81       	ldd	r22, Y+2	; 0x02
    24fc:	6f 71       	andi	r22, 0x1F	; 31
	 */
	EEPROM_FlushBuffer();
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;

	/* Calculate address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE)
    24fe:	89 81       	ldd	r24, Y+1	; 0x01
    2500:	20 e2       	ldi	r18, 0x20	; 32
    2502:	82 9f       	mul	r24, r18
    2504:	c0 01       	movw	r24, r0
    2506:	11 24       	eor	r1, r1
    2508:	86 2b       	or	r24, r22
	                            |(byteAddr & (EEPROM_PAGESIZE-1));

	/* Set address to write to. */
	NVM.ADDR0 = address & 0xFF;
    250a:	80 83       	st	Z, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    250c:	91 83       	std	Z+1, r25	; 0x01
	NVM.ADDR2 = 0x00;
    250e:	12 82       	std	Z+2, r1	; 0x02

	/* Load data to write, which triggers the loading of EEPROM page buffer. */
	NVM.DATA0 = value;
    2510:	4b 81       	ldd	r20, Y+3	; 0x03
    2512:	44 83       	std	Z+4, r20	; 0x04

	/*  Issue EEPROM Atomic Write (Erase&Write) command. Load command, write
	 *  the protection signature and execute command.
	 */
	NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
    2514:	85 e3       	ldi	r24, 0x35	; 53
    2516:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    2518:	ef 93       	push	r30
    251a:	ff 93       	push	r31
    251c:	0f 93       	push	r16
    251e:	2f 93       	push	r18
    2520:	eb ec       	ldi	r30, 0xCB	; 203
    2522:	f1 e0       	ldi	r31, 0x01	; 1
    2524:	08 ed       	ldi	r16, 0xD8	; 216
    2526:	21 e0       	ldi	r18, 0x01	; 1
    2528:	04 bf       	out	0x34, r16	; 52
    252a:	20 83       	st	Z, r18
    252c:	2f 91       	pop	r18
    252e:	0f 91       	pop	r16
    2530:	ff 91       	pop	r31
    2532:	ef 91       	pop	r30
}
    2534:	23 96       	adiw	r28, 0x03	; 3
    2536:	cd bf       	out	0x3d, r28	; 61
    2538:	de bf       	out	0x3e, r29	; 62
    253a:	df 91       	pop	r29
    253c:	cf 91       	pop	r28
    253e:	08 95       	ret

00002540 <EEPROM_LoadByte>:
 *
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGESIZE.
 *  \param  value     Byte value to write to buffer.
 */
void EEPROM_LoadByte( uint8_t byteAddr, uint8_t value )
{
    2540:	cf 93       	push	r28
    2542:	df 93       	push	r29
    2544:	1f 92       	push	r1
    2546:	1f 92       	push	r1
    2548:	cd b7       	in	r28, 0x3d	; 61
    254a:	de b7       	in	r29, 0x3e	; 62
	/* Wait until NVM is not busy and prepare NVM command.*/
	EEPROM_WaitForNVM();
    254c:	6a 83       	std	Y+2, r22	; 0x02
    254e:	89 83       	std	Y+1, r24	; 0x01
    2550:	0e 94 25 12 	call	0x244a	; 0x244a <EEPROM_WaitForNVM>
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    2554:	e0 ec       	ldi	r30, 0xC0	; 192
    2556:	f1 e0       	ldi	r31, 0x01	; 1
    2558:	93 e3       	ldi	r25, 0x33	; 51
    255a:	92 87       	std	Z+10, r25	; 0x0a

	/* Set address. */
	NVM.ADDR0 = byteAddr & 0xFF;
    255c:	89 81       	ldd	r24, Y+1	; 0x01
    255e:	80 83       	st	Z, r24
	NVM.ADDR1 = 0x00;
    2560:	11 82       	std	Z+1, r1	; 0x01
	NVM.ADDR2 = 0x00;
    2562:	12 82       	std	Z+2, r1	; 0x02

	/* Set data, which triggers loading of EEPROM page buffer. */
	NVM.DATA0 = value;
    2564:	6a 81       	ldd	r22, Y+2	; 0x02
    2566:	64 83       	std	Z+4, r22	; 0x04
}
    2568:	0f 90       	pop	r0
    256a:	0f 90       	pop	r0
    256c:	df 91       	pop	r29
    256e:	cf 91       	pop	r28
    2570:	08 95       	ret

00002572 <EEPROM_LoadPage>:
 *        EEPROM write page operation.
 *
 *  \param  values   Pointer to SRAM buffer containing an entire page.
 */
void EEPROM_LoadPage( const uint8_t * values )
{
    2572:	cf 93       	push	r28
    2574:	df 93       	push	r29
    2576:	ec 01       	movw	r28, r24
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();
    2578:	0e 94 25 12 	call	0x244a	; 0x244a <EEPROM_WaitForNVM>
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    257c:	83 e3       	ldi	r24, 0x33	; 51
    257e:	80 93 ca 01 	sts	0x01CA, r24

	/*  Set address to zero, as only the lower bits matters. ADDR0 is
	 *  maintained inside the loop below.
	 */
	NVM.ADDR1 = 0x00;
    2582:	10 92 c1 01 	sts	0x01C1, r1
	NVM.ADDR2 = 0x00;
    2586:	10 92 c2 01 	sts	0x01C2, r1

	/* Load multible bytes into page buffer. */
	for (uint8_t i = 0; i < EEPROM_PAGESIZE; ++i) {
    258a:	80 e0       	ldi	r24, 0x00	; 0
		NVM.ADDR0 = i;
    258c:	80 93 c0 01 	sts	0x01C0, r24
		NVM.DATA0 = *values;
    2590:	99 91       	ld	r25, Y+
    2592:	90 93 c4 01 	sts	0x01C4, r25
	 */
	NVM.ADDR1 = 0x00;
	NVM.ADDR2 = 0x00;

	/* Load multible bytes into page buffer. */
	for (uint8_t i = 0; i < EEPROM_PAGESIZE; ++i) {
    2596:	8f 5f       	subi	r24, 0xFF	; 255
    2598:	80 32       	cpi	r24, 0x20	; 32
    259a:	c1 f7       	brne	.-16     	; 0x258c <EEPROM_LoadPage+0x1a>
		NVM.ADDR0 = i;
		NVM.DATA0 = *values;
		++values;
	}
}
    259c:	df 91       	pop	r29
    259e:	cf 91       	pop	r28
    25a0:	08 95       	ret

000025a2 <EEPROM_LoadPartialPage>:
 *  \param  values   Pointer to SRAM buffer containing an entire page.
 *			offset   Offset address to begin from (0-EEPROM_PAGESIZE)
 *			length	 Number of values to write into EEPROM
 */
void EEPROM_LoadPartialPage(const uint8_t * values, uint8_t offset, uint8_t length)
{
    25a2:	0f 93       	push	r16
    25a4:	1f 93       	push	r17
    25a6:	cf 93       	push	r28
    25a8:	df 93       	push	r29
    25aa:	1f 92       	push	r1
    25ac:	1f 92       	push	r1
    25ae:	cd b7       	in	r28, 0x3d	; 61
    25b0:	de b7       	in	r29, 0x3e	; 62
    25b2:	8c 01       	movw	r16, r24
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();
    25b4:	4a 83       	std	Y+2, r20	; 0x02
    25b6:	69 83       	std	Y+1, r22	; 0x01
    25b8:	0e 94 25 12 	call	0x244a	; 0x244a <EEPROM_WaitForNVM>
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    25bc:	83 e3       	ldi	r24, 0x33	; 51
    25be:	80 93 ca 01 	sts	0x01CA, r24

	/*  Set address to zero, as only the lower bits matters. ADDR0 is
	 *  maintained inside the loop below.
	 */
	NVM.ADDR1 = 0x00;
    25c2:	10 92 c1 01 	sts	0x01C1, r1
	NVM.ADDR2 = 0x00;
    25c6:	10 92 c2 01 	sts	0x01C2, r1
 *
 *  \param  values   Pointer to SRAM buffer containing an entire page.
 *			offset   Offset address to begin from (0-EEPROM_PAGESIZE)
 *			length	 Number of values to write into EEPROM
 */
void EEPROM_LoadPartialPage(const uint8_t * values, uint8_t offset, uint8_t length)
    25ca:	4a 81       	ldd	r20, Y+2	; 0x02
    25cc:	69 81       	ldd	r22, Y+1	; 0x01
    25ce:	46 0f       	add	r20, r22
	 */
	NVM.ADDR1 = 0x00;
	NVM.ADDR2 = 0x00;

	/* Load multible bytes into page buffer. */
	for (uint8_t i = offset; length != 0 && i < EEPROM_PAGESIZE; ++i,--length) {
    25d0:	08 c0       	rjmp	.+16     	; 0x25e2 <EEPROM_LoadPartialPage+0x40>
		NVM.ADDR0 = i;
    25d2:	60 93 c0 01 	sts	0x01C0, r22
		NVM.DATA0 = *values;
    25d6:	f8 01       	movw	r30, r16
    25d8:	81 91       	ld	r24, Z+
    25da:	8f 01       	movw	r16, r30
    25dc:	80 93 c4 01 	sts	0x01C4, r24
	 */
	NVM.ADDR1 = 0x00;
	NVM.ADDR2 = 0x00;

	/* Load multible bytes into page buffer. */
	for (uint8_t i = offset; length != 0 && i < EEPROM_PAGESIZE; ++i,--length) {
    25e0:	6f 5f       	subi	r22, 0xFF	; 255
    25e2:	64 17       	cp	r22, r20
    25e4:	11 f0       	breq	.+4      	; 0x25ea <EEPROM_LoadPartialPage+0x48>
    25e6:	60 32       	cpi	r22, 0x20	; 32
    25e8:	a0 f3       	brcs	.-24     	; 0x25d2 <EEPROM_LoadPartialPage+0x30>
		NVM.ADDR0 = i;
		NVM.DATA0 = *values;
		++values;
	}
}
    25ea:	0f 90       	pop	r0
    25ec:	0f 90       	pop	r0
    25ee:	df 91       	pop	r29
    25f0:	cf 91       	pop	r28
    25f2:	1f 91       	pop	r17
    25f4:	0f 91       	pop	r16
    25f6:	08 95       	ret

000025f8 <EEPROM_AtomicWritePage>:
 *  locations that have not been loaded will be left untouched in EEPROM.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 */
void EEPROM_AtomicWritePage( uint8_t pageAddr )
{
    25f8:	cf 93       	push	r28
    25fa:	df 93       	push	r29
    25fc:	1f 92       	push	r1
    25fe:	cd b7       	in	r28, 0x3d	; 61
    2600:	de b7       	in	r29, 0x3e	; 62
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();
    2602:	89 83       	std	Y+1, r24	; 0x01
    2604:	0e 94 25 12 	call	0x244a	; 0x244a <EEPROM_WaitForNVM>

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE);
    2608:	89 81       	ldd	r24, Y+1	; 0x01
    260a:	20 e2       	ldi	r18, 0x20	; 32
    260c:	82 9f       	mul	r24, r18
    260e:	c0 01       	movw	r24, r0
    2610:	11 24       	eor	r1, r1

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    2612:	e0 ec       	ldi	r30, 0xC0	; 192
    2614:	f1 e0       	ldi	r31, 0x01	; 1
    2616:	80 83       	st	Z, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    2618:	91 83       	std	Z+1, r25	; 0x01
	NVM.ADDR2 = 0x00;
    261a:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Atomic Write (Erase&Write) command. */
	NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
    261c:	85 e3       	ldi	r24, 0x35	; 53
    261e:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    2620:	ef 93       	push	r30
    2622:	ff 93       	push	r31
    2624:	0f 93       	push	r16
    2626:	2f 93       	push	r18
    2628:	eb ec       	ldi	r30, 0xCB	; 203
    262a:	f1 e0       	ldi	r31, 0x01	; 1
    262c:	08 ed       	ldi	r16, 0xD8	; 216
    262e:	21 e0       	ldi	r18, 0x01	; 1
    2630:	04 bf       	out	0x34, r16	; 52
    2632:	20 83       	st	Z, r18
    2634:	2f 91       	pop	r18
    2636:	0f 91       	pop	r16
    2638:	ff 91       	pop	r31
    263a:	ef 91       	pop	r30
}
    263c:	0f 90       	pop	r0
    263e:	df 91       	pop	r29
    2640:	cf 91       	pop	r28
    2642:	08 95       	ret

00002644 <EEPROM_ErasePage>:
 *  This function erases one EEPROM page, so that every location reads 0xFF.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 */
void EEPROM_ErasePage( uint8_t pageAddr )
{
    2644:	cf 93       	push	r28
    2646:	df 93       	push	r29
    2648:	1f 92       	push	r1
    264a:	cd b7       	in	r28, 0x3d	; 61
    264c:	de b7       	in	r29, 0x3e	; 62
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();
    264e:	89 83       	std	Y+1, r24	; 0x01
    2650:	0e 94 25 12 	call	0x244a	; 0x244a <EEPROM_WaitForNVM>

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE);
    2654:	89 81       	ldd	r24, Y+1	; 0x01
    2656:	20 e2       	ldi	r18, 0x20	; 32
    2658:	82 9f       	mul	r24, r18
    265a:	c0 01       	movw	r24, r0
    265c:	11 24       	eor	r1, r1

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    265e:	e0 ec       	ldi	r30, 0xC0	; 192
    2660:	f1 e0       	ldi	r31, 0x01	; 1
    2662:	80 83       	st	Z, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    2664:	91 83       	std	Z+1, r25	; 0x01
	NVM.ADDR2 = 0x00;
    2666:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Erase command. */
	NVM.CMD = NVM_CMD_ERASE_EEPROM_PAGE_gc;
    2668:	82 e3       	ldi	r24, 0x32	; 50
    266a:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    266c:	ef 93       	push	r30
    266e:	ff 93       	push	r31
    2670:	0f 93       	push	r16
    2672:	2f 93       	push	r18
    2674:	eb ec       	ldi	r30, 0xCB	; 203
    2676:	f1 e0       	ldi	r31, 0x01	; 1
    2678:	08 ed       	ldi	r16, 0xD8	; 216
    267a:	21 e0       	ldi	r18, 0x01	; 1
    267c:	04 bf       	out	0x34, r16	; 52
    267e:	20 83       	st	Z, r18
    2680:	2f 91       	pop	r18
    2682:	0f 91       	pop	r16
    2684:	ff 91       	pop	r31
    2686:	ef 91       	pop	r30
}
    2688:	0f 90       	pop	r0
    268a:	df 91       	pop	r29
    268c:	cf 91       	pop	r28
    268e:	08 95       	ret

00002690 <EEPROM_SplitWritePage>:
 *  before writing.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 */
void EEPROM_SplitWritePage( uint8_t pageAddr )
{
    2690:	cf 93       	push	r28
    2692:	df 93       	push	r29
    2694:	1f 92       	push	r1
    2696:	cd b7       	in	r28, 0x3d	; 61
    2698:	de b7       	in	r29, 0x3e	; 62
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();
    269a:	89 83       	std	Y+1, r24	; 0x01
    269c:	0e 94 25 12 	call	0x244a	; 0x244a <EEPROM_WaitForNVM>

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE);
    26a0:	89 81       	ldd	r24, Y+1	; 0x01
    26a2:	20 e2       	ldi	r18, 0x20	; 32
    26a4:	82 9f       	mul	r24, r18
    26a6:	c0 01       	movw	r24, r0
    26a8:	11 24       	eor	r1, r1

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    26aa:	e0 ec       	ldi	r30, 0xC0	; 192
    26ac:	f1 e0       	ldi	r31, 0x01	; 1
    26ae:	80 83       	st	Z, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    26b0:	91 83       	std	Z+1, r25	; 0x01
	NVM.ADDR2 = 0x00;
    26b2:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Split Write command. */
	NVM.CMD = NVM_CMD_WRITE_EEPROM_PAGE_gc;
    26b4:	84 e3       	ldi	r24, 0x34	; 52
    26b6:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    26b8:	ef 93       	push	r30
    26ba:	ff 93       	push	r31
    26bc:	0f 93       	push	r16
    26be:	2f 93       	push	r18
    26c0:	eb ec       	ldi	r30, 0xCB	; 203
    26c2:	f1 e0       	ldi	r31, 0x01	; 1
    26c4:	08 ed       	ldi	r16, 0xD8	; 216
    26c6:	21 e0       	ldi	r18, 0x01	; 1
    26c8:	04 bf       	out	0x34, r16	; 52
    26ca:	20 83       	st	Z, r18
    26cc:	2f 91       	pop	r18
    26ce:	0f 91       	pop	r16
    26d0:	ff 91       	pop	r31
    26d2:	ef 91       	pop	r30
}
    26d4:	0f 90       	pop	r0
    26d6:	df 91       	pop	r29
    26d8:	cf 91       	pop	r28
    26da:	08 95       	ret

000026dc <EEPROM_EraseAll>:
 *  This function erases the entire EEPROM memory block to 0xFF.
 */
void EEPROM_EraseAll( void )
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();
    26dc:	0e 94 25 12 	call	0x244a	; 0x244a <EEPROM_WaitForNVM>

	/* Issue EEPROM Erase All command. */
	NVM.CMD = NVM_CMD_ERASE_EEPROM_gc;
    26e0:	80 e3       	ldi	r24, 0x30	; 48
    26e2:	e0 ec       	ldi	r30, 0xC0	; 192
    26e4:	f1 e0       	ldi	r31, 0x01	; 1
    26e6:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    26e8:	ef 93       	push	r30
    26ea:	ff 93       	push	r31
    26ec:	0f 93       	push	r16
    26ee:	2f 93       	push	r18
    26f0:	eb ec       	ldi	r30, 0xCB	; 203
    26f2:	f1 e0       	ldi	r31, 0x01	; 1
    26f4:	08 ed       	ldi	r16, 0xD8	; 216
    26f6:	21 e0       	ldi	r18, 0x01	; 1
    26f8:	04 bf       	out	0x34, r16	; 52
    26fa:	20 83       	st	Z, r18
    26fc:	2f 91       	pop	r18
    26fe:	0f 91       	pop	r16
    2700:	ff 91       	pop	r31
    2702:	ef 91       	pop	r30
    2704:	08 95       	ret

00002706 <spiTxRx>:
#include "ext_memory.h"
#include <avr/io.h>

uint8_t spiTxRx(uint8_t input)
{
	SPIE.DATA = input;
    2706:	80 93 c3 0a 	sts	0x0AC3, r24
	
	while(!(SPIE.STATUS & SPI_IF_bm));
    270a:	80 91 c2 0a 	lds	r24, 0x0AC2
    270e:	87 ff       	sbrs	r24, 7
    2710:	fc cf       	rjmp	.-8      	; 0x270a <spiTxRx+0x4>
	
	return SPIE.DATA;
    2712:	80 91 c3 0a 	lds	r24, 0x0AC3
	
}
    2716:	08 95       	ret

00002718 <setSS>:

void setSS(int which, int level)
{
	if(which == SRAM)
    2718:	01 97       	sbiw	r24, 0x01	; 1
    271a:	49 f4       	brne	.+18     	; 0x272e <setSS+0x16>
	{
		if(level)
		{
			PORTF.OUTSET = PIN4_bm;
    271c:	80 e1       	ldi	r24, 0x10	; 16

void setSS(int which, int level)
{
	if(which == SRAM)
	{
		if(level)
    271e:	67 2b       	or	r22, r23
    2720:	19 f0       	breq	.+6      	; 0x2728 <setSS+0x10>
		{
			PORTF.OUTSET = PIN4_bm;
    2722:	80 93 a5 06 	sts	0x06A5, r24
    2726:	08 95       	ret
		}
		else
		{
			PORTF.OUTCLR = PIN4_bm;	
    2728:	80 93 a6 06 	sts	0x06A6, r24
    272c:	08 95       	ret
	}
	else
	{
		if(level)
		{
			PORTE.OUTSET = PIN4_bm;
    272e:	80 e1       	ldi	r24, 0x10	; 16
			PORTF.OUTCLR = PIN4_bm;	
		}
	}
	else
	{
		if(level)
    2730:	67 2b       	or	r22, r23
    2732:	19 f0       	breq	.+6      	; 0x273a <setSS+0x22>
		{
			PORTE.OUTSET = PIN4_bm;
    2734:	80 93 85 06 	sts	0x0685, r24
    2738:	08 95       	ret
		}
		else
		{
			PORTE.OUTCLR = PIN4_bm;	
    273a:	80 93 86 06 	sts	0x0686, r24
    273e:	08 95       	ret

00002740 <readExtMem>:
	
	}
}

int readExtMem(int which, int start, char * buf, int length)
{
    2740:	ef 92       	push	r14
    2742:	ff 92       	push	r15
    2744:	0f 93       	push	r16
    2746:	1f 93       	push	r17
    2748:	cf 93       	push	r28
    274a:	df 93       	push	r29
    274c:	eb 01       	movw	r28, r22
    274e:	8a 01       	movw	r16, r20
    2750:	79 01       	movw	r14, r18
	if(which == SRAM)
    2752:	01 97       	sbiw	r24, 0x01	; 1
    2754:	f1 f4       	brne	.+60     	; 0x2792 <readExtMem+0x52>
		{
			PORTF.OUTSET = PIN4_bm;
		}
		else
		{
			PORTF.OUTCLR = PIN4_bm;	
    2756:	80 e1       	ldi	r24, 0x10	; 16
    2758:	80 93 a6 06 	sts	0x06A6, r24
	{
		int i;
		
		setSS(SRAM, 0);
		
		spiTxRx(SRAM_READ);
    275c:	83 e0       	ldi	r24, 0x03	; 3
    275e:	0e 94 83 13 	call	0x2706	; 0x2706 <spiTxRx>
		spiTxRx((start >> 8) & 0x00FF);
    2762:	8d 2f       	mov	r24, r29
    2764:	0e 94 83 13 	call	0x2706	; 0x2706 <spiTxRx>
		spiTxRx(start & 0x00FF);
    2768:	8c 2f       	mov	r24, r28
    276a:	0e 94 83 13 	call	0x2706	; 0x2706 <spiTxRx>
    276e:	e8 01       	movw	r28, r16
		
		for(i = 0; i < length; ++i)
    2770:	06 c0       	rjmp	.+12     	; 0x277e <readExtMem+0x3e>
		{
			buf[i] = spiTxRx(0);
    2772:	80 e0       	ldi	r24, 0x00	; 0
    2774:	0e 94 83 13 	call	0x2706	; 0x2706 <spiTxRx>
    2778:	f8 01       	movw	r30, r16
    277a:	81 93       	st	Z+, r24
    277c:	8f 01       	movw	r16, r30
		}	
	
	}
}

int readExtMem(int which, int start, char * buf, int length)
    277e:	c8 01       	movw	r24, r16
    2780:	8c 1b       	sub	r24, r28
    2782:	9d 0b       	sbc	r25, r29
		
		spiTxRx(SRAM_READ);
		spiTxRx((start >> 8) & 0x00FF);
		spiTxRx(start & 0x00FF);
		
		for(i = 0; i < length; ++i)
    2784:	8e 15       	cp	r24, r14
    2786:	9f 05       	cpc	r25, r15
    2788:	a4 f3       	brlt	.-24     	; 0x2772 <readExtMem+0x32>
{
	if(which == SRAM)
	{
		if(level)
		{
			PORTF.OUTSET = PIN4_bm;
    278a:	80 e1       	ldi	r24, 0x10	; 16
    278c:	80 93 a5 06 	sts	0x06A5, r24
    2790:	26 c0       	rjmp	.+76     	; 0x27de <readExtMem+0x9e>
		{
			PORTE.OUTSET = PIN4_bm;
		}
		else
		{
			PORTE.OUTCLR = PIN4_bm;	
    2792:	80 e1       	ldi	r24, 0x10	; 16
    2794:	80 93 86 06 	sts	0x0686, r24
	{
		int i;
		
		setSS(FLASH, 0);
		
		spiTxRx(FLASH_BF1RD);
    2798:	84 ed       	ldi	r24, 0xD4	; 212
    279a:	0e 94 83 13 	call	0x2706	; 0x2706 <spiTxRx>
		spiTxRx(0x00);
    279e:	80 e0       	ldi	r24, 0x00	; 0
    27a0:	0e 94 83 13 	call	0x2706	; 0x2706 <spiTxRx>
		spiTxRx((start & 0x0300) >> 8);
    27a4:	ce 01       	movw	r24, r28
    27a6:	88 27       	eor	r24, r24
    27a8:	93 70       	andi	r25, 0x03	; 3
    27aa:	89 2f       	mov	r24, r25
    27ac:	0e 94 83 13 	call	0x2706	; 0x2706 <spiTxRx>
		spiTxRx(start & 0x00FF);
    27b0:	8c 2f       	mov	r24, r28
    27b2:	0e 94 83 13 	call	0x2706	; 0x2706 <spiTxRx>
		spiTxRx(0x00);
    27b6:	80 e0       	ldi	r24, 0x00	; 0
    27b8:	0e 94 83 13 	call	0x2706	; 0x2706 <spiTxRx>
    27bc:	e8 01       	movw	r28, r16
		
		for(i = 0; i < length; ++i)
    27be:	06 c0       	rjmp	.+12     	; 0x27cc <readExtMem+0x8c>
		{
			buf[i] = spiTxRx(0);
    27c0:	80 e0       	ldi	r24, 0x00	; 0
    27c2:	0e 94 83 13 	call	0x2706	; 0x2706 <spiTxRx>
    27c6:	f8 01       	movw	r30, r16
    27c8:	81 93       	st	Z+, r24
    27ca:	8f 01       	movw	r16, r30
		}	
	
	}
}

int readExtMem(int which, int start, char * buf, int length)
    27cc:	c8 01       	movw	r24, r16
    27ce:	8c 1b       	sub	r24, r28
    27d0:	9d 0b       	sbc	r25, r29
		spiTxRx(0x00);
		spiTxRx((start & 0x0300) >> 8);
		spiTxRx(start & 0x00FF);
		spiTxRx(0x00);
		
		for(i = 0; i < length; ++i)
    27d2:	8e 15       	cp	r24, r14
    27d4:	9f 05       	cpc	r25, r15
    27d6:	a4 f3       	brlt	.-24     	; 0x27c0 <readExtMem+0x80>
	}
	else
	{
		if(level)
		{
			PORTE.OUTSET = PIN4_bm;
    27d8:	80 e1       	ldi	r24, 0x10	; 16
    27da:	80 93 85 06 	sts	0x0685, r24
		
		setSS(FLASH, 1);	
		
		return 1;
	}
}
    27de:	81 e0       	ldi	r24, 0x01	; 1
    27e0:	90 e0       	ldi	r25, 0x00	; 0
    27e2:	df 91       	pop	r29
    27e4:	cf 91       	pop	r28
    27e6:	1f 91       	pop	r17
    27e8:	0f 91       	pop	r16
    27ea:	ff 90       	pop	r15
    27ec:	ef 90       	pop	r14
    27ee:	08 95       	ret

000027f0 <writeExtMem>:

int writeExtMem(int which, int start, char * buf, int length)
{
    27f0:	ef 92       	push	r14
    27f2:	ff 92       	push	r15
    27f4:	0f 93       	push	r16
    27f6:	1f 93       	push	r17
    27f8:	cf 93       	push	r28
    27fa:	df 93       	push	r29
    27fc:	eb 01       	movw	r28, r22
    27fe:	8a 01       	movw	r16, r20
    2800:	79 01       	movw	r14, r18
	if(which == SRAM)
    2802:	01 97       	sbiw	r24, 0x01	; 1
    2804:	e9 f4       	brne	.+58     	; 0x2840 <writeExtMem+0x50>
		{
			PORTF.OUTSET = PIN4_bm;
		}
		else
		{
			PORTF.OUTCLR = PIN4_bm;	
    2806:	80 e1       	ldi	r24, 0x10	; 16
    2808:	80 93 a6 06 	sts	0x06A6, r24
	{
		int i;
		
		setSS(SRAM, 0);
		
		spiTxRx(SRAM_WRITE);
    280c:	82 e0       	ldi	r24, 0x02	; 2
    280e:	0e 94 83 13 	call	0x2706	; 0x2706 <spiTxRx>
		spiTxRx((start >> 8) & 0x00FF);
    2812:	8d 2f       	mov	r24, r29
    2814:	0e 94 83 13 	call	0x2706	; 0x2706 <spiTxRx>
		spiTxRx(start & 0x00FF);
    2818:	8c 2f       	mov	r24, r28
    281a:	0e 94 83 13 	call	0x2706	; 0x2706 <spiTxRx>
    281e:	e8 01       	movw	r28, r16
		
		for(i = 0; i < length; ++i)
    2820:	05 c0       	rjmp	.+10     	; 0x282c <writeExtMem+0x3c>
		{
			spiTxRx(buf[i]);
    2822:	f8 01       	movw	r30, r16
    2824:	81 91       	ld	r24, Z+
    2826:	8f 01       	movw	r16, r30
    2828:	0e 94 83 13 	call	0x2706	; 0x2706 <spiTxRx>
		
		return 1;
	}
}

int writeExtMem(int which, int start, char * buf, int length)
    282c:	c8 01       	movw	r24, r16
    282e:	8c 1b       	sub	r24, r28
    2830:	9d 0b       	sbc	r25, r29
		
		spiTxRx(SRAM_WRITE);
		spiTxRx((start >> 8) & 0x00FF);
		spiTxRx(start & 0x00FF);
		
		for(i = 0; i < length; ++i)
    2832:	8e 15       	cp	r24, r14
    2834:	9f 05       	cpc	r25, r15
    2836:	ac f3       	brlt	.-22     	; 0x2822 <writeExtMem+0x32>
{
	if(which == SRAM)
	{
		if(level)
		{
			PORTF.OUTSET = PIN4_bm;
    2838:	80 e1       	ldi	r24, 0x10	; 16
    283a:	80 93 a5 06 	sts	0x06A5, r24
    283e:	22 c0       	rjmp	.+68     	; 0x2884 <writeExtMem+0x94>
		{
			PORTE.OUTSET = PIN4_bm;
		}
		else
		{
			PORTE.OUTCLR = PIN4_bm;	
    2840:	80 e1       	ldi	r24, 0x10	; 16
    2842:	80 93 86 06 	sts	0x0686, r24
	{
		int i;
		
		setSS(FLASH, 0);
		
		spiTxRx(FLASH_BF1WR);
    2846:	84 e8       	ldi	r24, 0x84	; 132
    2848:	0e 94 83 13 	call	0x2706	; 0x2706 <spiTxRx>
		spiTxRx(0x00);
    284c:	80 e0       	ldi	r24, 0x00	; 0
    284e:	0e 94 83 13 	call	0x2706	; 0x2706 <spiTxRx>
		spiTxRx((start & 0x0300) >> 8);
    2852:	ce 01       	movw	r24, r28
    2854:	88 27       	eor	r24, r24
    2856:	93 70       	andi	r25, 0x03	; 3
    2858:	89 2f       	mov	r24, r25
    285a:	0e 94 83 13 	call	0x2706	; 0x2706 <spiTxRx>
		spiTxRx(start & 0x00FF);
    285e:	8c 2f       	mov	r24, r28
    2860:	0e 94 83 13 	call	0x2706	; 0x2706 <spiTxRx>
    2864:	e8 01       	movw	r28, r16
		
		for(i = 0; i < length; ++i)
    2866:	05 c0       	rjmp	.+10     	; 0x2872 <writeExtMem+0x82>
		{
			spiTxRx(buf[i]);
    2868:	f8 01       	movw	r30, r16
    286a:	81 91       	ld	r24, Z+
    286c:	8f 01       	movw	r16, r30
    286e:	0e 94 83 13 	call	0x2706	; 0x2706 <spiTxRx>
		
		return 1;
	}
}

int writeExtMem(int which, int start, char * buf, int length)
    2872:	c8 01       	movw	r24, r16
    2874:	8c 1b       	sub	r24, r28
    2876:	9d 0b       	sbc	r25, r29
		spiTxRx(FLASH_BF1WR);
		spiTxRx(0x00);
		spiTxRx((start & 0x0300) >> 8);
		spiTxRx(start & 0x00FF);
		
		for(i = 0; i < length; ++i)
    2878:	8e 15       	cp	r24, r14
    287a:	9f 05       	cpc	r25, r15
    287c:	ac f3       	brlt	.-22     	; 0x2868 <writeExtMem+0x78>
	}
	else
	{
		if(level)
		{
			PORTE.OUTSET = PIN4_bm;
    287e:	80 e1       	ldi	r24, 0x10	; 16
    2880:	80 93 85 06 	sts	0x0685, r24
		
		return 1;
	}


}
    2884:	81 e0       	ldi	r24, 0x01	; 1
    2886:	90 e0       	ldi	r25, 0x00	; 0
    2888:	df 91       	pop	r29
    288a:	cf 91       	pop	r28
    288c:	1f 91       	pop	r17
    288e:	0f 91       	pop	r16
    2890:	ff 90       	pop	r15
    2892:	ef 90       	pop	r14
    2894:	08 95       	ret

00002896 <initFlash>:



void initFlash()
{
    2896:	08 95       	ret

00002898 <initSRAM>:

}

void initSRAM()
{
    2898:	1f 93       	push	r17
    289a:	cf 93       	push	r28
    289c:	df 93       	push	r29
		{
			PORTF.OUTSET = PIN4_bm;
		}
		else
		{
			PORTF.OUTCLR = PIN4_bm;	
    289e:	c0 ea       	ldi	r28, 0xA0	; 160
    28a0:	d6 e0       	ldi	r29, 0x06	; 6
    28a2:	10 e1       	ldi	r17, 0x10	; 16
    28a4:	1e 83       	std	Y+6, r17	; 0x06

void initSRAM()
{
		setSS(SRAM, 0);
		
		spiTxRx(SRAM_WRSR);
    28a6:	81 e0       	ldi	r24, 0x01	; 1
    28a8:	0e 94 83 13 	call	0x2706	; 0x2706 <spiTxRx>
		spiTxRx(0x41);	// set mode to sequential, disable HOLD feature
    28ac:	81 e4       	ldi	r24, 0x41	; 65
    28ae:	0e 94 83 13 	call	0x2706	; 0x2706 <spiTxRx>
{
	if(which == SRAM)
	{
		if(level)
		{
			PORTF.OUTSET = PIN4_bm;
    28b2:	1d 83       	std	Y+5, r17	; 0x05
		}
		else
		{
			PORTF.OUTCLR = PIN4_bm;	
    28b4:	1e 83       	std	Y+6, r17	; 0x06
	
	{
		uint8_t val;
		setSS(SRAM, 0);
		
		spiTxRx(SRAM_RDSR);
    28b6:	85 e0       	ldi	r24, 0x05	; 5
    28b8:	0e 94 83 13 	call	0x2706	; 0x2706 <spiTxRx>
		val = spiTxRx(0x0);	// set mode to sequential, disable HOLD feature
    28bc:	80 e0       	ldi	r24, 0x00	; 0
    28be:	0e 94 83 13 	call	0x2706	; 0x2706 <spiTxRx>
{
	if(which == SRAM)
	{
		if(level)
		{
			PORTF.OUTSET = PIN4_bm;
    28c2:	1d 83       	std	Y+5, r17	; 0x05
		spiTxRx(SRAM_RDSR);
		val = spiTxRx(0x0);	// set mode to sequential, disable HOLD feature
		
		setSS(SRAM, 1);			
		
		printf("SR is: %x\r\n",val);
    28c4:	1f 92       	push	r1
    28c6:	8f 93       	push	r24
    28c8:	8a e1       	ldi	r24, 0x1A	; 26
    28ca:	91 e2       	ldi	r25, 0x21	; 33
    28cc:	9f 93       	push	r25
    28ce:	8f 93       	push	r24
    28d0:	0e 94 35 29 	call	0x526a	; 0x526a <printf>
    28d4:	0f 90       	pop	r0
    28d6:	0f 90       	pop	r0
    28d8:	0f 90       	pop	r0
    28da:	0f 90       	pop	r0
	}
}
    28dc:	df 91       	pop	r29
    28de:	cf 91       	pop	r28
    28e0:	1f 91       	pop	r17
    28e2:	08 95       	ret

000028e4 <initExtMem>:

void initExtMem()
{
	PORTE.OUTSET = PIN4_bm;
    28e4:	e0 e8       	ldi	r30, 0x80	; 128
    28e6:	f6 e0       	ldi	r31, 0x06	; 6
    28e8:	80 e1       	ldi	r24, 0x10	; 16
    28ea:	85 83       	std	Z+5, r24	; 0x05
	PORTE.DIRSET = PIN4_bm;
    28ec:	81 83       	std	Z+1, r24	; 0x01

	// set !SS1 lhigh
	PORTF.OUTSET = PIN4_bm;
    28ee:	a0 ea       	ldi	r26, 0xA0	; 160
    28f0:	b6 e0       	ldi	r27, 0x06	; 6
    28f2:	15 96       	adiw	r26, 0x05	; 5
    28f4:	8c 93       	st	X, r24
    28f6:	15 97       	sbiw	r26, 0x05	; 5
	PORTF.DIRSET = PIN4_bm;
    28f8:	11 96       	adiw	r26, 0x01	; 1
    28fa:	8c 93       	st	X, r24


	PORTE.DIRSET = PIN5_bm | PIN7_bm;	// !ss/mosi/sck as output
    28fc:	80 ea       	ldi	r24, 0xA0	; 160
    28fe:	81 83       	std	Z+1, r24	; 0x01
	PORTE.DIRCLR = PIN6_bm;				// miso as input
    2900:	80 e4       	ldi	r24, 0x40	; 64
    2902:	82 83       	std	Z+2, r24	; 0x02

	SPIE.CTRL = SPI_ENABLE_bm | SPI_MASTER_bm;	//mode 0, clock/4
    2904:	80 e5       	ldi	r24, 0x50	; 80
    2906:	80 93 c0 0a 	sts	0x0AC0, r24

	initFlash();
	initSRAM();
    290a:	0c 94 4c 14 	jmp	0x2898	; 0x2898 <initSRAM>

0000290e <newHWAccelData>:
TWI_Master_t twiMaster;
extern AccelData _acc;

int newHWAccelData()
{
	return (twiMaster.result == TWIM_RESULT_OK && twiMaster.status == TWIM_STATUS_READY);
    290e:	80 91 a1 26 	lds	r24, 0x26A1
    2912:	81 30       	cpi	r24, 0x01	; 1
    2914:	31 f4       	brne	.+12     	; 0x2922 <newHWAccelData+0x14>
    2916:	80 91 a0 26 	lds	r24, 0x26A0
    291a:	21 e0       	ldi	r18, 0x01	; 1
    291c:	30 e0       	ldi	r19, 0x00	; 0
    291e:	88 23       	and	r24, r24
    2920:	11 f0       	breq	.+4      	; 0x2926 <newHWAccelData+0x18>
    2922:	20 e0       	ldi	r18, 0x00	; 0
    2924:	30 e0       	ldi	r19, 0x00	; 0
}
    2926:	c9 01       	movw	r24, r18
    2928:	08 95       	ret

0000292a <updateHWAccel>:

// this is currently non-blocking.
void updateHWAccel()
{
    292a:	cf 93       	push	r28
	if(twiMaster.result == TWIM_RESULT_OK && twiMaster.status == TWIM_STATUS_READY)
    292c:	80 91 a1 26 	lds	r24, 0x26A1
    2930:	81 30       	cpi	r24, 0x01	; 1
    2932:	09 f0       	breq	.+2      	; 0x2936 <updateHWAccel+0xc>
    2934:	4b c0       	rjmp	.+150    	; 0x29cc <updateHWAccel+0xa2>
    2936:	80 91 a0 26 	lds	r24, 0x26A0
    293a:	81 11       	cpse	r24, r1
    293c:	47 c0       	rjmp	.+142    	; 0x29cc <updateHWAccel+0xa2>
	{ 
		byte oldstatus = _acc.status & ACC_O_MASK;
    293e:	c0 91 49 21 	lds	r28, 0x2149
		
		// I2C reads in as unsigned - we need to convert back to 2s complement (+- 32)
		_acc.x = (Angle)(twiMaster.readData[0] << 2) >> 2;
    2942:	80 91 98 26 	lds	r24, 0x2698
    2946:	24 e0       	ldi	r18, 0x04	; 4
    2948:	82 9f       	mul	r24, r18
    294a:	c0 01       	movw	r24, r0
    294c:	11 24       	eor	r1, r1
    294e:	85 95       	asr	r24
    2950:	85 95       	asr	r24
    2952:	80 93 46 21 	sts	0x2146, r24
		_acc.y = (Angle)(twiMaster.readData[1] << 2) >> 2;
    2956:	80 91 99 26 	lds	r24, 0x2699
    295a:	24 e0       	ldi	r18, 0x04	; 4
    295c:	82 9f       	mul	r24, r18
    295e:	c0 01       	movw	r24, r0
    2960:	11 24       	eor	r1, r1
    2962:	85 95       	asr	r24
    2964:	85 95       	asr	r24
    2966:	80 93 47 21 	sts	0x2147, r24
		_acc.z = (Angle)(twiMaster.readData[2] << 2) >> 2;
    296a:	80 91 9a 26 	lds	r24, 0x269A
    296e:	24 e0       	ldi	r18, 0x04	; 4
    2970:	82 9f       	mul	r24, r18
    2972:	c0 01       	movw	r24, r0
    2974:	11 24       	eor	r1, r1
    2976:	85 95       	asr	r24
    2978:	85 95       	asr	r24
    297a:	80 93 48 21 	sts	0x2148, r24
		_acc.status = twiMaster.readData[3];
    297e:	80 91 9b 26 	lds	r24, 0x269B
    2982:	80 93 49 21 	sts	0x2149, r24
		
		twiMaster.result = TWIM_RESULT_UNKNOWN;
    2986:	10 92 a1 26 	sts	0x26A1, r1
		
		// if superceding event isn't registered, register sub-events, if necessary
		if(!triggerHandler(EVENT_ACCEL_CHANGE))
    298a:	8b e0       	ldi	r24, 0x0B	; 11
    298c:	0e 94 65 07 	call	0xeca	; 0xeca <triggerHandler>
    2990:	89 2b       	or	r24, r25
    2992:	e1 f4       	brne	.+56     	; 0x29cc <updateHWAccel+0xa2>
		{
			if(_acc.status & ACC_TAP)
    2994:	80 91 49 21 	lds	r24, 0x2149
    2998:	85 ff       	sbrs	r24, 5
    299a:	03 c0       	rjmp	.+6      	; 0x29a2 <updateHWAccel+0x78>
			{
				triggerHandler(EVENT_ACCEL_TAP);
    299c:	8c e0       	ldi	r24, 0x0C	; 12
    299e:	0e 94 65 07 	call	0xeca	; 0xeca <triggerHandler>
			}	
			if(_acc.status & ACC_SHAKE)
    29a2:	80 91 49 21 	lds	r24, 0x2149
    29a6:	87 ff       	sbrs	r24, 7
    29a8:	03 c0       	rjmp	.+6      	; 0x29b0 <updateHWAccel+0x86>
			{
				triggerHandler(EVENT_ACCEL_SHAKE);
    29aa:	8d e0       	ldi	r24, 0x0D	; 13
    29ac:	0e 94 65 07 	call	0xeca	; 0xeca <triggerHandler>
// this is currently non-blocking.
void updateHWAccel()
{
	if(twiMaster.result == TWIM_RESULT_OK && twiMaster.status == TWIM_STATUS_READY)
	{ 
		byte oldstatus = _acc.status & ACC_O_MASK;
    29b0:	cf 71       	andi	r28, 0x1F	; 31
			}	
			if(_acc.status & ACC_SHAKE)
			{
				triggerHandler(EVENT_ACCEL_SHAKE);
			}	
			if(oldstatus != (_acc.status & ACC_O_MASK))
    29b2:	2c 2f       	mov	r18, r28
    29b4:	30 e0       	ldi	r19, 0x00	; 0
    29b6:	80 91 49 21 	lds	r24, 0x2149
    29ba:	8f 71       	andi	r24, 0x1F	; 31
    29bc:	90 e0       	ldi	r25, 0x00	; 0
    29be:	28 17       	cp	r18, r24
    29c0:	39 07       	cpc	r19, r25
    29c2:	21 f0       	breq	.+8      	; 0x29cc <updateHWAccel+0xa2>
			{
				triggerHandler(EVENT_ACCEL_TAP);
    29c4:	8c e0       	ldi	r24, 0x0C	; 12
			}			
		}
	}
}
    29c6:	cf 91       	pop	r28
			{
				triggerHandler(EVENT_ACCEL_SHAKE);
			}	
			if(oldstatus != (_acc.status & ACC_O_MASK))
			{
				triggerHandler(EVENT_ACCEL_TAP);
    29c8:	0c 94 65 07 	jmp	0xeca	; 0xeca <triggerHandler>
			}			
		}
	}
}
    29cc:	cf 91       	pop	r28
    29ce:	08 95       	ret

000029d0 <initHWAccel>:

// Doesn't *really* need to be blocking, just checked for success
// TODO: should block? yes no?
void initHWAccel()
{
    29d0:	0f 93       	push	r16
    29d2:	cf 93       	push	r28
    29d4:	df 93       	push	r29
    29d6:	1f 92       	push	r1
    29d8:	1f 92       	push	r1
    29da:	cd b7       	in	r28, 0x3d	; 61
    29dc:	de b7       	in	r29, 0x3e	; 62
	/* Initialize TWI master. */
	TWI_MasterInit(&twiMaster,
    29de:	2b e9       	ldi	r18, 0x9B	; 155
    29e0:	40 e4       	ldi	r20, 0x40	; 64
    29e2:	60 ea       	ldi	r22, 0xA0	; 160
    29e4:	74 e0       	ldi	r23, 0x04	; 4
    29e6:	81 e9       	ldi	r24, 0x91	; 145
    29e8:	96 e2       	ldi	r25, 0x26	; 38
    29ea:	0e 94 dc 1e 	call	0x3db8	; 0x3db8 <TWI_MasterInit>

	// prepare configuration data for the accelerometer
	byte buf[2];

	// set mode to STANDBY if it isn't already (can't update registers in ACTIVE mode!)
	buf[0] = 0x07;
    29ee:	87 e0       	ldi	r24, 0x07	; 7
    29f0:	89 83       	std	Y+1, r24	; 0x01
	buf[1] = 0x18;
    29f2:	88 e1       	ldi	r24, 0x18	; 24
    29f4:	8a 83       	std	Y+2, r24	; 0x02
	TWI_MasterWriteRead(&twiMaster, ACCEL_I2C_ADDR, buf, 2, 0);
    29f6:	00 e0       	ldi	r16, 0x00	; 0
    29f8:	22 e0       	ldi	r18, 0x02	; 2
    29fa:	ae 01       	movw	r20, r28
    29fc:	4f 5f       	subi	r20, 0xFF	; 255
    29fe:	5f 4f       	sbci	r21, 0xFF	; 255
    2a00:	6c e4       	ldi	r22, 0x4C	; 76
    2a02:	81 e9       	ldi	r24, 0x91	; 145
    2a04:	96 e2       	ldi	r25, 0x26	; 38
    2a06:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <TWI_MasterWriteRead>
	while (twiMaster.status != TWIM_STATUS_READY);
    2a0a:	80 91 a0 26 	lds	r24, 0x26A0
    2a0e:	81 11       	cpse	r24, r1
    2a10:	fc cf       	rjmp	.-8      	; 0x2a0a <initHWAccel+0x3a>

	// set sleep mode
	buf[0] = 0x05;
    2a12:	85 e0       	ldi	r24, 0x05	; 5
    2a14:	89 83       	std	Y+1, r24	; 0x01
	buf[1] = 0x00;	// no sleep
    2a16:	1a 82       	std	Y+2, r1	; 0x02
	TWI_MasterWriteRead(&twiMaster, ACCEL_I2C_ADDR, buf, 2, 0);
    2a18:	00 e0       	ldi	r16, 0x00	; 0
    2a1a:	22 e0       	ldi	r18, 0x02	; 2
    2a1c:	ae 01       	movw	r20, r28
    2a1e:	4f 5f       	subi	r20, 0xFF	; 255
    2a20:	5f 4f       	sbci	r21, 0xFF	; 255
    2a22:	6c e4       	ldi	r22, 0x4C	; 76
    2a24:	81 e9       	ldi	r24, 0x91	; 145
    2a26:	96 e2       	ldi	r25, 0x26	; 38
    2a28:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <TWI_MasterWriteRead>
	while (twiMaster.status != TWIM_STATUS_READY);
    2a2c:	80 91 a0 26 	lds	r24, 0x26A0
    2a30:	81 11       	cpse	r24, r1
    2a32:	fc cf       	rjmp	.-8      	; 0x2a2c <initHWAccel+0x5c>

	// set interrupts
	buf[0] = 0x06;
    2a34:	86 e0       	ldi	r24, 0x06	; 6
    2a36:	89 83       	std	Y+1, r24	; 0x01
	buf[1] = 0x07;	// 0x06 Interrupt Setup Register -> PDINT | PLINT | FBINT
    2a38:	87 e0       	ldi	r24, 0x07	; 7
    2a3a:	8a 83       	std	Y+2, r24	; 0x02
	TWI_MasterWriteRead(&twiMaster, ACCEL_I2C_ADDR, buf, 2, 0);
    2a3c:	00 e0       	ldi	r16, 0x00	; 0
    2a3e:	22 e0       	ldi	r18, 0x02	; 2
    2a40:	ae 01       	movw	r20, r28
    2a42:	4f 5f       	subi	r20, 0xFF	; 255
    2a44:	5f 4f       	sbci	r21, 0xFF	; 255
    2a46:	6c e4       	ldi	r22, 0x4C	; 76
    2a48:	81 e9       	ldi	r24, 0x91	; 145
    2a4a:	96 e2       	ldi	r25, 0x26	; 38
    2a4c:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <TWI_MasterWriteRead>
	while (twiMaster.status != TWIM_STATUS_READY);
    2a50:	80 91 a0 26 	lds	r24, 0x26A0
    2a54:	81 11       	cpse	r24, r1
    2a56:	fc cf       	rjmp	.-8      	; 0x2a50 <initHWAccel+0x80>

	// set filter rate
	buf[0] = 0x08;
    2a58:	88 e0       	ldi	r24, 0x08	; 8
    2a5a:	89 83       	std	Y+1, r24	; 0x01
	buf[1] = 0xE0;	// 0x08 Sample Register -> Fil[0:2]
    2a5c:	80 ee       	ldi	r24, 0xE0	; 224
    2a5e:	8a 83       	std	Y+2, r24	; 0x02
	TWI_MasterWriteRead(&twiMaster, ACCEL_I2C_ADDR, buf, 2, 0);
    2a60:	00 e0       	ldi	r16, 0x00	; 0
    2a62:	22 e0       	ldi	r18, 0x02	; 2
    2a64:	ae 01       	movw	r20, r28
    2a66:	4f 5f       	subi	r20, 0xFF	; 255
    2a68:	5f 4f       	sbci	r21, 0xFF	; 255
    2a6a:	6c e4       	ldi	r22, 0x4C	; 76
    2a6c:	81 e9       	ldi	r24, 0x91	; 145
    2a6e:	96 e2       	ldi	r25, 0x26	; 38
    2a70:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <TWI_MasterWriteRead>
	while (twiMaster.status != TWIM_STATUS_READY);
    2a74:	80 91 a0 26 	lds	r24, 0x26A0
    2a78:	81 11       	cpse	r24, r1
    2a7a:	fc cf       	rjmp	.-8      	; 0x2a74 <initHWAccel+0xa4>
	
	// set tap detection
	buf[0] = 0x09;
    2a7c:	89 e0       	ldi	r24, 0x09	; 9
    2a7e:	89 83       	std	Y+1, r24	; 0x01
	buf[1] = 0x10;	// 0x09	Pulse detection -> +- 4 counts
    2a80:	80 e1       	ldi	r24, 0x10	; 16
    2a82:	8a 83       	std	Y+2, r24	; 0x02
	TWI_MasterWriteRead(&twiMaster, ACCEL_I2C_ADDR, buf, 2, 0);
    2a84:	00 e0       	ldi	r16, 0x00	; 0
    2a86:	22 e0       	ldi	r18, 0x02	; 2
    2a88:	ae 01       	movw	r20, r28
    2a8a:	4f 5f       	subi	r20, 0xFF	; 255
    2a8c:	5f 4f       	sbci	r21, 0xFF	; 255
    2a8e:	6c e4       	ldi	r22, 0x4C	; 76
    2a90:	81 e9       	ldi	r24, 0x91	; 145
    2a92:	96 e2       	ldi	r25, 0x26	; 38
    2a94:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <TWI_MasterWriteRead>
	while (twiMaster.status != TWIM_STATUS_READY);
    2a98:	80 91 a0 26 	lds	r24, 0x26A0
    2a9c:	81 11       	cpse	r24, r1
    2a9e:	fc cf       	rjmp	.-8      	; 0x2a98 <initHWAccel+0xc8>

	// set tap debounce
	buf[0] = 0x0A;
    2aa0:	8a e0       	ldi	r24, 0x0A	; 10
    2aa2:	89 83       	std	Y+1, r24	; 0x01
	buf[1] = 0x10;	// 0x0A Tap debounce ->	4 detections
    2aa4:	80 e1       	ldi	r24, 0x10	; 16
    2aa6:	8a 83       	std	Y+2, r24	; 0x02
	TWI_MasterWriteRead(&twiMaster, ACCEL_I2C_ADDR, buf, 2, 0);
    2aa8:	00 e0       	ldi	r16, 0x00	; 0
    2aaa:	22 e0       	ldi	r18, 0x02	; 2
    2aac:	ae 01       	movw	r20, r28
    2aae:	4f 5f       	subi	r20, 0xFF	; 255
    2ab0:	5f 4f       	sbci	r21, 0xFF	; 255
    2ab2:	6c e4       	ldi	r22, 0x4C	; 76
    2ab4:	81 e9       	ldi	r24, 0x91	; 145
    2ab6:	96 e2       	ldi	r25, 0x26	; 38
    2ab8:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <TWI_MasterWriteRead>
	while (twiMaster.status != TWIM_STATUS_READY);	
    2abc:	80 91 a0 26 	lds	r24, 0x26A0
    2ac0:	81 11       	cpse	r24, r1
    2ac2:	fc cf       	rjmp	.-8      	; 0x2abc <initHWAccel+0xec>
	
	// enable the accelerometer
	buf[0] = 0x07;
    2ac4:	87 e0       	ldi	r24, 0x07	; 7
    2ac6:	89 83       	std	Y+1, r24	; 0x01
	buf[1] = 0x19;
    2ac8:	89 e1       	ldi	r24, 0x19	; 25
    2aca:	8a 83       	std	Y+2, r24	; 0x02
	TWI_MasterWriteRead(&twiMaster, ACCEL_I2C_ADDR, buf, 2, 0);
    2acc:	00 e0       	ldi	r16, 0x00	; 0
    2ace:	22 e0       	ldi	r18, 0x02	; 2
    2ad0:	ae 01       	movw	r20, r28
    2ad2:	4f 5f       	subi	r20, 0xFF	; 255
    2ad4:	5f 4f       	sbci	r21, 0xFF	; 255
    2ad6:	6c e4       	ldi	r22, 0x4C	; 76
    2ad8:	81 e9       	ldi	r24, 0x91	; 145
    2ada:	96 e2       	ldi	r25, 0x26	; 38
    2adc:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <TWI_MasterWriteRead>
	while (twiMaster.status != TWIM_STATUS_READY);
    2ae0:	80 91 a0 26 	lds	r24, 0x26A0
    2ae4:	81 11       	cpse	r24, r1
    2ae6:	fc cf       	rjmp	.-8      	; 0x2ae0 <initHWAccel+0x110>
	
	// set up input/interrupt to detect acceleromter IRQs
	PORTB.DIRCLR = PIN0_bm;					// set Pin0 as input
    2ae8:	81 e0       	ldi	r24, 0x01	; 1
    2aea:	80 93 22 06 	sts	0x0622, r24
	PORTB.PIN0CTRL = PORT_OPC_PULLUP_gc | PORT_ISC_FALLING_gc;	// set pullup, trigger interrupt on falling edge
    2aee:	9a e1       	ldi	r25, 0x1A	; 26
    2af0:	90 93 30 06 	sts	0x0630, r25
	PORTB.INT0MASK = PIN0_bm;				// enable PIN0 to trigger INT0
    2af4:	80 93 2a 06 	sts	0x062A, r24
	PORTB.INTCTRL = PORT_INT0LVL_LO_gc;		// enable INT0 interrupt on LOW priority
    2af8:	80 93 29 06 	sts	0x0629, r24
}
    2afc:	0f 90       	pop	r0
    2afe:	0f 90       	pop	r0
    2b00:	df 91       	pop	r29
    2b02:	cf 91       	pop	r28
    2b04:	0f 91       	pop	r16
    2b06:	08 95       	ret

00002b08 <__vector_34>:

// Acceleromter status change detection interrupt
ISR(PORTB_INT0_vect)
{
    2b08:	1f 92       	push	r1
    2b0a:	0f 92       	push	r0
    2b0c:	0f b6       	in	r0, 0x3f	; 63
    2b0e:	0f 92       	push	r0
    2b10:	11 24       	eor	r1, r1
    2b12:	0b b6       	in	r0, 0x3b	; 59
    2b14:	0f 92       	push	r0
    2b16:	0f 93       	push	r16
    2b18:	2f 93       	push	r18
    2b1a:	3f 93       	push	r19
    2b1c:	4f 93       	push	r20
    2b1e:	5f 93       	push	r21
    2b20:	6f 93       	push	r22
    2b22:	7f 93       	push	r23
    2b24:	8f 93       	push	r24
    2b26:	9f 93       	push	r25
    2b28:	af 93       	push	r26
    2b2a:	bf 93       	push	r27
    2b2c:	ef 93       	push	r30
    2b2e:	ff 93       	push	r31
    2b30:	cf 93       	push	r28
    2b32:	df 93       	push	r29
    2b34:	1f 92       	push	r1
    2b36:	cd b7       	in	r28, 0x3d	; 61
    2b38:	de b7       	in	r29, 0x3e	; 62

	if(twiMaster.status == TWIM_STATUS_READY)
    2b3a:	80 91 a0 26 	lds	r24, 0x26A0
    2b3e:	81 11       	cpse	r24, r1
    2b40:	0b c0       	rjmp	.+22     	; 0x2b58 <__vector_34+0x50>
	{
		byte buf = 0x00;		// read 4 bytes, starting at 0x00 (x,y,z,status)
    2b42:	19 82       	std	Y+1, r1	; 0x01
		TWI_MasterWriteRead(&twiMaster, ACCEL_I2C_ADDR, &buf, 1, 4);
    2b44:	04 e0       	ldi	r16, 0x04	; 4
    2b46:	21 e0       	ldi	r18, 0x01	; 1
    2b48:	ae 01       	movw	r20, r28
    2b4a:	4f 5f       	subi	r20, 0xFF	; 255
    2b4c:	5f 4f       	sbci	r21, 0xFF	; 255
    2b4e:	6c e4       	ldi	r22, 0x4C	; 76
    2b50:	81 e9       	ldi	r24, 0x91	; 145
    2b52:	96 e2       	ldi	r25, 0x26	; 38
    2b54:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <TWI_MasterWriteRead>
	}

}
    2b58:	0f 90       	pop	r0
    2b5a:	df 91       	pop	r29
    2b5c:	cf 91       	pop	r28
    2b5e:	ff 91       	pop	r31
    2b60:	ef 91       	pop	r30
    2b62:	bf 91       	pop	r27
    2b64:	af 91       	pop	r26
    2b66:	9f 91       	pop	r25
    2b68:	8f 91       	pop	r24
    2b6a:	7f 91       	pop	r23
    2b6c:	6f 91       	pop	r22
    2b6e:	5f 91       	pop	r21
    2b70:	4f 91       	pop	r20
    2b72:	3f 91       	pop	r19
    2b74:	2f 91       	pop	r18
    2b76:	0f 91       	pop	r16
    2b78:	0f 90       	pop	r0
    2b7a:	0b be       	out	0x3b, r0	; 59
    2b7c:	0f 90       	pop	r0
    2b7e:	0f be       	out	0x3f, r0	; 63
    2b80:	0f 90       	pop	r0
    2b82:	1f 90       	pop	r1
    2b84:	18 95       	reti

00002b86 <__vector_46>:

/*! TWIE Master Interrupt vector. */
ISR(TWIE_TWIM_vect)
{
    2b86:	1f 92       	push	r1
    2b88:	0f 92       	push	r0
    2b8a:	0f b6       	in	r0, 0x3f	; 63
    2b8c:	0f 92       	push	r0
    2b8e:	11 24       	eor	r1, r1
    2b90:	0b b6       	in	r0, 0x3b	; 59
    2b92:	0f 92       	push	r0
    2b94:	2f 93       	push	r18
    2b96:	3f 93       	push	r19
    2b98:	4f 93       	push	r20
    2b9a:	5f 93       	push	r21
    2b9c:	6f 93       	push	r22
    2b9e:	7f 93       	push	r23
    2ba0:	8f 93       	push	r24
    2ba2:	9f 93       	push	r25
    2ba4:	af 93       	push	r26
    2ba6:	bf 93       	push	r27
    2ba8:	ef 93       	push	r30
    2baa:	ff 93       	push	r31

	TWI_MasterInterruptHandler(&twiMaster);
    2bac:	81 e9       	ldi	r24, 0x91	; 145
    2bae:	96 e2       	ldi	r25, 0x26	; 38
    2bb0:	0e 94 a7 1f 	call	0x3f4e	; 0x3f4e <TWI_MasterInterruptHandler>
}
    2bb4:	ff 91       	pop	r31
    2bb6:	ef 91       	pop	r30
    2bb8:	bf 91       	pop	r27
    2bba:	af 91       	pop	r26
    2bbc:	9f 91       	pop	r25
    2bbe:	8f 91       	pop	r24
    2bc0:	7f 91       	pop	r23
    2bc2:	6f 91       	pop	r22
    2bc4:	5f 91       	pop	r21
    2bc6:	4f 91       	pop	r20
    2bc8:	3f 91       	pop	r19
    2bca:	2f 91       	pop	r18
    2bcc:	0f 90       	pop	r0
    2bce:	0b be       	out	0x3b, r0	; 59
    2bd0:	0f 90       	pop	r0
    2bd2:	0f be       	out	0x3f, r0	; 63
    2bd4:	0f 90       	pop	r0
    2bd6:	1f 90       	pop	r1
    2bd8:	18 95       	reti

00002bda <setAccelRegister>:

// helper function to setup accelerometer registers
void setAccelRegister(byte one, byte two)
{
    2bda:	0f 93       	push	r16
    2bdc:	cf 93       	push	r28
    2bde:	df 93       	push	r29
    2be0:	1f 92       	push	r1
    2be2:	1f 92       	push	r1
    2be4:	cd b7       	in	r28, 0x3d	; 61
    2be6:	de b7       	in	r29, 0x3e	; 62
    byte buf[2];

    buf[0] = one;
    2be8:	89 83       	std	Y+1, r24	; 0x01
    buf[1] = two;
    2bea:	6a 83       	std	Y+2, r22	; 0x02
    
    TWI_MasterWriteRead(&twiMaster, ACCEL_I2C_ADDR, buf, 2, 0);
    2bec:	00 e0       	ldi	r16, 0x00	; 0
    2bee:	22 e0       	ldi	r18, 0x02	; 2
    2bf0:	ae 01       	movw	r20, r28
    2bf2:	4f 5f       	subi	r20, 0xFF	; 255
    2bf4:	5f 4f       	sbci	r21, 0xFF	; 255
    2bf6:	6c e4       	ldi	r22, 0x4C	; 76
    2bf8:	81 e9       	ldi	r24, 0x91	; 145
    2bfa:	96 e2       	ldi	r25, 0x26	; 38
    2bfc:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <TWI_MasterWriteRead>
    while(twiMaster.status != TWIM_STATUS_READY);
    2c00:	80 91 a0 26 	lds	r24, 0x26A0
    2c04:	81 11       	cpse	r24, r1
    2c06:	fc cf       	rjmp	.-8      	; 0x2c00 <setAccelRegister+0x26>
}
    2c08:	0f 90       	pop	r0
    2c0a:	0f 90       	pop	r0
    2c0c:	df 91       	pop	r29
    2c0e:	cf 91       	pop	r28
    2c10:	0f 91       	pop	r16
    2c12:	08 95       	ret

00002c14 <scaryBlockTickHack>:

extern int blockTickRunning;

void scaryBlockTickHack(void)
{
	TCF0.CTRLA = TC_CLKSEL_DIV1_gc;
    2c14:	e0 e0       	ldi	r30, 0x00	; 0
    2c16:	fb e0       	ldi	r31, 0x0B	; 11
    2c18:	81 e0       	ldi	r24, 0x01	; 1
    2c1a:	80 83       	st	Z, r24
	
	TCF0.PER = 16000;  // 2000hz blocktick
    2c1c:	80 e8       	ldi	r24, 0x80	; 128
    2c1e:	9e e3       	ldi	r25, 0x3E	; 62
    2c20:	86 a3       	std	Z+38, r24	; 0x26
    2c22:	97 a3       	std	Z+39, r25	; 0x27
	TCF0.INTCTRLA = TC_OVFINTLVL_MED_gc;
    2c24:	82 e0       	ldi	r24, 0x02	; 2
    2c26:	86 83       	std	Z+6, r24	; 0x06
    2c28:	08 95       	ret

00002c2a <initBlockTick>:


void initBlockTick()
{

	blockTickRunning=0;
    2c2a:	10 92 28 21 	sts	0x2128, r1
    2c2e:	10 92 29 21 	sts	0x2129, r1
     
	scaryBlockTickHack();
    2c32:	0e 94 0a 16 	call	0x2c14	; 0x2c14 <scaryBlockTickHack>

	/* Enable interrupt levels. */
	PMIC.CTRL |= PMIC_HILVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_LOLVLEN_bm;
    2c36:	e0 ea       	ldi	r30, 0xA0	; 160
    2c38:	f0 e0       	ldi	r31, 0x00	; 0
    2c3a:	82 81       	ldd	r24, Z+2	; 0x02
    2c3c:	87 60       	ori	r24, 0x07	; 7
    2c3e:	82 83       	std	Z+2, r24	; 0x02
	sei();
    2c40:	78 94       	sei
    2c42:	08 95       	ret

00002c44 <__vector_108>:
}

// part of scary blocktick hack
// called every 38400 khz or so
ISR(TCF0_OVF_vect)
{
    2c44:	1f 92       	push	r1
    2c46:	0f 92       	push	r0
    2c48:	0f b6       	in	r0, 0x3f	; 63
    2c4a:	0f 92       	push	r0
    2c4c:	11 24       	eor	r1, r1
    2c4e:	0b b6       	in	r0, 0x3b	; 59
    2c50:	0f 92       	push	r0
    2c52:	2f 93       	push	r18
    2c54:	3f 93       	push	r19
    2c56:	4f 93       	push	r20
    2c58:	5f 93       	push	r21
    2c5a:	6f 93       	push	r22
    2c5c:	7f 93       	push	r23
    2c5e:	8f 93       	push	r24
    2c60:	9f 93       	push	r25
    2c62:	af 93       	push	r26
    2c64:	bf 93       	push	r27
    2c66:	ef 93       	push	r30
    2c68:	ff 93       	push	r31
	if (!blockTickRunning)
    2c6a:	80 91 28 21 	lds	r24, 0x2128
    2c6e:	90 91 29 21 	lds	r25, 0x2129
    2c72:	89 2b       	or	r24, r25
    2c74:	19 f4       	brne	.+6      	; 0x2c7c <__vector_108+0x38>
	  {
	    wdt_reset();
    2c76:	a8 95       	wdr
	    blockTick();
    2c78:	0e 94 23 02 	call	0x446	; 0x446 <blockTick>
	  }
}
    2c7c:	ff 91       	pop	r31
    2c7e:	ef 91       	pop	r30
    2c80:	bf 91       	pop	r27
    2c82:	af 91       	pop	r26
    2c84:	9f 91       	pop	r25
    2c86:	8f 91       	pop	r24
    2c88:	7f 91       	pop	r23
    2c8a:	6f 91       	pop	r22
    2c8c:	5f 91       	pop	r21
    2c8e:	4f 91       	pop	r20
    2c90:	3f 91       	pop	r19
    2c92:	2f 91       	pop	r18
    2c94:	0f 90       	pop	r0
    2c96:	0b be       	out	0x3b, r0	; 59
    2c98:	0f 90       	pop	r0
    2c9a:	0f be       	out	0x3f, r0	; 63
    2c9c:	0f 90       	pop	r0
    2c9e:	1f 90       	pop	r1
    2ca0:	18 95       	reti

00002ca2 <jumpToHWBootSection>:
#include <avr/io.h>
#include "../hw-api/hwBoot.h"

void jumpToHWBootSection(){
	uint8_t temp = RST.CTRL | RST_SWRST_bm;
    2ca2:	e8 e7       	ldi	r30, 0x78	; 120
    2ca4:	f0 e0       	ldi	r31, 0x00	; 0
    2ca6:	81 81       	ldd	r24, Z+1	; 0x01
    2ca8:	81 60       	ori	r24, 0x01	; 1
	CCP = CCP_IOREG_gc; // grab permission to modify the reset reg
    2caa:	98 ed       	ldi	r25, 0xD8	; 216
    2cac:	94 bf       	out	0x34, r25	; 52
	RST.CTRL = temp; // set the reset reg to trigger a SW reset
    2cae:	81 83       	std	Z+1, r24	; 0x01
    2cb0:	08 95       	ret

00002cb2 <crcCalc>:
byte crcCalc(byte currCrc, byte newVal)
{
    byte crc = currCrc;
	int i;
	
	crc ^= newVal;
    2cb2:	68 27       	eor	r22, r24
    2cb4:	28 e0       	ldi	r18, 0x08	; 8
    2cb6:	30 e0       	ldi	r19, 0x00	; 0
    for (i=0; i<8; i++)
	{
        if (0x80 & crc) {
    2cb8:	67 ff       	sbrs	r22, 7
    2cba:	09 c0       	rjmp	.+18     	; 0x2cce <crcCalc+0x1c>
            crc = (crc << 1) ^ CRC_POLY;
    2cbc:	86 2f       	mov	r24, r22
    2cbe:	90 e0       	ldi	r25, 0x00	; 0
    2cc0:	88 0f       	add	r24, r24
    2cc2:	99 1f       	adc	r25, r25
    2cc4:	46 ea       	ldi	r20, 0xA6	; 166
    2cc6:	84 27       	eor	r24, r20
    2cc8:	90 95       	com	r25
    2cca:	68 2f       	mov	r22, r24
    2ccc:	01 c0       	rjmp	.+2      	; 0x2cd0 <crcCalc+0x1e>
        }
		else {
            crc = crc << 1;
    2cce:	66 0f       	add	r22, r22
    2cd0:	21 50       	subi	r18, 0x01	; 1
    2cd2:	31 09       	sbc	r19, r1
{
    byte crc = currCrc;
	int i;
	
	crc ^= newVal;
    for (i=0; i<8; i++)
    2cd4:	89 f7       	brne	.-30     	; 0x2cb8 <crcCalc+0x6>
		else {
            crc = crc << 1;
        }
    }
	return crc;
} 
    2cd6:	86 2f       	mov	r24, r22
    2cd8:	08 95       	ret

00002cda <ackHandler>:
// handles the ack byte and updates the packet queue
//    (parity, timer, CTS)
// inputs:  port received on
// returns: nothing
void ackHandler(PRef p)
{
    2cda:	0f 93       	push	r16
    2cdc:	1f 93       	push	r17
    2cde:	cf 93       	push	r28
    2ce0:	df 93       	push	r29
    byte currParity = sendParity(port[p].sq);
    2ce2:	98 e5       	ldi	r25, 0x58	; 88
    2ce4:	89 9f       	mul	r24, r25
    2ce6:	80 01       	movw	r16, r0
    2ce8:	11 24       	eor	r1, r1
    2cea:	e8 01       	movw	r28, r16
    2cec:	cc 5a       	subi	r28, 0xAC	; 172
    2cee:	db 4d       	sbci	r29, 0xDB	; 219
    2cf0:	3e 85       	ldd	r19, Y+14	; 0x0e
    
    // check for double acks (shouldn't ever happen)
    if( !(gotOddAck(port[p].rq) ^ gotEvenAck(port[p].rq)) ) 
    2cf2:	9d 89       	ldd	r25, Y+21	; 0x15
    2cf4:	29 2f       	mov	r18, r25
    2cf6:	26 95       	lsr	r18
    2cf8:	42 2f       	mov	r20, r18
    2cfa:	49 27       	eor	r20, r25
    2cfc:	9c 7f       	andi	r25, 0xFC	; 252
    {
        clearReceivedAcks( port[p].rq );
    2cfe:	9d 8b       	std	Y+21, r25	; 0x15
void ackHandler(PRef p)
{
    byte currParity = sendParity(port[p].sq);
    
    // check for double acks (shouldn't ever happen)
    if( !(gotOddAck(port[p].rq) ^ gotEvenAck(port[p].rq)) ) 
    2d00:	40 ff       	sbrs	r20, 0
    {
        clearReceivedAcks( port[p].rq );
        return;
    2d02:	18 c0       	rjmp	.+48     	; 0x2d34 <ackHandler+0x5a>
//    (parity, timer, CTS)
// inputs:  port received on
// returns: nothing
void ackHandler(PRef p)
{
    byte currParity = sendParity(port[p].sq);
    2d04:	32 fb       	bst	r19, 2
    2d06:	99 27       	eor	r25, r25
    2d08:	90 f9       	bld	r25, 0
    if( !(gotOddAck(port[p].rq) ^ gotEvenAck(port[p].rq)) ) 
    {
        clearReceivedAcks( port[p].rq );
        return;
    }
    byte recdParity = gotOddAck(port[p].rq);
    2d0a:	21 70       	andi	r18, 0x01	; 1
    clearReceivedAcks( port[p].rq );
    
    // parity matches
    if(currParity == recdParity)
    2d0c:	92 13       	cpse	r25, r18
    2d0e:	12 c0       	rjmp	.+36     	; 0x2d34 <ackHandler+0x5a>
    {
        // remove the Chunk, call callback with successfull response
        removeFromSq(p, MSG_RESP_ACK);
    2d10:	68 e0       	ldi	r22, 0x08	; 8
    2d12:	0e 94 d5 02 	call	0x5aa	; 0x5aa <removeFromSq>
        
        // reset the flags
        port[p].sq.retry    = NUM_RETRIES;
    2d16:	94 e0       	ldi	r25, 0x04	; 4
    2d18:	9d 87       	std	Y+13, r25	; 0x0d
        flipParity(port[p].sq);
    2d1a:	8e 85       	ldd	r24, Y+14	; 0x0e
    2d1c:	89 27       	eor	r24, r25
        port[p].sq.flags   |= CLEAR_TO_SEND;
    2d1e:	80 64       	ori	r24, 0x40	; 64
    2d20:	8e 87       	std	Y+14, r24	; 0x0e
        
        // reset the timer
        deregisterTimeout(&(port[p].sq.qtout.tout));
    2d22:	c8 01       	movw	r24, r16
    2d24:	8b 5a       	subi	r24, 0xAB	; 171
    2d26:	9b 4d       	sbci	r25, 0xDB	; 219
    }
    // else, parity error - don't do anything
}
    2d28:	df 91       	pop	r29
    2d2a:	cf 91       	pop	r28
    2d2c:	1f 91       	pop	r17
    2d2e:	0f 91       	pop	r16
        port[p].sq.retry    = NUM_RETRIES;
        flipParity(port[p].sq);
        port[p].sq.flags   |= CLEAR_TO_SEND;
        
        // reset the timer
        deregisterTimeout(&(port[p].sq.qtout.tout));
    2d30:	0c 94 ef 09 	jmp	0x13de	; 0x13de <deregisterTimeout>
    }
    // else, parity error - don't do anything
}
    2d34:	df 91       	pop	r29
    2d36:	cf 91       	pop	r28
    2d38:	1f 91       	pop	r17
    2d3a:	0f 91       	pop	r16
    2d3c:	08 95       	ret

00002d3e <addToGlobalRq>:

// adds a Chunk to the global receive queue
void addToGlobalRq(Chunk* c)
{
    // nothing to add
    if( c == NULL ) 
    2d3e:	00 97       	sbiw	r24, 0x00	; 0
    2d40:	d9 f0       	breq	.+54     	; 0x2d78 <addToGlobalRq+0x3a>
    {
        return;
    }
        
    // isolate Chunk
    c->next = NULL;
    2d42:	fc 01       	movw	r30, r24
    2d44:	12 8a       	std	Z+18, r1	; 0x12
    2d46:	13 8a       	std	Z+19, r1	; 0x13
    
    // update pointers
    if( globalRq.head == NULL ) 
    2d48:	20 91 4a 21 	lds	r18, 0x214A
    2d4c:	30 91 4b 21 	lds	r19, 0x214B
    2d50:	23 2b       	or	r18, r19
    2d52:	29 f4       	brne	.+10     	; 0x2d5e <addToGlobalRq+0x20>
    {
        globalRq.head = c;
    2d54:	80 93 4a 21 	sts	0x214A, r24
    2d58:	90 93 4b 21 	sts	0x214B, r25
    2d5c:	06 c0       	rjmp	.+12     	; 0x2d6a <addToGlobalRq+0x2c>
    }
    else 
    {
        globalRq.tail->next = c;
    2d5e:	e0 91 4c 21 	lds	r30, 0x214C
    2d62:	f0 91 4d 21 	lds	r31, 0x214D
    2d66:	82 8b       	std	Z+18, r24	; 0x12
    2d68:	93 8b       	std	Z+19, r25	; 0x13
    }
    
    // add/flag it
    globalRq.tail  = c;
    2d6a:	80 93 4c 21 	sts	0x214C, r24
    2d6e:	90 93 4d 21 	sts	0x214D, r25
    globalRq.flags = PACKET_READY;
    2d72:	80 e8       	ldi	r24, 0x80	; 128
    2d74:	80 93 4e 21 	sts	0x214E, r24
    2d78:	08 95       	ret

00002d7a <isSpecial>:
}

// check to see if character is special
byte isSpecial(byte val)
{
    2d7a:	28 2f       	mov	r18, r24
    if( ((val & ACK_MASK) == ACK   ) || ((val & ACK_MASK) == NACK  ) ||
    2d7c:	98 2f       	mov	r25, r24
    2d7e:	9e 7f       	andi	r25, 0xFE	; 254
        ((val & FD_MASK)  == FD    ) || (val              == ESCAPE )   )
    {
        return 1;
    2d80:	81 e0       	ldi	r24, 0x01	; 1
}

// check to see if character is special
byte isSpecial(byte val)
{
    if( ((val & ACK_MASK) == ACK   ) || ((val & ACK_MASK) == NACK  ) ||
    2d82:	98 30       	cpi	r25, 0x08	; 8
    2d84:	41 f0       	breq	.+16     	; 0x2d96 <isSpecial+0x1c>
    2d86:	9a 30       	cpi	r25, 0x0A	; 10
    2d88:	31 f0       	breq	.+12     	; 0x2d96 <isSpecial+0x1c>
    2d8a:	92 31       	cpi	r25, 0x12	; 18
    2d8c:	29 f0       	breq	.+10     	; 0x2d98 <isSpecial+0x1e>
        ((val & FD_MASK)  == FD    ) || (val              == ESCAPE )   )
    2d8e:	2d 37       	cpi	r18, 0x7D	; 125
    2d90:	19 f0       	breq	.+6      	; 0x2d98 <isSpecial+0x1e>
    2d92:	80 e0       	ldi	r24, 0x00	; 0
    2d94:	08 95       	ret
    2d96:	08 95       	ret
    {
        return 1;
    }
        
    return 0;
}
    2d98:	08 95       	ret

00002d9a <sendToBuffer>:

// makes the Chunk into the correct send string
void sendToBuffer(PRef p, Chunk* c, byte parity)
{
    2d9a:	9f 92       	push	r9
    2d9c:	af 92       	push	r10
    2d9e:	bf 92       	push	r11
    2da0:	cf 92       	push	r12
    2da2:	df 92       	push	r13
    2da4:	ef 92       	push	r14
    2da6:	ff 92       	push	r15
    2da8:	0f 93       	push	r16
    2daa:	1f 93       	push	r17
    2dac:	cf 93       	push	r28
    2dae:	df 93       	push	r29
    2db0:	b8 2e       	mov	r11, r24
    2db2:	7b 01       	movw	r14, r22
    byte checksum = 0;
    byte val;
    byte i;
    byte delim;
    
    if(c == NULL)
    2db4:	61 15       	cp	r22, r1
    2db6:	71 05       	cpc	r23, r1
    2db8:	09 f4       	brne	.+2      	; 0x2dbc <sendToBuffer+0x22>
    2dba:	83 c0       	rjmp	.+262    	; 0x2ec2 <sendToBuffer+0x128>
    {
        return;
    }
	
    // send FD
    delim = (FD | parity);
    2dbc:	62 e1       	ldi	r22, 0x12	; 18
    2dbe:	c6 2e       	mov	r12, r22
    2dc0:	c4 2a       	or	r12, r20
    2dc2:	00 e0       	ldi	r16, 0x00	; 0
    2dc4:	10 e0       	ldi	r17, 0x00	; 0
}

// makes the Chunk into the correct send string
void sendToBuffer(PRef p, Chunk* c, byte parity)
{
    byte checksum = 0;
    2dc6:	d1 2c       	mov	r13, r1
            push(val^ESCAPE_CHAR, &(port[p].tx));
        }
        // send regular
        else 
        {
            push(val, &(port[p].tx));
    2dc8:	88 e5       	ldi	r24, 0x58	; 88
    2dca:	b8 9e       	mul	r11, r24
    2dcc:	e0 01       	movw	r28, r0
    2dce:	11 24       	eor	r1, r1
    2dd0:	c4 57       	subi	r28, 0x74	; 116
    2dd2:	db 4d       	sbci	r29, 0xDB	; 219
        
        // escape it
        if( isSpecial(val) ) 
        {
            push(ESCAPE, &(port[p].tx));
            push(val^ESCAPE_CHAR, &(port[p].tx));
    2dd4:	70 e2       	ldi	r23, 0x20	; 32
    2dd6:	97 2e       	mov	r9, r23
        
    return 0;
}

// makes the Chunk into the correct send string
void sendToBuffer(PRef p, Chunk* c, byte parity)
    2dd8:	f7 01       	movw	r30, r14
    2dda:	e0 0f       	add	r30, r16
    2ddc:	f1 1f       	adc	r31, r17
    delim = (FD | parity);

    // send messageHandler
    for(i=0; i<POINTER_SIZE; i++)
    {
        val = c->handler[i];
    2dde:	a4 88       	ldd	r10, Z+20	; 0x14
        checksum = crcCalc(checksum, val);
    2de0:	6a 2d       	mov	r22, r10
    2de2:	8d 2d       	mov	r24, r13
    2de4:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <crcCalc>
    2de8:	d8 2e       	mov	r13, r24
        
        // escape it
        if( isSpecial(val) ) 
    2dea:	8a 2d       	mov	r24, r10
    2dec:	0e 94 bd 16 	call	0x2d7a	; 0x2d7a <isSpecial>
        {
            push(ESCAPE, &(port[p].tx));
    2df0:	be 01       	movw	r22, r28
    {
        val = c->handler[i];
        checksum = crcCalc(checksum, val);
        
        // escape it
        if( isSpecial(val) ) 
    2df2:	88 23       	and	r24, r24
    2df4:	39 f0       	breq	.+14     	; 0x2e04 <sendToBuffer+0x6a>
        {
            push(ESCAPE, &(port[p].tx));
    2df6:	8d e7       	ldi	r24, 0x7D	; 125
    2df8:	0e 94 7f 02 	call	0x4fe	; 0x4fe <push>
            push(val^ESCAPE_CHAR, &(port[p].tx));
    2dfc:	be 01       	movw	r22, r28
    2dfe:	8a 2d       	mov	r24, r10
    2e00:	89 25       	eor	r24, r9
    2e02:	01 c0       	rjmp	.+2      	; 0x2e06 <sendToBuffer+0x6c>
        }
        // send regular
        else 
        {
            push(val, &(port[p].tx));
    2e04:	8a 2d       	mov	r24, r10
    2e06:	0e 94 7f 02 	call	0x4fe	; 0x4fe <push>
    2e0a:	0f 5f       	subi	r16, 0xFF	; 255
    2e0c:	1f 4f       	sbci	r17, 0xFF	; 255
	
    // send FD
    delim = (FD | parity);

    // send messageHandler
    for(i=0; i<POINTER_SIZE; i++)
    2e0e:	02 30       	cpi	r16, 0x02	; 2
    2e10:	11 05       	cpc	r17, r1
    2e12:	11 f7       	brne	.-60     	; 0x2dd8 <sendToBuffer+0x3e>
    2e14:	01 e1       	ldi	r16, 0x11	; 17
            push(val^ESCAPE_CHAR, &(port[p].tx));
        }
        // send regular
        else 
        {
            push(val, &(port[p].tx));
    2e16:	e8 e5       	ldi	r30, 0x58	; 88
    2e18:	be 9e       	mul	r11, r30
    2e1a:	e0 01       	movw	r28, r0
    2e1c:	11 24       	eor	r1, r1
    2e1e:	c4 57       	subi	r28, 0x74	; 116
    2e20:	db 4d       	sbci	r29, 0xDB	; 219
        // escape it
        if( isSpecial(val) ) 
        {
            push(ESCAPE, &(port[p].tx));

            push(val^ESCAPE_CHAR, &(port[p].tx));
    2e22:	50 e2       	ldi	r21, 0x20	; 32
    2e24:	95 2e       	mov	r9, r21
    }
    
    // send data
    for(i=0; i<DATA_SIZE; i++)
    {
        val = c->data[i];
    2e26:	f7 01       	movw	r30, r14
    2e28:	11 91       	ld	r17, Z+
    2e2a:	7f 01       	movw	r14, r30
        checksum = crcCalc(checksum, val);
    2e2c:	61 2f       	mov	r22, r17
    2e2e:	8d 2d       	mov	r24, r13
    2e30:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <crcCalc>
    2e34:	d8 2e       	mov	r13, r24
        
        // escape it
        if( isSpecial(val) ) 
    2e36:	81 2f       	mov	r24, r17
    2e38:	0e 94 bd 16 	call	0x2d7a	; 0x2d7a <isSpecial>
    2e3c:	a8 2e       	mov	r10, r24
        {
            push(ESCAPE, &(port[p].tx));
    2e3e:	be 01       	movw	r22, r28
    {
        val = c->data[i];
        checksum = crcCalc(checksum, val);
        
        // escape it
        if( isSpecial(val) ) 
    2e40:	88 23       	and	r24, r24
    2e42:	39 f0       	breq	.+14     	; 0x2e52 <sendToBuffer+0xb8>
        {
            push(ESCAPE, &(port[p].tx));
    2e44:	8d e7       	ldi	r24, 0x7D	; 125
    2e46:	0e 94 7f 02 	call	0x4fe	; 0x4fe <push>

            push(val^ESCAPE_CHAR, &(port[p].tx));
    2e4a:	be 01       	movw	r22, r28
    2e4c:	81 2f       	mov	r24, r17
    2e4e:	89 25       	eor	r24, r9
    2e50:	01 c0       	rjmp	.+2      	; 0x2e54 <sendToBuffer+0xba>
        }
        // send regular
        else 
        {
            push(val, &(port[p].tx));
    2e52:	81 2f       	mov	r24, r17
    2e54:	0e 94 7f 02 	call	0x4fe	; 0x4fe <push>
    2e58:	01 50       	subi	r16, 0x01	; 1
            push(val, &(port[p].tx));
        }
    }
    
    // send data
    for(i=0; i<DATA_SIZE; i++)
    2e5a:	29 f7       	brne	.-54     	; 0x2e26 <sendToBuffer+0x8c>
    2e5c:	2b 2d       	mov	r18, r11
    2e5e:	30 e0       	ldi	r19, 0x00	; 0

    // send checksum
	// escape it
    if( isSpecial(val) ) 
    {
        push(ESCAPE, &(port[p].tx));
    2e60:	88 e5       	ldi	r24, 0x58	; 88
        }
    }

    // send checksum
	// escape it
    if( isSpecial(val) ) 
    2e62:	aa 20       	and	r10, r10
    2e64:	79 f0       	breq	.+30     	; 0x2e84 <sendToBuffer+0xea>
    {
        push(ESCAPE, &(port[p].tx));
    2e66:	82 9f       	mul	r24, r18
    2e68:	e0 01       	movw	r28, r0
    2e6a:	83 9f       	mul	r24, r19
    2e6c:	d0 0d       	add	r29, r0
    2e6e:	11 24       	eor	r1, r1
    2e70:	c4 57       	subi	r28, 0x74	; 116
    2e72:	db 4d       	sbci	r29, 0xDB	; 219
    2e74:	be 01       	movw	r22, r28
    2e76:	8d e7       	ldi	r24, 0x7D	; 125
    2e78:	0e 94 7f 02 	call	0x4fe	; 0x4fe <push>
        push(checksum^ESCAPE_CHAR, &(port[p].tx));
    2e7c:	be 01       	movw	r22, r28
    2e7e:	80 e2       	ldi	r24, 0x20	; 32
    2e80:	8d 25       	eor	r24, r13
    2e82:	08 c0       	rjmp	.+16     	; 0x2e94 <sendToBuffer+0xfa>
    }
    // send regular
    else 
    {
        push(checksum, &(port[p].tx));
    2e84:	82 9f       	mul	r24, r18
    2e86:	b0 01       	movw	r22, r0
    2e88:	83 9f       	mul	r24, r19
    2e8a:	70 0d       	add	r23, r0
    2e8c:	11 24       	eor	r1, r1
    2e8e:	64 57       	subi	r22, 0x74	; 116
    2e90:	7b 4d       	sbci	r23, 0xDB	; 219
    2e92:	8d 2d       	mov	r24, r13
    2e94:	0e 94 7f 02 	call	0x4fe	; 0x4fe <push>
    }
    
    // start the interrupt by sending a byte (FD)
    pPutChar(delim, port[p].pnum);
    2e98:	88 e5       	ldi	r24, 0x58	; 88
    2e9a:	b8 9e       	mul	r11, r24
    2e9c:	f0 01       	movw	r30, r0
    2e9e:	11 24       	eor	r1, r1
    2ea0:	ec 5a       	subi	r30, 0xAC	; 172
    2ea2:	fb 4d       	sbci	r31, 0xDB	; 219
    2ea4:	60 81       	ld	r22, Z
    2ea6:	8c 2d       	mov	r24, r12
}
    2ea8:	df 91       	pop	r29
    2eaa:	cf 91       	pop	r28
    2eac:	1f 91       	pop	r17
    2eae:	0f 91       	pop	r16
    2eb0:	ff 90       	pop	r15
    2eb2:	ef 90       	pop	r14
    2eb4:	df 90       	pop	r13
    2eb6:	cf 90       	pop	r12
    2eb8:	bf 90       	pop	r11
    2eba:	af 90       	pop	r10
    2ebc:	9f 90       	pop	r9
    {
        push(checksum, &(port[p].tx));
    }
    
    // start the interrupt by sending a byte (FD)
    pPutChar(delim, port[p].pnum);
    2ebe:	0c 94 05 1a 	jmp	0x340a	; 0x340a <pPutChar>
}
    2ec2:	df 91       	pop	r29
    2ec4:	cf 91       	pop	r28
    2ec6:	1f 91       	pop	r17
    2ec8:	0f 91       	pop	r16
    2eca:	ff 90       	pop	r15
    2ecc:	ef 90       	pop	r14
    2ece:	df 90       	pop	r13
    2ed0:	cf 90       	pop	r12
    2ed2:	bf 90       	pop	r11
    2ed4:	af 90       	pop	r10
    2ed6:	9f 90       	pop	r9
    2ed8:	08 95       	ret

00002eda <processBuffer>:


// pulls bytes from the buffer and puts them into Chunks
// also handles ACKs appropriately
void processBuffer(PRef p)
{
    2eda:	2f 92       	push	r2
    2edc:	3f 92       	push	r3
    2ede:	4f 92       	push	r4
    2ee0:	5f 92       	push	r5
    2ee2:	6f 92       	push	r6
    2ee4:	7f 92       	push	r7
    2ee6:	8f 92       	push	r8
    2ee8:	9f 92       	push	r9
    2eea:	af 92       	push	r10
    2eec:	bf 92       	push	r11
    2eee:	cf 92       	push	r12
    2ef0:	df 92       	push	r13
    2ef2:	ef 92       	push	r14
    2ef4:	ff 92       	push	r15
    2ef6:	0f 93       	push	r16
    2ef8:	1f 93       	push	r17
    2efa:	cf 93       	push	r28
    2efc:	df 93       	push	r29
    2efe:	38 2e       	mov	r3, r24
    byte   currByte;
    Chunk* currChunk = NULL;
    byte   wasEscape = wasEscapeStore[p];
    2f00:	e8 2e       	mov	r14, r24
    2f02:	f1 2c       	mov	r15, r1
    2f04:	f7 01       	movw	r30, r14
    2f06:	ee 55       	subi	r30, 0x5E	; 94
    2f08:	f9 4d       	sbci	r31, 0xD9	; 217
    2f0a:	20 80       	ld	r2, Z


    // nothing to process
    if( isEmpty(&(port[p].rx)) )
    2f0c:	88 e5       	ldi	r24, 0x58	; 88
    2f0e:	8e 9d       	mul	r24, r14
    2f10:	e0 01       	movw	r28, r0
    2f12:	8f 9d       	mul	r24, r15
    2f14:	d0 0d       	add	r29, r0
    2f16:	11 24       	eor	r1, r1
    2f18:	fc e6       	ldi	r31, 0x6C	; 108
    2f1a:	6f 2e       	mov	r6, r31
    2f1c:	f4 e2       	ldi	r31, 0x24	; 36
    2f1e:	7f 2e       	mov	r7, r31
    2f20:	6c 0e       	add	r6, r28
    2f22:	7d 1e       	adc	r7, r29
    2f24:	c3 01       	movw	r24, r6
    2f26:	0e 94 b5 02 	call	0x56a	; 0x56a <isEmpty>
    2f2a:	81 11       	cpse	r24, r1
    2f2c:	d1 c0       	rjmp	.+418    	; 0x30d0 <processBuffer+0x1f6>
    {
        return;
    }

    // continue filling unfinished Chunk
    if( (port[p].rq.curr != NULL) && chunkFilling(port[p].rq.curr) ) 
    2f2e:	fe 01       	movw	r30, r28
    2f30:	ec 5a       	subi	r30, 0xAC	; 172
    2f32:	fb 4d       	sbci	r31, 0xDB	; 219
    2f34:	46 88       	ldd	r4, Z+22	; 0x16
    2f36:	57 88       	ldd	r5, Z+23	; 0x17
    2f38:	41 14       	cp	r4, r1
    2f3a:	51 04       	cpc	r5, r1
    2f3c:	21 f0       	breq	.+8      	; 0x2f46 <processBuffer+0x6c>
    2f3e:	f2 01       	movw	r30, r4
    2f40:	81 89       	ldd	r24, Z+17	; 0x11
    2f42:	86 fd       	sbrc	r24, 6
    2f44:	a4 c0       	rjmp	.+328    	; 0x308e <processBuffer+0x1b4>
    {
        currChunk = port[p].rq.curr;
    }
    else
    {
        port[p].rq.index    = 0;
    2f46:	88 e5       	ldi	r24, 0x58	; 88
    2f48:	8e 9d       	mul	r24, r14
    2f4a:	f0 01       	movw	r30, r0
    2f4c:	8f 9d       	mul	r24, r15
    2f4e:	f0 0d       	add	r31, r0
    2f50:	11 24       	eor	r1, r1
    2f52:	ec 5a       	subi	r30, 0xAC	; 172
    2f54:	fb 4d       	sbci	r31, 0xDB	; 219
    2f56:	13 8a       	std	Z+19, r1	; 0x13
        port[p].rq.checksum = 0;
    2f58:	14 8a       	std	Z+20, r1	; 0x14
        wasEscape           = 0;
    2f5a:	21 2c       	mov	r2, r1
// pulls bytes from the buffer and puts them into Chunks
// also handles ACKs appropriately
void processBuffer(PRef p)
{
    byte   currByte;
    Chunk* currChunk = NULL;
    2f5c:	41 2c       	mov	r4, r1
    2f5e:	51 2c       	mov	r5, r1
    2f60:	96 c0       	rjmp	.+300    	; 0x308e <processBuffer+0x1b4>
        wasEscape           = 0;
    }
                
    while( !isEmpty(&(port[p].rx)) )
    {
        currByte = (byte)pop(&(port[p].rx));
    2f62:	c3 01       	movw	r24, r6
    2f64:	0e 94 9a 02 	call	0x534	; 0x534 <pop>
        
        // is ACK
        if( (currByte & ACK_MASK) == ACK )
    2f68:	bc 01       	movw	r22, r24
    2f6a:	6e 7f       	andi	r22, 0xFE	; 254
    2f6c:	77 27       	eor	r23, r23
    2f6e:	68 30       	cpi	r22, 0x08	; 8
    2f70:	71 05       	cpc	r23, r1
    2f72:	91 f4       	brne	.+36     	; 0x2f98 <processBuffer+0xbe>
        {
            // set ack parity
            port[p].rq.flags |= (1 << (currByte & 0x01));
    2f74:	81 70       	andi	r24, 0x01	; 1
    2f76:	99 27       	eor	r25, r25
    2f78:	21 e0       	ldi	r18, 0x01	; 1
    2f7a:	30 e0       	ldi	r19, 0x00	; 0
    2f7c:	02 c0       	rjmp	.+4      	; 0x2f82 <processBuffer+0xa8>
    2f7e:	22 0f       	add	r18, r18
    2f80:	33 1f       	adc	r19, r19
    2f82:	8a 95       	dec	r24
    2f84:	e2 f7       	brpl	.-8      	; 0x2f7e <processBuffer+0xa4>
    2f86:	c9 01       	movw	r24, r18
    2f88:	f8 01       	movw	r30, r16
    2f8a:	90 81       	ld	r25, Z
    2f8c:	98 2b       	or	r25, r24
    2f8e:	90 83       	st	Z, r25
        
            ackHandler(p);
    2f90:	83 2d       	mov	r24, r3
    2f92:	0e 94 6d 16 	call	0x2cda	; 0x2cda <ackHandler>
            continue;
    2f96:	92 c0       	rjmp	.+292    	; 0x30bc <processBuffer+0x1e2>
	        nackHandler(p);
	        continue;
	        }*/
        
        // is FRAME_DELIMETER
        if( (currByte & FD_MASK) == FD )
    2f98:	62 31       	cpi	r22, 0x12	; 18
    2f9a:	71 05       	cpc	r23, r1
    2f9c:	01 f5       	brne	.+64     	; 0x2fde <processBuffer+0x104>
        {
            // determine parity
            byte parity = setParityFromByte(currByte);
    2f9e:	81 70       	andi	r24, 0x01	; 1
    2fa0:	99 27       	eor	r25, r25
    2fa2:	28 2e       	mov	r2, r24
    2fa4:	22 94       	swap	r2
    2fa6:	22 0c       	add	r2, r2
    2fa8:	e0 ee       	ldi	r30, 0xE0	; 224
    2faa:	2e 22       	and	r2, r30
        
            // restart the fill
            port[p].rq.index    = 0;
    2fac:	f6 01       	movw	r30, r12
    2fae:	10 82       	st	Z, r1
            port[p].rq.checksum = 0;
    2fb0:	f5 01       	movw	r30, r10
    2fb2:	10 82       	st	Z, r1
            wasEscape           = 0;
                
            // unfinished Chunk
            if(port[p].rq.curr != NULL)
    2fb4:	f4 01       	movw	r30, r8
    2fb6:	40 80       	ld	r4, Z
    2fb8:	51 80       	ldd	r5, Z+1	; 0x01
    2fba:	41 14       	cp	r4, r1
    2fbc:	51 04       	cpc	r5, r1
    2fbe:	49 f4       	brne	.+18     	; 0x2fd2 <processBuffer+0xf8>
                currChunk = port[p].rq.curr;
            }
            // need new Chunk
            else
            {
                currChunk = getSystemRXChunk();
    2fc0:	0e 94 46 08 	call	0x108c	; 0x108c <getSystemRXChunk>
    2fc4:	2c 01       	movw	r4, r24
					// insert receive time
					//insertReceiveTime(currChunk);
				}*/
#endif
                // out of memory, can't fill
                if( currChunk == NULL )
    2fc6:	00 97       	sbiw	r24, 0x00	; 0
    2fc8:	09 f4       	brne	.+2      	; 0x2fcc <processBuffer+0xf2>
    2fca:	5c c0       	rjmp	.+184    	; 0x3084 <processBuffer+0x1aa>
                    // discard bytes, hopefully will get resent
                    continue;
                }
                
                // add to the queue
                port[p].rq.curr = currChunk;
    2fcc:	f4 01       	movw	r30, r8
    2fce:	80 83       	st	Z, r24
    2fd0:	91 83       	std	Z+1, r25	; 0x01
            }
            
            // reset the status of the Chunk, just in case
            currChunk->status = CHUNK_USED | CHUNK_FILLING | parity | port[p].pnum;
    2fd2:	98 81       	ld	r25, Y
    2fd4:	90 6c       	ori	r25, 0xC0	; 192
    2fd6:	92 29       	or	r25, r2
    2fd8:	f2 01       	movw	r30, r4
    2fda:	91 8b       	std	Z+17, r25	; 0x11
    2fdc:	53 c0       	rjmp	.+166    	; 0x3084 <processBuffer+0x1aa>
            
            continue;
        }
        
        // no use processing if can't put anywhere
        if(currChunk == NULL)
    2fde:	41 14       	cp	r4, r1
    2fe0:	51 04       	cpc	r5, r1
    2fe2:	09 f4       	brne	.+2      	; 0x2fe6 <processBuffer+0x10c>
    2fe4:	6b c0       	rjmp	.+214    	; 0x30bc <processBuffer+0x1e2>
        wasEscape           = 0;
    }
                
    while( !isEmpty(&(port[p].rx)) )
    {
        currByte = (byte)pop(&(port[p].rx));
    2fe6:	68 2f       	mov	r22, r24
        {
            continue;
        }
        
        // is an escape char        
        if( currByte == ESCAPE )
    2fe8:	8d 37       	cpi	r24, 0x7D	; 125
    2fea:	09 f4       	brne	.+2      	; 0x2fee <processBuffer+0x114>
    2fec:	4d c0       	rjmp	.+154    	; 0x3088 <processBuffer+0x1ae>
            continue;
        }

        // is a regular character
        // was escaped
        if( wasEscape )
    2fee:	22 20       	and	r2, r2
    2ff0:	19 f0       	breq	.+6      	; 0x2ff8 <processBuffer+0x11e>
        {
            currByte ^= ESCAPE_CHAR;
    2ff2:	f0 e2       	ldi	r31, 0x20	; 32
    2ff4:	8f 27       	eor	r24, r31
    2ff6:	68 2f       	mov	r22, r24
            wasEscape = 0;
        }

        // is transmitted checksum
        if( port[p].rq.index >= (DATA_SIZE + POINTER_SIZE) )
    2ff8:	f6 01       	movw	r30, r12
    2ffa:	80 81       	ld	r24, Z
    2ffc:	83 31       	cpi	r24, 0x13	; 19
    2ffe:	70 f1       	brcs	.+92     	; 0x305c <processBuffer+0x182>
        {
            // checksum matches!
            if( currByte == port[p].rq.checksum )
    3000:	f5 01       	movw	r30, r10
    3002:	80 81       	ld	r24, Z
    3004:	68 13       	cpse	r22, r24
    3006:	22 c0       	rjmp	.+68     	; 0x304c <processBuffer+0x172>
            {
                currChunk->status &= ~CHUNK_FILLING;
    3008:	f2 01       	movw	r30, r4
    300a:	81 89       	ldd	r24, Z+17	; 0x11
    300c:	8f 7b       	andi	r24, 0xBF	; 191
    300e:	81 8b       	std	Z+17, r24	; 0x11
                port[p].rq.flags  |=  CHUNK_READY;
    3010:	f8 01       	movw	r30, r16
    3012:	80 81       	ld	r24, Z
    3014:	80 68       	ori	r24, 0x80	; 128
    3016:	80 83       	st	Z, r24
				
                // check for parity error
                byte parity = chunkParity(currChunk);
    3018:	f2 01       	movw	r30, r4
    301a:	91 89       	ldd	r25, Z+17	; 0x11
    301c:	95 fb       	bst	r25, 5
    301e:	99 27       	eor	r25, r25
    3020:	90 f9       	bld	r25, 0
                byte last   = parityLastChunk(port[p].rq);
    3022:	86 fb       	bst	r24, 6
    3024:	88 27       	eor	r24, r24
    3026:	80 f9       	bld	r24, 0
	      
                // not a duplicate packet		
                if(parity != last) {
    3028:	98 17       	cp	r25, r24
    302a:	51 f0       	breq	.+20     	; 0x3040 <processBuffer+0x166>
						// insert receive time
						insertReceiveTime(currChunk);
					}
#endif
                    // add to global receive queue
                    addToGlobalRq(currChunk);
    302c:	c2 01       	movw	r24, r4
    302e:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <addToGlobalRq>
		
                    // flip the parity
                    flipParityLast(port[p].rq);
    3032:	f8 01       	movw	r30, r16
    3034:	80 81       	ld	r24, Z
    3036:	f0 e4       	ldi	r31, 0x40	; 64
    3038:	8f 27       	eor	r24, r31
    303a:	f8 01       	movw	r30, r16
    303c:	80 83       	st	Z, r24
    303e:	03 c0       	rjmp	.+6      	; 0x3046 <processBuffer+0x16c>
                }
                // free the chunk
                else 
                {
                    freeChunk(currChunk);
    3040:	c2 01       	movw	r24, r4
    3042:	0e 94 1a 08 	call	0x1034	; 0x1034 <freeChunk>
                }
              
                // remove from the port rq
                port[p].rq.curr = NULL;
    3046:	f4 01       	movw	r30, r8
    3048:	10 82       	st	Z, r1
    304a:	11 82       	std	Z+1, r1	; 0x01
            }
            
            // reset the data
            port[p].rq.index    = 0;
    304c:	f6 01       	movw	r30, r12
    304e:	10 82       	st	Z, r1
            port[p].rq.checksum = 0;
    3050:	f5 01       	movw	r30, r10
    3052:	10 82       	st	Z, r1
            wasEscape           = 0;
    3054:	21 2c       	mov	r2, r1
            currChunk           = NULL;
    3056:	41 2c       	mov	r4, r1
    3058:	51 2c       	mov	r5, r1
	    
            /// TODO: send NACK
            continue;
    305a:	30 c0       	rjmp	.+96     	; 0x30bc <processBuffer+0x1e2>
    305c:	e8 2f       	mov	r30, r24
    305e:	f0 e0       	ldi	r31, 0x00	; 0
        }
		
        // message handler
        if( port[p].rq.index < POINTER_SIZE )
        {
            currChunk->handler[port[p].rq.index] = currByte;
    3060:	e4 0d       	add	r30, r4
    3062:	f5 1d       	adc	r31, r5
            /// TODO: send NACK
            continue;
        }
		
        // message handler
        if( port[p].rq.index < POINTER_SIZE )
    3064:	82 30       	cpi	r24, 0x02	; 2
    3066:	10 f4       	brcc	.+4      	; 0x306c <processBuffer+0x192>
        {
            currChunk->handler[port[p].rq.index] = currByte;
    3068:	64 8b       	std	Z+20, r22	; 0x14
    306a:	02 c0       	rjmp	.+4      	; 0x3070 <processBuffer+0x196>
        }
        // regular byte
        else
        {
            currChunk->data[port[p].rq.index-POINTER_SIZE] = currByte;
    306c:	32 97       	sbiw	r30, 0x02	; 2
    306e:	60 83       	st	Z, r22
        }

        port[p].rq.checksum = crcCalc(port[p].rq.checksum, currByte);
    3070:	f5 01       	movw	r30, r10
    3072:	80 81       	ld	r24, Z
    3074:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <crcCalc>
    3078:	f5 01       	movw	r30, r10
    307a:	80 83       	st	Z, r24
        port[p].rq.index++;
    307c:	f6 01       	movw	r30, r12
    307e:	80 81       	ld	r24, Z
    3080:	8f 5f       	subi	r24, 0xFF	; 255
    3082:	80 83       	st	Z, r24
            byte parity = setParityFromByte(currByte);
        
            // restart the fill
            port[p].rq.index    = 0;
            port[p].rq.checksum = 0;
            wasEscape           = 0;
    3084:	21 2c       	mov	r2, r1
    3086:	1a c0       	rjmp	.+52     	; 0x30bc <processBuffer+0x1e2>
        }
        
        // is an escape char        
        if( currByte == ESCAPE )
        {
            wasEscape = 1;   
    3088:	22 24       	eor	r2, r2
    308a:	23 94       	inc	r2
    308c:	17 c0       	rjmp	.+46     	; 0x30bc <processBuffer+0x1e2>
            currByte ^= ESCAPE_CHAR;
            wasEscape = 0;
        }

        // is transmitted checksum
        if( port[p].rq.index >= (DATA_SIZE + POINTER_SIZE) )
    308e:	88 e5       	ldi	r24, 0x58	; 88
    3090:	8e 9d       	mul	r24, r14
    3092:	e0 01       	movw	r28, r0
    3094:	8f 9d       	mul	r24, r15
    3096:	d0 0d       	add	r29, r0
    3098:	11 24       	eor	r1, r1
    309a:	cc 5a       	subi	r28, 0xAC	; 172
    309c:	db 4d       	sbci	r29, 0xDB	; 219
    309e:	6e 01       	movw	r12, r28
    30a0:	f3 e1       	ldi	r31, 0x13	; 19
    30a2:	cf 0e       	add	r12, r31
    30a4:	d1 1c       	adc	r13, r1
        else
        {
            currChunk->data[port[p].rq.index-POINTER_SIZE] = currByte;
        }

        port[p].rq.checksum = crcCalc(port[p].rq.checksum, currByte);
    30a6:	5e 01       	movw	r10, r28
    30a8:	24 e1       	ldi	r18, 0x14	; 20
    30aa:	a2 0e       	add	r10, r18
    30ac:	b1 1c       	adc	r11, r1
        {
            // checksum matches!
            if( currByte == port[p].rq.checksum )
            {
                currChunk->status &= ~CHUNK_FILLING;
                port[p].rq.flags  |=  CHUNK_READY;
    30ae:	8e 01       	movw	r16, r28
    30b0:	0b 5e       	subi	r16, 0xEB	; 235
    30b2:	1f 4f       	sbci	r17, 0xFF	; 255
                {
                    freeChunk(currChunk);
                }
              
                // remove from the port rq
                port[p].rq.curr = NULL;
    30b4:	4e 01       	movw	r8, r28
    30b6:	36 e1       	ldi	r19, 0x16	; 22
    30b8:	83 0e       	add	r8, r19
    30ba:	91 1c       	adc	r9, r1
        port[p].rq.index    = 0;
        port[p].rq.checksum = 0;
        wasEscape           = 0;
    }
                
    while( !isEmpty(&(port[p].rx)) )
    30bc:	c3 01       	movw	r24, r6
    30be:	0e 94 b5 02 	call	0x56a	; 0x56a <isEmpty>
    30c2:	88 23       	and	r24, r24
    30c4:	09 f4       	brne	.+2      	; 0x30c8 <processBuffer+0x1ee>
    30c6:	4d cf       	rjmp	.-358    	; 0x2f62 <processBuffer+0x88>
        port[p].rq.checksum = crcCalc(port[p].rq.checksum, currByte);
        port[p].rq.index++;
    }
    
    // store wasEscape
    wasEscapeStore[p] = wasEscape;
    30c8:	f7 01       	movw	r30, r14
    30ca:	ee 55       	subi	r30, 0x5E	; 94
    30cc:	f9 4d       	sbci	r31, 0xD9	; 217
    30ce:	20 82       	st	Z, r2
}
    30d0:	df 91       	pop	r29
    30d2:	cf 91       	pop	r28
    30d4:	1f 91       	pop	r17
    30d6:	0f 91       	pop	r16
    30d8:	ff 90       	pop	r15
    30da:	ef 90       	pop	r14
    30dc:	df 90       	pop	r13
    30de:	cf 90       	pop	r12
    30e0:	bf 90       	pop	r11
    30e2:	af 90       	pop	r10
    30e4:	9f 90       	pop	r9
    30e6:	8f 90       	pop	r8
    30e8:	7f 90       	pop	r7
    30ea:	6f 90       	pop	r6
    30ec:	5f 90       	pop	r5
    30ee:	4f 90       	pop	r4
    30f0:	3f 90       	pop	r3
    30f2:	2f 90       	pop	r2
    30f4:	08 95       	ret

000030f6 <nextPacket>:
Chunk* nextPacket(void)
{
    Chunk* c = NULL;

    // no packets
    if( globalRq.head == NULL )
    30f6:	e0 91 4a 21 	lds	r30, 0x214A
    30fa:	f0 91 4b 21 	lds	r31, 0x214B
    30fe:	30 97       	sbiw	r30, 0x00	; 0
    3100:	51 f4       	brne	.+20     	; 0x3116 <nextPacket+0x20>
    {
        globalRq.tail = NULL;
    3102:	10 92 4c 21 	sts	0x214C, r1
    3106:	10 92 4d 21 	sts	0x214D, r1
        globalRq.flags &= ~PACKET_READY;
    310a:	80 91 4e 21 	lds	r24, 0x214E
    310e:	8f 77       	andi	r24, 0x7F	; 127
    3110:	80 93 4e 21 	sts	0x214E, r24
        return NULL;
    3114:	13 c0       	rjmp	.+38     	; 0x313c <nextPacket+0x46>
    }

    // update pointers
    c = globalRq.head;
    
    globalRq.head = c->next;
    3116:	82 89       	ldd	r24, Z+18	; 0x12
    3118:	93 89       	ldd	r25, Z+19	; 0x13
    311a:	80 93 4a 21 	sts	0x214A, r24
    311e:	90 93 4b 21 	sts	0x214B, r25
    if( globalRq.head == NULL )
    3122:	89 2b       	or	r24, r25
    3124:	49 f4       	brne	.+18     	; 0x3138 <nextPacket+0x42>
    {
        globalRq.flags &= ~PACKET_READY;
    3126:	80 91 4e 21 	lds	r24, 0x214E
    312a:	8f 77       	andi	r24, 0x7F	; 127
    312c:	80 93 4e 21 	sts	0x214E, r24
        globalRq.tail = NULL;
    3130:	10 92 4c 21 	sts	0x214C, r1
    3134:	10 92 4d 21 	sts	0x214D, r1
    }
    
    // isolate and return
    c->next = NULL;
    3138:	12 8a       	std	Z+18, r1	; 0x12
    313a:	13 8a       	std	Z+19, r1	; 0x13
    return c;
}
    313c:	cf 01       	movw	r24, r30
    313e:	08 95       	ret

00003140 <sendOnSerial>:

// try sending stuff if available and ready
void sendOnSerial(PRef p)
{
    3140:	df 92       	push	r13
    3142:	ef 92       	push	r14
    3144:	ff 92       	push	r15
    3146:	0f 93       	push	r16
    3148:	1f 93       	push	r17
    314a:	cf 93       	push	r28
    314c:	df 93       	push	r29
    314e:	d8 2e       	mov	r13, r24
    // send acks
    if( shouldSendOddAck(port[p].sq) )
    3150:	e8 2e       	mov	r14, r24
    3152:	f1 2c       	mov	r15, r1
    3154:	88 e5       	ldi	r24, 0x58	; 88
    3156:	d8 9e       	mul	r13, r24
    3158:	80 01       	movw	r16, r0
    315a:	11 24       	eor	r1, r1
    315c:	e8 01       	movw	r28, r16
    315e:	cc 5a       	subi	r28, 0xAC	; 172
    3160:	db 4d       	sbci	r29, 0xDB	; 219
    3162:	8e 85       	ldd	r24, Y+14	; 0x0e
    3164:	81 ff       	sbrs	r24, 1
    3166:	10 c0       	rjmp	.+32     	; 0x3188 <sendOnSerial+0x48>
    {
        if( isEmpty(&(port[p].tx)) ) {
    3168:	04 57       	subi	r16, 0x74	; 116
    316a:	1b 4d       	sbci	r17, 0xDB	; 219
    316c:	c8 01       	movw	r24, r16
    316e:	0e 94 b5 02 	call	0x56a	; 0x56a <isEmpty>
    3172:	88 23       	and	r24, r24
    3174:	29 f0       	breq	.+10     	; 0x3180 <sendOnSerial+0x40>
            pPutChar(ACK | ODD, port[p].pnum);
    3176:	68 81       	ld	r22, Y
    3178:	89 e0       	ldi	r24, 0x09	; 9
    317a:	0e 94 05 1a 	call	0x340a	; 0x340a <pPutChar>
    317e:	04 c0       	rjmp	.+8      	; 0x3188 <sendOnSerial+0x48>
        }
        else {
            push(ACK | ODD, &(port[p].tx));
    3180:	b8 01       	movw	r22, r16
    3182:	89 e0       	ldi	r24, 0x09	; 9
    3184:	0e 94 7f 02 	call	0x4fe	; 0x4fe <push>
        }
    }
    if( shouldSendEvenAck(port[p].sq) )
    3188:	88 e5       	ldi	r24, 0x58	; 88
    318a:	8e 9d       	mul	r24, r14
    318c:	e0 01       	movw	r28, r0
    318e:	8f 9d       	mul	r24, r15
    3190:	d0 0d       	add	r29, r0
    3192:	11 24       	eor	r1, r1
    3194:	8e 01       	movw	r16, r28
    3196:	0c 5a       	subi	r16, 0xAC	; 172
    3198:	1b 4d       	sbci	r17, 0xDB	; 219
    319a:	f8 01       	movw	r30, r16
    319c:	86 85       	ldd	r24, Z+14	; 0x0e
    319e:	80 ff       	sbrs	r24, 0
    31a0:	11 c0       	rjmp	.+34     	; 0x31c4 <sendOnSerial+0x84>
    {
        if( isEmpty(&(port[p].tx)) ) {
    31a2:	c4 57       	subi	r28, 0x74	; 116
    31a4:	db 4d       	sbci	r29, 0xDB	; 219
    31a6:	ce 01       	movw	r24, r28
    31a8:	0e 94 b5 02 	call	0x56a	; 0x56a <isEmpty>
    31ac:	88 23       	and	r24, r24
    31ae:	31 f0       	breq	.+12     	; 0x31bc <sendOnSerial+0x7c>
            pPutChar(ACK | EVEN, port[p].pnum);
    31b0:	f8 01       	movw	r30, r16
    31b2:	60 81       	ld	r22, Z
    31b4:	88 e0       	ldi	r24, 0x08	; 8
    31b6:	0e 94 05 1a 	call	0x340a	; 0x340a <pPutChar>
    31ba:	04 c0       	rjmp	.+8      	; 0x31c4 <sendOnSerial+0x84>
        }
        else {
            push(ACK | EVEN, &(port[p].tx));
    31bc:	be 01       	movw	r22, r28
    31be:	88 e0       	ldi	r24, 0x08	; 8
    31c0:	0e 94 7f 02 	call	0x4fe	; 0x4fe <push>
        }
    }
    clearSendAcks(port[p].sq);
    31c4:	88 e5       	ldi	r24, 0x58	; 88
    31c6:	8e 9d       	mul	r24, r14
    31c8:	80 01       	movw	r16, r0
    31ca:	8f 9d       	mul	r24, r15
    31cc:	10 0d       	add	r17, r0
    31ce:	11 24       	eor	r1, r1
    31d0:	e8 01       	movw	r28, r16
    31d2:	cc 5a       	subi	r28, 0xAC	; 172
    31d4:	db 4d       	sbci	r29, 0xDB	; 219
    31d6:	4e 85       	ldd	r20, Y+14	; 0x0e
    31d8:	4c 7f       	andi	r20, 0xFC	; 252
    31da:	4e 87       	std	Y+14, r20	; 0x0e
    
    // send Chunk?
    if( chunkReady(port[p].sq) )
    31dc:	47 ff       	sbrs	r20, 7
    31de:	37 c0       	rjmp	.+110    	; 0x324e <sendOnSerial+0x10e>
    {
        if( clearToSend(port[p].sq) )
    31e0:	46 ff       	sbrs	r20, 6
    31e2:	35 c0       	rjmp	.+106    	; 0x324e <sendOnSerial+0x10e>
        {
            // out of retries
            if( (port[p].sq.retry <= 0) || (port[p].sq.retry > NUM_RETRIES))
    31e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    31e6:	81 50       	subi	r24, 0x01	; 1
    31e8:	84 30       	cpi	r24, 0x04	; 4
    31ea:	78 f0       	brcs	.+30     	; 0x320a <sendOnSerial+0xca>
            {
                // reset the timer
                deregisterTimeout(&(port[p].sq.qtout.tout));
    31ec:	c8 01       	movw	r24, r16
    31ee:	8b 5a       	subi	r24, 0xAB	; 171
    31f0:	9b 4d       	sbci	r25, 0xDB	; 219
    31f2:	0e 94 ef 09 	call	0x13de	; 0x13de <deregisterTimeout>

                // flush the queue
                flushSendQueue(p);
    31f6:	8d 2d       	mov	r24, r13
    31f8:	0e 94 19 03 	call	0x632	; 0x632 <flushSendQueue>
                        
                // reset the flags
                port[p].sq.retry    = NUM_RETRIES;
    31fc:	94 e0       	ldi	r25, 0x04	; 4
    31fe:	9d 87       	std	Y+13, r25	; 0x0d
                port[p].sq.flags   |= CLEAR_TO_SEND;
    3200:	8e 85       	ldd	r24, Y+14	; 0x0e
    3202:	80 64       	ori	r24, 0x40	; 64
                flipParity(port[p].sq);
    3204:	89 27       	eor	r24, r25
    3206:	8e 87       	std	Y+14, r24	; 0x0e

                // ensemble level updates - remove neighbor, restart neighbor scanning
                //     These don't belong in data-link in my opinion
                //restartScan(p);

                return;
    3208:	22 c0       	rjmp	.+68     	; 0x324e <sendOnSerial+0x10e>
            }
            port[p].sq.retry--;
    320a:	8d 87       	std	Y+13, r24	; 0x0d
			{		
				// insert send time
				insertSendTime(port[p].sq.head);
			}
#endif
            sendToBuffer(p, port[p].sq.head, sendParity(port[p].sq) );
    320c:	42 fb       	bst	r20, 2
    320e:	44 27       	eor	r20, r20
    3210:	40 f9       	bld	r20, 0
    3212:	6f 85       	ldd	r22, Y+15	; 0x0f
    3214:	78 89       	ldd	r23, Y+16	; 0x10
    3216:	8d 2d       	mov	r24, r13
    3218:	0e 94 cd 16 	call	0x2d9a	; 0x2d9a <sendToBuffer>
            port[p].sq.flags &= ~CLEAR_TO_SEND;
    321c:	8e 85       	ldd	r24, Y+14	; 0x0e
    321e:	8f 7b       	andi	r24, 0xBF	; 191
    3220:	8e 87       	std	Y+14, r24	; 0x0e
            
            // start the timeout
            port[p].sq.qtout.tout.calltime = getTime() + DEFAULT_TIMEOUT;
    3222:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <getTime>
    3226:	6e 5c       	subi	r22, 0xCE	; 206
    3228:	7f 4f       	sbci	r23, 0xFF	; 255
    322a:	8f 4f       	sbci	r24, 0xFF	; 255
    322c:	9f 4f       	sbci	r25, 0xFF	; 255
    322e:	6b 83       	std	Y+3, r22	; 0x03
    3230:	7c 83       	std	Y+4, r23	; 0x04
    3232:	8d 83       	std	Y+5, r24	; 0x05
    3234:	9e 83       	std	Y+6, r25	; 0x06
            registerTimeout(&(port[p].sq.qtout.tout));
    3236:	c8 01       	movw	r24, r16
    3238:	8b 5a       	subi	r24, 0xAB	; 171
    323a:	9b 4d       	sbci	r25, 0xDB	; 219
        }
    }
}
    323c:	df 91       	pop	r29
    323e:	cf 91       	pop	r28
    3240:	1f 91       	pop	r17
    3242:	0f 91       	pop	r16
    3244:	ff 90       	pop	r15
    3246:	ef 90       	pop	r14
    3248:	df 90       	pop	r13
            sendToBuffer(p, port[p].sq.head, sendParity(port[p].sq) );
            port[p].sq.flags &= ~CLEAR_TO_SEND;
            
            // start the timeout
            port[p].sq.qtout.tout.calltime = getTime() + DEFAULT_TIMEOUT;
            registerTimeout(&(port[p].sq.qtout.tout));
    324a:	0c 94 a7 09 	jmp	0x134e	; 0x134e <registerTimeout>
        }
    }
}
    324e:	df 91       	pop	r29
    3250:	cf 91       	pop	r28
    3252:	1f 91       	pop	r17
    3254:	0f 91       	pop	r16
    3256:	ff 90       	pop	r15
    3258:	ef 90       	pop	r14
    325a:	df 90       	pop	r13
    325c:	08 95       	ret

0000325e <initHWDataLink>:

// initialize
void initHWDataLink(){
    325e:	08 95       	ret

00003260 <setHWLED>:
	
	//r = 255 - r;
	//g = 255 - g;
	//b = 255 - b;

	currentRGB[0] = r;
    3260:	80 93 0b 22 	sts	0x220B, r24
	currentRGB[1] = g;
    3264:	60 93 0c 22 	sts	0x220C, r22
	currentRGB[2] = b;
    3268:	40 93 0d 22 	sts	0x220D, r20

	rr = (uint16_t)i*(uint16_t)r;
    326c:	28 9f       	mul	r18, r24
    326e:	c0 01       	movw	r24, r0
    3270:	11 24       	eor	r1, r1
	gg = (uint16_t)i*(uint16_t)g;
    3272:	26 9f       	mul	r18, r22
    3274:	b0 01       	movw	r22, r0
    3276:	11 24       	eor	r1, r1
	bb = (uint16_t)i*(uint16_t)b;
    3278:	24 9f       	mul	r18, r20
    327a:	a0 01       	movw	r20, r0
    327c:	11 24       	eor	r1, r1
	
	rr = 0xFFFF - rr;
    327e:	80 95       	com	r24
    3280:	90 95       	com	r25
	gg = 0xFFFF - gg;
    3282:	60 95       	com	r22
    3284:	70 95       	com	r23
	bb = 0xFFFF - bb;
    3286:	40 95       	com	r20
    3288:	50 95       	com	r21
	
	TCC0.CCABUF = rr;
    328a:	e0 e0       	ldi	r30, 0x00	; 0
    328c:	f8 e0       	ldi	r31, 0x08	; 8
    328e:	80 af       	std	Z+56, r24	; 0x38
    3290:	91 af       	std	Z+57, r25	; 0x39
	TCC0.CCBBUF = rr;
    3292:	82 af       	std	Z+58, r24	; 0x3a
    3294:	93 af       	std	Z+59, r25	; 0x3b

	TCD0.CCABUF = gg;
    3296:	e0 e0       	ldi	r30, 0x00	; 0
    3298:	f9 e0       	ldi	r31, 0x09	; 9
    329a:	60 af       	std	Z+56, r22	; 0x38
    329c:	71 af       	std	Z+57, r23	; 0x39
	TCD0.CCBBUF = bb;
    329e:	42 af       	std	Z+58, r20	; 0x3a
    32a0:	53 af       	std	Z+59, r21	; 0x3b
	
	TCC1.CCABUF = gg;
    32a2:	e0 e4       	ldi	r30, 0x40	; 64
    32a4:	f8 e0       	ldi	r31, 0x08	; 8
    32a6:	60 af       	std	Z+56, r22	; 0x38
    32a8:	71 af       	std	Z+57, r23	; 0x39
	TCC1.CCBBUF = bb;
    32aa:	42 af       	std	Z+58, r20	; 0x3a
    32ac:	53 af       	std	Z+59, r21	; 0x3b
    32ae:	08 95       	ret

000032b0 <initHWLED>:


void initHWLED()
{
	// Initialize the RED
	TCC0.CTRLA |= TC_CLKSEL_DIV4_gc;	// RED clock source
    32b0:	e0 e0       	ldi	r30, 0x00	; 0
    32b2:	f8 e0       	ldi	r31, 0x08	; 8
    32b4:	80 81       	ld	r24, Z
    32b6:	83 60       	ori	r24, 0x03	; 3
    32b8:	80 83       	st	Z, r24
	TCC0.CTRLB = TC0_CCAEN_bm | TC0_CCBEN_bm | TC_WGMODE_SS_gc;	// enable REDs, set WGM to SS PWM
    32ba:	33 e3       	ldi	r19, 0x33	; 51
    32bc:	31 83       	std	Z+1, r19	; 0x01
	TCC0.PERBUF = 0xFFFF;		// set period to 8-bit for 8-bit resolution
    32be:	8f ef       	ldi	r24, 0xFF	; 255
    32c0:	9f ef       	ldi	r25, 0xFF	; 255
    32c2:	86 ab       	std	Z+54, r24	; 0x36
    32c4:	97 ab       	std	Z+55, r25	; 0x37
	TCC0.CCABUF = 0;		// set to off by default
    32c6:	10 ae       	std	Z+56, r1	; 0x38
    32c8:	11 ae       	std	Z+57, r1	; 0x39
	TCC0.CCBBUF = 0;		// set to off by default
    32ca:	12 ae       	std	Z+58, r1	; 0x3a
    32cc:	13 ae       	std	Z+59, r1	; 0x3b
	PORTC.DIRSET = PIN0_bm | PIN1_bm;  // set REDs to OUTPUT
    32ce:	a0 e4       	ldi	r26, 0x40	; 64
    32d0:	b6 e0       	ldi	r27, 0x06	; 6
    32d2:	23 e0       	ldi	r18, 0x03	; 3
    32d4:	11 96       	adiw	r26, 0x01	; 1
    32d6:	2c 93       	st	X, r18
    32d8:	11 97       	sbiw	r26, 0x01	; 1

	TCC1.CTRLA = TC_CLKSEL_DIV4_gc;	// BLUE clock source
    32da:	e0 e4       	ldi	r30, 0x40	; 64
    32dc:	f8 e0       	ldi	r31, 0x08	; 8
    32de:	20 83       	st	Z, r18
	TCC1.CTRLB = TC1_CCAEN_bm | TC1_CCBEN_bm | TC_WGMODE_SS_gc;	// enable BLUEs, set WGM to SS PWM
    32e0:	31 83       	std	Z+1, r19	; 0x01
	TCC1.PERBUF = 0xFFFF;		// set period to 8-bit for 8-bit resolution
    32e2:	86 ab       	std	Z+54, r24	; 0x36
    32e4:	97 ab       	std	Z+55, r25	; 0x37
	TCC1.CCABUF = 0;		// set to off by default
    32e6:	10 ae       	std	Z+56, r1	; 0x38
    32e8:	11 ae       	std	Z+57, r1	; 0x39
	TCC1.CCBBUF = 0;		// set to off by default
    32ea:	12 ae       	std	Z+58, r1	; 0x3a
    32ec:	13 ae       	std	Z+59, r1	; 0x3b
	PORTC.DIRSET = PIN4_bm | PIN5_bm;  // set BLUEs to OUTPUT
    32ee:	40 e3       	ldi	r20, 0x30	; 48
    32f0:	11 96       	adiw	r26, 0x01	; 1
    32f2:	4c 93       	st	X, r20

	TCD0.CTRLA = TC_CLKSEL_DIV4_gc;	// GREEN clock source
    32f4:	e0 e0       	ldi	r30, 0x00	; 0
    32f6:	f9 e0       	ldi	r31, 0x09	; 9
    32f8:	20 83       	st	Z, r18
	TCD0.CTRLB = TC0_CCAEN_bm | TC0_CCBEN_bm | TC_WGMODE_SS_gc;	// enable REDs, set WGM to SS PWM
    32fa:	31 83       	std	Z+1, r19	; 0x01
	TCD0.PERBUF = 0xFFFF;		// set period to 8-bit for 8-bit resolution
    32fc:	86 ab       	std	Z+54, r24	; 0x36
    32fe:	97 ab       	std	Z+55, r25	; 0x37
	TCD0.CCABUF = 0;		// set to off by default
    3300:	10 ae       	std	Z+56, r1	; 0x38
    3302:	11 ae       	std	Z+57, r1	; 0x39
	TCD0.CCBBUF = 0;		// set to off by default
    3304:	12 ae       	std	Z+58, r1	; 0x3a
    3306:	13 ae       	std	Z+59, r1	; 0x3b
	PORTD.DIRSET = PIN0_bm | PIN1_bm;  // set GREENs to OUTPUT	
    3308:	e0 e6       	ldi	r30, 0x60	; 96
    330a:	f6 e0       	ldi	r31, 0x06	; 6
    330c:	21 83       	std	Z+1, r18	; 0x01
    330e:	08 95       	ret

00003310 <store>:
//
//  nv_addr points to the desired EEMEM structure address (if you declared it using 'type EEMEM mydata', then '(char *)&mydata'
//  data points to the desired SRAM structure address
//  len    is sizeof(type)
void store(void * nv_addr, void * data, int len)
{
    3310:	cf 92       	push	r12
    3312:	df 92       	push	r13
    3314:	ef 92       	push	r14
    3316:	ff 92       	push	r15
    3318:	0f 93       	push	r16
    331a:	1f 93       	push	r17
    331c:	cf 93       	push	r28
    331e:	df 93       	push	r29
    3320:	8c 01       	movw	r16, r24
    3322:	7b 01       	movw	r14, r22
    3324:	ea 01       	movw	r28, r20
    while(len != 0)
    {
        // grab the page offset address from the current
        partial_offset = (uint16_t)nv_addr & (EEPROM_PAGESIZE - 1);
    
        partial_length = EEPROM_PAGESIZE - partial_offset;
    3326:	30 e2       	ldi	r19, 0x20	; 32
    3328:	c3 2e       	mov	r12, r19
//  len    is sizeof(type)
void store(void * nv_addr, void * data, int len)
{
    uint8_t partial_offset, partial_length;

    while(len != 0)
    332a:	1e c0       	rjmp	.+60     	; 0x3368 <store+0x58>
    {
        // grab the page offset address from the current
        partial_offset = (uint16_t)nv_addr & (EEPROM_PAGESIZE - 1);
    332c:	60 2f       	mov	r22, r16
    332e:	6f 71       	andi	r22, 0x1F	; 31
    
        partial_length = EEPROM_PAGESIZE - partial_offset;
    3330:	dc 2c       	mov	r13, r12
    3332:	d6 1a       	sub	r13, r22
        
        if(partial_length > len)
    3334:	8d 2d       	mov	r24, r13
    3336:	90 e0       	ldi	r25, 0x00	; 0
    3338:	c8 17       	cp	r28, r24
    333a:	d9 07       	cpc	r29, r25
    333c:	0c f4       	brge	.+2      	; 0x3340 <store+0x30>
        {
            partial_length = len;
    333e:	dc 2e       	mov	r13, r28
        }

        EEPROM_LoadPartialPage(data, partial_offset, partial_length);
    3340:	4d 2d       	mov	r20, r13
    3342:	c7 01       	movw	r24, r14
    3344:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <EEPROM_LoadPartialPage>
        EEPROM_AtomicWritePage((uint16_t)nv_addr / (EEPROM_PAGESIZE));
    3348:	c8 01       	movw	r24, r16
    334a:	25 e0       	ldi	r18, 0x05	; 5
    334c:	96 95       	lsr	r25
    334e:	87 95       	ror	r24
    3350:	2a 95       	dec	r18
    3352:	e1 f7       	brne	.-8      	; 0x334c <store+0x3c>
    3354:	0e 94 fc 12 	call	0x25f8	; 0x25f8 <EEPROM_AtomicWritePage>

        len -= partial_length;
    3358:	4d 2d       	mov	r20, r13
    335a:	50 e0       	ldi	r21, 0x00	; 0
    335c:	c4 1b       	sub	r28, r20
    335e:	d5 0b       	sbc	r29, r21
        nv_addr += partial_length;
    3360:	04 0f       	add	r16, r20
    3362:	15 1f       	adc	r17, r21
        data += partial_length;
    3364:	e4 0e       	add	r14, r20
    3366:	f5 1e       	adc	r15, r21
//  len    is sizeof(type)
void store(void * nv_addr, void * data, int len)
{
    uint8_t partial_offset, partial_length;

    while(len != 0)
    3368:	20 97       	sbiw	r28, 0x00	; 0
    336a:	01 f7       	brne	.-64     	; 0x332c <store+0x1c>
        len -= partial_length;
        nv_addr += partial_length;
        data += partial_length;
    }
    
}
    336c:	df 91       	pop	r29
    336e:	cf 91       	pop	r28
    3370:	1f 91       	pop	r17
    3372:	0f 91       	pop	r16
    3374:	ff 90       	pop	r15
    3376:	ef 90       	pop	r14
    3378:	df 90       	pop	r13
    337a:	cf 90       	pop	r12
    337c:	08 95       	ret

0000337e <restore>:

// this could be done in pages but reads are pretty quick so it shouldn't matter
void restore(void * vaddr, void * vnv_addr, int len)
{    
    337e:	ef 92       	push	r14
    3380:	ff 92       	push	r15
    3382:	0f 93       	push	r16
    3384:	1f 93       	push	r17
    3386:	cf 93       	push	r28
    3388:	df 93       	push	r29
    338a:	7a 01       	movw	r14, r20
    }
    
}

// this could be done in pages but reads are pretty quick so it shouldn't matter
void restore(void * vaddr, void * vnv_addr, int len)
    338c:	e6 0e       	add	r14, r22
    338e:	f7 1e       	adc	r15, r23
{    
	byte *addr=(byte *)vaddr;
	byte *nv_addr=(byte *) vnv_addr;
    3390:	eb 01       	movw	r28, r22
}

// this could be done in pages but reads are pretty quick so it shouldn't matter
void restore(void * vaddr, void * vnv_addr, int len)
{    
	byte *addr=(byte *)vaddr;
    3392:	8c 01       	movw	r16, r24
	byte *nv_addr=(byte *) vnv_addr;
    while(len != 0)
    3394:	0f c0       	rjmp	.+30     	; 0x33b4 <restore+0x36>
    {
        *addr = EEPROM_ReadByte(((uint16_t)(nv_addr) / (EEPROM_PAGESIZE)), (uint16_t)(nv_addr) & (EEPROM_PAGESIZE-1));
    3396:	be 01       	movw	r22, r28
    3398:	6f 71       	andi	r22, 0x1F	; 31
    339a:	77 27       	eor	r23, r23
    339c:	ce 01       	movw	r24, r28
    339e:	45 e0       	ldi	r20, 0x05	; 5
    33a0:	96 95       	lsr	r25
    33a2:	87 95       	ror	r24
    33a4:	4a 95       	dec	r20
    33a6:	e1 f7       	brne	.-8      	; 0x33a0 <restore+0x22>
    33a8:	0e 94 2a 12 	call	0x2454	; 0x2454 <EEPROM_ReadByte>
    33ac:	f8 01       	movw	r30, r16
    33ae:	81 93       	st	Z+, r24
    33b0:	8f 01       	movw	r16, r30
        nv_addr++;
    33b2:	21 96       	adiw	r28, 0x01	; 1
// this could be done in pages but reads are pretty quick so it shouldn't matter
void restore(void * vaddr, void * vnv_addr, int len)
{    
	byte *addr=(byte *)vaddr;
	byte *nv_addr=(byte *) vnv_addr;
    while(len != 0)
    33b4:	ce 15       	cp	r28, r14
    33b6:	df 05       	cpc	r29, r15
    33b8:	71 f7       	brne	.-36     	; 0x3396 <restore+0x18>
        *addr = EEPROM_ReadByte(((uint16_t)(nv_addr) / (EEPROM_PAGESIZE)), (uint16_t)(nv_addr) & (EEPROM_PAGESIZE-1));
        nv_addr++;
        addr++;
        len--;
    }
}
    33ba:	df 91       	pop	r29
    33bc:	cf 91       	pop	r28
    33be:	1f 91       	pop	r17
    33c0:	0f 91       	pop	r16
    33c2:	ff 90       	pop	r15
    33c4:	ef 90       	pop	r14
    33c6:	08 95       	ret

000033c8 <getGUID>:
#define ID_BYTE_ADDR 0x00


/* TODO: This is WRONG. It should be Uid, but the build system is being stupid and now is not a good time to spend forever trying to fix it. */
//reads GUID from eeprom
uint16_t getGUID(){
    33c8:	cf 93       	push	r28
  //return 255;
	//TODO: read from eeprom
  return (((uint16_t)EEPROM_ReadByte(ID_PAGE_ADDR, ID_BYTE_ADDR))<<8) |
    33ca:	60 e0       	ldi	r22, 0x00	; 0
    33cc:	80 e0       	ldi	r24, 0x00	; 0
    33ce:	0e 94 2a 12 	call	0x2454	; 0x2454 <EEPROM_ReadByte>
    33d2:	c8 2f       	mov	r28, r24
	  ((uint16_t)EEPROM_ReadByte(ID_PAGE_ADDR, ID_BYTE_ADDR+1));
    33d4:	61 e0       	ldi	r22, 0x01	; 1
    33d6:	80 e0       	ldi	r24, 0x00	; 0
    33d8:	0e 94 2a 12 	call	0x2454	; 0x2454 <EEPROM_ReadByte>
/* TODO: This is WRONG. It should be Uid, but the build system is being stupid and now is not a good time to spend forever trying to fix it. */
//reads GUID from eeprom
uint16_t getGUID(){
  //return 255;
	//TODO: read from eeprom
  return (((uint16_t)EEPROM_ReadByte(ID_PAGE_ADDR, ID_BYTE_ADDR))<<8) |
    33dc:	3c 2f       	mov	r19, r28
    33de:	20 e0       	ldi	r18, 0x00	; 0
    33e0:	28 2b       	or	r18, r24
	  ((uint16_t)EEPROM_ReadByte(ID_PAGE_ADDR, ID_BYTE_ADDR+1));
}
    33e2:	c9 01       	movw	r24, r18
    33e4:	cf 91       	pop	r28
    33e6:	08 95       	ret

000033e8 <u_putchar>:
void initHWUart(USART_t * uart);


void u_putchar(char c, USART_t * uart)
{
	while(!(uart->STATUS & USART_DREIF_bm));
    33e8:	fb 01       	movw	r30, r22
    33ea:	91 81       	ldd	r25, Z+1	; 0x01
    33ec:	95 ff       	sbrs	r25, 5
    33ee:	fc cf       	rjmp	.-8      	; 0x33e8 <u_putchar>
    //loop_until_bit_is_set(UCSR0A, UDRE0);
	// Load buffer with your character
    uart->DATA = c;
    33f0:	80 83       	st	Z, r24
    33f2:	08 95       	ret

000033f4 <u_getchar>:
int	u_getchar(USART_t * uart)
{
	//char c;
	// Wait for the receive buffer to be filled
    //loop_until_bit_is_set(UCSR0A, RXC0);
	if((uart->STATUS & USART_RXCIF_bm))
    33f4:	fc 01       	movw	r30, r24
    33f6:	21 81       	ldd	r18, Z+1	; 0x01
    33f8:	27 ff       	sbrs	r18, 7
    33fa:	03 c0       	rjmp	.+6      	; 0x3402 <u_getchar+0xe>
	{
		// Read the receive buffer
		//c = uart->DATA;
		return uart->DATA;
    33fc:	20 81       	ld	r18, Z
    33fe:	30 e0       	ldi	r19, 0x00	; 0
    3400:	02 c0       	rjmp	.+4      	; 0x3406 <u_getchar+0x12>
	}
	else
	{
		return -1;
    3402:	2f ef       	ldi	r18, 0xFF	; 255
    3404:	3f ef       	ldi	r19, 0xFF	; 255
	}
}
    3406:	c9 01       	movw	r24, r18
    3408:	08 95       	ret

0000340a <pPutChar>:

void pPutChar(char c, PRef p)
{
	if(p >= 0 && p < NUM_PORTS)
    340a:	66 30       	cpi	r22, 0x06	; 6
    340c:	78 f4       	brcc	.+30     	; 0x342c <pPutChar+0x22>
	{
		if(hwPort[p].ptype == HARDWARE_UART)
    340e:	70 e0       	ldi	r23, 0x00	; 0
    3410:	fb 01       	movw	r30, r22
    3412:	ee 0f       	add	r30, r30
    3414:	ff 1f       	adc	r31, r31
    3416:	e6 0f       	add	r30, r22
    3418:	f7 1f       	adc	r31, r23
    341a:	e8 55       	subi	r30, 0x58	; 88
    341c:	f9 4d       	sbci	r31, 0xD9	; 217
    341e:	92 81       	ldd	r25, Z+2	; 0x02
    3420:	91 11       	cpse	r25, r1
    3422:	04 c0       	rjmp	.+8      	; 0x342c <pPutChar+0x22>
		{
			u_putchar(c, hwPort[p].uart.huart);
    3424:	60 81       	ld	r22, Z
    3426:	71 81       	ldd	r23, Z+1	; 0x01
    3428:	0c 94 f4 19 	jmp	0x33e8	; 0x33e8 <u_putchar>
    342c:	08 95       	ret

0000342e <pGetChar>:
	}
}

int pGetChar(PRef p)
{
	if(p >= 0 && p < NUM_PORTS)
    342e:	86 30       	cpi	r24, 0x06	; 6
    3430:	a0 f4       	brcc	.+40     	; 0x345a <pGetChar+0x2c>
	{
		if(hwPort[p].ptype == HARDWARE_UART)
    3432:	90 e0       	ldi	r25, 0x00	; 0
    3434:	fc 01       	movw	r30, r24
    3436:	ee 0f       	add	r30, r30
    3438:	ff 1f       	adc	r31, r31
    343a:	e8 0f       	add	r30, r24
    343c:	f9 1f       	adc	r31, r25
    343e:	e8 55       	subi	r30, 0x58	; 88
    3440:	f9 4d       	sbci	r31, 0xD9	; 217
    3442:	82 81       	ldd	r24, Z+2	; 0x02
    3444:	81 11       	cpse	r24, r1
    3446:	09 c0       	rjmp	.+18     	; 0x345a <pGetChar+0x2c>
		{
			return u_getchar(hwPort[p].uart.huart);
    3448:	01 90       	ld	r0, Z+
    344a:	f0 81       	ld	r31, Z
    344c:	e0 2d       	mov	r30, r0
int	u_getchar(USART_t * uart)
{
	//char c;
	// Wait for the receive buffer to be filled
    //loop_until_bit_is_set(UCSR0A, RXC0);
	if((uart->STATUS & USART_RXCIF_bm))
    344e:	81 81       	ldd	r24, Z+1	; 0x01
    3450:	87 ff       	sbrs	r24, 7
    3452:	03 c0       	rjmp	.+6      	; 0x345a <pGetChar+0x2c>
	{
		// Read the receive buffer
		//c = uart->DATA;
		return uart->DATA;
    3454:	20 81       	ld	r18, Z
    3456:	30 e0       	ldi	r19, 0x00	; 0
    3458:	02 c0       	rjmp	.+4      	; 0x345e <pGetChar+0x30>
		{
			//return su_getchar(hwPort[p].uart.suart);
		}
	}

	return -1;
    345a:	2f ef       	ldi	r18, 0xFF	; 255
    345c:	3f ef       	ldi	r19, 0xFF	; 255
}
    345e:	c9 01       	movw	r24, r18
    3460:	08 95       	ret

00003462 <initHWUart>:
	PORTD.DIRSET = PIN3_bm;	
	initializeHWPort(&(hwPort[DOWN]), &USARTD0);
}

void initHWUart(USART_t * huart)
{
    3462:	fc 01       	movw	r30, r24
	huart->CTRLB = USART_RXEN_bm | USART_TXEN_bm;		// turn on RX/TX, somewhat helpful!
    3464:	88 e1       	ldi	r24, 0x18	; 24
    3466:	84 83       	std	Z+4, r24	; 0x04
	huart->CTRLC = USART_CHSIZE_8BIT_gc;				// use 8-bit data
    3468:	83 e0       	ldi	r24, 0x03	; 3
    346a:	85 83       	std	Z+5, r24	; 0x05

	huart->CTRLA = USART_RXCINTLVL_HI_gc | USART_TXCINTLVL_HI_gc;	// enable RX/TX interrupt support
    346c:	8c e3       	ldi	r24, 0x3C	; 60
    346e:	83 83       	std	Z+3, r24	; 0x03
	huart->BAUDCTRLA = 51;  // 38400 		// 57600   			//103;	//19200 	16; // 115200
    3470:	83 e3       	ldi	r24, 0x33	; 51
    3472:	86 83       	std	Z+6, r24	; 0x06
	huart->BAUDCTRLB = 0;				//0xB4;  // 57600, set to 0 for others
    3474:	17 82       	std	Z+7, r1	; 0x07
    3476:	08 95       	ret

00003478 <initializeHWPort>:
	return -1;
}

void initializeHWPort(HWPort *p, USART_t *huart)
{
	if(huart != NULL)
    3478:	61 15       	cp	r22, r1
    347a:	71 05       	cpc	r23, r1
    347c:	39 f0       	breq	.+14     	; 0x348c <initializeHWPort+0x14>
	{
		(p->uart).huart = huart;
    347e:	fc 01       	movw	r30, r24
    3480:	60 83       	st	Z, r22
    3482:	71 83       	std	Z+1, r23	; 0x01
		p->ptype = HARDWARE_UART;
    3484:	12 82       	std	Z+2, r1	; 0x02

		initHWUart(huart);
    3486:	cb 01       	movw	r24, r22
    3488:	0c 94 31 1a 	jmp	0x3462	; 0x3462 <initHWUart>
    348c:	08 95       	ret

0000348e <initHWPorts>:
	}
}

void initHWPorts()
{
    348e:	ff 92       	push	r15
    3490:	0f 93       	push	r16
    3492:	1f 93       	push	r17
    3494:	cf 93       	push	r28
    3496:	df 93       	push	r29
	// male headers
	PORTD.DIRSET = PIN7_bm;
    3498:	c0 e6       	ldi	r28, 0x60	; 96
    349a:	d6 e0       	ldi	r29, 0x06	; 6
    349c:	30 e8       	ldi	r19, 0x80	; 128
    349e:	f3 2e       	mov	r15, r19
    34a0:	f9 82       	std	Y+1, r15	; 0x01

void initializeHWPort(HWPort *p, USART_t *huart)
{
	if(huart != NULL)
	{
		(p->uart).huart = huart;
    34a2:	80 eb       	ldi	r24, 0xB0	; 176
    34a4:	99 e0       	ldi	r25, 0x09	; 9
    34a6:	80 93 b7 26 	sts	0x26B7, r24
    34aa:	90 93 b8 26 	sts	0x26B8, r25
		p->ptype = HARDWARE_UART;
    34ae:	10 92 b9 26 	sts	0x26B9, r1

		initHWUart(huart);
    34b2:	0e 94 31 1a 	call	0x3462	; 0x3462 <initHWUart>
	// male headers
	PORTD.DIRSET = PIN7_bm;
	initializeHWPort(&(hwPort[UP]), &USARTD1);

	// near the double TVS diodes
	PORTC.DIRSET = PIN7_bm;
    34b6:	00 e4       	ldi	r16, 0x40	; 64
    34b8:	16 e0       	ldi	r17, 0x06	; 6
    34ba:	f8 01       	movw	r30, r16
    34bc:	f1 82       	std	Z+1, r15	; 0x01

void initializeHWPort(HWPort *p, USART_t *huart)
{
	if(huart != NULL)
	{
		(p->uart).huart = huart;
    34be:	80 eb       	ldi	r24, 0xB0	; 176
    34c0:	98 e0       	ldi	r25, 0x08	; 8
    34c2:	80 93 ab 26 	sts	0x26AB, r24
    34c6:	90 93 ac 26 	sts	0x26AC, r25
		p->ptype = HARDWARE_UART;
    34ca:	10 92 ad 26 	sts	0x26AD, r1

		initHWUart(huart);
    34ce:	0e 94 31 1a 	call	0x3462	; 0x3462 <initHWUart>
	// near the double TVS diodes
	PORTC.DIRSET = PIN7_bm;
	initializeHWPort(&(hwPort[NORTH]), &USARTC1);
	
	// closest to audio amp
	PORTE.DIRSET = PIN3_bm;
    34d2:	48 e0       	ldi	r20, 0x08	; 8
    34d4:	f4 2e       	mov	r15, r20
    34d6:	e0 e8       	ldi	r30, 0x80	; 128
    34d8:	f6 e0       	ldi	r31, 0x06	; 6
    34da:	f1 82       	std	Z+1, r15	; 0x01

void initializeHWPort(HWPort *p, USART_t *huart)
{
	if(huart != NULL)
	{
		(p->uart).huart = huart;
    34dc:	80 ea       	ldi	r24, 0xA0	; 160
    34de:	9a e0       	ldi	r25, 0x0A	; 10
    34e0:	80 93 b4 26 	sts	0x26B4, r24
    34e4:	90 93 b5 26 	sts	0x26B5, r25
		p->ptype = HARDWARE_UART;
    34e8:	10 92 b6 26 	sts	0x26B6, r1

		initHWUart(huart);
    34ec:	0e 94 31 1a 	call	0x3462	; 0x3462 <initHWUart>
	// closest to audio amp
	PORTE.DIRSET = PIN3_bm;
	initializeHWPort(&(hwPort[SOUTH]), &USARTE0);
	
	// closest to LEDs
	PORTF.DIRSET = PIN3_bm;	
    34f0:	e0 ea       	ldi	r30, 0xA0	; 160
    34f2:	f6 e0       	ldi	r31, 0x06	; 6
    34f4:	f1 82       	std	Z+1, r15	; 0x01

void initializeHWPort(HWPort *p, USART_t *huart)
{
	if(huart != NULL)
	{
		(p->uart).huart = huart;
    34f6:	80 ea       	ldi	r24, 0xA0	; 160
    34f8:	9b e0       	ldi	r25, 0x0B	; 11
    34fa:	80 93 ae 26 	sts	0x26AE, r24
    34fe:	90 93 af 26 	sts	0x26AF, r25
		p->ptype = HARDWARE_UART;
    3502:	10 92 b0 26 	sts	0x26B0, r1

		initHWUart(huart);
    3506:	0e 94 31 1a 	call	0x3462	; 0x3462 <initHWUart>
	// closest to LEDs
	PORTF.DIRSET = PIN3_bm;	
	initializeHWPort(&(hwPort[EAST]), &USARTF0);
	
	// closest to analog input dividers
	PORTC.DIRSET = PIN3_bm;	
    350a:	f8 01       	movw	r30, r16
    350c:	f1 82       	std	Z+1, r15	; 0x01

void initializeHWPort(HWPort *p, USART_t *huart)
{
	if(huart != NULL)
	{
		(p->uart).huart = huart;
    350e:	80 ea       	ldi	r24, 0xA0	; 160
    3510:	98 e0       	ldi	r25, 0x08	; 8
    3512:	80 93 b1 26 	sts	0x26B1, r24
    3516:	90 93 b2 26 	sts	0x26B2, r25
		p->ptype = HARDWARE_UART;
    351a:	10 92 b3 26 	sts	0x26B3, r1

		initHWUart(huart);
    351e:	0e 94 31 1a 	call	0x3462	; 0x3462 <initHWUart>
	
	// closest to analog input dividers
	PORTC.DIRSET = PIN3_bm;	
	initializeHWPort(&(hwPort[WEST]), &USARTC0);
	
	PORTD.DIRSET = PIN3_bm;	
    3522:	f9 82       	std	Y+1, r15	; 0x01

void initializeHWPort(HWPort *p, USART_t *huart)
{
	if(huart != NULL)
	{
		(p->uart).huart = huart;
    3524:	80 ea       	ldi	r24, 0xA0	; 160
    3526:	99 e0       	ldi	r25, 0x09	; 9
    3528:	80 93 a8 26 	sts	0x26A8, r24
    352c:	90 93 a9 26 	sts	0x26A9, r25
		p->ptype = HARDWARE_UART;
    3530:	10 92 aa 26 	sts	0x26AA, r1
	PORTC.DIRSET = PIN3_bm;	
	initializeHWPort(&(hwPort[WEST]), &USARTC0);
	
	PORTD.DIRSET = PIN3_bm;	
	initializeHWPort(&(hwPort[DOWN]), &USARTD0);
}
    3534:	df 91       	pop	r29
    3536:	cf 91       	pop	r28
    3538:	1f 91       	pop	r17
    353a:	0f 91       	pop	r16
    353c:	ff 90       	pop	r15
	if(huart != NULL)
	{
		(p->uart).huart = huart;
		p->ptype = HARDWARE_UART;

		initHWUart(huart);
    353e:	0c 94 31 1a 	jmp	0x3462	; 0x3462 <initHWUart>

00003542 <__vector_91>:
	huart->BAUDCTRLB = 0;				//0xB4;  // 57600, set to 0 for others
}


ISR(USARTD1_RXC_vect)
{
    3542:	1f 92       	push	r1
    3544:	0f 92       	push	r0
    3546:	0f b6       	in	r0, 0x3f	; 63
    3548:	0f 92       	push	r0
    354a:	11 24       	eor	r1, r1
    354c:	0b b6       	in	r0, 0x3b	; 59
    354e:	0f 92       	push	r0
    3550:	2f 93       	push	r18
    3552:	3f 93       	push	r19
    3554:	4f 93       	push	r20
    3556:	5f 93       	push	r21
    3558:	6f 93       	push	r22
    355a:	7f 93       	push	r23
    355c:	8f 93       	push	r24
    355e:	9f 93       	push	r25
    3560:	af 93       	push	r26
    3562:	bf 93       	push	r27
    3564:	ef 93       	push	r30
    3566:	ff 93       	push	r31
	uint8_t c;
	
	c = USARTD1.DATA;
    3568:	80 91 b0 09 	lds	r24, 0x09B0
	//printf("R:%x",c);	
	push(c, &(port[UP].rx));
    356c:	64 e2       	ldi	r22, 0x24	; 36
    356e:	76 e2       	ldi	r23, 0x26	; 38
    3570:	0e 94 7f 02 	call	0x4fe	; 0x4fe <push>
}
    3574:	ff 91       	pop	r31
    3576:	ef 91       	pop	r30
    3578:	bf 91       	pop	r27
    357a:	af 91       	pop	r26
    357c:	9f 91       	pop	r25
    357e:	8f 91       	pop	r24
    3580:	7f 91       	pop	r23
    3582:	6f 91       	pop	r22
    3584:	5f 91       	pop	r21
    3586:	4f 91       	pop	r20
    3588:	3f 91       	pop	r19
    358a:	2f 91       	pop	r18
    358c:	0f 90       	pop	r0
    358e:	0b be       	out	0x3b, r0	; 59
    3590:	0f 90       	pop	r0
    3592:	0f be       	out	0x3f, r0	; 63
    3594:	0f 90       	pop	r0
    3596:	1f 90       	pop	r1
    3598:	18 95       	reti

0000359a <__vector_93>:

ISR(USARTD1_TXC_vect)
{
    359a:	1f 92       	push	r1
    359c:	0f 92       	push	r0
    359e:	0f b6       	in	r0, 0x3f	; 63
    35a0:	0f 92       	push	r0
    35a2:	11 24       	eor	r1, r1
    35a4:	0b b6       	in	r0, 0x3b	; 59
    35a6:	0f 92       	push	r0
    35a8:	2f 93       	push	r18
    35aa:	3f 93       	push	r19
    35ac:	4f 93       	push	r20
    35ae:	5f 93       	push	r21
    35b0:	6f 93       	push	r22
    35b2:	7f 93       	push	r23
    35b4:	8f 93       	push	r24
    35b6:	9f 93       	push	r25
    35b8:	af 93       	push	r26
    35ba:	bf 93       	push	r27
    35bc:	ef 93       	push	r30
    35be:	ff 93       	push	r31
	int16_t c;
	
	c  = pop(&(port[UP].tx));
    35c0:	84 e4       	ldi	r24, 0x44	; 68
    35c2:	96 e2       	ldi	r25, 0x26	; 38
    35c4:	0e 94 9a 02 	call	0x534	; 0x534 <pop>
	
	if(c != -1)
    35c8:	8f 3f       	cpi	r24, 0xFF	; 255
    35ca:	2f ef       	ldi	r18, 0xFF	; 255
    35cc:	92 07       	cpc	r25, r18
    35ce:	11 f0       	breq	.+4      	; 0x35d4 <__vector_93+0x3a>
	{
		USARTD1.DATA = c;
    35d0:	80 93 b0 09 	sts	0x09B0, r24
	}
	else
	{
		// should flag that we're waiting for an ACK now
	}
}
    35d4:	ff 91       	pop	r31
    35d6:	ef 91       	pop	r30
    35d8:	bf 91       	pop	r27
    35da:	af 91       	pop	r26
    35dc:	9f 91       	pop	r25
    35de:	8f 91       	pop	r24
    35e0:	7f 91       	pop	r23
    35e2:	6f 91       	pop	r22
    35e4:	5f 91       	pop	r21
    35e6:	4f 91       	pop	r20
    35e8:	3f 91       	pop	r19
    35ea:	2f 91       	pop	r18
    35ec:	0f 90       	pop	r0
    35ee:	0b be       	out	0x3b, r0	; 59
    35f0:	0f 90       	pop	r0
    35f2:	0f be       	out	0x3f, r0	; 63
    35f4:	0f 90       	pop	r0
    35f6:	1f 90       	pop	r1
    35f8:	18 95       	reti

000035fa <__vector_28>:

ISR(USARTC1_RXC_vect)
{
    35fa:	1f 92       	push	r1
    35fc:	0f 92       	push	r0
    35fe:	0f b6       	in	r0, 0x3f	; 63
    3600:	0f 92       	push	r0
    3602:	11 24       	eor	r1, r1
    3604:	0b b6       	in	r0, 0x3b	; 59
    3606:	0f 92       	push	r0
    3608:	2f 93       	push	r18
    360a:	3f 93       	push	r19
    360c:	4f 93       	push	r20
    360e:	5f 93       	push	r21
    3610:	6f 93       	push	r22
    3612:	7f 93       	push	r23
    3614:	8f 93       	push	r24
    3616:	9f 93       	push	r25
    3618:	af 93       	push	r26
    361a:	bf 93       	push	r27
    361c:	ef 93       	push	r30
    361e:	ff 93       	push	r31
	uint8_t c;
	
	c = USARTC1.DATA;
    3620:	80 91 b0 08 	lds	r24, 0x08B0
	//printf("R:%x",c);	
	push(c, &(port[NORTH].rx));
    3624:	64 ec       	ldi	r22, 0xC4	; 196
    3626:	74 e2       	ldi	r23, 0x24	; 36
    3628:	0e 94 7f 02 	call	0x4fe	; 0x4fe <push>
}
    362c:	ff 91       	pop	r31
    362e:	ef 91       	pop	r30
    3630:	bf 91       	pop	r27
    3632:	af 91       	pop	r26
    3634:	9f 91       	pop	r25
    3636:	8f 91       	pop	r24
    3638:	7f 91       	pop	r23
    363a:	6f 91       	pop	r22
    363c:	5f 91       	pop	r21
    363e:	4f 91       	pop	r20
    3640:	3f 91       	pop	r19
    3642:	2f 91       	pop	r18
    3644:	0f 90       	pop	r0
    3646:	0b be       	out	0x3b, r0	; 59
    3648:	0f 90       	pop	r0
    364a:	0f be       	out	0x3f, r0	; 63
    364c:	0f 90       	pop	r0
    364e:	1f 90       	pop	r1
    3650:	18 95       	reti

00003652 <__vector_30>:
ISR(USARTC1_TXC_vect)
{
    3652:	1f 92       	push	r1
    3654:	0f 92       	push	r0
    3656:	0f b6       	in	r0, 0x3f	; 63
    3658:	0f 92       	push	r0
    365a:	11 24       	eor	r1, r1
    365c:	0b b6       	in	r0, 0x3b	; 59
    365e:	0f 92       	push	r0
    3660:	2f 93       	push	r18
    3662:	3f 93       	push	r19
    3664:	4f 93       	push	r20
    3666:	5f 93       	push	r21
    3668:	6f 93       	push	r22
    366a:	7f 93       	push	r23
    366c:	8f 93       	push	r24
    366e:	9f 93       	push	r25
    3670:	af 93       	push	r26
    3672:	bf 93       	push	r27
    3674:	ef 93       	push	r30
    3676:	ff 93       	push	r31
	int16_t c;
	
	c  = pop(&(port[NORTH].tx));
    3678:	84 ee       	ldi	r24, 0xE4	; 228
    367a:	94 e2       	ldi	r25, 0x24	; 36
    367c:	0e 94 9a 02 	call	0x534	; 0x534 <pop>
	
	if(c != -1)
    3680:	8f 3f       	cpi	r24, 0xFF	; 255
    3682:	2f ef       	ldi	r18, 0xFF	; 255
    3684:	92 07       	cpc	r25, r18
    3686:	11 f0       	breq	.+4      	; 0x368c <__vector_30+0x3a>
	{
		USARTC1.DATA = c;
    3688:	80 93 b0 08 	sts	0x08B0, r24
	}
}
    368c:	ff 91       	pop	r31
    368e:	ef 91       	pop	r30
    3690:	bf 91       	pop	r27
    3692:	af 91       	pop	r26
    3694:	9f 91       	pop	r25
    3696:	8f 91       	pop	r24
    3698:	7f 91       	pop	r23
    369a:	6f 91       	pop	r22
    369c:	5f 91       	pop	r21
    369e:	4f 91       	pop	r20
    36a0:	3f 91       	pop	r19
    36a2:	2f 91       	pop	r18
    36a4:	0f 90       	pop	r0
    36a6:	0b be       	out	0x3b, r0	; 59
    36a8:	0f 90       	pop	r0
    36aa:	0f be       	out	0x3f, r0	; 63
    36ac:	0f 90       	pop	r0
    36ae:	1f 90       	pop	r1
    36b0:	18 95       	reti

000036b2 <__vector_119>:

ISR(USARTF0_RXC_vect)
{
    36b2:	1f 92       	push	r1
    36b4:	0f 92       	push	r0
    36b6:	0f b6       	in	r0, 0x3f	; 63
    36b8:	0f 92       	push	r0
    36ba:	11 24       	eor	r1, r1
    36bc:	0b b6       	in	r0, 0x3b	; 59
    36be:	0f 92       	push	r0
    36c0:	2f 93       	push	r18
    36c2:	3f 93       	push	r19
    36c4:	4f 93       	push	r20
    36c6:	5f 93       	push	r21
    36c8:	6f 93       	push	r22
    36ca:	7f 93       	push	r23
    36cc:	8f 93       	push	r24
    36ce:	9f 93       	push	r25
    36d0:	af 93       	push	r26
    36d2:	bf 93       	push	r27
    36d4:	ef 93       	push	r30
    36d6:	ff 93       	push	r31
	uint8_t c;
	
	c = USARTF0.DATA;
    36d8:	80 91 a0 0b 	lds	r24, 0x0BA0
	//printf("R:%x",c);	
	push(c, &(port[EAST].rx));
    36dc:	6c e1       	ldi	r22, 0x1C	; 28
    36de:	75 e2       	ldi	r23, 0x25	; 37
    36e0:	0e 94 7f 02 	call	0x4fe	; 0x4fe <push>
}
    36e4:	ff 91       	pop	r31
    36e6:	ef 91       	pop	r30
    36e8:	bf 91       	pop	r27
    36ea:	af 91       	pop	r26
    36ec:	9f 91       	pop	r25
    36ee:	8f 91       	pop	r24
    36f0:	7f 91       	pop	r23
    36f2:	6f 91       	pop	r22
    36f4:	5f 91       	pop	r21
    36f6:	4f 91       	pop	r20
    36f8:	3f 91       	pop	r19
    36fa:	2f 91       	pop	r18
    36fc:	0f 90       	pop	r0
    36fe:	0b be       	out	0x3b, r0	; 59
    3700:	0f 90       	pop	r0
    3702:	0f be       	out	0x3f, r0	; 63
    3704:	0f 90       	pop	r0
    3706:	1f 90       	pop	r1
    3708:	18 95       	reti

0000370a <__vector_121>:
ISR(USARTF0_TXC_vect)
{
    370a:	1f 92       	push	r1
    370c:	0f 92       	push	r0
    370e:	0f b6       	in	r0, 0x3f	; 63
    3710:	0f 92       	push	r0
    3712:	11 24       	eor	r1, r1
    3714:	0b b6       	in	r0, 0x3b	; 59
    3716:	0f 92       	push	r0
    3718:	2f 93       	push	r18
    371a:	3f 93       	push	r19
    371c:	4f 93       	push	r20
    371e:	5f 93       	push	r21
    3720:	6f 93       	push	r22
    3722:	7f 93       	push	r23
    3724:	8f 93       	push	r24
    3726:	9f 93       	push	r25
    3728:	af 93       	push	r26
    372a:	bf 93       	push	r27
    372c:	ef 93       	push	r30
    372e:	ff 93       	push	r31
	int16_t c;
	
	c  = pop(&(port[EAST].tx));
    3730:	8c e3       	ldi	r24, 0x3C	; 60
    3732:	95 e2       	ldi	r25, 0x25	; 37
    3734:	0e 94 9a 02 	call	0x534	; 0x534 <pop>
	
	if(c != -1)
    3738:	8f 3f       	cpi	r24, 0xFF	; 255
    373a:	2f ef       	ldi	r18, 0xFF	; 255
    373c:	92 07       	cpc	r25, r18
    373e:	11 f0       	breq	.+4      	; 0x3744 <__vector_121+0x3a>
	{
		USARTF0.DATA = c;
    3740:	80 93 a0 0b 	sts	0x0BA0, r24
	}
}
    3744:	ff 91       	pop	r31
    3746:	ef 91       	pop	r30
    3748:	bf 91       	pop	r27
    374a:	af 91       	pop	r26
    374c:	9f 91       	pop	r25
    374e:	8f 91       	pop	r24
    3750:	7f 91       	pop	r23
    3752:	6f 91       	pop	r22
    3754:	5f 91       	pop	r21
    3756:	4f 91       	pop	r20
    3758:	3f 91       	pop	r19
    375a:	2f 91       	pop	r18
    375c:	0f 90       	pop	r0
    375e:	0b be       	out	0x3b, r0	; 59
    3760:	0f 90       	pop	r0
    3762:	0f be       	out	0x3f, r0	; 63
    3764:	0f 90       	pop	r0
    3766:	1f 90       	pop	r1
    3768:	18 95       	reti

0000376a <__vector_58>:

ISR(USARTE0_RXC_vect)
{
    376a:	1f 92       	push	r1
    376c:	0f 92       	push	r0
    376e:	0f b6       	in	r0, 0x3f	; 63
    3770:	0f 92       	push	r0
    3772:	11 24       	eor	r1, r1
    3774:	0b b6       	in	r0, 0x3b	; 59
    3776:	0f 92       	push	r0
    3778:	2f 93       	push	r18
    377a:	3f 93       	push	r19
    377c:	4f 93       	push	r20
    377e:	5f 93       	push	r21
    3780:	6f 93       	push	r22
    3782:	7f 93       	push	r23
    3784:	8f 93       	push	r24
    3786:	9f 93       	push	r25
    3788:	af 93       	push	r26
    378a:	bf 93       	push	r27
    378c:	ef 93       	push	r30
    378e:	ff 93       	push	r31
	uint8_t c;
	
	c = USARTE0.DATA;
    3790:	80 91 a0 0a 	lds	r24, 0x0AA0
	//printf("R:%x",c);	
	push(c, &(port[SOUTH].rx));
    3794:	6c ec       	ldi	r22, 0xCC	; 204
    3796:	75 e2       	ldi	r23, 0x25	; 37
    3798:	0e 94 7f 02 	call	0x4fe	; 0x4fe <push>
}
    379c:	ff 91       	pop	r31
    379e:	ef 91       	pop	r30
    37a0:	bf 91       	pop	r27
    37a2:	af 91       	pop	r26
    37a4:	9f 91       	pop	r25
    37a6:	8f 91       	pop	r24
    37a8:	7f 91       	pop	r23
    37aa:	6f 91       	pop	r22
    37ac:	5f 91       	pop	r21
    37ae:	4f 91       	pop	r20
    37b0:	3f 91       	pop	r19
    37b2:	2f 91       	pop	r18
    37b4:	0f 90       	pop	r0
    37b6:	0b be       	out	0x3b, r0	; 59
    37b8:	0f 90       	pop	r0
    37ba:	0f be       	out	0x3f, r0	; 63
    37bc:	0f 90       	pop	r0
    37be:	1f 90       	pop	r1
    37c0:	18 95       	reti

000037c2 <__vector_60>:
ISR(USARTE0_TXC_vect)
{
    37c2:	1f 92       	push	r1
    37c4:	0f 92       	push	r0
    37c6:	0f b6       	in	r0, 0x3f	; 63
    37c8:	0f 92       	push	r0
    37ca:	11 24       	eor	r1, r1
    37cc:	0b b6       	in	r0, 0x3b	; 59
    37ce:	0f 92       	push	r0
    37d0:	2f 93       	push	r18
    37d2:	3f 93       	push	r19
    37d4:	4f 93       	push	r20
    37d6:	5f 93       	push	r21
    37d8:	6f 93       	push	r22
    37da:	7f 93       	push	r23
    37dc:	8f 93       	push	r24
    37de:	9f 93       	push	r25
    37e0:	af 93       	push	r26
    37e2:	bf 93       	push	r27
    37e4:	ef 93       	push	r30
    37e6:	ff 93       	push	r31
	int16_t c;
	
	c  = pop(&(port[SOUTH].tx));
    37e8:	8c ee       	ldi	r24, 0xEC	; 236
    37ea:	95 e2       	ldi	r25, 0x25	; 37
    37ec:	0e 94 9a 02 	call	0x534	; 0x534 <pop>
	
	if(c != -1)
    37f0:	8f 3f       	cpi	r24, 0xFF	; 255
    37f2:	2f ef       	ldi	r18, 0xFF	; 255
    37f4:	92 07       	cpc	r25, r18
    37f6:	11 f0       	breq	.+4      	; 0x37fc <__vector_60+0x3a>
	{
		USARTE0.DATA = c;
    37f8:	80 93 a0 0a 	sts	0x0AA0, r24
	}
}
    37fc:	ff 91       	pop	r31
    37fe:	ef 91       	pop	r30
    3800:	bf 91       	pop	r27
    3802:	af 91       	pop	r26
    3804:	9f 91       	pop	r25
    3806:	8f 91       	pop	r24
    3808:	7f 91       	pop	r23
    380a:	6f 91       	pop	r22
    380c:	5f 91       	pop	r21
    380e:	4f 91       	pop	r20
    3810:	3f 91       	pop	r19
    3812:	2f 91       	pop	r18
    3814:	0f 90       	pop	r0
    3816:	0b be       	out	0x3b, r0	; 59
    3818:	0f 90       	pop	r0
    381a:	0f be       	out	0x3f, r0	; 63
    381c:	0f 90       	pop	r0
    381e:	1f 90       	pop	r1
    3820:	18 95       	reti

00003822 <__vector_25>:

ISR(USARTC0_RXC_vect)
{
    3822:	1f 92       	push	r1
    3824:	0f 92       	push	r0
    3826:	0f b6       	in	r0, 0x3f	; 63
    3828:	0f 92       	push	r0
    382a:	11 24       	eor	r1, r1
    382c:	0b b6       	in	r0, 0x3b	; 59
    382e:	0f 92       	push	r0
    3830:	2f 93       	push	r18
    3832:	3f 93       	push	r19
    3834:	4f 93       	push	r20
    3836:	5f 93       	push	r21
    3838:	6f 93       	push	r22
    383a:	7f 93       	push	r23
    383c:	8f 93       	push	r24
    383e:	9f 93       	push	r25
    3840:	af 93       	push	r26
    3842:	bf 93       	push	r27
    3844:	ef 93       	push	r30
    3846:	ff 93       	push	r31
	uint8_t c;
	
	c = USARTC0.DATA;
    3848:	80 91 a0 08 	lds	r24, 0x08A0
	//printf("R:%x",c);	
	push(c, &(port[WEST].rx));
    384c:	64 e7       	ldi	r22, 0x74	; 116
    384e:	75 e2       	ldi	r23, 0x25	; 37
    3850:	0e 94 7f 02 	call	0x4fe	; 0x4fe <push>
}
    3854:	ff 91       	pop	r31
    3856:	ef 91       	pop	r30
    3858:	bf 91       	pop	r27
    385a:	af 91       	pop	r26
    385c:	9f 91       	pop	r25
    385e:	8f 91       	pop	r24
    3860:	7f 91       	pop	r23
    3862:	6f 91       	pop	r22
    3864:	5f 91       	pop	r21
    3866:	4f 91       	pop	r20
    3868:	3f 91       	pop	r19
    386a:	2f 91       	pop	r18
    386c:	0f 90       	pop	r0
    386e:	0b be       	out	0x3b, r0	; 59
    3870:	0f 90       	pop	r0
    3872:	0f be       	out	0x3f, r0	; 63
    3874:	0f 90       	pop	r0
    3876:	1f 90       	pop	r1
    3878:	18 95       	reti

0000387a <__vector_27>:
ISR(USARTC0_TXC_vect)
{
    387a:	1f 92       	push	r1
    387c:	0f 92       	push	r0
    387e:	0f b6       	in	r0, 0x3f	; 63
    3880:	0f 92       	push	r0
    3882:	11 24       	eor	r1, r1
    3884:	0b b6       	in	r0, 0x3b	; 59
    3886:	0f 92       	push	r0
    3888:	2f 93       	push	r18
    388a:	3f 93       	push	r19
    388c:	4f 93       	push	r20
    388e:	5f 93       	push	r21
    3890:	6f 93       	push	r22
    3892:	7f 93       	push	r23
    3894:	8f 93       	push	r24
    3896:	9f 93       	push	r25
    3898:	af 93       	push	r26
    389a:	bf 93       	push	r27
    389c:	ef 93       	push	r30
    389e:	ff 93       	push	r31
	int16_t c;
	
	c  = pop(&(port[WEST].tx));
    38a0:	84 e9       	ldi	r24, 0x94	; 148
    38a2:	95 e2       	ldi	r25, 0x25	; 37
    38a4:	0e 94 9a 02 	call	0x534	; 0x534 <pop>
	
	if(c != -1)
    38a8:	8f 3f       	cpi	r24, 0xFF	; 255
    38aa:	2f ef       	ldi	r18, 0xFF	; 255
    38ac:	92 07       	cpc	r25, r18
    38ae:	11 f0       	breq	.+4      	; 0x38b4 <__vector_27+0x3a>
	{
		USARTC0.DATA = c;
    38b0:	80 93 a0 08 	sts	0x08A0, r24
	}
}
    38b4:	ff 91       	pop	r31
    38b6:	ef 91       	pop	r30
    38b8:	bf 91       	pop	r27
    38ba:	af 91       	pop	r26
    38bc:	9f 91       	pop	r25
    38be:	8f 91       	pop	r24
    38c0:	7f 91       	pop	r23
    38c2:	6f 91       	pop	r22
    38c4:	5f 91       	pop	r21
    38c6:	4f 91       	pop	r20
    38c8:	3f 91       	pop	r19
    38ca:	2f 91       	pop	r18
    38cc:	0f 90       	pop	r0
    38ce:	0b be       	out	0x3b, r0	; 59
    38d0:	0f 90       	pop	r0
    38d2:	0f be       	out	0x3f, r0	; 63
    38d4:	0f 90       	pop	r0
    38d6:	1f 90       	pop	r1
    38d8:	18 95       	reti

000038da <__vector_88>:

ISR(USARTD0_RXC_vect)
{
    38da:	1f 92       	push	r1
    38dc:	0f 92       	push	r0
    38de:	0f b6       	in	r0, 0x3f	; 63
    38e0:	0f 92       	push	r0
    38e2:	11 24       	eor	r1, r1
    38e4:	0b b6       	in	r0, 0x3b	; 59
    38e6:	0f 92       	push	r0
    38e8:	2f 93       	push	r18
    38ea:	3f 93       	push	r19
    38ec:	4f 93       	push	r20
    38ee:	5f 93       	push	r21
    38f0:	6f 93       	push	r22
    38f2:	7f 93       	push	r23
    38f4:	8f 93       	push	r24
    38f6:	9f 93       	push	r25
    38f8:	af 93       	push	r26
    38fa:	bf 93       	push	r27
    38fc:	ef 93       	push	r30
    38fe:	ff 93       	push	r31
	uint8_t c;
	
	c = USARTD0.DATA;
    3900:	80 91 a0 09 	lds	r24, 0x09A0
	//printf("R:%x",c);
	push(c, &(port[DOWN].rx));
    3904:	6c e6       	ldi	r22, 0x6C	; 108
    3906:	74 e2       	ldi	r23, 0x24	; 36
    3908:	0e 94 7f 02 	call	0x4fe	; 0x4fe <push>
}
    390c:	ff 91       	pop	r31
    390e:	ef 91       	pop	r30
    3910:	bf 91       	pop	r27
    3912:	af 91       	pop	r26
    3914:	9f 91       	pop	r25
    3916:	8f 91       	pop	r24
    3918:	7f 91       	pop	r23
    391a:	6f 91       	pop	r22
    391c:	5f 91       	pop	r21
    391e:	4f 91       	pop	r20
    3920:	3f 91       	pop	r19
    3922:	2f 91       	pop	r18
    3924:	0f 90       	pop	r0
    3926:	0b be       	out	0x3b, r0	; 59
    3928:	0f 90       	pop	r0
    392a:	0f be       	out	0x3f, r0	; 63
    392c:	0f 90       	pop	r0
    392e:	1f 90       	pop	r1
    3930:	18 95       	reti

00003932 <__vector_90>:
ISR(USARTD0_TXC_vect)
{
    3932:	1f 92       	push	r1
    3934:	0f 92       	push	r0
    3936:	0f b6       	in	r0, 0x3f	; 63
    3938:	0f 92       	push	r0
    393a:	11 24       	eor	r1, r1
    393c:	0b b6       	in	r0, 0x3b	; 59
    393e:	0f 92       	push	r0
    3940:	2f 93       	push	r18
    3942:	3f 93       	push	r19
    3944:	4f 93       	push	r20
    3946:	5f 93       	push	r21
    3948:	6f 93       	push	r22
    394a:	7f 93       	push	r23
    394c:	8f 93       	push	r24
    394e:	9f 93       	push	r25
    3950:	af 93       	push	r26
    3952:	bf 93       	push	r27
    3954:	ef 93       	push	r30
    3956:	ff 93       	push	r31
	int16_t c;
	
	c  = pop(&(port[DOWN].tx));
    3958:	8c e8       	ldi	r24, 0x8C	; 140
    395a:	94 e2       	ldi	r25, 0x24	; 36
    395c:	0e 94 9a 02 	call	0x534	; 0x534 <pop>
	
	if(c != -1)
    3960:	8f 3f       	cpi	r24, 0xFF	; 255
    3962:	2f ef       	ldi	r18, 0xFF	; 255
    3964:	92 07       	cpc	r25, r18
    3966:	11 f0       	breq	.+4      	; 0x396c <__vector_90+0x3a>
	{
		USARTD0.DATA = c;
    3968:	80 93 a0 09 	sts	0x09A0, r24
	}
}
    396c:	ff 91       	pop	r31
    396e:	ef 91       	pop	r30
    3970:	bf 91       	pop	r27
    3972:	af 91       	pop	r26
    3974:	9f 91       	pop	r25
    3976:	8f 91       	pop	r24
    3978:	7f 91       	pop	r23
    397a:	6f 91       	pop	r22
    397c:	5f 91       	pop	r21
    397e:	4f 91       	pop	r20
    3980:	3f 91       	pop	r19
    3982:	2f 91       	pop	r18
    3984:	0f 90       	pop	r0
    3986:	0b be       	out	0x3b, r0	; 59
    3988:	0f 90       	pop	r0
    398a:	0f be       	out	0x3f, r0	; 63
    398c:	0f 90       	pop	r0
    398e:	1f 90       	pop	r1
    3990:	18 95       	reti

00003992 <getHWTime>:

uint16_t timeHi;			// semi-private data, do not modify outside of this file

// Time in ms
Time getHWTime()
{
    3992:	0f 93       	push	r16
    3994:	1f 93       	push	r17
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    3996:	f8 94       	cli
	Time tmp;
	// prevents ISRs from corrupting multibyte write
	ATOMIC_BLOCK(ATOMIC_FORCEON)
    {
		tmp = (((Time)timeHi) << 16) | RTC.CNT;
    3998:	e0 e0       	ldi	r30, 0x00	; 0
    399a:	f4 e0       	ldi	r31, 0x04	; 4
    399c:	80 85       	ldd	r24, Z+8	; 0x08
    399e:	91 85       	ldd	r25, Z+9	; 0x09
    39a0:	00 91 ba 26 	lds	r16, 0x26BA
    39a4:	10 91 bb 26 	lds	r17, 0x26BB
    39a8:	20 e0       	ldi	r18, 0x00	; 0
    39aa:	30 e0       	ldi	r19, 0x00	; 0
    39ac:	98 01       	movw	r18, r16
    39ae:	11 27       	eor	r17, r17
    39b0:	00 27       	eor	r16, r16
    39b2:	a0 e0       	ldi	r26, 0x00	; 0
    39b4:	b0 e0       	ldi	r27, 0x00	; 0
    39b6:	08 2b       	or	r16, r24
    39b8:	19 2b       	or	r17, r25
    39ba:	2a 2b       	or	r18, r26
    39bc:	3b 2b       	or	r19, r27
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
    39be:	78 94       	sei
	}
	
	return tmp;
}
    39c0:	b8 01       	movw	r22, r16
    39c2:	c9 01       	movw	r24, r18
    39c4:	1f 91       	pop	r17
    39c6:	0f 91       	pop	r16
    39c8:	08 95       	ret

000039ca <initHWClock>:

void initHWClock(void)
{
	OSC.CTRL |= _BV(OSC_RC32MEN_bp);			// turn on 32MHz internal RC oscillator
    39ca:	80 91 50 00 	lds	r24, 0x0050
    39ce:	82 60       	ori	r24, 0x02	; 2
    39d0:	80 93 50 00 	sts	0x0050, r24
	while(!(OSC.STATUS & OSC_RC32MRDY_bm));  	// wait for it to be ready
    39d4:	80 91 51 00 	lds	r24, 0x0051
    39d8:	81 ff       	sbrs	r24, 1
    39da:	fc cf       	rjmp	.-8      	; 0x39d4 <initHWClock+0xa>

	CCP=0xD8;							// allow modification of protected register
    39dc:	88 ed       	ldi	r24, 0xD8	; 216
    39de:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc;	// change from 2MHz to 32MHz
    39e0:	81 e0       	ldi	r24, 0x01	; 1
    39e2:	80 93 40 00 	sts	0x0040, r24
    39e6:	08 95       	ret

000039e8 <initHWRTC>:
}
#else
void initHWRTC(void)
{
	//OSC_RC32KCAL = 80;
	OSC.CTRL |= OSC_RC32KEN_bm;
    39e8:	80 91 50 00 	lds	r24, 0x0050
    39ec:	84 60       	ori	r24, 0x04	; 4
    39ee:	80 93 50 00 	sts	0x0050, r24
	do {/* Wait for the 32kHz oscillator to stabilize. */} while ( ( OSC.STATUS & OSC_RC32KRDY_bm ) == 0); 
    39f2:	80 91 51 00 	lds	r24, 0x0051
    39f6:	82 ff       	sbrs	r24, 2
    39f8:	fc cf       	rjmp	.-8      	; 0x39f2 <initHWRTC+0xa>
	RTC.CTRL = RTC_PRESCALER_DIV1_gc;
    39fa:	81 e0       	ldi	r24, 0x01	; 1
    39fc:	80 93 00 04 	sts	0x0400, r24
	CLK.RTCCTRL = CLK_RTCSRC_RCOSC_gc | CLK_RTCEN_bm;
    3a00:	85 e0       	ldi	r24, 0x05	; 5
    3a02:	80 93 43 00 	sts	0x0043, r24
	//RTC.INTCTRL = RTC_OVFINTLVL_LO_gc;
	RTC.INTCTRL = RTC_OVFINTLVL_HI_gc;
    3a06:	83 e0       	ldi	r24, 0x03	; 3
    3a08:	80 93 02 04 	sts	0x0402, r24
	// initalise the RTC as zero
	RTC.CNT = 0;
    3a0c:	10 92 08 04 	sts	0x0408, r1
    3a10:	10 92 09 04 	sts	0x0409, r1
    3a14:	08 95       	ret

00003a16 <initHWTime>:
} */


void initHWTime()
{
	initHWClock();
    3a16:	0e 94 e5 1c 	call	0x39ca	; 0x39ca <initHWClock>
	initHWRTC();
    3a1a:	0c 94 f4 1c 	jmp	0x39e8	; 0x39e8 <initHWRTC>

00003a1e <__vector_10>:
}

ISR(RTC_OVF_vect)
{
    3a1e:	1f 92       	push	r1
    3a20:	0f 92       	push	r0
    3a22:	0f b6       	in	r0, 0x3f	; 63
    3a24:	0f 92       	push	r0
    3a26:	11 24       	eor	r1, r1
    3a28:	8f 93       	push	r24
    3a2a:	9f 93       	push	r25
	timeHi++;
    3a2c:	80 91 ba 26 	lds	r24, 0x26BA
    3a30:	90 91 bb 26 	lds	r25, 0x26BB
    3a34:	01 96       	adiw	r24, 0x01	; 1
    3a36:	80 93 ba 26 	sts	0x26BA, r24
    3a3a:	90 93 bb 26 	sts	0x26BB, r25
}
    3a3e:	9f 91       	pop	r25
    3a40:	8f 91       	pop	r24
    3a42:	0f 90       	pop	r0
    3a44:	0f be       	out	0x3f, r0	; 63
    3a46:	0f 90       	pop	r0
    3a48:	1f 90       	pop	r1
    3a4a:	18 95       	reti

00003a4c <updateHWMic>:
extern MicData _mic;


void updateHWMic()
{
    BB_LOCK(ATOMIC_RESTORESTATE)
    3a4c:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    3a4e:	f8 94       	cli
    // read low, then high byte
    _mic = ADCA.CH0.RES;
    3a50:	e0 e0       	ldi	r30, 0x00	; 0
    3a52:	f2 e0       	ldi	r31, 0x02	; 2
    3a54:	84 a1       	ldd	r24, Z+36	; 0x24
    3a56:	95 a1       	ldd	r25, Z+37	; 0x25

    // sign extend to full 16 bits
    _mic = _mic >> 4;
    3a58:	34 e0       	ldi	r19, 0x04	; 4
    3a5a:	95 95       	asr	r25
    3a5c:	87 95       	ror	r24
    3a5e:	3a 95       	dec	r19
    3a60:	e1 f7       	brne	.-8      	; 0x3a5a <updateHWMic+0xe>
    3a62:	80 93 6a 26 	sts	0x266A, r24
    3a66:	90 93 6b 26 	sts	0x266B, r25
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    3a6a:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
    3a6c:	08 95       	ret

00003a6e <initHWMic>:
}

void initHWMic(void)
{
    // set-up basic function
    ADCA.CTRLA = ADC_ENABLE_bm;                                 // disable combined DMA but enable ADC
    3a6e:	e0 e0       	ldi	r30, 0x00	; 0
    3a70:	f2 e0       	ldi	r31, 0x02	; 2
    3a72:	81 e0       	ldi	r24, 0x01	; 1
    3a74:	80 83       	st	Z, r24
    ADCA.CTRLB = ADC_CONMODE_bm | ADC_RESOLUTION_LEFT12BIT_gc;  // use signed 12 bit left adjusted format
    3a76:	96 e1       	ldi	r25, 0x16	; 22
    3a78:	91 83       	std	Z+1, r25	; 0x01
    ADCA.REFCTRL = ADC_REFSEL_VCC_gc | ADC_BANDGAP_bm;          // disable combined DMA but enable ADC
    3a7a:	92 e1       	ldi	r25, 0x12	; 18
    3a7c:	92 83       	std	Z+2, r25	; 0x02
    ADCA.PRESCALER = ADC_PRESCALER_DIV512_gc;                   // DIV512 prescaler
    3a7e:	97 e0       	ldi	r25, 0x07	; 7
    3a80:	94 83       	std	Z+4, r25	; 0x04

    // set-up inputs (NOTE: define for ADC_CH_MUXNEG_PIN5_gv is incorrect)
    ADCA.CH0.MUXCTRL = ADC_CH_MUXPOS_PIN0_gc | ADC_CH_MUXNEG_PIN1_gc;   // take inputs from microphone (A0, A5)
    3a82:	81 a3       	std	Z+33, r24	; 0x21
    ADCA.CH0.CTRL = ADC_CH_GAIN_1X_gc | ADC_CH_INPUTMODE_DIFFWGAIN_gc;  // use differential gain (x1)
    3a84:	93 e0       	ldi	r25, 0x03	; 3
    3a86:	90 a3       	std	Z+32, r25	; 0x20

    // set-up interrupts
    ADCA.CH0.INTCTRL = ADC_CH_INTLVL1_bm;    // interrupts on conversion completion with MED priority
    3a88:	92 e0       	ldi	r25, 0x02	; 2
    3a8a:	92 a3       	std	Z+34, r25	; 0x22

    // start conversion/clear interrupts
    ADCA.CH0.INTFLAGS = ADC_CH_CHIF_bm;
    3a8c:	83 a3       	std	Z+35, r24	; 0x23
    ADCA.CH0.CTRL |= ADC_CH_START_bm;
    3a8e:	80 a1       	ldd	r24, Z+32	; 0x20
    3a90:	80 68       	ori	r24, 0x80	; 128
    3a92:	80 a3       	std	Z+32, r24	; 0x20
    3a94:	08 95       	ret

00003a96 <rejuvenateHWMic>:
}

void rejuvenateHWMic(void)
{
    // set as outputs
    PORTA.DIRSET = PIN0_bm;
    3a96:	e0 e0       	ldi	r30, 0x00	; 0
    3a98:	f6 e0       	ldi	r31, 0x06	; 6
    3a9a:	91 e0       	ldi	r25, 0x01	; 1
    3a9c:	91 83       	std	Z+1, r25	; 0x01
    PORTA.DIRSET = PIN5_bm;
    3a9e:	80 e2       	ldi	r24, 0x20	; 32
    3aa0:	81 83       	std	Z+1, r24	; 0x01

    // drive both back to zero
    PORTA.OUTCLR = PIN0_bm;
    3aa2:	96 83       	std	Z+6, r25	; 0x06
    PORTA.OUTCLR = PIN5_bm;
    3aa4:	86 83       	std	Z+6, r24	; 0x06

    // reset as inputs
    PORTA.DIRCLR = PIN0_bm;
    3aa6:	92 83       	std	Z+2, r25	; 0x02
    PORTA.DIRCLR = PIN5_bm;
    3aa8:	82 83       	std	Z+2, r24	; 0x02
    3aaa:	08 95       	ret

00003aac <__vector_71>:

}

ISR(ADCA_CH0_vect)
{
    3aac:	1f 92       	push	r1
    3aae:	0f 92       	push	r0
    3ab0:	0f b6       	in	r0, 0x3f	; 63
    3ab2:	0f 92       	push	r0
    3ab4:	11 24       	eor	r1, r1
    3ab6:	0b b6       	in	r0, 0x3b	; 59
    3ab8:	0f 92       	push	r0
    3aba:	2f 93       	push	r18
    3abc:	3f 93       	push	r19
    3abe:	4f 93       	push	r20
    3ac0:	5f 93       	push	r21
    3ac2:	6f 93       	push	r22
    3ac4:	7f 93       	push	r23
    3ac6:	8f 93       	push	r24
    3ac8:	9f 93       	push	r25
    3aca:	af 93       	push	r26
    3acc:	bf 93       	push	r27
    3ace:	cf 93       	push	r28
    3ad0:	df 93       	push	r29
    3ad2:	ef 93       	push	r30
    3ad4:	ff 93       	push	r31
    ADCA.CH0.INTFLAGS |= ADC_CH_CHIF_bm;
    3ad6:	c0 e0       	ldi	r28, 0x00	; 0
    3ad8:	d2 e0       	ldi	r29, 0x02	; 2
    3ada:	8b a1       	ldd	r24, Y+35	; 0x23
    3adc:	81 60       	ori	r24, 0x01	; 1
    3ade:	8b a3       	std	Y+35, r24	; 0x23
    
    // update the data
    updateHWMic();
    3ae0:	0e 94 26 1d 	call	0x3a4c	; 0x3a4c <updateHWMic>

    // restart the conversion
    ADCA.CH0.CTRL |= ADC_CH_START_bm;
    3ae4:	88 a1       	ldd	r24, Y+32	; 0x20
    3ae6:	80 68       	ori	r24, 0x80	; 128
    3ae8:	88 a3       	std	Y+32, r24	; 0x20
}
    3aea:	ff 91       	pop	r31
    3aec:	ef 91       	pop	r30
    3aee:	df 91       	pop	r29
    3af0:	cf 91       	pop	r28
    3af2:	bf 91       	pop	r27
    3af4:	af 91       	pop	r26
    3af6:	9f 91       	pop	r25
    3af8:	8f 91       	pop	r24
    3afa:	7f 91       	pop	r23
    3afc:	6f 91       	pop	r22
    3afe:	5f 91       	pop	r21
    3b00:	4f 91       	pop	r20
    3b02:	3f 91       	pop	r19
    3b04:	2f 91       	pop	r18
    3b06:	0f 90       	pop	r0
    3b08:	0b be       	out	0x3b, r0	; 59
    3b0a:	0f 90       	pop	r0
    3b0c:	0f be       	out	0x3f, r0	; 63
    3b0e:	0f 90       	pop	r0
    3b10:	1f 90       	pop	r1
    3b12:	18 95       	reti

00003b14 <timer_set>:
		}
	}
*/

void timer_set( uint32_t bps, TC0_t * tx_timer, TC1_t * rx_timer)
{
    3b14:	6f 92       	push	r6
    3b16:	7f 92       	push	r7
    3b18:	8f 92       	push	r8
    3b1a:	9f 92       	push	r9
    3b1c:	af 92       	push	r10
    3b1e:	bf 92       	push	r11
    3b20:	cf 92       	push	r12
    3b22:	df 92       	push	r13
    3b24:	ef 92       	push	r14
    3b26:	ff 92       	push	r15
    3b28:	0f 93       	push	r16
    3b2a:	1f 93       	push	r17
    3b2c:	cf 93       	push	r28
    3b2e:	df 93       	push	r29
    3b30:	4b 01       	movw	r8, r22
    3b32:	5c 01       	movw	r10, r24
    3b34:	8a 01       	movw	r16, r20
    3b36:	e9 01       	movw	r28, r18
	uint16_t per;
	
	per = ((uint32_t)F_CPU / (bps));
    3b38:	c1 2c       	mov	r12, r1
    3b3a:	88 e4       	ldi	r24, 0x48	; 72
    3b3c:	d8 2e       	mov	r13, r24
    3b3e:	88 ee       	ldi	r24, 0xE8	; 232
    3b40:	e8 2e       	mov	r14, r24
    3b42:	ff 24       	eor	r15, r15
    3b44:	f3 94       	inc	r15
    3b46:	c7 01       	movw	r24, r14
    3b48:	b6 01       	movw	r22, r12
    3b4a:	a5 01       	movw	r20, r10
    3b4c:	94 01       	movw	r18, r8
    3b4e:	0e 94 0f 26 	call	0x4c1e	; 0x4c1e <__udivmodsi4>

	tx_timer->INTCTRLA = TC_OVFINTLVL_HI_gc;
    3b52:	93 e0       	ldi	r25, 0x03	; 3
    3b54:	69 2e       	mov	r6, r25
    3b56:	f8 01       	movw	r30, r16
    3b58:	66 82       	std	Z+6, r6	; 0x06
	tx_timer->PER = per;
    3b5a:	26 a3       	std	Z+38, r18	; 0x26
    3b5c:	37 a3       	std	Z+39, r19	; 0x27
	tx_timer->CTRLA = TC_CLKSEL_DIV1_gc;
    3b5e:	77 24       	eor	r7, r7
    3b60:	73 94       	inc	r7
    3b62:	70 82       	st	Z, r7
	
//	printf("TCE0 set to %x %x %x\r\n",tx_timer->INTCTRLA, tx_timer->PER, tx_timer->CTRLA);
	
	per = ((uint32_t)F_CPU / (bps*3));	
    3b64:	a3 e0       	ldi	r26, 0x03	; 3
    3b66:	b0 e0       	ldi	r27, 0x00	; 0
    3b68:	a5 01       	movw	r20, r10
    3b6a:	94 01       	movw	r18, r8
    3b6c:	0e 94 d0 25 	call	0x4ba0	; 0x4ba0 <__muluhisi3>
    3b70:	9b 01       	movw	r18, r22
    3b72:	ac 01       	movw	r20, r24
    3b74:	c7 01       	movw	r24, r14
    3b76:	b6 01       	movw	r22, r12
    3b78:	0e 94 0f 26 	call	0x4c1e	; 0x4c1e <__udivmodsi4>
	//per = 31; // bps*9
	
	rx_timer->INTCTRLA = TC_OVFINTLVL_HI_gc;
    3b7c:	6e 82       	std	Y+6, r6	; 0x06
	rx_timer->PER = per;
    3b7e:	2e a3       	std	Y+38, r18	; 0x26
    3b80:	3f a3       	std	Y+39, r19	; 0x27
	rx_timer->CTRLA = TC_CLKSEL_DIV1_gc;	
    3b82:	78 82       	st	Y, r7
}
    3b84:	df 91       	pop	r29
    3b86:	cf 91       	pop	r28
    3b88:	1f 91       	pop	r17
    3b8a:	0f 91       	pop	r16
    3b8c:	ff 90       	pop	r15
    3b8e:	ef 90       	pop	r14
    3b90:	df 90       	pop	r13
    3b92:	cf 90       	pop	r12
    3b94:	bf 90       	pop	r11
    3b96:	af 90       	pop	r10
    3b98:	9f 90       	pop	r9
    3b9a:	8f 90       	pop	r8
    3b9c:	7f 90       	pop	r7
    3b9e:	6f 90       	pop	r6
    3ba0:	08 95       	ret

00003ba2 <configure_soft_uart>:

void configure_soft_uart(soft_uart_t * uart, CircBuf * ctx, CircBuf * crx)
{
    3ba2:	fc 01       	movw	r30, r24
	uart->rx = crx;
    3ba4:	40 87       	std	Z+8, r20	; 0x08
    3ba6:	51 87       	std	Z+9, r21	; 0x09
	uart->tx = ctx;
    3ba8:	66 83       	std	Z+6, r22	; 0x06
    3baa:	77 83       	std	Z+7, r23	; 0x07
	uart->internal_rx_buffer =  0;
    3bac:	10 82       	st	Z, r1
	uart->internal_tx_buffer  = 0;
    3bae:	11 82       	std	Z+1, r1	; 0x01
    3bb0:	12 82       	std	Z+2, r1	; 0x02
    3bb2:	08 95       	ret

00003bb4 <init_soft_uart>:
}

void init_soft_uart()
{
	PORTD.OUTSET = PIN5_bm | PIN6_bm; // set tx output high (idle)
    3bb4:	e0 e6       	ldi	r30, 0x60	; 96
    3bb6:	f6 e0       	ldi	r31, 0x06	; 6
    3bb8:	80 e6       	ldi	r24, 0x60	; 96
    3bba:	85 83       	std	Z+5, r24	; 0x05
	PORTD.DIRSET = PIN5_bm | PIN6_bm; // tx pins as output
    3bbc:	81 83       	std	Z+1, r24	; 0x01
	PORTD.DIRCLR = PIN4_bm | PIN7_bm; // rx pins as input
    3bbe:	80 e9       	ldi	r24, 0x90	; 144
    3bc0:	82 83       	std	Z+2, r24	; 0x02
	
	PORTD.PIN4CTRL |= PORT_OPC_PULLUP_gc;	// set pullups on rx lines to prevent floating noise
    3bc2:	84 89       	ldd	r24, Z+20	; 0x14
    3bc4:	88 61       	ori	r24, 0x18	; 24
    3bc6:	84 8b       	std	Z+20, r24	; 0x14
	PORTD.PIN7CTRL |= PORT_OPC_PULLUP_gc;	
    3bc8:	87 89       	ldd	r24, Z+23	; 0x17
    3bca:	88 61       	ori	r24, 0x18	; 24
    3bcc:	87 8b       	std	Z+23, r24	; 0x17

	soft_uart[1].rx_state = SU_RX_IDLE;
    3bce:	10 92 ca 26 	sts	0x26CA, r1
{
	uint16_t per;
	
	per = ((uint32_t)F_CPU / (bps));

	tx_timer->INTCTRLA = TC_OVFINTLVL_HI_gc;
    3bd2:	e0 e0       	ldi	r30, 0x00	; 0
    3bd4:	fa e0       	ldi	r31, 0x0A	; 10
    3bd6:	33 e0       	ldi	r19, 0x03	; 3
    3bd8:	36 83       	std	Z+6, r19	; 0x06
	tx_timer->PER = per;
    3bda:	81 e4       	ldi	r24, 0x41	; 65
    3bdc:	93 e0       	ldi	r25, 0x03	; 3
    3bde:	86 a3       	std	Z+38, r24	; 0x26
    3be0:	97 a3       	std	Z+39, r25	; 0x27
	tx_timer->CTRLA = TC_CLKSEL_DIV1_gc;
    3be2:	21 e0       	ldi	r18, 0x01	; 1
    3be4:	20 83       	st	Z, r18
//	printf("TCE0 set to %x %x %x\r\n",tx_timer->INTCTRLA, tx_timer->PER, tx_timer->CTRLA);
	
	per = ((uint32_t)F_CPU / (bps*3));	
	//per = 31; // bps*9
	
	rx_timer->INTCTRLA = TC_OVFINTLVL_HI_gc;
    3be6:	e0 e4       	ldi	r30, 0x40	; 64
    3be8:	f9 e0       	ldi	r31, 0x09	; 9
    3bea:	36 83       	std	Z+6, r19	; 0x06
	rx_timer->PER = per;
    3bec:	85 e1       	ldi	r24, 0x15	; 21
    3bee:	91 e0       	ldi	r25, 0x01	; 1
    3bf0:	86 a3       	std	Z+38, r24	; 0x26
    3bf2:	97 a3       	std	Z+39, r25	; 0x27
	rx_timer->CTRLA = TC_CLKSEL_DIV1_gc;	
    3bf4:	20 83       	st	Z, r18
    3bf6:	08 95       	ret

00003bf8 <su_getchar>:

	timer_set( BAUD_RATE, &TCE0, &TCD1);	
}

int su_getchar(soft_uart_t * uart)
{
    3bf8:	cf 93       	push	r28
    3bfa:	df 93       	push	r29
    3bfc:	ec 01       	movw	r28, r24
	char		ch;

	if(isEmpty((uart->rx)))
    3bfe:	88 85       	ldd	r24, Y+8	; 0x08
    3c00:	99 85       	ldd	r25, Y+9	; 0x09
    3c02:	0e 94 b5 02 	call	0x56a	; 0x56a <isEmpty>
    3c06:	81 11       	cpse	r24, r1
    3c08:	07 c0       	rjmp	.+14     	; 0x3c18 <su_getchar+0x20>
	{
		return -1;
	}
	else
	{	
		ch = pop((uart->rx));
    3c0a:	88 85       	ldd	r24, Y+8	; 0x08
    3c0c:	99 85       	ldd	r25, Y+9	; 0x09
    3c0e:	0e 94 9a 02 	call	0x534	; 0x534 <pop>
    3c12:	9c 01       	movw	r18, r24
		return( ch );
    3c14:	33 27       	eor	r19, r19
    3c16:	02 c0       	rjmp	.+4      	; 0x3c1c <su_getchar+0x24>
{
	char		ch;

	if(isEmpty((uart->rx)))
	{
		return -1;
    3c18:	2f ef       	ldi	r18, 0xFF	; 255
    3c1a:	3f ef       	ldi	r19, 0xFF	; 255
	else
	{	
		ch = pop((uart->rx));
		return( ch );
	}
}
    3c1c:	c9 01       	movw	r24, r18
    3c1e:	df 91       	pop	r29
    3c20:	cf 91       	pop	r28
    3c22:	08 95       	ret

00003c24 <set_tx_char>:

void set_tx_char(int ch, soft_uart_t * uart)
{
	if(ch != -1)
    3c24:	8f 3f       	cpi	r24, 0xFF	; 255
    3c26:	2f ef       	ldi	r18, 0xFF	; 255
    3c28:	92 07       	cpc	r25, r18
    3c2a:	31 f0       	breq	.+12     	; 0x3c38 <set_tx_char+0x14>
	{
		uart->internal_tx_buffer = (ch << 1) | 0x200;
    3c2c:	88 0f       	add	r24, r24
    3c2e:	99 1f       	adc	r25, r25
    3c30:	92 60       	ori	r25, 0x02	; 2
    3c32:	fb 01       	movw	r30, r22
    3c34:	81 83       	std	Z+1, r24	; 0x01
    3c36:	92 83       	std	Z+2, r25	; 0x02
    3c38:	08 95       	ret

00003c3a <su_putchar>:
	}
}

void su_putchar( char ch, soft_uart_t * uart)
{	
	while ( uart->internal_tx_buffer != 0 );
    3c3a:	fb 01       	movw	r30, r22
    3c3c:	21 81       	ldd	r18, Z+1	; 0x01
    3c3e:	32 81       	ldd	r19, Z+2	; 0x02
    3c40:	23 2b       	or	r18, r19
    3c42:	d9 f7       	brne	.-10     	; 0x3c3a <su_putchar>
	
	set_tx_char(ch, uart);
    3c44:	90 e0       	ldi	r25, 0x00	; 0
    3c46:	0c 94 12 1e 	jmp	0x3c24	; 0x3c24 <set_tx_char>

00003c4a <kbhit>:

}

int kbhit( soft_uart_t * uart )
{
	return( !isEmpty(uart->rx));
    3c4a:	fc 01       	movw	r30, r24
    3c4c:	80 85       	ldd	r24, Z+8	; 0x08
    3c4e:	91 85       	ldd	r25, Z+9	; 0x09
    3c50:	0e 94 b5 02 	call	0x56a	; 0x56a <isEmpty>
    3c54:	21 e0       	ldi	r18, 0x01	; 1
    3c56:	30 e0       	ldi	r19, 0x00	; 0
    3c58:	88 23       	and	r24, r24
    3c5a:	11 f0       	breq	.+4      	; 0x3c60 <kbhit+0x16>
    3c5c:	20 e0       	ldi	r18, 0x00	; 0
    3c5e:	30 e0       	ldi	r19, 0x00	; 0
}
    3c60:	c9 01       	movw	r24, r18
    3c62:	08 95       	ret

00003c64 <__vector_83>:

// rx ISR
ISR(TCD1_OVF_vect)
{
    3c64:	1f 92       	push	r1
    3c66:	0f 92       	push	r0
    3c68:	0f b6       	in	r0, 0x3f	; 63
    3c6a:	0f 92       	push	r0
    3c6c:	11 24       	eor	r1, r1
    3c6e:	0b b6       	in	r0, 0x3b	; 59
    3c70:	0f 92       	push	r0
    3c72:	2f 93       	push	r18
    3c74:	3f 93       	push	r19
    3c76:	4f 93       	push	r20
    3c78:	5f 93       	push	r21
    3c7a:	6f 93       	push	r22
    3c7c:	7f 93       	push	r23
    3c7e:	8f 93       	push	r24
    3c80:	9f 93       	push	r25
    3c82:	af 93       	push	r26
    3c84:	bf 93       	push	r27
    3c86:	ef 93       	push	r30
    3c88:	ff 93       	push	r31
	if(!soft_uart[0].sample_time)
    3c8a:	80 91 c1 26 	lds	r24, 0x26C1
    3c8e:	81 11       	cpse	r24, r1
    3c90:	3b c0       	rjmp	.+118    	; 0x3d08 <__vector_83+0xa4>
	{
		if(soft_uart[0].rx_state == SU_RX_IDLE)
    3c92:	80 91 c0 26 	lds	r24, 0x26C0
    3c96:	81 11       	cpse	r24, r1
    3c98:	0b c0       	rjmp	.+22     	; 0x3cb0 <__vector_83+0x4c>
		{
			if(!(PORTD.IN & PIN4_bm))
    3c9a:	80 91 68 06 	lds	r24, 0x0668
    3c9e:	84 fd       	sbrc	r24, 4
    3ca0:	36 c0       	rjmp	.+108    	; 0x3d0e <__vector_83+0xaa>
			{
				soft_uart[0].rx_state = SU_RX_BYTE;
    3ca2:	81 e0       	ldi	r24, 0x01	; 1
    3ca4:	80 93 c0 26 	sts	0x26C0, r24
				soft_uart[0].rx_mask = 0x01;
    3ca8:	80 93 bf 26 	sts	0x26BF, r24
				soft_uart[0].sample_time = 3;	// begin sampling every third time
    3cac:	83 e0       	ldi	r24, 0x03	; 3
    3cae:	2d c0       	rjmp	.+90     	; 0x3d0a <__vector_83+0xa6>
			}
		}
		else if (soft_uart[0].rx_state == SU_RX_BYTE)
    3cb0:	81 30       	cpi	r24, 0x01	; 1
    3cb2:	b9 f4       	brne	.+46     	; 0x3ce2 <__vector_83+0x7e>
		{
			if(PORTD.IN & PIN4_bm)
    3cb4:	80 91 68 06 	lds	r24, 0x0668
    3cb8:	84 ff       	sbrs	r24, 4
    3cba:	07 c0       	rjmp	.+14     	; 0x3cca <__vector_83+0x66>
			{
				soft_uart[0].internal_rx_buffer |= soft_uart[0].rx_mask;
    3cbc:	80 91 bc 26 	lds	r24, 0x26BC
    3cc0:	90 91 bf 26 	lds	r25, 0x26BF
    3cc4:	89 2b       	or	r24, r25
    3cc6:	80 93 bc 26 	sts	0x26BC, r24
			}
			
			soft_uart[0].rx_mask <<= 1;
    3cca:	80 91 bf 26 	lds	r24, 0x26BF
    3cce:	88 0f       	add	r24, r24
    3cd0:	80 93 bf 26 	sts	0x26BF, r24

			if(!soft_uart[0].rx_mask)
    3cd4:	81 11       	cpse	r24, r1
    3cd6:	03 c0       	rjmp	.+6      	; 0x3cde <__vector_83+0x7a>
			{
				soft_uart[0].rx_state = SU_RX_STOP;
    3cd8:	82 e0       	ldi	r24, 0x02	; 2
    3cda:	80 93 c0 26 	sts	0x26C0, r24
			}
			
			soft_uart[0].sample_time = 2;	
    3cde:	82 e0       	ldi	r24, 0x02	; 2
    3ce0:	14 c0       	rjmp	.+40     	; 0x3d0a <__vector_83+0xa6>
		}
		else if (soft_uart[0].rx_state == SU_RX_STOP)
    3ce2:	82 30       	cpi	r24, 0x02	; 2
    3ce4:	a1 f4       	brne	.+40     	; 0x3d0e <__vector_83+0xaa>
		{
			if(PORTD.IN & PIN4_bm)
    3ce6:	80 91 68 06 	lds	r24, 0x0668
    3cea:	84 ff       	sbrs	r24, 4
    3cec:	0a c0       	rjmp	.+20     	; 0x3d02 <__vector_83+0x9e>
			{
				push(soft_uart[0].internal_rx_buffer, soft_uart[0].rx);
    3cee:	80 91 bc 26 	lds	r24, 0x26BC
    3cf2:	60 91 c4 26 	lds	r22, 0x26C4
    3cf6:	70 91 c5 26 	lds	r23, 0x26C5
    3cfa:	0e 94 7f 02 	call	0x4fe	; 0x4fe <push>
				soft_uart[0].internal_rx_buffer = 0;
    3cfe:	10 92 bc 26 	sts	0x26BC, r1
			}
			
			soft_uart[0].rx_state = SU_RX_IDLE;		
    3d02:	10 92 c0 26 	sts	0x26C0, r1
    3d06:	03 c0       	rjmp	.+6      	; 0x3d0e <__vector_83+0xaa>
		}
	}
	else
	{
		soft_uart[0].sample_time--;
    3d08:	81 50       	subi	r24, 0x01	; 1
    3d0a:	80 93 c1 26 	sts	0x26C1, r24
	}

	if(!soft_uart[1].sample_time)
    3d0e:	80 91 cb 26 	lds	r24, 0x26CB
    3d12:	81 11       	cpse	r24, r1
    3d14:	3b c0       	rjmp	.+118    	; 0x3d8c <__vector_83+0x128>
	{
		if(soft_uart[1].rx_state == SU_RX_IDLE)
    3d16:	80 91 ca 26 	lds	r24, 0x26CA
    3d1a:	81 11       	cpse	r24, r1
    3d1c:	0b c0       	rjmp	.+22     	; 0x3d34 <__vector_83+0xd0>
		{
			if(!(PORTD.IN & PIN7_bm))
    3d1e:	80 91 68 06 	lds	r24, 0x0668
    3d22:	87 fd       	sbrc	r24, 7
    3d24:	36 c0       	rjmp	.+108    	; 0x3d92 <__vector_83+0x12e>
			{
				soft_uart[1].rx_state = SU_RX_BYTE;
    3d26:	81 e0       	ldi	r24, 0x01	; 1
    3d28:	80 93 ca 26 	sts	0x26CA, r24
				soft_uart[1].rx_mask = 0x01;
    3d2c:	80 93 c9 26 	sts	0x26C9, r24
				soft_uart[1].sample_time = 3;	// begin sampling every third time
    3d30:	83 e0       	ldi	r24, 0x03	; 3
    3d32:	2d c0       	rjmp	.+90     	; 0x3d8e <__vector_83+0x12a>
			}
		}
		else if (soft_uart[1].rx_state == SU_RX_BYTE)
    3d34:	81 30       	cpi	r24, 0x01	; 1
    3d36:	b9 f4       	brne	.+46     	; 0x3d66 <__vector_83+0x102>
		{
			if(PORTD.IN & PIN7_bm)
    3d38:	80 91 68 06 	lds	r24, 0x0668
    3d3c:	87 ff       	sbrs	r24, 7
    3d3e:	07 c0       	rjmp	.+14     	; 0x3d4e <__vector_83+0xea>
			{
				soft_uart[1].internal_rx_buffer |= soft_uart[1].rx_mask;
    3d40:	80 91 c6 26 	lds	r24, 0x26C6
    3d44:	90 91 c9 26 	lds	r25, 0x26C9
    3d48:	89 2b       	or	r24, r25
    3d4a:	80 93 c6 26 	sts	0x26C6, r24
			}
			
			soft_uart[1].rx_mask <<= 1;
    3d4e:	80 91 c9 26 	lds	r24, 0x26C9
    3d52:	88 0f       	add	r24, r24
    3d54:	80 93 c9 26 	sts	0x26C9, r24

			if(!soft_uart[1].rx_mask)
    3d58:	81 11       	cpse	r24, r1
    3d5a:	03 c0       	rjmp	.+6      	; 0x3d62 <__vector_83+0xfe>
			{
				soft_uart[1].rx_state = SU_RX_STOP;
    3d5c:	82 e0       	ldi	r24, 0x02	; 2
    3d5e:	80 93 ca 26 	sts	0x26CA, r24
			}
			
			soft_uart[1].sample_time = 2;	
    3d62:	82 e0       	ldi	r24, 0x02	; 2
    3d64:	14 c0       	rjmp	.+40     	; 0x3d8e <__vector_83+0x12a>
		}
		else if (soft_uart[1].rx_state == SU_RX_STOP)
    3d66:	82 30       	cpi	r24, 0x02	; 2
    3d68:	a1 f4       	brne	.+40     	; 0x3d92 <__vector_83+0x12e>
		{
			if(PORTD.IN & PIN7_bm)
    3d6a:	80 91 68 06 	lds	r24, 0x0668
    3d6e:	87 ff       	sbrs	r24, 7
    3d70:	0a c0       	rjmp	.+20     	; 0x3d86 <__vector_83+0x122>
			{
				push(soft_uart[1].internal_rx_buffer, soft_uart[1].rx);
    3d72:	80 91 c6 26 	lds	r24, 0x26C6
    3d76:	60 91 ce 26 	lds	r22, 0x26CE
    3d7a:	70 91 cf 26 	lds	r23, 0x26CF
    3d7e:	0e 94 7f 02 	call	0x4fe	; 0x4fe <push>
				soft_uart[1].internal_rx_buffer = 0;
    3d82:	10 92 c6 26 	sts	0x26C6, r1
			}
			
			soft_uart[1].rx_state = SU_RX_IDLE;		
    3d86:	10 92 ca 26 	sts	0x26CA, r1
    3d8a:	03 c0       	rjmp	.+6      	; 0x3d92 <__vector_83+0x12e>
		}
	}
	else
	{
		soft_uart[1].sample_time--;
    3d8c:	81 50       	subi	r24, 0x01	; 1
    3d8e:	80 93 cb 26 	sts	0x26CB, r24
	}	
}
    3d92:	ff 91       	pop	r31
    3d94:	ef 91       	pop	r30
    3d96:	bf 91       	pop	r27
    3d98:	af 91       	pop	r26
    3d9a:	9f 91       	pop	r25
    3d9c:	8f 91       	pop	r24
    3d9e:	7f 91       	pop	r23
    3da0:	6f 91       	pop	r22
    3da2:	5f 91       	pop	r21
    3da4:	4f 91       	pop	r20
    3da6:	3f 91       	pop	r19
    3da8:	2f 91       	pop	r18
    3daa:	0f 90       	pop	r0
    3dac:	0b be       	out	0x3b, r0	; 59
    3dae:	0f 90       	pop	r0
    3db0:	0f be       	out	0x3f, r0	; 63
    3db2:	0f 90       	pop	r0
    3db4:	1f 90       	pop	r1
    3db6:	18 95       	reti

00003db8 <TWI_MasterInit>:
 */
void TWI_MasterInit(TWI_Master_t *twi,
                    TWI_t *module,
                    TWI_MASTER_INTLVL_t intLevel,
                    uint8_t baudRateRegisterSetting)
{
    3db8:	fc 01       	movw	r30, r24
	twi->interface = module;
    3dba:	60 83       	st	Z, r22
    3dbc:	71 83       	std	Z+1, r23	; 0x01
	twi->interface->MASTER.CTRLA = intLevel |
    3dbe:	48 63       	ori	r20, 0x38	; 56
    3dc0:	db 01       	movw	r26, r22
    3dc2:	11 96       	adiw	r26, 0x01	; 1
    3dc4:	4c 93       	st	X, r20
	                               TWI_MASTER_RIEN_bm |
	                               TWI_MASTER_WIEN_bm |
	                               TWI_MASTER_ENABLE_bm;
	twi->interface->MASTER.BAUD = baudRateRegisterSetting;
    3dc6:	a0 81       	ld	r26, Z
    3dc8:	b1 81       	ldd	r27, Z+1	; 0x01
    3dca:	15 96       	adiw	r26, 0x05	; 5
    3dcc:	2c 93       	st	X, r18
	twi->interface->MASTER.STATUS = TWI_MASTER_BUSSTATE_IDLE_gc;
    3dce:	01 90       	ld	r0, Z+
    3dd0:	f0 81       	ld	r31, Z
    3dd2:	e0 2d       	mov	r30, r0
    3dd4:	81 e0       	ldi	r24, 0x01	; 1
    3dd6:	84 83       	std	Z+4, r24	; 0x04
    3dd8:	08 95       	ret

00003dda <TWI_MasterState>:
 *  \retval TWI_MASTER_BUSSTATE_BUSY_gc    Bus state is busy.
 */
TWI_MASTER_BUSSTATE_t TWI_MasterState(TWI_Master_t *twi)
{
	TWI_MASTER_BUSSTATE_t twi_status;
	twi_status = (TWI_MASTER_BUSSTATE_t) (twi->interface->MASTER.STATUS &
    3dda:	dc 01       	movw	r26, r24
    3ddc:	ed 91       	ld	r30, X+
    3dde:	fc 91       	ld	r31, X
    3de0:	84 81       	ldd	r24, Z+4	; 0x04
	                                      TWI_MASTER_BUSSTATE_gm);
	return twi_status;
}
    3de2:	83 70       	andi	r24, 0x03	; 3
    3de4:	08 95       	ret

00003de6 <TWI_MasterReady>:
 *  \retval true  If transaction could be started.
 *  \retval false If transaction could not be started.
 */
bool TWI_MasterReady(TWI_Master_t *twi)
{
	bool twi_status = (twi->status & TWIM_STATUS_READY);
    3de6:	fc 01       	movw	r30, r24
    3de8:	87 85       	ldd	r24, Z+15	; 0x0f
	return twi_status;
}
    3dea:	80 e0       	ldi	r24, 0x00	; 0
    3dec:	08 95       	ret

00003dee <TWI_MasterWriteRead>:
bool TWI_MasterWriteRead(TWI_Master_t *twi,
                         uint8_t address,
                         uint8_t *writeData,
                         uint8_t bytesToWrite,
                         uint8_t bytesToRead)
{
    3dee:	0f 93       	push	r16
    3df0:	cf 93       	push	r28
    3df2:	df 93       	push	r29
    3df4:	fc 01       	movw	r30, r24
	/*Parameter sanity check. */
	if (bytesToWrite > TWIM_WRITE_BUFFER_SIZE) {
    3df6:	25 30       	cpi	r18, 0x05	; 5
    3df8:	50 f5       	brcc	.+84     	; 0x3e4e <TWI_MasterWriteRead+0x60>
		return false;
	}
	if (bytesToRead > TWIM_READ_BUFFER_SIZE) {
    3dfa:	05 30       	cpi	r16, 0x05	; 5
    3dfc:	40 f5       	brcc	.+80     	; 0x3e4e <TWI_MasterWriteRead+0x60>
		return false;
	}

	/*Initiate transaction if bus is ready. */
	if (twi->status == TWIM_STATUS_READY) {
    3dfe:	87 85       	ldd	r24, Z+15	; 0x0f
    3e00:	81 11       	cpse	r24, r1
    3e02:	25 c0       	rjmp	.+74     	; 0x3e4e <TWI_MasterWriteRead+0x60>

		twi->status = TWIM_STATUS_BUSY;
    3e04:	81 e0       	ldi	r24, 0x01	; 1
    3e06:	87 87       	std	Z+15, r24	; 0x0f
		twi->result = TWIM_RESULT_UNKNOWN;
    3e08:	10 8a       	std	Z+16, r1	; 0x10

		twi->address = address<<1;
    3e0a:	66 0f       	add	r22, r22
    3e0c:	62 83       	std	Z+2, r22	; 0x02
    3e0e:	da 01       	movw	r26, r20

		/* Fill write data buffer. */
		for (uint8_t bufferIndex=0; bufferIndex < bytesToWrite; bufferIndex++) {
    3e10:	80 e0       	ldi	r24, 0x00	; 0
    3e12:	90 e0       	ldi	r25, 0x00	; 0
    3e14:	06 c0       	rjmp	.+12     	; 0x3e22 <TWI_MasterWriteRead+0x34>
			twi->writeData[bufferIndex] = writeData[bufferIndex];
    3e16:	3d 91       	ld	r19, X+
    3e18:	ef 01       	movw	r28, r30
    3e1a:	c8 0f       	add	r28, r24
    3e1c:	d9 1f       	adc	r29, r25
    3e1e:	3b 83       	std	Y+3, r19	; 0x03
    3e20:	01 96       	adiw	r24, 0x01	; 1
		twi->result = TWIM_RESULT_UNKNOWN;

		twi->address = address<<1;

		/* Fill write data buffer. */
		for (uint8_t bufferIndex=0; bufferIndex < bytesToWrite; bufferIndex++) {
    3e22:	82 17       	cp	r24, r18
    3e24:	c0 f3       	brcs	.-16     	; 0x3e16 <TWI_MasterWriteRead+0x28>
			twi->writeData[bufferIndex] = writeData[bufferIndex];
		}

		twi->bytesToWrite = bytesToWrite;
    3e26:	23 87       	std	Z+11, r18	; 0x0b
		twi->bytesToRead = bytesToRead;
    3e28:	04 87       	std	Z+12, r16	; 0x0c
		twi->bytesWritten = 0;
    3e2a:	15 86       	std	Z+13, r1	; 0x0d
		twi->bytesRead = 0;
    3e2c:	16 86       	std	Z+14, r1	; 0x0e

		/* If write command, send the START condition + Address +
		 * 'R/_W = 0'
		 */
		if (twi->bytesToWrite > 0) {
    3e2e:	83 85       	ldd	r24, Z+11	; 0x0b
    3e30:	88 23       	and	r24, r24
    3e32:	19 f0       	breq	.+6      	; 0x3e3a <TWI_MasterWriteRead+0x4c>
			uint8_t writeAddress = twi->address & ~0x01;
    3e34:	82 81       	ldd	r24, Z+2	; 0x02
    3e36:	8e 7f       	andi	r24, 0xFE	; 254
    3e38:	05 c0       	rjmp	.+10     	; 0x3e44 <TWI_MasterWriteRead+0x56>
		}

		/* If read command, send the START condition + Address +
		 * 'R/_W = 1'
		 */
		else if (twi->bytesToRead > 0) {
    3e3a:	84 85       	ldd	r24, Z+12	; 0x0c
    3e3c:	88 23       	and	r24, r24
    3e3e:	49 f0       	breq	.+18     	; 0x3e52 <TWI_MasterWriteRead+0x64>
			uint8_t readAddress = twi->address | 0x01;
    3e40:	82 81       	ldd	r24, Z+2	; 0x02
    3e42:	81 60       	ori	r24, 0x01	; 1
			twi->interface->MASTER.ADDR = readAddress;
    3e44:	01 90       	ld	r0, Z+
    3e46:	f0 81       	ld	r31, Z
    3e48:	e0 2d       	mov	r30, r0
    3e4a:	86 83       	std	Z+6, r24	; 0x06
    3e4c:	02 c0       	rjmp	.+4      	; 0x3e52 <TWI_MasterWriteRead+0x64>
                         uint8_t bytesToWrite,
                         uint8_t bytesToRead)
{
	/*Parameter sanity check. */
	if (bytesToWrite > TWIM_WRITE_BUFFER_SIZE) {
		return false;
    3e4e:	80 e0       	ldi	r24, 0x00	; 0
    3e50:	01 c0       	rjmp	.+2      	; 0x3e54 <TWI_MasterWriteRead+0x66>
		 */
		else if (twi->bytesToRead > 0) {
			uint8_t readAddress = twi->address | 0x01;
			twi->interface->MASTER.ADDR = readAddress;
		}
		return true;
    3e52:	81 e0       	ldi	r24, 0x01	; 1
	} else {
		return false;
	}
}
    3e54:	df 91       	pop	r29
    3e56:	cf 91       	pop	r28
    3e58:	0f 91       	pop	r16
    3e5a:	08 95       	ret

00003e5c <TWI_MasterRead>:
 *  \retval false If transaction could not be started.
 */
bool TWI_MasterRead(TWI_Master_t *twi,
                    uint8_t address,
                    uint8_t bytesToRead)
{
    3e5c:	0f 93       	push	r16
	bool twi_status = TWI_MasterWriteRead(twi, address, 0, 0, bytesToRead);
    3e5e:	04 2f       	mov	r16, r20
    3e60:	20 e0       	ldi	r18, 0x00	; 0
    3e62:	40 e0       	ldi	r20, 0x00	; 0
    3e64:	50 e0       	ldi	r21, 0x00	; 0
    3e66:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <TWI_MasterWriteRead>
	return twi_status;
}
    3e6a:	0f 91       	pop	r16
    3e6c:	08 95       	ret

00003e6e <TWI_MasterWrite>:
 */
bool TWI_MasterWrite(TWI_Master_t *twi,
                     uint8_t address,
                     uint8_t *writeData,
                     uint8_t bytesToWrite)
{
    3e6e:	0f 93       	push	r16
	bool twi_status = TWI_MasterWriteRead(twi, address, writeData, bytesToWrite, 0);
    3e70:	00 e0       	ldi	r16, 0x00	; 0
    3e72:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <TWI_MasterWriteRead>
	return twi_status;
}
    3e76:	0f 91       	pop	r16
    3e78:	08 95       	ret

00003e7a <TWI_MasterArbitrationLostBusErrorHandler>:
 *  Handles TWI responses to lost arbitration and bus error.
 *
 *  \param twi  The TWI_Master_t struct instance.
 */
void TWI_MasterArbitrationLostBusErrorHandler(TWI_Master_t *twi)
{
    3e7a:	fc 01       	movw	r30, r24
	uint8_t currentStatus = twi->interface->MASTER.STATUS;
    3e7c:	a0 81       	ld	r26, Z
    3e7e:	b1 81       	ldd	r27, Z+1	; 0x01
    3e80:	14 96       	adiw	r26, 0x04	; 4
    3e82:	8c 91       	ld	r24, X
    3e84:	14 97       	sbiw	r26, 0x04	; 4

	/* If bus error. */
	if (currentStatus & TWI_MASTER_BUSERR_bm) {
    3e86:	82 ff       	sbrs	r24, 2
    3e88:	02 c0       	rjmp	.+4      	; 0x3e8e <TWI_MasterArbitrationLostBusErrorHandler+0x14>
		twi->result = TWIM_RESULT_BUS_ERROR;
    3e8a:	94 e0       	ldi	r25, 0x04	; 4
    3e8c:	01 c0       	rjmp	.+2      	; 0x3e90 <TWI_MasterArbitrationLostBusErrorHandler+0x16>
	}
	/* If arbitration lost. */
	else {
		twi->result = TWIM_RESULT_ARBITRATION_LOST;
    3e8e:	93 e0       	ldi	r25, 0x03	; 3
    3e90:	90 8b       	std	Z+16, r25	; 0x10
	}

	/* Clear interrupt flag. */
	twi->interface->MASTER.STATUS = currentStatus | TWI_MASTER_ARBLOST_bm;
    3e92:	88 60       	ori	r24, 0x08	; 8
    3e94:	14 96       	adiw	r26, 0x04	; 4
    3e96:	8c 93       	st	X, r24

	twi->status = TWIM_STATUS_READY;
    3e98:	17 86       	std	Z+15, r1	; 0x0f
    3e9a:	08 95       	ret

00003e9c <TWI_MasterWriteHandler>:
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 *
 *  \param twi The TWI_Master_t struct instance.
 */
void TWI_MasterWriteHandler(TWI_Master_t *twi)
{
    3e9c:	cf 93       	push	r28
    3e9e:	df 93       	push	r29
    3ea0:	fc 01       	movw	r30, r24
	/* Local variables used in if tests to avoid compiler warning. */
	uint8_t bytesToWrite  = twi->bytesToWrite;
    3ea2:	93 85       	ldd	r25, Z+11	; 0x0b
	uint8_t bytesToRead   = twi->bytesToRead;
    3ea4:	84 85       	ldd	r24, Z+12	; 0x0c

	/* If NOT acknowledged (NACK) by slave cancel the transaction. */
	if (twi->interface->MASTER.STATUS & TWI_MASTER_RXACK_bm) {
    3ea6:	a0 81       	ld	r26, Z
    3ea8:	b1 81       	ldd	r27, Z+1	; 0x01
    3eaa:	14 96       	adiw	r26, 0x04	; 4
    3eac:	2c 91       	ld	r18, X
    3eae:	14 97       	sbiw	r26, 0x04	; 4
    3eb0:	24 ff       	sbrs	r18, 4
    3eb2:	05 c0       	rjmp	.+10     	; 0x3ebe <TWI_MasterWriteHandler+0x22>
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    3eb4:	83 e0       	ldi	r24, 0x03	; 3
    3eb6:	13 96       	adiw	r26, 0x03	; 3
    3eb8:	8c 93       	st	X, r24
		twi->result = TWIM_RESULT_NACK_RECEIVED;
    3eba:	85 e0       	ldi	r24, 0x05	; 5
    3ebc:	1a c0       	rjmp	.+52     	; 0x3ef2 <TWI_MasterWriteHandler+0x56>
		twi->status = TWIM_STATUS_READY;
	}

	/* If more bytes to write, send data. */
	else if (twi->bytesWritten < bytesToWrite) {
    3ebe:	25 85       	ldd	r18, Z+13	; 0x0d
    3ec0:	29 17       	cp	r18, r25
    3ec2:	58 f4       	brcc	.+22     	; 0x3eda <TWI_MasterWriteHandler+0x3e>
		uint8_t data = twi->writeData[twi->bytesWritten];
    3ec4:	85 85       	ldd	r24, Z+13	; 0x0d
    3ec6:	ef 01       	movw	r28, r30
    3ec8:	c8 0f       	add	r28, r24
    3eca:	d1 1d       	adc	r29, r1
    3ecc:	8b 81       	ldd	r24, Y+3	; 0x03
		twi->interface->MASTER.DATA = data;
    3ece:	17 96       	adiw	r26, 0x07	; 7
    3ed0:	8c 93       	st	X, r24
		++twi->bytesWritten;
    3ed2:	85 85       	ldd	r24, Z+13	; 0x0d
    3ed4:	8f 5f       	subi	r24, 0xFF	; 255
    3ed6:	85 87       	std	Z+13, r24	; 0x0d
    3ed8:	0e c0       	rjmp	.+28     	; 0x3ef6 <TWI_MasterWriteHandler+0x5a>
	}

	/* If bytes to read, send repeated START condition + Address +
	 * 'R/_W = 1'
	 */
	else if (twi->bytesRead < bytesToRead) {
    3eda:	96 85       	ldd	r25, Z+14	; 0x0e
    3edc:	98 17       	cp	r25, r24
    3ede:	28 f4       	brcc	.+10     	; 0x3eea <TWI_MasterWriteHandler+0x4e>
		uint8_t readAddress = twi->address | 0x01;
    3ee0:	82 81       	ldd	r24, Z+2	; 0x02
    3ee2:	81 60       	ori	r24, 0x01	; 1
		twi->interface->MASTER.ADDR = readAddress;
    3ee4:	16 96       	adiw	r26, 0x06	; 6
    3ee6:	8c 93       	st	X, r24
    3ee8:	06 c0       	rjmp	.+12     	; 0x3ef6 <TWI_MasterWriteHandler+0x5a>
	}

	/* If transaction finished, send STOP condition and set RESULT OK. */
	else {
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    3eea:	83 e0       	ldi	r24, 0x03	; 3
    3eec:	13 96       	adiw	r26, 0x03	; 3
    3eee:	8c 93       	st	X, r24
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result)
{
	twi->result = result;
    3ef0:	81 e0       	ldi	r24, 0x01	; 1
    3ef2:	80 8b       	std	Z+16, r24	; 0x10
	twi->status = TWIM_STATUS_READY;
    3ef4:	17 86       	std	Z+15, r1	; 0x0f
	/* If transaction finished, send STOP condition and set RESULT OK. */
	else {
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		TWI_MasterTransactionFinished(twi, TWIM_RESULT_OK);
	}
}
    3ef6:	df 91       	pop	r29
    3ef8:	cf 91       	pop	r28
    3efa:	08 95       	ret

00003efc <TWI_MasterReadHandler>:
 *  reading bytes from the TWI slave.
 *
 *  \param twi The TWI_Master_t struct instance.
 */
void TWI_MasterReadHandler(TWI_Master_t *twi)
{
    3efc:	fc 01       	movw	r30, r24
	/* Fetch data if bytes to be read. */
	if (twi->bytesRead < TWIM_READ_BUFFER_SIZE) {
    3efe:	86 85       	ldd	r24, Z+14	; 0x0e
    3f00:	a0 81       	ld	r26, Z
    3f02:	b1 81       	ldd	r27, Z+1	; 0x01
    3f04:	84 30       	cpi	r24, 0x04	; 4
    3f06:	60 f4       	brcc	.+24     	; 0x3f20 <TWI_MasterReadHandler+0x24>
		uint8_t data = twi->interface->MASTER.DATA;
    3f08:	17 96       	adiw	r26, 0x07	; 7
    3f0a:	8c 91       	ld	r24, X
		twi->readData[twi->bytesRead] = data;
    3f0c:	96 85       	ldd	r25, Z+14	; 0x0e
    3f0e:	df 01       	movw	r26, r30
    3f10:	a9 0f       	add	r26, r25
    3f12:	b1 1d       	adc	r27, r1
    3f14:	17 96       	adiw	r26, 0x07	; 7
    3f16:	8c 93       	st	X, r24
		twi->bytesRead++;
    3f18:	86 85       	ldd	r24, Z+14	; 0x0e
    3f1a:	8f 5f       	subi	r24, 0xFF	; 255
    3f1c:	86 87       	std	Z+14, r24	; 0x0e
    3f1e:	06 c0       	rjmp	.+12     	; 0x3f2c <TWI_MasterReadHandler+0x30>
	}

	/* If buffer overflow, issue STOP and BUFFER_OVERFLOW condition. */
	else {
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    3f20:	83 e0       	ldi	r24, 0x03	; 3
    3f22:	13 96       	adiw	r26, 0x03	; 3
    3f24:	8c 93       	st	X, r24
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result)
{
	twi->result = result;
    3f26:	82 e0       	ldi	r24, 0x02	; 2
    3f28:	80 8b       	std	Z+16, r24	; 0x10
	twi->status = TWIM_STATUS_READY;
    3f2a:	17 86       	std	Z+15, r1	; 0x0f
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		TWI_MasterTransactionFinished(twi, TWIM_RESULT_BUFFER_OVERFLOW);
	}

	/* Local variable used in if test to avoid compiler warning. */
	uint8_t bytesToRead = twi->bytesToRead;
    3f2c:	84 85       	ldd	r24, Z+12	; 0x0c

	/* If more bytes to read, issue ACK and start a byte read. */
	if (twi->bytesRead < bytesToRead) {
    3f2e:	96 85       	ldd	r25, Z+14	; 0x0e
    3f30:	a0 81       	ld	r26, Z
    3f32:	b1 81       	ldd	r27, Z+1	; 0x01
    3f34:	98 17       	cp	r25, r24
    3f36:	20 f4       	brcc	.+8      	; 0x3f40 <TWI_MasterReadHandler+0x44>
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    3f38:	82 e0       	ldi	r24, 0x02	; 2
    3f3a:	13 96       	adiw	r26, 0x03	; 3
    3f3c:	8c 93       	st	X, r24
    3f3e:	08 95       	ret
	}

	/* If transaction finished, issue NACK and STOP condition. */
	else {
		twi->interface->MASTER.CTRLC = TWI_MASTER_ACKACT_bm |
    3f40:	87 e0       	ldi	r24, 0x07	; 7
    3f42:	13 96       	adiw	r26, 0x03	; 3
    3f44:	8c 93       	st	X, r24
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result)
{
	twi->result = result;
    3f46:	81 e0       	ldi	r24, 0x01	; 1
    3f48:	80 8b       	std	Z+16, r24	; 0x10
	twi->status = TWIM_STATUS_READY;
    3f4a:	17 86       	std	Z+15, r1	; 0x0f
    3f4c:	08 95       	ret

00003f4e <TWI_MasterInterruptHandler>:
 *
 *  \param twi  The TWI_Master_t struct instance.
 */
void TWI_MasterInterruptHandler(TWI_Master_t *twi)
{
	uint8_t currentStatus = twi->interface->MASTER.STATUS;
    3f4e:	dc 01       	movw	r26, r24
    3f50:	ed 91       	ld	r30, X+
    3f52:	fc 91       	ld	r31, X
    3f54:	24 81       	ldd	r18, Z+4	; 0x04
 *
 *  Check current status and calls the appropriate handler.
 *
 *  \param twi  The TWI_Master_t struct instance.
 */
void TWI_MasterInterruptHandler(TWI_Master_t *twi)
    3f56:	32 2f       	mov	r19, r18
    3f58:	3c 70       	andi	r19, 0x0C	; 12
{
	uint8_t currentStatus = twi->interface->MASTER.STATUS;

	/* If arbitration lost or bus error. */
	if ((currentStatus & TWI_MASTER_ARBLOST_bm) ||
    3f5a:	11 f0       	breq	.+4      	; 0x3f60 <TWI_MasterInterruptHandler+0x12>
	    (currentStatus & TWI_MASTER_BUSERR_bm)) {

		TWI_MasterArbitrationLostBusErrorHandler(twi);
    3f5c:	0c 94 3d 1f 	jmp	0x3e7a	; 0x3e7a <TWI_MasterArbitrationLostBusErrorHandler>
	}

	/* If master write interrupt. */
	else if (currentStatus & TWI_MASTER_WIF_bm) {
    3f60:	26 fd       	sbrc	r18, 6
		TWI_MasterWriteHandler(twi);
    3f62:	0c 94 4e 1f 	jmp	0x3e9c	; 0x3e9c <TWI_MasterWriteHandler>
	}

	/* If master read interrupt. */
	else if (currentStatus & TWI_MASTER_RIF_bm) {
    3f66:	27 fd       	sbrc	r18, 7
		TWI_MasterReadHandler(twi);
    3f68:	0c 94 7e 1f 	jmp	0x3efc	; 0x3efc <TWI_MasterReadHandler>
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result)
{
	twi->result = result;
    3f6c:	26 e0       	ldi	r18, 0x06	; 6
    3f6e:	fc 01       	movw	r30, r24
    3f70:	20 8b       	std	Z+16, r18	; 0x10
	twi->status = TWIM_STATUS_READY;
    3f72:	17 86       	std	Z+15, r1	; 0x0f
    3f74:	08 95       	ret

00003f76 <TWI_MasterTransactionFinished>:
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result)
{
	twi->result = result;
    3f76:	fc 01       	movw	r30, r24
    3f78:	60 8b       	std	Z+16, r22	; 0x10
	twi->status = TWIM_STATUS_READY;
    3f7a:	17 86       	std	Z+15, r1	; 0x0f
    3f7c:	08 95       	ret

00003f7e <initDebugUart>:
#endif

FILE debug;

void initDebugUart(USART_t * uart)
{
    3f7e:	fc 01       	movw	r30, r24
	uart->CTRLA = 0;	// disable RX/TX interrupts
    3f80:	13 82       	std	Z+3, r1	; 0x03
	uart->CTRLB = USART_RXEN_bm | USART_TXEN_bm;
    3f82:	88 e1       	ldi	r24, 0x18	; 24
    3f84:	84 83       	std	Z+4, r24	; 0x04
	uart->CTRLC = USART_CHSIZE_8BIT_gc;
    3f86:	83 e0       	ldi	r24, 0x03	; 3
    3f88:	85 83       	std	Z+5, r24	; 0x05
	uart->BAUDCTRLA = 16;  // 115200  103;	// 19200?!
    3f8a:	80 e1       	ldi	r24, 0x10	; 16
    3f8c:	86 83       	std	Z+6, r24	; 0x06
	uart->BAUDCTRLB = 0;
    3f8e:	17 82       	std	Z+7, r1	; 0x07
    3f90:	08 95       	ret

00003f92 <debugPutChar>:
#ifdef DEBUG
    while(!(DEBUGUART.STATUS & USART_DREIF_bm));
    DEBUGUART.DATA = c;
#endif
    return 0;
}
    3f92:	80 e0       	ldi	r24, 0x00	; 0
    3f94:	90 e0       	ldi	r25, 0x00	; 0
    3f96:	08 95       	ret

00003f98 <debugGetChar>:
	    return -1;
	}
#else
	return -1;
#endif
}
    3f98:	8f ef       	ldi	r24, 0xFF	; 255
    3f9a:	9f ef       	ldi	r25, 0xFF	; 255
    3f9c:	08 95       	ret

00003f9e <initHWDebug>:


void initHWDebug() 
{
    3f9e:	08 95       	ret

00003fa0 <vfprintf>:
    3fa0:	2f 92       	push	r2
    3fa2:	3f 92       	push	r3
    3fa4:	4f 92       	push	r4
    3fa6:	5f 92       	push	r5
    3fa8:	6f 92       	push	r6
    3faa:	7f 92       	push	r7
    3fac:	8f 92       	push	r8
    3fae:	9f 92       	push	r9
    3fb0:	af 92       	push	r10
    3fb2:	bf 92       	push	r11
    3fb4:	cf 92       	push	r12
    3fb6:	df 92       	push	r13
    3fb8:	ef 92       	push	r14
    3fba:	ff 92       	push	r15
    3fbc:	0f 93       	push	r16
    3fbe:	1f 93       	push	r17
    3fc0:	cf 93       	push	r28
    3fc2:	df 93       	push	r29
    3fc4:	cd b7       	in	r28, 0x3d	; 61
    3fc6:	de b7       	in	r29, 0x3e	; 62
    3fc8:	63 97       	sbiw	r28, 0x13	; 19
    3fca:	cd bf       	out	0x3d, r28	; 61
    3fcc:	de bf       	out	0x3e, r29	; 62
    3fce:	7c 01       	movw	r14, r24
    3fd0:	5b 01       	movw	r10, r22
    3fd2:	8a 01       	movw	r16, r20
    3fd4:	fc 01       	movw	r30, r24
    3fd6:	16 82       	std	Z+6, r1	; 0x06
    3fd8:	17 82       	std	Z+7, r1	; 0x07
    3fda:	83 81       	ldd	r24, Z+3	; 0x03
    3fdc:	81 fd       	sbrc	r24, 1
    3fde:	03 c0       	rjmp	.+6      	; 0x3fe6 <vfprintf+0x46>
    3fe0:	6d c3       	rjmp	.+1754   	; 0x46bc <vfprintf+0x71c>
    3fe2:	86 01       	movw	r16, r12
    3fe4:	05 c0       	rjmp	.+10     	; 0x3ff0 <vfprintf+0x50>
    3fe6:	88 24       	eor	r8, r8
    3fe8:	83 94       	inc	r8
    3fea:	91 2c       	mov	r9, r1
    3fec:	8c 0e       	add	r8, r28
    3fee:	9d 1e       	adc	r9, r29
    3ff0:	f7 01       	movw	r30, r14
    3ff2:	93 81       	ldd	r25, Z+3	; 0x03
    3ff4:	f5 01       	movw	r30, r10
    3ff6:	93 fd       	sbrc	r25, 3
    3ff8:	85 91       	lpm	r24, Z+
    3ffa:	93 ff       	sbrs	r25, 3
    3ffc:	81 91       	ld	r24, Z+
    3ffe:	5f 01       	movw	r10, r30
    4000:	88 23       	and	r24, r24
    4002:	09 f4       	brne	.+2      	; 0x4006 <vfprintf+0x66>
    4004:	57 c3       	rjmp	.+1710   	; 0x46b4 <vfprintf+0x714>
    4006:	85 32       	cpi	r24, 0x25	; 37
    4008:	39 f4       	brne	.+14     	; 0x4018 <vfprintf+0x78>
    400a:	93 fd       	sbrc	r25, 3
    400c:	85 91       	lpm	r24, Z+
    400e:	93 ff       	sbrs	r25, 3
    4010:	81 91       	ld	r24, Z+
    4012:	5f 01       	movw	r10, r30
    4014:	85 32       	cpi	r24, 0x25	; 37
    4016:	31 f4       	brne	.+12     	; 0x4024 <vfprintf+0x84>
    4018:	b7 01       	movw	r22, r14
    401a:	90 e0       	ldi	r25, 0x00	; 0
    401c:	0e 94 09 29 	call	0x5212	; 0x5212 <fputc>
    4020:	68 01       	movw	r12, r16
    4022:	df cf       	rjmp	.-66     	; 0x3fe2 <vfprintf+0x42>
    4024:	41 2c       	mov	r4, r1
    4026:	51 2c       	mov	r5, r1
    4028:	20 e0       	ldi	r18, 0x00	; 0
    402a:	20 32       	cpi	r18, 0x20	; 32
    402c:	a8 f4       	brcc	.+42     	; 0x4058 <vfprintf+0xb8>
    402e:	8b 32       	cpi	r24, 0x2B	; 43
    4030:	61 f0       	breq	.+24     	; 0x404a <vfprintf+0xaa>
    4032:	28 f4       	brcc	.+10     	; 0x403e <vfprintf+0x9e>
    4034:	80 32       	cpi	r24, 0x20	; 32
    4036:	51 f0       	breq	.+20     	; 0x404c <vfprintf+0xac>
    4038:	83 32       	cpi	r24, 0x23	; 35
    403a:	71 f4       	brne	.+28     	; 0x4058 <vfprintf+0xb8>
    403c:	0b c0       	rjmp	.+22     	; 0x4054 <vfprintf+0xb4>
    403e:	8d 32       	cpi	r24, 0x2D	; 45
    4040:	39 f0       	breq	.+14     	; 0x4050 <vfprintf+0xb0>
    4042:	80 33       	cpi	r24, 0x30	; 48
    4044:	49 f4       	brne	.+18     	; 0x4058 <vfprintf+0xb8>
    4046:	21 60       	ori	r18, 0x01	; 1
    4048:	28 c0       	rjmp	.+80     	; 0x409a <vfprintf+0xfa>
    404a:	22 60       	ori	r18, 0x02	; 2
    404c:	24 60       	ori	r18, 0x04	; 4
    404e:	25 c0       	rjmp	.+74     	; 0x409a <vfprintf+0xfa>
    4050:	28 60       	ori	r18, 0x08	; 8
    4052:	23 c0       	rjmp	.+70     	; 0x409a <vfprintf+0xfa>
    4054:	20 61       	ori	r18, 0x10	; 16
    4056:	21 c0       	rjmp	.+66     	; 0x409a <vfprintf+0xfa>
    4058:	27 fd       	sbrc	r18, 7
    405a:	27 c0       	rjmp	.+78     	; 0x40aa <vfprintf+0x10a>
    405c:	38 2f       	mov	r19, r24
    405e:	30 53       	subi	r19, 0x30	; 48
    4060:	3a 30       	cpi	r19, 0x0A	; 10
    4062:	78 f4       	brcc	.+30     	; 0x4082 <vfprintf+0xe2>
    4064:	26 ff       	sbrs	r18, 6
    4066:	06 c0       	rjmp	.+12     	; 0x4074 <vfprintf+0xd4>
    4068:	fa e0       	ldi	r31, 0x0A	; 10
    406a:	4f 9e       	mul	r4, r31
    406c:	30 0d       	add	r19, r0
    406e:	11 24       	eor	r1, r1
    4070:	43 2e       	mov	r4, r19
    4072:	13 c0       	rjmp	.+38     	; 0x409a <vfprintf+0xfa>
    4074:	8a e0       	ldi	r24, 0x0A	; 10
    4076:	58 9e       	mul	r5, r24
    4078:	30 0d       	add	r19, r0
    407a:	11 24       	eor	r1, r1
    407c:	53 2e       	mov	r5, r19
    407e:	20 62       	ori	r18, 0x20	; 32
    4080:	0c c0       	rjmp	.+24     	; 0x409a <vfprintf+0xfa>
    4082:	8e 32       	cpi	r24, 0x2E	; 46
    4084:	21 f4       	brne	.+8      	; 0x408e <vfprintf+0xee>
    4086:	26 fd       	sbrc	r18, 6
    4088:	15 c3       	rjmp	.+1578   	; 0x46b4 <vfprintf+0x714>
    408a:	20 64       	ori	r18, 0x40	; 64
    408c:	06 c0       	rjmp	.+12     	; 0x409a <vfprintf+0xfa>
    408e:	8c 36       	cpi	r24, 0x6C	; 108
    4090:	11 f4       	brne	.+4      	; 0x4096 <vfprintf+0xf6>
    4092:	20 68       	ori	r18, 0x80	; 128
    4094:	02 c0       	rjmp	.+4      	; 0x409a <vfprintf+0xfa>
    4096:	88 36       	cpi	r24, 0x68	; 104
    4098:	41 f4       	brne	.+16     	; 0x40aa <vfprintf+0x10a>
    409a:	f5 01       	movw	r30, r10
    409c:	93 fd       	sbrc	r25, 3
    409e:	85 91       	lpm	r24, Z+
    40a0:	93 ff       	sbrs	r25, 3
    40a2:	81 91       	ld	r24, Z+
    40a4:	5f 01       	movw	r10, r30
    40a6:	81 11       	cpse	r24, r1
    40a8:	c0 cf       	rjmp	.-128    	; 0x402a <vfprintf+0x8a>
    40aa:	98 2f       	mov	r25, r24
    40ac:	95 54       	subi	r25, 0x45	; 69
    40ae:	93 30       	cpi	r25, 0x03	; 3
    40b0:	18 f4       	brcc	.+6      	; 0x40b8 <vfprintf+0x118>
    40b2:	20 61       	ori	r18, 0x10	; 16
    40b4:	80 5e       	subi	r24, 0xE0	; 224
    40b6:	06 c0       	rjmp	.+12     	; 0x40c4 <vfprintf+0x124>
    40b8:	98 2f       	mov	r25, r24
    40ba:	95 56       	subi	r25, 0x65	; 101
    40bc:	93 30       	cpi	r25, 0x03	; 3
    40be:	08 f0       	brcs	.+2      	; 0x40c2 <vfprintf+0x122>
    40c0:	a1 c1       	rjmp	.+834    	; 0x4404 <vfprintf+0x464>
    40c2:	2f 7e       	andi	r18, 0xEF	; 239
    40c4:	26 fd       	sbrc	r18, 6
    40c6:	02 c0       	rjmp	.+4      	; 0x40cc <vfprintf+0x12c>
    40c8:	56 e0       	ldi	r21, 0x06	; 6
    40ca:	45 2e       	mov	r4, r21
    40cc:	4f e3       	ldi	r20, 0x3F	; 63
    40ce:	74 2e       	mov	r7, r20
    40d0:	72 22       	and	r7, r18
    40d2:	85 36       	cpi	r24, 0x65	; 101
    40d4:	19 f4       	brne	.+6      	; 0x40dc <vfprintf+0x13c>
    40d6:	f0 e4       	ldi	r31, 0x40	; 64
    40d8:	7f 2a       	or	r7, r31
    40da:	07 c0       	rjmp	.+14     	; 0x40ea <vfprintf+0x14a>
    40dc:	86 36       	cpi	r24, 0x66	; 102
    40de:	19 f4       	brne	.+6      	; 0x40e6 <vfprintf+0x146>
    40e0:	20 e8       	ldi	r18, 0x80	; 128
    40e2:	72 2a       	or	r7, r18
    40e4:	02 c0       	rjmp	.+4      	; 0x40ea <vfprintf+0x14a>
    40e6:	41 10       	cpse	r4, r1
    40e8:	4a 94       	dec	r4
    40ea:	77 fe       	sbrs	r7, 7
    40ec:	07 c0       	rjmp	.+14     	; 0x40fc <vfprintf+0x15c>
    40ee:	3b e3       	ldi	r19, 0x3B	; 59
    40f0:	34 15       	cp	r19, r4
    40f2:	48 f0       	brcs	.+18     	; 0x4106 <vfprintf+0x166>
    40f4:	34 2c       	mov	r3, r4
    40f6:	33 94       	inc	r3
    40f8:	27 e0       	ldi	r18, 0x07	; 7
    40fa:	0d c0       	rjmp	.+26     	; 0x4116 <vfprintf+0x176>
    40fc:	87 e0       	ldi	r24, 0x07	; 7
    40fe:	84 15       	cp	r24, r4
    4100:	30 f0       	brcs	.+12     	; 0x410e <vfprintf+0x16e>
    4102:	24 2d       	mov	r18, r4
    4104:	07 c0       	rjmp	.+14     	; 0x4114 <vfprintf+0x174>
    4106:	27 e0       	ldi	r18, 0x07	; 7
    4108:	3c e3       	ldi	r19, 0x3C	; 60
    410a:	33 2e       	mov	r3, r19
    410c:	04 c0       	rjmp	.+8      	; 0x4116 <vfprintf+0x176>
    410e:	27 e0       	ldi	r18, 0x07	; 7
    4110:	97 e0       	ldi	r25, 0x07	; 7
    4112:	49 2e       	mov	r4, r25
    4114:	31 2c       	mov	r3, r1
    4116:	68 01       	movw	r12, r16
    4118:	94 e0       	ldi	r25, 0x04	; 4
    411a:	c9 0e       	add	r12, r25
    411c:	d1 1c       	adc	r13, r1
    411e:	f8 01       	movw	r30, r16
    4120:	60 81       	ld	r22, Z
    4122:	71 81       	ldd	r23, Z+1	; 0x01
    4124:	82 81       	ldd	r24, Z+2	; 0x02
    4126:	93 81       	ldd	r25, Z+3	; 0x03
    4128:	03 2d       	mov	r16, r3
    412a:	a4 01       	movw	r20, r8
    412c:	0e 94 04 28 	call	0x5008	; 0x5008 <__ftoa_engine>
    4130:	8c 01       	movw	r16, r24
    4132:	29 81       	ldd	r18, Y+1	; 0x01
    4134:	2c 87       	std	Y+12, r18	; 0x0c
    4136:	20 ff       	sbrs	r18, 0
    4138:	02 c0       	rjmp	.+4      	; 0x413e <vfprintf+0x19e>
    413a:	23 ff       	sbrs	r18, 3
    413c:	07 c0       	rjmp	.+14     	; 0x414c <vfprintf+0x1ac>
    413e:	71 fc       	sbrc	r7, 1
    4140:	08 c0       	rjmp	.+16     	; 0x4152 <vfprintf+0x1b2>
    4142:	72 fe       	sbrs	r7, 2
    4144:	09 c0       	rjmp	.+18     	; 0x4158 <vfprintf+0x1b8>
    4146:	80 e2       	ldi	r24, 0x20	; 32
    4148:	68 2e       	mov	r6, r24
    414a:	07 c0       	rjmp	.+14     	; 0x415a <vfprintf+0x1ba>
    414c:	bd e2       	ldi	r27, 0x2D	; 45
    414e:	6b 2e       	mov	r6, r27
    4150:	04 c0       	rjmp	.+8      	; 0x415a <vfprintf+0x1ba>
    4152:	ab e2       	ldi	r26, 0x2B	; 43
    4154:	6a 2e       	mov	r6, r26
    4156:	01 c0       	rjmp	.+2      	; 0x415a <vfprintf+0x1ba>
    4158:	61 2c       	mov	r6, r1
    415a:	8c 85       	ldd	r24, Y+12	; 0x0c
    415c:	8c 70       	andi	r24, 0x0C	; 12
    415e:	a1 f1       	breq	.+104    	; 0x41c8 <vfprintf+0x228>
    4160:	66 20       	and	r6, r6
    4162:	11 f0       	breq	.+4      	; 0x4168 <vfprintf+0x1c8>
    4164:	84 e0       	ldi	r24, 0x04	; 4
    4166:	01 c0       	rjmp	.+2      	; 0x416a <vfprintf+0x1ca>
    4168:	83 e0       	ldi	r24, 0x03	; 3
    416a:	85 15       	cp	r24, r5
    416c:	10 f0       	brcs	.+4      	; 0x4172 <vfprintf+0x1d2>
    416e:	51 2c       	mov	r5, r1
    4170:	0b c0       	rjmp	.+22     	; 0x4188 <vfprintf+0x1e8>
    4172:	58 1a       	sub	r5, r24
    4174:	73 fc       	sbrc	r7, 3
    4176:	08 c0       	rjmp	.+16     	; 0x4188 <vfprintf+0x1e8>
    4178:	b7 01       	movw	r22, r14
    417a:	80 e2       	ldi	r24, 0x20	; 32
    417c:	90 e0       	ldi	r25, 0x00	; 0
    417e:	0e 94 09 29 	call	0x5212	; 0x5212 <fputc>
    4182:	5a 94       	dec	r5
    4184:	c9 f7       	brne	.-14     	; 0x4178 <vfprintf+0x1d8>
    4186:	f3 cf       	rjmp	.-26     	; 0x416e <vfprintf+0x1ce>
    4188:	66 20       	and	r6, r6
    418a:	29 f0       	breq	.+10     	; 0x4196 <vfprintf+0x1f6>
    418c:	b7 01       	movw	r22, r14
    418e:	86 2d       	mov	r24, r6
    4190:	90 e0       	ldi	r25, 0x00	; 0
    4192:	0e 94 09 29 	call	0x5212	; 0x5212 <fputc>
    4196:	3c 85       	ldd	r19, Y+12	; 0x0c
    4198:	33 fd       	sbrc	r19, 3
    419a:	03 c0       	rjmp	.+6      	; 0x41a2 <vfprintf+0x202>
    419c:	0c ee       	ldi	r16, 0xEC	; 236
    419e:	11 e0       	ldi	r17, 0x01	; 1
    41a0:	0c c0       	rjmp	.+24     	; 0x41ba <vfprintf+0x21a>
    41a2:	08 ee       	ldi	r16, 0xE8	; 232
    41a4:	11 e0       	ldi	r17, 0x01	; 1
    41a6:	09 c0       	rjmp	.+18     	; 0x41ba <vfprintf+0x21a>
    41a8:	71 10       	cpse	r7, r1
    41aa:	80 52       	subi	r24, 0x20	; 32
    41ac:	b7 01       	movw	r22, r14
    41ae:	90 e0       	ldi	r25, 0x00	; 0
    41b0:	0e 94 09 29 	call	0x5212	; 0x5212 <fputc>
    41b4:	0f 5f       	subi	r16, 0xFF	; 255
    41b6:	1f 4f       	sbci	r17, 0xFF	; 255
    41b8:	02 c0       	rjmp	.+4      	; 0x41be <vfprintf+0x21e>
    41ba:	80 e1       	ldi	r24, 0x10	; 16
    41bc:	78 22       	and	r7, r24
    41be:	f8 01       	movw	r30, r16
    41c0:	84 91       	lpm	r24, Z+
    41c2:	81 11       	cpse	r24, r1
    41c4:	f1 cf       	rjmp	.-30     	; 0x41a8 <vfprintf+0x208>
    41c6:	73 c2       	rjmp	.+1254   	; 0x46ae <vfprintf+0x70e>
    41c8:	77 fe       	sbrs	r7, 7
    41ca:	0e c0       	rjmp	.+28     	; 0x41e8 <vfprintf+0x248>
    41cc:	30 0e       	add	r3, r16
    41ce:	2c 85       	ldd	r18, Y+12	; 0x0c
    41d0:	24 ff       	sbrs	r18, 4
    41d2:	04 c0       	rjmp	.+8      	; 0x41dc <vfprintf+0x23c>
    41d4:	8a 81       	ldd	r24, Y+2	; 0x02
    41d6:	81 33       	cpi	r24, 0x31	; 49
    41d8:	09 f4       	brne	.+2      	; 0x41dc <vfprintf+0x23c>
    41da:	3a 94       	dec	r3
    41dc:	13 14       	cp	r1, r3
    41de:	4c f5       	brge	.+82     	; 0x4232 <vfprintf+0x292>
    41e0:	38 e0       	ldi	r19, 0x08	; 8
    41e2:	33 15       	cp	r19, r3
    41e4:	48 f1       	brcs	.+82     	; 0x4238 <vfprintf+0x298>
    41e6:	2c c0       	rjmp	.+88     	; 0x4240 <vfprintf+0x2a0>
    41e8:	76 fc       	sbrc	r7, 6
    41ea:	2a c0       	rjmp	.+84     	; 0x4240 <vfprintf+0x2a0>
    41ec:	24 2d       	mov	r18, r4
    41ee:	30 e0       	ldi	r19, 0x00	; 0
    41f0:	20 17       	cp	r18, r16
    41f2:	31 07       	cpc	r19, r17
    41f4:	44 f0       	brlt	.+16     	; 0x4206 <vfprintf+0x266>
    41f6:	0c 3f       	cpi	r16, 0xFC	; 252
    41f8:	8f ef       	ldi	r24, 0xFF	; 255
    41fa:	18 07       	cpc	r17, r24
    41fc:	24 f0       	brlt	.+8      	; 0x4206 <vfprintf+0x266>
    41fe:	90 e8       	ldi	r25, 0x80	; 128
    4200:	79 2a       	or	r7, r25
    4202:	01 c0       	rjmp	.+2      	; 0x4206 <vfprintf+0x266>
    4204:	4a 94       	dec	r4
    4206:	44 20       	and	r4, r4
    4208:	49 f0       	breq	.+18     	; 0x421c <vfprintf+0x27c>
    420a:	e2 e0       	ldi	r30, 0x02	; 2
    420c:	f0 e0       	ldi	r31, 0x00	; 0
    420e:	ec 0f       	add	r30, r28
    4210:	fd 1f       	adc	r31, r29
    4212:	e4 0d       	add	r30, r4
    4214:	f1 1d       	adc	r31, r1
    4216:	80 81       	ld	r24, Z
    4218:	80 33       	cpi	r24, 0x30	; 48
    421a:	a1 f3       	breq	.-24     	; 0x4204 <vfprintf+0x264>
    421c:	77 fe       	sbrs	r7, 7
    421e:	10 c0       	rjmp	.+32     	; 0x4240 <vfprintf+0x2a0>
    4220:	34 2c       	mov	r3, r4
    4222:	33 94       	inc	r3
    4224:	24 2d       	mov	r18, r4
    4226:	30 e0       	ldi	r19, 0x00	; 0
    4228:	02 17       	cp	r16, r18
    422a:	13 07       	cpc	r17, r19
    422c:	44 f4       	brge	.+16     	; 0x423e <vfprintf+0x29e>
    422e:	40 1a       	sub	r4, r16
    4230:	07 c0       	rjmp	.+14     	; 0x4240 <vfprintf+0x2a0>
    4232:	33 24       	eor	r3, r3
    4234:	33 94       	inc	r3
    4236:	04 c0       	rjmp	.+8      	; 0x4240 <vfprintf+0x2a0>
    4238:	f8 e0       	ldi	r31, 0x08	; 8
    423a:	3f 2e       	mov	r3, r31
    423c:	01 c0       	rjmp	.+2      	; 0x4240 <vfprintf+0x2a0>
    423e:	41 2c       	mov	r4, r1
    4240:	77 fe       	sbrs	r7, 7
    4242:	07 c0       	rjmp	.+14     	; 0x4252 <vfprintf+0x2b2>
    4244:	10 16       	cp	r1, r16
    4246:	11 06       	cpc	r1, r17
    4248:	3c f4       	brge	.+14     	; 0x4258 <vfprintf+0x2b8>
    424a:	98 01       	movw	r18, r16
    424c:	2f 5f       	subi	r18, 0xFF	; 255
    424e:	3f 4f       	sbci	r19, 0xFF	; 255
    4250:	05 c0       	rjmp	.+10     	; 0x425c <vfprintf+0x2bc>
    4252:	25 e0       	ldi	r18, 0x05	; 5
    4254:	30 e0       	ldi	r19, 0x00	; 0
    4256:	02 c0       	rjmp	.+4      	; 0x425c <vfprintf+0x2bc>
    4258:	21 e0       	ldi	r18, 0x01	; 1
    425a:	30 e0       	ldi	r19, 0x00	; 0
    425c:	66 20       	and	r6, r6
    425e:	11 f0       	breq	.+4      	; 0x4264 <vfprintf+0x2c4>
    4260:	2f 5f       	subi	r18, 0xFF	; 255
    4262:	3f 4f       	sbci	r19, 0xFF	; 255
    4264:	44 20       	and	r4, r4
    4266:	31 f0       	breq	.+12     	; 0x4274 <vfprintf+0x2d4>
    4268:	44 2d       	mov	r20, r4
    426a:	50 e0       	ldi	r21, 0x00	; 0
    426c:	4f 5f       	subi	r20, 0xFF	; 255
    426e:	5f 4f       	sbci	r21, 0xFF	; 255
    4270:	24 0f       	add	r18, r20
    4272:	35 1f       	adc	r19, r21
    4274:	45 2d       	mov	r20, r5
    4276:	50 e0       	ldi	r21, 0x00	; 0
    4278:	24 17       	cp	r18, r20
    427a:	35 07       	cpc	r19, r21
    427c:	14 f4       	brge	.+4      	; 0x4282 <vfprintf+0x2e2>
    427e:	52 1a       	sub	r5, r18
    4280:	01 c0       	rjmp	.+2      	; 0x4284 <vfprintf+0x2e4>
    4282:	51 2c       	mov	r5, r1
    4284:	87 2d       	mov	r24, r7
    4286:	89 70       	andi	r24, 0x09	; 9
    4288:	49 f4       	brne	.+18     	; 0x429c <vfprintf+0x2fc>
    428a:	06 c0       	rjmp	.+12     	; 0x4298 <vfprintf+0x2f8>
    428c:	b7 01       	movw	r22, r14
    428e:	80 e2       	ldi	r24, 0x20	; 32
    4290:	90 e0       	ldi	r25, 0x00	; 0
    4292:	0e 94 09 29 	call	0x5212	; 0x5212 <fputc>
    4296:	5a 94       	dec	r5
    4298:	51 10       	cpse	r5, r1
    429a:	f8 cf       	rjmp	.-16     	; 0x428c <vfprintf+0x2ec>
    429c:	66 20       	and	r6, r6
    429e:	29 f0       	breq	.+10     	; 0x42aa <vfprintf+0x30a>
    42a0:	b7 01       	movw	r22, r14
    42a2:	86 2d       	mov	r24, r6
    42a4:	90 e0       	ldi	r25, 0x00	; 0
    42a6:	0e 94 09 29 	call	0x5212	; 0x5212 <fputc>
    42aa:	73 fc       	sbrc	r7, 3
    42ac:	09 c0       	rjmp	.+18     	; 0x42c0 <vfprintf+0x320>
    42ae:	06 c0       	rjmp	.+12     	; 0x42bc <vfprintf+0x31c>
    42b0:	b7 01       	movw	r22, r14
    42b2:	80 e3       	ldi	r24, 0x30	; 48
    42b4:	90 e0       	ldi	r25, 0x00	; 0
    42b6:	0e 94 09 29 	call	0x5212	; 0x5212 <fputc>
    42ba:	5a 94       	dec	r5
    42bc:	51 10       	cpse	r5, r1
    42be:	f8 cf       	rjmp	.-16     	; 0x42b0 <vfprintf+0x310>
    42c0:	77 fe       	sbrs	r7, 7
    42c2:	53 c0       	rjmp	.+166    	; 0x436a <vfprintf+0x3ca>
    42c4:	38 01       	movw	r6, r16
    42c6:	17 ff       	sbrs	r17, 7
    42c8:	02 c0       	rjmp	.+4      	; 0x42ce <vfprintf+0x32e>
    42ca:	61 2c       	mov	r6, r1
    42cc:	71 2c       	mov	r7, r1
    42ce:	1d 86       	std	Y+13, r1	; 0x0d
    42d0:	1e 86       	std	Y+14, r1	; 0x0e
    42d2:	98 01       	movw	r18, r16
    42d4:	23 19       	sub	r18, r3
    42d6:	31 09       	sbc	r19, r1
    42d8:	2f 87       	std	Y+15, r18	; 0x0f
    42da:	38 8b       	std	Y+16, r19	; 0x10
    42dc:	18 01       	movw	r2, r16
    42de:	26 18       	sub	r2, r6
    42e0:	37 08       	sbc	r3, r7
    42e2:	28 0c       	add	r2, r8
    42e4:	39 1c       	adc	r3, r9
    42e6:	64 2d       	mov	r22, r4
    42e8:	70 e0       	ldi	r23, 0x00	; 0
    42ea:	22 27       	eor	r18, r18
    42ec:	33 27       	eor	r19, r19
    42ee:	26 1b       	sub	r18, r22
    42f0:	37 0b       	sbc	r19, r23
    42f2:	29 8b       	std	Y+17, r18	; 0x11
    42f4:	3a 8b       	std	Y+18, r19	; 0x12
    42f6:	3f ef       	ldi	r19, 0xFF	; 255
    42f8:	63 16       	cp	r6, r19
    42fa:	73 06       	cpc	r7, r19
    42fc:	29 f4       	brne	.+10     	; 0x4308 <vfprintf+0x368>
    42fe:	b7 01       	movw	r22, r14
    4300:	8e e2       	ldi	r24, 0x2E	; 46
    4302:	90 e0       	ldi	r25, 0x00	; 0
    4304:	0e 94 09 29 	call	0x5212	; 0x5212 <fputc>
    4308:	06 15       	cp	r16, r6
    430a:	17 05       	cpc	r17, r7
    430c:	5c f0       	brlt	.+22     	; 0x4324 <vfprintf+0x384>
    430e:	2f 85       	ldd	r18, Y+15	; 0x0f
    4310:	38 89       	ldd	r19, Y+16	; 0x10
    4312:	26 15       	cp	r18, r6
    4314:	37 05       	cpc	r19, r7
    4316:	34 f4       	brge	.+12     	; 0x4324 <vfprintf+0x384>
    4318:	ed 85       	ldd	r30, Y+13	; 0x0d
    431a:	fe 85       	ldd	r31, Y+14	; 0x0e
    431c:	e2 0d       	add	r30, r2
    431e:	f3 1d       	adc	r31, r3
    4320:	81 81       	ldd	r24, Z+1	; 0x01
    4322:	01 c0       	rjmp	.+2      	; 0x4326 <vfprintf+0x386>
    4324:	80 e3       	ldi	r24, 0x30	; 48
    4326:	31 e0       	ldi	r19, 0x01	; 1
    4328:	63 1a       	sub	r6, r19
    432a:	71 08       	sbc	r7, r1
    432c:	2d 85       	ldd	r18, Y+13	; 0x0d
    432e:	3e 85       	ldd	r19, Y+14	; 0x0e
    4330:	2f 5f       	subi	r18, 0xFF	; 255
    4332:	3f 4f       	sbci	r19, 0xFF	; 255
    4334:	2d 87       	std	Y+13, r18	; 0x0d
    4336:	3e 87       	std	Y+14, r19	; 0x0e
    4338:	29 89       	ldd	r18, Y+17	; 0x11
    433a:	3a 89       	ldd	r19, Y+18	; 0x12
    433c:	62 16       	cp	r6, r18
    433e:	73 06       	cpc	r7, r19
    4340:	2c f0       	brlt	.+10     	; 0x434c <vfprintf+0x3ac>
    4342:	b7 01       	movw	r22, r14
    4344:	90 e0       	ldi	r25, 0x00	; 0
    4346:	0e 94 09 29 	call	0x5212	; 0x5212 <fputc>
    434a:	d5 cf       	rjmp	.-86     	; 0x42f6 <vfprintf+0x356>
    434c:	60 16       	cp	r6, r16
    434e:	71 06       	cpc	r7, r17
    4350:	49 f4       	brne	.+18     	; 0x4364 <vfprintf+0x3c4>
    4352:	9a 81       	ldd	r25, Y+2	; 0x02
    4354:	96 33       	cpi	r25, 0x36	; 54
    4356:	28 f4       	brcc	.+10     	; 0x4362 <vfprintf+0x3c2>
    4358:	95 33       	cpi	r25, 0x35	; 53
    435a:	21 f4       	brne	.+8      	; 0x4364 <vfprintf+0x3c4>
    435c:	3c 85       	ldd	r19, Y+12	; 0x0c
    435e:	34 fd       	sbrc	r19, 4
    4360:	01 c0       	rjmp	.+2      	; 0x4364 <vfprintf+0x3c4>
    4362:	81 e3       	ldi	r24, 0x31	; 49
    4364:	b7 01       	movw	r22, r14
    4366:	90 e0       	ldi	r25, 0x00	; 0
    4368:	4a c0       	rjmp	.+148    	; 0x43fe <vfprintf+0x45e>
    436a:	8a 81       	ldd	r24, Y+2	; 0x02
    436c:	81 33       	cpi	r24, 0x31	; 49
    436e:	19 f0       	breq	.+6      	; 0x4376 <vfprintf+0x3d6>
    4370:	2c 85       	ldd	r18, Y+12	; 0x0c
    4372:	2f 7e       	andi	r18, 0xEF	; 239
    4374:	2c 87       	std	Y+12, r18	; 0x0c
    4376:	b7 01       	movw	r22, r14
    4378:	90 e0       	ldi	r25, 0x00	; 0
    437a:	0e 94 09 29 	call	0x5212	; 0x5212 <fputc>
    437e:	41 10       	cpse	r4, r1
    4380:	05 c0       	rjmp	.+10     	; 0x438c <vfprintf+0x3ec>
    4382:	74 fe       	sbrs	r7, 4
    4384:	16 c0       	rjmp	.+44     	; 0x43b2 <vfprintf+0x412>
    4386:	85 e4       	ldi	r24, 0x45	; 69
    4388:	90 e0       	ldi	r25, 0x00	; 0
    438a:	15 c0       	rjmp	.+42     	; 0x43b6 <vfprintf+0x416>
    438c:	b7 01       	movw	r22, r14
    438e:	8e e2       	ldi	r24, 0x2E	; 46
    4390:	90 e0       	ldi	r25, 0x00	; 0
    4392:	0e 94 09 29 	call	0x5212	; 0x5212 <fputc>
    4396:	e2 e0       	ldi	r30, 0x02	; 2
    4398:	6e 2e       	mov	r6, r30
    439a:	f4 01       	movw	r30, r8
    439c:	e6 0d       	add	r30, r6
    439e:	f1 1d       	adc	r31, r1
    43a0:	63 94       	inc	r6
    43a2:	b7 01       	movw	r22, r14
    43a4:	80 81       	ld	r24, Z
    43a6:	90 e0       	ldi	r25, 0x00	; 0
    43a8:	0e 94 09 29 	call	0x5212	; 0x5212 <fputc>
    43ac:	4a 94       	dec	r4
    43ae:	a9 f7       	brne	.-22     	; 0x439a <vfprintf+0x3fa>
    43b0:	e8 cf       	rjmp	.-48     	; 0x4382 <vfprintf+0x3e2>
    43b2:	85 e6       	ldi	r24, 0x65	; 101
    43b4:	90 e0       	ldi	r25, 0x00	; 0
    43b6:	b7 01       	movw	r22, r14
    43b8:	0e 94 09 29 	call	0x5212	; 0x5212 <fputc>
    43bc:	17 fd       	sbrc	r17, 7
    43be:	06 c0       	rjmp	.+12     	; 0x43cc <vfprintf+0x42c>
    43c0:	01 15       	cp	r16, r1
    43c2:	11 05       	cpc	r17, r1
    43c4:	41 f4       	brne	.+16     	; 0x43d6 <vfprintf+0x436>
    43c6:	3c 85       	ldd	r19, Y+12	; 0x0c
    43c8:	34 ff       	sbrs	r19, 4
    43ca:	05 c0       	rjmp	.+10     	; 0x43d6 <vfprintf+0x436>
    43cc:	11 95       	neg	r17
    43ce:	01 95       	neg	r16
    43d0:	11 09       	sbc	r17, r1
    43d2:	8d e2       	ldi	r24, 0x2D	; 45
    43d4:	01 c0       	rjmp	.+2      	; 0x43d8 <vfprintf+0x438>
    43d6:	8b e2       	ldi	r24, 0x2B	; 43
    43d8:	b7 01       	movw	r22, r14
    43da:	90 e0       	ldi	r25, 0x00	; 0
    43dc:	0e 94 09 29 	call	0x5212	; 0x5212 <fputc>
    43e0:	80 e3       	ldi	r24, 0x30	; 48
    43e2:	03 c0       	rjmp	.+6      	; 0x43ea <vfprintf+0x44a>
    43e4:	8f 5f       	subi	r24, 0xFF	; 255
    43e6:	0a 50       	subi	r16, 0x0A	; 10
    43e8:	11 09       	sbc	r17, r1
    43ea:	0a 30       	cpi	r16, 0x0A	; 10
    43ec:	11 05       	cpc	r17, r1
    43ee:	d4 f7       	brge	.-12     	; 0x43e4 <vfprintf+0x444>
    43f0:	b7 01       	movw	r22, r14
    43f2:	90 e0       	ldi	r25, 0x00	; 0
    43f4:	0e 94 09 29 	call	0x5212	; 0x5212 <fputc>
    43f8:	b7 01       	movw	r22, r14
    43fa:	c8 01       	movw	r24, r16
    43fc:	c0 96       	adiw	r24, 0x30	; 48
    43fe:	0e 94 09 29 	call	0x5212	; 0x5212 <fputc>
    4402:	55 c1       	rjmp	.+682    	; 0x46ae <vfprintf+0x70e>
    4404:	83 36       	cpi	r24, 0x63	; 99
    4406:	31 f0       	breq	.+12     	; 0x4414 <vfprintf+0x474>
    4408:	83 37       	cpi	r24, 0x73	; 115
    440a:	81 f0       	breq	.+32     	; 0x442c <vfprintf+0x48c>
    440c:	83 35       	cpi	r24, 0x53	; 83
    440e:	09 f0       	breq	.+2      	; 0x4412 <vfprintf+0x472>
    4410:	5e c0       	rjmp	.+188    	; 0x44ce <vfprintf+0x52e>
    4412:	24 c0       	rjmp	.+72     	; 0x445c <vfprintf+0x4bc>
    4414:	68 01       	movw	r12, r16
    4416:	82 e0       	ldi	r24, 0x02	; 2
    4418:	c8 0e       	add	r12, r24
    441a:	d1 1c       	adc	r13, r1
    441c:	f8 01       	movw	r30, r16
    441e:	80 81       	ld	r24, Z
    4420:	89 83       	std	Y+1, r24	; 0x01
    4422:	66 24       	eor	r6, r6
    4424:	63 94       	inc	r6
    4426:	71 2c       	mov	r7, r1
    4428:	84 01       	movw	r16, r8
    442a:	14 c0       	rjmp	.+40     	; 0x4454 <vfprintf+0x4b4>
    442c:	68 01       	movw	r12, r16
    442e:	f2 e0       	ldi	r31, 0x02	; 2
    4430:	cf 0e       	add	r12, r31
    4432:	d1 1c       	adc	r13, r1
    4434:	f8 01       	movw	r30, r16
    4436:	00 81       	ld	r16, Z
    4438:	11 81       	ldd	r17, Z+1	; 0x01
    443a:	26 ff       	sbrs	r18, 6
    443c:	03 c0       	rjmp	.+6      	; 0x4444 <vfprintf+0x4a4>
    443e:	64 2d       	mov	r22, r4
    4440:	70 e0       	ldi	r23, 0x00	; 0
    4442:	02 c0       	rjmp	.+4      	; 0x4448 <vfprintf+0x4a8>
    4444:	6f ef       	ldi	r22, 0xFF	; 255
    4446:	7f ef       	ldi	r23, 0xFF	; 255
    4448:	c8 01       	movw	r24, r16
    444a:	2b 8b       	std	Y+19, r18	; 0x13
    444c:	0e 94 fe 28 	call	0x51fc	; 0x51fc <strnlen>
    4450:	3c 01       	movw	r6, r24
    4452:	2b 89       	ldd	r18, Y+19	; 0x13
    4454:	6f e7       	ldi	r22, 0x7F	; 127
    4456:	46 2e       	mov	r4, r22
    4458:	42 22       	and	r4, r18
    445a:	17 c0       	rjmp	.+46     	; 0x448a <vfprintf+0x4ea>
    445c:	68 01       	movw	r12, r16
    445e:	f2 e0       	ldi	r31, 0x02	; 2
    4460:	cf 0e       	add	r12, r31
    4462:	d1 1c       	adc	r13, r1
    4464:	f8 01       	movw	r30, r16
    4466:	00 81       	ld	r16, Z
    4468:	11 81       	ldd	r17, Z+1	; 0x01
    446a:	26 ff       	sbrs	r18, 6
    446c:	03 c0       	rjmp	.+6      	; 0x4474 <vfprintf+0x4d4>
    446e:	64 2d       	mov	r22, r4
    4470:	70 e0       	ldi	r23, 0x00	; 0
    4472:	02 c0       	rjmp	.+4      	; 0x4478 <vfprintf+0x4d8>
    4474:	6f ef       	ldi	r22, 0xFF	; 255
    4476:	7f ef       	ldi	r23, 0xFF	; 255
    4478:	c8 01       	movw	r24, r16
    447a:	2b 8b       	std	Y+19, r18	; 0x13
    447c:	0e 94 dc 28 	call	0x51b8	; 0x51b8 <strnlen_P>
    4480:	3c 01       	movw	r6, r24
    4482:	2b 89       	ldd	r18, Y+19	; 0x13
    4484:	50 e8       	ldi	r21, 0x80	; 128
    4486:	45 2e       	mov	r4, r21
    4488:	42 2a       	or	r4, r18
    448a:	43 fc       	sbrc	r4, 3
    448c:	1c c0       	rjmp	.+56     	; 0x44c6 <vfprintf+0x526>
    448e:	06 c0       	rjmp	.+12     	; 0x449c <vfprintf+0x4fc>
    4490:	b7 01       	movw	r22, r14
    4492:	80 e2       	ldi	r24, 0x20	; 32
    4494:	90 e0       	ldi	r25, 0x00	; 0
    4496:	0e 94 09 29 	call	0x5212	; 0x5212 <fputc>
    449a:	5a 94       	dec	r5
    449c:	85 2d       	mov	r24, r5
    449e:	90 e0       	ldi	r25, 0x00	; 0
    44a0:	68 16       	cp	r6, r24
    44a2:	79 06       	cpc	r7, r25
    44a4:	a8 f3       	brcs	.-22     	; 0x4490 <vfprintf+0x4f0>
    44a6:	0f c0       	rjmp	.+30     	; 0x44c6 <vfprintf+0x526>
    44a8:	f8 01       	movw	r30, r16
    44aa:	47 fc       	sbrc	r4, 7
    44ac:	85 91       	lpm	r24, Z+
    44ae:	47 fe       	sbrs	r4, 7
    44b0:	81 91       	ld	r24, Z+
    44b2:	8f 01       	movw	r16, r30
    44b4:	b7 01       	movw	r22, r14
    44b6:	90 e0       	ldi	r25, 0x00	; 0
    44b8:	0e 94 09 29 	call	0x5212	; 0x5212 <fputc>
    44bc:	51 10       	cpse	r5, r1
    44be:	5a 94       	dec	r5
    44c0:	f1 e0       	ldi	r31, 0x01	; 1
    44c2:	6f 1a       	sub	r6, r31
    44c4:	71 08       	sbc	r7, r1
    44c6:	61 14       	cp	r6, r1
    44c8:	71 04       	cpc	r7, r1
    44ca:	71 f7       	brne	.-36     	; 0x44a8 <vfprintf+0x508>
    44cc:	f0 c0       	rjmp	.+480    	; 0x46ae <vfprintf+0x70e>
    44ce:	84 36       	cpi	r24, 0x64	; 100
    44d0:	11 f0       	breq	.+4      	; 0x44d6 <vfprintf+0x536>
    44d2:	89 36       	cpi	r24, 0x69	; 105
    44d4:	61 f5       	brne	.+88     	; 0x452e <vfprintf+0x58e>
    44d6:	68 01       	movw	r12, r16
    44d8:	27 ff       	sbrs	r18, 7
    44da:	09 c0       	rjmp	.+18     	; 0x44ee <vfprintf+0x54e>
    44dc:	34 e0       	ldi	r19, 0x04	; 4
    44de:	c3 0e       	add	r12, r19
    44e0:	d1 1c       	adc	r13, r1
    44e2:	f8 01       	movw	r30, r16
    44e4:	60 81       	ld	r22, Z
    44e6:	71 81       	ldd	r23, Z+1	; 0x01
    44e8:	82 81       	ldd	r24, Z+2	; 0x02
    44ea:	93 81       	ldd	r25, Z+3	; 0x03
    44ec:	0a c0       	rjmp	.+20     	; 0x4502 <vfprintf+0x562>
    44ee:	f2 e0       	ldi	r31, 0x02	; 2
    44f0:	cf 0e       	add	r12, r31
    44f2:	d1 1c       	adc	r13, r1
    44f4:	f8 01       	movw	r30, r16
    44f6:	60 81       	ld	r22, Z
    44f8:	71 81       	ldd	r23, Z+1	; 0x01
    44fa:	88 27       	eor	r24, r24
    44fc:	77 fd       	sbrc	r23, 7
    44fe:	80 95       	com	r24
    4500:	98 2f       	mov	r25, r24
    4502:	4f e6       	ldi	r20, 0x6F	; 111
    4504:	74 2e       	mov	r7, r20
    4506:	72 22       	and	r7, r18
    4508:	97 ff       	sbrs	r25, 7
    450a:	09 c0       	rjmp	.+18     	; 0x451e <vfprintf+0x57e>
    450c:	90 95       	com	r25
    450e:	80 95       	com	r24
    4510:	70 95       	com	r23
    4512:	61 95       	neg	r22
    4514:	7f 4f       	sbci	r23, 0xFF	; 255
    4516:	8f 4f       	sbci	r24, 0xFF	; 255
    4518:	9f 4f       	sbci	r25, 0xFF	; 255
    451a:	f0 e8       	ldi	r31, 0x80	; 128
    451c:	7f 2a       	or	r7, r31
    451e:	2a e0       	ldi	r18, 0x0A	; 10
    4520:	30 e0       	ldi	r19, 0x00	; 0
    4522:	a4 01       	movw	r20, r8
    4524:	0e 94 86 29 	call	0x530c	; 0x530c <__ultoa_invert>
    4528:	68 2e       	mov	r6, r24
    452a:	68 18       	sub	r6, r8
    452c:	47 c0       	rjmp	.+142    	; 0x45bc <vfprintf+0x61c>
    452e:	85 37       	cpi	r24, 0x75	; 117
    4530:	31 f4       	brne	.+12     	; 0x453e <vfprintf+0x59e>
    4532:	3f ee       	ldi	r19, 0xEF	; 239
    4534:	73 2e       	mov	r7, r19
    4536:	72 22       	and	r7, r18
    4538:	2a e0       	ldi	r18, 0x0A	; 10
    453a:	30 e0       	ldi	r19, 0x00	; 0
    453c:	24 c0       	rjmp	.+72     	; 0x4586 <vfprintf+0x5e6>
    453e:	99 ef       	ldi	r25, 0xF9	; 249
    4540:	79 2e       	mov	r7, r25
    4542:	72 22       	and	r7, r18
    4544:	8f 36       	cpi	r24, 0x6F	; 111
    4546:	b9 f0       	breq	.+46     	; 0x4576 <vfprintf+0x5d6>
    4548:	20 f4       	brcc	.+8      	; 0x4552 <vfprintf+0x5b2>
    454a:	88 35       	cpi	r24, 0x58	; 88
    454c:	09 f0       	breq	.+2      	; 0x4550 <vfprintf+0x5b0>
    454e:	b2 c0       	rjmp	.+356    	; 0x46b4 <vfprintf+0x714>
    4550:	0d c0       	rjmp	.+26     	; 0x456c <vfprintf+0x5cc>
    4552:	80 37       	cpi	r24, 0x70	; 112
    4554:	21 f0       	breq	.+8      	; 0x455e <vfprintf+0x5be>
    4556:	88 37       	cpi	r24, 0x78	; 120
    4558:	09 f0       	breq	.+2      	; 0x455c <vfprintf+0x5bc>
    455a:	ac c0       	rjmp	.+344    	; 0x46b4 <vfprintf+0x714>
    455c:	02 c0       	rjmp	.+4      	; 0x4562 <vfprintf+0x5c2>
    455e:	20 e1       	ldi	r18, 0x10	; 16
    4560:	72 2a       	or	r7, r18
    4562:	74 fe       	sbrs	r7, 4
    4564:	0b c0       	rjmp	.+22     	; 0x457c <vfprintf+0x5dc>
    4566:	34 e0       	ldi	r19, 0x04	; 4
    4568:	73 2a       	or	r7, r19
    456a:	08 c0       	rjmp	.+16     	; 0x457c <vfprintf+0x5dc>
    456c:	24 ff       	sbrs	r18, 4
    456e:	09 c0       	rjmp	.+18     	; 0x4582 <vfprintf+0x5e2>
    4570:	86 e0       	ldi	r24, 0x06	; 6
    4572:	78 2a       	or	r7, r24
    4574:	06 c0       	rjmp	.+12     	; 0x4582 <vfprintf+0x5e2>
    4576:	28 e0       	ldi	r18, 0x08	; 8
    4578:	30 e0       	ldi	r19, 0x00	; 0
    457a:	05 c0       	rjmp	.+10     	; 0x4586 <vfprintf+0x5e6>
    457c:	20 e1       	ldi	r18, 0x10	; 16
    457e:	30 e0       	ldi	r19, 0x00	; 0
    4580:	02 c0       	rjmp	.+4      	; 0x4586 <vfprintf+0x5e6>
    4582:	20 e1       	ldi	r18, 0x10	; 16
    4584:	32 e0       	ldi	r19, 0x02	; 2
    4586:	68 01       	movw	r12, r16
    4588:	77 fe       	sbrs	r7, 7
    458a:	09 c0       	rjmp	.+18     	; 0x459e <vfprintf+0x5fe>
    458c:	94 e0       	ldi	r25, 0x04	; 4
    458e:	c9 0e       	add	r12, r25
    4590:	d1 1c       	adc	r13, r1
    4592:	f8 01       	movw	r30, r16
    4594:	60 81       	ld	r22, Z
    4596:	71 81       	ldd	r23, Z+1	; 0x01
    4598:	82 81       	ldd	r24, Z+2	; 0x02
    459a:	93 81       	ldd	r25, Z+3	; 0x03
    459c:	08 c0       	rjmp	.+16     	; 0x45ae <vfprintf+0x60e>
    459e:	f2 e0       	ldi	r31, 0x02	; 2
    45a0:	cf 0e       	add	r12, r31
    45a2:	d1 1c       	adc	r13, r1
    45a4:	f8 01       	movw	r30, r16
    45a6:	60 81       	ld	r22, Z
    45a8:	71 81       	ldd	r23, Z+1	; 0x01
    45aa:	80 e0       	ldi	r24, 0x00	; 0
    45ac:	90 e0       	ldi	r25, 0x00	; 0
    45ae:	a4 01       	movw	r20, r8
    45b0:	0e 94 86 29 	call	0x530c	; 0x530c <__ultoa_invert>
    45b4:	68 2e       	mov	r6, r24
    45b6:	68 18       	sub	r6, r8
    45b8:	ff e7       	ldi	r31, 0x7F	; 127
    45ba:	7f 22       	and	r7, r31
    45bc:	76 fe       	sbrs	r7, 6
    45be:	0b c0       	rjmp	.+22     	; 0x45d6 <vfprintf+0x636>
    45c0:	07 2d       	mov	r16, r7
    45c2:	0e 7f       	andi	r16, 0xFE	; 254
    45c4:	64 14       	cp	r6, r4
    45c6:	50 f4       	brcc	.+20     	; 0x45dc <vfprintf+0x63c>
    45c8:	74 fe       	sbrs	r7, 4
    45ca:	0a c0       	rjmp	.+20     	; 0x45e0 <vfprintf+0x640>
    45cc:	72 fc       	sbrc	r7, 2
    45ce:	08 c0       	rjmp	.+16     	; 0x45e0 <vfprintf+0x640>
    45d0:	07 2d       	mov	r16, r7
    45d2:	0e 7e       	andi	r16, 0xEE	; 238
    45d4:	05 c0       	rjmp	.+10     	; 0x45e0 <vfprintf+0x640>
    45d6:	16 2d       	mov	r17, r6
    45d8:	07 2d       	mov	r16, r7
    45da:	03 c0       	rjmp	.+6      	; 0x45e2 <vfprintf+0x642>
    45dc:	16 2d       	mov	r17, r6
    45de:	01 c0       	rjmp	.+2      	; 0x45e2 <vfprintf+0x642>
    45e0:	14 2d       	mov	r17, r4
    45e2:	04 ff       	sbrs	r16, 4
    45e4:	0c c0       	rjmp	.+24     	; 0x45fe <vfprintf+0x65e>
    45e6:	fe 01       	movw	r30, r28
    45e8:	e6 0d       	add	r30, r6
    45ea:	f1 1d       	adc	r31, r1
    45ec:	80 81       	ld	r24, Z
    45ee:	80 33       	cpi	r24, 0x30	; 48
    45f0:	11 f4       	brne	.+4      	; 0x45f6 <vfprintf+0x656>
    45f2:	09 7e       	andi	r16, 0xE9	; 233
    45f4:	08 c0       	rjmp	.+16     	; 0x4606 <vfprintf+0x666>
    45f6:	02 ff       	sbrs	r16, 2
    45f8:	05 c0       	rjmp	.+10     	; 0x4604 <vfprintf+0x664>
    45fa:	1e 5f       	subi	r17, 0xFE	; 254
    45fc:	04 c0       	rjmp	.+8      	; 0x4606 <vfprintf+0x666>
    45fe:	80 2f       	mov	r24, r16
    4600:	86 78       	andi	r24, 0x86	; 134
    4602:	09 f0       	breq	.+2      	; 0x4606 <vfprintf+0x666>
    4604:	1f 5f       	subi	r17, 0xFF	; 255
    4606:	03 fd       	sbrc	r16, 3
    4608:	12 c0       	rjmp	.+36     	; 0x462e <vfprintf+0x68e>
    460a:	00 ff       	sbrs	r16, 0
    460c:	0d c0       	rjmp	.+26     	; 0x4628 <vfprintf+0x688>
    460e:	46 2c       	mov	r4, r6
    4610:	15 15       	cp	r17, r5
    4612:	50 f4       	brcc	.+20     	; 0x4628 <vfprintf+0x688>
    4614:	45 0c       	add	r4, r5
    4616:	41 1a       	sub	r4, r17
    4618:	15 2d       	mov	r17, r5
    461a:	06 c0       	rjmp	.+12     	; 0x4628 <vfprintf+0x688>
    461c:	b7 01       	movw	r22, r14
    461e:	80 e2       	ldi	r24, 0x20	; 32
    4620:	90 e0       	ldi	r25, 0x00	; 0
    4622:	0e 94 09 29 	call	0x5212	; 0x5212 <fputc>
    4626:	1f 5f       	subi	r17, 0xFF	; 255
    4628:	15 15       	cp	r17, r5
    462a:	c0 f3       	brcs	.-16     	; 0x461c <vfprintf+0x67c>
    462c:	04 c0       	rjmp	.+8      	; 0x4636 <vfprintf+0x696>
    462e:	15 15       	cp	r17, r5
    4630:	10 f4       	brcc	.+4      	; 0x4636 <vfprintf+0x696>
    4632:	51 1a       	sub	r5, r17
    4634:	01 c0       	rjmp	.+2      	; 0x4638 <vfprintf+0x698>
    4636:	51 2c       	mov	r5, r1
    4638:	04 ff       	sbrs	r16, 4
    463a:	10 c0       	rjmp	.+32     	; 0x465c <vfprintf+0x6bc>
    463c:	b7 01       	movw	r22, r14
    463e:	80 e3       	ldi	r24, 0x30	; 48
    4640:	90 e0       	ldi	r25, 0x00	; 0
    4642:	0e 94 09 29 	call	0x5212	; 0x5212 <fputc>
    4646:	02 ff       	sbrs	r16, 2
    4648:	1e c0       	rjmp	.+60     	; 0x4686 <vfprintf+0x6e6>
    464a:	01 ff       	sbrs	r16, 1
    464c:	03 c0       	rjmp	.+6      	; 0x4654 <vfprintf+0x6b4>
    464e:	88 e5       	ldi	r24, 0x58	; 88
    4650:	90 e0       	ldi	r25, 0x00	; 0
    4652:	02 c0       	rjmp	.+4      	; 0x4658 <vfprintf+0x6b8>
    4654:	88 e7       	ldi	r24, 0x78	; 120
    4656:	90 e0       	ldi	r25, 0x00	; 0
    4658:	b7 01       	movw	r22, r14
    465a:	0c c0       	rjmp	.+24     	; 0x4674 <vfprintf+0x6d4>
    465c:	80 2f       	mov	r24, r16
    465e:	86 78       	andi	r24, 0x86	; 134
    4660:	91 f0       	breq	.+36     	; 0x4686 <vfprintf+0x6e6>
    4662:	01 fd       	sbrc	r16, 1
    4664:	02 c0       	rjmp	.+4      	; 0x466a <vfprintf+0x6ca>
    4666:	80 e2       	ldi	r24, 0x20	; 32
    4668:	01 c0       	rjmp	.+2      	; 0x466c <vfprintf+0x6cc>
    466a:	8b e2       	ldi	r24, 0x2B	; 43
    466c:	07 fd       	sbrc	r16, 7
    466e:	8d e2       	ldi	r24, 0x2D	; 45
    4670:	b7 01       	movw	r22, r14
    4672:	90 e0       	ldi	r25, 0x00	; 0
    4674:	0e 94 09 29 	call	0x5212	; 0x5212 <fputc>
    4678:	06 c0       	rjmp	.+12     	; 0x4686 <vfprintf+0x6e6>
    467a:	b7 01       	movw	r22, r14
    467c:	80 e3       	ldi	r24, 0x30	; 48
    467e:	90 e0       	ldi	r25, 0x00	; 0
    4680:	0e 94 09 29 	call	0x5212	; 0x5212 <fputc>
    4684:	4a 94       	dec	r4
    4686:	64 14       	cp	r6, r4
    4688:	c0 f3       	brcs	.-16     	; 0x467a <vfprintf+0x6da>
    468a:	6a 94       	dec	r6
    468c:	f4 01       	movw	r30, r8
    468e:	e6 0d       	add	r30, r6
    4690:	f1 1d       	adc	r31, r1
    4692:	b7 01       	movw	r22, r14
    4694:	80 81       	ld	r24, Z
    4696:	90 e0       	ldi	r25, 0x00	; 0
    4698:	0e 94 09 29 	call	0x5212	; 0x5212 <fputc>
    469c:	61 10       	cpse	r6, r1
    469e:	f5 cf       	rjmp	.-22     	; 0x468a <vfprintf+0x6ea>
    46a0:	06 c0       	rjmp	.+12     	; 0x46ae <vfprintf+0x70e>
    46a2:	b7 01       	movw	r22, r14
    46a4:	80 e2       	ldi	r24, 0x20	; 32
    46a6:	90 e0       	ldi	r25, 0x00	; 0
    46a8:	0e 94 09 29 	call	0x5212	; 0x5212 <fputc>
    46ac:	5a 94       	dec	r5
    46ae:	51 10       	cpse	r5, r1
    46b0:	f8 cf       	rjmp	.-16     	; 0x46a2 <vfprintf+0x702>
    46b2:	97 cc       	rjmp	.-1746   	; 0x3fe2 <vfprintf+0x42>
    46b4:	f7 01       	movw	r30, r14
    46b6:	26 81       	ldd	r18, Z+6	; 0x06
    46b8:	37 81       	ldd	r19, Z+7	; 0x07
    46ba:	02 c0       	rjmp	.+4      	; 0x46c0 <vfprintf+0x720>
    46bc:	2f ef       	ldi	r18, 0xFF	; 255
    46be:	3f ef       	ldi	r19, 0xFF	; 255
    46c0:	c9 01       	movw	r24, r18
    46c2:	63 96       	adiw	r28, 0x13	; 19
    46c4:	cd bf       	out	0x3d, r28	; 61
    46c6:	de bf       	out	0x3e, r29	; 62
    46c8:	df 91       	pop	r29
    46ca:	cf 91       	pop	r28
    46cc:	1f 91       	pop	r17
    46ce:	0f 91       	pop	r16
    46d0:	ff 90       	pop	r15
    46d2:	ef 90       	pop	r14
    46d4:	df 90       	pop	r13
    46d6:	cf 90       	pop	r12
    46d8:	bf 90       	pop	r11
    46da:	af 90       	pop	r10
    46dc:	9f 90       	pop	r9
    46de:	8f 90       	pop	r8
    46e0:	7f 90       	pop	r7
    46e2:	6f 90       	pop	r6
    46e4:	5f 90       	pop	r5
    46e6:	4f 90       	pop	r4
    46e8:	3f 90       	pop	r3
    46ea:	2f 90       	pop	r2
    46ec:	08 95       	ret

000046ee <main>:
#include "system/system.h"

int main(void)
{
		return blockProgram();
    46ee:	0c 94 31 09 	jmp	0x1262	; 0x1262 <blockProgram>

000046f2 <__subsf3>:
    46f2:	50 58       	subi	r21, 0x80	; 128

000046f4 <__addsf3>:
    46f4:	bb 27       	eor	r27, r27
    46f6:	aa 27       	eor	r26, r26
    46f8:	0e d0       	rcall	.+28     	; 0x4716 <__addsf3x>
    46fa:	6c c1       	rjmp	.+728    	; 0x49d4 <__fp_round>
    46fc:	5d d1       	rcall	.+698    	; 0x49b8 <__fp_pscA>
    46fe:	30 f0       	brcs	.+12     	; 0x470c <__addsf3+0x18>
    4700:	62 d1       	rcall	.+708    	; 0x49c6 <__fp_pscB>
    4702:	20 f0       	brcs	.+8      	; 0x470c <__addsf3+0x18>
    4704:	31 f4       	brne	.+12     	; 0x4712 <__addsf3+0x1e>
    4706:	9f 3f       	cpi	r25, 0xFF	; 255
    4708:	11 f4       	brne	.+4      	; 0x470e <__addsf3+0x1a>
    470a:	1e f4       	brtc	.+6      	; 0x4712 <__addsf3+0x1e>
    470c:	52 c1       	rjmp	.+676    	; 0x49b2 <__fp_nan>
    470e:	0e f4       	brtc	.+2      	; 0x4712 <__addsf3+0x1e>
    4710:	e0 95       	com	r30
    4712:	e7 fb       	bst	r30, 7
    4714:	48 c1       	rjmp	.+656    	; 0x49a6 <__fp_inf>

00004716 <__addsf3x>:
    4716:	e9 2f       	mov	r30, r25
    4718:	6e d1       	rcall	.+732    	; 0x49f6 <__fp_split3>
    471a:	80 f3       	brcs	.-32     	; 0x46fc <__addsf3+0x8>
    471c:	ba 17       	cp	r27, r26
    471e:	62 07       	cpc	r22, r18
    4720:	73 07       	cpc	r23, r19
    4722:	84 07       	cpc	r24, r20
    4724:	95 07       	cpc	r25, r21
    4726:	18 f0       	brcs	.+6      	; 0x472e <__addsf3x+0x18>
    4728:	71 f4       	brne	.+28     	; 0x4746 <__addsf3x+0x30>
    472a:	9e f5       	brtc	.+102    	; 0x4792 <__addsf3x+0x7c>
    472c:	86 c1       	rjmp	.+780    	; 0x4a3a <__fp_zero>
    472e:	0e f4       	brtc	.+2      	; 0x4732 <__addsf3x+0x1c>
    4730:	e0 95       	com	r30
    4732:	0b 2e       	mov	r0, r27
    4734:	ba 2f       	mov	r27, r26
    4736:	a0 2d       	mov	r26, r0
    4738:	0b 01       	movw	r0, r22
    473a:	b9 01       	movw	r22, r18
    473c:	90 01       	movw	r18, r0
    473e:	0c 01       	movw	r0, r24
    4740:	ca 01       	movw	r24, r20
    4742:	a0 01       	movw	r20, r0
    4744:	11 24       	eor	r1, r1
    4746:	ff 27       	eor	r31, r31
    4748:	59 1b       	sub	r21, r25
    474a:	99 f0       	breq	.+38     	; 0x4772 <__addsf3x+0x5c>
    474c:	59 3f       	cpi	r21, 0xF9	; 249
    474e:	50 f4       	brcc	.+20     	; 0x4764 <__addsf3x+0x4e>
    4750:	50 3e       	cpi	r21, 0xE0	; 224
    4752:	68 f1       	brcs	.+90     	; 0x47ae <__addsf3x+0x98>
    4754:	1a 16       	cp	r1, r26
    4756:	f0 40       	sbci	r31, 0x00	; 0
    4758:	a2 2f       	mov	r26, r18
    475a:	23 2f       	mov	r18, r19
    475c:	34 2f       	mov	r19, r20
    475e:	44 27       	eor	r20, r20
    4760:	58 5f       	subi	r21, 0xF8	; 248
    4762:	f3 cf       	rjmp	.-26     	; 0x474a <__addsf3x+0x34>
    4764:	46 95       	lsr	r20
    4766:	37 95       	ror	r19
    4768:	27 95       	ror	r18
    476a:	a7 95       	ror	r26
    476c:	f0 40       	sbci	r31, 0x00	; 0
    476e:	53 95       	inc	r21
    4770:	c9 f7       	brne	.-14     	; 0x4764 <__addsf3x+0x4e>
    4772:	7e f4       	brtc	.+30     	; 0x4792 <__addsf3x+0x7c>
    4774:	1f 16       	cp	r1, r31
    4776:	ba 0b       	sbc	r27, r26
    4778:	62 0b       	sbc	r22, r18
    477a:	73 0b       	sbc	r23, r19
    477c:	84 0b       	sbc	r24, r20
    477e:	ba f0       	brmi	.+46     	; 0x47ae <__addsf3x+0x98>
    4780:	91 50       	subi	r25, 0x01	; 1
    4782:	a1 f0       	breq	.+40     	; 0x47ac <__addsf3x+0x96>
    4784:	ff 0f       	add	r31, r31
    4786:	bb 1f       	adc	r27, r27
    4788:	66 1f       	adc	r22, r22
    478a:	77 1f       	adc	r23, r23
    478c:	88 1f       	adc	r24, r24
    478e:	c2 f7       	brpl	.-16     	; 0x4780 <__addsf3x+0x6a>
    4790:	0e c0       	rjmp	.+28     	; 0x47ae <__addsf3x+0x98>
    4792:	ba 0f       	add	r27, r26
    4794:	62 1f       	adc	r22, r18
    4796:	73 1f       	adc	r23, r19
    4798:	84 1f       	adc	r24, r20
    479a:	48 f4       	brcc	.+18     	; 0x47ae <__addsf3x+0x98>
    479c:	87 95       	ror	r24
    479e:	77 95       	ror	r23
    47a0:	67 95       	ror	r22
    47a2:	b7 95       	ror	r27
    47a4:	f7 95       	ror	r31
    47a6:	9e 3f       	cpi	r25, 0xFE	; 254
    47a8:	08 f0       	brcs	.+2      	; 0x47ac <__addsf3x+0x96>
    47aa:	b3 cf       	rjmp	.-154    	; 0x4712 <__addsf3+0x1e>
    47ac:	93 95       	inc	r25
    47ae:	88 0f       	add	r24, r24
    47b0:	08 f0       	brcs	.+2      	; 0x47b4 <__addsf3x+0x9e>
    47b2:	99 27       	eor	r25, r25
    47b4:	ee 0f       	add	r30, r30
    47b6:	97 95       	ror	r25
    47b8:	87 95       	ror	r24
    47ba:	08 95       	ret

000047bc <__divsf3>:
    47bc:	0c d0       	rcall	.+24     	; 0x47d6 <__divsf3x>
    47be:	0a c1       	rjmp	.+532    	; 0x49d4 <__fp_round>
    47c0:	02 d1       	rcall	.+516    	; 0x49c6 <__fp_pscB>
    47c2:	40 f0       	brcs	.+16     	; 0x47d4 <__divsf3+0x18>
    47c4:	f9 d0       	rcall	.+498    	; 0x49b8 <__fp_pscA>
    47c6:	30 f0       	brcs	.+12     	; 0x47d4 <__divsf3+0x18>
    47c8:	21 f4       	brne	.+8      	; 0x47d2 <__divsf3+0x16>
    47ca:	5f 3f       	cpi	r21, 0xFF	; 255
    47cc:	19 f0       	breq	.+6      	; 0x47d4 <__divsf3+0x18>
    47ce:	eb c0       	rjmp	.+470    	; 0x49a6 <__fp_inf>
    47d0:	51 11       	cpse	r21, r1
    47d2:	34 c1       	rjmp	.+616    	; 0x4a3c <__fp_szero>
    47d4:	ee c0       	rjmp	.+476    	; 0x49b2 <__fp_nan>

000047d6 <__divsf3x>:
    47d6:	0f d1       	rcall	.+542    	; 0x49f6 <__fp_split3>
    47d8:	98 f3       	brcs	.-26     	; 0x47c0 <__divsf3+0x4>

000047da <__divsf3_pse>:
    47da:	99 23       	and	r25, r25
    47dc:	c9 f3       	breq	.-14     	; 0x47d0 <__divsf3+0x14>
    47de:	55 23       	and	r21, r21
    47e0:	b1 f3       	breq	.-20     	; 0x47ce <__divsf3+0x12>
    47e2:	95 1b       	sub	r25, r21
    47e4:	55 0b       	sbc	r21, r21
    47e6:	bb 27       	eor	r27, r27
    47e8:	aa 27       	eor	r26, r26
    47ea:	62 17       	cp	r22, r18
    47ec:	73 07       	cpc	r23, r19
    47ee:	84 07       	cpc	r24, r20
    47f0:	38 f0       	brcs	.+14     	; 0x4800 <__divsf3_pse+0x26>
    47f2:	9f 5f       	subi	r25, 0xFF	; 255
    47f4:	5f 4f       	sbci	r21, 0xFF	; 255
    47f6:	22 0f       	add	r18, r18
    47f8:	33 1f       	adc	r19, r19
    47fa:	44 1f       	adc	r20, r20
    47fc:	aa 1f       	adc	r26, r26
    47fe:	a9 f3       	breq	.-22     	; 0x47ea <__divsf3_pse+0x10>
    4800:	33 d0       	rcall	.+102    	; 0x4868 <__divsf3_pse+0x8e>
    4802:	0e 2e       	mov	r0, r30
    4804:	3a f0       	brmi	.+14     	; 0x4814 <__divsf3_pse+0x3a>
    4806:	e0 e8       	ldi	r30, 0x80	; 128
    4808:	30 d0       	rcall	.+96     	; 0x486a <__divsf3_pse+0x90>
    480a:	91 50       	subi	r25, 0x01	; 1
    480c:	50 40       	sbci	r21, 0x00	; 0
    480e:	e6 95       	lsr	r30
    4810:	00 1c       	adc	r0, r0
    4812:	ca f7       	brpl	.-14     	; 0x4806 <__divsf3_pse+0x2c>
    4814:	29 d0       	rcall	.+82     	; 0x4868 <__divsf3_pse+0x8e>
    4816:	fe 2f       	mov	r31, r30
    4818:	27 d0       	rcall	.+78     	; 0x4868 <__divsf3_pse+0x8e>
    481a:	66 0f       	add	r22, r22
    481c:	77 1f       	adc	r23, r23
    481e:	88 1f       	adc	r24, r24
    4820:	bb 1f       	adc	r27, r27
    4822:	26 17       	cp	r18, r22
    4824:	37 07       	cpc	r19, r23
    4826:	48 07       	cpc	r20, r24
    4828:	ab 07       	cpc	r26, r27
    482a:	b0 e8       	ldi	r27, 0x80	; 128
    482c:	09 f0       	breq	.+2      	; 0x4830 <__divsf3_pse+0x56>
    482e:	bb 0b       	sbc	r27, r27
    4830:	80 2d       	mov	r24, r0
    4832:	bf 01       	movw	r22, r30
    4834:	ff 27       	eor	r31, r31
    4836:	93 58       	subi	r25, 0x83	; 131
    4838:	5f 4f       	sbci	r21, 0xFF	; 255
    483a:	2a f0       	brmi	.+10     	; 0x4846 <__divsf3_pse+0x6c>
    483c:	9e 3f       	cpi	r25, 0xFE	; 254
    483e:	51 05       	cpc	r21, r1
    4840:	68 f0       	brcs	.+26     	; 0x485c <__divsf3_pse+0x82>
    4842:	b1 c0       	rjmp	.+354    	; 0x49a6 <__fp_inf>
    4844:	fb c0       	rjmp	.+502    	; 0x4a3c <__fp_szero>
    4846:	5f 3f       	cpi	r21, 0xFF	; 255
    4848:	ec f3       	brlt	.-6      	; 0x4844 <__divsf3_pse+0x6a>
    484a:	98 3e       	cpi	r25, 0xE8	; 232
    484c:	dc f3       	brlt	.-10     	; 0x4844 <__divsf3_pse+0x6a>
    484e:	86 95       	lsr	r24
    4850:	77 95       	ror	r23
    4852:	67 95       	ror	r22
    4854:	b7 95       	ror	r27
    4856:	f7 95       	ror	r31
    4858:	9f 5f       	subi	r25, 0xFF	; 255
    485a:	c9 f7       	brne	.-14     	; 0x484e <__divsf3_pse+0x74>
    485c:	88 0f       	add	r24, r24
    485e:	91 1d       	adc	r25, r1
    4860:	96 95       	lsr	r25
    4862:	87 95       	ror	r24
    4864:	97 f9       	bld	r25, 7
    4866:	08 95       	ret
    4868:	e1 e0       	ldi	r30, 0x01	; 1
    486a:	66 0f       	add	r22, r22
    486c:	77 1f       	adc	r23, r23
    486e:	88 1f       	adc	r24, r24
    4870:	bb 1f       	adc	r27, r27
    4872:	62 17       	cp	r22, r18
    4874:	73 07       	cpc	r23, r19
    4876:	84 07       	cpc	r24, r20
    4878:	ba 07       	cpc	r27, r26
    487a:	20 f0       	brcs	.+8      	; 0x4884 <__divsf3_pse+0xaa>
    487c:	62 1b       	sub	r22, r18
    487e:	73 0b       	sbc	r23, r19
    4880:	84 0b       	sbc	r24, r20
    4882:	ba 0b       	sbc	r27, r26
    4884:	ee 1f       	adc	r30, r30
    4886:	88 f7       	brcc	.-30     	; 0x486a <__divsf3_pse+0x90>
    4888:	e0 95       	com	r30
    488a:	08 95       	ret

0000488c <__fixsfsi>:
    488c:	04 d0       	rcall	.+8      	; 0x4896 <__fixunssfsi>
    488e:	68 94       	set
    4890:	b1 11       	cpse	r27, r1
    4892:	d4 c0       	rjmp	.+424    	; 0x4a3c <__fp_szero>
    4894:	08 95       	ret

00004896 <__fixunssfsi>:
    4896:	b7 d0       	rcall	.+366    	; 0x4a06 <__fp_splitA>
    4898:	88 f0       	brcs	.+34     	; 0x48bc <__fixunssfsi+0x26>
    489a:	9f 57       	subi	r25, 0x7F	; 127
    489c:	90 f0       	brcs	.+36     	; 0x48c2 <__fixunssfsi+0x2c>
    489e:	b9 2f       	mov	r27, r25
    48a0:	99 27       	eor	r25, r25
    48a2:	b7 51       	subi	r27, 0x17	; 23
    48a4:	a0 f0       	brcs	.+40     	; 0x48ce <__fixunssfsi+0x38>
    48a6:	d1 f0       	breq	.+52     	; 0x48dc <__fixunssfsi+0x46>
    48a8:	66 0f       	add	r22, r22
    48aa:	77 1f       	adc	r23, r23
    48ac:	88 1f       	adc	r24, r24
    48ae:	99 1f       	adc	r25, r25
    48b0:	1a f0       	brmi	.+6      	; 0x48b8 <__fixunssfsi+0x22>
    48b2:	ba 95       	dec	r27
    48b4:	c9 f7       	brne	.-14     	; 0x48a8 <__fixunssfsi+0x12>
    48b6:	12 c0       	rjmp	.+36     	; 0x48dc <__fixunssfsi+0x46>
    48b8:	b1 30       	cpi	r27, 0x01	; 1
    48ba:	81 f0       	breq	.+32     	; 0x48dc <__fixunssfsi+0x46>
    48bc:	be d0       	rcall	.+380    	; 0x4a3a <__fp_zero>
    48be:	b1 e0       	ldi	r27, 0x01	; 1
    48c0:	08 95       	ret
    48c2:	bb c0       	rjmp	.+374    	; 0x4a3a <__fp_zero>
    48c4:	67 2f       	mov	r22, r23
    48c6:	78 2f       	mov	r23, r24
    48c8:	88 27       	eor	r24, r24
    48ca:	b8 5f       	subi	r27, 0xF8	; 248
    48cc:	39 f0       	breq	.+14     	; 0x48dc <__fixunssfsi+0x46>
    48ce:	b9 3f       	cpi	r27, 0xF9	; 249
    48d0:	cc f3       	brlt	.-14     	; 0x48c4 <__fixunssfsi+0x2e>
    48d2:	86 95       	lsr	r24
    48d4:	77 95       	ror	r23
    48d6:	67 95       	ror	r22
    48d8:	b3 95       	inc	r27
    48da:	d9 f7       	brne	.-10     	; 0x48d2 <__fixunssfsi+0x3c>
    48dc:	3e f4       	brtc	.+14     	; 0x48ec <__fixunssfsi+0x56>
    48de:	90 95       	com	r25
    48e0:	80 95       	com	r24
    48e2:	70 95       	com	r23
    48e4:	61 95       	neg	r22
    48e6:	7f 4f       	sbci	r23, 0xFF	; 255
    48e8:	8f 4f       	sbci	r24, 0xFF	; 255
    48ea:	9f 4f       	sbci	r25, 0xFF	; 255
    48ec:	08 95       	ret

000048ee <__floatunsisf>:
    48ee:	e8 94       	clt
    48f0:	09 c0       	rjmp	.+18     	; 0x4904 <__floatsisf+0x12>

000048f2 <__floatsisf>:
    48f2:	97 fb       	bst	r25, 7
    48f4:	3e f4       	brtc	.+14     	; 0x4904 <__floatsisf+0x12>
    48f6:	90 95       	com	r25
    48f8:	80 95       	com	r24
    48fa:	70 95       	com	r23
    48fc:	61 95       	neg	r22
    48fe:	7f 4f       	sbci	r23, 0xFF	; 255
    4900:	8f 4f       	sbci	r24, 0xFF	; 255
    4902:	9f 4f       	sbci	r25, 0xFF	; 255
    4904:	99 23       	and	r25, r25
    4906:	a9 f0       	breq	.+42     	; 0x4932 <__floatsisf+0x40>
    4908:	f9 2f       	mov	r31, r25
    490a:	96 e9       	ldi	r25, 0x96	; 150
    490c:	bb 27       	eor	r27, r27
    490e:	93 95       	inc	r25
    4910:	f6 95       	lsr	r31
    4912:	87 95       	ror	r24
    4914:	77 95       	ror	r23
    4916:	67 95       	ror	r22
    4918:	b7 95       	ror	r27
    491a:	f1 11       	cpse	r31, r1
    491c:	f8 cf       	rjmp	.-16     	; 0x490e <__floatsisf+0x1c>
    491e:	fa f4       	brpl	.+62     	; 0x495e <__floatsisf+0x6c>
    4920:	bb 0f       	add	r27, r27
    4922:	11 f4       	brne	.+4      	; 0x4928 <__floatsisf+0x36>
    4924:	60 ff       	sbrs	r22, 0
    4926:	1b c0       	rjmp	.+54     	; 0x495e <__floatsisf+0x6c>
    4928:	6f 5f       	subi	r22, 0xFF	; 255
    492a:	7f 4f       	sbci	r23, 0xFF	; 255
    492c:	8f 4f       	sbci	r24, 0xFF	; 255
    492e:	9f 4f       	sbci	r25, 0xFF	; 255
    4930:	16 c0       	rjmp	.+44     	; 0x495e <__floatsisf+0x6c>
    4932:	88 23       	and	r24, r24
    4934:	11 f0       	breq	.+4      	; 0x493a <__floatsisf+0x48>
    4936:	96 e9       	ldi	r25, 0x96	; 150
    4938:	11 c0       	rjmp	.+34     	; 0x495c <__floatsisf+0x6a>
    493a:	77 23       	and	r23, r23
    493c:	21 f0       	breq	.+8      	; 0x4946 <__floatsisf+0x54>
    493e:	9e e8       	ldi	r25, 0x8E	; 142
    4940:	87 2f       	mov	r24, r23
    4942:	76 2f       	mov	r23, r22
    4944:	05 c0       	rjmp	.+10     	; 0x4950 <__floatsisf+0x5e>
    4946:	66 23       	and	r22, r22
    4948:	71 f0       	breq	.+28     	; 0x4966 <__floatsisf+0x74>
    494a:	96 e8       	ldi	r25, 0x86	; 134
    494c:	86 2f       	mov	r24, r22
    494e:	70 e0       	ldi	r23, 0x00	; 0
    4950:	60 e0       	ldi	r22, 0x00	; 0
    4952:	2a f0       	brmi	.+10     	; 0x495e <__floatsisf+0x6c>
    4954:	9a 95       	dec	r25
    4956:	66 0f       	add	r22, r22
    4958:	77 1f       	adc	r23, r23
    495a:	88 1f       	adc	r24, r24
    495c:	da f7       	brpl	.-10     	; 0x4954 <__floatsisf+0x62>
    495e:	88 0f       	add	r24, r24
    4960:	96 95       	lsr	r25
    4962:	87 95       	ror	r24
    4964:	97 f9       	bld	r25, 7
    4966:	08 95       	ret

00004968 <fmax>:
    4968:	99 0f       	add	r25, r25
    496a:	bb 0b       	sbc	r27, r27
    496c:	55 0f       	add	r21, r21
    496e:	aa 0b       	sbc	r26, r26
    4970:	e0 e8       	ldi	r30, 0x80	; 128
    4972:	fe ef       	ldi	r31, 0xFE	; 254
    4974:	16 16       	cp	r1, r22
    4976:	17 06       	cpc	r1, r23
    4978:	e8 07       	cpc	r30, r24
    497a:	f9 07       	cpc	r31, r25
    497c:	70 f0       	brcs	.+28     	; 0x499a <fmax+0x32>
    497e:	12 16       	cp	r1, r18
    4980:	13 06       	cpc	r1, r19
    4982:	e4 07       	cpc	r30, r20
    4984:	f5 07       	cpc	r31, r21
    4986:	60 f0       	brcs	.+24     	; 0x49a0 <fmax+0x38>
    4988:	ba 17       	cp	r27, r26
    498a:	3c f0       	brlt	.+14     	; 0x499a <fmax+0x32>
    498c:	49 f4       	brne	.+18     	; 0x49a0 <fmax+0x38>
    498e:	62 17       	cp	r22, r18
    4990:	73 07       	cpc	r23, r19
    4992:	84 07       	cpc	r24, r20
    4994:	95 07       	cpc	r25, r21
    4996:	a7 95       	ror	r26
    4998:	1b f4       	brvc	.+6      	; 0x49a0 <fmax+0x38>
    499a:	b9 01       	movw	r22, r18
    499c:	ca 01       	movw	r24, r20
    499e:	ba 2f       	mov	r27, r26
    49a0:	b6 95       	lsr	r27
    49a2:	97 95       	ror	r25
    49a4:	08 95       	ret

000049a6 <__fp_inf>:
    49a6:	97 f9       	bld	r25, 7
    49a8:	9f 67       	ori	r25, 0x7F	; 127
    49aa:	80 e8       	ldi	r24, 0x80	; 128
    49ac:	70 e0       	ldi	r23, 0x00	; 0
    49ae:	60 e0       	ldi	r22, 0x00	; 0
    49b0:	08 95       	ret

000049b2 <__fp_nan>:
    49b2:	9f ef       	ldi	r25, 0xFF	; 255
    49b4:	80 ec       	ldi	r24, 0xC0	; 192
    49b6:	08 95       	ret

000049b8 <__fp_pscA>:
    49b8:	00 24       	eor	r0, r0
    49ba:	0a 94       	dec	r0
    49bc:	16 16       	cp	r1, r22
    49be:	17 06       	cpc	r1, r23
    49c0:	18 06       	cpc	r1, r24
    49c2:	09 06       	cpc	r0, r25
    49c4:	08 95       	ret

000049c6 <__fp_pscB>:
    49c6:	00 24       	eor	r0, r0
    49c8:	0a 94       	dec	r0
    49ca:	12 16       	cp	r1, r18
    49cc:	13 06       	cpc	r1, r19
    49ce:	14 06       	cpc	r1, r20
    49d0:	05 06       	cpc	r0, r21
    49d2:	08 95       	ret

000049d4 <__fp_round>:
    49d4:	09 2e       	mov	r0, r25
    49d6:	03 94       	inc	r0
    49d8:	00 0c       	add	r0, r0
    49da:	11 f4       	brne	.+4      	; 0x49e0 <__fp_round+0xc>
    49dc:	88 23       	and	r24, r24
    49de:	52 f0       	brmi	.+20     	; 0x49f4 <__fp_round+0x20>
    49e0:	bb 0f       	add	r27, r27
    49e2:	40 f4       	brcc	.+16     	; 0x49f4 <__fp_round+0x20>
    49e4:	bf 2b       	or	r27, r31
    49e6:	11 f4       	brne	.+4      	; 0x49ec <__fp_round+0x18>
    49e8:	60 ff       	sbrs	r22, 0
    49ea:	04 c0       	rjmp	.+8      	; 0x49f4 <__fp_round+0x20>
    49ec:	6f 5f       	subi	r22, 0xFF	; 255
    49ee:	7f 4f       	sbci	r23, 0xFF	; 255
    49f0:	8f 4f       	sbci	r24, 0xFF	; 255
    49f2:	9f 4f       	sbci	r25, 0xFF	; 255
    49f4:	08 95       	ret

000049f6 <__fp_split3>:
    49f6:	57 fd       	sbrc	r21, 7
    49f8:	90 58       	subi	r25, 0x80	; 128
    49fa:	44 0f       	add	r20, r20
    49fc:	55 1f       	adc	r21, r21
    49fe:	59 f0       	breq	.+22     	; 0x4a16 <__fp_splitA+0x10>
    4a00:	5f 3f       	cpi	r21, 0xFF	; 255
    4a02:	71 f0       	breq	.+28     	; 0x4a20 <__fp_splitA+0x1a>
    4a04:	47 95       	ror	r20

00004a06 <__fp_splitA>:
    4a06:	88 0f       	add	r24, r24
    4a08:	97 fb       	bst	r25, 7
    4a0a:	99 1f       	adc	r25, r25
    4a0c:	61 f0       	breq	.+24     	; 0x4a26 <__fp_splitA+0x20>
    4a0e:	9f 3f       	cpi	r25, 0xFF	; 255
    4a10:	79 f0       	breq	.+30     	; 0x4a30 <__fp_splitA+0x2a>
    4a12:	87 95       	ror	r24
    4a14:	08 95       	ret
    4a16:	12 16       	cp	r1, r18
    4a18:	13 06       	cpc	r1, r19
    4a1a:	14 06       	cpc	r1, r20
    4a1c:	55 1f       	adc	r21, r21
    4a1e:	f2 cf       	rjmp	.-28     	; 0x4a04 <__fp_split3+0xe>
    4a20:	46 95       	lsr	r20
    4a22:	f1 df       	rcall	.-30     	; 0x4a06 <__fp_splitA>
    4a24:	08 c0       	rjmp	.+16     	; 0x4a36 <__fp_splitA+0x30>
    4a26:	16 16       	cp	r1, r22
    4a28:	17 06       	cpc	r1, r23
    4a2a:	18 06       	cpc	r1, r24
    4a2c:	99 1f       	adc	r25, r25
    4a2e:	f1 cf       	rjmp	.-30     	; 0x4a12 <__fp_splitA+0xc>
    4a30:	86 95       	lsr	r24
    4a32:	71 05       	cpc	r23, r1
    4a34:	61 05       	cpc	r22, r1
    4a36:	08 94       	sec
    4a38:	08 95       	ret

00004a3a <__fp_zero>:
    4a3a:	e8 94       	clt

00004a3c <__fp_szero>:
    4a3c:	bb 27       	eor	r27, r27
    4a3e:	66 27       	eor	r22, r22
    4a40:	77 27       	eor	r23, r23
    4a42:	cb 01       	movw	r24, r22
    4a44:	97 f9       	bld	r25, 7
    4a46:	08 95       	ret

00004a48 <__mulsf3>:
    4a48:	0b d0       	rcall	.+22     	; 0x4a60 <__mulsf3x>
    4a4a:	c4 cf       	rjmp	.-120    	; 0x49d4 <__fp_round>
    4a4c:	b5 df       	rcall	.-150    	; 0x49b8 <__fp_pscA>
    4a4e:	28 f0       	brcs	.+10     	; 0x4a5a <__mulsf3+0x12>
    4a50:	ba df       	rcall	.-140    	; 0x49c6 <__fp_pscB>
    4a52:	18 f0       	brcs	.+6      	; 0x4a5a <__mulsf3+0x12>
    4a54:	95 23       	and	r25, r21
    4a56:	09 f0       	breq	.+2      	; 0x4a5a <__mulsf3+0x12>
    4a58:	a6 cf       	rjmp	.-180    	; 0x49a6 <__fp_inf>
    4a5a:	ab cf       	rjmp	.-170    	; 0x49b2 <__fp_nan>
    4a5c:	11 24       	eor	r1, r1
    4a5e:	ee cf       	rjmp	.-36     	; 0x4a3c <__fp_szero>

00004a60 <__mulsf3x>:
    4a60:	ca df       	rcall	.-108    	; 0x49f6 <__fp_split3>
    4a62:	a0 f3       	brcs	.-24     	; 0x4a4c <__mulsf3+0x4>

00004a64 <__mulsf3_pse>:
    4a64:	95 9f       	mul	r25, r21
    4a66:	d1 f3       	breq	.-12     	; 0x4a5c <__mulsf3+0x14>
    4a68:	95 0f       	add	r25, r21
    4a6a:	50 e0       	ldi	r21, 0x00	; 0
    4a6c:	55 1f       	adc	r21, r21
    4a6e:	62 9f       	mul	r22, r18
    4a70:	f0 01       	movw	r30, r0
    4a72:	72 9f       	mul	r23, r18
    4a74:	bb 27       	eor	r27, r27
    4a76:	f0 0d       	add	r31, r0
    4a78:	b1 1d       	adc	r27, r1
    4a7a:	63 9f       	mul	r22, r19
    4a7c:	aa 27       	eor	r26, r26
    4a7e:	f0 0d       	add	r31, r0
    4a80:	b1 1d       	adc	r27, r1
    4a82:	aa 1f       	adc	r26, r26
    4a84:	64 9f       	mul	r22, r20
    4a86:	66 27       	eor	r22, r22
    4a88:	b0 0d       	add	r27, r0
    4a8a:	a1 1d       	adc	r26, r1
    4a8c:	66 1f       	adc	r22, r22
    4a8e:	82 9f       	mul	r24, r18
    4a90:	22 27       	eor	r18, r18
    4a92:	b0 0d       	add	r27, r0
    4a94:	a1 1d       	adc	r26, r1
    4a96:	62 1f       	adc	r22, r18
    4a98:	73 9f       	mul	r23, r19
    4a9a:	b0 0d       	add	r27, r0
    4a9c:	a1 1d       	adc	r26, r1
    4a9e:	62 1f       	adc	r22, r18
    4aa0:	83 9f       	mul	r24, r19
    4aa2:	a0 0d       	add	r26, r0
    4aa4:	61 1d       	adc	r22, r1
    4aa6:	22 1f       	adc	r18, r18
    4aa8:	74 9f       	mul	r23, r20
    4aaa:	33 27       	eor	r19, r19
    4aac:	a0 0d       	add	r26, r0
    4aae:	61 1d       	adc	r22, r1
    4ab0:	23 1f       	adc	r18, r19
    4ab2:	84 9f       	mul	r24, r20
    4ab4:	60 0d       	add	r22, r0
    4ab6:	21 1d       	adc	r18, r1
    4ab8:	82 2f       	mov	r24, r18
    4aba:	76 2f       	mov	r23, r22
    4abc:	6a 2f       	mov	r22, r26
    4abe:	11 24       	eor	r1, r1
    4ac0:	9f 57       	subi	r25, 0x7F	; 127
    4ac2:	50 40       	sbci	r21, 0x00	; 0
    4ac4:	8a f0       	brmi	.+34     	; 0x4ae8 <__mulsf3_pse+0x84>
    4ac6:	e1 f0       	breq	.+56     	; 0x4b00 <__mulsf3_pse+0x9c>
    4ac8:	88 23       	and	r24, r24
    4aca:	4a f0       	brmi	.+18     	; 0x4ade <__mulsf3_pse+0x7a>
    4acc:	ee 0f       	add	r30, r30
    4ace:	ff 1f       	adc	r31, r31
    4ad0:	bb 1f       	adc	r27, r27
    4ad2:	66 1f       	adc	r22, r22
    4ad4:	77 1f       	adc	r23, r23
    4ad6:	88 1f       	adc	r24, r24
    4ad8:	91 50       	subi	r25, 0x01	; 1
    4ada:	50 40       	sbci	r21, 0x00	; 0
    4adc:	a9 f7       	brne	.-22     	; 0x4ac8 <__mulsf3_pse+0x64>
    4ade:	9e 3f       	cpi	r25, 0xFE	; 254
    4ae0:	51 05       	cpc	r21, r1
    4ae2:	70 f0       	brcs	.+28     	; 0x4b00 <__mulsf3_pse+0x9c>
    4ae4:	60 cf       	rjmp	.-320    	; 0x49a6 <__fp_inf>
    4ae6:	aa cf       	rjmp	.-172    	; 0x4a3c <__fp_szero>
    4ae8:	5f 3f       	cpi	r21, 0xFF	; 255
    4aea:	ec f3       	brlt	.-6      	; 0x4ae6 <__mulsf3_pse+0x82>
    4aec:	98 3e       	cpi	r25, 0xE8	; 232
    4aee:	dc f3       	brlt	.-10     	; 0x4ae6 <__mulsf3_pse+0x82>
    4af0:	86 95       	lsr	r24
    4af2:	77 95       	ror	r23
    4af4:	67 95       	ror	r22
    4af6:	b7 95       	ror	r27
    4af8:	f7 95       	ror	r31
    4afa:	e7 95       	ror	r30
    4afc:	9f 5f       	subi	r25, 0xFF	; 255
    4afe:	c1 f7       	brne	.-16     	; 0x4af0 <__mulsf3_pse+0x8c>
    4b00:	fe 2b       	or	r31, r30
    4b02:	88 0f       	add	r24, r24
    4b04:	91 1d       	adc	r25, r1
    4b06:	96 95       	lsr	r25
    4b08:	87 95       	ror	r24
    4b0a:	97 f9       	bld	r25, 7
    4b0c:	08 95       	ret

00004b0e <round>:
    4b0e:	7b df       	rcall	.-266    	; 0x4a06 <__fp_splitA>
    4b10:	e0 f0       	brcs	.+56     	; 0x4b4a <round+0x3c>
    4b12:	9e 37       	cpi	r25, 0x7E	; 126
    4b14:	d8 f0       	brcs	.+54     	; 0x4b4c <round+0x3e>
    4b16:	96 39       	cpi	r25, 0x96	; 150
    4b18:	b8 f4       	brcc	.+46     	; 0x4b48 <round+0x3a>
    4b1a:	9e 38       	cpi	r25, 0x8E	; 142
    4b1c:	48 f4       	brcc	.+18     	; 0x4b30 <round+0x22>
    4b1e:	67 2f       	mov	r22, r23
    4b20:	78 2f       	mov	r23, r24
    4b22:	88 27       	eor	r24, r24
    4b24:	98 5f       	subi	r25, 0xF8	; 248
    4b26:	f9 cf       	rjmp	.-14     	; 0x4b1a <round+0xc>
    4b28:	86 95       	lsr	r24
    4b2a:	77 95       	ror	r23
    4b2c:	67 95       	ror	r22
    4b2e:	93 95       	inc	r25
    4b30:	95 39       	cpi	r25, 0x95	; 149
    4b32:	d0 f3       	brcs	.-12     	; 0x4b28 <round+0x1a>
    4b34:	b6 2f       	mov	r27, r22
    4b36:	b1 70       	andi	r27, 0x01	; 1
    4b38:	6b 0f       	add	r22, r27
    4b3a:	71 1d       	adc	r23, r1
    4b3c:	81 1d       	adc	r24, r1
    4b3e:	20 f4       	brcc	.+8      	; 0x4b48 <round+0x3a>
    4b40:	87 95       	ror	r24
    4b42:	77 95       	ror	r23
    4b44:	67 95       	ror	r22
    4b46:	93 95       	inc	r25
    4b48:	02 c0       	rjmp	.+4      	; 0x4b4e <__fp_mintl>
    4b4a:	1c c0       	rjmp	.+56     	; 0x4b84 <__fp_mpack>
    4b4c:	77 cf       	rjmp	.-274    	; 0x4a3c <__fp_szero>

00004b4e <__fp_mintl>:
    4b4e:	88 23       	and	r24, r24
    4b50:	71 f4       	brne	.+28     	; 0x4b6e <__fp_mintl+0x20>
    4b52:	77 23       	and	r23, r23
    4b54:	21 f0       	breq	.+8      	; 0x4b5e <__fp_mintl+0x10>
    4b56:	98 50       	subi	r25, 0x08	; 8
    4b58:	87 2b       	or	r24, r23
    4b5a:	76 2f       	mov	r23, r22
    4b5c:	07 c0       	rjmp	.+14     	; 0x4b6c <__fp_mintl+0x1e>
    4b5e:	66 23       	and	r22, r22
    4b60:	11 f4       	brne	.+4      	; 0x4b66 <__fp_mintl+0x18>
    4b62:	99 27       	eor	r25, r25
    4b64:	0d c0       	rjmp	.+26     	; 0x4b80 <__fp_mintl+0x32>
    4b66:	90 51       	subi	r25, 0x10	; 16
    4b68:	86 2b       	or	r24, r22
    4b6a:	70 e0       	ldi	r23, 0x00	; 0
    4b6c:	60 e0       	ldi	r22, 0x00	; 0
    4b6e:	2a f0       	brmi	.+10     	; 0x4b7a <__fp_mintl+0x2c>
    4b70:	9a 95       	dec	r25
    4b72:	66 0f       	add	r22, r22
    4b74:	77 1f       	adc	r23, r23
    4b76:	88 1f       	adc	r24, r24
    4b78:	da f7       	brpl	.-10     	; 0x4b70 <__fp_mintl+0x22>
    4b7a:	88 0f       	add	r24, r24
    4b7c:	96 95       	lsr	r25
    4b7e:	87 95       	ror	r24
    4b80:	97 f9       	bld	r25, 7
    4b82:	08 95       	ret

00004b84 <__fp_mpack>:
    4b84:	9f 3f       	cpi	r25, 0xFF	; 255
    4b86:	31 f0       	breq	.+12     	; 0x4b94 <__fp_mpack_finite+0xc>

00004b88 <__fp_mpack_finite>:
    4b88:	91 50       	subi	r25, 0x01	; 1
    4b8a:	20 f4       	brcc	.+8      	; 0x4b94 <__fp_mpack_finite+0xc>
    4b8c:	87 95       	ror	r24
    4b8e:	77 95       	ror	r23
    4b90:	67 95       	ror	r22
    4b92:	b7 95       	ror	r27
    4b94:	88 0f       	add	r24, r24
    4b96:	91 1d       	adc	r25, r1
    4b98:	96 95       	lsr	r25
    4b9a:	87 95       	ror	r24
    4b9c:	97 f9       	bld	r25, 7
    4b9e:	08 95       	ret

00004ba0 <__muluhisi3>:
    4ba0:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <__umulhisi3>
    4ba4:	a5 9f       	mul	r26, r21
    4ba6:	90 0d       	add	r25, r0
    4ba8:	b4 9f       	mul	r27, r20
    4baa:	90 0d       	add	r25, r0
    4bac:	a4 9f       	mul	r26, r20
    4bae:	80 0d       	add	r24, r0
    4bb0:	91 1d       	adc	r25, r1
    4bb2:	11 24       	eor	r1, r1
    4bb4:	08 95       	ret

00004bb6 <__udivmodqi4>:
    4bb6:	99 1b       	sub	r25, r25
    4bb8:	79 e0       	ldi	r23, 0x09	; 9
    4bba:	04 c0       	rjmp	.+8      	; 0x4bc4 <__udivmodqi4_ep>

00004bbc <__udivmodqi4_loop>:
    4bbc:	99 1f       	adc	r25, r25
    4bbe:	96 17       	cp	r25, r22
    4bc0:	08 f0       	brcs	.+2      	; 0x4bc4 <__udivmodqi4_ep>
    4bc2:	96 1b       	sub	r25, r22

00004bc4 <__udivmodqi4_ep>:
    4bc4:	88 1f       	adc	r24, r24
    4bc6:	7a 95       	dec	r23
    4bc8:	c9 f7       	brne	.-14     	; 0x4bbc <__udivmodqi4_loop>
    4bca:	80 95       	com	r24
    4bcc:	08 95       	ret

00004bce <__udivmodhi4>:
    4bce:	aa 1b       	sub	r26, r26
    4bd0:	bb 1b       	sub	r27, r27
    4bd2:	51 e1       	ldi	r21, 0x11	; 17
    4bd4:	07 c0       	rjmp	.+14     	; 0x4be4 <__udivmodhi4_ep>

00004bd6 <__udivmodhi4_loop>:
    4bd6:	aa 1f       	adc	r26, r26
    4bd8:	bb 1f       	adc	r27, r27
    4bda:	a6 17       	cp	r26, r22
    4bdc:	b7 07       	cpc	r27, r23
    4bde:	10 f0       	brcs	.+4      	; 0x4be4 <__udivmodhi4_ep>
    4be0:	a6 1b       	sub	r26, r22
    4be2:	b7 0b       	sbc	r27, r23

00004be4 <__udivmodhi4_ep>:
    4be4:	88 1f       	adc	r24, r24
    4be6:	99 1f       	adc	r25, r25
    4be8:	5a 95       	dec	r21
    4bea:	a9 f7       	brne	.-22     	; 0x4bd6 <__udivmodhi4_loop>
    4bec:	80 95       	com	r24
    4bee:	90 95       	com	r25
    4bf0:	bc 01       	movw	r22, r24
    4bf2:	cd 01       	movw	r24, r26
    4bf4:	08 95       	ret

00004bf6 <__divmodhi4>:
    4bf6:	97 fb       	bst	r25, 7
    4bf8:	07 2e       	mov	r0, r23
    4bfa:	16 f4       	brtc	.+4      	; 0x4c00 <__divmodhi4+0xa>
    4bfc:	00 94       	com	r0
    4bfe:	07 d0       	rcall	.+14     	; 0x4c0e <__divmodhi4_neg1>
    4c00:	77 fd       	sbrc	r23, 7
    4c02:	09 d0       	rcall	.+18     	; 0x4c16 <__divmodhi4_neg2>
    4c04:	0e 94 e7 25 	call	0x4bce	; 0x4bce <__udivmodhi4>
    4c08:	07 fc       	sbrc	r0, 7
    4c0a:	05 d0       	rcall	.+10     	; 0x4c16 <__divmodhi4_neg2>
    4c0c:	3e f4       	brtc	.+14     	; 0x4c1c <__divmodhi4_exit>

00004c0e <__divmodhi4_neg1>:
    4c0e:	90 95       	com	r25
    4c10:	81 95       	neg	r24
    4c12:	9f 4f       	sbci	r25, 0xFF	; 255
    4c14:	08 95       	ret

00004c16 <__divmodhi4_neg2>:
    4c16:	70 95       	com	r23
    4c18:	61 95       	neg	r22
    4c1a:	7f 4f       	sbci	r23, 0xFF	; 255

00004c1c <__divmodhi4_exit>:
    4c1c:	08 95       	ret

00004c1e <__udivmodsi4>:
    4c1e:	a1 e2       	ldi	r26, 0x21	; 33
    4c20:	1a 2e       	mov	r1, r26
    4c22:	aa 1b       	sub	r26, r26
    4c24:	bb 1b       	sub	r27, r27
    4c26:	fd 01       	movw	r30, r26
    4c28:	0d c0       	rjmp	.+26     	; 0x4c44 <__udivmodsi4_ep>

00004c2a <__udivmodsi4_loop>:
    4c2a:	aa 1f       	adc	r26, r26
    4c2c:	bb 1f       	adc	r27, r27
    4c2e:	ee 1f       	adc	r30, r30
    4c30:	ff 1f       	adc	r31, r31
    4c32:	a2 17       	cp	r26, r18
    4c34:	b3 07       	cpc	r27, r19
    4c36:	e4 07       	cpc	r30, r20
    4c38:	f5 07       	cpc	r31, r21
    4c3a:	20 f0       	brcs	.+8      	; 0x4c44 <__udivmodsi4_ep>
    4c3c:	a2 1b       	sub	r26, r18
    4c3e:	b3 0b       	sbc	r27, r19
    4c40:	e4 0b       	sbc	r30, r20
    4c42:	f5 0b       	sbc	r31, r21

00004c44 <__udivmodsi4_ep>:
    4c44:	66 1f       	adc	r22, r22
    4c46:	77 1f       	adc	r23, r23
    4c48:	88 1f       	adc	r24, r24
    4c4a:	99 1f       	adc	r25, r25
    4c4c:	1a 94       	dec	r1
    4c4e:	69 f7       	brne	.-38     	; 0x4c2a <__udivmodsi4_loop>
    4c50:	60 95       	com	r22
    4c52:	70 95       	com	r23
    4c54:	80 95       	com	r24
    4c56:	90 95       	com	r25
    4c58:	9b 01       	movw	r18, r22
    4c5a:	ac 01       	movw	r20, r24
    4c5c:	bd 01       	movw	r22, r26
    4c5e:	cf 01       	movw	r24, r30
    4c60:	08 95       	ret

00004c62 <__cmpdi2_s8>:
    4c62:	00 24       	eor	r0, r0
    4c64:	a7 fd       	sbrc	r26, 7
    4c66:	00 94       	com	r0
    4c68:	2a 17       	cp	r18, r26
    4c6a:	30 05       	cpc	r19, r0
    4c6c:	40 05       	cpc	r20, r0
    4c6e:	50 05       	cpc	r21, r0
    4c70:	60 05       	cpc	r22, r0
    4c72:	70 05       	cpc	r23, r0
    4c74:	80 05       	cpc	r24, r0
    4c76:	90 05       	cpc	r25, r0
    4c78:	08 95       	ret

00004c7a <__umulhisi3>:
    4c7a:	a2 9f       	mul	r26, r18
    4c7c:	b0 01       	movw	r22, r0
    4c7e:	b3 9f       	mul	r27, r19
    4c80:	c0 01       	movw	r24, r0
    4c82:	a3 9f       	mul	r26, r19
    4c84:	01 d0       	rcall	.+2      	; 0x4c88 <__umulhisi3+0xe>
    4c86:	b2 9f       	mul	r27, r18
    4c88:	70 0d       	add	r23, r0
    4c8a:	81 1d       	adc	r24, r1
    4c8c:	11 24       	eor	r1, r1
    4c8e:	91 1d       	adc	r25, r1
    4c90:	08 95       	ret

00004c92 <calloc>:
    4c92:	0f 93       	push	r16
    4c94:	1f 93       	push	r17
    4c96:	cf 93       	push	r28
    4c98:	df 93       	push	r29
    4c9a:	68 9f       	mul	r22, r24
    4c9c:	80 01       	movw	r16, r0
    4c9e:	69 9f       	mul	r22, r25
    4ca0:	10 0d       	add	r17, r0
    4ca2:	78 9f       	mul	r23, r24
    4ca4:	10 0d       	add	r17, r0
    4ca6:	11 24       	eor	r1, r1
    4ca8:	c8 01       	movw	r24, r16
    4caa:	0e 94 67 26 	call	0x4cce	; 0x4cce <malloc>
    4cae:	c8 2f       	mov	r28, r24
    4cb0:	d9 2f       	mov	r29, r25
    4cb2:	20 97       	sbiw	r28, 0x00	; 0
    4cb4:	31 f0       	breq	.+12     	; 0x4cc2 <calloc+0x30>
    4cb6:	a8 01       	movw	r20, r16
    4cb8:	60 e0       	ldi	r22, 0x00	; 0
    4cba:	70 e0       	ldi	r23, 0x00	; 0
    4cbc:	8c 2f       	mov	r24, r28
    4cbe:	0e 94 f0 28 	call	0x51e0	; 0x51e0 <memset>
    4cc2:	ce 01       	movw	r24, r28
    4cc4:	df 91       	pop	r29
    4cc6:	cf 91       	pop	r28
    4cc8:	1f 91       	pop	r17
    4cca:	0f 91       	pop	r16
    4ccc:	08 95       	ret

00004cce <malloc>:
    4cce:	0f 93       	push	r16
    4cd0:	1f 93       	push	r17
    4cd2:	cf 93       	push	r28
    4cd4:	df 93       	push	r29
    4cd6:	82 30       	cpi	r24, 0x02	; 2
    4cd8:	91 05       	cpc	r25, r1
    4cda:	10 f4       	brcc	.+4      	; 0x4ce0 <malloc+0x12>
    4cdc:	82 e0       	ldi	r24, 0x02	; 2
    4cde:	90 e0       	ldi	r25, 0x00	; 0
    4ce0:	e0 91 e0 26 	lds	r30, 0x26E0
    4ce4:	f0 91 e1 26 	lds	r31, 0x26E1
    4ce8:	20 e0       	ldi	r18, 0x00	; 0
    4cea:	30 e0       	ldi	r19, 0x00	; 0
    4cec:	c0 e0       	ldi	r28, 0x00	; 0
    4cee:	d0 e0       	ldi	r29, 0x00	; 0
    4cf0:	23 c0       	rjmp	.+70     	; 0x4d38 <malloc+0x6a>
    4cf2:	40 81       	ld	r20, Z
    4cf4:	51 81       	ldd	r21, Z+1	; 0x01
    4cf6:	48 17       	cp	r20, r24
    4cf8:	59 07       	cpc	r21, r25
    4cfa:	a8 f0       	brcs	.+42     	; 0x4d26 <malloc+0x58>
    4cfc:	48 17       	cp	r20, r24
    4cfe:	59 07       	cpc	r21, r25
    4d00:	61 f4       	brne	.+24     	; 0x4d1a <malloc+0x4c>
    4d02:	82 81       	ldd	r24, Z+2	; 0x02
    4d04:	93 81       	ldd	r25, Z+3	; 0x03
    4d06:	20 97       	sbiw	r28, 0x00	; 0
    4d08:	19 f0       	breq	.+6      	; 0x4d10 <malloc+0x42>
    4d0a:	8a 83       	std	Y+2, r24	; 0x02
    4d0c:	9b 83       	std	Y+3, r25	; 0x03
    4d0e:	2e c0       	rjmp	.+92     	; 0x4d6c <malloc+0x9e>
    4d10:	80 93 e0 26 	sts	0x26E0, r24
    4d14:	90 93 e1 26 	sts	0x26E1, r25
    4d18:	29 c0       	rjmp	.+82     	; 0x4d6c <malloc+0x9e>
    4d1a:	21 15       	cp	r18, r1
    4d1c:	31 05       	cpc	r19, r1
    4d1e:	29 f0       	breq	.+10     	; 0x4d2a <malloc+0x5c>
    4d20:	42 17       	cp	r20, r18
    4d22:	53 07       	cpc	r21, r19
    4d24:	10 f0       	brcs	.+4      	; 0x4d2a <malloc+0x5c>
    4d26:	a9 01       	movw	r20, r18
    4d28:	02 c0       	rjmp	.+4      	; 0x4d2e <malloc+0x60>
    4d2a:	be 01       	movw	r22, r28
    4d2c:	df 01       	movw	r26, r30
    4d2e:	02 81       	ldd	r16, Z+2	; 0x02
    4d30:	13 81       	ldd	r17, Z+3	; 0x03
    4d32:	ef 01       	movw	r28, r30
    4d34:	9a 01       	movw	r18, r20
    4d36:	f8 01       	movw	r30, r16
    4d38:	30 97       	sbiw	r30, 0x00	; 0
    4d3a:	d9 f6       	brne	.-74     	; 0x4cf2 <malloc+0x24>
    4d3c:	21 15       	cp	r18, r1
    4d3e:	31 05       	cpc	r19, r1
    4d40:	09 f1       	breq	.+66     	; 0x4d84 <malloc+0xb6>
    4d42:	28 1b       	sub	r18, r24
    4d44:	39 0b       	sbc	r19, r25
    4d46:	24 30       	cpi	r18, 0x04	; 4
    4d48:	31 05       	cpc	r19, r1
    4d4a:	90 f4       	brcc	.+36     	; 0x4d70 <malloc+0xa2>
    4d4c:	12 96       	adiw	r26, 0x02	; 2
    4d4e:	8d 91       	ld	r24, X+
    4d50:	9c 91       	ld	r25, X
    4d52:	13 97       	sbiw	r26, 0x03	; 3
    4d54:	61 15       	cp	r22, r1
    4d56:	71 05       	cpc	r23, r1
    4d58:	21 f0       	breq	.+8      	; 0x4d62 <malloc+0x94>
    4d5a:	fb 01       	movw	r30, r22
    4d5c:	82 83       	std	Z+2, r24	; 0x02
    4d5e:	93 83       	std	Z+3, r25	; 0x03
    4d60:	04 c0       	rjmp	.+8      	; 0x4d6a <malloc+0x9c>
    4d62:	80 93 e0 26 	sts	0x26E0, r24
    4d66:	90 93 e1 26 	sts	0x26E1, r25
    4d6a:	fd 01       	movw	r30, r26
    4d6c:	32 96       	adiw	r30, 0x02	; 2
    4d6e:	44 c0       	rjmp	.+136    	; 0x4df8 <malloc+0x12a>
    4d70:	fd 01       	movw	r30, r26
    4d72:	e2 0f       	add	r30, r18
    4d74:	f3 1f       	adc	r31, r19
    4d76:	81 93       	st	Z+, r24
    4d78:	91 93       	st	Z+, r25
    4d7a:	22 50       	subi	r18, 0x02	; 2
    4d7c:	31 09       	sbc	r19, r1
    4d7e:	2d 93       	st	X+, r18
    4d80:	3c 93       	st	X, r19
    4d82:	3a c0       	rjmp	.+116    	; 0x4df8 <malloc+0x12a>
    4d84:	20 91 de 26 	lds	r18, 0x26DE
    4d88:	30 91 df 26 	lds	r19, 0x26DF
    4d8c:	23 2b       	or	r18, r19
    4d8e:	41 f4       	brne	.+16     	; 0x4da0 <malloc+0xd2>
    4d90:	20 91 1f 20 	lds	r18, 0x201F
    4d94:	30 91 20 20 	lds	r19, 0x2020
    4d98:	20 93 de 26 	sts	0x26DE, r18
    4d9c:	30 93 df 26 	sts	0x26DF, r19
    4da0:	20 91 1d 20 	lds	r18, 0x201D
    4da4:	30 91 1e 20 	lds	r19, 0x201E
    4da8:	21 15       	cp	r18, r1
    4daa:	31 05       	cpc	r19, r1
    4dac:	41 f4       	brne	.+16     	; 0x4dbe <malloc+0xf0>
    4dae:	2d b7       	in	r18, 0x3d	; 61
    4db0:	3e b7       	in	r19, 0x3e	; 62
    4db2:	40 91 21 20 	lds	r20, 0x2021
    4db6:	50 91 22 20 	lds	r21, 0x2022
    4dba:	24 1b       	sub	r18, r20
    4dbc:	35 0b       	sbc	r19, r21
    4dbe:	e0 91 de 26 	lds	r30, 0x26DE
    4dc2:	f0 91 df 26 	lds	r31, 0x26DF
    4dc6:	e2 17       	cp	r30, r18
    4dc8:	f3 07       	cpc	r31, r19
    4dca:	a0 f4       	brcc	.+40     	; 0x4df4 <malloc+0x126>
    4dcc:	2e 1b       	sub	r18, r30
    4dce:	3f 0b       	sbc	r19, r31
    4dd0:	28 17       	cp	r18, r24
    4dd2:	39 07       	cpc	r19, r25
    4dd4:	78 f0       	brcs	.+30     	; 0x4df4 <malloc+0x126>
    4dd6:	ac 01       	movw	r20, r24
    4dd8:	4e 5f       	subi	r20, 0xFE	; 254
    4dda:	5f 4f       	sbci	r21, 0xFF	; 255
    4ddc:	24 17       	cp	r18, r20
    4dde:	35 07       	cpc	r19, r21
    4de0:	48 f0       	brcs	.+18     	; 0x4df4 <malloc+0x126>
    4de2:	4e 0f       	add	r20, r30
    4de4:	5f 1f       	adc	r21, r31
    4de6:	40 93 de 26 	sts	0x26DE, r20
    4dea:	50 93 df 26 	sts	0x26DF, r21
    4dee:	81 93       	st	Z+, r24
    4df0:	91 93       	st	Z+, r25
    4df2:	02 c0       	rjmp	.+4      	; 0x4df8 <malloc+0x12a>
    4df4:	e0 e0       	ldi	r30, 0x00	; 0
    4df6:	f0 e0       	ldi	r31, 0x00	; 0
    4df8:	cf 01       	movw	r24, r30
    4dfa:	df 91       	pop	r29
    4dfc:	cf 91       	pop	r28
    4dfe:	1f 91       	pop	r17
    4e00:	0f 91       	pop	r16
    4e02:	08 95       	ret

00004e04 <free>:
    4e04:	ef 92       	push	r14
    4e06:	ff 92       	push	r15
    4e08:	0f 93       	push	r16
    4e0a:	1f 93       	push	r17
    4e0c:	cf 93       	push	r28
    4e0e:	df 93       	push	r29
    4e10:	00 97       	sbiw	r24, 0x00	; 0
    4e12:	09 f4       	brne	.+2      	; 0x4e16 <free+0x12>
    4e14:	8e c0       	rjmp	.+284    	; 0x4f32 <free+0x12e>
    4e16:	dc 01       	movw	r26, r24
    4e18:	12 97       	sbiw	r26, 0x02	; 2
    4e1a:	12 96       	adiw	r26, 0x02	; 2
    4e1c:	1d 92       	st	X+, r1
    4e1e:	1c 92       	st	X, r1
    4e20:	13 97       	sbiw	r26, 0x03	; 3
    4e22:	e0 90 e0 26 	lds	r14, 0x26E0
    4e26:	f0 90 e1 26 	lds	r15, 0x26E1
    4e2a:	e1 14       	cp	r14, r1
    4e2c:	f1 04       	cpc	r15, r1
    4e2e:	89 f4       	brne	.+34     	; 0x4e52 <free+0x4e>
    4e30:	2d 91       	ld	r18, X+
    4e32:	3c 91       	ld	r19, X
    4e34:	11 97       	sbiw	r26, 0x01	; 1
    4e36:	28 0f       	add	r18, r24
    4e38:	39 1f       	adc	r19, r25
    4e3a:	80 91 de 26 	lds	r24, 0x26DE
    4e3e:	90 91 df 26 	lds	r25, 0x26DF
    4e42:	82 17       	cp	r24, r18
    4e44:	93 07       	cpc	r25, r19
    4e46:	89 f5       	brne	.+98     	; 0x4eaa <free+0xa6>
    4e48:	a0 93 de 26 	sts	0x26DE, r26
    4e4c:	b0 93 df 26 	sts	0x26DF, r27
    4e50:	70 c0       	rjmp	.+224    	; 0x4f32 <free+0x12e>
    4e52:	e7 01       	movw	r28, r14
    4e54:	20 e0       	ldi	r18, 0x00	; 0
    4e56:	30 e0       	ldi	r19, 0x00	; 0
    4e58:	01 c0       	rjmp	.+2      	; 0x4e5c <free+0x58>
    4e5a:	ea 01       	movw	r28, r20
    4e5c:	ca 17       	cp	r28, r26
    4e5e:	db 07       	cpc	r29, r27
    4e60:	38 f4       	brcc	.+14     	; 0x4e70 <free+0x6c>
    4e62:	4a 81       	ldd	r20, Y+2	; 0x02
    4e64:	5b 81       	ldd	r21, Y+3	; 0x03
    4e66:	9e 01       	movw	r18, r28
    4e68:	41 15       	cp	r20, r1
    4e6a:	51 05       	cpc	r21, r1
    4e6c:	b1 f7       	brne	.-20     	; 0x4e5a <free+0x56>
    4e6e:	22 c0       	rjmp	.+68     	; 0x4eb4 <free+0xb0>
    4e70:	ac 01       	movw	r20, r24
    4e72:	42 50       	subi	r20, 0x02	; 2
    4e74:	51 09       	sbc	r21, r1
    4e76:	fa 01       	movw	r30, r20
    4e78:	c2 83       	std	Z+2, r28	; 0x02
    4e7a:	d3 83       	std	Z+3, r29	; 0x03
    4e7c:	00 81       	ld	r16, Z
    4e7e:	11 81       	ldd	r17, Z+1	; 0x01
    4e80:	bc 01       	movw	r22, r24
    4e82:	60 0f       	add	r22, r16
    4e84:	71 1f       	adc	r23, r17
    4e86:	6c 17       	cp	r22, r28
    4e88:	7d 07       	cpc	r23, r29
    4e8a:	61 f4       	brne	.+24     	; 0x4ea4 <free+0xa0>
    4e8c:	68 81       	ld	r22, Y
    4e8e:	79 81       	ldd	r23, Y+1	; 0x01
    4e90:	60 0f       	add	r22, r16
    4e92:	71 1f       	adc	r23, r17
    4e94:	6e 5f       	subi	r22, 0xFE	; 254
    4e96:	7f 4f       	sbci	r23, 0xFF	; 255
    4e98:	60 83       	st	Z, r22
    4e9a:	71 83       	std	Z+1, r23	; 0x01
    4e9c:	6a 81       	ldd	r22, Y+2	; 0x02
    4e9e:	7b 81       	ldd	r23, Y+3	; 0x03
    4ea0:	62 83       	std	Z+2, r22	; 0x02
    4ea2:	73 83       	std	Z+3, r23	; 0x03
    4ea4:	21 15       	cp	r18, r1
    4ea6:	31 05       	cpc	r19, r1
    4ea8:	29 f4       	brne	.+10     	; 0x4eb4 <free+0xb0>
    4eaa:	a0 93 e0 26 	sts	0x26E0, r26
    4eae:	b0 93 e1 26 	sts	0x26E1, r27
    4eb2:	3f c0       	rjmp	.+126    	; 0x4f32 <free+0x12e>
    4eb4:	f9 01       	movw	r30, r18
    4eb6:	a2 83       	std	Z+2, r26	; 0x02
    4eb8:	b3 83       	std	Z+3, r27	; 0x03
    4eba:	e9 01       	movw	r28, r18
    4ebc:	49 91       	ld	r20, Y+
    4ebe:	59 91       	ld	r21, Y+
    4ec0:	c4 0f       	add	r28, r20
    4ec2:	d5 1f       	adc	r29, r21
    4ec4:	ac 17       	cp	r26, r28
    4ec6:	bd 07       	cpc	r27, r29
    4ec8:	71 f4       	brne	.+28     	; 0x4ee6 <free+0xe2>
    4eca:	dc 01       	movw	r26, r24
    4ecc:	9e 91       	ld	r25, -X
    4ece:	8e 91       	ld	r24, -X
    4ed0:	84 0f       	add	r24, r20
    4ed2:	95 1f       	adc	r25, r21
    4ed4:	02 96       	adiw	r24, 0x02	; 2
    4ed6:	80 83       	st	Z, r24
    4ed8:	91 83       	std	Z+1, r25	; 0x01
    4eda:	12 96       	adiw	r26, 0x02	; 2
    4edc:	8d 91       	ld	r24, X+
    4ede:	9c 91       	ld	r25, X
    4ee0:	13 97       	sbiw	r26, 0x03	; 3
    4ee2:	82 83       	std	Z+2, r24	; 0x02
    4ee4:	93 83       	std	Z+3, r25	; 0x03
    4ee6:	a0 e0       	ldi	r26, 0x00	; 0
    4ee8:	b0 e0       	ldi	r27, 0x00	; 0
    4eea:	02 c0       	rjmp	.+4      	; 0x4ef0 <free+0xec>
    4eec:	d7 01       	movw	r26, r14
    4eee:	7c 01       	movw	r14, r24
    4ef0:	f7 01       	movw	r30, r14
    4ef2:	82 81       	ldd	r24, Z+2	; 0x02
    4ef4:	93 81       	ldd	r25, Z+3	; 0x03
    4ef6:	00 97       	sbiw	r24, 0x00	; 0
    4ef8:	c9 f7       	brne	.-14     	; 0x4eec <free+0xe8>
    4efa:	c7 01       	movw	r24, r14
    4efc:	02 96       	adiw	r24, 0x02	; 2
    4efe:	20 81       	ld	r18, Z
    4f00:	31 81       	ldd	r19, Z+1	; 0x01
    4f02:	82 0f       	add	r24, r18
    4f04:	93 1f       	adc	r25, r19
    4f06:	20 91 de 26 	lds	r18, 0x26DE
    4f0a:	30 91 df 26 	lds	r19, 0x26DF
    4f0e:	28 17       	cp	r18, r24
    4f10:	39 07       	cpc	r19, r25
    4f12:	79 f4       	brne	.+30     	; 0x4f32 <free+0x12e>
    4f14:	10 97       	sbiw	r26, 0x00	; 0
    4f16:	29 f4       	brne	.+10     	; 0x4f22 <free+0x11e>
    4f18:	10 92 e0 26 	sts	0x26E0, r1
    4f1c:	10 92 e1 26 	sts	0x26E1, r1
    4f20:	04 c0       	rjmp	.+8      	; 0x4f2a <free+0x126>
    4f22:	12 96       	adiw	r26, 0x02	; 2
    4f24:	1d 92       	st	X+, r1
    4f26:	1c 92       	st	X, r1
    4f28:	13 97       	sbiw	r26, 0x03	; 3
    4f2a:	e0 92 de 26 	sts	0x26DE, r14
    4f2e:	f0 92 df 26 	sts	0x26DF, r15
    4f32:	df 91       	pop	r29
    4f34:	cf 91       	pop	r28
    4f36:	1f 91       	pop	r17
    4f38:	0f 91       	pop	r16
    4f3a:	ff 90       	pop	r15
    4f3c:	ef 90       	pop	r14
    4f3e:	08 95       	ret

00004f40 <do_rand>:
    4f40:	8f 92       	push	r8
    4f42:	9f 92       	push	r9
    4f44:	af 92       	push	r10
    4f46:	bf 92       	push	r11
    4f48:	cf 92       	push	r12
    4f4a:	df 92       	push	r13
    4f4c:	ef 92       	push	r14
    4f4e:	ff 92       	push	r15
    4f50:	cf 93       	push	r28
    4f52:	df 93       	push	r29
    4f54:	ec 01       	movw	r28, r24
    4f56:	68 81       	ld	r22, Y
    4f58:	79 81       	ldd	r23, Y+1	; 0x01
    4f5a:	8a 81       	ldd	r24, Y+2	; 0x02
    4f5c:	9b 81       	ldd	r25, Y+3	; 0x03
    4f5e:	61 15       	cp	r22, r1
    4f60:	71 05       	cpc	r23, r1
    4f62:	81 05       	cpc	r24, r1
    4f64:	91 05       	cpc	r25, r1
    4f66:	21 f4       	brne	.+8      	; 0x4f70 <do_rand+0x30>
    4f68:	64 e2       	ldi	r22, 0x24	; 36
    4f6a:	79 ed       	ldi	r23, 0xD9	; 217
    4f6c:	8b e5       	ldi	r24, 0x5B	; 91
    4f6e:	97 e0       	ldi	r25, 0x07	; 7
    4f70:	2d e1       	ldi	r18, 0x1D	; 29
    4f72:	33 ef       	ldi	r19, 0xF3	; 243
    4f74:	41 e0       	ldi	r20, 0x01	; 1
    4f76:	50 e0       	ldi	r21, 0x00	; 0
    4f78:	0e 94 ec 29 	call	0x53d8	; 0x53d8 <__divmodsi4>
    4f7c:	49 01       	movw	r8, r18
    4f7e:	5a 01       	movw	r10, r20
    4f80:	9b 01       	movw	r18, r22
    4f82:	ac 01       	movw	r20, r24
    4f84:	a7 ea       	ldi	r26, 0xA7	; 167
    4f86:	b1 e4       	ldi	r27, 0x41	; 65
    4f88:	0e 94 d0 25 	call	0x4ba0	; 0x4ba0 <__muluhisi3>
    4f8c:	6b 01       	movw	r12, r22
    4f8e:	7c 01       	movw	r14, r24
    4f90:	ac ee       	ldi	r26, 0xEC	; 236
    4f92:	b4 ef       	ldi	r27, 0xF4	; 244
    4f94:	a5 01       	movw	r20, r10
    4f96:	94 01       	movw	r18, r8
    4f98:	0e 94 e7 29 	call	0x53ce	; 0x53ce <__mulohisi3>
    4f9c:	c6 0e       	add	r12, r22
    4f9e:	d7 1e       	adc	r13, r23
    4fa0:	e8 1e       	adc	r14, r24
    4fa2:	f9 1e       	adc	r15, r25
    4fa4:	f7 fe       	sbrs	r15, 7
    4fa6:	06 c0       	rjmp	.+12     	; 0x4fb4 <do_rand+0x74>
    4fa8:	81 e0       	ldi	r24, 0x01	; 1
    4faa:	c8 1a       	sub	r12, r24
    4fac:	d1 08       	sbc	r13, r1
    4fae:	e1 08       	sbc	r14, r1
    4fb0:	80 e8       	ldi	r24, 0x80	; 128
    4fb2:	f8 0a       	sbc	r15, r24
    4fb4:	c8 82       	st	Y, r12
    4fb6:	d9 82       	std	Y+1, r13	; 0x01
    4fb8:	ea 82       	std	Y+2, r14	; 0x02
    4fba:	fb 82       	std	Y+3, r15	; 0x03
    4fbc:	e8 94       	clt
    4fbe:	d7 f8       	bld	r13, 7
    4fc0:	ee 24       	eor	r14, r14
    4fc2:	ff 24       	eor	r15, r15
    4fc4:	c6 01       	movw	r24, r12
    4fc6:	df 91       	pop	r29
    4fc8:	cf 91       	pop	r28
    4fca:	ff 90       	pop	r15
    4fcc:	ef 90       	pop	r14
    4fce:	df 90       	pop	r13
    4fd0:	cf 90       	pop	r12
    4fd2:	bf 90       	pop	r11
    4fd4:	af 90       	pop	r10
    4fd6:	9f 90       	pop	r9
    4fd8:	8f 90       	pop	r8
    4fda:	08 95       	ret

00004fdc <rand_r>:
    4fdc:	0c 94 a0 27 	jmp	0x4f40	; 0x4f40 <do_rand>

00004fe0 <rand>:
    4fe0:	83 e2       	ldi	r24, 0x23	; 35
    4fe2:	90 e2       	ldi	r25, 0x20	; 32
    4fe4:	0c 94 a0 27 	jmp	0x4f40	; 0x4f40 <do_rand>

00004fe8 <srand>:
    4fe8:	a0 e0       	ldi	r26, 0x00	; 0
    4fea:	b0 e0       	ldi	r27, 0x00	; 0
    4fec:	80 93 23 20 	sts	0x2023, r24
    4ff0:	90 93 24 20 	sts	0x2024, r25
    4ff4:	a0 93 25 20 	sts	0x2025, r26
    4ff8:	b0 93 26 20 	sts	0x2026, r27
    4ffc:	08 95       	ret

00004ffe <abort>:
    4ffe:	81 e0       	ldi	r24, 0x01	; 1
    5000:	90 e0       	ldi	r25, 0x00	; 0
    5002:	f8 94       	cli
    5004:	0c 94 08 2a 	jmp	0x5410	; 0x5410 <_exit>

00005008 <__ftoa_engine>:
    5008:	28 30       	cpi	r18, 0x08	; 8
    500a:	08 f0       	brcs	.+2      	; 0x500e <__ftoa_engine+0x6>
    500c:	27 e0       	ldi	r18, 0x07	; 7
    500e:	33 27       	eor	r19, r19
    5010:	da 01       	movw	r26, r20
    5012:	99 0f       	add	r25, r25
    5014:	31 1d       	adc	r19, r1
    5016:	87 fd       	sbrc	r24, 7
    5018:	91 60       	ori	r25, 0x01	; 1
    501a:	00 96       	adiw	r24, 0x00	; 0
    501c:	61 05       	cpc	r22, r1
    501e:	71 05       	cpc	r23, r1
    5020:	39 f4       	brne	.+14     	; 0x5030 <__ftoa_engine+0x28>
    5022:	32 60       	ori	r19, 0x02	; 2
    5024:	2e 5f       	subi	r18, 0xFE	; 254
    5026:	3d 93       	st	X+, r19
    5028:	30 e3       	ldi	r19, 0x30	; 48
    502a:	2a 95       	dec	r18
    502c:	e1 f7       	brne	.-8      	; 0x5026 <__ftoa_engine+0x1e>
    502e:	08 95       	ret
    5030:	9f 3f       	cpi	r25, 0xFF	; 255
    5032:	30 f0       	brcs	.+12     	; 0x5040 <__ftoa_engine+0x38>
    5034:	80 38       	cpi	r24, 0x80	; 128
    5036:	71 05       	cpc	r23, r1
    5038:	61 05       	cpc	r22, r1
    503a:	09 f0       	breq	.+2      	; 0x503e <__ftoa_engine+0x36>
    503c:	3c 5f       	subi	r19, 0xFC	; 252
    503e:	3c 5f       	subi	r19, 0xFC	; 252
    5040:	3d 93       	st	X+, r19
    5042:	91 30       	cpi	r25, 0x01	; 1
    5044:	08 f0       	brcs	.+2      	; 0x5048 <__ftoa_engine+0x40>
    5046:	80 68       	ori	r24, 0x80	; 128
    5048:	91 1d       	adc	r25, r1
    504a:	df 93       	push	r29
    504c:	cf 93       	push	r28
    504e:	1f 93       	push	r17
    5050:	0f 93       	push	r16
    5052:	ff 92       	push	r15
    5054:	ef 92       	push	r14
    5056:	19 2f       	mov	r17, r25
    5058:	98 7f       	andi	r25, 0xF8	; 248
    505a:	96 95       	lsr	r25
    505c:	e9 2f       	mov	r30, r25
    505e:	96 95       	lsr	r25
    5060:	96 95       	lsr	r25
    5062:	e9 0f       	add	r30, r25
    5064:	ff 27       	eor	r31, r31
    5066:	e6 5b       	subi	r30, 0xB6	; 182
    5068:	fd 4f       	sbci	r31, 0xFD	; 253
    506a:	99 27       	eor	r25, r25
    506c:	33 27       	eor	r19, r19
    506e:	ee 24       	eor	r14, r14
    5070:	ff 24       	eor	r15, r15
    5072:	a7 01       	movw	r20, r14
    5074:	e7 01       	movw	r28, r14
    5076:	05 90       	lpm	r0, Z+
    5078:	08 94       	sec
    507a:	07 94       	ror	r0
    507c:	28 f4       	brcc	.+10     	; 0x5088 <__ftoa_engine+0x80>
    507e:	36 0f       	add	r19, r22
    5080:	e7 1e       	adc	r14, r23
    5082:	f8 1e       	adc	r15, r24
    5084:	49 1f       	adc	r20, r25
    5086:	51 1d       	adc	r21, r1
    5088:	66 0f       	add	r22, r22
    508a:	77 1f       	adc	r23, r23
    508c:	88 1f       	adc	r24, r24
    508e:	99 1f       	adc	r25, r25
    5090:	06 94       	lsr	r0
    5092:	a1 f7       	brne	.-24     	; 0x507c <__ftoa_engine+0x74>
    5094:	05 90       	lpm	r0, Z+
    5096:	07 94       	ror	r0
    5098:	28 f4       	brcc	.+10     	; 0x50a4 <__ftoa_engine+0x9c>
    509a:	e7 0e       	add	r14, r23
    509c:	f8 1e       	adc	r15, r24
    509e:	49 1f       	adc	r20, r25
    50a0:	56 1f       	adc	r21, r22
    50a2:	c1 1d       	adc	r28, r1
    50a4:	77 0f       	add	r23, r23
    50a6:	88 1f       	adc	r24, r24
    50a8:	99 1f       	adc	r25, r25
    50aa:	66 1f       	adc	r22, r22
    50ac:	06 94       	lsr	r0
    50ae:	a1 f7       	brne	.-24     	; 0x5098 <__ftoa_engine+0x90>
    50b0:	05 90       	lpm	r0, Z+
    50b2:	07 94       	ror	r0
    50b4:	28 f4       	brcc	.+10     	; 0x50c0 <__ftoa_engine+0xb8>
    50b6:	f8 0e       	add	r15, r24
    50b8:	49 1f       	adc	r20, r25
    50ba:	56 1f       	adc	r21, r22
    50bc:	c7 1f       	adc	r28, r23
    50be:	d1 1d       	adc	r29, r1
    50c0:	88 0f       	add	r24, r24
    50c2:	99 1f       	adc	r25, r25
    50c4:	66 1f       	adc	r22, r22
    50c6:	77 1f       	adc	r23, r23
    50c8:	06 94       	lsr	r0
    50ca:	a1 f7       	brne	.-24     	; 0x50b4 <__ftoa_engine+0xac>
    50cc:	05 90       	lpm	r0, Z+
    50ce:	07 94       	ror	r0
    50d0:	20 f4       	brcc	.+8      	; 0x50da <__ftoa_engine+0xd2>
    50d2:	49 0f       	add	r20, r25
    50d4:	56 1f       	adc	r21, r22
    50d6:	c7 1f       	adc	r28, r23
    50d8:	d8 1f       	adc	r29, r24
    50da:	99 0f       	add	r25, r25
    50dc:	66 1f       	adc	r22, r22
    50de:	77 1f       	adc	r23, r23
    50e0:	88 1f       	adc	r24, r24
    50e2:	06 94       	lsr	r0
    50e4:	a9 f7       	brne	.-22     	; 0x50d0 <__ftoa_engine+0xc8>
    50e6:	84 91       	lpm	r24, Z+
    50e8:	10 95       	com	r17
    50ea:	17 70       	andi	r17, 0x07	; 7
    50ec:	41 f0       	breq	.+16     	; 0x50fe <__ftoa_engine+0xf6>
    50ee:	d6 95       	lsr	r29
    50f0:	c7 95       	ror	r28
    50f2:	57 95       	ror	r21
    50f4:	47 95       	ror	r20
    50f6:	f7 94       	ror	r15
    50f8:	e7 94       	ror	r14
    50fa:	1a 95       	dec	r17
    50fc:	c1 f7       	brne	.-16     	; 0x50ee <__ftoa_engine+0xe6>
    50fe:	e0 ef       	ldi	r30, 0xF0	; 240
    5100:	f1 e0       	ldi	r31, 0x01	; 1
    5102:	68 94       	set
    5104:	15 90       	lpm	r1, Z+
    5106:	15 91       	lpm	r17, Z+
    5108:	35 91       	lpm	r19, Z+
    510a:	65 91       	lpm	r22, Z+
    510c:	95 91       	lpm	r25, Z+
    510e:	05 90       	lpm	r0, Z+
    5110:	7f e2       	ldi	r23, 0x2F	; 47
    5112:	73 95       	inc	r23
    5114:	e1 18       	sub	r14, r1
    5116:	f1 0a       	sbc	r15, r17
    5118:	43 0b       	sbc	r20, r19
    511a:	56 0b       	sbc	r21, r22
    511c:	c9 0b       	sbc	r28, r25
    511e:	d0 09       	sbc	r29, r0
    5120:	c0 f7       	brcc	.-16     	; 0x5112 <__ftoa_engine+0x10a>
    5122:	e1 0c       	add	r14, r1
    5124:	f1 1e       	adc	r15, r17
    5126:	43 1f       	adc	r20, r19
    5128:	56 1f       	adc	r21, r22
    512a:	c9 1f       	adc	r28, r25
    512c:	d0 1d       	adc	r29, r0
    512e:	7e f4       	brtc	.+30     	; 0x514e <__ftoa_engine+0x146>
    5130:	70 33       	cpi	r23, 0x30	; 48
    5132:	11 f4       	brne	.+4      	; 0x5138 <__ftoa_engine+0x130>
    5134:	8a 95       	dec	r24
    5136:	e6 cf       	rjmp	.-52     	; 0x5104 <__ftoa_engine+0xfc>
    5138:	e8 94       	clt
    513a:	01 50       	subi	r16, 0x01	; 1
    513c:	30 f0       	brcs	.+12     	; 0x514a <__ftoa_engine+0x142>
    513e:	08 0f       	add	r16, r24
    5140:	0a f4       	brpl	.+2      	; 0x5144 <__ftoa_engine+0x13c>
    5142:	00 27       	eor	r16, r16
    5144:	02 17       	cp	r16, r18
    5146:	08 f4       	brcc	.+2      	; 0x514a <__ftoa_engine+0x142>
    5148:	20 2f       	mov	r18, r16
    514a:	23 95       	inc	r18
    514c:	02 2f       	mov	r16, r18
    514e:	7a 33       	cpi	r23, 0x3A	; 58
    5150:	28 f0       	brcs	.+10     	; 0x515c <__ftoa_engine+0x154>
    5152:	79 e3       	ldi	r23, 0x39	; 57
    5154:	7d 93       	st	X+, r23
    5156:	2a 95       	dec	r18
    5158:	e9 f7       	brne	.-6      	; 0x5154 <__ftoa_engine+0x14c>
    515a:	10 c0       	rjmp	.+32     	; 0x517c <__ftoa_engine+0x174>
    515c:	7d 93       	st	X+, r23
    515e:	2a 95       	dec	r18
    5160:	89 f6       	brne	.-94     	; 0x5104 <__ftoa_engine+0xfc>
    5162:	06 94       	lsr	r0
    5164:	97 95       	ror	r25
    5166:	67 95       	ror	r22
    5168:	37 95       	ror	r19
    516a:	17 95       	ror	r17
    516c:	17 94       	ror	r1
    516e:	e1 18       	sub	r14, r1
    5170:	f1 0a       	sbc	r15, r17
    5172:	43 0b       	sbc	r20, r19
    5174:	56 0b       	sbc	r21, r22
    5176:	c9 0b       	sbc	r28, r25
    5178:	d0 09       	sbc	r29, r0
    517a:	98 f0       	brcs	.+38     	; 0x51a2 <__ftoa_engine+0x19a>
    517c:	23 95       	inc	r18
    517e:	7e 91       	ld	r23, -X
    5180:	73 95       	inc	r23
    5182:	7a 33       	cpi	r23, 0x3A	; 58
    5184:	08 f0       	brcs	.+2      	; 0x5188 <__ftoa_engine+0x180>
    5186:	70 e3       	ldi	r23, 0x30	; 48
    5188:	7c 93       	st	X, r23
    518a:	20 13       	cpse	r18, r16
    518c:	b8 f7       	brcc	.-18     	; 0x517c <__ftoa_engine+0x174>
    518e:	7e 91       	ld	r23, -X
    5190:	70 61       	ori	r23, 0x10	; 16
    5192:	7d 93       	st	X+, r23
    5194:	30 f0       	brcs	.+12     	; 0x51a2 <__ftoa_engine+0x19a>
    5196:	83 95       	inc	r24
    5198:	71 e3       	ldi	r23, 0x31	; 49
    519a:	7d 93       	st	X+, r23
    519c:	70 e3       	ldi	r23, 0x30	; 48
    519e:	2a 95       	dec	r18
    51a0:	e1 f7       	brne	.-8      	; 0x519a <__ftoa_engine+0x192>
    51a2:	11 24       	eor	r1, r1
    51a4:	ef 90       	pop	r14
    51a6:	ff 90       	pop	r15
    51a8:	0f 91       	pop	r16
    51aa:	1f 91       	pop	r17
    51ac:	cf 91       	pop	r28
    51ae:	df 91       	pop	r29
    51b0:	99 27       	eor	r25, r25
    51b2:	87 fd       	sbrc	r24, 7
    51b4:	90 95       	com	r25
    51b6:	08 95       	ret

000051b8 <strnlen_P>:
    51b8:	fc 01       	movw	r30, r24
    51ba:	05 90       	lpm	r0, Z+
    51bc:	61 50       	subi	r22, 0x01	; 1
    51be:	70 40       	sbci	r23, 0x00	; 0
    51c0:	01 10       	cpse	r0, r1
    51c2:	d8 f7       	brcc	.-10     	; 0x51ba <strnlen_P+0x2>
    51c4:	80 95       	com	r24
    51c6:	90 95       	com	r25
    51c8:	8e 0f       	add	r24, r30
    51ca:	9f 1f       	adc	r25, r31
    51cc:	08 95       	ret

000051ce <memcpy>:
    51ce:	fb 01       	movw	r30, r22
    51d0:	dc 01       	movw	r26, r24
    51d2:	02 c0       	rjmp	.+4      	; 0x51d8 <memcpy+0xa>
    51d4:	01 90       	ld	r0, Z+
    51d6:	0d 92       	st	X+, r0
    51d8:	41 50       	subi	r20, 0x01	; 1
    51da:	50 40       	sbci	r21, 0x00	; 0
    51dc:	d8 f7       	brcc	.-10     	; 0x51d4 <memcpy+0x6>
    51de:	08 95       	ret

000051e0 <memset>:
    51e0:	dc 01       	movw	r26, r24
    51e2:	01 c0       	rjmp	.+2      	; 0x51e6 <memset+0x6>
    51e4:	6d 93       	st	X+, r22
    51e6:	41 50       	subi	r20, 0x01	; 1
    51e8:	50 40       	sbci	r21, 0x00	; 0
    51ea:	e0 f7       	brcc	.-8      	; 0x51e4 <memset+0x4>
    51ec:	08 95       	ret

000051ee <strcpy>:
    51ee:	fb 01       	movw	r30, r22
    51f0:	dc 01       	movw	r26, r24
    51f2:	01 90       	ld	r0, Z+
    51f4:	0d 92       	st	X+, r0
    51f6:	00 20       	and	r0, r0
    51f8:	e1 f7       	brne	.-8      	; 0x51f2 <strcpy+0x4>
    51fa:	08 95       	ret

000051fc <strnlen>:
    51fc:	fc 01       	movw	r30, r24
    51fe:	61 50       	subi	r22, 0x01	; 1
    5200:	70 40       	sbci	r23, 0x00	; 0
    5202:	01 90       	ld	r0, Z+
    5204:	01 10       	cpse	r0, r1
    5206:	d8 f7       	brcc	.-10     	; 0x51fe <strnlen+0x2>
    5208:	80 95       	com	r24
    520a:	90 95       	com	r25
    520c:	8e 0f       	add	r24, r30
    520e:	9f 1f       	adc	r25, r31
    5210:	08 95       	ret

00005212 <fputc>:
    5212:	0f 93       	push	r16
    5214:	1f 93       	push	r17
    5216:	cf 93       	push	r28
    5218:	df 93       	push	r29
    521a:	8c 01       	movw	r16, r24
    521c:	eb 01       	movw	r28, r22
    521e:	8b 81       	ldd	r24, Y+3	; 0x03
    5220:	81 fd       	sbrc	r24, 1
    5222:	03 c0       	rjmp	.+6      	; 0x522a <fputc+0x18>
    5224:	0f ef       	ldi	r16, 0xFF	; 255
    5226:	1f ef       	ldi	r17, 0xFF	; 255
    5228:	1a c0       	rjmp	.+52     	; 0x525e <fputc+0x4c>
    522a:	82 ff       	sbrs	r24, 2
    522c:	0d c0       	rjmp	.+26     	; 0x5248 <fputc+0x36>
    522e:	2e 81       	ldd	r18, Y+6	; 0x06
    5230:	3f 81       	ldd	r19, Y+7	; 0x07
    5232:	8c 81       	ldd	r24, Y+4	; 0x04
    5234:	9d 81       	ldd	r25, Y+5	; 0x05
    5236:	28 17       	cp	r18, r24
    5238:	39 07       	cpc	r19, r25
    523a:	64 f4       	brge	.+24     	; 0x5254 <fputc+0x42>
    523c:	e8 81       	ld	r30, Y
    523e:	f9 81       	ldd	r31, Y+1	; 0x01
    5240:	01 93       	st	Z+, r16
    5242:	e8 83       	st	Y, r30
    5244:	f9 83       	std	Y+1, r31	; 0x01
    5246:	06 c0       	rjmp	.+12     	; 0x5254 <fputc+0x42>
    5248:	e8 85       	ldd	r30, Y+8	; 0x08
    524a:	f9 85       	ldd	r31, Y+9	; 0x09
    524c:	80 2f       	mov	r24, r16
    524e:	19 95       	eicall
    5250:	89 2b       	or	r24, r25
    5252:	41 f7       	brne	.-48     	; 0x5224 <fputc+0x12>
    5254:	8e 81       	ldd	r24, Y+6	; 0x06
    5256:	9f 81       	ldd	r25, Y+7	; 0x07
    5258:	01 96       	adiw	r24, 0x01	; 1
    525a:	8e 83       	std	Y+6, r24	; 0x06
    525c:	9f 83       	std	Y+7, r25	; 0x07
    525e:	c8 01       	movw	r24, r16
    5260:	df 91       	pop	r29
    5262:	cf 91       	pop	r28
    5264:	1f 91       	pop	r17
    5266:	0f 91       	pop	r16
    5268:	08 95       	ret

0000526a <printf>:
    526a:	cf 93       	push	r28
    526c:	df 93       	push	r29
    526e:	1f 92       	push	r1
    5270:	1f 92       	push	r1
    5272:	cd b7       	in	r28, 0x3d	; 61
    5274:	de b7       	in	r29, 0x3e	; 62
    5276:	fe 01       	movw	r30, r28
    5278:	38 96       	adiw	r30, 0x08	; 8
    527a:	61 91       	ld	r22, Z+
    527c:	71 91       	ld	r23, Z+
    527e:	e9 83       	std	Y+1, r30	; 0x01
    5280:	fa 83       	std	Y+2, r31	; 0x02
    5282:	af 01       	movw	r20, r30
    5284:	80 91 e4 26 	lds	r24, 0x26E4
    5288:	90 91 e5 26 	lds	r25, 0x26E5
    528c:	0e 94 d0 1f 	call	0x3fa0	; 0x3fa0 <vfprintf>
    5290:	0f 90       	pop	r0
    5292:	0f 90       	pop	r0
    5294:	df 91       	pop	r29
    5296:	cf 91       	pop	r28
    5298:	08 95       	ret

0000529a <snprintf>:
    529a:	0f 93       	push	r16
    529c:	1f 93       	push	r17
    529e:	cf 93       	push	r28
    52a0:	df 93       	push	r29
    52a2:	cd b7       	in	r28, 0x3d	; 61
    52a4:	de b7       	in	r29, 0x3e	; 62
    52a6:	60 97       	sbiw	r28, 0x10	; 16
    52a8:	cd bf       	out	0x3d, r28	; 61
    52aa:	de bf       	out	0x3e, r29	; 62
    52ac:	08 8d       	ldd	r16, Y+24	; 0x18
    52ae:	19 8d       	ldd	r17, Y+25	; 0x19
    52b0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    52b2:	9b 8d       	ldd	r25, Y+27	; 0x1b
    52b4:	26 e0       	ldi	r18, 0x06	; 6
    52b6:	2c 83       	std	Y+4, r18	; 0x04
    52b8:	09 83       	std	Y+1, r16	; 0x01
    52ba:	1a 83       	std	Y+2, r17	; 0x02
    52bc:	97 ff       	sbrs	r25, 7
    52be:	02 c0       	rjmp	.+4      	; 0x52c4 <snprintf+0x2a>
    52c0:	80 e0       	ldi	r24, 0x00	; 0
    52c2:	90 e8       	ldi	r25, 0x80	; 128
    52c4:	01 97       	sbiw	r24, 0x01	; 1
    52c6:	8d 83       	std	Y+5, r24	; 0x05
    52c8:	9e 83       	std	Y+6, r25	; 0x06
    52ca:	ae 01       	movw	r20, r28
    52cc:	42 5e       	subi	r20, 0xE2	; 226
    52ce:	5f 4f       	sbci	r21, 0xFF	; 255
    52d0:	4f 87       	std	Y+15, r20	; 0x0f
    52d2:	58 8b       	std	Y+16, r21	; 0x10
    52d4:	6c 8d       	ldd	r22, Y+28	; 0x1c
    52d6:	7d 8d       	ldd	r23, Y+29	; 0x1d
    52d8:	ce 01       	movw	r24, r28
    52da:	01 96       	adiw	r24, 0x01	; 1
    52dc:	0e 94 d0 1f 	call	0x3fa0	; 0x3fa0 <vfprintf>
    52e0:	4d 81       	ldd	r20, Y+5	; 0x05
    52e2:	5e 81       	ldd	r21, Y+6	; 0x06
    52e4:	57 fd       	sbrc	r21, 7
    52e6:	0a c0       	rjmp	.+20     	; 0x52fc <snprintf+0x62>
    52e8:	2f 81       	ldd	r18, Y+7	; 0x07
    52ea:	38 85       	ldd	r19, Y+8	; 0x08
    52ec:	42 17       	cp	r20, r18
    52ee:	53 07       	cpc	r21, r19
    52f0:	0c f4       	brge	.+2      	; 0x52f4 <snprintf+0x5a>
    52f2:	9a 01       	movw	r18, r20
    52f4:	f8 01       	movw	r30, r16
    52f6:	e2 0f       	add	r30, r18
    52f8:	f3 1f       	adc	r31, r19
    52fa:	10 82       	st	Z, r1
    52fc:	60 96       	adiw	r28, 0x10	; 16
    52fe:	cd bf       	out	0x3d, r28	; 61
    5300:	de bf       	out	0x3e, r29	; 62
    5302:	df 91       	pop	r29
    5304:	cf 91       	pop	r28
    5306:	1f 91       	pop	r17
    5308:	0f 91       	pop	r16
    530a:	08 95       	ret

0000530c <__ultoa_invert>:
    530c:	fa 01       	movw	r30, r20
    530e:	aa 27       	eor	r26, r26
    5310:	28 30       	cpi	r18, 0x08	; 8
    5312:	51 f1       	breq	.+84     	; 0x5368 <__ultoa_invert+0x5c>
    5314:	20 31       	cpi	r18, 0x10	; 16
    5316:	81 f1       	breq	.+96     	; 0x5378 <__ultoa_invert+0x6c>
    5318:	e8 94       	clt
    531a:	6f 93       	push	r22
    531c:	6e 7f       	andi	r22, 0xFE	; 254
    531e:	6e 5f       	subi	r22, 0xFE	; 254
    5320:	7f 4f       	sbci	r23, 0xFF	; 255
    5322:	8f 4f       	sbci	r24, 0xFF	; 255
    5324:	9f 4f       	sbci	r25, 0xFF	; 255
    5326:	af 4f       	sbci	r26, 0xFF	; 255
    5328:	b1 e0       	ldi	r27, 0x01	; 1
    532a:	3e d0       	rcall	.+124    	; 0x53a8 <__ultoa_invert+0x9c>
    532c:	b4 e0       	ldi	r27, 0x04	; 4
    532e:	3c d0       	rcall	.+120    	; 0x53a8 <__ultoa_invert+0x9c>
    5330:	67 0f       	add	r22, r23
    5332:	78 1f       	adc	r23, r24
    5334:	89 1f       	adc	r24, r25
    5336:	9a 1f       	adc	r25, r26
    5338:	a1 1d       	adc	r26, r1
    533a:	68 0f       	add	r22, r24
    533c:	79 1f       	adc	r23, r25
    533e:	8a 1f       	adc	r24, r26
    5340:	91 1d       	adc	r25, r1
    5342:	a1 1d       	adc	r26, r1
    5344:	6a 0f       	add	r22, r26
    5346:	71 1d       	adc	r23, r1
    5348:	81 1d       	adc	r24, r1
    534a:	91 1d       	adc	r25, r1
    534c:	a1 1d       	adc	r26, r1
    534e:	20 d0       	rcall	.+64     	; 0x5390 <__ultoa_invert+0x84>
    5350:	09 f4       	brne	.+2      	; 0x5354 <__ultoa_invert+0x48>
    5352:	68 94       	set
    5354:	3f 91       	pop	r19
    5356:	2a e0       	ldi	r18, 0x0A	; 10
    5358:	26 9f       	mul	r18, r22
    535a:	11 24       	eor	r1, r1
    535c:	30 19       	sub	r19, r0
    535e:	30 5d       	subi	r19, 0xD0	; 208
    5360:	31 93       	st	Z+, r19
    5362:	de f6       	brtc	.-74     	; 0x531a <__ultoa_invert+0xe>
    5364:	cf 01       	movw	r24, r30
    5366:	08 95       	ret
    5368:	46 2f       	mov	r20, r22
    536a:	47 70       	andi	r20, 0x07	; 7
    536c:	40 5d       	subi	r20, 0xD0	; 208
    536e:	41 93       	st	Z+, r20
    5370:	b3 e0       	ldi	r27, 0x03	; 3
    5372:	0f d0       	rcall	.+30     	; 0x5392 <__ultoa_invert+0x86>
    5374:	c9 f7       	brne	.-14     	; 0x5368 <__ultoa_invert+0x5c>
    5376:	f6 cf       	rjmp	.-20     	; 0x5364 <__ultoa_invert+0x58>
    5378:	46 2f       	mov	r20, r22
    537a:	4f 70       	andi	r20, 0x0F	; 15
    537c:	40 5d       	subi	r20, 0xD0	; 208
    537e:	4a 33       	cpi	r20, 0x3A	; 58
    5380:	18 f0       	brcs	.+6      	; 0x5388 <__ultoa_invert+0x7c>
    5382:	49 5d       	subi	r20, 0xD9	; 217
    5384:	31 fd       	sbrc	r19, 1
    5386:	40 52       	subi	r20, 0x20	; 32
    5388:	41 93       	st	Z+, r20
    538a:	02 d0       	rcall	.+4      	; 0x5390 <__ultoa_invert+0x84>
    538c:	a9 f7       	brne	.-22     	; 0x5378 <__ultoa_invert+0x6c>
    538e:	ea cf       	rjmp	.-44     	; 0x5364 <__ultoa_invert+0x58>
    5390:	b4 e0       	ldi	r27, 0x04	; 4
    5392:	a6 95       	lsr	r26
    5394:	97 95       	ror	r25
    5396:	87 95       	ror	r24
    5398:	77 95       	ror	r23
    539a:	67 95       	ror	r22
    539c:	ba 95       	dec	r27
    539e:	c9 f7       	brne	.-14     	; 0x5392 <__ultoa_invert+0x86>
    53a0:	00 97       	sbiw	r24, 0x00	; 0
    53a2:	61 05       	cpc	r22, r1
    53a4:	71 05       	cpc	r23, r1
    53a6:	08 95       	ret
    53a8:	9b 01       	movw	r18, r22
    53aa:	ac 01       	movw	r20, r24
    53ac:	0a 2e       	mov	r0, r26
    53ae:	06 94       	lsr	r0
    53b0:	57 95       	ror	r21
    53b2:	47 95       	ror	r20
    53b4:	37 95       	ror	r19
    53b6:	27 95       	ror	r18
    53b8:	ba 95       	dec	r27
    53ba:	c9 f7       	brne	.-14     	; 0x53ae <__ultoa_invert+0xa2>
    53bc:	62 0f       	add	r22, r18
    53be:	73 1f       	adc	r23, r19
    53c0:	84 1f       	adc	r24, r20
    53c2:	95 1f       	adc	r25, r21
    53c4:	a0 1d       	adc	r26, r0
    53c6:	08 95       	ret

000053c8 <__mulshisi3>:
    53c8:	b7 ff       	sbrs	r27, 7
    53ca:	0c 94 d0 25 	jmp	0x4ba0	; 0x4ba0 <__muluhisi3>

000053ce <__mulohisi3>:
    53ce:	0e 94 d0 25 	call	0x4ba0	; 0x4ba0 <__muluhisi3>
    53d2:	82 1b       	sub	r24, r18
    53d4:	93 0b       	sbc	r25, r19
    53d6:	08 95       	ret

000053d8 <__divmodsi4>:
    53d8:	05 2e       	mov	r0, r21
    53da:	97 fb       	bst	r25, 7
    53dc:	16 f4       	brtc	.+4      	; 0x53e2 <__divmodsi4+0xa>
    53de:	00 94       	com	r0
    53e0:	07 d0       	rcall	.+14     	; 0x53f0 <__divmodsi4_neg1>
    53e2:	57 fd       	sbrc	r21, 7
    53e4:	0d d0       	rcall	.+26     	; 0x5400 <__divmodsi4_neg2>
    53e6:	0e 94 0f 26 	call	0x4c1e	; 0x4c1e <__udivmodsi4>
    53ea:	07 fc       	sbrc	r0, 7
    53ec:	09 d0       	rcall	.+18     	; 0x5400 <__divmodsi4_neg2>
    53ee:	7e f4       	brtc	.+30     	; 0x540e <__divmodsi4_exit>

000053f0 <__divmodsi4_neg1>:
    53f0:	90 95       	com	r25
    53f2:	80 95       	com	r24
    53f4:	70 95       	com	r23
    53f6:	61 95       	neg	r22
    53f8:	7f 4f       	sbci	r23, 0xFF	; 255
    53fa:	8f 4f       	sbci	r24, 0xFF	; 255
    53fc:	9f 4f       	sbci	r25, 0xFF	; 255
    53fe:	08 95       	ret

00005400 <__divmodsi4_neg2>:
    5400:	50 95       	com	r21
    5402:	40 95       	com	r20
    5404:	30 95       	com	r19
    5406:	21 95       	neg	r18
    5408:	3f 4f       	sbci	r19, 0xFF	; 255
    540a:	4f 4f       	sbci	r20, 0xFF	; 255
    540c:	5f 4f       	sbci	r21, 0xFF	; 255

0000540e <__divmodsi4_exit>:
    540e:	08 95       	ret

00005410 <_exit>:
    5410:	f8 94       	cli

00005412 <__stop_program>:
    5412:	ff cf       	rjmp	.-2      	; 0x5412 <__stop_program>
