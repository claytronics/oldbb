
arch-blocks/test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000532e  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000122  00802000  0000532e  000053e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000005c2  00802122  00802122  00005504  2**0
                  ALLOC
  3 .eeprom       00000004  00810000  00810000  00005504  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00005a30  00000000  00000000  00005508  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      0000122d  00000000  00000000  0000af38  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000022  00000000  00000000  0000c165  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000460  00000000  00000000  0000c187  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0000cc9d  00000000  00000000  0000c5e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00003a6a  00000000  00000000  00019284  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000033d2  00000000  00000000  0001ccee  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00001d48  00000000  00000000  000200c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000031ca  00000000  00000000  00021e08  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00005f91  00000000  00000000  00024fd2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000178  00000000  00000000  0002af63  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <__ctors_end>
       4:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
       8:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
       c:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      10:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      14:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      18:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      1c:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      20:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      24:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      28:	0c 94 33 1d 	jmp	0x3a66	; 0x3a66 <__vector_10>
      2c:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      30:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      34:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      38:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      3c:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      40:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      44:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      48:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      4c:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      50:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      54:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      58:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      5c:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      60:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      64:	0c 94 35 1c 	jmp	0x386a	; 0x386a <__vector_25>
      68:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      6c:	0c 94 61 1c 	jmp	0x38c2	; 0x38c2 <__vector_27>
      70:	0c 94 21 1b 	jmp	0x3642	; 0x3642 <__vector_28>
      74:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      78:	0c 94 4d 1b 	jmp	0x369a	; 0x369a <__vector_30>
      7c:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      80:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      84:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      88:	0c 94 86 15 	jmp	0x2b0c	; 0x2b0c <__vector_34>
      8c:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      90:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      94:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      98:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      9c:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      a0:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      a4:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      a8:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      ac:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      b0:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      b4:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      b8:	0c 94 c5 15 	jmp	0x2b8a	; 0x2b8a <__vector_46>
      bc:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      c0:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      c4:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      c8:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      cc:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      d0:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      d4:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      d8:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      dc:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      e0:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      e4:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      e8:	0c 94 d9 1b 	jmp	0x37b2	; 0x37b2 <__vector_58>
      ec:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      f0:	0c 94 05 1c 	jmp	0x380a	; 0x380a <__vector_60>
      f4:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      f8:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
      fc:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     100:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     104:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     108:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     10c:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     110:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     114:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     118:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     11c:	0c 94 7a 1d 	jmp	0x3af4	; 0x3af4 <__vector_71>
     120:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     124:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     128:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     12c:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     130:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     134:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     138:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     13c:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     140:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     144:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     148:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     14c:	0c 94 56 1e 	jmp	0x3cac	; 0x3cac <__vector_83>
     150:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     154:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     158:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     15c:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     160:	0c 94 91 1c 	jmp	0x3922	; 0x3922 <__vector_88>
     164:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     168:	0c 94 bd 1c 	jmp	0x397a	; 0x397a <__vector_90>
     16c:	0c 94 c5 1a 	jmp	0x358a	; 0x358a <__vector_91>
     170:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     174:	0c 94 f1 1a 	jmp	0x35e2	; 0x35e2 <__vector_93>
     178:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     17c:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     180:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     184:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     188:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     18c:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     190:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     194:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     198:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     19c:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     1a0:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     1a4:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     1a8:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     1ac:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     1b0:	0c 94 24 16 	jmp	0x2c48	; 0x2c48 <__vector_108>
     1b4:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     1b8:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     1bc:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     1c0:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     1c4:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     1c8:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     1cc:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     1d0:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     1d4:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     1d8:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     1dc:	0c 94 7d 1b 	jmp	0x36fa	; 0x36fa <__vector_119>
     1e0:	0c 94 96 01 	jmp	0x32c	; 0x32c <__bad_interrupt>
     1e4:	0c 94 a9 1b 	jmp	0x3752	; 0x3752 <__vector_121>

000001e8 <__c.1975>:
     1e8:	6e 61 6e 00                                         nan.

000001ec <__c.1973>:
     1ec:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     1fc:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     20c:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     21c:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     22c:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     23c:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     24c:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     25c:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     26c:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     27c:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     28c:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     29c:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     2ac:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     2bc:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     2cc:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     2dc:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000002ea <__ctors_end>:
     2ea:	11 24       	eor	r1, r1
     2ec:	1f be       	out	0x3f, r1	; 63
     2ee:	cf ef       	ldi	r28, 0xFF	; 255
     2f0:	df e5       	ldi	r29, 0x5F	; 95
     2f2:	de bf       	out	0x3e, r29	; 62
     2f4:	cd bf       	out	0x3d, r28	; 61
     2f6:	00 e0       	ldi	r16, 0x00	; 0
     2f8:	0c bf       	out	0x3c, r16	; 60

000002fa <__do_copy_data>:
     2fa:	11 e2       	ldi	r17, 0x21	; 33
     2fc:	a0 e0       	ldi	r26, 0x00	; 0
     2fe:	b0 e2       	ldi	r27, 0x20	; 32
     300:	ee e2       	ldi	r30, 0x2E	; 46
     302:	f3 e5       	ldi	r31, 0x53	; 83
     304:	00 e0       	ldi	r16, 0x00	; 0
     306:	0b bf       	out	0x3b, r16	; 59
     308:	02 c0       	rjmp	.+4      	; 0x30e <__do_copy_data+0x14>
     30a:	07 90       	elpm	r0, Z+
     30c:	0d 92       	st	X+, r0
     30e:	a2 32       	cpi	r26, 0x22	; 34
     310:	b1 07       	cpc	r27, r17
     312:	d9 f7       	brne	.-10     	; 0x30a <__do_copy_data+0x10>

00000314 <__do_clear_bss>:
     314:	16 e2       	ldi	r17, 0x26	; 38
     316:	a2 e2       	ldi	r26, 0x22	; 34
     318:	b1 e2       	ldi	r27, 0x21	; 33
     31a:	01 c0       	rjmp	.+2      	; 0x31e <.do_clear_bss_start>

0000031c <.do_clear_bss_loop>:
     31c:	1d 92       	st	X+, r1

0000031e <.do_clear_bss_start>:
     31e:	a4 3e       	cpi	r26, 0xE4	; 228
     320:	b1 07       	cpc	r27, r17
     322:	e1 f7       	brne	.-8      	; 0x31c <.do_clear_bss_loop>
     324:	0e 94 9b 23 	call	0x4736	; 0x4736 <main>
     328:	0c 94 95 29 	jmp	0x532a	; 0x532a <_exit>

0000032c <__bad_interrupt>:
     32c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000330 <myMain>:
void getCmdData(void);

void myMain(void)
{

  setColor(WHITE);
     330:	86 e0       	ldi	r24, 0x06	; 6
     332:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <setColor>
     336:	ff cf       	rjmp	.-2      	; 0x336 <myMain+0x6>

00000338 <getCmdData>:
  
  while(1);
}

void getCmdData(void)
{
     338:	cf 93       	push	r28
     33a:	df 93       	push	r29
     33c:	cd b7       	in	r28, 0x3d	; 61
     33e:	de b7       	in	r29, 0x3e	; 62
     340:	c6 59       	subi	r28, 0x96	; 150
     342:	d1 09       	sbc	r29, r1
     344:	cd bf       	out	0x3d, r28	; 61
     346:	de bf       	out	0x3e, r29	; 62
  #ifdef LOG_DEBUG
  char s[150];
  if(thisChunk->data[3] == 1)
     348:	e0 91 4b 21 	lds	r30, 0x214B
     34c:	f0 91 4c 21 	lds	r31, 0x214C
     350:	83 81       	ldd	r24, Z+3	; 0x03
     352:	81 30       	cpi	r24, 0x01	; 1
     354:	19 f4       	brne	.+6      	; 0x35c <getCmdData+0x24>
    setIntensity(0);
     356:	80 e0       	ldi	r24, 0x00	; 0
     358:	0e 94 0e 08 	call	0x101c	; 0x101c <setIntensity>
  switch (thisChunk->data[3]){ //thisChunk->data[3] always = 3, WHY???
     35c:	e0 91 4b 21 	lds	r30, 0x214B
     360:	f0 91 4c 21 	lds	r31, 0x214C
     364:	83 81       	ldd	r24, Z+3	; 0x03
     366:	84 30       	cpi	r24, 0x04	; 4
     368:	51 f1       	breq	.+84     	; 0x3be <getCmdData+0x86>
     36a:	48 f4       	brcc	.+18     	; 0x37e <getCmdData+0x46>
     36c:	81 30       	cpi	r24, 0x01	; 1
     36e:	a9 f0       	breq	.+42     	; 0x39a <getCmdData+0x62>
     370:	70 f0       	brcs	.+28     	; 0x38e <getCmdData+0x56>
     372:	82 30       	cpi	r24, 0x02	; 2
     374:	c1 f0       	breq	.+48     	; 0x3a6 <getCmdData+0x6e>
     376:	83 30       	cpi	r24, 0x03	; 3
     378:	09 f0       	breq	.+2      	; 0x37c <getCmdData+0x44>
     37a:	3f c0       	rjmp	.+126    	; 0x3fa <getCmdData+0xc2>
     37c:	1a c0       	rjmp	.+52     	; 0x3b2 <getCmdData+0x7a>
     37e:	86 30       	cpi	r24, 0x06	; 6
     380:	51 f1       	breq	.+84     	; 0x3d6 <getCmdData+0x9e>
     382:	18 f1       	brcs	.+70     	; 0x3ca <getCmdData+0x92>
     384:	87 30       	cpi	r24, 0x07	; 7
     386:	69 f1       	breq	.+90     	; 0x3e2 <getCmdData+0xaa>
     388:	88 30       	cpi	r24, 0x08	; 8
     38a:	b9 f5       	brne	.+110    	; 0x3fa <getCmdData+0xc2>
     38c:	30 c0       	rjmp	.+96     	; 0x3ee <getCmdData+0xb6>
    case 0:
      setColor(RED);
     38e:	80 e0       	ldi	r24, 0x00	; 0
     390:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <setColor>
      snprintf(s, 150*sizeof(char), "color change to RED");
     394:	63 e2       	ldi	r22, 0x23	; 35
     396:	70 e2       	ldi	r23, 0x20	; 32
     398:	35 c0       	rjmp	.+106    	; 0x404 <getCmdData+0xcc>
    break;
    case 1:
      setColor(ORANGE);
     39a:	81 e0       	ldi	r24, 0x01	; 1
     39c:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <setColor>
      snprintf(s, 150*sizeof(char), "color change to ORANGE");
     3a0:	67 e3       	ldi	r22, 0x37	; 55
     3a2:	70 e2       	ldi	r23, 0x20	; 32
     3a4:	2f c0       	rjmp	.+94     	; 0x404 <getCmdData+0xcc>
    break;
    case 2:
      setColor(YELLOW);
     3a6:	82 e0       	ldi	r24, 0x02	; 2
     3a8:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <setColor>
      snprintf(s, 150*sizeof(char), "color change to YELLOW");
     3ac:	6e e4       	ldi	r22, 0x4E	; 78
     3ae:	70 e2       	ldi	r23, 0x20	; 32
     3b0:	29 c0       	rjmp	.+82     	; 0x404 <getCmdData+0xcc>
    break;
    case 3:
      setColor(GREEN);
     3b2:	83 e0       	ldi	r24, 0x03	; 3
     3b4:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <setColor>
      snprintf(s, 150*sizeof(char), "color change to GREEN");
     3b8:	65 e6       	ldi	r22, 0x65	; 101
     3ba:	70 e2       	ldi	r23, 0x20	; 32
     3bc:	23 c0       	rjmp	.+70     	; 0x404 <getCmdData+0xcc>
    break;
    case 4:
      setColor(AQUA);
     3be:	84 e0       	ldi	r24, 0x04	; 4
     3c0:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <setColor>
      snprintf(s, 150*sizeof(char), "color change to AQUA");
     3c4:	6b e7       	ldi	r22, 0x7B	; 123
     3c6:	70 e2       	ldi	r23, 0x20	; 32
     3c8:	1d c0       	rjmp	.+58     	; 0x404 <getCmdData+0xcc>
    break;
    case 5:
      setColor(BLUE);
     3ca:	85 e0       	ldi	r24, 0x05	; 5
     3cc:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <setColor>
      snprintf(s, 150*sizeof(char), "color change to BLUE");
     3d0:	60 e9       	ldi	r22, 0x90	; 144
     3d2:	70 e2       	ldi	r23, 0x20	; 32
     3d4:	17 c0       	rjmp	.+46     	; 0x404 <getCmdData+0xcc>
    break;
    case 6:
      setColor(WHITE);
     3d6:	86 e0       	ldi	r24, 0x06	; 6
     3d8:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <setColor>
      snprintf(s, 150*sizeof(char), "color change to WHITE");
     3dc:	65 ea       	ldi	r22, 0xA5	; 165
     3de:	70 e2       	ldi	r23, 0x20	; 32
     3e0:	11 c0       	rjmp	.+34     	; 0x404 <getCmdData+0xcc>
    break;
    case 7:
      setColor(PURPLE);
     3e2:	87 e0       	ldi	r24, 0x07	; 7
     3e4:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <setColor>
      snprintf(s, 150*sizeof(char), "color change to PURPLE");
     3e8:	6b eb       	ldi	r22, 0xBB	; 187
     3ea:	70 e2       	ldi	r23, 0x20	; 32
     3ec:	0b c0       	rjmp	.+22     	; 0x404 <getCmdData+0xcc>
    break;
    case 8:
      setColor(PINK);
     3ee:	88 e0       	ldi	r24, 0x08	; 8
     3f0:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <setColor>
      snprintf(s, 150*sizeof(char), "color change to PINK");
     3f4:	62 ed       	ldi	r22, 0xD2	; 210
     3f6:	70 e2       	ldi	r23, 0x20	; 32
     3f8:	05 c0       	rjmp	.+10     	; 0x404 <getCmdData+0xcc>
    break;
    default:
      setIntensity(0);
     3fa:	80 e0       	ldi	r24, 0x00	; 0
     3fc:	0e 94 0e 08 	call	0x101c	; 0x101c <setIntensity>
      snprintf(s, 150*sizeof(char), "UNKNOWN COMMAND");
     400:	67 ee       	ldi	r22, 0xE7	; 231
     402:	70 e2       	ldi	r23, 0x20	; 32
     404:	ce 01       	movw	r24, r28
     406:	01 96       	adiw	r24, 0x01	; 1
     408:	0e 94 a8 28 	call	0x5150	; 0x5150 <strcpy>
    break;
  }      
  s[149] = '\0';
     40c:	ca 56       	subi	r28, 0x6A	; 106
     40e:	df 4f       	sbci	r29, 0xFF	; 255
     410:	18 82       	st	Y, r1
     412:	c6 59       	subi	r28, 0x96	; 150
     414:	d0 40       	sbci	r29, 0x00	; 0
  printDebug(s);
     416:	ce 01       	movw	r24, r28
     418:	01 96       	adiw	r24, 0x01	; 1
     41a:	0e 94 82 0c 	call	0x1904	; 0x1904 <printDebug>
  #endif
}
     41e:	ca 56       	subi	r28, 0x6A	; 106
     420:	df 4f       	sbci	r29, 0xFF	; 255
     422:	cd bf       	out	0x3d, r28	; 61
     424:	de bf       	out	0x3e, r29	; 62
     426:	df 91       	pop	r29
     428:	cf 91       	pop	r28
     42a:	08 95       	ret

0000042c <userRegistration>:

void userRegistration(void)
{
	registerHandler(SYSTEM_MAIN, (GenericHandler)&myMain);
     42c:	68 e9       	ldi	r22, 0x98	; 152
     42e:	71 e0       	ldi	r23, 0x01	; 1
     430:	81 e0       	ldi	r24, 0x01	; 1
     432:	0e 94 b1 07 	call	0xf62	; 0xf62 <registerHandler>
	registerHandler(EVENT_COMMAND_RECEIVED, (GenericHandler)&getCmdData);
     436:	6c e9       	ldi	r22, 0x9C	; 156
     438:	71 e0       	ldi	r23, 0x01	; 1
     43a:	85 e1       	ldi	r24, 0x15	; 21
     43c:	0c 94 b1 07 	jmp	0xf62	; 0xf62 <registerHandler>

00000440 <getAccelData>:

threadvar AccelData _acc;

AccelData getAccelData()
{
	return _acc;
     440:	60 91 42 21 	lds	r22, 0x2142
     444:	70 91 43 21 	lds	r23, 0x2143
}
     448:	80 91 44 21 	lds	r24, 0x2144
     44c:	90 91 45 21 	lds	r25, 0x2145
     450:	08 95       	ret

00000452 <newAccelData>:

int newAccelData()
{
	return newHWAccelData();
     452:	0c 94 89 14 	jmp	0x2912	; 0x2912 <newHWAccelData>

00000456 <updateAccel>:
void updateAccel()
{
	//byte oldstatus = _acc.status & ACC_O_MASK;

	// this changes the _acc datastructure with new data, if available
	updateHWAccel();
     456:	0c 94 97 14 	jmp	0x292e	; 0x292e <updateHWAccel>

0000045a <blockTick>:
//
// Polling-based hack to step through and update block state, as necessary.
//
// Much of this can probably be done via ISRs and other state change triggers and this function eliminated.
void blockTick()
{
     45a:	cf 93       	push	r28
    // and never do anything again
    pauseForever();
  }
#endif
  //int input;
  blockTickRunning = 1;
     45c:	81 e0       	ldi	r24, 0x01	; 1
     45e:	90 e0       	ldi	r25, 0x00	; 0
     460:	80 93 24 21 	sts	0x2124, r24
     464:	90 93 25 21 	sts	0x2125, r25
  
  if(accelReady){
     468:	80 91 22 21 	lds	r24, 0x2122
     46c:	90 91 23 21 	lds	r25, 0x2123
     470:	89 2b       	or	r24, r25
     472:	31 f0       	breq	.+12     	; 0x480 <blockTick+0x26>
    if(newAccelData()){
     474:	0e 94 29 02 	call	0x452	; 0x452 <newAccelData>
     478:	89 2b       	or	r24, r25
     47a:	11 f0       	breq	.+4      	; 0x480 <blockTick+0x26>
      updateAccel();
     47c:	0e 94 2b 02 	call	0x456	; 0x456 <updateAccel>
    }
  }
  
  checkTimeout();
     480:	0e 94 73 09 	call	0x12e6	; 0x12e6 <checkTimeout>
  
  checkTimer();
     484:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <checkTimer>
  
  for(i = 0; i < NUM_PORTS; ++i)
     488:	c0 e0       	ldi	r28, 0x00	; 0
    {
      // read from serial
      processBuffer(i);
     48a:	8c 2f       	mov	r24, r28
     48c:	0e 94 6f 17 	call	0x2ede	; 0x2ede <processBuffer>
      
      // active messaging (handle at most one per port)
      handleOneMessage();
     490:	0e 94 ae 03 	call	0x75c	; 0x75c <handleOneMessage>
      
      //send packets/ACKS
      sendOnSerial(i);
     494:	8c 2f       	mov	r24, r28
     496:	0e 94 aa 18 	call	0x3154	; 0x3154 <sendOnSerial>
  
  checkTimeout();
  
  checkTimer();
  
  for(i = 0; i < NUM_PORTS; ++i)
     49a:	cf 5f       	subi	r28, 0xFF	; 255
     49c:	c6 30       	cpi	r28, 0x06	; 6
     49e:	a9 f7       	brne	.-22     	; 0x48a <blockTick+0x30>
      
      //send packets/ACKS
      sendOnSerial(i);
    }
  
  executeHandlers();	
     4a0:	0e 94 03 07 	call	0xe06	; 0xe06 <executeHandlers>
  blockTickRunning = 0;
     4a4:	10 92 24 21 	sts	0x2124, r1
     4a8:	10 92 25 21 	sts	0x2125, r1
  
}
     4ac:	cf 91       	pop	r28
     4ae:	08 95       	ret

000004b0 <initBlock>:

// Ties all the horrifying subfunctions together into one simple function
void initBlock()
{
	//software initialization
	initHandlers();
     4b0:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <initHandlers>

	//hardware related initialization
	initTime();
     4b4:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <initTime>

	initializeMemory();
     4b8:	0e 94 1e 08 	call	0x103c	; 0x103c <initializeMemory>

	initPorts();
     4bc:	0e 94 23 09 	call	0x1246	; 0x1246 <initPorts>
#ifdef DEBUG
	initDebug();
    	//printf("System Debug Enabled\r\n");
#endif

	initDataLink();	
     4c0:	0e 94 e5 03 	call	0x7ca	; 0x7ca <initDataLink>

   	initHWLED();
     4c4:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <initHWLED>
	//initAudio();

	initSystemMessage();
     4c8:	0e 94 01 09 	call	0x1202	; 0x1202 <initSystemMessage>
	initEnsemble();
     4cc:	0e 94 c5 06 	call	0xd8a	; 0xd8a <initEnsemble>

	initBlockTick();		// HW INITIALIZATION ROUTINE
     4d0:	0e 94 17 16 	call	0x2c2e	; 0x2c2e <initBlockTick>

	initHWAccel();
     4d4:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <initHWAccel>
	accelReady=1;
     4d8:	81 e0       	ldi	r24, 0x01	; 1
     4da:	90 e0       	ldi	r25, 0x00	; 0
     4dc:	80 93 22 21 	sts	0x2122, r24
     4e0:	90 93 23 21 	sts	0x2123, r25

#ifdef CLOCK_SYNC
	initClock();
     4e4:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <initClock>
#endif
#ifdef LOG_DEBUG
	initLogDebug();
     4e8:	0e 94 ed 0b 	call	0x17da	; 0x17da <initLogDebug>
#endif

#ifndef BBSIM
    initHWMic();
     4ec:	0c 94 5b 1d 	jmp	0x3ab6	; 0x3ab6 <initHWMic>

000004f0 <setUID>:
threadextern blockConf conf;

// sets local copy of UID
void setUID(uint16_t newID)
{
    conf.UID = newID;
     4f0:	80 93 0b 22 	sts	0x220B, r24
     4f4:	90 93 0c 22 	sts	0x220C, r25
     4f8:	08 95       	ret

000004fa <setAndStoreUID>:
}

// sets local copy of UID and stores in EEPROM
void setAndStoreUID(uint16_t newID)
{
    conf.UID = newID;
     4fa:	80 93 0b 22 	sts	0x220B, r24
     4fe:	90 93 0c 22 	sts	0x220C, r25
    store(&nv_conf, &conf, sizeof(blockConf));
     502:	44 e0       	ldi	r20, 0x04	; 4
     504:	50 e0       	ldi	r21, 0x00	; 0
     506:	6b e0       	ldi	r22, 0x0B	; 11
     508:	72 e2       	ldi	r23, 0x22	; 34
     50a:	80 e0       	ldi	r24, 0x00	; 0
     50c:	90 e0       	ldi	r25, 0x00	; 0
     50e:	0c 94 ac 19 	jmp	0x3358	; 0x3358 <store>

00000512 <jumpToBootSection>:

// Jumps into the bootloader section.  This function never returns.
// Note that this function only works if the BOOTRST fuse is set to Boot Loader Reset
void jumpToBootSection()
{
	jumpToHWBootSection();
     512:	0c 94 53 16 	jmp	0x2ca6	; 0x2ca6 <jumpToHWBootSection>

00000516 <push>:
#ifndef BBSIM
#include "util/atomic.h"
#endif

void push(byte data, CircBuf * b)
{ 
     516:	fb 01       	movw	r30, r22
  #ifndef BBSIM
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     518:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     51a:	f8 94       	cli
  {
  #endif

    b->buf[b->end++] = data;
     51c:	97 8d       	ldd	r25, Z+31	; 0x1f
     51e:	db 01       	movw	r26, r22
     520:	a9 0f       	add	r26, r25
     522:	b1 1d       	adc	r27, r1
     524:	8c 93       	st	X, r24
     526:	89 2f       	mov	r24, r25
     528:	8f 5f       	subi	r24, 0xFF	; 255

    if(b->end == CIRC_BUF_LEN)
     52a:	8e 31       	cpi	r24, 0x1E	; 30
     52c:	11 f0       	breq	.+4      	; 0x532 <push+0x1c>
  #ifndef BBSIM
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
  {
  #endif

    b->buf[b->end++] = data;
     52e:	87 8f       	std	Z+31, r24	; 0x1f
     530:	01 c0       	rjmp	.+2      	; 0x534 <push+0x1e>

    if(b->end == CIRC_BUF_LEN)
    {
      b->end = 0;
     532:	17 8e       	std	Z+31, r1	; 0x1f
    }

    if(b->end == b->start)
     534:	87 8d       	ldd	r24, Z+31	; 0x1f
     536:	96 8d       	ldd	r25, Z+30	; 0x1e
     538:	89 17       	cp	r24, r25
     53a:	11 f0       	breq	.+4      	; 0x540 <push+0x2a>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     53c:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
     53e:	08 95       	ret
    {
      b->start++;
     540:	8f 5f       	subi	r24, 0xFF	; 255
     542:	86 8f       	std	Z+30, r24	; 0x1e
	
      if(b->start == CIRC_BUF_LEN)
     544:	8e 31       	cpi	r24, 0x1E	; 30
     546:	d1 f7       	brne	.-12     	; 0x53c <push+0x26>
	  {
	    b->start = 0;
     548:	16 8e       	std	Z+30, r1	; 0x1e
     54a:	f8 cf       	rjmp	.-16     	; 0x53c <push+0x26>

0000054c <pop>:
  }
  #endif
}

int pop(CircBuf * b)
{
     54c:	fc 01       	movw	r30, r24
  return data;
}

byte isEmpty(CircBuf * b)
{
  if(b->start == b->end)
     54e:	96 8d       	ldd	r25, Z+30	; 0x1e
     550:	87 8d       	ldd	r24, Z+31	; 0x1f
     552:	98 13       	cpse	r25, r24
     554:	08 c0       	rjmp	.+16     	; 0x566 <pop+0x1a>
     556:	04 c0       	rjmp	.+8      	; 0x560 <pop+0x14>
  #endif
    data = b->buf[b->start++];
  
    if(b->start == CIRC_BUF_LEN)
    {
      b->start = 0;
     558:	16 8e       	std	Z+30, r1	; 0x1e
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     55a:	9f bf       	out	0x3f, r25	; 63
    }
  #ifndef BBSIM
  }
  #endif
  
  return data;
     55c:	30 e0       	ldi	r19, 0x00	; 0
     55e:	0f c0       	rjmp	.+30     	; 0x57e <pop+0x32>
{
  uint8_t data;

  if( isEmpty(b) )
  {
	return -1;
     560:	2f ef       	ldi	r18, 0xFF	; 255
     562:	3f ef       	ldi	r19, 0xFF	; 255
     564:	0c c0       	rjmp	.+24     	; 0x57e <pop+0x32>
  }
  #ifndef BBSIM
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     566:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     568:	f8 94       	cli
  {
  #endif
    data = b->buf[b->start++];
     56a:	86 8d       	ldd	r24, Z+30	; 0x1e
     56c:	df 01       	movw	r26, r30
     56e:	a8 0f       	add	r26, r24
     570:	b1 1d       	adc	r27, r1
     572:	2c 91       	ld	r18, X
     574:	8f 5f       	subi	r24, 0xFF	; 255
  
    if(b->start == CIRC_BUF_LEN)
     576:	8e 31       	cpi	r24, 0x1E	; 30
     578:	79 f3       	breq	.-34     	; 0x558 <pop+0xc>
  }
  #ifndef BBSIM
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
  {
  #endif
    data = b->buf[b->start++];
     57a:	86 8f       	std	Z+30, r24	; 0x1e
     57c:	ee cf       	rjmp	.-36     	; 0x55a <pop+0xe>
  #ifndef BBSIM
  }
  #endif
  
  return data;
}
     57e:	c9 01       	movw	r24, r18
     580:	08 95       	ret

00000582 <isEmpty>:

byte isEmpty(CircBuf * b)
{
     582:	fc 01       	movw	r30, r24
  if(b->start == b->end)
     584:	81 e0       	ldi	r24, 0x01	; 1
     586:	26 8d       	ldd	r18, Z+30	; 0x1e
     588:	97 8d       	ldd	r25, Z+31	; 0x1f
     58a:	29 13       	cpse	r18, r25
     58c:	80 e0       	ldi	r24, 0x00	; 0
  {
    return 1;
  }
  return 0;
}
     58e:	08 95       	ret

00000590 <defaultMsgHandler>:
/////////////////// PROTECTED FUNCTIONS ///////////////////
// default message handler - does nothing
byte defaultMsgHandler(void)
{
    return 1;
}
     590:	81 e0       	ldi	r24, 0x01	; 1
     592:	08 95       	ret

00000594 <reservedSystemHandler>:
//   using 0x0000 as message handler allows blocks 
//   running different programs to communicate at the system level.
byte reservedSystemHandler(void)
{
    // bogus
    if(thisChunk == NULL) {
     594:	e0 91 4b 21 	lds	r30, 0x214B
     598:	f0 91 4c 21 	lds	r31, 0x214C
     59c:	30 97       	sbiw	r30, 0x00	; 0
     59e:	a9 f0       	breq	.+42     	; 0x5ca <reservedSystemHandler+0x36>
        return 0;
    }
  
    // find msg type and check
    switch( thisChunk->data[0] )
     5a0:	80 81       	ld	r24, Z
     5a2:	80 35       	cpi	r24, 0x50	; 80
     5a4:	69 f0       	breq	.+26     	; 0x5c0 <reservedSystemHandler+0x2c>
     5a6:	18 f4       	brcc	.+6      	; 0x5ae <reservedSystemHandler+0x1a>
     5a8:	81 30       	cpi	r24, 0x01	; 1
     5aa:	79 f4       	brne	.+30     	; 0x5ca <reservedSystemHandler+0x36>
     5ac:	06 c0       	rjmp	.+12     	; 0x5ba <reservedSystemHandler+0x26>
     5ae:	80 36       	cpi	r24, 0x60	; 96
     5b0:	51 f0       	breq	.+20     	; 0x5c6 <reservedSystemHandler+0x32>
     5b2:	8f 3f       	cpi	r24, 0xFF	; 255
     5b4:	51 f4       	brne	.+20     	; 0x5ca <reservedSystemHandler+0x36>
	                break;
	            }
	            i++;
	        }
	        // consistent
    	    jumpToBootSection();
     5b6:	0e 94 89 02 	call	0x512	; 0x512 <jumpToBootSection>
        }
        case NEIGHBOR_MSG:
            handleNeighborMessage();
     5ba:	0e 94 3d 05 	call	0xa7a	; 0xa7a <handleNeighborMessage>
            break;
     5be:	05 c0       	rjmp	.+10     	; 0x5ca <reservedSystemHandler+0x36>
#ifdef LOG_DEBUG
        case LOG_MSG:
			handleLogMessage();
     5c0:	0e 94 28 0c 	call	0x1850	; 0x1850 <handleLogMessage>
			break;
     5c4:	02 c0       	rjmp	.+4      	; 0x5ca <reservedSystemHandler+0x36>
#endif
#ifdef CLOCK_SYNC
		case CLOCK_SYNC_MSG:
			handleClockSyncMessage();
     5c6:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <handleClockSyncMessage>
        default:
            break;
    }
  
    return 0;
}
     5ca:	80 e0       	ldi	r24, 0x00	; 0
     5cc:	08 95       	ret

000005ce <removeFromSq>:
// inputs:  port
// output:  1-success, 0-failure
byte removeFromSq(PRef p, byte response)
{
    // empty or bad
    if( (p >= NUM_PORTS) || (port[p].sq.head == NULL) ) 
     5ce:	86 30       	cpi	r24, 0x06	; 6
     5d0:	08 f0       	brcs	.+2      	; 0x5d4 <removeFromSq+0x6>
     5d2:	3f c0       	rjmp	.+126    	; 0x652 <removeFromSq+0x84>
     5d4:	98 e5       	ldi	r25, 0x58	; 88
     5d6:	89 9f       	mul	r24, r25
     5d8:	f0 01       	movw	r30, r0
     5da:	11 24       	eor	r1, r1
     5dc:	e0 5b       	subi	r30, 0xB0	; 176
     5de:	fb 4d       	sbci	r31, 0xDB	; 219
     5e0:	87 85       	ldd	r24, Z+15	; 0x0f
     5e2:	90 89       	ldd	r25, Z+16	; 0x10
     5e4:	89 2b       	or	r24, r25
     5e6:	a9 f1       	breq	.+106    	; 0x652 <removeFromSq+0x84>
    {
        return 0;
    }

    BB_LOCK(SQ_LOCK)
     5e8:	2f b7       	in	r18, 0x3f	; 63
     5ea:	f8 94       	cli

    // get the first Chunk
    thisChunk = port[p].sq.head;
     5ec:	a7 85       	ldd	r26, Z+15	; 0x0f
     5ee:	b0 89       	ldd	r27, Z+16	; 0x10

    // move the head of the queue
    port[p].sq.head = thisChunk->next;
     5f0:	52 96       	adiw	r26, 0x12	; 18
     5f2:	8d 91       	ld	r24, X+
     5f4:	9c 91       	ld	r25, X
     5f6:	53 97       	sbiw	r26, 0x13	; 19
     5f8:	87 87       	std	Z+15, r24	; 0x0f
     5fa:	90 8b       	std	Z+16, r25	; 0x10

    // tail was pointing to head, remove tail as well
    if( port[p].sq.head == NULL ) 
     5fc:	89 2b       	or	r24, r25
     5fe:	a1 f0       	breq	.+40     	; 0x628 <removeFromSq+0x5a>
     600:	a0 93 4b 21 	sts	0x214B, r26
     604:	b0 93 4c 21 	sts	0x214C, r27
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     608:	2f bf       	out	0x3f, r18	; 63
    // otherwise, leave it to what it was pointing to

    BB_UNLOCK(SQ_LOCK)

    // remove thisChunk's references to queue
    thisChunk->next = NULL;
     60a:	a0 91 4b 21 	lds	r26, 0x214B
     60e:	b0 91 4c 21 	lds	r27, 0x214C
     612:	52 96       	adiw	r26, 0x12	; 18
     614:	1d 92       	st	X+, r1
     616:	1c 92       	st	X, r1
     618:	53 97       	sbiw	r26, 0x13	; 19

    if(thisChunk->callback != NULL)
     61a:	56 96       	adiw	r26, 0x16	; 22
     61c:	ed 91       	ld	r30, X+
     61e:	fc 91       	ld	r31, X
     620:	57 97       	sbiw	r26, 0x17	; 23
     622:	30 97       	sbiw	r30, 0x00	; 0
     624:	39 f4       	brne	.+14     	; 0x634 <removeFromSq+0x66>
     626:	0f c0       	rjmp	.+30     	; 0x646 <removeFromSq+0x78>
    port[p].sq.head = thisChunk->next;

    // tail was pointing to head, remove tail as well
    if( port[p].sq.head == NULL ) 
    {
        port[p].sq.tail   = NULL;
     628:	11 8a       	std	Z+17, r1	; 0x11
     62a:	12 8a       	std	Z+18, r1	; 0x12
        port[p].sq.flags &= ~CHUNK_READY;
     62c:	86 85       	ldd	r24, Z+14	; 0x0e
     62e:	8f 77       	andi	r24, 0x7F	; 127
     630:	86 87       	std	Z+14, r24	; 0x0e
     632:	e6 cf       	rjmp	.-52     	; 0x600 <removeFromSq+0x32>
    thisChunk->next = NULL;

    if(thisChunk->callback != NULL)
    {
        // set response type for callback
        setChunkResponse(thisChunk, response);
     634:	68 71       	andi	r22, 0x18	; 24
     636:	51 96       	adiw	r26, 0x11	; 17
     638:	8c 91       	ld	r24, X
     63a:	51 97       	sbiw	r26, 0x11	; 17
     63c:	87 7e       	andi	r24, 0xE7	; 231
     63e:	68 2b       	or	r22, r24
     640:	51 96       	adiw	r26, 0x11	; 17
     642:	6c 93       	st	X, r22
	
        // execute callback to clear memory and other user actions
        (thisChunk->callback)();
     644:	19 95       	eicall
    }

    // we assume that the callback has freed memory
    thisChunk = NULL;
     646:	10 92 4b 21 	sts	0x214B, r1
     64a:	10 92 4c 21 	sts	0x214C, r1
    return 1;
     64e:	81 e0       	ldi	r24, 0x01	; 1
     650:	08 95       	ret
byte removeFromSq(PRef p, byte response)
{
    // empty or bad
    if( (p >= NUM_PORTS) || (port[p].sq.head == NULL) ) 
    {
        return 0;
     652:	80 e0       	ldi	r24, 0x00	; 0
    }

    // we assume that the callback has freed memory
    thisChunk = NULL;
    return 1;
}
     654:	08 95       	ret

00000656 <flushSendQueue>:

// flush a send queue (used when retries fails)
void flushSendQueue(PRef p)
{
     656:	cf 93       	push	r28
     658:	c8 2f       	mov	r28, r24
#ifdef LOG_DEBUG
	if (isHostPort(p)) {
     65a:	0e 94 6d 0b 	call	0x16da	; 0x16da <isHostPort>
     65e:	88 23       	and	r24, r24
     660:	29 f0       	breq	.+10     	; 0x66c <flushSendQueue+0x16>
		removeFromSq(p, MSG_RESP_NOREPLY); // ONLY ONE
     662:	68 e1       	ldi	r22, 0x18	; 24
     664:	8c 2f       	mov	r24, r28
    if(p < NUM_PORTS)
    {
        // flush buffer (call all callbacks as if all messages failed)
        while( removeFromSq(p, MSG_RESP_NOREPLY) );
    }
}
     666:	cf 91       	pop	r28
// flush a send queue (used when retries fails)
void flushSendQueue(PRef p)
{
#ifdef LOG_DEBUG
	if (isHostPort(p)) {
		removeFromSq(p, MSG_RESP_NOREPLY); // ONLY ONE
     668:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <removeFromSq>
		return;
	}
#endif
    if(p < NUM_PORTS)
     66c:	c6 30       	cpi	r28, 0x06	; 6
     66e:	30 f4       	brcc	.+12     	; 0x67c <flushSendQueue+0x26>
    {
        // flush buffer (call all callbacks as if all messages failed)
        while( removeFromSq(p, MSG_RESP_NOREPLY) );
     670:	68 e1       	ldi	r22, 0x18	; 24
     672:	8c 2f       	mov	r24, r28
     674:	0e 94 e7 02 	call	0x5ce	; 0x5ce <removeFromSq>
     678:	81 11       	cpse	r24, r1
     67a:	fa cf       	rjmp	.-12     	; 0x670 <flushSendQueue+0x1a>
    }
}
     67c:	cf 91       	pop	r28
     67e:	08 95       	ret

00000680 <setupChunk>:
//          mh - handler for this message
//          cb - callback on send failure
// outputs: 1 - chunk correctly formatted
//          0 - inputs contained error, format failed
byte setupChunk(Chunk* c, PRef p, byte * msg, byte length, MsgHandler mh, GenericHandler cb)
{
     680:	ef 92       	push	r14
     682:	ff 92       	push	r15
     684:	0f 93       	push	r16
     686:	1f 93       	push	r17
     688:	cf 93       	push	r28
     68a:	df 93       	push	r29
     68c:	ec 01       	movw	r28, r24
     68e:	ca 01       	movw	r24, r20
    // invalid Chunk, invalid port, message too long, or no message
    if( (c == NULL) || (p >= NUM_PORTS) || (length > DATA_SIZE) || (msg == NULL) )
     690:	20 97       	sbiw	r28, 0x00	; 0
     692:	51 f1       	breq	.+84     	; 0x6e8 <setupChunk+0x68>
     694:	66 30       	cpi	r22, 0x06	; 6
     696:	40 f5       	brcc	.+80     	; 0x6e8 <setupChunk+0x68>
     698:	22 31       	cpi	r18, 0x12	; 18
     69a:	30 f5       	brcc	.+76     	; 0x6e8 <setupChunk+0x68>
     69c:	00 97       	sbiw	r24, 0x00	; 0
     69e:	21 f1       	breq	.+72     	; 0x6e8 <setupChunk+0x68>
    {
        return 0;
    }

    // set the flags
    c->status = CHUNK_USED | CHUNK_FILLED | MSG_RESP_SENDING | port[p].pnum;
     6a0:	38 e5       	ldi	r19, 0x58	; 88
     6a2:	63 9f       	mul	r22, r19
     6a4:	f0 01       	movw	r30, r0
     6a6:	11 24       	eor	r1, r1
     6a8:	e0 5b       	subi	r30, 0xB0	; 176
     6aa:	fb 4d       	sbci	r31, 0xDB	; 219
     6ac:	30 81       	ld	r19, Z
     6ae:	30 68       	ori	r19, 0x80	; 128
     6b0:	39 8b       	std	Y+17, r19	; 0x11
    
    // clear out next pointer
    c->next = NULL;
     6b2:	1a 8a       	std	Y+18, r1	; 0x12
     6b4:	1b 8a       	std	Y+19, r1	; 0x13

    // set message handler
    *((MsgHandler*)(c->handler)) = mh;
     6b6:	0c 8b       	std	Y+20, r16	; 0x14
     6b8:	1d 8b       	std	Y+21, r17	; 0x15

    // setup callback
    c->callback = cb;
     6ba:	ee 8a       	std	Y+22, r14	; 0x16
     6bc:	ff 8a       	std	Y+23, r15	; 0x17

    // copy message
    memcpy(c->data, msg, length);
     6be:	02 2f       	mov	r16, r18
     6c0:	10 e0       	ldi	r17, 0x00	; 0
     6c2:	42 2f       	mov	r20, r18
     6c4:	50 e0       	ldi	r21, 0x00	; 0
     6c6:	bc 01       	movw	r22, r24
     6c8:	ce 01       	movw	r24, r28
     6ca:	0e 94 98 28 	call	0x5130	; 0x5130 <memcpy>
    
    // 'zero' out extra bytes (use ff's)
    memset((c->data)+length, 0xFF, DATA_SIZE-length);
     6ce:	c0 0f       	add	r28, r16
     6d0:	d1 1f       	adc	r29, r17
     6d2:	41 e1       	ldi	r20, 0x11	; 17
     6d4:	50 e0       	ldi	r21, 0x00	; 0
     6d6:	40 1b       	sub	r20, r16
     6d8:	51 0b       	sbc	r21, r17
     6da:	6f ef       	ldi	r22, 0xFF	; 255
     6dc:	70 e0       	ldi	r23, 0x00	; 0
     6de:	ce 01       	movw	r24, r28
     6e0:	0e 94 a1 28 	call	0x5142	; 0x5142 <memset>
    
    return 1;
     6e4:	81 e0       	ldi	r24, 0x01	; 1
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <setupChunk+0x6a>
byte setupChunk(Chunk* c, PRef p, byte * msg, byte length, MsgHandler mh, GenericHandler cb)
{
    // invalid Chunk, invalid port, message too long, or no message
    if( (c == NULL) || (p >= NUM_PORTS) || (length > DATA_SIZE) || (msg == NULL) )
    {
        return 0;
     6e8:	80 e0       	ldi	r24, 0x00	; 0
    
    // 'zero' out extra bytes (use ff's)
    memset((c->data)+length, 0xFF, DATA_SIZE-length);
    
    return 1;
}
     6ea:	df 91       	pop	r29
     6ec:	cf 91       	pop	r28
     6ee:	1f 91       	pop	r17
     6f0:	0f 91       	pop	r16
     6f2:	ff 90       	pop	r15
     6f4:	ef 90       	pop	r14
     6f6:	08 95       	ret

000006f8 <queueChunk>:
// outputs: 1 - chunk successfully queued
//          0 - error, chunk was not queued
byte queueChunk(Chunk* c)
{
    // null Chunk
    if(c == NULL)
     6f8:	00 97       	sbiw	r24, 0x00	; 0
     6fa:	71 f1       	breq	.+92     	; 0x758 <queueChunk+0x60>
    {
        return 0;    
    }
    
    byte p = faceNum(c);
     6fc:	dc 01       	movw	r26, r24
     6fe:	51 96       	adiw	r26, 0x11	; 17
     700:	ec 91       	ld	r30, X
     702:	e7 70       	andi	r30, 0x07	; 7
    
    if(p < NUM_PORTS)
     704:	e6 30       	cpi	r30, 0x06	; 6
     706:	30 f5       	brcc	.+76     	; 0x754 <queueChunk+0x5c>
            freeChunk(c);
            return 0;
        }
#endif    
    
        BB_LOCK(SQ_LOCK)
     708:	6f b7       	in	r22, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     70a:	f8 94       	cli

        // add to queue - queue empty
        if( port[p].sq.head == NULL ) 
     70c:	2e 2f       	mov	r18, r30
     70e:	30 e0       	ldi	r19, 0x00	; 0
     710:	b8 e5       	ldi	r27, 0x58	; 88
     712:	eb 9f       	mul	r30, r27
     714:	f0 01       	movw	r30, r0
     716:	11 24       	eor	r1, r1
     718:	e0 5b       	subi	r30, 0xB0	; 176
     71a:	fb 4d       	sbci	r31, 0xDB	; 219
     71c:	47 85       	ldd	r20, Z+15	; 0x0f
     71e:	50 89       	ldd	r21, Z+16	; 0x10
     720:	45 2b       	or	r20, r21
     722:	19 f4       	brne	.+6      	; 0x72a <queueChunk+0x32>
        {
            port[p].sq.head = c;
     724:	87 87       	std	Z+15, r24	; 0x0f
     726:	90 8b       	std	Z+16, r25	; 0x10
     728:	05 c0       	rjmp	.+10     	; 0x734 <queueChunk+0x3c>
        }
        // queue has stuff
        else 
        {
            port[p].sq.tail->next = c;
     72a:	01 88       	ldd	r0, Z+17	; 0x11
     72c:	f2 89       	ldd	r31, Z+18	; 0x12
     72e:	e0 2d       	mov	r30, r0
     730:	82 8b       	std	Z+18, r24	; 0x12
     732:	93 8b       	std	Z+19, r25	; 0x13
        }
        // add to tail and update flags
        port[p].sq.tail   = c;
     734:	48 e5       	ldi	r20, 0x58	; 88
     736:	42 9f       	mul	r20, r18
     738:	f0 01       	movw	r30, r0
     73a:	43 9f       	mul	r20, r19
     73c:	f0 0d       	add	r31, r0
     73e:	11 24       	eor	r1, r1
     740:	e0 5b       	subi	r30, 0xB0	; 176
     742:	fb 4d       	sbci	r31, 0xDB	; 219
     744:	81 8b       	std	Z+17, r24	; 0x11
     746:	92 8b       	std	Z+18, r25	; 0x12
        port[p].sq.flags |= CHUNK_READY;
     748:	86 85       	ldd	r24, Z+14	; 0x0e
     74a:	80 68       	ori	r24, 0x80	; 128
     74c:	86 87       	std	Z+14, r24	; 0x0e
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     74e:	6f bf       	out	0x3f, r22	; 63

        BB_UNLOCK(SQ_LOCK)

        return 1;
     750:	81 e0       	ldi	r24, 0x01	; 1
     752:	08 95       	ret
    }
    else
    {
        freeChunk(c);
     754:	0e 94 2f 08 	call	0x105e	; 0x105e <freeChunk>
byte queueChunk(Chunk* c)
{
    // null Chunk
    if(c == NULL)
    {
        return 0;    
     758:	80 e0       	ldi	r24, 0x00	; 0
    else
    {
        freeChunk(c);
        return 0;
    }
}
     75a:	08 95       	ret

0000075c <handleOneMessage>:
// returns: 1 - message processed
//          0 - no new messages
byte handleOneMessage()
{
    // set the global chunk that needs to be processed by the handler
    thisChunk = nextPacket();
     75c:	0e 94 85 18 	call	0x310a	; 0x310a <nextPacket>
     760:	80 93 4b 21 	sts	0x214B, r24
     764:	90 93 4c 21 	sts	0x214C, r25

    // no packet, no action
    if( thisChunk == NULL )
     768:	00 97       	sbiw	r24, 0x00	; 0
     76a:	69 f1       	breq	.+90     	; 0x7c6 <handleOneMessage+0x6a>
    {
        return 0;
    }

    // call handler
    if( *((MsgHandler*)thisChunk->handler) == RES_SYS_HANDLER ) 
     76c:	dc 01       	movw	r26, r24
     76e:	54 96       	adiw	r26, 0x14	; 20
     770:	ed 91       	ld	r30, X+
     772:	fc 91       	ld	r31, X
     774:	55 97       	sbiw	r26, 0x15	; 21
     776:	30 97       	sbiw	r30, 0x00	; 0
     778:	19 f4       	brne	.+6      	; 0x780 <handleOneMessage+0x24>
    {
	    reservedSystemHandler();
     77a:	0e 94 ca 02 	call	0x594	; 0x594 <reservedSystemHandler>
     77e:	01 c0       	rjmp	.+2      	; 0x782 <handleOneMessage+0x26>
    }
    else 
    {
	    (*((MsgHandler*)(thisChunk->handler)))();
     780:	19 95       	eicall
    }

    // set flag to send ACK
    port[faceNum(thisChunk)].sq.flags |= setAck(thisChunk);
     782:	80 91 4b 21 	lds	r24, 0x214B
     786:	90 91 4c 21 	lds	r25, 0x214C
     78a:	fc 01       	movw	r30, r24
     78c:	21 89       	ldd	r18, Z+17	; 0x11
     78e:	e2 2f       	mov	r30, r18
     790:	e7 70       	andi	r30, 0x07	; 7
     792:	38 e5       	ldi	r19, 0x58	; 88
     794:	e3 9f       	mul	r30, r19
     796:	f0 01       	movw	r30, r0
     798:	11 24       	eor	r1, r1
     79a:	e0 5b       	subi	r30, 0xB0	; 176
     79c:	fb 4d       	sbci	r31, 0xDB	; 219
     79e:	25 fb       	bst	r18, 5
     7a0:	44 27       	eor	r20, r20
     7a2:	40 f9       	bld	r20, 0
     7a4:	21 e0       	ldi	r18, 0x01	; 1
     7a6:	30 e0       	ldi	r19, 0x00	; 0
     7a8:	01 c0       	rjmp	.+2      	; 0x7ac <handleOneMessage+0x50>
     7aa:	22 0f       	add	r18, r18
     7ac:	4a 95       	dec	r20
     7ae:	ea f7       	brpl	.-6      	; 0x7aa <handleOneMessage+0x4e>
     7b0:	36 85       	ldd	r19, Z+14	; 0x0e
     7b2:	32 2b       	or	r19, r18
     7b4:	36 87       	std	Z+14, r19	; 0x0e

    // free the rx chunk
    freeChunk(thisChunk);
     7b6:	0e 94 2f 08 	call	0x105e	; 0x105e <freeChunk>

    // reset the global chunk since memory is no longer valid
    thisChunk = NULL;
     7ba:	10 92 4b 21 	sts	0x214B, r1
     7be:	10 92 4c 21 	sts	0x214C, r1

    return 1;
     7c2:	81 e0       	ldi	r24, 0x01	; 1
     7c4:	08 95       	ret
    thisChunk = nextPacket();

    // no packet, no action
    if( thisChunk == NULL )
    {
        return 0;
     7c6:	80 e0       	ldi	r24, 0x00	; 0

    // reset the global chunk since memory is no longer valid
    thisChunk = NULL;

    return 1;
}
     7c8:	08 95       	ret

000007ca <initDataLink>:

// initialization
void initDataLink()
{
    initHWDataLink();
     7ca:	0e 94 53 19 	call	0x32a6	; 0x32a6 <initHWDataLink>

    globalRq.head  = NULL;
     7ce:	10 92 46 21 	sts	0x2146, r1
     7d2:	10 92 47 21 	sts	0x2147, r1
    globalRq.tail  = NULL;
     7d6:	10 92 48 21 	sts	0x2148, r1
     7da:	10 92 49 21 	sts	0x2149, r1
    globalRq.flags = 0;
     7de:	10 92 4a 21 	sts	0x214A, r1
     7e2:	08 95       	ret

000007e4 <initDebug>:
#include "debug.bbh"
#include "../hw-api/hwDebug.h"

void initDebug() 
{
  initHWDebug();
     7e4:	0c 94 f3 1f 	jmp	0x3fe6	; 0x3fe6 <initHWDebug>

000007e8 <neighborKeepalive>:
    freeChunk(thisChunk);
}

// this is called periodically to verify neighbor is still there and in the right state
void neighborKeepalive(void)
{
     7e8:	0f 93       	push	r16
     7ea:	1f 93       	push	r17
     7ec:	cf 93       	push	r28
     7ee:	df 93       	push	r29
     7f0:	00 d0       	rcall	.+0      	; 0x7f2 <neighborKeepalive+0xa>
     7f2:	00 d0       	rcall	.+0      	; 0x7f4 <neighborKeepalive+0xc>
     7f4:	cd b7       	in	r28, 0x3d	; 61
     7f6:	de b7       	in	r29, 0x3e	; 62
  // craft and send a keeplive message of the form:
  // [header] [myGUID][yourGUID]
  byte buf[6];
  buf[0] = NEIGHBOR_MSG;
     7f8:	81 e0       	ldi	r24, 0x01	; 1
     7fa:	89 83       	std	Y+1, r24	; 0x01
  buf[1] = MSG_NEIGHBOR_KEEPALIVE;
     7fc:	83 e0       	ldi	r24, 0x03	; 3
     7fe:	8a 83       	std	Y+2, r24	; 0x02
  GUIDIntoChar(getGUID(), &(buf[2]));
     800:	0e 94 08 1a 	call	0x3410	; 0x3410 <getGUID>
threadvar Timer ttNeighbor[6];

// converts a UID into a passed in character stream.  Assumes 2-byte GUIDs.
void GUIDIntoChar(Uid id, byte * c)
{
    c[0] = (id >> 8) & 0x00FF;
     804:	9b 83       	std	Y+3, r25	; 0x03
    c[1] = (id & 0x00FF); 
     806:	8c 83       	std	Y+4, r24	; 0x04
  // [header] [myGUID][yourGUID]
  byte buf[6];
  buf[0] = NEIGHBOR_MSG;
  buf[1] = MSG_NEIGHBOR_KEEPALIVE;
  GUIDIntoChar(getGUID(), &(buf[2]));
  GUIDIntoChar(thisNeighborhood.n[thisTimeout->arg], &(buf[4]));
     808:	a0 91 60 26 	lds	r26, 0x2660
     80c:	b0 91 61 26 	lds	r27, 0x2661
     810:	19 96       	adiw	r26, 0x09	; 9
     812:	8c 91       	ld	r24, X
     814:	19 97       	sbiw	r26, 0x09	; 9
     816:	90 e0       	ldi	r25, 0x00	; 0
     818:	fc 01       	movw	r30, r24
     81a:	ee 0f       	add	r30, r30
     81c:	ff 1f       	adc	r31, r31
     81e:	e3 5b       	subi	r30, 0xB3	; 179
     820:	fe 4d       	sbci	r31, 0xDE	; 222
     822:	20 81       	ld	r18, Z
     824:	31 81       	ldd	r19, Z+1	; 0x01
threadvar Timer ttNeighbor[6];

// converts a UID into a passed in character stream.  Assumes 2-byte GUIDs.
void GUIDIntoChar(Uid id, byte * c)
{
    c[0] = (id >> 8) & 0x00FF;
     826:	3d 83       	std	Y+5, r19	; 0x05
    c[1] = (id & 0x00FF); 
     828:	2e 83       	std	Y+6, r18	; 0x06
  buf[1] = MSG_NEIGHBOR_KEEPALIVE;
  GUIDIntoChar(getGUID(), &(buf[2]));
  GUIDIntoChar(thisNeighborhood.n[thisTimeout->arg], &(buf[4]));

  // prevent timer from calling this again, message callback will reenable as necessary
  disableTimer(ttNeighbor[thisTimeout->arg]);
     82a:	21 e1       	ldi	r18, 0x11	; 17
     82c:	28 9f       	mul	r18, r24
     82e:	f0 01       	movw	r30, r0
     830:	29 9f       	mul	r18, r25
     832:	f0 0d       	add	r31, r0
     834:	11 24       	eor	r1, r1
     836:	e7 5a       	subi	r30, 0xA7	; 167
     838:	fe 4d       	sbci	r31, 0xDE	; 222
     83a:	10 8a       	std	Z+16, r1	; 0x10

  // send message - CB will either re-add timer, or restart scanning for neighbors
  sendSystemMessage(thisTimeout->arg, buf, 6, RES_SYS_HANDLER, (GenericHandler)&neighborKeepaliveCB);
     83c:	0a ea       	ldi	r16, 0xAA	; 170
     83e:	16 e0       	ldi	r17, 0x06	; 6
     840:	20 e0       	ldi	r18, 0x00	; 0
     842:	30 e0       	ldi	r19, 0x00	; 0
     844:	46 e0       	ldi	r20, 0x06	; 6
     846:	be 01       	movw	r22, r28
     848:	6f 5f       	subi	r22, 0xFF	; 255
     84a:	7f 4f       	sbci	r23, 0xFF	; 255
     84c:	19 96       	adiw	r26, 0x09	; 9
     84e:	8c 91       	ld	r24, X
     850:	0e 94 a4 08 	call	0x1148	; 0x1148 <sendSystemMessage>
}
     854:	26 96       	adiw	r28, 0x06	; 6
     856:	cd bf       	out	0x3d, r28	; 61
     858:	de bf       	out	0x3e, r29	; 62
     85a:	df 91       	pop	r29
     85c:	cf 91       	pop	r28
     85e:	1f 91       	pop	r17
     860:	0f 91       	pop	r16
     862:	08 95       	ret

00000864 <neighborScan>:
  freeChunk(thisChunk);
}

// send a start handshake message to a vacant port
void neighborScan(void)
{
     864:	ff 92       	push	r15
     866:	0f 93       	push	r16
     868:	1f 93       	push	r17
     86a:	cf 93       	push	r28
     86c:	df 93       	push	r29
     86e:	00 d0       	rcall	.+0      	; 0x870 <neighborScan+0xc>
     870:	1f 92       	push	r1
     872:	cd b7       	in	r28, 0x3d	; 61
     874:	de b7       	in	r29, 0x3e	; 62
  byte buf[4];
  PRef p = thisTimeout->arg;
     876:	e0 91 60 26 	lds	r30, 0x2660
     87a:	f0 91 61 26 	lds	r31, 0x2661
     87e:	f1 84       	ldd	r15, Z+9	; 0x09
  if(p == DEBUGPORT) {
      return;
  }
  #endif
  #ifdef LOG_DEBUG
  if(isHostPort(p)) {
     880:	8f 2d       	mov	r24, r15
     882:	0e 94 6d 0b 	call	0x16da	; 0x16da <isHostPort>
     886:	81 11       	cpse	r24, r1
     888:	22 c0       	rjmp	.+68     	; 0x8ce <neighborScan+0x6a>
      return;
  }
  #endif

  // prepare message
  buf[0] = NEIGHBOR_MSG;
     88a:	81 e0       	ldi	r24, 0x01	; 1
     88c:	89 83       	std	Y+1, r24	; 0x01
  buf[1] = MSG_NEIGHBOR_START;
     88e:	8a 83       	std	Y+2, r24	; 0x02
  GUIDIntoChar(getGUID(), &(buf[2]));
     890:	0e 94 08 1a 	call	0x3410	; 0x3410 <getGUID>
threadvar Timer ttNeighbor[6];

// converts a UID into a passed in character stream.  Assumes 2-byte GUIDs.
void GUIDIntoChar(Uid id, byte * c)
{
    c[0] = (id >> 8) & 0x00FF;
     894:	9b 83       	std	Y+3, r25	; 0x03
    c[1] = (id & 0x00FF); 
     896:	8c 83       	std	Y+4, r24	; 0x04
  buf[0] = NEIGHBOR_MSG;
  buf[1] = MSG_NEIGHBOR_START;
  GUIDIntoChar(getGUID(), &(buf[2]));
  
  // disable timer so no extra time-based calls are executed until sent message callback
  disableTimer(ttNeighbor[p]);
     898:	81 e1       	ldi	r24, 0x11	; 17
     89a:	f8 9e       	mul	r15, r24
     89c:	90 01       	movw	r18, r0
     89e:	11 24       	eor	r1, r1
     8a0:	f9 01       	movw	r30, r18
     8a2:	e7 5a       	subi	r30, 0xA7	; 167
     8a4:	fe 4d       	sbci	r31, 0xDE	; 222
     8a6:	10 8a       	std	Z+16, r1	; 0x10
  if(ttNeighbor[p].t.state != INACTIVE)
     8a8:	82 85       	ldd	r24, Z+10	; 0x0a
     8aa:	88 23       	and	r24, r24
     8ac:	29 f0       	breq	.+10     	; 0x8b8 <neighborScan+0x54>
    {
      deregisterTimeout(&(ttNeighbor[p].t));
     8ae:	c9 01       	movw	r24, r18
     8b0:	85 5a       	subi	r24, 0xA5	; 165
     8b2:	9e 4d       	sbci	r25, 0xDE	; 222
     8b4:	0e 94 04 0a 	call	0x1408	; 0x1408 <deregisterTimeout>
    }

  // enqueue message
  sendSystemMessage(p, buf, 4, RES_SYS_HANDLER, (GenericHandler)&neighborScanCB);
     8b8:	00 e7       	ldi	r16, 0x70	; 112
     8ba:	14 e0       	ldi	r17, 0x04	; 4
     8bc:	20 e0       	ldi	r18, 0x00	; 0
     8be:	30 e0       	ldi	r19, 0x00	; 0
     8c0:	44 e0       	ldi	r20, 0x04	; 4
     8c2:	be 01       	movw	r22, r28
     8c4:	6f 5f       	subi	r22, 0xFF	; 255
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	8f 2d       	mov	r24, r15
     8ca:	0e 94 a4 08 	call	0x1148	; 0x1148 <sendSystemMessage>
}
     8ce:	24 96       	adiw	r28, 0x04	; 4
     8d0:	cd bf       	out	0x3d, r28	; 61
     8d2:	de bf       	out	0x3e, r29	; 62
     8d4:	df 91       	pop	r29
     8d6:	cf 91       	pop	r28
     8d8:	1f 91       	pop	r17
     8da:	0f 91       	pop	r16
     8dc:	ff 90       	pop	r15
     8de:	08 95       	ret

000008e0 <neighborScanCB>:

// called when start handshake message is complete by success or failure
void neighborScanCB(void)
{
#ifdef LOG_DEBUG
  if(isHostPort(faceNum(thisChunk))) {
     8e0:	e0 91 4b 21 	lds	r30, 0x214B
     8e4:	f0 91 4c 21 	lds	r31, 0x214C
     8e8:	81 89       	ldd	r24, Z+17	; 0x11
     8ea:	87 70       	andi	r24, 0x07	; 7
     8ec:	0e 94 6d 0b 	call	0x16da	; 0x16da <isHostPort>
     8f0:	e0 91 4b 21 	lds	r30, 0x214B
     8f4:	f0 91 4c 21 	lds	r31, 0x214C
     8f8:	81 11       	cpse	r24, r1
     8fa:	2c c0       	rjmp	.+88     	; 0x954 <neighborScanCB+0x74>
      return;
  }
#endif

  // message was received.  wait for handshake to return, but allow for timeout to restart scan
  if(chunkResponseType(thisChunk) == MSG_RESP_ACK)
     8fc:	a1 89       	ldd	r26, Z+17	; 0x11
     8fe:	8a 2f       	mov	r24, r26
     900:	88 71       	andi	r24, 0x18	; 24
     902:	a7 70       	andi	r26, 0x07	; 7
     904:	88 30       	cpi	r24, 0x08	; 8
     906:	59 f4       	brne	.+22     	; 0x91e <neighborScanCB+0x3e>
    {
      (ttNeighbor[faceNum(thisChunk)]).period = NEIGHBOR_HANDSHAKE_TIMEOUT_PERIOD;
     908:	81 e1       	ldi	r24, 0x11	; 17
     90a:	a8 9f       	mul	r26, r24
     90c:	d0 01       	movw	r26, r0
     90e:	11 24       	eor	r1, r1
     910:	a7 5a       	subi	r26, 0xA7	; 167
     912:	be 4d       	sbci	r27, 0xDE	; 222
     914:	44 e6       	ldi	r20, 0x64	; 100
     916:	50 e0       	ldi	r21, 0x00	; 0
     918:	60 e0       	ldi	r22, 0x00	; 0
     91a:	70 e0       	ldi	r23, 0x00	; 0
     91c:	0a c0       	rjmp	.+20     	; 0x932 <neighborScanCB+0x52>
    }
  // else failure
  else
    {
      (ttNeighbor[faceNum(thisChunk)]).period = NEIGHBOR_SCAN_PERIOD;
     91e:	81 e1       	ldi	r24, 0x11	; 17
     920:	a8 9f       	mul	r26, r24
     922:	d0 01       	movw	r26, r0
     924:	11 24       	eor	r1, r1
     926:	a7 5a       	subi	r26, 0xA7	; 167
     928:	be 4d       	sbci	r27, 0xDE	; 222
     92a:	42 e3       	ldi	r20, 0x32	; 50
     92c:	50 e0       	ldi	r21, 0x00	; 0
     92e:	60 e0       	ldi	r22, 0x00	; 0
     930:	70 e0       	ldi	r23, 0x00	; 0
     932:	1c 96       	adiw	r26, 0x0c	; 12
     934:	4d 93       	st	X+, r20
     936:	5d 93       	st	X+, r21
     938:	6d 93       	st	X+, r22
     93a:	7c 93       	st	X, r23
     93c:	1f 97       	sbiw	r26, 0x0f	; 15
    }

  // re-enable timer with potentially new period
  enableTimer(ttNeighbor[faceNum(thisChunk)]);
     93e:	a1 89       	ldd	r26, Z+17	; 0x11
     940:	a7 70       	andi	r26, 0x07	; 7
     942:	81 e1       	ldi	r24, 0x11	; 17
     944:	a8 9f       	mul	r26, r24
     946:	d0 01       	movw	r26, r0
     948:	11 24       	eor	r1, r1
     94a:	a7 5a       	subi	r26, 0xA7	; 167
     94c:	be 4d       	sbci	r27, 0xDE	; 222
     94e:	81 e0       	ldi	r24, 0x01	; 1
     950:	50 96       	adiw	r26, 0x10	; 16
     952:	8c 93       	st	X, r24
 
  freeChunk(thisChunk);
     954:	cf 01       	movw	r24, r30
     956:	0c 94 2f 08 	jmp	0x105e	; 0x105e <freeChunk>

0000095a <GUIDIntoChar>:
threadvar Timer ttNeighbor[6];

// converts a UID into a passed in character stream.  Assumes 2-byte GUIDs.
void GUIDIntoChar(Uid id, byte * c)
{
    c[0] = (id >> 8) & 0x00FF;
     95a:	fb 01       	movw	r30, r22
     95c:	90 83       	st	Z, r25
    c[1] = (id & 0x00FF); 
     95e:	81 83       	std	Z+1, r24	; 0x01
     960:	08 95       	ret

00000962 <charToGUID>:
// takes a passed in character array and returns a UID representing the array.  Assumes 2-byte GUIDs.
Uid charToGUID(byte * c)
{
    Uid tmp;

    tmp = (Uid)(c[0]) << 8;
     962:	fc 01       	movw	r30, r24
     964:	30 81       	ld	r19, Z
     966:	20 e0       	ldi	r18, 0x00	; 0
    tmp |= c[1];
     968:	81 81       	ldd	r24, Z+1	; 0x01
     96a:	28 2b       	or	r18, r24

    return tmp;
}
     96c:	c9 01       	movw	r24, r18
     96e:	08 95       	ret

00000970 <getNeighborCount>:

// returns number of neighbors that are not VACANT.
byte getNeighborCount()
{
     970:	ed e4       	ldi	r30, 0x4D	; 77
     972:	f1 e2       	ldi	r31, 0x21	; 33
	uint8_t count, i;
	
	for(count = 0, i = 0; i < NUM_PORTS; ++i)
     974:	80 e0       	ldi	r24, 0x00	; 0
	{
		if(thisNeighborhood.n[i] != VACANT)
     976:	21 91       	ld	r18, Z+
     978:	31 91       	ld	r19, Z+
     97a:	23 2b       	or	r18, r19
     97c:	09 f0       	breq	.+2      	; 0x980 <getNeighborCount+0x10>
		{
			count++;
     97e:	8f 5f       	subi	r24, 0xFF	; 255
// returns number of neighbors that are not VACANT.
byte getNeighborCount()
{
	uint8_t count, i;
	
	for(count = 0, i = 0; i < NUM_PORTS; ++i)
     980:	91 e2       	ldi	r25, 0x21	; 33
     982:	e9 35       	cpi	r30, 0x59	; 89
     984:	f9 07       	cpc	r31, r25
     986:	b9 f7       	brne	.-18     	; 0x976 <getNeighborCount+0x6>
	}

//	if(count>0)
//	  printf("NEIGHBORCOUNT = %d\r\n", count);
	return count;
}
     988:	08 95       	ret

0000098a <down>:

// simple functions to access geographic neighbors
Uid down(void) { return thisNeighborhood.n[DOWN]; }
     98a:	ed e4       	ldi	r30, 0x4D	; 77
     98c:	f1 e2       	ldi	r31, 0x21	; 33
     98e:	80 81       	ld	r24, Z
     990:	91 81       	ldd	r25, Z+1	; 0x01
     992:	08 95       	ret

00000994 <up>:
Uid up(void) { return thisNeighborhood.n[UP]; }
     994:	e7 e5       	ldi	r30, 0x57	; 87
     996:	f1 e2       	ldi	r31, 0x21	; 33
     998:	80 81       	ld	r24, Z
     99a:	91 81       	ldd	r25, Z+1	; 0x01
     99c:	08 95       	ret

0000099e <north>:
Uid north(void) { return thisNeighborhood.n[NORTH]; }
     99e:	ef e4       	ldi	r30, 0x4F	; 79
     9a0:	f1 e2       	ldi	r31, 0x21	; 33
     9a2:	80 81       	ld	r24, Z
     9a4:	91 81       	ldd	r25, Z+1	; 0x01
     9a6:	08 95       	ret

000009a8 <south>:
Uid south(void) { return thisNeighborhood.n[SOUTH]; }
     9a8:	e5 e5       	ldi	r30, 0x55	; 85
     9aa:	f1 e2       	ldi	r31, 0x21	; 33
     9ac:	80 81       	ld	r24, Z
     9ae:	91 81       	ldd	r25, Z+1	; 0x01
     9b0:	08 95       	ret

000009b2 <east>:
Uid east(void) { return thisNeighborhood.n[EAST]; }
     9b2:	e1 e5       	ldi	r30, 0x51	; 81
     9b4:	f1 e2       	ldi	r31, 0x21	; 33
     9b6:	80 81       	ld	r24, Z
     9b8:	91 81       	ldd	r25, Z+1	; 0x01
     9ba:	08 95       	ret

000009bc <west>:
Uid west(void) { return thisNeighborhood.n[WEST]; }
     9bc:	e3 e5       	ldi	r30, 0x53	; 83
     9be:	f1 e2       	ldi	r31, 0x21	; 33
     9c0:	80 81       	ld	r24, Z
     9c2:	91 81       	ldd	r25, Z+1	; 0x01
     9c4:	08 95       	ret

000009c6 <updateNeighbor>:

// called to set the GUID of a neighbor.
// if the neighbor is the same as before, do nothing.
// if the neighbor has a different GUID (or VACANT), trigger a neighbor change event.
void	updateNeighbor(PRef p, Uid b)
{
     9c6:	1f 93       	push	r17
     9c8:	cf 93       	push	r28
     9ca:	df 93       	push	r29
     9cc:	18 2f       	mov	r17, r24
     9ce:	eb 01       	movw	r28, r22
	}

#endif

#ifdef LOG_DEBUG
  if(isHostPort(p)) {
     9d0:	0e 94 6d 0b 	call	0x16da	; 0x16da <isHostPort>
     9d4:	81 11       	cpse	r24, r1
     9d6:	18 c0       	rjmp	.+48     	; 0xa08 <updateNeighbor+0x42>
      return;
  }
#endif

	if(p < NUM_PORTS)
     9d8:	16 30       	cpi	r17, 0x06	; 6
     9da:	b0 f4       	brcc	.+44     	; 0xa08 <updateNeighbor+0x42>
	{
		// is the state changing?  Trigger handler
	    if(thisNeighborhood.n[p] != b)
     9dc:	e1 2f       	mov	r30, r17
     9de:	f0 e0       	ldi	r31, 0x00	; 0
     9e0:	ee 0f       	add	r30, r30
     9e2:	ff 1f       	adc	r31, r31
     9e4:	e3 5b       	subi	r30, 0xB3	; 179
     9e6:	fe 4d       	sbci	r31, 0xDE	; 222
     9e8:	20 81       	ld	r18, Z
     9ea:	31 81       	ldd	r19, Z+1	; 0x01
     9ec:	2c 17       	cp	r18, r28
     9ee:	3d 07       	cpc	r19, r29
     9f0:	59 f0       	breq	.+22     	; 0xa08 <updateNeighbor+0x42>
	    {
	        thisNeighborhood.n[p] = b;
     9f2:	c0 83       	st	Z, r28
     9f4:	d1 83       	std	Z+1, r29	; 0x01
	        triggerHandler(EVENT_NEIGHBOR_CHANGE);
     9f6:	83 e1       	ldi	r24, 0x13	; 19
     9f8:	0e 94 7a 07 	call	0xef4	; 0xef4 <triggerHandler>
#ifdef CLOCK_SYNC
			handleNeighborChange(p);
     9fc:	81 2f       	mov	r24, r17
	    }
	  
	}
	
	//	printf("Block %d now has %d neighbors \n",getGUID(),getNeighborCount());
}
     9fe:	df 91       	pop	r29
     a00:	cf 91       	pop	r28
     a02:	1f 91       	pop	r17
	    if(thisNeighborhood.n[p] != b)
	    {
	        thisNeighborhood.n[p] = b;
	        triggerHandler(EVENT_NEIGHBOR_CHANGE);
#ifdef CLOCK_SYNC
			handleNeighborChange(p);
     a04:	0c 94 39 0e 	jmp	0x1c72	; 0x1c72 <handleNeighborChange>
	    }
	  
	}
	
	//	printf("Block %d now has %d neighbors \n",getGUID(),getNeighborCount());
}
     a08:	df 91       	pop	r29
     a0a:	cf 91       	pop	r28
     a0c:	1f 91       	pop	r17
     a0e:	08 95       	ret

00000a10 <restartScan>:
    return 1;
}

// sets neighbor to VACANT, and starts a timer/timeout to send handshake initialization messages
void restartScan(PRef i)
{
     a10:	1f 93       	push	r17
     a12:	cf 93       	push	r28
     a14:	df 93       	push	r29
     a16:	18 2f       	mov	r17, r24
  updateNeighbor(i, VACANT);
     a18:	60 e0       	ldi	r22, 0x00	; 0
     a1a:	70 e0       	ldi	r23, 0x00	; 0
     a1c:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <updateNeighbor>

  // deregister timer and deregister timeouts if they are already in the lists
  disableTimer(ttNeighbor[i]);
     a20:	c1 2f       	mov	r28, r17
     a22:	d0 e0       	ldi	r29, 0x00	; 0
     a24:	81 e1       	ldi	r24, 0x11	; 17
     a26:	18 9f       	mul	r17, r24
     a28:	90 01       	movw	r18, r0
     a2a:	11 24       	eor	r1, r1
     a2c:	f9 01       	movw	r30, r18
     a2e:	e7 5a       	subi	r30, 0xA7	; 167
     a30:	fe 4d       	sbci	r31, 0xDE	; 222
     a32:	10 8a       	std	Z+16, r1	; 0x10
  if(ttNeighbor[i].t.state != INACTIVE)
     a34:	82 85       	ldd	r24, Z+10	; 0x0a
     a36:	88 23       	and	r24, r24
     a38:	29 f0       	breq	.+10     	; 0xa44 <restartScan+0x34>
    {
      deregisterTimeout(&(ttNeighbor[i].t));
     a3a:	c9 01       	movw	r24, r18
     a3c:	85 5a       	subi	r24, 0xA5	; 165
     a3e:	9e 4d       	sbci	r25, 0xDE	; 222
     a40:	0e 94 04 0a 	call	0x1408	; 0x1408 <deregisterTimeout>
    }

  // set up timer to call neighbor scan
  (ttNeighbor[i]).t.arg = i;
     a44:	81 e1       	ldi	r24, 0x11	; 17
     a46:	8c 9f       	mul	r24, r28
     a48:	f0 01       	movw	r30, r0
     a4a:	8d 9f       	mul	r24, r29
     a4c:	f0 0d       	add	r31, r0
     a4e:	11 24       	eor	r1, r1
     a50:	e7 5a       	subi	r30, 0xA7	; 167
     a52:	fe 4d       	sbci	r31, 0xDE	; 222
     a54:	13 87       	std	Z+11, r17	; 0x0b
  (ttNeighbor[i]).t.callback = (GenericHandler)&neighborScan;
     a56:	82 e3       	ldi	r24, 0x32	; 50
     a58:	94 e0       	ldi	r25, 0x04	; 4
     a5a:	80 87       	std	Z+8, r24	; 0x08
     a5c:	91 87       	std	Z+9, r25	; 0x09
  (ttNeighbor[i]).period = NEIGHBOR_SCAN_PERIOD;
     a5e:	82 e3       	ldi	r24, 0x32	; 50
     a60:	90 e0       	ldi	r25, 0x00	; 0
     a62:	a0 e0       	ldi	r26, 0x00	; 0
     a64:	b0 e0       	ldi	r27, 0x00	; 0
     a66:	84 87       	std	Z+12, r24	; 0x0c
     a68:	95 87       	std	Z+13, r25	; 0x0d
     a6a:	a6 87       	std	Z+14, r26	; 0x0e
     a6c:	b7 87       	std	Z+15, r27	; 0x0f
  enableTimer(ttNeighbor[i]);
     a6e:	81 e0       	ldi	r24, 0x01	; 1
     a70:	80 8b       	std	Z+16, r24	; 0x10
}
     a72:	df 91       	pop	r29
     a74:	cf 91       	pop	r28
     a76:	1f 91       	pop	r17
     a78:	08 95       	ret

00000a7a <handleNeighborMessage>:
  freeChunk(thisChunk);
}

// called for all NEIGHBOR_MSG type reserved system handlers
byte handleNeighborMessage(void)
{
     a7a:	df 92       	push	r13
     a7c:	ef 92       	push	r14
     a7e:	ff 92       	push	r15
     a80:	0f 93       	push	r16
     a82:	1f 93       	push	r17
     a84:	cf 93       	push	r28
     a86:	df 93       	push	r29
     a88:	00 d0       	rcall	.+0      	; 0xa8a <handleNeighborMessage+0x10>
     a8a:	00 d0       	rcall	.+0      	; 0xa8c <handleNeighborMessage+0x12>
     a8c:	cd b7       	in	r28, 0x3d	; 61
     a8e:	de b7       	in	r29, 0x3e	; 62
    if( thisChunk == NULL ) 
     a90:	e0 91 4b 21 	lds	r30, 0x214B
     a94:	f0 91 4c 21 	lds	r31, 0x214C
     a98:	30 97       	sbiw	r30, 0x00	; 0
     a9a:	09 f4       	brne	.+2      	; 0xa9e <handleNeighborMessage+0x24>
     a9c:	00 c1       	rjmp	.+512    	; 0xc9e <handleNeighborMessage+0x224>
    {
      return 0;
    }
  
    switch(thisChunk->data[1])
     a9e:	91 81       	ldd	r25, Z+1	; 0x01
     aa0:	92 30       	cpi	r25, 0x02	; 2
     aa2:	09 f4       	brne	.+2      	; 0xaa6 <handleNeighborMessage+0x2c>
     aa4:	5c c0       	rjmp	.+184    	; 0xb5e <handleNeighborMessage+0xe4>
     aa6:	93 30       	cpi	r25, 0x03	; 3
     aa8:	09 f4       	brne	.+2      	; 0xaac <handleNeighborMessage+0x32>
     aaa:	be c0       	rjmp	.+380    	; 0xc28 <handleNeighborMessage+0x1ae>
     aac:	91 30       	cpi	r25, 0x01	; 1
     aae:	09 f0       	breq	.+2      	; 0xab2 <handleNeighborMessage+0x38>
     ab0:	f8 c0       	rjmp	.+496    	; 0xca2 <handleNeighborMessage+0x228>
    {
      // a neighbor wants to initiate a response with us, craft a response
      case MSG_NEIGHBOR_START:
      {
	    // have we already received an ACK to our own NEIGHBOR_MSG?  If not, respond
	    if((ttNeighbor[faceNum(thisChunk)]).period != NEIGHBOR_HANDSHAKE_TIMEOUT_PERIOD)
     ab2:	e1 89       	ldd	r30, Z+17	; 0x11
     ab4:	e7 70       	andi	r30, 0x07	; 7
     ab6:	11 e1       	ldi	r17, 0x11	; 17
     ab8:	1e 9f       	mul	r17, r30
     aba:	f0 01       	movw	r30, r0
     abc:	11 24       	eor	r1, r1
     abe:	e7 5a       	subi	r30, 0xA7	; 167
     ac0:	fe 4d       	sbci	r31, 0xDE	; 222
     ac2:	44 85       	ldd	r20, Z+12	; 0x0c
     ac4:	55 85       	ldd	r21, Z+13	; 0x0d
     ac6:	66 85       	ldd	r22, Z+14	; 0x0e
     ac8:	77 85       	ldd	r23, Z+15	; 0x0f
     aca:	44 36       	cpi	r20, 0x64	; 100
     acc:	51 05       	cpc	r21, r1
     ace:	61 05       	cpc	r22, r1
     ad0:	71 05       	cpc	r23, r1
     ad2:	09 f4       	brne	.+2      	; 0xad6 <handleNeighborMessage+0x5c>
     ad4:	e6 c0       	rjmp	.+460    	; 0xca2 <handleNeighborMessage+0x228>
	    {
	      // build a neighbor handshake packet
	      // of the form:
	      // [handshake header] [my guid] [your guid]
	      byte buf[6];
	      buf[0] = NEIGHBOR_MSG;
     ad6:	99 83       	std	Y+1, r25	; 0x01
	      buf[1] = MSG_NEIGHBOR_RESPONSE;
     ad8:	82 e0       	ldi	r24, 0x02	; 2
     ada:	8a 83       	std	Y+2, r24	; 0x02
	      GUIDIntoChar(getGUID(), &(buf[2]));
     adc:	0e 94 08 1a 	call	0x3410	; 0x3410 <getGUID>
threadvar Timer ttNeighbor[6];

// converts a UID into a passed in character stream.  Assumes 2-byte GUIDs.
void GUIDIntoChar(Uid id, byte * c)
{
    c[0] = (id >> 8) & 0x00FF;
     ae0:	9b 83       	std	Y+3, r25	; 0x03
    c[1] = (id & 0x00FF); 
     ae2:	8c 83       	std	Y+4, r24	; 0x04
	      // [handshake header] [my guid] [your guid]
	      byte buf[6];
	      buf[0] = NEIGHBOR_MSG;
	      buf[1] = MSG_NEIGHBOR_RESPONSE;
	      GUIDIntoChar(getGUID(), &(buf[2]));
	      buf[4] = thisChunk->data[2];
     ae4:	e0 91 4b 21 	lds	r30, 0x214B
     ae8:	f0 91 4c 21 	lds	r31, 0x214C
     aec:	82 81       	ldd	r24, Z+2	; 0x02
     aee:	8d 83       	std	Y+5, r24	; 0x05
	      buf[5] = thisChunk->data[3];
     af0:	83 81       	ldd	r24, Z+3	; 0x03
     af2:	8e 83       	std	Y+6, r24	; 0x06
	
	      // if our neighbor is already vacant, nothing happens.
	      // if this guid == old guid, they got reset somehow, so drop neighbor so user can re-add gracefully
	      // if this guid != old guid, then we got a new block, so drop neighbor so user can re-add gracefully
	      updateNeighbor(faceNum(thisChunk), VACANT);
     af4:	81 89       	ldd	r24, Z+17	; 0x11
     af6:	60 e0       	ldi	r22, 0x00	; 0
     af8:	70 e0       	ldi	r23, 0x00	; 0
     afa:	87 70       	andi	r24, 0x07	; 7
     afc:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <updateNeighbor>
	    
	      // stop any imminent timeouts such as neighborscanning
	      disableTimer(ttNeighbor[faceNum(thisChunk)]);
     b00:	a0 91 4b 21 	lds	r26, 0x214B
     b04:	b0 91 4c 21 	lds	r27, 0x214C
     b08:	51 96       	adiw	r26, 0x11	; 17
     b0a:	ec 91       	ld	r30, X
     b0c:	51 97       	sbiw	r26, 0x11	; 17
     b0e:	e7 70       	andi	r30, 0x07	; 7
     b10:	1e 9f       	mul	r17, r30
     b12:	f0 01       	movw	r30, r0
     b14:	11 24       	eor	r1, r1
     b16:	e7 5a       	subi	r30, 0xA7	; 167
     b18:	fe 4d       	sbci	r31, 0xDE	; 222
     b1a:	10 8a       	std	Z+16, r1	; 0x10
	      if(ttNeighbor[faceNum(thisChunk)].t.state != INACTIVE)
     b1c:	51 96       	adiw	r26, 0x11	; 17
     b1e:	8c 91       	ld	r24, X
     b20:	87 70       	andi	r24, 0x07	; 7
     b22:	18 9f       	mul	r17, r24
     b24:	c0 01       	movw	r24, r0
     b26:	11 24       	eor	r1, r1
     b28:	fc 01       	movw	r30, r24
     b2a:	e7 5a       	subi	r30, 0xA7	; 167
     b2c:	fe 4d       	sbci	r31, 0xDE	; 222
     b2e:	22 85       	ldd	r18, Z+10	; 0x0a
     b30:	22 23       	and	r18, r18
     b32:	21 f0       	breq	.+8      	; 0xb3c <handleNeighborMessage+0xc2>
		{
		  deregisterTimeout(&(ttNeighbor[faceNum(thisChunk)].t));
     b34:	85 5a       	subi	r24, 0xA5	; 165
     b36:	9e 4d       	sbci	r25, 0xDE	; 222
     b38:	0e 94 04 0a 	call	0x1408	; 0x1408 <deregisterTimeout>
		}

	      // callback will add neighbor or restart scanning, as necessary
	      sendSystemMessage(faceNum(thisChunk), buf, 6, RES_SYS_HANDLER, (GenericHandler)&neighborHandshakeCB);
     b3c:	e0 91 4b 21 	lds	r30, 0x214B
     b40:	f0 91 4c 21 	lds	r31, 0x214C
     b44:	81 89       	ldd	r24, Z+17	; 0x11
     b46:	0d e5       	ldi	r16, 0x5D	; 93
     b48:	16 e0       	ldi	r17, 0x06	; 6
     b4a:	20 e0       	ldi	r18, 0x00	; 0
     b4c:	30 e0       	ldi	r19, 0x00	; 0
     b4e:	46 e0       	ldi	r20, 0x06	; 6
     b50:	be 01       	movw	r22, r28
     b52:	6f 5f       	subi	r22, 0xFF	; 255
     b54:	7f 4f       	sbci	r23, 0xFF	; 255
     b56:	87 70       	andi	r24, 0x07	; 7
     b58:	0e 94 a4 08 	call	0x1148	; 0x1148 <sendSystemMessage>
     b5c:	a2 c0       	rjmp	.+324    	; 0xca2 <handleNeighborMessage+0x228>
      }
      // got a response to our request for a neighbor handshake
      case MSG_NEIGHBOR_RESPONSE:
      {
	    // are we waiting for a handshake?  well, here it is!
	    if((ttNeighbor[faceNum(thisChunk)]).period == NEIGHBOR_HANDSHAKE_TIMEOUT_PERIOD)
     b5e:	a1 89       	ldd	r26, Z+17	; 0x11
     b60:	a7 70       	andi	r26, 0x07	; 7
     b62:	51 e1       	ldi	r21, 0x11	; 17
     b64:	d5 2e       	mov	r13, r21
     b66:	da 9e       	mul	r13, r26
     b68:	d0 01       	movw	r26, r0
     b6a:	11 24       	eor	r1, r1
     b6c:	a7 5a       	subi	r26, 0xA7	; 167
     b6e:	be 4d       	sbci	r27, 0xDE	; 222
     b70:	1c 96       	adiw	r26, 0x0c	; 12
     b72:	4d 91       	ld	r20, X+
     b74:	5d 91       	ld	r21, X+
     b76:	6d 91       	ld	r22, X+
     b78:	7c 91       	ld	r23, X
     b7a:	1f 97       	sbiw	r26, 0x0f	; 15
     b7c:	44 36       	cpi	r20, 0x64	; 100
     b7e:	51 05       	cpc	r21, r1
     b80:	61 05       	cpc	r22, r1
     b82:	71 05       	cpc	r23, r1
     b84:	09 f0       	breq	.+2      	; 0xb88 <handleNeighborMessage+0x10e>
     b86:	8d c0       	rjmp	.+282    	; 0xca2 <handleNeighborMessage+0x228>
// takes a passed in character array and returns a UID representing the array.  Assumes 2-byte GUIDs.
Uid charToGUID(byte * c)
{
    Uid tmp;

    tmp = (Uid)(c[0]) << 8;
     b88:	02 81       	ldd	r16, Z+2	; 0x02
    tmp |= c[1];
     b8a:	13 81       	ldd	r17, Z+3	; 0x03
// takes a passed in character array and returns a UID representing the array.  Assumes 2-byte GUIDs.
Uid charToGUID(byte * c)
{
    Uid tmp;

    tmp = (Uid)(c[0]) << 8;
     b8c:	34 81       	ldd	r19, Z+4	; 0x04
     b8e:	20 e0       	ldi	r18, 0x00	; 0
    tmp |= c[1];
     b90:	85 81       	ldd	r24, Z+5	; 0x05
     b92:	79 01       	movw	r14, r18
     b94:	e8 2a       	or	r14, r24
	        // pull [your guid][my guid] from the handshake packet - reversed from how it was sent
	        neighbor = charToGUID(&(thisChunk->data[2]));
	        me = charToGUID(&(thisChunk->data[4]));
	    
	        // got a sensible response
	        if(me == getGUID())
     b96:	0e 94 08 1a 	call	0x3410	; 0x3410 <getGUID>
     b9a:	e8 16       	cp	r14, r24
     b9c:	f9 06       	cpc	r15, r25
     b9e:	09 f0       	breq	.+2      	; 0xba2 <handleNeighborMessage+0x128>
     ba0:	80 c0       	rjmp	.+256    	; 0xca2 <handleNeighborMessage+0x228>
	        {
		        // stop any imminent rescans
		        disableTimer(ttNeighbor[faceNum(thisChunk)]);
     ba2:	a0 91 4b 21 	lds	r26, 0x214B
     ba6:	b0 91 4c 21 	lds	r27, 0x214C
     baa:	51 96       	adiw	r26, 0x11	; 17
     bac:	ec 91       	ld	r30, X
     bae:	51 97       	sbiw	r26, 0x11	; 17
     bb0:	e7 70       	andi	r30, 0x07	; 7
     bb2:	de 9e       	mul	r13, r30
     bb4:	f0 01       	movw	r30, r0
     bb6:	11 24       	eor	r1, r1
     bb8:	e7 5a       	subi	r30, 0xA7	; 167
     bba:	fe 4d       	sbci	r31, 0xDE	; 222
     bbc:	10 8a       	std	Z+16, r1	; 0x10
			if(ttNeighbor[faceNum(thisChunk)].t.state != INACTIVE)
     bbe:	51 96       	adiw	r26, 0x11	; 17
     bc0:	8c 91       	ld	r24, X
     bc2:	87 70       	andi	r24, 0x07	; 7
     bc4:	d8 9e       	mul	r13, r24
     bc6:	c0 01       	movw	r24, r0
     bc8:	11 24       	eor	r1, r1
     bca:	fc 01       	movw	r30, r24
     bcc:	e7 5a       	subi	r30, 0xA7	; 167
     bce:	fe 4d       	sbci	r31, 0xDE	; 222
     bd0:	22 85       	ldd	r18, Z+10	; 0x0a
     bd2:	22 23       	and	r18, r18
     bd4:	21 f0       	breq	.+8      	; 0xbde <handleNeighborMessage+0x164>
			  {
			    deregisterTimeout(&(ttNeighbor[faceNum(thisChunk)].t));
     bd6:	85 5a       	subi	r24, 0xA5	; 165
     bd8:	9e 4d       	sbci	r25, 0xDE	; 222
     bda:	0e 94 04 0a 	call	0x1408	; 0x1408 <deregisterTimeout>
			  }
		
		        // re-add timer, but now for keepalive purposes
		        ttNeighbor[faceNum(thisChunk)].period = NEIGHBOR_KEEPALIVE_PERIOD;
     bde:	20 91 4b 21 	lds	r18, 0x214B
     be2:	30 91 4c 21 	lds	r19, 0x214C
     be6:	d9 01       	movw	r26, r18
     be8:	51 96       	adiw	r26, 0x11	; 17
     bea:	ec 91       	ld	r30, X
     bec:	e7 70       	andi	r30, 0x07	; 7
     bee:	b1 e1       	ldi	r27, 0x11	; 17
     bf0:	eb 9f       	mul	r30, r27
     bf2:	f0 01       	movw	r30, r0
     bf4:	11 24       	eor	r1, r1
     bf6:	e7 5a       	subi	r30, 0xA7	; 167
     bf8:	fe 4d       	sbci	r31, 0xDE	; 222
     bfa:	84 ef       	ldi	r24, 0xF4	; 244
     bfc:	91 e0       	ldi	r25, 0x01	; 1
     bfe:	a0 e0       	ldi	r26, 0x00	; 0
     c00:	b0 e0       	ldi	r27, 0x00	; 0
     c02:	84 87       	std	Z+12, r24	; 0x0c
     c04:	95 87       	std	Z+13, r25	; 0x0d
     c06:	a6 87       	std	Z+14, r26	; 0x0e
     c08:	b7 87       	std	Z+15, r27	; 0x0f
		        ttNeighbor[faceNum(thisChunk)].t.callback = (GenericHandler)&neighborKeepalive;
     c0a:	84 ef       	ldi	r24, 0xF4	; 244
     c0c:	93 e0       	ldi	r25, 0x03	; 3
     c0e:	80 87       	std	Z+8, r24	; 0x08
     c10:	91 87       	std	Z+9, r25	; 0x09
        		enableTimer(ttNeighbor[faceNum(thisChunk)]);
     c12:	81 e0       	ldi	r24, 0x01	; 1
     c14:	80 8b       	std	Z+16, r24	; 0x10
// takes a passed in character array and returns a UID representing the array.  Assumes 2-byte GUIDs.
Uid charToGUID(byte * c)
{
    Uid tmp;

    tmp = (Uid)(c[0]) << 8;
     c16:	70 2f       	mov	r23, r16
     c18:	60 e0       	ldi	r22, 0x00	; 0
    tmp |= c[1];
     c1a:	61 2b       	or	r22, r17
		        ttNeighbor[faceNum(thisChunk)].period = NEIGHBOR_KEEPALIVE_PERIOD;
		        ttNeighbor[faceNum(thisChunk)].t.callback = (GenericHandler)&neighborKeepalive;
        		enableTimer(ttNeighbor[faceNum(thisChunk)]);
		
		        // add new neighbor to neighborhood
        		updateNeighbor(faceNum(thisChunk), neighbor);
     c1c:	f9 01       	movw	r30, r18
     c1e:	81 89       	ldd	r24, Z+17	; 0x11
     c20:	87 70       	andi	r24, 0x07	; 7
     c22:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <updateNeighbor>
     c26:	3d c0       	rjmp	.+122    	; 0xca2 <handleNeighborMessage+0x228>
	    break;
      }
      case MSG_NEIGHBOR_KEEPALIVE:
      {
	    // are we currently looking for keepalives?  if yes, here it is!
	    if((ttNeighbor[faceNum(thisChunk)]).period == NEIGHBOR_KEEPALIVE_PERIOD)
     c28:	a1 89       	ldd	r26, Z+17	; 0x11
     c2a:	a7 70       	andi	r26, 0x07	; 7
     c2c:	21 e1       	ldi	r18, 0x11	; 17
     c2e:	a2 9f       	mul	r26, r18
     c30:	d0 01       	movw	r26, r0
     c32:	11 24       	eor	r1, r1
     c34:	a7 5a       	subi	r26, 0xA7	; 167
     c36:	be 4d       	sbci	r27, 0xDE	; 222
     c38:	1c 96       	adiw	r26, 0x0c	; 12
     c3a:	8d 91       	ld	r24, X+
     c3c:	9d 91       	ld	r25, X+
     c3e:	0d 90       	ld	r0, X+
     c40:	bc 91       	ld	r27, X
     c42:	a0 2d       	mov	r26, r0
     c44:	84 3f       	cpi	r24, 0xF4	; 244
     c46:	91 40       	sbci	r25, 0x01	; 1
     c48:	a1 05       	cpc	r26, r1
     c4a:	b1 05       	cpc	r27, r1
     c4c:	51 f5       	brne	.+84     	; 0xca2 <handleNeighborMessage+0x228>
// takes a passed in character array and returns a UID representing the array.  Assumes 2-byte GUIDs.
Uid charToGUID(byte * c)
{
    Uid tmp;

    tmp = (Uid)(c[0]) << 8;
     c4e:	e2 80       	ldd	r14, Z+2	; 0x02
    tmp |= c[1];
     c50:	f3 80       	ldd	r15, Z+3	; 0x03
// takes a passed in character array and returns a UID representing the array.  Assumes 2-byte GUIDs.
Uid charToGUID(byte * c)
{
    Uid tmp;

    tmp = (Uid)(c[0]) << 8;
     c52:	94 81       	ldd	r25, Z+4	; 0x04
     c54:	80 e0       	ldi	r24, 0x00	; 0
    tmp |= c[1];
     c56:	25 81       	ldd	r18, Z+5	; 0x05
     c58:	8c 01       	movw	r16, r24
     c5a:	02 2b       	or	r16, r18

	        neighbor = charToGUID(&(thisChunk->data[2]));
	        me = charToGUID(&(thisChunk->data[4]));

	        // got a bad or unexpected response - clear neighbor and restart scan
	        if(me != getGUID() || neighbor != thisNeighborhood.n[faceNum(thisChunk)])
     c5c:	0e 94 08 1a 	call	0x3410	; 0x3410 <getGUID>
     c60:	08 17       	cp	r16, r24
     c62:	19 07       	cpc	r17, r25
     c64:	99 f4       	brne	.+38     	; 0xc8c <handleNeighborMessage+0x212>
// takes a passed in character array and returns a UID representing the array.  Assumes 2-byte GUIDs.
Uid charToGUID(byte * c)
{
    Uid tmp;

    tmp = (Uid)(c[0]) << 8;
     c66:	9e 2d       	mov	r25, r14
     c68:	80 e0       	ldi	r24, 0x00	; 0
    tmp |= c[1];
     c6a:	8f 29       	or	r24, r15

	        neighbor = charToGUID(&(thisChunk->data[2]));
	        me = charToGUID(&(thisChunk->data[4]));

	        // got a bad or unexpected response - clear neighbor and restart scan
	        if(me != getGUID() || neighbor != thisNeighborhood.n[faceNum(thisChunk)])
     c6c:	e0 91 4b 21 	lds	r30, 0x214B
     c70:	f0 91 4c 21 	lds	r31, 0x214C
     c74:	e1 89       	ldd	r30, Z+17	; 0x11
     c76:	e7 70       	andi	r30, 0x07	; 7
     c78:	f0 e0       	ldi	r31, 0x00	; 0
     c7a:	ee 0f       	add	r30, r30
     c7c:	ff 1f       	adc	r31, r31
     c7e:	e3 5b       	subi	r30, 0xB3	; 179
     c80:	fe 4d       	sbci	r31, 0xDE	; 222
     c82:	20 81       	ld	r18, Z
     c84:	31 81       	ldd	r19, Z+1	; 0x01
     c86:	82 17       	cp	r24, r18
     c88:	93 07       	cpc	r25, r19
     c8a:	59 f0       	breq	.+22     	; 0xca2 <handleNeighborMessage+0x228>
	        {
		        restartScan(faceNum(thisChunk));
     c8c:	e0 91 4b 21 	lds	r30, 0x214B
     c90:	f0 91 4c 21 	lds	r31, 0x214C
     c94:	81 89       	ldd	r24, Z+17	; 0x11
     c96:	87 70       	andi	r24, 0x07	; 7
     c98:	0e 94 08 05 	call	0xa10	; 0xa10 <restartScan>
     c9c:	02 c0       	rjmp	.+4      	; 0xca2 <handleNeighborMessage+0x228>
// called for all NEIGHBOR_MSG type reserved system handlers
byte handleNeighborMessage(void)
{
    if( thisChunk == NULL ) 
    {
      return 0;
     c9e:	80 e0       	ldi	r24, 0x00	; 0
     ca0:	01 c0       	rjmp	.+2      	; 0xca4 <handleNeighborMessage+0x22a>
        break;
      }
      default: 
        break;  
    }
    return 1;
     ca2:	81 e0       	ldi	r24, 0x01	; 1
}
     ca4:	26 96       	adiw	r28, 0x06	; 6
     ca6:	cd bf       	out	0x3d, r28	; 61
     ca8:	de bf       	out	0x3e, r29	; 62
     caa:	df 91       	pop	r29
     cac:	cf 91       	pop	r28
     cae:	1f 91       	pop	r17
     cb0:	0f 91       	pop	r16
     cb2:	ff 90       	pop	r15
     cb4:	ef 90       	pop	r14
     cb6:	df 90       	pop	r13
     cb8:	08 95       	ret

00000cba <neighborHandshakeCB>:
  sendSystemMessage(thisTimeout->arg, buf, 6, RES_SYS_HANDLER, (GenericHandler)&neighborKeepaliveCB);
}

// callback for neighbor_response packet
void neighborHandshakeCB(void)
{
     cba:	cf 93       	push	r28
     cbc:	df 93       	push	r29
    // message was received.  add neighbor to neighborhood and initiate keepalives
    if(chunkResponseType(thisChunk) == MSG_RESP_ACK)
     cbe:	e0 91 4b 21 	lds	r30, 0x214B
     cc2:	f0 91 4c 21 	lds	r31, 0x214C
     cc6:	81 89       	ldd	r24, Z+17	; 0x11
     cc8:	98 2f       	mov	r25, r24
     cca:	98 71       	andi	r25, 0x18	; 24
     ccc:	98 30       	cpi	r25, 0x08	; 8
     cce:	b9 f5       	brne	.+110    	; 0xd3e <neighborHandshakeCB+0x84>
// takes a passed in character array and returns a UID representing the array.  Assumes 2-byte GUIDs.
Uid charToGUID(byte * c)
{
    Uid tmp;

    tmp = (Uid)(c[0]) << 8;
     cd0:	74 81       	ldd	r23, Z+4	; 0x04
     cd2:	60 e0       	ldi	r22, 0x00	; 0
    tmp |= c[1];
     cd4:	95 81       	ldd	r25, Z+5	; 0x05
     cd6:	eb 01       	movw	r28, r22
     cd8:	c9 2b       	or	r28, r25
    {
      // pull neighbor from packet, same position as how we initially sent it
      Uid neighbor = charToGUID(&(thisChunk->data[4]));
      
      // re-add timer for keepalive purposes
      ttNeighbor[faceNum(thisChunk)].period = NEIGHBOR_KEEPALIVE_PERIOD;
     cda:	87 70       	andi	r24, 0x07	; 7
     cdc:	21 e1       	ldi	r18, 0x11	; 17
     cde:	82 9f       	mul	r24, r18
     ce0:	c0 01       	movw	r24, r0
     ce2:	11 24       	eor	r1, r1
     ce4:	fc 01       	movw	r30, r24
     ce6:	e7 5a       	subi	r30, 0xA7	; 167
     ce8:	fe 4d       	sbci	r31, 0xDE	; 222
     cea:	44 ef       	ldi	r20, 0xF4	; 244
     cec:	51 e0       	ldi	r21, 0x01	; 1
     cee:	60 e0       	ldi	r22, 0x00	; 0
     cf0:	70 e0       	ldi	r23, 0x00	; 0
     cf2:	44 87       	std	Z+12, r20	; 0x0c
     cf4:	55 87       	std	Z+13, r21	; 0x0d
     cf6:	66 87       	std	Z+14, r22	; 0x0e
     cf8:	77 87       	std	Z+15, r23	; 0x0f
      if(ttNeighbor[faceNum(thisChunk)].t.state != INACTIVE)
     cfa:	22 85       	ldd	r18, Z+10	; 0x0a
     cfc:	22 23       	and	r18, r18
     cfe:	21 f0       	breq	.+8      	; 0xd08 <neighborHandshakeCB+0x4e>
	{
	  deregisterTimeout(&(ttNeighbor[faceNum(thisChunk)].t));
     d00:	85 5a       	subi	r24, 0xA5	; 165
     d02:	9e 4d       	sbci	r25, 0xDE	; 222
     d04:	0e 94 04 0a 	call	0x1408	; 0x1408 <deregisterTimeout>
	}
      ttNeighbor[faceNum(thisChunk)].t.callback = (GenericHandler)&neighborKeepalive;
     d08:	a0 91 4b 21 	lds	r26, 0x214B
     d0c:	b0 91 4c 21 	lds	r27, 0x214C
     d10:	51 96       	adiw	r26, 0x11	; 17
     d12:	ec 91       	ld	r30, X
     d14:	51 97       	sbiw	r26, 0x11	; 17
     d16:	e7 70       	andi	r30, 0x07	; 7
     d18:	81 e1       	ldi	r24, 0x11	; 17
     d1a:	e8 9f       	mul	r30, r24
     d1c:	f0 01       	movw	r30, r0
     d1e:	11 24       	eor	r1, r1
     d20:	e7 5a       	subi	r30, 0xA7	; 167
     d22:	fe 4d       	sbci	r31, 0xDE	; 222
     d24:	84 ef       	ldi	r24, 0xF4	; 244
     d26:	93 e0       	ldi	r25, 0x03	; 3
     d28:	80 87       	std	Z+8, r24	; 0x08
     d2a:	91 87       	std	Z+9, r25	; 0x09
      enableTimer(ttNeighbor[faceNum(thisChunk)]);
     d2c:	81 e0       	ldi	r24, 0x01	; 1
     d2e:	80 8b       	std	Z+16, r24	; 0x10
      
      // add new neighbor to neighborhood
      updateNeighbor(faceNum(thisChunk), neighbor);
     d30:	51 96       	adiw	r26, 0x11	; 17
     d32:	8c 91       	ld	r24, X
     d34:	be 01       	movw	r22, r28
     d36:	87 70       	andi	r24, 0x07	; 7
     d38:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <updateNeighbor>
     d3c:	03 c0       	rjmp	.+6      	; 0xd44 <neighborHandshakeCB+0x8a>

    }
    else // no neighbor ACK!  begin rescanning
    {
      restartScan(faceNum(thisChunk));
     d3e:	87 70       	andi	r24, 0x07	; 7
     d40:	0e 94 08 05 	call	0xa10	; 0xa10 <restartScan>
    }
  
  freeChunk(thisChunk);
     d44:	80 91 4b 21 	lds	r24, 0x214B
     d48:	90 91 4c 21 	lds	r25, 0x214C
}
     d4c:	df 91       	pop	r29
     d4e:	cf 91       	pop	r28
    else // no neighbor ACK!  begin rescanning
    {
      restartScan(faceNum(thisChunk));
    }
  
  freeChunk(thisChunk);
     d50:	0c 94 2f 08 	jmp	0x105e	; 0x105e <freeChunk>

00000d54 <neighborKeepaliveCB>:
void neighborKeepaliveCB(void)
{
    // message was received.  re-enable timer and continue as normal
    // note that since we always ACK a received message, this will happen even if the other block 
    // does not understand why the keepalive was sent.  however, the other block will restart a handshake.
    if(chunkResponseType(thisChunk) == MSG_RESP_ACK)
     d54:	e0 91 4b 21 	lds	r30, 0x214B
     d58:	f0 91 4c 21 	lds	r31, 0x214C
     d5c:	81 89       	ldd	r24, Z+17	; 0x11
     d5e:	98 2f       	mov	r25, r24
     d60:	98 71       	andi	r25, 0x18	; 24
     d62:	87 70       	andi	r24, 0x07	; 7
     d64:	98 30       	cpi	r25, 0x08	; 8
     d66:	49 f4       	brne	.+18     	; 0xd7a <neighborKeepaliveCB+0x26>
    {
        enableTimer(ttNeighbor[faceNum(thisChunk)]);
     d68:	91 e1       	ldi	r25, 0x11	; 17
     d6a:	89 9f       	mul	r24, r25
     d6c:	f0 01       	movw	r30, r0
     d6e:	11 24       	eor	r1, r1
     d70:	e7 5a       	subi	r30, 0xA7	; 167
     d72:	fe 4d       	sbci	r31, 0xDE	; 222
     d74:	81 e0       	ldi	r24, 0x01	; 1
     d76:	80 8b       	std	Z+16, r24	; 0x10
     d78:	02 c0       	rjmp	.+4      	; 0xd7e <neighborKeepaliveCB+0x2a>
    }
    else // neighbor lost!  begin rescanning
    {
        restartScan(faceNum(thisChunk));
     d7a:	0e 94 08 05 	call	0xa10	; 0xa10 <restartScan>
    }

    freeChunk(thisChunk);
     d7e:	80 91 4b 21 	lds	r24, 0x214B
     d82:	90 91 4c 21 	lds	r25, 0x214C
     d86:	0c 94 2f 08 	jmp	0x105e	; 0x105e <freeChunk>

00000d8a <initEnsemble>:
  (ttNeighbor[i]).period = NEIGHBOR_SCAN_PERIOD;
  enableTimer(ttNeighbor[i]);
}

void initEnsemble(void)
{
     d8a:	ff 92       	push	r15
     d8c:	0f 93       	push	r16
     d8e:	1f 93       	push	r17
     d90:	cf 93       	push	r28
     d92:	df 93       	push	r29
     d94:	09 e6       	ldi	r16, 0x69	; 105
     d96:	11 e2       	ldi	r17, 0x21	; 33
    int i;
  
    // restart scanning for neighbors on all ports
    for( i=0; i<NUM_PORTS; ++i)
     d98:	c0 e0       	ldi	r28, 0x00	; 0
     d9a:	d0 e0       	ldi	r29, 0x00	; 0
        if(i == DEBUGPORT) {
            continue;
        }
        #endif

	registerTimer(&(ttNeighbor[i]));
     d9c:	61 e1       	ldi	r22, 0x11	; 17
     d9e:	f6 2e       	mov	r15, r22
     da0:	fc 9e       	mul	r15, r28
     da2:	c0 01       	movw	r24, r0
     da4:	fd 9e       	mul	r15, r29
     da6:	90 0d       	add	r25, r0
     da8:	11 24       	eor	r1, r1
     daa:	87 5a       	subi	r24, 0xA7	; 167
     dac:	9e 4d       	sbci	r25, 0xDE	; 222
     dae:	0e 94 85 0a 	call	0x150a	; 0x150a <registerTimer>
	disableTimer(ttNeighbor[i]);
     db2:	f8 01       	movw	r30, r16
     db4:	10 82       	st	Z, r1
        restartScan(i);
     db6:	8c 2f       	mov	r24, r28
     db8:	0e 94 08 05 	call	0xa10	; 0xa10 <restartScan>
void initEnsemble(void)
{
    int i;
  
    // restart scanning for neighbors on all ports
    for( i=0; i<NUM_PORTS; ++i)
     dbc:	21 96       	adiw	r28, 0x01	; 1
     dbe:	0f 5e       	subi	r16, 0xEF	; 239
     dc0:	1f 4f       	sbci	r17, 0xFF	; 255
     dc2:	c6 30       	cpi	r28, 0x06	; 6
     dc4:	d1 05       	cpc	r29, r1
     dc6:	61 f7       	brne	.-40     	; 0xda0 <initEnsemble+0x16>

	registerTimer(&(ttNeighbor[i]));
	disableTimer(ttNeighbor[i]);
        restartScan(i);
    }
}
     dc8:	df 91       	pop	r29
     dca:	cf 91       	pop	r28
     dcc:	1f 91       	pop	r17
     dce:	0f 91       	pop	r16
     dd0:	ff 90       	pop	r15
     dd2:	08 95       	ret

00000dd4 <initHandlers>:
threadvar SystemHandler system;


void initHandlers(void){
  int i;
  system.HandlerMask=0;
     dd4:	10 92 bf 21 	sts	0x21BF, r1
     dd8:	10 92 c0 21 	sts	0x21C0, r1
     ddc:	10 92 c1 21 	sts	0x21C1, r1
     de0:	10 92 c2 21 	sts	0x21C2, r1
     de4:	10 92 c3 21 	sts	0x21C3, r1
     de8:	10 92 c4 21 	sts	0x21C4, r1
     dec:	10 92 c5 21 	sts	0x21C5, r1
     df0:	10 92 c6 21 	sts	0x21C6, r1
     df4:	e7 ec       	ldi	r30, 0xC7	; 199
     df6:	f1 e2       	ldi	r31, 0x21	; 33
  for( i=0; i<NUM_HANDLERS; i++){
    system.HandlerTable[i]=NULL;
     df8:	11 92       	st	Z+, r1
     dfa:	11 92       	st	Z+, r1


void initHandlers(void){
  int i;
  system.HandlerMask=0;
  for( i=0; i<NUM_HANDLERS; i++){
     dfc:	82 e2       	ldi	r24, 0x22	; 34
     dfe:	e7 30       	cpi	r30, 0x07	; 7
     e00:	f8 07       	cpc	r31, r24
     e02:	d1 f7       	brne	.-12     	; 0xdf8 <initHandlers+0x24>
    system.HandlerTable[i]=NULL;
  }
}
     e04:	08 95       	ret

00000e06 <executeHandlers>:
//
//  if any mask is set, will scan through and execute handlers in ascending numerical order.
//  it is technically possible to trigger handlers during earlier handlers, or even the same handler repeatedly.
//  triggering an earlier handler will cause it to execute during the next iteration.
void executeHandlers(void)
{
     e06:	8f 92       	push	r8
     e08:	9f 92       	push	r9
     e0a:	af 92       	push	r10
     e0c:	bf 92       	push	r11
     e0e:	cf 92       	push	r12
     e10:	df 92       	push	r13
     e12:	ef 92       	push	r14
     e14:	ff 92       	push	r15
     e16:	0f 93       	push	r16
     e18:	1f 93       	push	r17
     e1a:	cf 93       	push	r28
     e1c:	df 93       	push	r29
	if(system.HandlerMask)
     e1e:	20 91 bf 21 	lds	r18, 0x21BF
     e22:	30 91 c0 21 	lds	r19, 0x21C0
     e26:	40 91 c1 21 	lds	r20, 0x21C1
     e2a:	50 91 c2 21 	lds	r21, 0x21C2
     e2e:	60 91 c3 21 	lds	r22, 0x21C3
     e32:	70 91 c4 21 	lds	r23, 0x21C4
     e36:	80 91 c5 21 	lds	r24, 0x21C5
     e3a:	90 91 c6 21 	lds	r25, 0x21C6
     e3e:	a0 e0       	ldi	r26, 0x00	; 0
     e40:	0e 94 41 26 	call	0x4c82	; 0x4c82 <__cmpdi2_s8>
     e44:	09 f4       	brne	.+2      	; 0xe48 <executeHandlers+0x42>
     e46:	49 c0       	rjmp	.+146    	; 0xeda <executeHandlers+0xd4>
     e48:	07 ec       	ldi	r16, 0xC7	; 199
     e4a:	11 e2       	ldi	r17, 0x21	; 33
//  ExecuteHandlers
//
//  if any mask is set, will scan through and execute handlers in ascending numerical order.
//  it is technically possible to trigger handlers during earlier handlers, or even the same handler repeatedly.
//  triggering an earlier handler will cause it to execute during the next iteration.
void executeHandlers(void)
     e4c:	c1 2c       	mov	r12, r1
     e4e:	d1 2c       	mov	r13, r1
     e50:	76 01       	movw	r14, r12
     e52:	c3 94       	inc	r12
		Event i = 0;
		uint32_t j = 0x00000001;
	
		while(i < NUM_HANDLERS)
		{
			if(system.HandlerMask & j)
     e54:	80 90 bf 21 	lds	r8, 0x21BF
     e58:	90 90 c0 21 	lds	r9, 0x21C0
     e5c:	a0 90 c1 21 	lds	r10, 0x21C1
     e60:	b0 90 c2 21 	lds	r11, 0x21C2
     e64:	d7 01       	movw	r26, r14
     e66:	c6 01       	movw	r24, r12
     e68:	2c 2d       	mov	r18, r12
     e6a:	28 21       	and	r18, r8
     e6c:	39 2f       	mov	r19, r25
     e6e:	39 21       	and	r19, r9
     e70:	4a 2f       	mov	r20, r26
     e72:	4a 21       	and	r20, r10
     e74:	5b 2f       	mov	r21, r27
     e76:	5b 21       	and	r21, r11
     e78:	60 e0       	ldi	r22, 0x00	; 0
     e7a:	70 e0       	ldi	r23, 0x00	; 0
     e7c:	80 e0       	ldi	r24, 0x00	; 0
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	a0 e0       	ldi	r26, 0x00	; 0
     e82:	0e 94 41 26 	call	0x4c82	; 0x4c82 <__cmpdi2_s8>
     e86:	f1 f0       	breq	.+60     	; 0xec4 <executeHandlers+0xbe>
			{
				// clear mask bit1
				system.HandlerMask &= ~j;
     e88:	d7 01       	movw	r26, r14
     e8a:	c6 01       	movw	r24, r12
     e8c:	80 95       	com	r24
     e8e:	90 95       	com	r25
     e90:	a0 95       	com	r26
     e92:	b0 95       	com	r27
     e94:	88 22       	and	r8, r24
     e96:	99 22       	and	r9, r25
     e98:	aa 22       	and	r10, r26
     e9a:	bb 22       	and	r11, r27
     e9c:	80 92 bf 21 	sts	0x21BF, r8
     ea0:	90 92 c0 21 	sts	0x21C0, r9
     ea4:	a0 92 c1 21 	sts	0x21C1, r10
     ea8:	b0 92 c2 21 	sts	0x21C2, r11
     eac:	10 92 c3 21 	sts	0x21C3, r1
     eb0:	10 92 c4 21 	sts	0x21C4, r1
     eb4:	10 92 c5 21 	sts	0x21C5, r1
     eb8:	10 92 c6 21 	sts	0x21C6, r1
				
				// execute callback
				(*(system.HandlerTable[i]))();
     ebc:	d8 01       	movw	r26, r16
     ebe:	ed 91       	ld	r30, X+
     ec0:	fc 91       	ld	r31, X
     ec2:	19 95       	eicall
			}

			i++;
			j <<= 1;
     ec4:	cc 0c       	add	r12, r12
     ec6:	dd 1c       	adc	r13, r13
     ec8:	ee 1c       	adc	r14, r14
     eca:	ff 1c       	adc	r15, r15
     ecc:	0e 5f       	subi	r16, 0xFE	; 254
     ece:	1f 4f       	sbci	r17, 0xFF	; 255
	if(system.HandlerMask)
	{
		Event i = 0;
		uint32_t j = 0x00000001;
	
		while(i < NUM_HANDLERS)
     ed0:	b2 e2       	ldi	r27, 0x22	; 34
     ed2:	07 30       	cpi	r16, 0x07	; 7
     ed4:	1b 07       	cpc	r17, r27
     ed6:	09 f0       	breq	.+2      	; 0xeda <executeHandlers+0xd4>
     ed8:	bd cf       	rjmp	.-134    	; 0xe54 <executeHandlers+0x4e>

			i++;
			j <<= 1;
		}
	}
}
     eda:	df 91       	pop	r29
     edc:	cf 91       	pop	r28
     ede:	1f 91       	pop	r17
     ee0:	0f 91       	pop	r16
     ee2:	ff 90       	pop	r15
     ee4:	ef 90       	pop	r14
     ee6:	df 90       	pop	r13
     ee8:	cf 90       	pop	r12
     eea:	bf 90       	pop	r11
     eec:	af 90       	pop	r10
     eee:	9f 90       	pop	r9
     ef0:	8f 90       	pop	r8
     ef2:	08 95       	ret

00000ef4 <triggerHandler>:
//TriggerHandler
//	will trigger a callback for a valid event and valid handler
//  execution will occur during the CURRENT or NEXT handler scan
// 	returns 1 on success, 0 on failure
int triggerHandler(Event e)
{
     ef4:	cf 93       	push	r28
     ef6:	df 93       	push	r29
     ef8:	48 2f       	mov	r20, r24
	if(e < NUM_HANDLERS)
     efa:	80 32       	cpi	r24, 0x20	; 32
     efc:	60 f5       	brcc	.+88     	; 0xf56 <triggerHandler+0x62>
	{
		if(system.HandlerTable[e] == NULL)
     efe:	e8 2f       	mov	r30, r24
     f00:	f0 e0       	ldi	r31, 0x00	; 0
     f02:	ee 0f       	add	r30, r30
     f04:	ff 1f       	adc	r31, r31
     f06:	e9 53       	subi	r30, 0x39	; 57
     f08:	fe 4d       	sbci	r31, 0xDE	; 222
     f0a:	20 81       	ld	r18, Z
     f0c:	31 81       	ldd	r19, Z+1	; 0x01
     f0e:	23 2b       	or	r18, r19
     f10:	11 f1       	breq	.+68     	; 0xf56 <triggerHandler+0x62>
		{
			return 0;
		}
		
		system.HandlerMask |= (uint32_t)1 << e;
     f12:	81 e0       	ldi	r24, 0x01	; 1
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	a0 e0       	ldi	r26, 0x00	; 0
     f18:	b0 e0       	ldi	r27, 0x00	; 0
     f1a:	04 c0       	rjmp	.+8      	; 0xf24 <triggerHandler+0x30>
     f1c:	88 0f       	add	r24, r24
     f1e:	99 1f       	adc	r25, r25
     f20:	aa 1f       	adc	r26, r26
     f22:	bb 1f       	adc	r27, r27
     f24:	4a 95       	dec	r20
     f26:	d2 f7       	brpl	.-12     	; 0xf1c <triggerHandler+0x28>
     f28:	50 91 bf 21 	lds	r21, 0x21BF
     f2c:	58 2b       	or	r21, r24
     f2e:	40 91 c0 21 	lds	r20, 0x21C0
     f32:	49 2b       	or	r20, r25
     f34:	30 91 c1 21 	lds	r19, 0x21C1
     f38:	3a 2b       	or	r19, r26
     f3a:	20 91 c2 21 	lds	r18, 0x21C2
     f3e:	2b 2b       	or	r18, r27
     f40:	50 93 bf 21 	sts	0x21BF, r21
     f44:	40 93 c0 21 	sts	0x21C0, r20
     f48:	30 93 c1 21 	sts	0x21C1, r19
     f4c:	20 93 c2 21 	sts	0x21C2, r18
		return 1;
     f50:	21 e0       	ldi	r18, 0x01	; 1
     f52:	30 e0       	ldi	r19, 0x00	; 0
     f54:	02 c0       	rjmp	.+4      	; 0xf5a <triggerHandler+0x66>
	}
	
	return 0;	
     f56:	20 e0       	ldi	r18, 0x00	; 0
     f58:	30 e0       	ldi	r19, 0x00	; 0
}
     f5a:	c9 01       	movw	r24, r18
     f5c:	df 91       	pop	r29
     f5e:	cf 91       	pop	r28
     f60:	08 95       	ret

00000f62 <registerHandler>:
// will register a callback for a valid event with currently NULL callback.
// must unregister a valid handler before re-registering.
// returns 1 on success, 0 on failure.
int registerHandler(Event e, GenericHandler callback)
{
	if(e < NUM_HANDLERS)
     f62:	80 32       	cpi	r24, 0x20	; 32
     f64:	78 f4       	brcc	.+30     	; 0xf84 <registerHandler+0x22>
	{
		if(system.HandlerTable[e] == NULL)
     f66:	e8 2f       	mov	r30, r24
     f68:	f0 e0       	ldi	r31, 0x00	; 0
     f6a:	ee 0f       	add	r30, r30
     f6c:	ff 1f       	adc	r31, r31
     f6e:	e9 53       	subi	r30, 0x39	; 57
     f70:	fe 4d       	sbci	r31, 0xDE	; 222
     f72:	80 81       	ld	r24, Z
     f74:	91 81       	ldd	r25, Z+1	; 0x01
     f76:	89 2b       	or	r24, r25
     f78:	29 f4       	brne	.+10     	; 0xf84 <registerHandler+0x22>
		{
			system.HandlerTable[e] = callback;
     f7a:	60 83       	st	Z, r22
     f7c:	71 83       	std	Z+1, r23	; 0x01
			return 1;
     f7e:	21 e0       	ldi	r18, 0x01	; 1
     f80:	30 e0       	ldi	r19, 0x00	; 0
     f82:	02 c0       	rjmp	.+4      	; 0xf88 <registerHandler+0x26>
		}
		
		return 0;
	}
	
	return 0;
     f84:	20 e0       	ldi	r18, 0x00	; 0
     f86:	30 e0       	ldi	r19, 0x00	; 0
}
     f88:	c9 01       	movw	r24, r18
     f8a:	08 95       	ret

00000f8c <unregisterHandler>:
// will unregister a valid callback for a valid event, setting it to NULL.
// must unregister a valid handler before re-registering.
// returns 1 on success, 0 on failure.
int unregisterHandler(Event e)
{
	if(e < NUM_HANDLERS)
     f8c:	80 32       	cpi	r24, 0x20	; 32
     f8e:	78 f4       	brcc	.+30     	; 0xfae <unregisterHandler+0x22>
	{
		if(system.HandlerTable[e] == NULL)
     f90:	e8 2f       	mov	r30, r24
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	ee 0f       	add	r30, r30
     f96:	ff 1f       	adc	r31, r31
     f98:	e9 53       	subi	r30, 0x39	; 57
     f9a:	fe 4d       	sbci	r31, 0xDE	; 222
     f9c:	80 81       	ld	r24, Z
     f9e:	91 81       	ldd	r25, Z+1	; 0x01
     fa0:	89 2b       	or	r24, r25
     fa2:	29 f0       	breq	.+10     	; 0xfae <unregisterHandler+0x22>
		{
			return 0;
		}
		
		system.HandlerTable[e] = NULL;
     fa4:	10 82       	st	Z, r1
     fa6:	11 82       	std	Z+1, r1	; 0x01
		return 1;
     fa8:	21 e0       	ldi	r18, 0x01	; 1
     faa:	30 e0       	ldi	r19, 0x00	; 0
     fac:	02 c0       	rjmp	.+4      	; 0xfb2 <unregisterHandler+0x26>
	}
	
	return 0;
     fae:	20 e0       	ldi	r18, 0x00	; 0
     fb0:	30 e0       	ldi	r19, 0x00	; 0
}
     fb2:	c9 01       	movw	r24, r18
     fb4:	08 95       	ret

00000fb6 <callHandler>:

void callHandler(Event e)
{
	if(e < NUM_HANDLERS)
     fb6:	80 32       	cpi	r24, 0x20	; 32
     fb8:	60 f4       	brcc	.+24     	; 0xfd2 <callHandler+0x1c>
	{
		if(system.HandlerTable[e] != NULL)
     fba:	e8 2f       	mov	r30, r24
     fbc:	f0 e0       	ldi	r31, 0x00	; 0
     fbe:	ee 0f       	add	r30, r30
     fc0:	ff 1f       	adc	r31, r31
     fc2:	e9 53       	subi	r30, 0x39	; 57
     fc4:	fe 4d       	sbci	r31, 0xDE	; 222
     fc6:	01 90       	ld	r0, Z+
     fc8:	f0 81       	ld	r31, Z
     fca:	e0 2d       	mov	r30, r0
     fcc:	30 97       	sbiw	r30, 0x00	; 0
     fce:	09 f0       	breq	.+2      	; 0xfd2 <callHandler+0x1c>
		{
			(system.HandlerTable[e])();
     fd0:	19 94       	eijmp
     fd2:	08 95       	ret

00000fd4 <getColor>:
threadvar Intensity 	currentIntensity = INTENSITY_MAX;

Color getColor()
{
	return currentColor;
}
     fd4:	80 91 0a 22 	lds	r24, 0x220A
     fd8:	08 95       	ret

00000fda <getNextColor>:

Color getNextColor()
{
	Color tmp = currentColor;
     fda:	80 91 0a 22 	lds	r24, 0x220A
	
	tmp++;
     fde:	8f 5f       	subi	r24, 0xFF	; 255
	
	if(tmp >= NUM_COLORS)
     fe0:	89 30       	cpi	r24, 0x09	; 9
     fe2:	08 f0       	brcs	.+2      	; 0xfe6 <getNextColor+0xc>
	{
		tmp = 0;
     fe4:	80 e0       	ldi	r24, 0x00	; 0
	}

	return tmp;
}
     fe6:	08 95       	ret

00000fe8 <setColor>:

void setColor(Color c)
{
	currentColor = c;
     fe8:	80 93 0a 22 	sts	0x220A, r24

	setLED(colors[c][0], colors[c][1], colors[c][2], currentIntensity);
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	fc 01       	movw	r30, r24
     ff0:	ee 0f       	add	r30, r30
     ff2:	ff 1f       	adc	r31, r31
     ff4:	e8 0f       	add	r30, r24
     ff6:	f9 1f       	adc	r31, r25
     ff8:	ef 5f       	subi	r30, 0xFF	; 255
     ffa:	ff 4d       	sbci	r31, 0xDF	; 223
	return currentColor;
}

void setLED(byte r, byte g, byte b, Intensity i)
{
	setHWLED(r,g,b,i);
     ffc:	20 91 00 20 	lds	r18, 0x2000
    1000:	42 81       	ldd	r20, Z+2	; 0x02
    1002:	61 81       	ldd	r22, Z+1	; 0x01
    1004:	80 81       	ld	r24, Z
    1006:	0c 94 54 19 	jmp	0x32a8	; 0x32a8 <setHWLED>

0000100a <setNextColor>:
	setLED(colors[c][0], colors[c][1], colors[c][2], currentIntensity);
}

Color setNextColor()
{
	Color tmp = getNextColor();
    100a:	0e 94 ed 07 	call	0xfda	; 0xfda <getNextColor>

	setColor(tmp);
    100e:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <setColor>
	
	return currentColor;
}
    1012:	80 91 0a 22 	lds	r24, 0x220A
    1016:	08 95       	ret

00001018 <setLED>:

void setLED(byte r, byte g, byte b, Intensity i)
{
	setHWLED(r,g,b,i);
    1018:	0c 94 54 19 	jmp	0x32a8	; 0x32a8 <setHWLED>

0000101c <setIntensity>:
}

void setIntensity(Intensity i)
{
	currentIntensity = i;
    101c:	80 93 00 20 	sts	0x2000, r24
	return currentColor;
}

void setLED(byte r, byte g, byte b, Intensity i)
{
	setHWLED(r,g,b,i);
    1020:	28 2f       	mov	r18, r24
    1022:	40 91 09 22 	lds	r20, 0x2209
    1026:	60 91 08 22 	lds	r22, 0x2208
    102a:	80 91 07 22 	lds	r24, 0x2207
    102e:	0c 94 54 19 	jmp	0x32a8	; 0x32a8 <setHWLED>

00001032 <getIntensity>:
}

Intensity getIntensity()
{
	return currentIntensity;
}
    1032:	80 91 00 20 	lds	r24, 0x2000
    1036:	08 95       	ret

00001038 <initLED>:

void initLED()
{
	initHWLED();
    1038:	0c 94 7c 19 	jmp	0x32f8	; 0x32f8 <initHWLED>

0000103c <initializeMemory>:
threadvar blockConf conf;

//////////////////// PUBLIC FUNCTIONS /////////////////////
// set-up memory
void initializeMemory(void)
{
    103c:	e0 e4       	ldi	r30, 0x40	; 64
    103e:	f3 e2       	ldi	r31, 0x23	; 35
    uint8_t i;

    // clear all status bits for receive chunks
    for( i=0; i<NUM_RXCHUNKS; i++ )
    {
        rxChunks[i].status = CHUNK_FREE;
    1040:	10 82       	st	Z, r1
    1042:	78 96       	adiw	r30, 0x18	; 24
void initializeMemory(void)
{
    uint8_t i;

    // clear all status bits for receive chunks
    for( i=0; i<NUM_RXCHUNKS; i++ )
    1044:	84 e2       	ldi	r24, 0x24	; 36
    1046:	e0 36       	cpi	r30, 0x60	; 96
    1048:	f8 07       	cpc	r31, r24
    104a:	d1 f7       	brne	.-12     	; 0x1040 <initializeMemory+0x4>
    104c:	e0 e2       	ldi	r30, 0x20	; 32
    104e:	f2 e2       	ldi	r31, 0x22	; 34
    }
    
    // clear all status bits for receive chunks
    for( i=0; i<NUM_TXCHUNKS; i++ )
    {
        txChunks[i].status = CHUNK_FREE;
    1050:	10 82       	st	Z, r1
    1052:	78 96       	adiw	r30, 0x18	; 24
    {
        rxChunks[i].status = CHUNK_FREE;
    }
    
    // clear all status bits for receive chunks
    for( i=0; i<NUM_TXCHUNKS; i++ )
    1054:	83 e2       	ldi	r24, 0x23	; 35
    1056:	e0 34       	cpi	r30, 0x40	; 64
    1058:	f8 07       	cpc	r31, r24
    105a:	d1 f7       	brne	.-12     	; 0x1050 <initializeMemory+0x14>
    }

    // load config data
    //TODO: re-enable
    //restore(&conf, &nv_conf, sizeof(blockConf));
}
    105c:	08 95       	ret

0000105e <freeChunk>:

// this loops through and frees all connected Chunks in the list.
void freeChunk(Chunk * c)
{
    105e:	fc 01       	movw	r30, r24
  Chunk * tmp;	

  while(c != NULL)
    1060:	09 c0       	rjmp	.+18     	; 0x1074 <freeChunk+0x16>
    {
      if(chunkInUse(c))
    1062:	81 89       	ldd	r24, Z+17	; 0x11
    1064:	87 fd       	sbrc	r24, 7
        {
	  c->status = CHUNK_FREE;
    1066:	11 8a       	std	Z+17, r1	; 0x11
        }
      tmp = c->next;
    1068:	92 89       	ldd	r25, Z+18	; 0x12
    106a:	83 89       	ldd	r24, Z+19	; 0x13
      c->next = NULL;
    106c:	12 8a       	std	Z+18, r1	; 0x12
    106e:	13 8a       	std	Z+19, r1	; 0x13
      c = tmp;
    1070:	e9 2f       	mov	r30, r25
    1072:	f8 2f       	mov	r31, r24
// this loops through and frees all connected Chunks in the list.
void freeChunk(Chunk * c)
{
  Chunk * tmp;	

  while(c != NULL)
    1074:	30 97       	sbiw	r30, 0x00	; 0
    1076:	a9 f7       	brne	.-22     	; 0x1062 <freeChunk+0x4>
        }
      tmp = c->next;
      c->next = NULL;
      c = tmp;
    }
}
    1078:	08 95       	ret

0000107a <getSystemChunk>:
Chunk* getSystemChunk(byte which)
{
    int8_t i;
    Chunk*  current;

    if(which == RXCHUNK)
    107a:	81 11       	cpse	r24, r1
    107c:	03 c0       	rjmp	.+6      	; 0x1084 <getSystemChunk+0xa>
      {
	current = rxChunks;
    107e:	8f e2       	ldi	r24, 0x2F	; 47
    1080:	93 e2       	ldi	r25, 0x23	; 35
    1082:	02 c0       	rjmp	.+4      	; 0x1088 <getSystemChunk+0xe>

	i = NUM_RXCHUNKS-1;
      }
    else
      {
	current = txChunks;
    1084:	8f e0       	ldi	r24, 0x0F	; 15
    1086:	92 e2       	ldi	r25, 0x22	; 34
    int8_t i;
    Chunk*  current;

    if(which == RXCHUNK)
      {
	current = rxChunks;
    1088:	2c e0       	ldi	r18, 0x0C	; 12
      c->next = NULL;
      c = tmp;
    }
}

Chunk* getSystemChunk(byte which)
    108a:	fc 01       	movw	r30, r24
    108c:	e8 5f       	subi	r30, 0xF8	; 248
    108e:	fe 4f       	sbci	r31, 0xFE	; 254
    1090:	dc 01       	movw	r26, r24
    1092:	a7 5e       	subi	r26, 0xE7	; 231
    1094:	be 4f       	sbci	r27, 0xFE	; 254

    // look for unused Chunk
    for(; i>=0; i--)
    {
        // check top bit to indicate usage
      if( !chunkInUse((&(current[i]))) )
    1096:	3c 91       	ld	r19, X
    1098:	37 fd       	sbrc	r19, 7
    109a:	05 c0       	rjmp	.+10     	; 0x10a6 <getSystemChunk+0x2c>
        {
            // indicate in use
	  (current[i]).status = CHUNK_USED;
    109c:	80 e8       	ldi	r24, 0x80	; 128
    109e:	81 8b       	std	Z+17, r24	; 0x11
          
	  // clear old next ptr in case non-NULL
	  (current[i]).next = NULL;
    10a0:	12 8a       	std	Z+18, r1	; 0x12
    10a2:	13 8a       	std	Z+19, r1	; 0x13
	  return &(current[i]);
    10a4:	06 c0       	rjmp	.+12     	; 0x10b2 <getSystemChunk+0x38>
    10a6:	21 50       	subi	r18, 0x01	; 1
    10a8:	48 97       	sbiw	r24, 0x18	; 24

	i = NUM_TXCHUNKS-1;
      }

    // look for unused Chunk
    for(; i>=0; i--)
    10aa:	21 11       	cpse	r18, r1
    10ac:	ee cf       	rjmp	.-36     	; 0x108a <getSystemChunk+0x10>
	  return &(current[i]);
        }
        // else, in use (supposedly)
    }
    // none free!
    return NULL;  
    10ae:	e0 e0       	ldi	r30, 0x00	; 0
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
}
    10b2:	cf 01       	movw	r24, r30
    10b4:	08 95       	ret

000010b6 <getSystemRXChunk>:

// return pointer to free memory Chunk
Chunk* getSystemRXChunk()
{
  return getSystemChunk(RXCHUNK);
    10b6:	80 e0       	ldi	r24, 0x00	; 0
    10b8:	0c 94 3d 08 	jmp	0x107a	; 0x107a <getSystemChunk>

000010bc <getSystemTXChunk>:
}

Chunk* getSystemTXChunk()
{
  return getSystemChunk(TXCHUNK);
    10bc:	81 e0       	ldi	r24, 0x01	; 1
    10be:	0c 94 3d 08 	jmp	0x107a	; 0x107a <getSystemChunk>

000010c2 <sendMessageToUid>:
#include "led.bbh"



byte sendMessageToUid(Chunk* c, Uid dest, byte * msg, byte length, MsgHandler mh, GenericHandler cb)
{
    10c2:	ef 92       	push	r14
    10c4:	ff 92       	push	r15
    10c6:	0f 93       	push	r16
    10c8:	1f 93       	push	r17
    10ca:	cf 93       	push	r28
    10cc:	df 93       	push	r29
    10ce:	ec 01       	movw	r28, r24
    10d0:	cb 01       	movw	r24, r22
    10d2:	ed e4       	ldi	r30, 0x4D	; 77
    10d4:	f1 e2       	ldi	r31, 0x21	; 33
    byte i;

    for(i = 0; i < NUM_PORTS; ++i)
    10d6:	60 e0       	ldi	r22, 0x00	; 0
    {
        if(thisNeighborhood.n[i] == dest)
    10d8:	a1 91       	ld	r26, Z+
    10da:	b1 91       	ld	r27, Z+
    10dc:	a8 17       	cp	r26, r24
    10de:	b9 07       	cpc	r27, r25
    10e0:	61 f4       	brne	.+24     	; 0x10fa <sendMessageToUid+0x38>
        {
            if(setupChunk(c,i, msg, length, mh, cb) == 0)
    10e2:	ce 01       	movw	r24, r28
    10e4:	0e 94 40 03 	call	0x680	; 0x680 <setupChunk>
    10e8:	81 11       	cpse	r24, r1
    10ea:	02 c0       	rjmp	.+4      	; 0x10f0 <sendMessageToUid+0x2e>
            {
                return 0;
    10ec:	80 e0       	ldi	r24, 0x00	; 0
    10ee:	09 c0       	rjmp	.+18     	; 0x1102 <sendMessageToUid+0x40>
            }
            queueChunk(c);
    10f0:	ce 01       	movw	r24, r28
    10f2:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <queueChunk>
            return 1;
    10f6:	81 e0       	ldi	r24, 0x01	; 1
    10f8:	04 c0       	rjmp	.+8      	; 0x1102 <sendMessageToUid+0x40>

byte sendMessageToUid(Chunk* c, Uid dest, byte * msg, byte length, MsgHandler mh, GenericHandler cb)
{
    byte i;

    for(i = 0; i < NUM_PORTS; ++i)
    10fa:	6f 5f       	subi	r22, 0xFF	; 255
    10fc:	66 30       	cpi	r22, 0x06	; 6
    10fe:	61 f7       	brne	.-40     	; 0x10d8 <sendMessageToUid+0x16>
    1100:	f5 cf       	rjmp	.-22     	; 0x10ec <sendMessageToUid+0x2a>
            return 1;
        }
    }

    return 0;
}
    1102:	df 91       	pop	r29
    1104:	cf 91       	pop	r28
    1106:	1f 91       	pop	r17
    1108:	0f 91       	pop	r16
    110a:	ff 90       	pop	r15
    110c:	ef 90       	pop	r14
    110e:	08 95       	ret

00001110 <sendMessageToPort>:

byte sendMessageToPort(Chunk* c, PRef dest, byte * msg, byte length, MsgHandler mh, GenericHandler cb)
{
    1110:	ef 92       	push	r14
    1112:	ff 92       	push	r15
    1114:	0f 93       	push	r16
    1116:	1f 93       	push	r17
    1118:	cf 93       	push	r28
    111a:	df 93       	push	r29
    111c:	ec 01       	movw	r28, r24
    // NOTE: Can no longer support BROADCAST since requires 6 memory chunks passed in
    if(dest == BROADCAST)
    111e:	6f 3f       	cpi	r22, 0xFF	; 255
    1120:	11 f4       	brne	.+4      	; 0x1126 <sendMessageToPort+0x16>
    {
        return 0;
    1122:	80 e0       	ldi	r24, 0x00	; 0
    1124:	0a c0       	rjmp	.+20     	; 0x113a <sendMessageToPort+0x2a>
    }
    else
    {
        if(dest < NUM_PORTS)
    1126:	66 30       	cpi	r22, 0x06	; 6
    1128:	e0 f7       	brcc	.-8      	; 0x1122 <sendMessageToPort+0x12>
        {
            if(setupChunk(c,dest, msg, length, mh, cb) == 0)
    112a:	0e 94 40 03 	call	0x680	; 0x680 <setupChunk>
    112e:	88 23       	and	r24, r24
    1130:	c1 f3       	breq	.-16     	; 0x1122 <sendMessageToPort+0x12>
            {
                return 0;
            }
            queueChunk(c);
    1132:	ce 01       	movw	r24, r28
    1134:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <queueChunk>
            return 1;
    1138:	81 e0       	ldi	r24, 0x01	; 1
        }
    }
    
    return 0;
}
    113a:	df 91       	pop	r29
    113c:	cf 91       	pop	r28
    113e:	1f 91       	pop	r17
    1140:	0f 91       	pop	r16
    1142:	ff 90       	pop	r15
    1144:	ef 90       	pop	r14
    1146:	08 95       	ret

00001148 <sendSystemMessage>:

// ----------- SEND SYSTEM MESSAGE to PORT
//
// Probably shouldn't be used by a user, but needed by various sytem routines.
byte sendSystemMessage(PRef dest, byte * msg, byte length, MsgHandler mh, GenericHandler cb)
{
    1148:	6f 92       	push	r6
    114a:	7f 92       	push	r7
    114c:	8f 92       	push	r8
    114e:	9f 92       	push	r9
    1150:	af 92       	push	r10
    1152:	bf 92       	push	r11
    1154:	cf 92       	push	r12
    1156:	df 92       	push	r13
    1158:	ef 92       	push	r14
    115a:	ff 92       	push	r15
    115c:	0f 93       	push	r16
    115e:	1f 93       	push	r17
    1160:	cf 93       	push	r28
    1162:	df 93       	push	r29
    1164:	78 2e       	mov	r7, r24
    1166:	6b 01       	movw	r12, r22
    1168:	64 2e       	mov	r6, r20
    116a:	59 01       	movw	r10, r18
    116c:	48 01       	movw	r8, r16
    Chunk* c;

    if(dest == BROADCAST)
    116e:	8f ef       	ldi	r24, 0xFF	; 255
    1170:	78 12       	cpse	r7, r24
    1172:	1b c0       	rjmp	.+54     	; 0x11aa <sendSystemMessage+0x62>
    1174:	71 2c       	mov	r7, r1
        byte i;
        
        for(i = 0; i < NUM_PORTS; ++i)
        {
            // set it to appropriate chunk
            c = getSystemTXChunk();
    1176:	0e 94 5e 08 	call	0x10bc	; 0x10bc <getSystemTXChunk>
    117a:	ec 01       	movw	r28, r24
            
            // in use - can't send
            if( c == NULL ) 
    117c:	00 97       	sbiw	r24, 0x00	; 0
    117e:	81 f0       	breq	.+32     	; 0x11a0 <sendSystemMessage+0x58>
            {
                continue;
            }
            
            if(setupChunk(c,i, msg, length, mh, cb) == 0)
    1180:	74 01       	movw	r14, r8
    1182:	85 01       	movw	r16, r10
    1184:	26 2d       	mov	r18, r6
    1186:	a6 01       	movw	r20, r12
    1188:	67 2d       	mov	r22, r7
    118a:	0e 94 40 03 	call	0x680	; 0x680 <setupChunk>
    118e:	81 11       	cpse	r24, r1
    1190:	04 c0       	rjmp	.+8      	; 0x119a <sendSystemMessage+0x52>
            {
                freeChunk(c);
    1192:	ce 01       	movw	r24, r28
    1194:	0e 94 2f 08 	call	0x105e	; 0x105e <freeChunk>
                continue;
    1198:	03 c0       	rjmp	.+6      	; 0x11a0 <sendSystemMessage+0x58>
            }
            queueChunk(c);
    119a:	ce 01       	movw	r24, r28
    119c:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <queueChunk>

    if(dest == BROADCAST)
    {
        byte i;
        
        for(i = 0; i < NUM_PORTS; ++i)
    11a0:	73 94       	inc	r7
    11a2:	86 e0       	ldi	r24, 0x06	; 6
    11a4:	78 12       	cpse	r7, r24
    11a6:	e7 cf       	rjmp	.-50     	; 0x1176 <sendSystemMessage+0x2e>
    11a8:	1c c0       	rjmp	.+56     	; 0x11e2 <sendSystemMessage+0x9a>
        
        return i;
    }
    else
    {
        if(dest < NUM_PORTS)
    11aa:	85 e0       	ldi	r24, 0x05	; 5
    11ac:	87 15       	cp	r24, r7
    11ae:	08 f4       	brcc	.+2      	; 0x11b2 <sendSystemMessage+0x6a>
    11b0:	11 c0       	rjmp	.+34     	; 0x11d4 <sendSystemMessage+0x8c>
        {
            // set it to appropriate chunk
            c = getSystemTXChunk();
    11b2:	0e 94 5e 08 	call	0x10bc	; 0x10bc <getSystemTXChunk>
    11b6:	ec 01       	movw	r28, r24
            
            // in use - can't send
            if( c == NULL ) 
    11b8:	00 97       	sbiw	r24, 0x00	; 0
    11ba:	61 f0       	breq	.+24     	; 0x11d4 <sendSystemMessage+0x8c>
            {
                return 0;
            }
            
            if(setupChunk(c,dest, msg, length, mh, cb) == 0)
    11bc:	78 01       	movw	r14, r16
    11be:	85 01       	movw	r16, r10
    11c0:	26 2d       	mov	r18, r6
    11c2:	a6 01       	movw	r20, r12
    11c4:	67 2d       	mov	r22, r7
    11c6:	0e 94 40 03 	call	0x680	; 0x680 <setupChunk>
    11ca:	81 11       	cpse	r24, r1
    11cc:	05 c0       	rjmp	.+10     	; 0x11d8 <sendSystemMessage+0x90>
            {
                freeChunk(c);
    11ce:	ce 01       	movw	r24, r28
    11d0:	0e 94 2f 08 	call	0x105e	; 0x105e <freeChunk>
                return 0;
    11d4:	71 2c       	mov	r7, r1
    11d6:	05 c0       	rjmp	.+10     	; 0x11e2 <sendSystemMessage+0x9a>
            }
            queueChunk(c);
    11d8:	ce 01       	movw	r24, r28
    11da:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <queueChunk>
            return 1;
    11de:	77 24       	eor	r7, r7
    11e0:	73 94       	inc	r7
        }
    }
    
    return 0;
}
    11e2:	87 2d       	mov	r24, r7
    11e4:	df 91       	pop	r29
    11e6:	cf 91       	pop	r28
    11e8:	1f 91       	pop	r17
    11ea:	0f 91       	pop	r16
    11ec:	ff 90       	pop	r15
    11ee:	ef 90       	pop	r14
    11f0:	df 90       	pop	r13
    11f2:	cf 90       	pop	r12
    11f4:	bf 90       	pop	r11
    11f6:	af 90       	pop	r10
    11f8:	9f 90       	pop	r9
    11fa:	8f 90       	pop	r8
    11fc:	7f 90       	pop	r7
    11fe:	6f 90       	pop	r6
    1200:	08 95       	ret

00001202 <initSystemMessage>:


void initSystemMessage()
{
    1202:	08 95       	ret

00001204 <retrySend>:

#include "queues.bbh"

void retrySend(void)
{
    SendChunkQueue* currSq = ((SQTimeout *)thisTimeout)->sq;
    1204:	e0 91 60 26 	lds	r30, 0x2660
    1208:	f0 91 61 26 	lds	r31, 0x2661
    120c:	02 84       	ldd	r0, Z+10	; 0x0a
    120e:	f3 85       	ldd	r31, Z+11	; 0x0b
    1210:	e0 2d       	mov	r30, r0
    
    //Try to resend
    currSq->flags |= CLEAR_TO_SEND;
    1212:	85 85       	ldd	r24, Z+13	; 0x0d
    1214:	80 64       	ori	r24, 0x40	; 64
    1216:	85 87       	std	Z+13, r24	; 0x0d
    1218:	08 95       	ret

0000121a <initPortQueues>:
#include "../hw-api/hwSerial.h"

threadvar Port port[NUM_PORTS];

void initPortQueues(Port* p)
{
    121a:	fc 01       	movw	r30, r24
    // reset send queue status
    p->sq.retry         = 0;
    121c:	15 86       	std	Z+13, r1	; 0x0d
    p->sq.flags         = CLEAR_TO_SEND;
    121e:	80 e4       	ldi	r24, 0x40	; 64
    1220:	86 87       	std	Z+14, r24	; 0x0e
	
	// send queue timers
	p->sq.qtout.sq = &(p->sq);
    1222:	cf 01       	movw	r24, r30
    1224:	01 96       	adiw	r24, 0x01	; 1
    1226:	83 87       	std	Z+11, r24	; 0x0b
    1228:	94 87       	std	Z+12, r25	; 0x0c
	p->sq.qtout.tout.callback = (GenericHandler)&retrySend;
    122a:	82 e0       	ldi	r24, 0x02	; 2
    122c:	99 e0       	ldi	r25, 0x09	; 9
    122e:	87 83       	std	Z+7, r24	; 0x07
    1230:	90 87       	std	Z+8, r25	; 0x08


	
	// empty the send queue
	//freeChunk(p->sq.head);
    p->sq.head = NULL;
    1232:	17 86       	std	Z+15, r1	; 0x0f
    1234:	10 8a       	std	Z+16, r1	; 0x10
    //freeChunk(p->sq.tail);
    p->sq.tail = NULL;
    1236:	11 8a       	std	Z+17, r1	; 0x11
    1238:	12 8a       	std	Z+18, r1	; 0x12
	
	// reset receive queue status
    p->rq.index         = 0;
    123a:	13 8a       	std	Z+19, r1	; 0x13
	p->rq.checksum      = 0;
    123c:	14 8a       	std	Z+20, r1	; 0x14
    p->rq.flags         = NO_CHUNK_READY;
    123e:	15 8a       	std	Z+21, r1	; 0x15

	// empty receive queues
    //freeReceiveChunk(p->rq.curr);
	p->rq.curr = NULL;
    1240:	16 8a       	std	Z+22, r1	; 0x16
    1242:	17 8a       	std	Z+23, r1	; 0x17
    1244:	08 95       	ret

00001246 <initPorts>:
}

void initPorts()
{
    1246:	ff 92       	push	r15
    1248:	0f 93       	push	r16
    124a:	1f 93       	push	r17
    124c:	cf 93       	push	r28
    124e:	df 93       	push	r29
    1250:	00 e5       	ldi	r16, 0x50	; 80
    1252:	14 e2       	ldi	r17, 0x24	; 36
    1254:	c0 e0       	ldi	r28, 0x00	; 0
    1256:	d0 e0       	ldi	r29, 0x00	; 0
	PRef i;
	for(i = 0; i < NUM_PORTS; i++)
	{
		port[i].pnum  = i;
		initPortQueues(&port[i]);
    1258:	88 e5       	ldi	r24, 0x58	; 88
    125a:	f8 2e       	mov	r15, r24
void initPorts()
{
	PRef i;
	for(i = 0; i < NUM_PORTS; i++)
	{
		port[i].pnum  = i;
    125c:	f8 01       	movw	r30, r16
    125e:	c0 83       	st	Z, r28
		initPortQueues(&port[i]);
    1260:	fc 9e       	mul	r15, r28
    1262:	c0 01       	movw	r24, r0
    1264:	fd 9e       	mul	r15, r29
    1266:	90 0d       	add	r25, r0
    1268:	11 24       	eor	r1, r1
    126a:	80 5b       	subi	r24, 0xB0	; 176
    126c:	9b 4d       	sbci	r25, 0xDB	; 219
    126e:	0e 94 0d 09 	call	0x121a	; 0x121a <initPortQueues>
    1272:	21 96       	adiw	r28, 0x01	; 1
    1274:	08 5a       	subi	r16, 0xA8	; 168
    1276:	1f 4f       	sbci	r17, 0xFF	; 255
}

void initPorts()
{
	PRef i;
	for(i = 0; i < NUM_PORTS; i++)
    1278:	c6 30       	cpi	r28, 0x06	; 6
    127a:	d1 05       	cpc	r29, r1
    127c:	79 f7       	brne	.-34     	; 0x125c <initPorts+0x16>
	{
		port[i].pnum  = i;
		initPortQueues(&port[i]);
	}
	initHWPorts();
}
    127e:	df 91       	pop	r29
    1280:	cf 91       	pop	r28
    1282:	1f 91       	pop	r17
    1284:	0f 91       	pop	r16
    1286:	ff 90       	pop	r15
	for(i = 0; i < NUM_PORTS; i++)
	{
		port[i].pnum  = i;
		initPortQueues(&port[i]);
	}
	initHWPorts();
    1288:	0c 94 6b 1a 	jmp	0x34d6	; 0x34d6 <initHWPorts>

0000128c <blockProgram>:
#include "led.bbh"

int blockProgram(void)
{

    initBlock();
    128c:	0e 94 58 02 	call	0x4b0	; 0x4b0 <initBlock>

    
    // low-level robot initialization routine
    
    // handler registration / load control structure
    userRegistration();
    1290:	0e 94 16 02 	call	0x42c	; 0x42c <userRegistration>
    
    // Call user-based system_init function, if registered
    // A good idea to separate from UserRegistration?
    callHandler(SYSTEM_INIT);    
    1294:	80 e0       	ldi	r24, 0x00	; 0
    1296:	0e 94 db 07 	call	0xfb6	; 0xfb6 <callHandler>

        // step through triggered handler functions
	//printf("%d\r\n",count++);
	    
        // Run user system_main function, if registered
	callHandler(SYSTEM_MAIN);
    129a:	81 e0       	ldi	r24, 0x01	; 1
    129c:	fc cf       	rjmp	.-8      	; 0x1296 <blockProgram+0xa>

0000129e <delayMS>:
#ifdef BBSIM
extern void yieldTil(Time x);
#endif

void delayMS(int ms) 
{
    129e:	cf 92       	push	r12
    12a0:	df 92       	push	r13
    12a2:	ef 92       	push	r14
    12a4:	ff 92       	push	r15
    12a6:	cf 93       	push	r28
    12a8:	df 93       	push	r29
    12aa:	ec 01       	movw	r28, r24
  }
}

Time getTime()
{
	return getHWTime();
    12ac:	0e 94 ed 1c 	call	0x39da	; 0x39da <getHWTime>
    12b0:	6b 01       	movw	r12, r22
    12b2:	7c 01       	movw	r14, r24
extern void yieldTil(Time x);
#endif

void delayMS(int ms) 
{
  Time until = getTime() + ms;
    12b4:	ce 01       	movw	r24, r28
    12b6:	aa 27       	eor	r26, r26
    12b8:	97 fd       	sbrc	r25, 7
    12ba:	a0 95       	com	r26
    12bc:	ba 2f       	mov	r27, r26
    12be:	c8 0e       	add	r12, r24
    12c0:	d9 1e       	adc	r13, r25
    12c2:	ea 1e       	adc	r14, r26
    12c4:	fb 1e       	adc	r15, r27
  }
}

Time getTime()
{
	return getHWTime();
    12c6:	0e 94 ed 1c 	call	0x39da	; 0x39da <getHWTime>

void delayMS(int ms) 
{
  Time until = getTime() + ms;
	
  while(getTime() < until) {
    12ca:	6c 15       	cp	r22, r12
    12cc:	7d 05       	cpc	r23, r13
    12ce:	8e 05       	cpc	r24, r14
    12d0:	9f 05       	cpc	r25, r15
    12d2:	c8 f3       	brcs	.-14     	; 0x12c6 <delayMS+0x28>
#ifdef BBSIM
    yieldTil(until);
#endif
  }
}
    12d4:	df 91       	pop	r29
    12d6:	cf 91       	pop	r28
    12d8:	ff 90       	pop	r15
    12da:	ef 90       	pop	r14
    12dc:	df 90       	pop	r13
    12de:	cf 90       	pop	r12
    12e0:	08 95       	ret

000012e2 <getTime>:

Time getTime()
{
	return getHWTime();
    12e2:	0c 94 ed 1c 	jmp	0x39da	; 0x39da <getHWTime>

000012e6 <checkTimeout>:
}

void checkTimeout()
{
    12e6:	0f 93       	push	r16
    12e8:	1f 93       	push	r17
    12ea:	cf 93       	push	r28
    12ec:	df 93       	push	r29
    12ee:	00 d0       	rcall	.+0      	; 0x12f0 <checkTimeout+0xa>
    12f0:	1f 92       	push	r1
    12f2:	cd b7       	in	r28, 0x3d	; 61
    12f4:	de b7       	in	r29, 0x3e	; 62
	if(timeoutList != NULL)
    12f6:	80 91 64 26 	lds	r24, 0x2664
    12fa:	90 91 65 26 	lds	r25, 0x2665
    12fe:	89 2b       	or	r24, r25
    1300:	99 f1       	breq	.+102    	; 0x1368 <checkTimeout+0x82>
  }
}

Time getTime()
{
	return getHWTime();
    1302:	0e 94 ed 1c 	call	0x39da	; 0x39da <getHWTime>
		Time now = getTime();
		
		do
		{
			// check list, remove timer and call function
			if(now >= timeoutList->calltime)
    1306:	e0 91 64 26 	lds	r30, 0x2664
    130a:	f0 91 65 26 	lds	r31, 0x2665
    130e:	02 81       	ldd	r16, Z+2	; 0x02
    1310:	13 81       	ldd	r17, Z+3	; 0x03
    1312:	24 81       	ldd	r18, Z+4	; 0x04
    1314:	35 81       	ldd	r19, Z+5	; 0x05
    1316:	60 17       	cp	r22, r16
    1318:	71 07       	cpc	r23, r17
    131a:	82 07       	cpc	r24, r18
    131c:	93 07       	cpc	r25, r19
    131e:	20 f1       	brcs	.+72     	; 0x1368 <checkTimeout+0x82>
			{
				// set reference variable, remove timeout from list
				thisTimeout = timeoutList;
    1320:	e0 93 60 26 	sts	0x2660, r30
    1324:	f0 93 61 26 	sts	0x2661, r31
				timeoutList = timeoutList->next;
    1328:	20 81       	ld	r18, Z
    132a:	31 81       	ldd	r19, Z+1	; 0x01
    132c:	20 93 64 26 	sts	0x2664, r18
    1330:	30 93 65 26 	sts	0x2665, r19

				// if timeout was not pre-emptively disable, execute callback();
				if(thisTimeout->state != INACTIVE)
    1334:	20 85       	ldd	r18, Z+8	; 0x08
    1336:	22 23       	and	r18, r18
    1338:	61 f0       	breq	.+24     	; 0x1352 <checkTimeout+0x6c>
				  {
				    (thisTimeout->callback)();	
    133a:	06 80       	ldd	r0, Z+6	; 0x06
    133c:	f7 81       	ldd	r31, Z+7	; 0x07
    133e:	e0 2d       	mov	r30, r0
    1340:	69 83       	std	Y+1, r22	; 0x01
    1342:	7a 83       	std	Y+2, r23	; 0x02
    1344:	8b 83       	std	Y+3, r24	; 0x03
    1346:	9c 83       	std	Y+4, r25	; 0x04
    1348:	19 95       	eicall
    134a:	9c 81       	ldd	r25, Y+4	; 0x04
    134c:	8b 81       	ldd	r24, Y+3	; 0x03
    134e:	7a 81       	ldd	r23, Y+2	; 0x02
    1350:	69 81       	ldd	r22, Y+1	; 0x01
				  }

				// disable callback until reactivated/reinserted into list.
				thisTimeout->state = INACTIVE;
    1352:	e0 91 60 26 	lds	r30, 0x2660
    1356:	f0 91 61 26 	lds	r31, 0x2661
    135a:	10 86       	std	Z+8, r1	; 0x08
			{
				// stop searching list
				break;
			}
			
		} while (timeoutList != NULL);
    135c:	20 91 64 26 	lds	r18, 0x2664
    1360:	30 91 65 26 	lds	r19, 0x2665
    1364:	23 2b       	or	r18, r19
    1366:	79 f6       	brne	.-98     	; 0x1306 <checkTimeout+0x20>
	}
}
    1368:	24 96       	adiw	r28, 0x04	; 4
    136a:	cd bf       	out	0x3d, r28	; 61
    136c:	de bf       	out	0x3e, r29	; 62
    136e:	df 91       	pop	r29
    1370:	cf 91       	pop	r28
    1372:	1f 91       	pop	r17
    1374:	0f 91       	pop	r16
    1376:	08 95       	ret

00001378 <registerTimeout>:

int registerTimeout(Timeout * t)
{
    1378:	0f 93       	push	r16
    137a:	1f 93       	push	r17
    137c:	cf 93       	push	r28
    137e:	df 93       	push	r29
    1380:	fc 01       	movw	r30, r24
	t->next = NULL;
    1382:	10 82       	st	Z, r1
    1384:	11 82       	std	Z+1, r1	; 0x01

	if(timeoutList == NULL)
    1386:	a0 91 64 26 	lds	r26, 0x2664
    138a:	b0 91 65 26 	lds	r27, 0x2665
    138e:	10 97       	sbiw	r26, 0x00	; 0
    1390:	29 f4       	brne	.+10     	; 0x139c <registerTimeout+0x24>
	{
		timeoutList = t;
    1392:	80 93 64 26 	sts	0x2664, r24
    1396:	90 93 65 26 	sts	0x2665, r25
    139a:	2d c0       	rjmp	.+90     	; 0x13f6 <registerTimeout+0x7e>
		Timeout * prev = NULL;
		Timeout * cur;
		
		cur = timeoutList;
		
		while((cur->calltime < t->calltime) && (cur->next != NULL))
    139c:	42 81       	ldd	r20, Z+2	; 0x02
    139e:	53 81       	ldd	r21, Z+3	; 0x03
    13a0:	64 81       	ldd	r22, Z+4	; 0x04
    13a2:	75 81       	ldd	r23, Z+5	; 0x05
    13a4:	c0 e0       	ldi	r28, 0x00	; 0
    13a6:	d0 e0       	ldi	r29, 0x00	; 0
    13a8:	03 c0       	rjmp	.+6      	; 0x13b0 <registerTimeout+0x38>
		{
			prev = cur;
			cur = cur->next;
    13aa:	dc 01       	movw	r26, r24
		Timeout * prev = NULL;
		Timeout * cur;
		
		cur = timeoutList;
		
		while((cur->calltime < t->calltime) && (cur->next != NULL))
    13ac:	c3 2f       	mov	r28, r19
    13ae:	d2 2f       	mov	r29, r18
    13b0:	12 96       	adiw	r26, 0x02	; 2
    13b2:	0d 91       	ld	r16, X+
    13b4:	1d 91       	ld	r17, X+
    13b6:	2d 91       	ld	r18, X+
    13b8:	3c 91       	ld	r19, X
    13ba:	15 97       	sbiw	r26, 0x05	; 5
    13bc:	04 17       	cp	r16, r20
    13be:	15 07       	cpc	r17, r21
    13c0:	26 07       	cpc	r18, r22
    13c2:	37 07       	cpc	r19, r23
    13c4:	18 f0       	brcs	.+6      	; 0x13cc <registerTimeout+0x54>
			cur = cur->next;
		}		
		
		if(cur->calltime >= t->calltime)
		{
			if(prev == NULL)
    13c6:	20 97       	sbiw	r28, 0x00	; 0
    13c8:	91 f4       	brne	.+36     	; 0x13ee <registerTimeout+0x76>
    13ca:	0c c0       	rjmp	.+24     	; 0x13e4 <registerTimeout+0x6c>
		Timeout * prev = NULL;
		Timeout * cur;
		
		cur = timeoutList;
		
		while((cur->calltime < t->calltime) && (cur->next != NULL))
    13cc:	8d 91       	ld	r24, X+
    13ce:	9c 91       	ld	r25, X
    13d0:	11 97       	sbiw	r26, 0x01	; 1
    13d2:	3a 2f       	mov	r19, r26
    13d4:	2b 2f       	mov	r18, r27
    13d6:	00 97       	sbiw	r24, 0x00	; 0
    13d8:	41 f7       	brne	.-48     	; 0x13aa <registerTimeout+0x32>
			
			t->next = cur;
		}
		else
		{
			cur->next = t;
    13da:	ed 93       	st	X+, r30
    13dc:	fc 93       	st	X, r31
			t->next = NULL;
    13de:	10 82       	st	Z, r1
    13e0:	11 82       	std	Z+1, r1	; 0x01
    13e2:	09 c0       	rjmp	.+18     	; 0x13f6 <registerTimeout+0x7e>
		
		if(cur->calltime >= t->calltime)
		{
			if(prev == NULL)
			{
				timeoutList = t;
    13e4:	e0 93 64 26 	sts	0x2664, r30
    13e8:	f0 93 65 26 	sts	0x2665, r31
    13ec:	02 c0       	rjmp	.+4      	; 0x13f2 <registerTimeout+0x7a>
			}
			else
			{
				prev->next = t;
    13ee:	e8 83       	st	Y, r30
    13f0:	f9 83       	std	Y+1, r31	; 0x01
			}
			
			t->next = cur;
    13f2:	a0 83       	st	Z, r26
    13f4:	b1 83       	std	Z+1, r27	; 0x01
			cur->next = t;
			t->next = NULL;
		}
	}
	
	t->state = ACTIVE;
    13f6:	81 e0       	ldi	r24, 0x01	; 1
    13f8:	80 87       	std	Z+8, r24	; 0x08
	
	return 1;	
}
    13fa:	81 e0       	ldi	r24, 0x01	; 1
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	df 91       	pop	r29
    1400:	cf 91       	pop	r28
    1402:	1f 91       	pop	r17
    1404:	0f 91       	pop	r16
    1406:	08 95       	ret

00001408 <deregisterTimeout>:

int deregisterTimeout(Timeout * t)
{
	if(timeoutList == NULL)
    1408:	e0 91 64 26 	lds	r30, 0x2664
    140c:	f0 91 65 26 	lds	r31, 0x2665
    1410:	30 97       	sbiw	r30, 0x00	; 0
    1412:	d1 f0       	breq	.+52     	; 0x1448 <deregisterTimeout+0x40>
    1414:	a0 e0       	ldi	r26, 0x00	; 0
    1416:	b0 e0       	ldi	r27, 0x00	; 0
    1418:	07 c0       	rjmp	.+14     	; 0x1428 <deregisterTimeout+0x20>
		

		while((cur != NULL) && (t != cur)) //(cur->callback != t->callback) && (cur->calltime != t->calltime))
		{
			prev = cur;
			cur = cur->next;
    141a:	20 81       	ld	r18, Z
    141c:	31 81       	ldd	r19, Z+1	; 0x01
    141e:	df 01       	movw	r26, r30
		Timeout * cur;

		cur = timeoutList;
		

		while((cur != NULL) && (t != cur)) //(cur->callback != t->callback) && (cur->calltime != t->calltime))
    1420:	21 15       	cp	r18, r1
    1422:	31 05       	cpc	r19, r1
    1424:	89 f0       	breq	.+34     	; 0x1448 <deregisterTimeout+0x40>
		{
			prev = cur;
			cur = cur->next;
    1426:	f9 01       	movw	r30, r18
		Timeout * cur;

		cur = timeoutList;
		

		while((cur != NULL) && (t != cur)) //(cur->callback != t->callback) && (cur->calltime != t->calltime))
    1428:	8e 17       	cp	r24, r30
    142a:	9f 07       	cpc	r25, r31
    142c:	b1 f7       	brne	.-20     	; 0x141a <deregisterTimeout+0x12>
    142e:	0f c0       	rjmp	.+30     	; 0x144e <deregisterTimeout+0x46>
		}
		else
		{
			if(prev == NULL)
			{
				timeoutList = cur->next;
    1430:	20 93 64 26 	sts	0x2664, r18
    1434:	30 93 65 26 	sts	0x2665, r19
    1438:	02 c0       	rjmp	.+4      	; 0x143e <deregisterTimeout+0x36>
			}
			else
			{
				prev->next = cur->next;
    143a:	2d 93       	st	X+, r18
    143c:	3c 93       	st	X, r19
			}
			
			t->state = INACTIVE;
    143e:	fc 01       	movw	r30, r24
    1440:	10 86       	std	Z+8, r1	; 0x08
			
			return 1;
    1442:	21 e0       	ldi	r18, 0x01	; 1
    1444:	30 e0       	ldi	r19, 0x00	; 0
    1446:	09 c0       	rjmp	.+18     	; 0x145a <deregisterTimeout+0x52>

int deregisterTimeout(Timeout * t)
{
	if(timeoutList == NULL)
	{		
		return 0;
    1448:	20 e0       	ldi	r18, 0x00	; 0
    144a:	30 e0       	ldi	r19, 0x00	; 0
    144c:	06 c0       	rjmp	.+12     	; 0x145a <deregisterTimeout+0x52>
    144e:	fc 01       	movw	r30, r24
    1450:	20 81       	ld	r18, Z
    1452:	31 81       	ldd	r19, Z+1	; 0x01
		{
			return 0;
		}
		else
		{
			if(prev == NULL)
    1454:	10 97       	sbiw	r26, 0x00	; 0
    1456:	89 f7       	brne	.-30     	; 0x143a <deregisterTimeout+0x32>
    1458:	eb cf       	rjmp	.-42     	; 0x1430 <deregisterTimeout+0x28>
			t->state = INACTIVE;
			
			return 1;
		}
	}
}
    145a:	c9 01       	movw	r24, r18
    145c:	08 95       	ret

0000145e <deregisterTimeoutByHandler>:

int deregisterTimeoutByHandler(GenericHandler h)
{
	if(timeoutList == NULL)
    145e:	e0 91 64 26 	lds	r30, 0x2664
    1462:	f0 91 65 26 	lds	r31, 0x2665
    1466:	30 97       	sbiw	r30, 0x00	; 0
    1468:	d9 f0       	breq	.+54     	; 0x14a0 <deregisterTimeoutByHandler+0x42>
    146a:	a0 e0       	ldi	r26, 0x00	; 0
    146c:	b0 e0       	ldi	r27, 0x00	; 0
    146e:	07 c0       	rjmp	.+14     	; 0x147e <deregisterTimeoutByHandler+0x20>
		cur = timeoutList;
		
		while((cur != NULL) && (cur->callback != h))
		{
			prev = cur;
			cur = cur->next;
    1470:	20 81       	ld	r18, Z
    1472:	31 81       	ldd	r19, Z+1	; 0x01
    1474:	df 01       	movw	r26, r30
		Timeout * prev = NULL;
		Timeout * cur;

		cur = timeoutList;
		
		while((cur != NULL) && (cur->callback != h))
    1476:	21 15       	cp	r18, r1
    1478:	31 05       	cpc	r19, r1
    147a:	91 f0       	breq	.+36     	; 0x14a0 <deregisterTimeoutByHandler+0x42>
		{
			prev = cur;
			cur = cur->next;
    147c:	f9 01       	movw	r30, r18
		Timeout * prev = NULL;
		Timeout * cur;

		cur = timeoutList;
		
		while((cur != NULL) && (cur->callback != h))
    147e:	26 81       	ldd	r18, Z+6	; 0x06
    1480:	37 81       	ldd	r19, Z+7	; 0x07
    1482:	28 17       	cp	r18, r24
    1484:	39 07       	cpc	r19, r25
    1486:	a1 f7       	brne	.-24     	; 0x1470 <deregisterTimeoutByHandler+0x12>
    1488:	0e c0       	rjmp	.+28     	; 0x14a6 <deregisterTimeoutByHandler+0x48>
		}
		else
		{
			if(prev == NULL)
			{
				timeoutList = cur->next;
    148a:	80 93 64 26 	sts	0x2664, r24
    148e:	90 93 65 26 	sts	0x2665, r25
    1492:	02 c0       	rjmp	.+4      	; 0x1498 <deregisterTimeoutByHandler+0x3a>
			}
			else
			{
				prev->next = cur->next;
    1494:	8d 93       	st	X+, r24
    1496:	9c 93       	st	X, r25
			}
			
			cur->state = INACTIVE;
    1498:	10 86       	std	Z+8, r1	; 0x08
			
			return 1;
    149a:	21 e0       	ldi	r18, 0x01	; 1
    149c:	30 e0       	ldi	r19, 0x00	; 0
    149e:	08 c0       	rjmp	.+16     	; 0x14b0 <deregisterTimeoutByHandler+0x52>

int deregisterTimeoutByHandler(GenericHandler h)
{
	if(timeoutList == NULL)
	{		
		return 0;
    14a0:	20 e0       	ldi	r18, 0x00	; 0
    14a2:	30 e0       	ldi	r19, 0x00	; 0
    14a4:	05 c0       	rjmp	.+10     	; 0x14b0 <deregisterTimeoutByHandler+0x52>
    14a6:	80 81       	ld	r24, Z
    14a8:	91 81       	ldd	r25, Z+1	; 0x01
		{
			return 0;
		}
		else
		{
			if(prev == NULL)
    14aa:	10 97       	sbiw	r26, 0x00	; 0
    14ac:	99 f7       	brne	.-26     	; 0x1494 <deregisterTimeoutByHandler+0x36>
    14ae:	ed cf       	rjmp	.-38     	; 0x148a <deregisterTimeoutByHandler+0x2c>
			
			return 1;
		}
	}

}
    14b0:	c9 01       	movw	r24, r18
    14b2:	08 95       	ret

000014b4 <checkTimer>:

void checkTimer()
{
    14b4:	0f 93       	push	r16
    14b6:	1f 93       	push	r17
    14b8:	cf 93       	push	r28
    14ba:	df 93       	push	r29
	Timer * tt = timerList;
    14bc:	c0 91 62 26 	lds	r28, 0x2662
    14c0:	d0 91 63 26 	lds	r29, 0x2663
	
	while(tt != NULL)
    14c4:	1b c0       	rjmp	.+54     	; 0x14fc <checkTimer+0x48>
	{
		if(tt->state == ACTIVE)
    14c6:	88 89       	ldd	r24, Y+16	; 0x10
    14c8:	81 30       	cpi	r24, 0x01	; 1
    14ca:	a9 f4       	brne	.+42     	; 0x14f6 <checkTimer+0x42>
		{
			if((tt->t).state == INACTIVE)
    14cc:	8a 85       	ldd	r24, Y+10	; 0x0a
    14ce:	81 11       	cpse	r24, r1
    14d0:	12 c0       	rjmp	.+36     	; 0x14f6 <checkTimer+0x42>
  }
}

Time getTime()
{
	return getHWTime();
    14d2:	0e 94 ed 1c 	call	0x39da	; 0x39da <getHWTime>
	{
		if(tt->state == ACTIVE)
		{
			if((tt->t).state == INACTIVE)
			{
				(tt->t).calltime = getTime() + tt->period;
    14d6:	0c 85       	ldd	r16, Y+12	; 0x0c
    14d8:	1d 85       	ldd	r17, Y+13	; 0x0d
    14da:	2e 85       	ldd	r18, Y+14	; 0x0e
    14dc:	3f 85       	ldd	r19, Y+15	; 0x0f
    14de:	60 0f       	add	r22, r16
    14e0:	71 1f       	adc	r23, r17
    14e2:	82 1f       	adc	r24, r18
    14e4:	93 1f       	adc	r25, r19
    14e6:	6c 83       	std	Y+4, r22	; 0x04
    14e8:	7d 83       	std	Y+5, r23	; 0x05
    14ea:	8e 83       	std	Y+6, r24	; 0x06
    14ec:	9f 83       	std	Y+7, r25	; 0x07
				registerTimeout(&(tt->t));
    14ee:	ce 01       	movw	r24, r28
    14f0:	02 96       	adiw	r24, 0x02	; 2
    14f2:	0e 94 bc 09 	call	0x1378	; 0x1378 <registerTimeout>
				
			}
		}
	
		tt = tt->next;
    14f6:	09 90       	ld	r0, Y+
    14f8:	d8 81       	ld	r29, Y
    14fa:	c0 2d       	mov	r28, r0

void checkTimer()
{
	Timer * tt = timerList;
	
	while(tt != NULL)
    14fc:	20 97       	sbiw	r28, 0x00	; 0
    14fe:	19 f7       	brne	.-58     	; 0x14c6 <checkTimer+0x12>
			}
		}
	
		tt = tt->next;
	}
}
    1500:	df 91       	pop	r29
    1502:	cf 91       	pop	r28
    1504:	1f 91       	pop	r17
    1506:	0f 91       	pop	r16
    1508:	08 95       	ret

0000150a <registerTimer>:

int registerTimer(Timer * tt)
{
  tt->next = NULL;
    150a:	fc 01       	movw	r30, r24
    150c:	10 82       	st	Z, r1
    150e:	11 82       	std	Z+1, r1	; 0x01

	if(timerList == NULL)
    1510:	e0 91 62 26 	lds	r30, 0x2662
    1514:	f0 91 63 26 	lds	r31, 0x2663
    1518:	30 97       	sbiw	r30, 0x00	; 0
    151a:	59 f4       	brne	.+22     	; 0x1532 <registerTimer+0x28>
	{
		timerList = tt;
    151c:	80 93 62 26 	sts	0x2662, r24
    1520:	90 93 63 26 	sts	0x2663, r25
    1524:	10 c0       	rjmp	.+32     	; 0x1546 <registerTimer+0x3c>
		Timer * cur = timerList;
		
		
		while(cur->next != NULL)
		{
		  assert(tt != cur);
    1526:	8e 17       	cp	r24, r30
    1528:	9f 07       	cpc	r25, r31
    152a:	11 f4       	brne	.+4      	; 0x1530 <registerTimer+0x26>
    152c:	0e 94 b0 27 	call	0x4f60	; 0x4f60 <abort>
			cur = cur->next;
    1530:	f9 01       	movw	r30, r18
	else
	{
		Timer * cur = timerList;
		
		
		while(cur->next != NULL)
    1532:	20 81       	ld	r18, Z
    1534:	31 81       	ldd	r19, Z+1	; 0x01
    1536:	21 15       	cp	r18, r1
    1538:	31 05       	cpc	r19, r1
    153a:	a9 f7       	brne	.-22     	; 0x1526 <registerTimer+0x1c>
		{
		  assert(tt != cur);
			cur = cur->next;
		}
		assert(tt != cur);
    153c:	8e 17       	cp	r24, r30
    153e:	9f 07       	cpc	r25, r31
    1540:	a9 f3       	breq	.-22     	; 0x152c <registerTimer+0x22>
		
		cur->next = tt;
    1542:	80 83       	st	Z, r24
    1544:	91 83       	std	Z+1, r25	; 0x01
	}
	
	tt->state = ACTIVE;	
    1546:	21 e0       	ldi	r18, 0x01	; 1
    1548:	fc 01       	movw	r30, r24
    154a:	20 8b       	std	Z+16, r18	; 0x10
	
	return 1;
}
    154c:	81 e0       	ldi	r24, 0x01	; 1
    154e:	90 e0       	ldi	r25, 0x00	; 0
    1550:	08 95       	ret

00001552 <deregisterTimer>:

int deregisterTimer(Timer * tt)
{
	if(timerList == NULL)
    1552:	e0 91 62 26 	lds	r30, 0x2662
    1556:	f0 91 63 26 	lds	r31, 0x2663
    155a:	30 97       	sbiw	r30, 0x00	; 0
    155c:	d9 f0       	breq	.+54     	; 0x1594 <deregisterTimer+0x42>
    155e:	a0 e0       	ldi	r26, 0x00	; 0
    1560:	b0 e0       	ldi	r27, 0x00	; 0
    1562:	07 c0       	rjmp	.+14     	; 0x1572 <deregisterTimer+0x20>
		Timer * cur = timerList;
	
		while(cur != NULL && cur != tt)
		{
			prev = cur;
			cur = cur->next;
    1564:	20 81       	ld	r18, Z
    1566:	31 81       	ldd	r19, Z+1	; 0x01
    1568:	df 01       	movw	r26, r30
	else
	{
		Timer * prev = NULL;
		Timer * cur = timerList;
	
		while(cur != NULL && cur != tt)
    156a:	21 15       	cp	r18, r1
    156c:	31 05       	cpc	r19, r1
    156e:	91 f0       	breq	.+36     	; 0x1594 <deregisterTimer+0x42>
		{
			prev = cur;
			cur = cur->next;
    1570:	f9 01       	movw	r30, r18
	else
	{
		Timer * prev = NULL;
		Timer * cur = timerList;
	
		while(cur != NULL && cur != tt)
    1572:	e8 17       	cp	r30, r24
    1574:	f9 07       	cpc	r31, r25
    1576:	b1 f7       	brne	.-20     	; 0x1564 <deregisterTimer+0x12>
    1578:	10 c0       	rjmp	.+32     	; 0x159a <deregisterTimer+0x48>
		}
		else
		{
			if(prev == NULL)
			{
				timerList = cur->next;
    157a:	80 93 62 26 	sts	0x2662, r24
    157e:	90 93 63 26 	sts	0x2663, r25
    1582:	02 c0       	rjmp	.+4      	; 0x1588 <deregisterTimer+0x36>
			}
			else
			{
				prev->next = cur->next;
    1584:	8d 93       	st	X+, r24
    1586:	9c 93       	st	X, r25
			}
			cur->next = NULL;
    1588:	10 82       	st	Z, r1
    158a:	11 82       	std	Z+1, r1	; 0x01
			cur->state = INACTIVE;
    158c:	10 8a       	std	Z+16, r1	; 0x10
			
			return 1;
    158e:	21 e0       	ldi	r18, 0x01	; 1
    1590:	30 e0       	ldi	r19, 0x00	; 0
    1592:	08 c0       	rjmp	.+16     	; 0x15a4 <deregisterTimer+0x52>

int deregisterTimer(Timer * tt)
{
	if(timerList == NULL)
	{
		return 0;
    1594:	20 e0       	ldi	r18, 0x00	; 0
    1596:	30 e0       	ldi	r19, 0x00	; 0
    1598:	05 c0       	rjmp	.+10     	; 0x15a4 <deregisterTimer+0x52>
    159a:	80 81       	ld	r24, Z
    159c:	91 81       	ldd	r25, Z+1	; 0x01
		{
			return 0;
		}
		else
		{
			if(prev == NULL)
    159e:	10 97       	sbiw	r26, 0x00	; 0
    15a0:	89 f7       	brne	.-30     	; 0x1584 <deregisterTimer+0x32>
    15a2:	eb cf       	rjmp	.-42     	; 0x157a <deregisterTimer+0x28>
			cur->state = INACTIVE;
			
			return 1;
		}
	}
}
    15a4:	c9 01       	movw	r24, r18
    15a6:	08 95       	ret

000015a8 <clearTimer>:

// attempts to deregister the timer and its timeout from both queues.
// returns the sum of the component deregistrations.
int clearTimer(Timer * tt)
{
    15a8:	0f 93       	push	r16
    15aa:	1f 93       	push	r17
    15ac:	cf 93       	push	r28
    15ae:	df 93       	push	r29
    15b0:	8c 01       	movw	r16, r24

  int ret = deregisterTimer(tt);
    15b2:	0e 94 a9 0a 	call	0x1552	; 0x1552 <deregisterTimer>
    15b6:	ec 01       	movw	r28, r24


  if(tt != NULL)
    15b8:	01 15       	cp	r16, r1
    15ba:	11 05       	cpc	r17, r1
    15bc:	31 f0       	breq	.+12     	; 0x15ca <clearTimer+0x22>
    {
      ret += deregisterTimeout(&(tt->t));
    15be:	c8 01       	movw	r24, r16
    15c0:	02 96       	adiw	r24, 0x02	; 2
    15c2:	0e 94 04 0a 	call	0x1408	; 0x1408 <deregisterTimeout>
    15c6:	c8 0f       	add	r28, r24
    15c8:	d9 1f       	adc	r29, r25
    }

  return ret;
}
    15ca:	ce 01       	movw	r24, r28
    15cc:	df 91       	pop	r29
    15ce:	cf 91       	pop	r28
    15d0:	1f 91       	pop	r17
    15d2:	0f 91       	pop	r16
    15d4:	08 95       	ret

000015d6 <initTime>:

void initTime()
{
	timeoutList = NULL;
    15d6:	10 92 64 26 	sts	0x2664, r1
    15da:	10 92 65 26 	sts	0x2665, r1
	thisTimeout = NULL;
    15de:	10 92 60 26 	sts	0x2660, r1
    15e2:	10 92 61 26 	sts	0x2661, r1
	timerList = NULL;
    15e6:	10 92 62 26 	sts	0x2662, r1
    15ea:	10 92 63 26 	sts	0x2663, r1
	
	initHWTime();
    15ee:	0c 94 2f 1d 	jmp	0x3a5e	; 0x3a5e <initHWTime>

000015f2 <getMicData>:
threadvar MicData _mic;

MicData getMicData()
{
    return _mic;
}
    15f2:	80 91 66 26 	lds	r24, 0x2666
    15f6:	90 91 67 26 	lds	r25, 0x2667
    15fa:	08 95       	ret

000015fc <freeLogChunk>:
		// try again
		sendLogChunk(faceNum(thisChunk), thisChunk->data, DATA_SIZE);
		free(thisChunk);
	}
#else
	free(thisChunk);
    15fc:	80 91 4b 21 	lds	r24, 0x214B
    1600:	90 91 4c 21 	lds	r25, 0x214C
    1604:	0c 94 12 27 	jmp	0x4e24	; 0x4e24 <free>

00001608 <freeMyChunk>:
void freeLogChunk(void);
byte sendMyChunk(PRef port, byte *data, byte size, MsgHandler mh);

void freeMyChunk(void)
{
    free(thisChunk);
    1608:	80 91 4b 21 	lds	r24, 0x214B
    160c:	90 91 4c 21 	lds	r25, 0x214C
    1610:	0c 94 12 27 	jmp	0x4e24	; 0x4e24 <free>

00001614 <sendMyChunk>:
	free(thisChunk);
#endif
}

byte sendMyChunk(PRef port, byte *data, byte size, MsgHandler mh) 
{
    1614:	8f 92       	push	r8
    1616:	9f 92       	push	r9
    1618:	bf 92       	push	r11
    161a:	cf 92       	push	r12
    161c:	df 92       	push	r13
    161e:	ef 92       	push	r14
    1620:	ff 92       	push	r15
    1622:	0f 93       	push	r16
    1624:	1f 93       	push	r17
    1626:	cf 93       	push	r28
    1628:	df 93       	push	r29
    162a:	1f 92       	push	r1
    162c:	cd b7       	in	r28, 0x3d	; 61
    162e:	de b7       	in	r29, 0x3e	; 62
    1630:	b8 2e       	mov	r11, r24
    1632:	6b 01       	movw	r12, r22
    1634:	89 01       	movw	r16, r18
    Chunk *c=calloc(sizeof(Chunk), 1);
    1636:	61 e0       	ldi	r22, 0x01	; 1
    1638:	70 e0       	ldi	r23, 0x00	; 0
    163a:	88 e1       	ldi	r24, 0x18	; 24
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	49 83       	std	Y+1, r20	; 0x01
    1640:	0e 94 59 26 	call	0x4cb2	; 0x4cb2 <calloc>
    1644:	4c 01       	movw	r8, r24
    if (c == NULL)
    1646:	49 81       	ldd	r20, Y+1	; 0x01
    1648:	00 97       	sbiw	r24, 0x00	; 0
    164a:	79 f0       	breq	.+30     	; 0x166a <sendMyChunk+0x56>
    {
        return 0;
    }
    if (sendMessageToPort(c, port, data, size, mh, (GenericHandler)&freeMyChunk) == 0)
    164c:	84 e0       	ldi	r24, 0x04	; 4
    164e:	e8 2e       	mov	r14, r24
    1650:	8b e0       	ldi	r24, 0x0B	; 11
    1652:	f8 2e       	mov	r15, r24
    1654:	24 2f       	mov	r18, r20
    1656:	a6 01       	movw	r20, r12
    1658:	6b 2d       	mov	r22, r11
    165a:	c4 01       	movw	r24, r8
    165c:	0e 94 88 08 	call	0x1110	; 0x1110 <sendMessageToPort>
    1660:	81 11       	cpse	r24, r1
    1662:	05 c0       	rjmp	.+10     	; 0x166e <sendMyChunk+0x5a>
    {
        free(c);
    1664:	c4 01       	movw	r24, r8
    1666:	0e 94 12 27 	call	0x4e24	; 0x4e24 <free>
byte sendMyChunk(PRef port, byte *data, byte size, MsgHandler mh) 
{
    Chunk *c=calloc(sizeof(Chunk), 1);
    if (c == NULL)
    {
        return 0;
    166a:	80 e0       	ldi	r24, 0x00	; 0
    166c:	01 c0       	rjmp	.+2      	; 0x1670 <sendMyChunk+0x5c>
    if (sendMessageToPort(c, port, data, size, mh, (GenericHandler)&freeMyChunk) == 0)
    {
        free(c);
        return 0;
    }
    return 1;
    166e:	81 e0       	ldi	r24, 0x01	; 1
}
    1670:	0f 90       	pop	r0
    1672:	df 91       	pop	r29
    1674:	cf 91       	pop	r28
    1676:	1f 91       	pop	r17
    1678:	0f 91       	pop	r16
    167a:	ff 90       	pop	r15
    167c:	ef 90       	pop	r14
    167e:	df 90       	pop	r13
    1680:	cf 90       	pop	r12
    1682:	bf 90       	pop	r11
    1684:	9f 90       	pop	r9
    1686:	8f 90       	pop	r8
    1688:	08 95       	ret

0000168a <processCmd>:

void processCmd(void) 
{
    168a:	cf 93       	push	r28
   int X = 0;
    if (seq < thisChunk->data[2]) {
    168c:	e0 91 4b 21 	lds	r30, 0x214B
    1690:	f0 91 4c 21 	lds	r31, 0x214C
    1694:	82 81       	ldd	r24, Z+2	; 0x02
    1696:	90 e0       	ldi	r25, 0x00	; 0
    1698:	20 91 26 21 	lds	r18, 0x2126
    169c:	30 91 27 21 	lds	r19, 0x2127
    16a0:	28 17       	cp	r18, r24
    16a2:	39 07       	cpc	r19, r25
    16a4:	b4 f4       	brge	.+44     	; 0x16d2 <processCmd+0x48>
	  seq = thisChunk->data[2];
    16a6:	80 93 26 21 	sts	0x2126, r24
    16aa:	90 93 27 21 	sts	0x2127, r25
    16ae:	c0 e0       	ldi	r28, 0x00	; 0
	  for (X ; X <= 5 ; X++) {
	    sendMyChunk(X, thisChunk->data, 4, (MsgHandler)myMsgHandler);
    16b0:	60 91 4b 21 	lds	r22, 0x214B
    16b4:	70 91 4c 21 	lds	r23, 0x214C
    16b8:	2b e6       	ldi	r18, 0x6B	; 107
    16ba:	3b e0       	ldi	r19, 0x0B	; 11
    16bc:	44 e0       	ldi	r20, 0x04	; 4
    16be:	8c 2f       	mov	r24, r28
    16c0:	0e 94 0a 0b 	call	0x1614	; 0x1614 <sendMyChunk>
    16c4:	cf 5f       	subi	r28, 0xFF	; 255
void processCmd(void) 
{
   int X = 0;
    if (seq < thisChunk->data[2]) {
	  seq = thisChunk->data[2];
	  for (X ; X <= 5 ; X++) {
    16c6:	c6 30       	cpi	r28, 0x06	; 6
    16c8:	99 f7       	brne	.-26     	; 0x16b0 <processCmd+0x26>
	    sendMyChunk(X, thisChunk->data, 4, (MsgHandler)myMsgHandler);
	  }
	  triggerHandler(EVENT_COMMAND_RECEIVED);
    16ca:	85 e1       	ldi	r24, 0x15	; 21
    } 
}
    16cc:	cf 91       	pop	r28
    if (seq < thisChunk->data[2]) {
	  seq = thisChunk->data[2];
	  for (X ; X <= 5 ; X++) {
	    sendMyChunk(X, thisChunk->data, 4, (MsgHandler)myMsgHandler);
	  }
	  triggerHandler(EVENT_COMMAND_RECEIVED);
    16ce:	0c 94 7a 07 	jmp	0xef4	; 0xef4 <triggerHandler>
    } 
}
    16d2:	cf 91       	pop	r28
    16d4:	08 95       	ret

000016d6 <myMsgHandler>:

void myMsgHandler(void)
{
  processCmd();
    16d6:	0c 94 45 0b 	jmp	0x168a	; 0x168a <processCmd>

000016da <isHostPort>:
}

byte isHostPort(PRef p)
{
	return ((p == toHost) && (PCConnection == 1));
    16da:	90 91 1c 20 	lds	r25, 0x201C
    16de:	89 13       	cpse	r24, r25
    16e0:	06 c0       	rjmp	.+12     	; 0x16ee <isHostPort+0x14>
    16e2:	81 e0       	ldi	r24, 0x01	; 1
    16e4:	90 e0       	ldi	r25, 0x00	; 0
    16e6:	20 91 28 21 	lds	r18, 0x2128
    16ea:	21 30       	cpi	r18, 0x01	; 1
    16ec:	11 f0       	breq	.+4      	; 0x16f2 <isHostPort+0x18>
    16ee:	80 e0       	ldi	r24, 0x00	; 0
    16f0:	90 e0       	ldi	r25, 0x00	; 0
}
    16f2:	08 95       	ret

000016f4 <sendLogChunk>:

byte sendLogChunk(PRef p, byte *d, byte s)
{
    16f4:	8f 92       	push	r8
    16f6:	9f 92       	push	r9
    16f8:	bf 92       	push	r11
    16fa:	cf 92       	push	r12
    16fc:	df 92       	push	r13
    16fe:	ef 92       	push	r14
    1700:	ff 92       	push	r15
    1702:	0f 93       	push	r16
    1704:	1f 93       	push	r17
    1706:	cf 93       	push	r28
    1708:	df 93       	push	r29
    170a:	1f 92       	push	r1
    170c:	cd b7       	in	r28, 0x3d	; 61
    170e:	de b7       	in	r29, 0x3e	; 62
    1710:	b8 2e       	mov	r11, r24
    1712:	6b 01       	movw	r12, r22
	Chunk *c=calloc(sizeof(Chunk), 1);
    1714:	61 e0       	ldi	r22, 0x01	; 1
    1716:	70 e0       	ldi	r23, 0x00	; 0
    1718:	88 e1       	ldi	r24, 0x18	; 24
    171a:	90 e0       	ldi	r25, 0x00	; 0
    171c:	49 83       	std	Y+1, r20	; 0x01
    171e:	0e 94 59 26 	call	0x4cb2	; 0x4cb2 <calloc>
    1722:	4c 01       	movw	r8, r24
		c=calloc(sizeof(Chunk), 1);
	}
	while (sendMessageToPort(c, p, d, s, (MsgHandler)RES_SYS_HANDLER, (GenericHandler)&freeLogChunk) == 0);
	return 1;
#else
	if (c == NULL)
    1724:	29 81       	ldd	r18, Y+1	; 0x01
    1726:	00 97       	sbiw	r24, 0x00	; 0
    1728:	81 f0       	breq	.+32     	; 0x174a <sendLogChunk+0x56>
	{
		return 0;
	}
	if (sendMessageToPort(c, p, d, s, (MsgHandler)RES_SYS_HANDLER, (GenericHandler)&freeLogChunk) == 0)
    172a:	9e ef       	ldi	r25, 0xFE	; 254
    172c:	e9 2e       	mov	r14, r25
    172e:	9a e0       	ldi	r25, 0x0A	; 10
    1730:	f9 2e       	mov	r15, r25
    1732:	00 e0       	ldi	r16, 0x00	; 0
    1734:	10 e0       	ldi	r17, 0x00	; 0
    1736:	a6 01       	movw	r20, r12
    1738:	6b 2d       	mov	r22, r11
    173a:	c4 01       	movw	r24, r8
    173c:	0e 94 88 08 	call	0x1110	; 0x1110 <sendMessageToPort>
    1740:	81 11       	cpse	r24, r1
    1742:	05 c0       	rjmp	.+10     	; 0x174e <sendLogChunk+0x5a>
	{
		free(c);
    1744:	c4 01       	movw	r24, r8
    1746:	0e 94 12 27 	call	0x4e24	; 0x4e24 <free>
	while (sendMessageToPort(c, p, d, s, (MsgHandler)RES_SYS_HANDLER, (GenericHandler)&freeLogChunk) == 0);
	return 1;
#else
	if (c == NULL)
	{
		return 0;
    174a:	80 e0       	ldi	r24, 0x00	; 0
    174c:	01 c0       	rjmp	.+2      	; 0x1750 <sendLogChunk+0x5c>
	if (sendMessageToPort(c, p, d, s, (MsgHandler)RES_SYS_HANDLER, (GenericHandler)&freeLogChunk) == 0)
	{
		free(c);
		return 0;
	}
	return 1;
    174e:	81 e0       	ldi	r24, 0x01	; 1
#endif

}
    1750:	0f 90       	pop	r0
    1752:	df 91       	pop	r29
    1754:	cf 91       	pop	r28
    1756:	1f 91       	pop	r17
    1758:	0f 91       	pop	r16
    175a:	ff 90       	pop	r15
    175c:	ef 90       	pop	r14
    175e:	df 90       	pop	r13
    1760:	cf 90       	pop	r12
    1762:	bf 90       	pop	r11
    1764:	9f 90       	pop	r9
    1766:	8f 90       	pop	r8
    1768:	08 95       	ret

0000176a <sendPathToHost>:


void sendPathToHost(PRef p)
{
    176a:	cf 93       	push	r28
    176c:	df 93       	push	r29
    176e:	1f 92       	push	r1
    1770:	1f 92       	push	r1
    1772:	cd b7       	in	r28, 0x3d	; 61
    1774:	de b7       	in	r29, 0x3e	; 62
	byte buf[2];
	
	buf[0] = LOG_MSG;
    1776:	90 e5       	ldi	r25, 0x50	; 80
    1778:	99 83       	std	Y+1, r25	; 0x01
	buf[1] = LOG_PATH_TO_HOST;
    177a:	92 e0       	ldi	r25, 0x02	; 2
    177c:	9a 83       	std	Y+2, r25	; 0x02
	sendLogChunk(p, buf, 2);
    177e:	42 e0       	ldi	r20, 0x02	; 2
    1780:	be 01       	movw	r22, r28
    1782:	6f 5f       	subi	r22, 0xFF	; 255
    1784:	7f 4f       	sbci	r23, 0xFF	; 255
    1786:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <sendLogChunk>
	
}
    178a:	0f 90       	pop	r0
    178c:	0f 90       	pop	r0
    178e:	df 91       	pop	r29
    1790:	cf 91       	pop	r28
    1792:	08 95       	ret

00001794 <spreadPathToHost>:

void spreadPathToHost(PRef excluded)
{
    1794:	0f 93       	push	r16
    1796:	1f 93       	push	r17
    1798:	cf 93       	push	r28
    179a:	df 93       	push	r29
    179c:	08 2f       	mov	r16, r24
    179e:	cd e4       	ldi	r28, 0x4D	; 77
    17a0:	d1 e2       	ldi	r29, 0x21	; 33
	byte p;

	for( p = 0; p < NUM_PORTS; p++)
    17a2:	10 e0       	ldi	r17, 0x00	; 0
	{
		if ((p == excluded) || (thisNeighborhood.n[p] == VACANT))
    17a4:	10 17       	cp	r17, r16
    17a6:	39 f0       	breq	.+14     	; 0x17b6 <spreadPathToHost+0x22>
    17a8:	28 81       	ld	r18, Y
    17aa:	39 81       	ldd	r19, Y+1	; 0x01
    17ac:	23 2b       	or	r18, r19
    17ae:	19 f0       	breq	.+6      	; 0x17b6 <spreadPathToHost+0x22>
		{
			continue;
		}
		sendPathToHost(p);
    17b0:	81 2f       	mov	r24, r17
    17b2:	0e 94 b5 0b 	call	0x176a	; 0x176a <sendPathToHost>

void spreadPathToHost(PRef excluded)
{
	byte p;

	for( p = 0; p < NUM_PORTS; p++)
    17b6:	1f 5f       	subi	r17, 0xFF	; 255
    17b8:	22 96       	adiw	r28, 0x02	; 2
    17ba:	16 30       	cpi	r17, 0x06	; 6
    17bc:	99 f7       	brne	.-26     	; 0x17a4 <spreadPathToHost+0x10>
		{
			continue;
		}
		sendPathToHost(p);
	}
}
    17be:	df 91       	pop	r29
    17c0:	cf 91       	pop	r28
    17c2:	1f 91       	pop	r17
    17c4:	0f 91       	pop	r16
    17c6:	08 95       	ret

000017c8 <forwardToHost>:

void forwardToHost(Chunk *c)
{
    17c8:	bc 01       	movw	r22, r24
	if(toHost != UNDEFINED_HOST) {
    17ca:	80 91 1c 20 	lds	r24, 0x201C
    17ce:	88 3c       	cpi	r24, 0xC8	; 200
    17d0:	19 f0       	breq	.+6      	; 0x17d8 <forwardToHost+0x10>
		sendLogChunk(toHost, c->data, DATA_SIZE);
    17d2:	41 e1       	ldi	r20, 0x11	; 17
    17d4:	0c 94 7a 0b 	jmp	0x16f4	; 0x16f4 <sendLogChunk>
    17d8:	08 95       	ret

000017da <initLogDebug>:
	}
}

void initLogDebug(void)
{
    17da:	ff 92       	push	r15
    17dc:	0f 93       	push	r16
    17de:	1f 93       	push	r17
    17e0:	cf 93       	push	r28
    17e2:	df 93       	push	r29
    17e4:	1f 92       	push	r1
    17e6:	1f 92       	push	r1
    17e8:	cd b7       	in	r28, 0x3d	; 61
    17ea:	de b7       	in	r29, 0x3e	; 62
	byte buf[2];
	
	toHost = UNDEFINED_HOST;
    17ec:	88 ec       	ldi	r24, 0xC8	; 200
    17ee:	80 93 1c 20 	sts	0x201C, r24
	PCConnection = 0;
    17f2:	10 92 28 21 	sts	0x2128, r1
	
	buf[0] = LOG_MSG;
    17f6:	80 e5       	ldi	r24, 0x50	; 80
    17f8:	89 83       	std	Y+1, r24	; 0x01
	buf[1] = LOG_NEED_PATH_TO_HOST;
    17fa:	83 e0       	ldi	r24, 0x03	; 3
    17fc:	8a 83       	std	Y+2, r24	; 0x02
	byte p;
	
	setColor(ORANGE); // to remember to the user that the block is waiting
    17fe:	81 e0       	ldi	r24, 0x01	; 1
    1800:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <setColor>
	while(toHost == UNDEFINED_HOST)
    1804:	15 c0       	rjmp	.+42     	; 0x1830 <initLogDebug+0x56>
	{
		for( p = 0; p < NUM_PORTS; p++)
		{
			if ((thisNeighborhood.n[p] == VACANT))
    1806:	f8 01       	movw	r30, r16
    1808:	21 91       	ld	r18, Z+
    180a:	31 91       	ld	r19, Z+
    180c:	8f 01       	movw	r16, r30
    180e:	23 2b       	or	r18, r19
    1810:	39 f0       	breq	.+14     	; 0x1820 <initLogDebug+0x46>
			{
				continue;
			}
			sendLogChunk(p, buf, 2);
    1812:	42 e0       	ldi	r20, 0x02	; 2
    1814:	be 01       	movw	r22, r28
    1816:	6f 5f       	subi	r22, 0xFF	; 255
    1818:	7f 4f       	sbci	r23, 0xFF	; 255
    181a:	8f 2d       	mov	r24, r15
    181c:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <sendLogChunk>
	byte p;
	
	setColor(ORANGE); // to remember to the user that the block is waiting
	while(toHost == UNDEFINED_HOST)
	{
		for( p = 0; p < NUM_PORTS; p++)
    1820:	f3 94       	inc	r15
    1822:	f6 e0       	ldi	r31, 0x06	; 6
    1824:	ff 12       	cpse	r15, r31
    1826:	ef cf       	rjmp	.-34     	; 0x1806 <initLogDebug+0x2c>
			{
				continue;
			}
			sendLogChunk(p, buf, 2);
		}
		delayMS(6);
    1828:	86 e0       	ldi	r24, 0x06	; 6
    182a:	90 e0       	ldi	r25, 0x00	; 0
    182c:	0e 94 4f 09 	call	0x129e	; 0x129e <delayMS>
	buf[0] = LOG_MSG;
	buf[1] = LOG_NEED_PATH_TO_HOST;
	byte p;
	
	setColor(ORANGE); // to remember to the user that the block is waiting
	while(toHost == UNDEFINED_HOST)
    1830:	80 91 1c 20 	lds	r24, 0x201C
    1834:	88 3c       	cpi	r24, 0xC8	; 200
    1836:	21 f4       	brne	.+8      	; 0x1840 <initLogDebug+0x66>
    1838:	0d e4       	ldi	r16, 0x4D	; 77
    183a:	11 e2       	ldi	r17, 0x21	; 33
    183c:	f1 2c       	mov	r15, r1
    183e:	e3 cf       	rjmp	.-58     	; 0x1806 <initLogDebug+0x2c>
			}
			sendLogChunk(p, buf, 2);
		}
		delayMS(6);
	}
}
    1840:	0f 90       	pop	r0
    1842:	0f 90       	pop	r0
    1844:	df 91       	pop	r29
    1846:	cf 91       	pop	r28
    1848:	1f 91       	pop	r17
    184a:	0f 91       	pop	r16
    184c:	ff 90       	pop	r15
    184e:	08 95       	ret

00001850 <handleLogMessage>:

byte handleLogMessage(void)
{
	if( thisChunk == NULL ) 
    1850:	e0 91 4b 21 	lds	r30, 0x214B
    1854:	f0 91 4c 21 	lds	r31, 0x214C
    1858:	30 97       	sbiw	r30, 0x00	; 0
    185a:	b1 f1       	breq	.+108    	; 0x18c8 <handleLogMessage+0x78>
	{
		return 0;
	}
	switch(thisChunk->data[1])
    185c:	91 81       	ldd	r25, Z+1	; 0x01
    185e:	93 30       	cpi	r25, 0x03	; 3
    1860:	f9 f0       	breq	.+62     	; 0x18a0 <handleLogMessage+0x50>
    1862:	28 f4       	brcc	.+10     	; 0x186e <handleLogMessage+0x1e>
    1864:	91 30       	cpi	r25, 0x01	; 1
    1866:	41 f0       	breq	.+16     	; 0x1878 <handleLogMessage+0x28>
    1868:	92 30       	cpi	r25, 0x02	; 2
    186a:	81 f5       	brne	.+96     	; 0x18cc <handleLogMessage+0x7c>
    186c:	0c c0       	rjmp	.+24     	; 0x1886 <handleLogMessage+0x36>
    186e:	94 30       	cpi	r25, 0x04	; 4
    1870:	01 f1       	breq	.+64     	; 0x18b2 <handleLogMessage+0x62>
    1872:	95 30       	cpi	r25, 0x05	; 5
    1874:	59 f5       	brne	.+86     	; 0x18cc <handleLogMessage+0x7c>
    1876:	25 c0       	rjmp	.+74     	; 0x18c2 <handleLogMessage+0x72>
	{
		case LOG_I_AM_HOST:
			toHost = faceNum(thisChunk);			
    1878:	81 89       	ldd	r24, Z+17	; 0x11
    187a:	87 70       	andi	r24, 0x07	; 7
    187c:	80 93 1c 20 	sts	0x201C, r24
			PCConnection = 1;
    1880:	90 93 28 21 	sts	0x2128, r25
    1884:	0a c0       	rjmp	.+20     	; 0x189a <handleLogMessage+0x4a>
			spreadPathToHost(faceNum(thisChunk));
		break;
		case LOG_PATH_TO_HOST:
			if (toHost == UNDEFINED_HOST) {
    1886:	80 91 1c 20 	lds	r24, 0x201C
    188a:	88 3c       	cpi	r24, 0xC8	; 200
    188c:	f9 f4       	brne	.+62     	; 0x18cc <handleLogMessage+0x7c>
				toHost = faceNum(thisChunk);
    188e:	81 89       	ldd	r24, Z+17	; 0x11
    1890:	87 70       	andi	r24, 0x07	; 7
    1892:	80 93 1c 20 	sts	0x201C, r24
				PCConnection = 0;
    1896:	10 92 28 21 	sts	0x2128, r1
				spreadPathToHost(faceNum(thisChunk));
    189a:	0e 94 ca 0b 	call	0x1794	; 0x1794 <spreadPathToHost>
    189e:	16 c0       	rjmp	.+44     	; 0x18cc <handleLogMessage+0x7c>
			}
		break;
		case LOG_NEED_PATH_TO_HOST:
			if (toHost != UNDEFINED_HOST) {
    18a0:	80 91 1c 20 	lds	r24, 0x201C
    18a4:	88 3c       	cpi	r24, 0xC8	; 200
    18a6:	91 f0       	breq	.+36     	; 0x18cc <handleLogMessage+0x7c>
				sendPathToHost(faceNum(thisChunk));
    18a8:	81 89       	ldd	r24, Z+17	; 0x11
    18aa:	87 70       	andi	r24, 0x07	; 7
    18ac:	0e 94 b5 0b 	call	0x176a	; 0x176a <sendPathToHost>
    18b0:	0d c0       	rjmp	.+26     	; 0x18cc <handleLogMessage+0x7c>
			}
		break;
		case LOG_DATA:
			if(toHost != UNDEFINED_HOST) {
    18b2:	80 91 1c 20 	lds	r24, 0x201C
    18b6:	88 3c       	cpi	r24, 0xC8	; 200
    18b8:	49 f0       	breq	.+18     	; 0x18cc <handleLogMessage+0x7c>
				forwardToHost(thisChunk);
    18ba:	cf 01       	movw	r24, r30
    18bc:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <forwardToHost>
    18c0:	05 c0       	rjmp	.+10     	; 0x18cc <handleLogMessage+0x7c>
			}
		break;		
		case LOG_CMD:
			processCmd();
    18c2:	0e 94 45 0b 	call	0x168a	; 0x168a <processCmd>
    18c6:	02 c0       	rjmp	.+4      	; 0x18cc <handleLogMessage+0x7c>

byte handleLogMessage(void)
{
	if( thisChunk == NULL ) 
	{
		return 0;
    18c8:	80 e0       	ldi	r24, 0x00	; 0
    18ca:	08 95       	ret
		case LOG_CMD:
			processCmd();
		break;
	}
	
	return 1;
    18cc:	81 e0       	ldi	r24, 0x01	; 1
}
    18ce:	08 95       	ret

000018d0 <getSize>:

byte getSize(char* str) {
	byte sizeCar = 0;
	byte sizeChunk = 1;
	
	if (str == NULL) {
    18d0:	00 97       	sbiw	r24, 0x00	; 0
    18d2:	a1 f0       	breq	.+40     	; 0x18fc <getSize+0x2c>
        return 0;
    }
	
	sizeCar = strlen(str) + 1;
    18d4:	dc 01       	movw	r26, r24
    18d6:	0d 90       	ld	r0, X+
    18d8:	00 20       	and	r0, r0
    18da:	e9 f7       	brne	.-6      	; 0x18d6 <getSize+0x6>
    18dc:	11 97       	sbiw	r26, 0x01	; 1
    18de:	a8 1b       	sub	r26, r24
    18e0:	8a 2f       	mov	r24, r26
    18e2:	8f 5f       	subi	r24, 0xFF	; 255

    if (sizeCar < 11) {
    18e4:	8b 30       	cpi	r24, 0x0B	; 11
    18e6:	60 f0       	brcs	.+24     	; 0x1900 <getSize+0x30>
        return 1;
    }
    
    sizeCar -= 10;
    18e8:	8a 50       	subi	r24, 0x0A	; 10
    sizeChunk += sizeCar / 11;
    18ea:	6b e0       	ldi	r22, 0x0B	; 11
    18ec:	0e 94 ff 25 	call	0x4bfe	; 0x4bfe <__udivmodqi4>
	if ((sizeCar % 11) != 0) {
    18f0:	91 11       	cpse	r25, r1
    18f2:	02 c0       	rjmp	.+4      	; 0x18f8 <getSize+0x28>
    if (sizeCar < 11) {
        return 1;
    }
    
    sizeCar -= 10;
    sizeChunk += sizeCar / 11;
    18f4:	8f 5f       	subi	r24, 0xFF	; 255
    18f6:	08 95       	ret
	if ((sizeCar % 11) != 0) {
		sizeChunk++;
    18f8:	8e 5f       	subi	r24, 0xFE	; 254
    18fa:	08 95       	ret
byte getSize(char* str) {
	byte sizeCar = 0;
	byte sizeChunk = 1;
	
	if (str == NULL) {
        return 0;
    18fc:	80 e0       	ldi	r24, 0x00	; 0
    18fe:	08 95       	ret
    }
	
	sizeCar = strlen(str) + 1;

    if (sizeCar < 11) {
        return 1;
    1900:	81 e0       	ldi	r24, 0x01	; 1
    sizeChunk += sizeCar / 11;
	if ((sizeCar % 11) != 0) {
		sizeChunk++;
	}
	return sizeChunk;
}
    1902:	08 95       	ret

00001904 <printDebug>:

// format: <LOG_MSG> <LOG_DATA> <block id (2 bytes) > <message # (1 byte)> < fragment # (1 byte)> < if fragment # = 1, number of fragments. Otherwise data> < log data: 17 - 7 = 10>.
byte printDebug(char* str) {
    1904:	8f 92       	push	r8
    1906:	9f 92       	push	r9
    1908:	af 92       	push	r10
    190a:	bf 92       	push	r11
    190c:	cf 92       	push	r12
    190e:	df 92       	push	r13
    1910:	ef 92       	push	r14
    1912:	ff 92       	push	r15
    1914:	0f 93       	push	r16
    1916:	1f 93       	push	r17
    1918:	cf 93       	push	r28
    191a:	df 93       	push	r29
    191c:	cd b7       	in	r28, 0x3d	; 61
    191e:	de b7       	in	r29, 0x3e	; 62
    1920:	61 97       	sbiw	r28, 0x11	; 17
    1922:	cd bf       	out	0x3d, r28	; 61
    1924:	de bf       	out	0x3e, r29	; 62
    1926:	8c 01       	movw	r16, r24
	byte size = getSize(str);
    1928:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <getSize>
    192c:	b8 2e       	mov	r11, r24
	byte buf[DATA_SIZE];
	byte s = 0;	
	byte fId = 0;
	byte off = 6;
	
	if (toHost == UNDEFINED_HOST)
    192e:	80 91 1c 20 	lds	r24, 0x201C
    1932:	88 3c       	cpi	r24, 0xC8	; 200
    1934:	09 f4       	brne	.+2      	; 0x1938 <printDebug+0x34>
    1936:	7a c0       	rjmp	.+244    	; 0x1a2c <printDebug+0x128>
	{
		return 0;
	}
	
	buf[0] = LOG_MSG;
    1938:	80 e5       	ldi	r24, 0x50	; 80
    193a:	89 83       	std	Y+1, r24	; 0x01
	buf[1] = LOG_DATA;
    193c:	84 e0       	ldi	r24, 0x04	; 4
    193e:	8a 83       	std	Y+2, r24	; 0x02
	GUIDIntoChar(getGUID(), &(buf[2]));
    1940:	0e 94 08 1a 	call	0x3410	; 0x3410 <getGUID>
    1944:	be 01       	movw	r22, r28
    1946:	6d 5f       	subi	r22, 0xFD	; 253
    1948:	7f 4f       	sbci	r23, 0xFF	; 255
    194a:	0e 94 ad 04 	call	0x95a	; 0x95a <GUIDIntoChar>
	buf[4] = mId;
    194e:	80 91 29 21 	lds	r24, 0x2129
    1952:	8d 83       	std	Y+5, r24	; 0x05
	
	if (size == 1) 
    1954:	81 e0       	ldi	r24, 0x01	; 1
    1956:	b8 12       	cpse	r11, r24
    1958:	56 c0       	rjmp	.+172    	; 0x1a06 <printDebug+0x102>
	{
		off = 7;
		s = strlen(str)+1;
    195a:	d8 01       	movw	r26, r16
    195c:	0d 90       	ld	r0, X+
    195e:	00 20       	and	r0, r0
    1960:	e9 f7       	brne	.-6      	; 0x195c <printDebug+0x58>
    1962:	11 97       	sbiw	r26, 0x01	; 1
    1964:	fa 2e       	mov	r15, r26
    1966:	f0 1a       	sub	r15, r16
		memcpy(buf+off, str, s);
    1968:	9e 01       	movw	r18, r28
    196a:	28 5f       	subi	r18, 0xF8	; 248
    196c:	3f 4f       	sbci	r19, 0xFF	; 255
	buf[4] = mId;
	
	if (size == 1) 
	{
		off = 7;
		s = strlen(str)+1;
    196e:	4f 2d       	mov	r20, r15
    1970:	4f 5f       	subi	r20, 0xFF	; 255
		memcpy(buf+off, str, s);
    1972:	50 e0       	ldi	r21, 0x00	; 0
    1974:	b8 01       	movw	r22, r16
    1976:	c9 01       	movw	r24, r18
    1978:	0e 94 98 28 	call	0x5130	; 0x5130 <memcpy>
		buf[5] = 0;	
    197c:	1e 82       	std	Y+6, r1	; 0x06
		buf[6] = size;
    197e:	bf 82       	std	Y+7, r11	; 0x07
		sendLogChunk(toHost, buf, s+off);
    1980:	4f 2d       	mov	r20, r15
    1982:	48 5f       	subi	r20, 0xF8	; 248
    1984:	be 01       	movw	r22, r28
    1986:	6f 5f       	subi	r22, 0xFF	; 255
    1988:	7f 4f       	sbci	r23, 0xFF	; 255
    198a:	80 91 1c 20 	lds	r24, 0x201C
    198e:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <sendLogChunk>
    1992:	45 c0       	rjmp	.+138    	; 0x1a1e <printDebug+0x11a>
	} 
	else
	{	
		for (fId = 0; fId < size; fId++)
		{
			buf[5] = fId;
    1994:	ee 82       	std	Y+6, r14	; 0x06
			if (fId == 0)
    1996:	81 11       	cpse	r24, r1
    1998:	06 c0       	rjmp	.+12     	; 0x19a6 <printDebug+0xa2>
			{
				buf[6] = size;
    199a:	bf 82       	std	Y+7, r11	; 0x07
				off = 7;
    199c:	57 e0       	ldi	r21, 0x07	; 7
    199e:	85 2e       	mov	r8, r21
				s = 10;
    19a0:	6a e0       	ldi	r22, 0x0A	; 10
    19a2:	a6 2e       	mov	r10, r22
    19a4:	13 c0       	rjmp	.+38     	; 0x19cc <printDebug+0xc8>
			}
			else if (fId == (size -1))
    19a6:	ec 14       	cp	r14, r12
    19a8:	fd 04       	cpc	r15, r13
    19aa:	61 f4       	brne	.+24     	; 0x19c4 <printDebug+0xc0>
			{
				s = strlen(str+index)+1 ;
    19ac:	f8 01       	movw	r30, r16
    19ae:	e9 0d       	add	r30, r9
    19b0:	f1 1d       	adc	r31, r1
    19b2:	df 01       	movw	r26, r30
    19b4:	0d 90       	ld	r0, X+
    19b6:	00 20       	and	r0, r0
    19b8:	e9 f7       	brne	.-6      	; 0x19b4 <printDebug+0xb0>
    19ba:	aa 2e       	mov	r10, r26
    19bc:	ae 1a       	sub	r10, r30
    19be:	46 e0       	ldi	r20, 0x06	; 6
    19c0:	84 2e       	mov	r8, r20
    19c2:	04 c0       	rjmp	.+8      	; 0x19cc <printDebug+0xc8>
			{
				buf[6] = size;
				off = 7;
				s = 10;
			}
			else if (fId == (size -1))
    19c4:	26 e0       	ldi	r18, 0x06	; 6
    19c6:	82 2e       	mov	r8, r18
			{
				s = strlen(str+index)+1 ;
			} 
			else
			{
				s = 11;
    19c8:	3b e0       	ldi	r19, 0x0B	; 11
    19ca:	a3 2e       	mov	r10, r19
			}
			memcpy(buf+off, str+index, s);
    19cc:	21 e0       	ldi	r18, 0x01	; 1
    19ce:	30 e0       	ldi	r19, 0x00	; 0
    19d0:	2c 0f       	add	r18, r28
    19d2:	3d 1f       	adc	r19, r29
    19d4:	28 0d       	add	r18, r8
    19d6:	31 1d       	adc	r19, r1
    19d8:	f8 01       	movw	r30, r16
    19da:	e9 0d       	add	r30, r9
    19dc:	f1 1d       	adc	r31, r1
    19de:	4a 2d       	mov	r20, r10
    19e0:	50 e0       	ldi	r21, 0x00	; 0
    19e2:	bf 01       	movw	r22, r30
    19e4:	c9 01       	movw	r24, r18
    19e6:	0e 94 98 28 	call	0x5130	; 0x5130 <memcpy>
			index += s;
    19ea:	9a 0c       	add	r9, r10
			sendLogChunk(toHost, buf, s+off);
    19ec:	48 2d       	mov	r20, r8
    19ee:	4a 0d       	add	r20, r10
    19f0:	be 01       	movw	r22, r28
    19f2:	6f 5f       	subi	r22, 0xFF	; 255
    19f4:	7f 4f       	sbci	r23, 0xFF	; 255
    19f6:	80 91 1c 20 	lds	r24, 0x201C
    19fa:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <sendLogChunk>
    19fe:	8f ef       	ldi	r24, 0xFF	; 255
    1a00:	e8 1a       	sub	r14, r24
    1a02:	f8 0a       	sbc	r15, r24
    1a04:	08 c0       	rjmp	.+16     	; 0x1a16 <printDebug+0x112>
	buf[0] = LOG_MSG;
	buf[1] = LOG_DATA;
	GUIDIntoChar(getGUID(), &(buf[2]));
	buf[4] = mId;
	
	if (size == 1) 
    1a06:	e1 2c       	mov	r14, r1
    1a08:	f1 2c       	mov	r15, r1
    1a0a:	91 2c       	mov	r9, r1
			{
				buf[6] = size;
				off = 7;
				s = 10;
			}
			else if (fId == (size -1))
    1a0c:	cb 2c       	mov	r12, r11
    1a0e:	d1 2c       	mov	r13, r1
    1a10:	81 e0       	ldi	r24, 0x01	; 1
    1a12:	c8 1a       	sub	r12, r24
    1a14:	d1 08       	sbc	r13, r1
    1a16:	8e 2d       	mov	r24, r14
		buf[6] = size;
		sendLogChunk(toHost, buf, s+off);
	} 
	else
	{	
		for (fId = 0; fId < size; fId++)
    1a18:	eb 14       	cp	r14, r11
    1a1a:	08 f4       	brcc	.+2      	; 0x1a1e <printDebug+0x11a>
    1a1c:	bb cf       	rjmp	.-138    	; 0x1994 <printDebug+0x90>
			index += s;
			sendLogChunk(toHost, buf, s+off);
			off = 6;
		}
	}
	mId++;
    1a1e:	80 91 29 21 	lds	r24, 0x2129
    1a22:	8f 5f       	subi	r24, 0xFF	; 255
    1a24:	80 93 29 21 	sts	0x2129, r24
	return 1;
    1a28:	81 e0       	ldi	r24, 0x01	; 1
    1a2a:	01 c0       	rjmp	.+2      	; 0x1a2e <printDebug+0x12a>
	byte fId = 0;
	byte off = 6;
	
	if (toHost == UNDEFINED_HOST)
	{
		return 0;
    1a2c:	80 e0       	ldi	r24, 0x00	; 0
			off = 6;
		}
	}
	mId++;
	return 1;
}
    1a2e:	61 96       	adiw	r28, 0x11	; 17
    1a30:	cd bf       	out	0x3d, r28	; 61
    1a32:	de bf       	out	0x3e, r29	; 62
    1a34:	df 91       	pop	r29
    1a36:	cf 91       	pop	r28
    1a38:	1f 91       	pop	r17
    1a3a:	0f 91       	pop	r16
    1a3c:	ff 90       	pop	r15
    1a3e:	ef 90       	pop	r14
    1a40:	df 90       	pop	r13
    1a42:	cf 90       	pop	r12
    1a44:	bf 90       	pop	r11
    1a46:	af 90       	pop	r10
    1a48:	9f 90       	pop	r9
    1a4a:	8f 90       	pop	r8
    1a4c:	08 95       	ret

00001a4e <blockingPrintDebug>:

byte blockingPrintDebug(char *s)
{
    1a4e:	cf 93       	push	r28
    1a50:	df 93       	push	r29
    1a52:	ec 01       	movw	r28, r24
	while(toHost == UNDEFINED_HOST)
    1a54:	04 c0       	rjmp	.+8      	; 0x1a5e <blockingPrintDebug+0x10>
	{
		delayMS(1);
    1a56:	81 e0       	ldi	r24, 0x01	; 1
    1a58:	90 e0       	ldi	r25, 0x00	; 0
    1a5a:	0e 94 4f 09 	call	0x129e	; 0x129e <delayMS>
	return 1;
}

byte blockingPrintDebug(char *s)
{
	while(toHost == UNDEFINED_HOST)
    1a5e:	80 91 1c 20 	lds	r24, 0x201C
    1a62:	88 3c       	cpi	r24, 0xC8	; 200
    1a64:	c1 f3       	breq	.-16     	; 0x1a56 <blockingPrintDebug+0x8>
	{
		delayMS(1);
	}
	return printDebug(s);
    1a66:	ce 01       	movw	r24, r28
}
    1a68:	df 91       	pop	r29
    1a6a:	cf 91       	pop	r28
{
	while(toHost == UNDEFINED_HOST)
	{
		delayMS(1);
	}
	return printDebug(s);
    1a6c:	0c 94 82 0c 	jmp	0x1904	; 0x1904 <printDebug>

00001a70 <freeClockChunk>:
 * Chunk Management Functions
 *****************************************************/

void freeClockChunk(void)
{
	free(thisChunk);
    1a70:	80 91 4b 21 	lds	r24, 0x214B
    1a74:	90 91 4c 21 	lds	r25, 0x214C
    1a78:	0c 94 12 27 	jmp	0x4e24	; 0x4e24 <free>

00001a7c <printSlope>:
	}
#endif */
}

void printSlope(void)
{
    1a7c:	08 95       	ret

00001a7e <getClockForTime>:
	printDebug(s);
#endif*/
}

Time getClockForTime(Time t)
{
    1a7e:	cf 92       	push	r12
    1a80:	df 92       	push	r13
    1a82:	ef 92       	push	r14
    1a84:	ff 92       	push	r15
#ifdef LINEAR_CORRECTION
	return ((double)t*speedAvg) + offset;
    1a86:	0e 94 9b 24 	call	0x4936	; 0x4936 <__floatunsisf>
    1a8a:	20 91 3c 21 	lds	r18, 0x213C
    1a8e:	30 91 3d 21 	lds	r19, 0x213D
    1a92:	40 91 3e 21 	lds	r20, 0x213E
    1a96:	50 91 3f 21 	lds	r21, 0x213F
    1a9a:	0e 94 48 25 	call	0x4a90	; 0x4a90 <__mulsf3>
    1a9e:	6b 01       	movw	r12, r22
    1aa0:	7c 01       	movw	r14, r24
    1aa2:	60 91 32 21 	lds	r22, 0x2132
    1aa6:	70 91 33 21 	lds	r23, 0x2133
    1aaa:	80 91 34 21 	lds	r24, 0x2134
    1aae:	90 91 35 21 	lds	r25, 0x2135
    1ab2:	0e 94 9d 24 	call	0x493a	; 0x493a <__floatsisf>
    1ab6:	9b 01       	movw	r18, r22
    1ab8:	ac 01       	movw	r20, r24
    1aba:	c7 01       	movw	r24, r14
    1abc:	b6 01       	movw	r22, r12
    1abe:	0e 94 9e 23 	call	0x473c	; 0x473c <__addsf3>
    1ac2:	0e 94 6f 24 	call	0x48de	; 0x48de <__fixunssfsi>
#else
	return t + offset;
#endif
}
    1ac6:	ff 90       	pop	r15
    1ac8:	ef 90       	pop	r14
    1aca:	df 90       	pop	r13
    1acc:	cf 90       	pop	r12
    1ace:	08 95       	ret

00001ad0 <getEstimatedGlobalClock>:

Time getEstimatedGlobalClock(void)
{
    1ad0:	cf 92       	push	r12
    1ad2:	df 92       	push	r13
    1ad4:	ef 92       	push	r14
    1ad6:	ff 92       	push	r15
#ifdef LINEAR_CORRECTION
	return ((double)getTime()*speedAvg) + offset;
    1ad8:	0e 94 71 09 	call	0x12e2	; 0x12e2 <getTime>
    1adc:	0e 94 9b 24 	call	0x4936	; 0x4936 <__floatunsisf>
    1ae0:	20 91 3c 21 	lds	r18, 0x213C
    1ae4:	30 91 3d 21 	lds	r19, 0x213D
    1ae8:	40 91 3e 21 	lds	r20, 0x213E
    1aec:	50 91 3f 21 	lds	r21, 0x213F
    1af0:	0e 94 48 25 	call	0x4a90	; 0x4a90 <__mulsf3>
    1af4:	6b 01       	movw	r12, r22
    1af6:	7c 01       	movw	r14, r24
    1af8:	60 91 32 21 	lds	r22, 0x2132
    1afc:	70 91 33 21 	lds	r23, 0x2133
    1b00:	80 91 34 21 	lds	r24, 0x2134
    1b04:	90 91 35 21 	lds	r25, 0x2135
    1b08:	0e 94 9d 24 	call	0x493a	; 0x493a <__floatsisf>
    1b0c:	9b 01       	movw	r18, r22
    1b0e:	ac 01       	movw	r20, r24
    1b10:	c7 01       	movw	r24, r14
    1b12:	b6 01       	movw	r22, r12
    1b14:	0e 94 9e 23 	call	0x473c	; 0x473c <__addsf3>
    1b18:	0e 94 6f 24 	call	0x48de	; 0x48de <__fixunssfsi>
#else
	return getTime() + offset;
#endif
}
    1b1c:	ff 90       	pop	r15
    1b1e:	ef 90       	pop	r14
    1b20:	df 90       	pop	r13
    1b22:	cf 90       	pop	r12
    1b24:	08 95       	ret

00001b26 <getClock>:

Time getClock(void) {
    1b26:	cf 93       	push	r28
    1b28:	df 93       	push	r29
    1b2a:	00 d0       	rcall	.+0      	; 0x1b2c <getClock+0x6>
    1b2c:	1f 92       	push	r1
    1b2e:	cd b7       	in	r28, 0x3d	; 61
    1b30:	de b7       	in	r29, 0x3e	; 62
	return fmax(getEstimatedGlobalClock(), localClockMaxReach);
    1b32:	60 91 2a 21 	lds	r22, 0x212A
    1b36:	70 91 2b 21 	lds	r23, 0x212B
    1b3a:	80 91 2c 21 	lds	r24, 0x212C
    1b3e:	90 91 2d 21 	lds	r25, 0x212D
    1b42:	0e 94 9b 24 	call	0x4936	; 0x4936 <__floatunsisf>
    1b46:	9b 01       	movw	r18, r22
    1b48:	ac 01       	movw	r20, r24
    1b4a:	69 83       	std	Y+1, r22	; 0x01
    1b4c:	3a 83       	std	Y+2, r19	; 0x02
    1b4e:	4b 83       	std	Y+3, r20	; 0x03
    1b50:	5c 83       	std	Y+4, r21	; 0x04
    1b52:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <getEstimatedGlobalClock>
    1b56:	0e 94 9b 24 	call	0x4936	; 0x4936 <__floatunsisf>
    1b5a:	29 81       	ldd	r18, Y+1	; 0x01
    1b5c:	3a 81       	ldd	r19, Y+2	; 0x02
    1b5e:	4b 81       	ldd	r20, Y+3	; 0x03
    1b60:	5c 81       	ldd	r21, Y+4	; 0x04
    1b62:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <fmax>
    1b66:	0e 94 6f 24 	call	0x48de	; 0x48de <__fixunssfsi>
}
    1b6a:	24 96       	adiw	r28, 0x04	; 4
    1b6c:	cd bf       	out	0x3d, r28	; 61
    1b6e:	de bf       	out	0x3e, r29	; 62
    1b70:	df 91       	pop	r29
    1b72:	cf 91       	pop	r28
    1b74:	08 95       	ret

00001b76 <isTimeLeader>:
#ifdef STATIC_TIME_LEADER
	return (getGUID() == TIME_LEADER_ID);
#elif defined MIN_ID_TIME_LEADER
	return isLeader;
#endif
}
    1b76:	80 91 41 21 	lds	r24, 0x2141
    1b7a:	08 95       	ret

00001b7c <isElecting>:
#ifdef MIN_ID_TIME_LEADER
	return electing;
#else
	return 0;
#endif
}
    1b7c:	80 91 40 21 	lds	r24, 0x2140
    1b80:	08 95       	ret

00001b82 <isAClockSyncMessage>:
#endif
	return 0;
}

byte isAClockSyncMessage(Chunk *c)
{	
    1b82:	fc 01       	movw	r30, r24
	if ((*((MsgHandler*)c->handler) == RES_SYS_HANDLER) && (c->data[0] == CLOCK_SYNC_MSG) && (c->data[1] == CLOCK_INFO))
    1b84:	84 89       	ldd	r24, Z+20	; 0x14
    1b86:	95 89       	ldd	r25, Z+21	; 0x15
    1b88:	89 2b       	or	r24, r25
    1b8a:	39 f4       	brne	.+14     	; 0x1b9a <isAClockSyncMessage+0x18>
    1b8c:	80 81       	ld	r24, Z
    1b8e:	80 36       	cpi	r24, 0x60	; 96
    1b90:	21 f4       	brne	.+8      	; 0x1b9a <isAClockSyncMessage+0x18>
    1b92:	81 e0       	ldi	r24, 0x01	; 1
    1b94:	91 81       	ldd	r25, Z+1	; 0x01
    1b96:	93 30       	cpi	r25, 0x03	; 3
    1b98:	09 f0       	breq	.+2      	; 0x1b9c <isAClockSyncMessage+0x1a>
	{
		return 1;
	}
	return 0;
    1b9a:	80 e0       	ldi	r24, 0x00	; 0
}
    1b9c:	08 95       	ret

00001b9e <insertReceiveTime>:
/******************************************************
 * Clock (Time) Synchronization Functions
 *****************************************************/

void insertReceiveTime(Chunk *c)
{
    1b9e:	cf 93       	push	r28
    1ba0:	df 93       	push	r29
    1ba2:	ec 01       	movw	r28, r24
	Time t = getTime();
    1ba4:	0e 94 71 09 	call	0x12e2	; 0x12e2 <getTime>
	
	//PRINT_BBSIM("insert receive time: %u\n", t);
	c->data[RECEIVE_TIME_INDEX+3] = (byte) (t & 0xFF);
    1ba8:	69 87       	std	Y+9, r22	; 0x09
	c->data[RECEIVE_TIME_INDEX+2] = (byte) ((t >>  8) & 0xFF);
    1baa:	78 87       	std	Y+8, r23	; 0x08
	c->data[RECEIVE_TIME_INDEX+1] = (byte) ((t >> 16) & 0xFF);
    1bac:	8f 83       	std	Y+7, r24	; 0x07
	c->data[RECEIVE_TIME_INDEX] = (byte) ((t >> 24) & 0xFF);
    1bae:	9e 83       	std	Y+6, r25	; 0x06
}
    1bb0:	df 91       	pop	r29
    1bb2:	cf 91       	pop	r28
    1bb4:	08 95       	ret

00001bb6 <insertSendTime>:

void insertSendTime(Chunk *c)
{
    1bb6:	cf 93       	push	r28
    1bb8:	df 93       	push	r29
    1bba:	ec 01       	movw	r28, r24
	Time t = getEstimatedGlobalClock(); // Global Clock
    1bbc:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <getEstimatedGlobalClock>
	
	//PRINT_BBSIM("insert send time: %u\n", t);
	c->data[SEND_TIME_INDEX+3] = (byte) (t & 0xFF);
    1bc0:	6d 83       	std	Y+5, r22	; 0x05
	c->data[SEND_TIME_INDEX+2] = (byte) ((t >>  8) & 0xFF);
    1bc2:	7c 83       	std	Y+4, r23	; 0x04
	c->data[SEND_TIME_INDEX+1] = (byte) ((t >> 16) & 0xFF);
    1bc4:	8b 83       	std	Y+3, r24	; 0x03
	c->data[SEND_TIME_INDEX] = (byte) ((t >> 24) & 0xFF);
    1bc6:	9a 83       	std	Y+2, r25	; 0x02
}
    1bc8:	df 91       	pop	r29
    1bca:	cf 91       	pop	r28
    1bcc:	08 95       	ret

00001bce <isSynchronized>:
	return n;
}

byte isSynchronized(void)
{
	return (isTimeLeader() || (firstCalibRec > 0));
    1bce:	80 91 41 21 	lds	r24, 0x2141
    1bd2:	81 11       	cpse	r24, r1
    1bd4:	11 c0       	rjmp	.+34     	; 0x1bf8 <isSynchronized+0x2a>
    1bd6:	81 e0       	ldi	r24, 0x01	; 1
    1bd8:	90 e0       	ldi	r25, 0x00	; 0
    1bda:	40 91 2e 21 	lds	r20, 0x212E
    1bde:	50 91 2f 21 	lds	r21, 0x212F
    1be2:	60 91 30 21 	lds	r22, 0x2130
    1be6:	70 91 31 21 	lds	r23, 0x2131
    1bea:	45 2b       	or	r20, r21
    1bec:	46 2b       	or	r20, r22
    1bee:	47 2b       	or	r20, r23
    1bf0:	29 f4       	brne	.+10     	; 0x1bfc <isSynchronized+0x2e>
    1bf2:	80 e0       	ldi	r24, 0x00	; 0
    1bf4:	90 e0       	ldi	r25, 0x00	; 0
    1bf6:	08 95       	ret
    1bf8:	81 e0       	ldi	r24, 0x01	; 1
    1bfa:	90 e0       	ldi	r25, 0x00	; 0
	//return (isTimeLeader() || ( (firstCalibRec != 0) && ((getEstimatedLocalClock() - firstCalibRec) < CLOCK_VALIDITY_PERIOD )));
}
    1bfc:	08 95       	ret

00001bfe <initSTChildren>:
{
	byte p;
	
	for (p = 0; p < NUM_PORTS; p++)
	{
		syncChildren[p] = 0;
    1bfe:	10 92 87 26 	sts	0x2687, r1
    1c02:	10 92 88 26 	sts	0x2688, r1
    1c06:	10 92 89 26 	sts	0x2689, r1
    1c0a:	10 92 8a 26 	sts	0x268A, r1
    1c0e:	10 92 8b 26 	sts	0x268B, r1
    1c12:	10 92 8c 26 	sts	0x268C, r1
    1c16:	08 95       	ret

00001c18 <setSlave>:
}

void setSlave(void) {
	//PRINT_BBSIM("block %u: de-elected!\n", getGUID());
#ifdef MIN_ID_TIME_LEADER
	isLeader = 0;
    1c18:	10 92 41 21 	sts	0x2141, r1
#endif
	disableTimer(syncTimer);
    1c1c:	10 92 79 26 	sts	0x2679, r1
	deregisterTimer(&syncTimer);
    1c20:	89 e6       	ldi	r24, 0x69	; 105
    1c22:	96 e2       	ldi	r25, 0x26	; 38
    1c24:	0e 94 a9 0a 	call	0x1552	; 0x1552 <deregisterTimer>
	deregisterTimeout(&(syncTimer.t));
    1c28:	8b e6       	ldi	r24, 0x6B	; 107
    1c2a:	96 e2       	ldi	r25, 0x26	; 38
    1c2c:	0c 94 04 0a 	jmp	0x1408	; 0x1408 <deregisterTimeout>

00001c30 <scheduleLeaderElection>:
	return broadcastClockChunk(p, data, 4);
}

void scheduleLeaderElection(void)
{
	if (!electing)
    1c30:	80 91 40 21 	lds	r24, 0x2140
    1c34:	81 11       	cpse	r24, r1
    1c36:	1c c0       	rjmp	.+56     	; 0x1c70 <scheduleLeaderElection+0x40>
	{
		deregisterTimeout(&leaderElectionTimeOut);
    1c38:	8c e7       	ldi	r24, 0x7C	; 124
    1c3a:	96 e2       	ldi	r25, 0x26	; 38
    1c3c:	0e 94 04 0a 	call	0x1408	; 0x1408 <deregisterTimeout>
		leaderElectionTimeOut.calltime = getTime() + LEADER_ELECTION_TIMEOUT;
    1c40:	0e 94 71 09 	call	0x12e2	; 0x12e2 <getTime>
    1c44:	6c 50       	subi	r22, 0x0C	; 12
    1c46:	7e 4f       	sbci	r23, 0xFE	; 254
    1c48:	8f 4f       	sbci	r24, 0xFF	; 255
    1c4a:	9f 4f       	sbci	r25, 0xFF	; 255
    1c4c:	60 93 7e 26 	sts	0x267E, r22
    1c50:	70 93 7f 26 	sts	0x267F, r23
    1c54:	80 93 80 26 	sts	0x2680, r24
    1c58:	90 93 81 26 	sts	0x2681, r25
		leaderElectionTimeOut.callback = (GenericHandler)(&startLeaderElection);
    1c5c:	81 ec       	ldi	r24, 0xC1	; 193
    1c5e:	9f e0       	ldi	r25, 0x0F	; 15
    1c60:	80 93 82 26 	sts	0x2682, r24
    1c64:	90 93 83 26 	sts	0x2683, r25
		registerTimeout(&leaderElectionTimeOut);
    1c68:	8c e7       	ldi	r24, 0x7C	; 124
    1c6a:	96 e2       	ldi	r25, 0x26	; 38
    1c6c:	0c 94 bc 09 	jmp	0x1378	; 0x1378 <registerTimeout>
    1c70:	08 95       	ret

00001c72 <handleNeighborChange>:

byte handleNeighborChange(PRef p)
{
	PRINT_BBSIM("Neighbor change at Time %u\n", getTime());
#ifdef MIN_ID_TIME_LEADER
	electing = 0;
    1c72:	10 92 40 21 	sts	0x2140, r1
	if (!electing)
	{
		scheduleLeaderElection();
    1c76:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <scheduleLeaderElection>
			requestSync(p);
		}
	}
#endif
	return 0;
}
    1c7a:	80 e0       	ldi	r24, 0x00	; 0
    1c7c:	08 95       	ret

00001c7e <initClock>:
byte sendClockChunk(PRef p, byte *d, byte s);
byte requestSync(PRef p);

void initClock(void)
{
	offset = 0;
    1c7e:	10 92 32 21 	sts	0x2132, r1
    1c82:	10 92 33 21 	sts	0x2133, r1
    1c86:	10 92 34 21 	sts	0x2134, r1
    1c8a:	10 92 35 21 	sts	0x2135, r1
	firstCalibRec = 0;
    1c8e:	10 92 2e 21 	sts	0x212E, r1
    1c92:	10 92 2f 21 	sts	0x212F, r1
    1c96:	10 92 30 21 	sts	0x2130, r1
    1c9a:	10 92 31 21 	sts	0x2131, r1
	localClockMaxReach = 0;
    1c9e:	10 92 2a 21 	sts	0x212A, r1
    1ca2:	10 92 2b 21 	sts	0x212B, r1
    1ca6:	10 92 2c 21 	sts	0x212C, r1
    1caa:	10 92 2d 21 	sts	0x212D, r1

#ifdef LINEAR_CORRECTION
	speedAvg = 1.0;
    1cae:	80 e0       	ldi	r24, 0x00	; 0
    1cb0:	90 e0       	ldi	r25, 0x00	; 0
    1cb2:	a0 e8       	ldi	r26, 0x80	; 128
    1cb4:	bf e3       	ldi	r27, 0x3F	; 63
    1cb6:	80 93 3c 21 	sts	0x213C, r24
    1cba:	90 93 3d 21 	sts	0x213D, r25
    1cbe:	a0 93 3e 21 	sts	0x213E, r26
    1cc2:	b0 93 3f 21 	sts	0x213F, r27
	firstCalibSend = 0;
    1cc6:	10 92 38 21 	sts	0x2138, r1
    1cca:	10 92 39 21 	sts	0x2139, r1
    1cce:	10 92 3a 21 	sts	0x213A, r1
    1cd2:	10 92 3b 21 	sts	0x213B, r1
	nbSync = 0;
    1cd6:	10 92 36 21 	sts	0x2136, r1
    1cda:	10 92 37 21 	sts	0x2137, r1

#ifdef WAVE
	lastWaveId = 0;
	syncBy = NUM_PORTS;
#elif defined SPANNING_TREE
	initSTChildren();
    1cde:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <initSTChildren>
#ifdef STATIC_TIME_LEADER
	if (isTimeLeader()) {
		setLeader();
	}
#elif defined MIN_ID_TIME_LEADER
	minIdSender = 255;
    1ce2:	8f ef       	ldi	r24, 0xFF	; 255
    1ce4:	80 93 86 26 	sts	0x2686, r24
	minId = getGUID();
    1ce8:	0e 94 08 1a 	call	0x3410	; 0x3410 <getGUID>
    1cec:	80 93 7a 26 	sts	0x267A, r24
    1cf0:	90 93 7b 26 	sts	0x267B, r25
	electing = 0;
    1cf4:	10 92 40 21 	sts	0x2140, r1
	setSlave();
    1cf8:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <setSlave>
	scheduleLeaderElection();
    1cfc:	0c 94 18 0e 	jmp	0x1c30	; 0x1c30 <scheduleLeaderElection>

00001d00 <sendClockChunk>:
{
	free(thisChunk);
}

byte sendClockChunk(PRef p, byte *d, byte s)
{
    1d00:	8f 92       	push	r8
    1d02:	9f 92       	push	r9
    1d04:	bf 92       	push	r11
    1d06:	cf 92       	push	r12
    1d08:	df 92       	push	r13
    1d0a:	ef 92       	push	r14
    1d0c:	ff 92       	push	r15
    1d0e:	0f 93       	push	r16
    1d10:	1f 93       	push	r17
    1d12:	cf 93       	push	r28
    1d14:	df 93       	push	r29
    1d16:	1f 92       	push	r1
    1d18:	cd b7       	in	r28, 0x3d	; 61
    1d1a:	de b7       	in	r29, 0x3e	; 62
    1d1c:	b8 2e       	mov	r11, r24
    1d1e:	6b 01       	movw	r12, r22
	Chunk *c=calloc(sizeof(Chunk), 1);
    1d20:	61 e0       	ldi	r22, 0x01	; 1
    1d22:	70 e0       	ldi	r23, 0x00	; 0
    1d24:	88 e1       	ldi	r24, 0x18	; 24
    1d26:	90 e0       	ldi	r25, 0x00	; 0
    1d28:	49 83       	std	Y+1, r20	; 0x01
    1d2a:	0e 94 59 26 	call	0x4cb2	; 0x4cb2 <calloc>
    1d2e:	4c 01       	movw	r8, r24
	if (c == NULL)
    1d30:	29 81       	ldd	r18, Y+1	; 0x01
    1d32:	00 97       	sbiw	r24, 0x00	; 0
    1d34:	81 f0       	breq	.+32     	; 0x1d56 <sendClockChunk+0x56>
	{
		return 0;
	}
	if (sendMessageToPort(c, p, d, s, (MsgHandler)RES_SYS_HANDLER, (GenericHandler)&freeClockChunk) == 0)
    1d36:	88 e3       	ldi	r24, 0x38	; 56
    1d38:	e8 2e       	mov	r14, r24
    1d3a:	8d e0       	ldi	r24, 0x0D	; 13
    1d3c:	f8 2e       	mov	r15, r24
    1d3e:	00 e0       	ldi	r16, 0x00	; 0
    1d40:	10 e0       	ldi	r17, 0x00	; 0
    1d42:	a6 01       	movw	r20, r12
    1d44:	6b 2d       	mov	r22, r11
    1d46:	c4 01       	movw	r24, r8
    1d48:	0e 94 88 08 	call	0x1110	; 0x1110 <sendMessageToPort>
    1d4c:	81 11       	cpse	r24, r1
    1d4e:	05 c0       	rjmp	.+10     	; 0x1d5a <sendClockChunk+0x5a>
	{
		free(c);
    1d50:	c4 01       	movw	r24, r8
    1d52:	0e 94 12 27 	call	0x4e24	; 0x4e24 <free>
byte sendClockChunk(PRef p, byte *d, byte s)
{
	Chunk *c=calloc(sizeof(Chunk), 1);
	if (c == NULL)
	{
		return 0;
    1d56:	80 e0       	ldi	r24, 0x00	; 0
    1d58:	01 c0       	rjmp	.+2      	; 0x1d5c <sendClockChunk+0x5c>
	if (sendMessageToPort(c, p, d, s, (MsgHandler)RES_SYS_HANDLER, (GenericHandler)&freeClockChunk) == 0)
	{
		free(c);
		return 0;
	}
	return 1;
    1d5a:	81 e0       	ldi	r24, 0x01	; 1
}
    1d5c:	0f 90       	pop	r0
    1d5e:	df 91       	pop	r29
    1d60:	cf 91       	pop	r28
    1d62:	1f 91       	pop	r17
    1d64:	0f 91       	pop	r16
    1d66:	ff 90       	pop	r15
    1d68:	ef 90       	pop	r14
    1d6a:	df 90       	pop	r13
    1d6c:	cf 90       	pop	r12
    1d6e:	bf 90       	pop	r11
    1d70:	9f 90       	pop	r9
    1d72:	8f 90       	pop	r8
    1d74:	08 95       	ret

00001d76 <sendGoMsg>:
	
	return sendClockChunk(p, data, 5);
}

byte sendGoMsg(PRef p, uint16_t id)
{
    1d76:	1f 93       	push	r17
    1d78:	cf 93       	push	r28
    1d7a:	df 93       	push	r29
    1d7c:	00 d0       	rcall	.+0      	; 0x1d7e <sendGoMsg+0x8>
    1d7e:	1f 92       	push	r1
    1d80:	cd b7       	in	r28, 0x3d	; 61
    1d82:	de b7       	in	r29, 0x3e	; 62
    1d84:	18 2f       	mov	r17, r24
    1d86:	9b 01       	movw	r18, r22
	byte data[4];
	
	data[0] = CLOCK_SYNC_MSG;
    1d88:	80 e6       	ldi	r24, 0x60	; 96
    1d8a:	89 83       	std	Y+1, r24	; 0x01
	data[1] = MIN_ID_TIME_LEADER_ELECTION_GO_MSG;
    1d8c:	81 e0       	ldi	r24, 0x01	; 1
    1d8e:	8a 83       	std	Y+2, r24	; 0x02
	GUIDIntoChar(id, &(data[2]));
    1d90:	be 01       	movw	r22, r28
    1d92:	6d 5f       	subi	r22, 0xFD	; 253
    1d94:	7f 4f       	sbci	r23, 0xFF	; 255
    1d96:	c9 01       	movw	r24, r18
    1d98:	0e 94 ad 04 	call	0x95a	; 0x95a <GUIDIntoChar>
	
	return sendClockChunk(p, data, 4);
    1d9c:	44 e0       	ldi	r20, 0x04	; 4
    1d9e:	be 01       	movw	r22, r28
    1da0:	6f 5f       	subi	r22, 0xFF	; 255
    1da2:	7f 4f       	sbci	r23, 0xFF	; 255
    1da4:	81 2f       	mov	r24, r17
    1da6:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <sendClockChunk>
}
    1daa:	24 96       	adiw	r28, 0x04	; 4
    1dac:	cd bf       	out	0x3d, r28	; 61
    1dae:	de bf       	out	0x3e, r29	; 62
    1db0:	df 91       	pop	r29
    1db2:	cf 91       	pop	r28
    1db4:	1f 91       	pop	r17
    1db6:	08 95       	ret

00001db8 <sendBackMsg>:
	deregisterTimeout(&(syncTimer.t));
}

#ifdef MIN_ID_TIME_LEADER
byte sendBackMsg(PRef p, byte a)
{
    1db8:	0f 93       	push	r16
    1dba:	1f 93       	push	r17
    1dbc:	cf 93       	push	r28
    1dbe:	df 93       	push	r29
    1dc0:	cd b7       	in	r28, 0x3d	; 61
    1dc2:	de b7       	in	r29, 0x3e	; 62
    1dc4:	25 97       	sbiw	r28, 0x05	; 5
    1dc6:	cd bf       	out	0x3d, r28	; 61
    1dc8:	de bf       	out	0x3e, r29	; 62
    1dca:	18 2f       	mov	r17, r24
    1dcc:	06 2f       	mov	r16, r22
	byte data[5];
	
	data[0] = CLOCK_SYNC_MSG;
    1dce:	80 e6       	ldi	r24, 0x60	; 96
    1dd0:	89 83       	std	Y+1, r24	; 0x01
	data[1] = MIN_ID_TIME_LEADER_ELECTION_BACK_MSG;
    1dd2:	82 e0       	ldi	r24, 0x02	; 2
    1dd4:	8a 83       	std	Y+2, r24	; 0x02
	GUIDIntoChar(minId, &(data[2]));
    1dd6:	be 01       	movw	r22, r28
    1dd8:	6d 5f       	subi	r22, 0xFD	; 253
    1dda:	7f 4f       	sbci	r23, 0xFF	; 255
    1ddc:	80 91 7a 26 	lds	r24, 0x267A
    1de0:	90 91 7b 26 	lds	r25, 0x267B
    1de4:	0e 94 ad 04 	call	0x95a	; 0x95a <GUIDIntoChar>
	data[4] = a;
    1de8:	0d 83       	std	Y+5, r16	; 0x05
	
	return sendClockChunk(p, data, 5);
    1dea:	45 e0       	ldi	r20, 0x05	; 5
    1dec:	be 01       	movw	r22, r28
    1dee:	6f 5f       	subi	r22, 0xFF	; 255
    1df0:	7f 4f       	sbci	r23, 0xFF	; 255
    1df2:	81 2f       	mov	r24, r17
    1df4:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <sendClockChunk>
}
    1df8:	25 96       	adiw	r28, 0x05	; 5
    1dfa:	cd bf       	out	0x3d, r28	; 61
    1dfc:	de bf       	out	0x3e, r29	; 62
    1dfe:	df 91       	pop	r29
    1e00:	cf 91       	pop	r28
    1e02:	1f 91       	pop	r17
    1e04:	0f 91       	pop	r16
    1e06:	08 95       	ret

00001e08 <synchronizeNeighbor>:
	//return 1;
	return sendClockChunk(p, data, 2);
}

byte synchronizeNeighbor(PRef p)
{
    1e08:	cf 93       	push	r28
    1e0a:	df 93       	push	r29
    1e0c:	00 d0       	rcall	.+0      	; 0x1e0e <synchronizeNeighbor+0x6>
    1e0e:	1f 92       	push	r1
    1e10:	cd b7       	in	r28, 0x3d	; 61
    1e12:	de b7       	in	r29, 0x3e	; 62
	byte data[4];
	
	data[0] = CLOCK_SYNC_MSG;
    1e14:	90 e6       	ldi	r25, 0x60	; 96
    1e16:	99 83       	std	Y+1, r25	; 0x01
	data[1] = CLOCK_INFO;
    1e18:	93 e0       	ldi	r25, 0x03	; 3
    1e1a:	9a 83       	std	Y+2, r25	; 0x02
#ifdef WAVE
	data[WAVE_ID_INDEX+1] = (byte) (lastWaveId & 0xFF);
	data[WAVE_ID_INDEX] = (byte) ((lastWaveId >>  8) & 0xFF);
	return sendClockChunk(p, data, 4);
#elif defined SPANNING_TREE
	return sendClockChunk(p, data, 2);
    1e1c:	42 e0       	ldi	r20, 0x02	; 2
    1e1e:	be 01       	movw	r22, r28
    1e20:	6f 5f       	subi	r22, 0xFF	; 255
    1e22:	7f 4f       	sbci	r23, 0xFF	; 255
    1e24:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <sendClockChunk>
#endif
}
    1e28:	24 96       	adiw	r28, 0x04	; 4
    1e2a:	cd bf       	out	0x3d, r28	; 61
    1e2c:	de bf       	out	0x3e, r29	; 62
    1e2e:	df 91       	pop	r29
    1e30:	cf 91       	pop	r28
    1e32:	08 95       	ret

00001e34 <synchronizeNeighbors>:

byte synchronizeNeighbors(void)
{
    1e34:	ef 92       	push	r14
    1e36:	ff 92       	push	r15
    1e38:	0f 93       	push	r16
    1e3a:	1f 93       	push	r17
    1e3c:	cf 93       	push	r28
    1e3e:	df 93       	push	r29
    1e40:	07 e8       	ldi	r16, 0x87	; 135
    1e42:	16 e2       	ldi	r17, 0x26	; 38
    1e44:	cd e4       	ldi	r28, 0x4D	; 77
    1e46:	d1 e2       	ldi	r29, 0x21	; 33
	byte p;
	byte n = 0;
    1e48:	e1 2c       	mov	r14, r1
		}
		synchronizeNeighbor(p);
		n++;
	}
#else
	for( p = 0; p < NUM_PORTS; p++)
    1e4a:	f1 2c       	mov	r15, r1
	{
		if ((syncChildren[p] == 0) || (thisNeighborhood.n[p] == VACANT))
    1e4c:	f8 01       	movw	r30, r16
    1e4e:	81 91       	ld	r24, Z+
    1e50:	8f 01       	movw	r16, r30
    1e52:	88 23       	and	r24, r24
    1e54:	41 f0       	breq	.+16     	; 0x1e66 <synchronizeNeighbors+0x32>
    1e56:	28 81       	ld	r18, Y
    1e58:	39 81       	ldd	r19, Y+1	; 0x01
    1e5a:	23 2b       	or	r18, r19
    1e5c:	21 f0       	breq	.+8      	; 0x1e66 <synchronizeNeighbors+0x32>
		{
			continue;
		}
		synchronizeNeighbor(p);
    1e5e:	8f 2d       	mov	r24, r15
    1e60:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <synchronizeNeighbor>
		n++;
    1e64:	e3 94       	inc	r14
		}
		synchronizeNeighbor(p);
		n++;
	}
#else
	for( p = 0; p < NUM_PORTS; p++)
    1e66:	f3 94       	inc	r15
    1e68:	22 96       	adiw	r28, 0x02	; 2
    1e6a:	f6 e0       	ldi	r31, 0x06	; 6
    1e6c:	ff 12       	cpse	r15, r31
    1e6e:	ee cf       	rjmp	.-36     	; 0x1e4c <synchronizeNeighbors+0x18>
		synchronizeNeighbor(p);
		n++;
	}
#endif
	return n;
}
    1e70:	8e 2d       	mov	r24, r14
    1e72:	df 91       	pop	r29
    1e74:	cf 91       	pop	r28
    1e76:	1f 91       	pop	r17
    1e78:	0f 91       	pop	r16
    1e7a:	ff 90       	pop	r15
    1e7c:	ef 90       	pop	r14
    1e7e:	08 95       	ret

00001e80 <setLeader>:

/******************************************************
 * Time Leader Election Functions
 *****************************************************/

void setLeader(void) {
    1e80:	cf 93       	push	r28

	PRINT_BBSIM2("block %u: leader!\n", getGUID());
#ifdef MIN_ID_TIME_LEADER
	isLeader = 1;
    1e82:	c1 e0       	ldi	r28, 0x01	; 1
    1e84:	c0 93 41 21 	sts	0x2141, r28
#endif
	syncTimer.period = SYNC_PERIOD;
    1e88:	88 eb       	ldi	r24, 0xB8	; 184
    1e8a:	9b e0       	ldi	r25, 0x0B	; 11
    1e8c:	a0 e0       	ldi	r26, 0x00	; 0
    1e8e:	b0 e0       	ldi	r27, 0x00	; 0
    1e90:	80 93 75 26 	sts	0x2675, r24
    1e94:	90 93 76 26 	sts	0x2676, r25
    1e98:	a0 93 77 26 	sts	0x2677, r26
    1e9c:	b0 93 78 26 	sts	0x2678, r27
#ifdef WAVE
	syncTimer.t.callback = (GenericHandler)&launchSynchronizationWave;
	launchSynchronizationWave();
#elif defined SPANNING_TREE
	syncTimer.t.callback = (GenericHandler)&synchronizeNeighbors;
    1ea0:	8a e1       	ldi	r24, 0x1A	; 26
    1ea2:	9f e0       	ldi	r25, 0x0F	; 15
    1ea4:	80 93 71 26 	sts	0x2671, r24
    1ea8:	90 93 72 26 	sts	0x2672, r25
	synchronizeNeighbors();
    1eac:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <synchronizeNeighbors>
#endif
	registerTimer(&(syncTimer));
    1eb0:	89 e6       	ldi	r24, 0x69	; 105
    1eb2:	96 e2       	ldi	r25, 0x26	; 38
    1eb4:	0e 94 85 0a 	call	0x150a	; 0x150a <registerTimer>
	enableTimer(syncTimer);
    1eb8:	c0 93 79 26 	sts	0x2679, r28
}
    1ebc:	cf 91       	pop	r28
    1ebe:	08 95       	ret

00001ec0 <requestSync>:
	c->data[SEND_TIME_INDEX+1] = (byte) ((t >> 16) & 0xFF);
	c->data[SEND_TIME_INDEX] = (byte) ((t >> 24) & 0xFF);
}

byte requestSync(PRef p)
{
    1ec0:	cf 93       	push	r28
    1ec2:	df 93       	push	r29
    1ec4:	1f 92       	push	r1
    1ec6:	1f 92       	push	r1
    1ec8:	cd b7       	in	r28, 0x3d	; 61
    1eca:	de b7       	in	r29, 0x3e	; 62
	byte data[2];
	
	data[0] = CLOCK_SYNC_MSG;
    1ecc:	90 e6       	ldi	r25, 0x60	; 96
    1ece:	99 83       	std	Y+1, r25	; 0x01
	data[1] = REQUEST_CLOCK_SYNC;
    1ed0:	94 e0       	ldi	r25, 0x04	; 4
    1ed2:	9a 83       	std	Y+2, r25	; 0x02
	
	//return 1;
	return sendClockChunk(p, data, 2);
    1ed4:	42 e0       	ldi	r20, 0x02	; 2
    1ed6:	be 01       	movw	r22, r28
    1ed8:	6f 5f       	subi	r22, 0xFF	; 255
    1eda:	7f 4f       	sbci	r23, 0xFF	; 255
    1edc:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <sendClockChunk>
}
    1ee0:	0f 90       	pop	r0
    1ee2:	0f 90       	pop	r0
    1ee4:	df 91       	pop	r29
    1ee6:	cf 91       	pop	r28
    1ee8:	08 95       	ret

00001eea <broadcastClockChunk>:
	}
	return 1;
}

byte broadcastClockChunk(PRef excludedPort, byte *d, byte s)
{
    1eea:	cf 92       	push	r12
    1eec:	df 92       	push	r13
    1eee:	ef 92       	push	r14
    1ef0:	ff 92       	push	r15
    1ef2:	0f 93       	push	r16
    1ef4:	1f 93       	push	r17
    1ef6:	cf 93       	push	r28
    1ef8:	df 93       	push	r29
    1efa:	d8 2e       	mov	r13, r24
    1efc:	8b 01       	movw	r16, r22
    1efe:	c4 2e       	mov	r12, r20
    1f00:	cd e4       	ldi	r28, 0x4D	; 77
    1f02:	d1 e2       	ldi	r29, 0x21	; 33
	byte p;
	byte sent = 0;
    1f04:	e1 2c       	mov	r14, r1
	
	for( p = 0; p < NUM_PORTS; p++)
    1f06:	f1 2c       	mov	r15, r1
	{
		if ((p == excludedPort) || (thisNeighborhood.n[p] == VACANT))
    1f08:	fd 14       	cp	r15, r13
    1f0a:	59 f0       	breq	.+22     	; 0x1f22 <broadcastClockChunk+0x38>
    1f0c:	28 81       	ld	r18, Y
    1f0e:	39 81       	ldd	r19, Y+1	; 0x01
    1f10:	23 2b       	or	r18, r19
    1f12:	39 f0       	breq	.+14     	; 0x1f22 <broadcastClockChunk+0x38>
		{
			continue;
		}
		if(sendClockChunk(p, d, s)) {
    1f14:	4c 2d       	mov	r20, r12
    1f16:	b8 01       	movw	r22, r16
    1f18:	8f 2d       	mov	r24, r15
    1f1a:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <sendClockChunk>
    1f1e:	81 11       	cpse	r24, r1
			sent++;
    1f20:	e3 94       	inc	r14
byte broadcastClockChunk(PRef excludedPort, byte *d, byte s)
{
	byte p;
	byte sent = 0;
	
	for( p = 0; p < NUM_PORTS; p++)
    1f22:	f3 94       	inc	r15
    1f24:	22 96       	adiw	r28, 0x02	; 2
    1f26:	86 e0       	ldi	r24, 0x06	; 6
    1f28:	f8 12       	cpse	r15, r24
    1f2a:	ee cf       	rjmp	.-36     	; 0x1f08 <broadcastClockChunk+0x1e>
		if(sendClockChunk(p, d, s)) {
			sent++;
		}
	}
	return sent;
}
    1f2c:	8e 2d       	mov	r24, r14
    1f2e:	df 91       	pop	r29
    1f30:	cf 91       	pop	r28
    1f32:	1f 91       	pop	r17
    1f34:	0f 91       	pop	r16
    1f36:	ff 90       	pop	r15
    1f38:	ef 90       	pop	r14
    1f3a:	df 90       	pop	r13
    1f3c:	cf 90       	pop	r12
    1f3e:	08 95       	ret

00001f40 <broadcastGoMsg>:
	
	return sendClockChunk(p, data, 4);
}

byte broadcastGoMsg(PRef p, uint16_t id)
{
    1f40:	1f 93       	push	r17
    1f42:	cf 93       	push	r28
    1f44:	df 93       	push	r29
    1f46:	00 d0       	rcall	.+0      	; 0x1f48 <broadcastGoMsg+0x8>
    1f48:	1f 92       	push	r1
    1f4a:	cd b7       	in	r28, 0x3d	; 61
    1f4c:	de b7       	in	r29, 0x3e	; 62
    1f4e:	18 2f       	mov	r17, r24
    1f50:	9b 01       	movw	r18, r22
	byte data[4];
	
	data[0] = CLOCK_SYNC_MSG;
    1f52:	80 e6       	ldi	r24, 0x60	; 96
    1f54:	89 83       	std	Y+1, r24	; 0x01
	data[1] = MIN_ID_TIME_LEADER_ELECTION_GO_MSG;
    1f56:	81 e0       	ldi	r24, 0x01	; 1
    1f58:	8a 83       	std	Y+2, r24	; 0x02
	GUIDIntoChar(id, &(data[2]));
    1f5a:	be 01       	movw	r22, r28
    1f5c:	6d 5f       	subi	r22, 0xFD	; 253
    1f5e:	7f 4f       	sbci	r23, 0xFF	; 255
    1f60:	c9 01       	movw	r24, r18
    1f62:	0e 94 ad 04 	call	0x95a	; 0x95a <GUIDIntoChar>
	
	return broadcastClockChunk(p, data, 4);
    1f66:	44 e0       	ldi	r20, 0x04	; 4
    1f68:	be 01       	movw	r22, r28
    1f6a:	6f 5f       	subi	r22, 0xFF	; 255
    1f6c:	7f 4f       	sbci	r23, 0xFF	; 255
    1f6e:	81 2f       	mov	r24, r17
    1f70:	0e 94 75 0f 	call	0x1eea	; 0x1eea <broadcastClockChunk>
}
    1f74:	24 96       	adiw	r28, 0x04	; 4
    1f76:	cd bf       	out	0x3d, r28	; 61
    1f78:	de bf       	out	0x3e, r29	; 62
    1f7a:	df 91       	pop	r29
    1f7c:	cf 91       	pop	r28
    1f7e:	1f 91       	pop	r17
    1f80:	08 95       	ret

00001f82 <startLeaderElection>:
		//printf("too late!\n");
	}
}

void startLeaderElection(void)
{
    1f82:	cf 93       	push	r28
    1f84:	df 93       	push	r29
	//static int i = 0;
	//i++;
	//printf("block %u: start election function at %u\n", getGUID(), getTime());
	//printf("%d election\n", i);
	if (!electing) {
    1f86:	80 91 40 21 	lds	r24, 0x2140
    1f8a:	81 11       	cpse	r24, r1
    1f8c:	30 c0       	rjmp	.+96     	; 0x1fee <startLeaderElection+0x6c>
	//	printf("block %u: start - election\n", getGUID()); 
		setSlave();
    1f8e:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <setSlave>
		minId = getGUID();
    1f92:	0e 94 08 1a 	call	0x3410	; 0x3410 <getGUID>
    1f96:	80 93 7a 26 	sts	0x267A, r24
    1f9a:	90 93 7b 26 	sts	0x267B, r25
		minIdSender = 255;
    1f9e:	8f ef       	ldi	r24, 0xFF	; 255
    1fa0:	80 93 86 26 	sts	0x2686, r24
		electing = 1;
    1fa4:	81 e0       	ldi	r24, 0x01	; 1
    1fa6:	80 93 40 21 	sts	0x2140, r24
		initSTChildren();
    1faa:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <initSTChildren>
		nbNeededAnswers = broadcastGoMsg(255, getGUID());
    1fae:	0e 94 08 1a 	call	0x3410	; 0x3410 <getGUID>
    1fb2:	bc 01       	movw	r22, r24
    1fb4:	8f ef       	ldi	r24, 0xFF	; 255
    1fb6:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <broadcastGoMsg>
    1fba:	80 93 68 26 	sts	0x2668, r24
		if (nbNeededAnswers == 0) 
    1fbe:	81 11       	cpse	r24, r1
    1fc0:	16 c0       	rjmp	.+44     	; 0x1fee <startLeaderElection+0x6c>
		{
			electing = 0;
    1fc2:	10 92 40 21 	sts	0x2140, r1
			if (minId == getGUID())
    1fc6:	c0 91 7a 26 	lds	r28, 0x267A
    1fca:	d0 91 7b 26 	lds	r29, 0x267B
    1fce:	0e 94 08 1a 	call	0x3410	; 0x3410 <getGUID>
    1fd2:	c8 17       	cp	r28, r24
    1fd4:	d9 07       	cpc	r29, r25
    1fd6:	21 f4       	brne	.+8      	; 0x1fe0 <startLeaderElection+0x5e>
			{
				sendBackMsg(minIdSender, 1);
			}
		}
	}
}
    1fd8:	df 91       	pop	r29
    1fda:	cf 91       	pop	r28
		{
			electing = 0;
			if (minId == getGUID())
			{
				//printf("block %u: direct win\n", getGUID());
				setLeader();
    1fdc:	0c 94 40 0f 	jmp	0x1e80	; 0x1e80 <setLeader>
			}
			else 
			{
				sendBackMsg(minIdSender, 1);
    1fe0:	61 e0       	ldi	r22, 0x01	; 1
    1fe2:	80 91 86 26 	lds	r24, 0x2686
			}
		}
	}
}
    1fe6:	df 91       	pop	r29
    1fe8:	cf 91       	pop	r28
				//printf("block %u: direct win\n", getGUID());
				setLeader();
			}
			else 
			{
				sendBackMsg(minIdSender, 1);
    1fea:	0c 94 dc 0e 	jmp	0x1db8	; 0x1db8 <sendBackMsg>
			}
		}
	}
}
    1fee:	df 91       	pop	r29
    1ff0:	cf 91       	pop	r28
    1ff2:	08 95       	ret

00001ff4 <handleClockSyncMessage>:
	return 0;
#endif
}

byte handleClockSyncMessage(void)
{
    1ff4:	2f 92       	push	r2
    1ff6:	3f 92       	push	r3
    1ff8:	4f 92       	push	r4
    1ffa:	5f 92       	push	r5
    1ffc:	6f 92       	push	r6
    1ffe:	7f 92       	push	r7
    2000:	8f 92       	push	r8
    2002:	9f 92       	push	r9
    2004:	af 92       	push	r10
    2006:	bf 92       	push	r11
    2008:	cf 92       	push	r12
    200a:	df 92       	push	r13
    200c:	ef 92       	push	r14
    200e:	ff 92       	push	r15
    2010:	0f 93       	push	r16
    2012:	1f 93       	push	r17
    2014:	cf 93       	push	r28
    2016:	df 93       	push	r29
    2018:	cd b7       	in	r28, 0x3d	; 61
    201a:	de b7       	in	r29, 0x3e	; 62
    201c:	ce 59       	subi	r28, 0x9E	; 158
    201e:	d1 09       	sbc	r29, r1
    2020:	cd bf       	out	0x3d, r28	; 61
    2022:	de bf       	out	0x3e, r29	; 62
	if (thisChunk == NULL) 
    2024:	00 91 4b 21 	lds	r16, 0x214B
    2028:	10 91 4c 21 	lds	r17, 0x214C
    202c:	01 15       	cp	r16, r1
    202e:	11 05       	cpc	r17, r1
    2030:	09 f4       	brne	.+2      	; 0x2034 <handleClockSyncMessage+0x40>
    2032:	f3 c1       	rjmp	.+998    	; 0x241a <handleClockSyncMessage+0x426>
	{
		return 0;
	}
    
	switch(thisChunk->data[1])
    2034:	f8 01       	movw	r30, r16
    2036:	81 81       	ldd	r24, Z+1	; 0x01
    2038:	82 30       	cpi	r24, 0x02	; 2
    203a:	09 f4       	brne	.+2      	; 0x203e <handleClockSyncMessage+0x4a>
    203c:	c0 c1       	rjmp	.+896    	; 0x23be <handleClockSyncMessage+0x3ca>
    203e:	20 f4       	brcc	.+8      	; 0x2048 <handleClockSyncMessage+0x54>
    2040:	81 30       	cpi	r24, 0x01	; 1
    2042:	09 f0       	breq	.+2      	; 0x2046 <handleClockSyncMessage+0x52>
    2044:	ec c1       	rjmp	.+984    	; 0x241e <handleClockSyncMessage+0x42a>
    2046:	63 c1       	rjmp	.+710    	; 0x230e <handleClockSyncMessage+0x31a>
    2048:	83 30       	cpi	r24, 0x03	; 3
    204a:	21 f0       	breq	.+8      	; 0x2054 <handleClockSyncMessage+0x60>
    204c:	84 30       	cpi	r24, 0x04	; 4
    204e:	09 f0       	breq	.+2      	; 0x2052 <handleClockSyncMessage+0x5e>
    2050:	e6 c1       	rjmp	.+972    	; 0x241e <handleClockSyncMessage+0x42a>
    2052:	52 c1       	rjmp	.+676    	; 0x22f8 <handleClockSyncMessage+0x304>
			}
			lastWaveId = waveId;
			syncBy = faceNum(thisChunk);
#endif		
			
			sendTime  = (Time)(thisChunk->data[SEND_TIME_INDEX+3]) & 0xFF;
    2054:	f8 01       	movw	r30, r16
    2056:	c5 80       	ldd	r12, Z+5	; 0x05
			sendTime |= ((Time)(thisChunk->data[SEND_TIME_INDEX+2]) << 8) & 0xFF00;
			sendTime |= ((Time)(thisChunk->data[SEND_TIME_INDEX+1]) << 16) & 0xFF0000;
			sendTime |= ((Time)(thisChunk->data[SEND_TIME_INDEX]) << 24)  & 0xFF000000;
    2058:	82 81       	ldd	r24, Z+2	; 0x02
    205a:	d1 2c       	mov	r13, r1
    205c:	e1 2c       	mov	r14, r1
    205e:	f1 2c       	mov	r15, r1
			lastWaveId = waveId;
			syncBy = faceNum(thisChunk);
#endif		
			
			sendTime  = (Time)(thisChunk->data[SEND_TIME_INDEX+3]) & 0xFF;
			sendTime |= ((Time)(thisChunk->data[SEND_TIME_INDEX+2]) << 8) & 0xFF00;
    2060:	f8 2a       	or	r15, r24
    2062:	84 81       	ldd	r24, Z+4	; 0x04
			sendTime |= ((Time)(thisChunk->data[SEND_TIME_INDEX+1]) << 16) & 0xFF0000;
    2064:	d8 2a       	or	r13, r24
    2066:	83 81       	ldd	r24, Z+3	; 0x03
			sendTime |= ((Time)(thisChunk->data[SEND_TIME_INDEX]) << 24)  & 0xFF000000;
    2068:	e8 2a       	or	r14, r24
	
			receiveTime  = (Time)(thisChunk->data[RECEIVE_TIME_INDEX+3]) & 0xFF;
    206a:	81 84       	ldd	r8, Z+9	; 0x09
			receiveTime |= ((Time)(thisChunk->data[RECEIVE_TIME_INDEX+2]) << 8) & 0xFF00;
			receiveTime |= ((Time)(thisChunk->data[RECEIVE_TIME_INDEX+1]) << 16) & 0xFF0000;
			receiveTime |= ((Time)(thisChunk->data[RECEIVE_TIME_INDEX]) << 24)  & 0xFF000000;
    206c:	86 81       	ldd	r24, Z+6	; 0x06
    206e:	91 2c       	mov	r9, r1
    2070:	a1 2c       	mov	r10, r1
    2072:	b1 2c       	mov	r11, r1
			sendTime |= ((Time)(thisChunk->data[SEND_TIME_INDEX+2]) << 8) & 0xFF00;
			sendTime |= ((Time)(thisChunk->data[SEND_TIME_INDEX+1]) << 16) & 0xFF0000;
			sendTime |= ((Time)(thisChunk->data[SEND_TIME_INDEX]) << 24)  & 0xFF000000;
	
			receiveTime  = (Time)(thisChunk->data[RECEIVE_TIME_INDEX+3]) & 0xFF;
			receiveTime |= ((Time)(thisChunk->data[RECEIVE_TIME_INDEX+2]) << 8) & 0xFF00;
    2074:	b8 2a       	or	r11, r24
    2076:	80 85       	ldd	r24, Z+8	; 0x08
			receiveTime |= ((Time)(thisChunk->data[RECEIVE_TIME_INDEX+1]) << 16) & 0xFF0000;
    2078:	98 2a       	or	r9, r24
    207a:	87 81       	ldd	r24, Z+7	; 0x07
			receiveTime |= ((Time)(thisChunk->data[RECEIVE_TIME_INDEX]) << 24)  & 0xFF000000;
    207c:	a8 2a       	or	r10, r24
			
			localClockMaxReach = fmax(getClock(), localClockMaxReach);
    207e:	60 91 2a 21 	lds	r22, 0x212A
    2082:	70 91 2b 21 	lds	r23, 0x212B
    2086:	80 91 2c 21 	lds	r24, 0x212C
    208a:	90 91 2d 21 	lds	r25, 0x212D
    208e:	0e 94 9b 24 	call	0x4936	; 0x4936 <__floatunsisf>
    2092:	9b 01       	movw	r18, r22
    2094:	ac 01       	movw	r20, r24
    2096:	c5 56       	subi	r28, 0x65	; 101
    2098:	df 4f       	sbci	r29, 0xFF	; 255
    209a:	68 83       	st	Y, r22
    209c:	cb 59       	subi	r28, 0x9B	; 155
    209e:	d0 40       	sbci	r29, 0x00	; 0
    20a0:	c4 56       	subi	r28, 0x64	; 100
    20a2:	df 4f       	sbci	r29, 0xFF	; 255
    20a4:	38 83       	st	Y, r19
    20a6:	cc 59       	subi	r28, 0x9C	; 156
    20a8:	d0 40       	sbci	r29, 0x00	; 0
    20aa:	c3 56       	subi	r28, 0x63	; 99
    20ac:	df 4f       	sbci	r29, 0xFF	; 255
    20ae:	48 83       	st	Y, r20
    20b0:	cd 59       	subi	r28, 0x9D	; 157
    20b2:	d0 40       	sbci	r29, 0x00	; 0
    20b4:	c2 56       	subi	r28, 0x62	; 98
    20b6:	df 4f       	sbci	r29, 0xFF	; 255
    20b8:	58 83       	st	Y, r21
    20ba:	ce 59       	subi	r28, 0x9E	; 158
    20bc:	d0 40       	sbci	r29, 0x00	; 0
    20be:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <getClock>
    20c2:	0e 94 9b 24 	call	0x4936	; 0x4936 <__floatunsisf>
    20c6:	c5 56       	subi	r28, 0x65	; 101
    20c8:	df 4f       	sbci	r29, 0xFF	; 255
    20ca:	28 81       	ld	r18, Y
    20cc:	cb 59       	subi	r28, 0x9B	; 155
    20ce:	d0 40       	sbci	r29, 0x00	; 0
    20d0:	c4 56       	subi	r28, 0x64	; 100
    20d2:	df 4f       	sbci	r29, 0xFF	; 255
    20d4:	38 81       	ld	r19, Y
    20d6:	cc 59       	subi	r28, 0x9C	; 156
    20d8:	d0 40       	sbci	r29, 0x00	; 0
    20da:	c3 56       	subi	r28, 0x63	; 99
    20dc:	df 4f       	sbci	r29, 0xFF	; 255
    20de:	48 81       	ld	r20, Y
    20e0:	cd 59       	subi	r28, 0x9D	; 157
    20e2:	d0 40       	sbci	r29, 0x00	; 0
    20e4:	c2 56       	subi	r28, 0x62	; 98
    20e6:	df 4f       	sbci	r29, 0xFF	; 255
    20e8:	58 81       	ld	r21, Y
    20ea:	ce 59       	subi	r28, 0x9E	; 158
    20ec:	d0 40       	sbci	r29, 0x00	; 0
    20ee:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <fmax>
    20f2:	0e 94 6f 24 	call	0x48de	; 0x48de <__fixunssfsi>
    20f6:	60 93 2a 21 	sts	0x212A, r22
    20fa:	70 93 2b 21 	sts	0x212B, r23
    20fe:	80 93 2c 21 	sts	0x212C, r24
    2102:	90 93 2d 21 	sts	0x212D, r25
			estimatedGlobalTime = sendTime + ESTIMATED_TRANSMISSION_DELAY;
    2106:	f6 e0       	ldi	r31, 0x06	; 6
    2108:	cf 0e       	add	r12, r31
    210a:	d1 1c       	adc	r13, r1
    210c:	e1 1c       	adc	r14, r1
    210e:	f1 1c       	adc	r15, r1

#ifdef LOG_DEBUG
			char s[150];
			snprintf(s, 150*sizeof(char), "s: %lu, r: %lu, c: %lu, sp: %f", estimatedGlobalTime, receiveTime, getClockForTime(receiveTime), speedAvg);
    2110:	10 91 3c 21 	lds	r17, 0x213C
    2114:	00 91 3d 21 	lds	r16, 0x213D
    2118:	70 90 3e 21 	lds	r7, 0x213E
    211c:	60 90 3f 21 	lds	r6, 0x213F
    2120:	c5 01       	movw	r24, r10
    2122:	b4 01       	movw	r22, r8
    2124:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <getClockForTime>
    2128:	6f 92       	push	r6
    212a:	7f 92       	push	r7
    212c:	0f 93       	push	r16
    212e:	1f 93       	push	r17
    2130:	9f 93       	push	r25
    2132:	8f 93       	push	r24
    2134:	7f 93       	push	r23
    2136:	6f 93       	push	r22
    2138:	bf 92       	push	r11
    213a:	af 92       	push	r10
    213c:	9f 92       	push	r9
    213e:	8f 92       	push	r8
    2140:	ff 92       	push	r15
    2142:	ef 92       	push	r14
    2144:	df 92       	push	r13
    2146:	cf 92       	push	r12
    2148:	87 ef       	ldi	r24, 0xF7	; 247
    214a:	90 e2       	ldi	r25, 0x20	; 32
    214c:	9f 93       	push	r25
    214e:	8f 93       	push	r24
    2150:	1f 92       	push	r1
    2152:	86 e9       	ldi	r24, 0x96	; 150
    2154:	8f 93       	push	r24
    2156:	8e 01       	movw	r16, r28
    2158:	0f 5f       	subi	r16, 0xFF	; 255
    215a:	1f 4f       	sbci	r17, 0xFF	; 255
    215c:	1f 93       	push	r17
    215e:	0f 93       	push	r16
    2160:	0e 94 fe 28 	call	0x51fc	; 0x51fc <snprintf>
			s[149] = '\0';
    2164:	ca 56       	subi	r28, 0x6A	; 106
    2166:	df 4f       	sbci	r29, 0xFF	; 255
    2168:	18 82       	st	Y, r1
    216a:	c6 59       	subi	r28, 0x96	; 150
    216c:	d0 40       	sbci	r29, 0x00	; 0
			printDebug(s);
    216e:	c8 01       	movw	r24, r16
    2170:	0e 94 82 0c 	call	0x1904	; 0x1904 <printDebug>

#ifdef LINEAR_CORRECTION
	#ifdef TEST_LINEAR_CORRECTION
		if(nbSync < IGNORE_AFTER) {
	#endif
			nbSync++;
    2174:	80 91 36 21 	lds	r24, 0x2136
    2178:	90 91 37 21 	lds	r25, 0x2137
    217c:	01 96       	adiw	r24, 0x01	; 1
    217e:	80 93 36 21 	sts	0x2136, r24
    2182:	90 93 37 21 	sts	0x2137, r25
			if ((nbSync == 1) || ( (getTime() - firstCalibRec) < (SYNC_PERIOD/2))) {
    2186:	cd bf       	out	0x3d, r28	; 61
    2188:	de bf       	out	0x3e, r29	; 62
    218a:	01 97       	sbiw	r24, 0x01	; 1
    218c:	79 f4       	brne	.+30     	; 0x21ac <handleClockSyncMessage+0x1b8>
				offset = estimatedGlobalTime - receiveTime;
    218e:	d7 01       	movw	r26, r14
    2190:	c6 01       	movw	r24, r12
    2192:	88 19       	sub	r24, r8
    2194:	99 09       	sbc	r25, r9
    2196:	aa 09       	sbc	r26, r10
    2198:	bb 09       	sbc	r27, r11
    219a:	80 93 32 21 	sts	0x2132, r24
    219e:	90 93 33 21 	sts	0x2133, r25
    21a2:	a0 93 34 21 	sts	0x2134, r26
    21a6:	b0 93 35 21 	sts	0x2135, r27
    21aa:	93 c0       	rjmp	.+294    	; 0x22d2 <handleClockSyncMessage+0x2de>
#ifdef LINEAR_CORRECTION
	#ifdef TEST_LINEAR_CORRECTION
		if(nbSync < IGNORE_AFTER) {
	#endif
			nbSync++;
			if ((nbSync == 1) || ( (getTime() - firstCalibRec) < (SYNC_PERIOD/2))) {
    21ac:	0e 94 71 09 	call	0x12e2	; 0x12e2 <getTime>
    21b0:	40 90 2e 21 	lds	r4, 0x212E
    21b4:	50 90 2f 21 	lds	r5, 0x212F
    21b8:	60 90 30 21 	lds	r6, 0x2130
    21bc:	70 90 31 21 	lds	r7, 0x2131
    21c0:	64 19       	sub	r22, r4
    21c2:	75 09       	sbc	r23, r5
    21c4:	86 09       	sbc	r24, r6
    21c6:	97 09       	sbc	r25, r7
    21c8:	6c 3d       	cpi	r22, 0xDC	; 220
    21ca:	75 40       	sbci	r23, 0x05	; 5
    21cc:	81 05       	cpc	r24, r1
    21ce:	91 05       	cpc	r25, r1
    21d0:	f0 f2       	brcs	.-68     	; 0x218e <handleClockSyncMessage+0x19a>
				firstCalibSend = estimatedGlobalTime;
				firstCalibRec = receiveTime;
			} else {
				//double n = (double) nbSync;
				//speedAvg = (speedAvg*(n-1) + observedSpeed) / n;
				speedAvg = ((double) (estimatedGlobalTime - firstCalibSend))/ ((double) (receiveTime - firstCalibRec));
    21d2:	80 91 38 21 	lds	r24, 0x2138
    21d6:	90 91 39 21 	lds	r25, 0x2139
    21da:	a0 91 3a 21 	lds	r26, 0x213A
    21de:	b0 91 3b 21 	lds	r27, 0x213B
    21e2:	a7 01       	movw	r20, r14
    21e4:	96 01       	movw	r18, r12
    21e6:	28 1b       	sub	r18, r24
    21e8:	39 0b       	sbc	r19, r25
    21ea:	4a 0b       	sbc	r20, r26
    21ec:	5b 0b       	sbc	r21, r27
    21ee:	ca 01       	movw	r24, r20
    21f0:	b9 01       	movw	r22, r18
    21f2:	0e 94 9b 24 	call	0x4936	; 0x4936 <__floatunsisf>
    21f6:	c9 56       	subi	r28, 0x69	; 105
    21f8:	df 4f       	sbci	r29, 0xFF	; 255
    21fa:	68 83       	st	Y, r22
    21fc:	79 83       	std	Y+1, r23	; 0x01
    21fe:	8a 83       	std	Y+2, r24	; 0x02
    2200:	9b 83       	std	Y+3, r25	; 0x03
    2202:	c7 59       	subi	r28, 0x97	; 151
    2204:	d0 40       	sbci	r29, 0x00	; 0
    2206:	c5 01       	movw	r24, r10
    2208:	b4 01       	movw	r22, r8
    220a:	64 19       	sub	r22, r4
    220c:	75 09       	sbc	r23, r5
    220e:	86 09       	sbc	r24, r6
    2210:	97 09       	sbc	r25, r7
    2212:	0e 94 9b 24 	call	0x4936	; 0x4936 <__floatunsisf>
    2216:	9b 01       	movw	r18, r22
    2218:	ac 01       	movw	r20, r24
    221a:	c9 56       	subi	r28, 0x69	; 105
    221c:	df 4f       	sbci	r29, 0xFF	; 255
    221e:	68 81       	ld	r22, Y
    2220:	79 81       	ldd	r23, Y+1	; 0x01
    2222:	8a 81       	ldd	r24, Y+2	; 0x02
    2224:	9b 81       	ldd	r25, Y+3	; 0x03
    2226:	c7 59       	subi	r28, 0x97	; 151
    2228:	d0 40       	sbci	r29, 0x00	; 0
    222a:	0e 94 02 24 	call	0x4804	; 0x4804 <__divsf3>
    222e:	16 2f       	mov	r17, r22
    2230:	07 2f       	mov	r16, r23
    2232:	38 2e       	mov	r3, r24
    2234:	29 2e       	mov	r2, r25
    2236:	a8 01       	movw	r20, r16
    2238:	91 01       	movw	r18, r2
    223a:	85 2f       	mov	r24, r21
    223c:	94 2f       	mov	r25, r20
    223e:	a3 2f       	mov	r26, r19
    2240:	b2 2f       	mov	r27, r18
    2242:	80 93 3c 21 	sts	0x213C, r24
    2246:	90 93 3d 21 	sts	0x213D, r25
    224a:	a0 93 3e 21 	sts	0x213E, r26
    224e:	b0 93 3f 21 	sts	0x213F, r27
				offset = round(estimatedGlobalTime - (speedAvg*((double)getTime())));
    2252:	0e 94 71 09 	call	0x12e2	; 0x12e2 <getTime>
    2256:	c9 56       	subi	r28, 0x69	; 105
    2258:	df 4f       	sbci	r29, 0xFF	; 255
    225a:	68 83       	st	Y, r22
    225c:	79 83       	std	Y+1, r23	; 0x01
    225e:	8a 83       	std	Y+2, r24	; 0x02
    2260:	9b 83       	std	Y+3, r25	; 0x03
    2262:	c7 59       	subi	r28, 0x97	; 151
    2264:	d0 40       	sbci	r29, 0x00	; 0
    2266:	c7 01       	movw	r24, r14
    2268:	b6 01       	movw	r22, r12
    226a:	0e 94 9b 24 	call	0x4936	; 0x4936 <__floatunsisf>
    226e:	2b 01       	movw	r4, r22
    2270:	3c 01       	movw	r6, r24
    2272:	c9 56       	subi	r28, 0x69	; 105
    2274:	df 4f       	sbci	r29, 0xFF	; 255
    2276:	68 81       	ld	r22, Y
    2278:	79 81       	ldd	r23, Y+1	; 0x01
    227a:	8a 81       	ldd	r24, Y+2	; 0x02
    227c:	9b 81       	ldd	r25, Y+3	; 0x03
    227e:	c7 59       	subi	r28, 0x97	; 151
    2280:	d0 40       	sbci	r29, 0x00	; 0
    2282:	0e 94 9b 24 	call	0x4936	; 0x4936 <__floatunsisf>
    2286:	9b 01       	movw	r18, r22
    2288:	ac 01       	movw	r20, r24
    228a:	d8 01       	movw	r26, r16
    228c:	f1 01       	movw	r30, r2
    228e:	6b 2f       	mov	r22, r27
    2290:	7a 2f       	mov	r23, r26
    2292:	8f 2f       	mov	r24, r31
    2294:	9e 2f       	mov	r25, r30
    2296:	0e 94 48 25 	call	0x4a90	; 0x4a90 <__mulsf3>
    229a:	9b 01       	movw	r18, r22
    229c:	ac 01       	movw	r20, r24
    229e:	c3 01       	movw	r24, r6
    22a0:	b2 01       	movw	r22, r4
    22a2:	0e 94 9d 23 	call	0x473a	; 0x473a <__subsf3>
    22a6:	0e 94 ab 25 	call	0x4b56	; 0x4b56 <round>
    22aa:	0e 94 6a 24 	call	0x48d4	; 0x48d4 <__fixsfsi>
    22ae:	60 93 32 21 	sts	0x2132, r22
    22b2:	70 93 33 21 	sts	0x2133, r23
    22b6:	80 93 34 21 	sts	0x2134, r24
    22ba:	90 93 35 21 	sts	0x2135, r25
				#ifdef RESET_SLOPE_AFTER
				if ((nbSync % RESET_SLOPE_AFTER) == 0 ) 
    22be:	80 91 36 21 	lds	r24, 0x2136
    22c2:	90 91 37 21 	lds	r25, 0x2137
    22c6:	65 e0       	ldi	r22, 0x05	; 5
    22c8:	70 e0       	ldi	r23, 0x00	; 0
    22ca:	0e 94 0b 26 	call	0x4c16	; 0x4c16 <__udivmodhi4>
    22ce:	89 2b       	or	r24, r25
    22d0:	81 f4       	brne	.+32     	; 0x22f2 <handleClockSyncMessage+0x2fe>
				{
					firstCalibSend = estimatedGlobalTime;
    22d2:	c0 92 38 21 	sts	0x2138, r12
    22d6:	d0 92 39 21 	sts	0x2139, r13
    22da:	e0 92 3a 21 	sts	0x213A, r14
    22de:	f0 92 3b 21 	sts	0x213B, r15
					firstCalibRec = receiveTime;
    22e2:	80 92 2e 21 	sts	0x212E, r8
    22e6:	90 92 2f 21 	sts	0x212F, r9
    22ea:	a0 92 30 21 	sts	0x2130, r10
    22ee:	b0 92 31 21 	sts	0x2131, r11
			char s[150];
			snprintf(s, 150*sizeof(char), "s: %lu, r: %lu, o: %d, t: %lu, c: %lu", sendTime, receiveTime, offset, getTime(), getClock());
			s[149] = '\0';
			printDebug(s);
#endif*/
			synchronizeNeighbors();
    22f2:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <synchronizeNeighbors>
    22f6:	93 c0       	rjmp	.+294    	; 0x241e <handleClockSyncMessage+0x42a>
			break;
		}
		
		case REQUEST_CLOCK_SYNC :
		{	PRINT_BBSIM("block %u: sync request from %u\n", getGUID(), thisNeighborhood.n[faceNum(thisChunk)]);
			if(isSynchronized())
    22f8:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <isSynchronized>
    22fc:	81 11       	cpse	r24, r1
    22fe:	01 c0       	rjmp	.+2      	; 0x2302 <handleClockSyncMessage+0x30e>
    2300:	8e c0       	rjmp	.+284    	; 0x241e <handleClockSyncMessage+0x42a>
			{
				synchronizeNeighbor(faceNum(thisChunk));
    2302:	f8 01       	movw	r30, r16
    2304:	81 89       	ldd	r24, Z+17	; 0x11
    2306:	87 70       	andi	r24, 0x07	; 7
    2308:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <synchronizeNeighbor>
    230c:	88 c0       	rjmp	.+272    	; 0x241e <handleClockSyncMessage+0x42a>
			break;
		}
#ifdef MIN_ID_TIME_LEADER
		case MIN_ID_TIME_LEADER_ELECTION_GO_MSG :
		{
			uint16_t id = charToGUID(&(thisChunk->data[2]));
    230e:	c8 01       	movw	r24, r16
    2310:	02 96       	adiw	r24, 0x02	; 2
    2312:	0e 94 b1 04 	call	0x962	; 0x962 <charToGUID>
    2316:	8c 01       	movw	r16, r24
			
			if (!electing)
    2318:	80 91 40 21 	lds	r24, 0x2140
    231c:	81 11       	cpse	r24, r1
    231e:	06 c0       	rjmp	.+12     	; 0x232c <handleClockSyncMessage+0x338>
			{
				PRINT_BBSIM("block %u: go msg - election\n", getGUID()); 
				deregisterTimeout(&leaderElectionTimeOut);
    2320:	8c e7       	ldi	r24, 0x7C	; 124
    2322:	96 e2       	ldi	r25, 0x26	; 38
    2324:	0e 94 04 0a 	call	0x1408	; 0x1408 <deregisterTimeout>
				startLeaderElection();
    2328:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <startLeaderElection>
			}
			
			if (id == minId)
    232c:	80 91 7a 26 	lds	r24, 0x267A
    2330:	90 91 7b 26 	lds	r25, 0x267B
    2334:	08 17       	cp	r16, r24
    2336:	19 07       	cpc	r17, r25
    2338:	49 f4       	brne	.+18     	; 0x234c <handleClockSyncMessage+0x358>
			{
				sendBackMsg(faceNum(thisChunk), 0);
    233a:	e0 91 4b 21 	lds	r30, 0x214B
    233e:	f0 91 4c 21 	lds	r31, 0x214C
    2342:	81 89       	ldd	r24, Z+17	; 0x11
    2344:	60 e0       	ldi	r22, 0x00	; 0
    2346:	87 70       	andi	r24, 0x07	; 7
    2348:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <sendBackMsg>
			}
			if (id < minId)
    234c:	80 91 7a 26 	lds	r24, 0x267A
    2350:	90 91 7b 26 	lds	r25, 0x267B
    2354:	08 17       	cp	r16, r24
    2356:	19 07       	cpc	r17, r25
    2358:	08 f0       	brcs	.+2      	; 0x235c <handleClockSyncMessage+0x368>
    235a:	61 c0       	rjmp	.+194    	; 0x241e <handleClockSyncMessage+0x42a>
			{
				minId = id;
    235c:	00 93 7a 26 	sts	0x267A, r16
    2360:	10 93 7b 26 	sts	0x267B, r17
				minIdSender = faceNum(thisChunk);
    2364:	e0 91 4b 21 	lds	r30, 0x214B
    2368:	f0 91 4c 21 	lds	r31, 0x214C
    236c:	81 89       	ldd	r24, Z+17	; 0x11
    236e:	87 70       	andi	r24, 0x07	; 7
    2370:	80 93 86 26 	sts	0x2686, r24
				initSTChildren();
    2374:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <initSTChildren>
				nbNeededAnswers = broadcastGoMsg(faceNum(thisChunk), id);
    2378:	e0 91 4b 21 	lds	r30, 0x214B
    237c:	f0 91 4c 21 	lds	r31, 0x214C
    2380:	81 89       	ldd	r24, Z+17	; 0x11
    2382:	b8 01       	movw	r22, r16
    2384:	87 70       	andi	r24, 0x07	; 7
    2386:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <broadcastGoMsg>
    238a:	80 93 68 26 	sts	0x2668, r24
				
				if (nbNeededAnswers == 0) 
    238e:	81 11       	cpse	r24, r1
    2390:	46 c0       	rjmp	.+140    	; 0x241e <handleClockSyncMessage+0x42a>
				{
					electing = 0;
    2392:	10 92 40 21 	sts	0x2140, r1
					if (minId == getGUID())
    2396:	00 91 7a 26 	lds	r16, 0x267A
    239a:	10 91 7b 26 	lds	r17, 0x267B
    239e:	0e 94 08 1a 	call	0x3410	; 0x3410 <getGUID>
    23a2:	08 17       	cp	r16, r24
    23a4:	19 07       	cpc	r17, r25
    23a6:	19 f4       	brne	.+6      	; 0x23ae <handleClockSyncMessage+0x3ba>
					{
						setLeader();
    23a8:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <setLeader>
    23ac:	38 c0       	rjmp	.+112    	; 0x241e <handleClockSyncMessage+0x42a>
					}
					else 
					{
						sendBackMsg(faceNum(thisChunk), 1);
    23ae:	e0 91 4b 21 	lds	r30, 0x214B
    23b2:	f0 91 4c 21 	lds	r31, 0x214C
    23b6:	81 89       	ldd	r24, Z+17	; 0x11
    23b8:	61 e0       	ldi	r22, 0x01	; 1
    23ba:	87 70       	andi	r24, 0x07	; 7
    23bc:	2b c0       	rjmp	.+86     	; 0x2414 <handleClockSyncMessage+0x420>
			}
			break;
		}
		case MIN_ID_TIME_LEADER_ELECTION_BACK_MSG :
		{
			uint16_t id = charToGUID(&(thisChunk->data[2]));
    23be:	c8 01       	movw	r24, r16
    23c0:	02 96       	adiw	r24, 0x02	; 2
    23c2:	0e 94 b1 04 	call	0x962	; 0x962 <charToGUID>
    23c6:	8c 01       	movw	r16, r24
			
			if (id == minId)
    23c8:	80 91 7a 26 	lds	r24, 0x267A
    23cc:	90 91 7b 26 	lds	r25, 0x267B
    23d0:	08 17       	cp	r16, r24
    23d2:	19 07       	cpc	r17, r25
    23d4:	21 f5       	brne	.+72     	; 0x241e <handleClockSyncMessage+0x42a>
			{
				nbNeededAnswers--;
    23d6:	80 91 68 26 	lds	r24, 0x2668
    23da:	81 50       	subi	r24, 0x01	; 1
    23dc:	80 93 68 26 	sts	0x2668, r24
				syncChildren[faceNum(thisChunk)] = thisChunk->data[4];
    23e0:	a0 91 4b 21 	lds	r26, 0x214B
    23e4:	b0 91 4c 21 	lds	r27, 0x214C
    23e8:	51 96       	adiw	r26, 0x11	; 17
    23ea:	ec 91       	ld	r30, X
    23ec:	51 97       	sbiw	r26, 0x11	; 17
    23ee:	e7 70       	andi	r30, 0x07	; 7
    23f0:	f0 e0       	ldi	r31, 0x00	; 0
    23f2:	e9 57       	subi	r30, 0x79	; 121
    23f4:	f9 4d       	sbci	r31, 0xD9	; 217
    23f6:	14 96       	adiw	r26, 0x04	; 4
    23f8:	9c 91       	ld	r25, X
    23fa:	90 83       	st	Z, r25
				if (nbNeededAnswers == 0)
    23fc:	81 11       	cpse	r24, r1
    23fe:	0f c0       	rjmp	.+30     	; 0x241e <handleClockSyncMessage+0x42a>
				{
					electing = 0;
    2400:	10 92 40 21 	sts	0x2140, r1
					if (id == getGUID())
    2404:	0e 94 08 1a 	call	0x3410	; 0x3410 <getGUID>
    2408:	08 17       	cp	r16, r24
    240a:	19 07       	cpc	r17, r25
    240c:	69 f2       	breq	.-102    	; 0x23a8 <handleClockSyncMessage+0x3b4>
					{
						setLeader();
					}
					else
					{
						sendBackMsg(minIdSender, 1);
    240e:	61 e0       	ldi	r22, 0x01	; 1
    2410:	80 91 86 26 	lds	r24, 0x2686
    2414:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <sendBackMsg>
    2418:	02 c0       	rjmp	.+4      	; 0x241e <handleClockSyncMessage+0x42a>

byte handleClockSyncMessage(void)
{
	if (thisChunk == NULL) 
	{
		return 0;
    241a:	80 e0       	ldi	r24, 0x00	; 0
    241c:	01 c0       	rjmp	.+2      	; 0x2420 <handleClockSyncMessage+0x42c>
			}
			break;
		}
#endif
	}
	return 1;
    241e:	81 e0       	ldi	r24, 0x01	; 1
}
    2420:	c2 56       	subi	r28, 0x62	; 98
    2422:	df 4f       	sbci	r29, 0xFF	; 255
    2424:	cd bf       	out	0x3d, r28	; 61
    2426:	de bf       	out	0x3e, r29	; 62
    2428:	df 91       	pop	r29
    242a:	cf 91       	pop	r28
    242c:	1f 91       	pop	r17
    242e:	0f 91       	pop	r16
    2430:	ff 90       	pop	r15
    2432:	ef 90       	pop	r14
    2434:	df 90       	pop	r13
    2436:	cf 90       	pop	r12
    2438:	bf 90       	pop	r11
    243a:	af 90       	pop	r10
    243c:	9f 90       	pop	r9
    243e:	8f 90       	pop	r8
    2440:	7f 90       	pop	r7
    2442:	6f 90       	pop	r6
    2444:	5f 90       	pop	r5
    2446:	4f 90       	pop	r4
    2448:	3f 90       	pop	r3
    244a:	2f 90       	pop	r2
    244c:	08 95       	ret

0000244e <EEPROM_WaitForNVM>:
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    244e:	80 91 cf 01 	lds	r24, 0x01CF
    2452:	87 fd       	sbrc	r24, 7
    2454:	fc cf       	rjmp	.-8      	; 0x244e <EEPROM_WaitForNVM>
}
    2456:	08 95       	ret

00002458 <EEPROM_ReadByte>:
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGESIZE.
 *
 *  \return  Byte value read from EEPROM.
 */
uint8_t EEPROM_ReadByte( uint8_t pageAddr, uint8_t byteAddr )
{
    2458:	cf 93       	push	r28
    245a:	df 93       	push	r29
    245c:	1f 92       	push	r1
    245e:	1f 92       	push	r1
    2460:	cd b7       	in	r28, 0x3d	; 61
    2462:	de b7       	in	r29, 0x3e	; 62
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();
    2464:	6a 83       	std	Y+2, r22	; 0x02
    2466:	89 83       	std	Y+1, r24	; 0x01
    2468:	0e 94 27 12 	call	0x244e	; 0x244e <EEPROM_WaitForNVM>

	/* Calculate address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE)
	                            |(byteAddr & (EEPROM_PAGESIZE-1));
    246c:	6a 81       	ldd	r22, Y+2	; 0x02
    246e:	6f 71       	andi	r22, 0x1F	; 31
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE)
    2470:	89 81       	ldd	r24, Y+1	; 0x01
    2472:	20 e2       	ldi	r18, 0x20	; 32
    2474:	82 9f       	mul	r24, r18
    2476:	c0 01       	movw	r24, r0
    2478:	11 24       	eor	r1, r1
    247a:	86 2b       	or	r24, r22
	                            |(byteAddr & (EEPROM_PAGESIZE-1));

	/* Set address to read from. */
	NVM.ADDR0 = address & 0xFF;
    247c:	e0 ec       	ldi	r30, 0xC0	; 192
    247e:	f1 e0       	ldi	r31, 0x01	; 1
    2480:	80 83       	st	Z, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    2482:	91 83       	std	Z+1, r25	; 0x01
	NVM.ADDR2 = 0x00;
    2484:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Read command. */
	NVM.CMD = NVM_CMD_READ_EEPROM_gc;
    2486:	86 e0       	ldi	r24, 0x06	; 6
    2488:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    248a:	ef 93       	push	r30
    248c:	ff 93       	push	r31
    248e:	0f 93       	push	r16
    2490:	2f 93       	push	r18
    2492:	eb ec       	ldi	r30, 0xCB	; 203
    2494:	f1 e0       	ldi	r31, 0x01	; 1
    2496:	08 ed       	ldi	r16, 0xD8	; 216
    2498:	21 e0       	ldi	r18, 0x01	; 1
    249a:	04 bf       	out	0x34, r16	; 52
    249c:	20 83       	st	Z, r18
    249e:	2f 91       	pop	r18
    24a0:	0f 91       	pop	r16
    24a2:	ff 91       	pop	r31
    24a4:	ef 91       	pop	r30

	return NVM.DATA0;
    24a6:	84 81       	ldd	r24, Z+4	; 0x04
}
    24a8:	0f 90       	pop	r0
    24aa:	0f 90       	pop	r0
    24ac:	df 91       	pop	r29
    24ae:	cf 91       	pop	r28
    24b0:	08 95       	ret

000024b2 <EEPROM_FlushBuffer>:
 *  \note The EEPROM write operations will automatically flush the buffer for you.
 */
void EEPROM_FlushBuffer( void )
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();
    24b2:	0e 94 27 12 	call	0x244e	; 0x244e <EEPROM_WaitForNVM>

	/* Flush EEPROM page buffer if necessary. */
	if ((NVM.STATUS & NVM_EELOAD_bm) != 0) {
    24b6:	80 91 cf 01 	lds	r24, 0x01CF
    24ba:	81 ff       	sbrs	r24, 1
    24bc:	11 c0       	rjmp	.+34     	; 0x24e0 <EEPROM_FlushBuffer+0x2e>
		NVM.CMD = NVM_CMD_ERASE_EEPROM_BUFFER_gc;
    24be:	86 e3       	ldi	r24, 0x36	; 54
    24c0:	80 93 ca 01 	sts	0x01CA, r24
		NVM_EXEC();
    24c4:	ef 93       	push	r30
    24c6:	ff 93       	push	r31
    24c8:	0f 93       	push	r16
    24ca:	2f 93       	push	r18
    24cc:	eb ec       	ldi	r30, 0xCB	; 203
    24ce:	f1 e0       	ldi	r31, 0x01	; 1
    24d0:	08 ed       	ldi	r16, 0xD8	; 216
    24d2:	21 e0       	ldi	r18, 0x01	; 1
    24d4:	04 bf       	out	0x34, r16	; 52
    24d6:	20 83       	st	Z, r18
    24d8:	2f 91       	pop	r18
    24da:	0f 91       	pop	r16
    24dc:	ff 91       	pop	r31
    24de:	ef 91       	pop	r30
    24e0:	08 95       	ret

000024e2 <EEPROM_WriteByte>:
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGESIZE.
 *  \param  value     Byte value to write to EEPROM.
 */
void EEPROM_WriteByte( uint8_t pageAddr, uint8_t byteAddr, uint8_t value )
{
    24e2:	cf 93       	push	r28
    24e4:	df 93       	push	r29
    24e6:	00 d0       	rcall	.+0      	; 0x24e8 <EEPROM_WriteByte+0x6>
    24e8:	cd b7       	in	r28, 0x3d	; 61
    24ea:	de b7       	in	r29, 0x3e	; 62
	/*  Flush buffer to make sure no unintetional data is written and load
	 *  the "Page Load" command into the command register.
	 */
	EEPROM_FlushBuffer();
    24ec:	4b 83       	std	Y+3, r20	; 0x03
    24ee:	6a 83       	std	Y+2, r22	; 0x02
    24f0:	89 83       	std	Y+1, r24	; 0x01
    24f2:	0e 94 59 12 	call	0x24b2	; 0x24b2 <EEPROM_FlushBuffer>
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    24f6:	e0 ec       	ldi	r30, 0xC0	; 192
    24f8:	f1 e0       	ldi	r31, 0x01	; 1
    24fa:	93 e3       	ldi	r25, 0x33	; 51
    24fc:	92 87       	std	Z+10, r25	; 0x0a

	/* Calculate address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE)
	                            |(byteAddr & (EEPROM_PAGESIZE-1));
    24fe:	6a 81       	ldd	r22, Y+2	; 0x02
    2500:	6f 71       	andi	r22, 0x1F	; 31
	 */
	EEPROM_FlushBuffer();
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;

	/* Calculate address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE)
    2502:	89 81       	ldd	r24, Y+1	; 0x01
    2504:	20 e2       	ldi	r18, 0x20	; 32
    2506:	82 9f       	mul	r24, r18
    2508:	c0 01       	movw	r24, r0
    250a:	11 24       	eor	r1, r1
    250c:	86 2b       	or	r24, r22
	                            |(byteAddr & (EEPROM_PAGESIZE-1));

	/* Set address to write to. */
	NVM.ADDR0 = address & 0xFF;
    250e:	80 83       	st	Z, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    2510:	91 83       	std	Z+1, r25	; 0x01
	NVM.ADDR2 = 0x00;
    2512:	12 82       	std	Z+2, r1	; 0x02

	/* Load data to write, which triggers the loading of EEPROM page buffer. */
	NVM.DATA0 = value;
    2514:	4b 81       	ldd	r20, Y+3	; 0x03
    2516:	44 83       	std	Z+4, r20	; 0x04

	/*  Issue EEPROM Atomic Write (Erase&Write) command. Load command, write
	 *  the protection signature and execute command.
	 */
	NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
    2518:	85 e3       	ldi	r24, 0x35	; 53
    251a:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    251c:	ef 93       	push	r30
    251e:	ff 93       	push	r31
    2520:	0f 93       	push	r16
    2522:	2f 93       	push	r18
    2524:	eb ec       	ldi	r30, 0xCB	; 203
    2526:	f1 e0       	ldi	r31, 0x01	; 1
    2528:	08 ed       	ldi	r16, 0xD8	; 216
    252a:	21 e0       	ldi	r18, 0x01	; 1
    252c:	04 bf       	out	0x34, r16	; 52
    252e:	20 83       	st	Z, r18
    2530:	2f 91       	pop	r18
    2532:	0f 91       	pop	r16
    2534:	ff 91       	pop	r31
    2536:	ef 91       	pop	r30
}
    2538:	23 96       	adiw	r28, 0x03	; 3
    253a:	cd bf       	out	0x3d, r28	; 61
    253c:	de bf       	out	0x3e, r29	; 62
    253e:	df 91       	pop	r29
    2540:	cf 91       	pop	r28
    2542:	08 95       	ret

00002544 <EEPROM_LoadByte>:
 *
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGESIZE.
 *  \param  value     Byte value to write to buffer.
 */
void EEPROM_LoadByte( uint8_t byteAddr, uint8_t value )
{
    2544:	cf 93       	push	r28
    2546:	df 93       	push	r29
    2548:	1f 92       	push	r1
    254a:	1f 92       	push	r1
    254c:	cd b7       	in	r28, 0x3d	; 61
    254e:	de b7       	in	r29, 0x3e	; 62
	/* Wait until NVM is not busy and prepare NVM command.*/
	EEPROM_WaitForNVM();
    2550:	6a 83       	std	Y+2, r22	; 0x02
    2552:	89 83       	std	Y+1, r24	; 0x01
    2554:	0e 94 27 12 	call	0x244e	; 0x244e <EEPROM_WaitForNVM>
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    2558:	e0 ec       	ldi	r30, 0xC0	; 192
    255a:	f1 e0       	ldi	r31, 0x01	; 1
    255c:	93 e3       	ldi	r25, 0x33	; 51
    255e:	92 87       	std	Z+10, r25	; 0x0a

	/* Set address. */
	NVM.ADDR0 = byteAddr & 0xFF;
    2560:	89 81       	ldd	r24, Y+1	; 0x01
    2562:	80 83       	st	Z, r24
	NVM.ADDR1 = 0x00;
    2564:	11 82       	std	Z+1, r1	; 0x01
	NVM.ADDR2 = 0x00;
    2566:	12 82       	std	Z+2, r1	; 0x02

	/* Set data, which triggers loading of EEPROM page buffer. */
	NVM.DATA0 = value;
    2568:	6a 81       	ldd	r22, Y+2	; 0x02
    256a:	64 83       	std	Z+4, r22	; 0x04
}
    256c:	0f 90       	pop	r0
    256e:	0f 90       	pop	r0
    2570:	df 91       	pop	r29
    2572:	cf 91       	pop	r28
    2574:	08 95       	ret

00002576 <EEPROM_LoadPage>:
 *        EEPROM write page operation.
 *
 *  \param  values   Pointer to SRAM buffer containing an entire page.
 */
void EEPROM_LoadPage( const uint8_t * values )
{
    2576:	cf 93       	push	r28
    2578:	df 93       	push	r29
    257a:	ec 01       	movw	r28, r24
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();
    257c:	0e 94 27 12 	call	0x244e	; 0x244e <EEPROM_WaitForNVM>
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    2580:	83 e3       	ldi	r24, 0x33	; 51
    2582:	80 93 ca 01 	sts	0x01CA, r24

	/*  Set address to zero, as only the lower bits matters. ADDR0 is
	 *  maintained inside the loop below.
	 */
	NVM.ADDR1 = 0x00;
    2586:	10 92 c1 01 	sts	0x01C1, r1
	NVM.ADDR2 = 0x00;
    258a:	10 92 c2 01 	sts	0x01C2, r1

	/* Load multible bytes into page buffer. */
	for (uint8_t i = 0; i < EEPROM_PAGESIZE; ++i) {
    258e:	80 e0       	ldi	r24, 0x00	; 0
		NVM.ADDR0 = i;
    2590:	80 93 c0 01 	sts	0x01C0, r24
		NVM.DATA0 = *values;
    2594:	99 91       	ld	r25, Y+
    2596:	90 93 c4 01 	sts	0x01C4, r25
	 */
	NVM.ADDR1 = 0x00;
	NVM.ADDR2 = 0x00;

	/* Load multible bytes into page buffer. */
	for (uint8_t i = 0; i < EEPROM_PAGESIZE; ++i) {
    259a:	8f 5f       	subi	r24, 0xFF	; 255
    259c:	80 32       	cpi	r24, 0x20	; 32
    259e:	c1 f7       	brne	.-16     	; 0x2590 <EEPROM_LoadPage+0x1a>
		NVM.ADDR0 = i;
		NVM.DATA0 = *values;
		++values;
	}
}
    25a0:	df 91       	pop	r29
    25a2:	cf 91       	pop	r28
    25a4:	08 95       	ret

000025a6 <EEPROM_LoadPartialPage>:
 *  \param  values   Pointer to SRAM buffer containing an entire page.
 *			offset   Offset address to begin from (0-EEPROM_PAGESIZE)
 *			length	 Number of values to write into EEPROM
 */
void EEPROM_LoadPartialPage(const uint8_t * values, uint8_t offset, uint8_t length)
{
    25a6:	0f 93       	push	r16
    25a8:	1f 93       	push	r17
    25aa:	cf 93       	push	r28
    25ac:	df 93       	push	r29
    25ae:	1f 92       	push	r1
    25b0:	1f 92       	push	r1
    25b2:	cd b7       	in	r28, 0x3d	; 61
    25b4:	de b7       	in	r29, 0x3e	; 62
    25b6:	8c 01       	movw	r16, r24
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();
    25b8:	4a 83       	std	Y+2, r20	; 0x02
    25ba:	69 83       	std	Y+1, r22	; 0x01
    25bc:	0e 94 27 12 	call	0x244e	; 0x244e <EEPROM_WaitForNVM>
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    25c0:	83 e3       	ldi	r24, 0x33	; 51
    25c2:	80 93 ca 01 	sts	0x01CA, r24

	/*  Set address to zero, as only the lower bits matters. ADDR0 is
	 *  maintained inside the loop below.
	 */
	NVM.ADDR1 = 0x00;
    25c6:	10 92 c1 01 	sts	0x01C1, r1
	NVM.ADDR2 = 0x00;
    25ca:	10 92 c2 01 	sts	0x01C2, r1
 *
 *  \param  values   Pointer to SRAM buffer containing an entire page.
 *			offset   Offset address to begin from (0-EEPROM_PAGESIZE)
 *			length	 Number of values to write into EEPROM
 */
void EEPROM_LoadPartialPage(const uint8_t * values, uint8_t offset, uint8_t length)
    25ce:	4a 81       	ldd	r20, Y+2	; 0x02
    25d0:	69 81       	ldd	r22, Y+1	; 0x01
    25d2:	46 0f       	add	r20, r22
	 */
	NVM.ADDR1 = 0x00;
	NVM.ADDR2 = 0x00;

	/* Load multible bytes into page buffer. */
	for (uint8_t i = offset; length != 0 && i < EEPROM_PAGESIZE; ++i,--length) {
    25d4:	08 c0       	rjmp	.+16     	; 0x25e6 <EEPROM_LoadPartialPage+0x40>
		NVM.ADDR0 = i;
    25d6:	60 93 c0 01 	sts	0x01C0, r22
		NVM.DATA0 = *values;
    25da:	f8 01       	movw	r30, r16
    25dc:	81 91       	ld	r24, Z+
    25de:	8f 01       	movw	r16, r30
    25e0:	80 93 c4 01 	sts	0x01C4, r24
	 */
	NVM.ADDR1 = 0x00;
	NVM.ADDR2 = 0x00;

	/* Load multible bytes into page buffer. */
	for (uint8_t i = offset; length != 0 && i < EEPROM_PAGESIZE; ++i,--length) {
    25e4:	6f 5f       	subi	r22, 0xFF	; 255
    25e6:	64 17       	cp	r22, r20
    25e8:	11 f0       	breq	.+4      	; 0x25ee <EEPROM_LoadPartialPage+0x48>
    25ea:	60 32       	cpi	r22, 0x20	; 32
    25ec:	a0 f3       	brcs	.-24     	; 0x25d6 <EEPROM_LoadPartialPage+0x30>
		NVM.ADDR0 = i;
		NVM.DATA0 = *values;
		++values;
	}
}
    25ee:	0f 90       	pop	r0
    25f0:	0f 90       	pop	r0
    25f2:	df 91       	pop	r29
    25f4:	cf 91       	pop	r28
    25f6:	1f 91       	pop	r17
    25f8:	0f 91       	pop	r16
    25fa:	08 95       	ret

000025fc <EEPROM_AtomicWritePage>:
 *  locations that have not been loaded will be left untouched in EEPROM.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 */
void EEPROM_AtomicWritePage( uint8_t pageAddr )
{
    25fc:	cf 93       	push	r28
    25fe:	df 93       	push	r29
    2600:	1f 92       	push	r1
    2602:	cd b7       	in	r28, 0x3d	; 61
    2604:	de b7       	in	r29, 0x3e	; 62
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();
    2606:	89 83       	std	Y+1, r24	; 0x01
    2608:	0e 94 27 12 	call	0x244e	; 0x244e <EEPROM_WaitForNVM>

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE);
    260c:	89 81       	ldd	r24, Y+1	; 0x01
    260e:	20 e2       	ldi	r18, 0x20	; 32
    2610:	82 9f       	mul	r24, r18
    2612:	c0 01       	movw	r24, r0
    2614:	11 24       	eor	r1, r1

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    2616:	e0 ec       	ldi	r30, 0xC0	; 192
    2618:	f1 e0       	ldi	r31, 0x01	; 1
    261a:	80 83       	st	Z, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    261c:	91 83       	std	Z+1, r25	; 0x01
	NVM.ADDR2 = 0x00;
    261e:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Atomic Write (Erase&Write) command. */
	NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
    2620:	85 e3       	ldi	r24, 0x35	; 53
    2622:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    2624:	ef 93       	push	r30
    2626:	ff 93       	push	r31
    2628:	0f 93       	push	r16
    262a:	2f 93       	push	r18
    262c:	eb ec       	ldi	r30, 0xCB	; 203
    262e:	f1 e0       	ldi	r31, 0x01	; 1
    2630:	08 ed       	ldi	r16, 0xD8	; 216
    2632:	21 e0       	ldi	r18, 0x01	; 1
    2634:	04 bf       	out	0x34, r16	; 52
    2636:	20 83       	st	Z, r18
    2638:	2f 91       	pop	r18
    263a:	0f 91       	pop	r16
    263c:	ff 91       	pop	r31
    263e:	ef 91       	pop	r30
}
    2640:	0f 90       	pop	r0
    2642:	df 91       	pop	r29
    2644:	cf 91       	pop	r28
    2646:	08 95       	ret

00002648 <EEPROM_ErasePage>:
 *  This function erases one EEPROM page, so that every location reads 0xFF.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 */
void EEPROM_ErasePage( uint8_t pageAddr )
{
    2648:	cf 93       	push	r28
    264a:	df 93       	push	r29
    264c:	1f 92       	push	r1
    264e:	cd b7       	in	r28, 0x3d	; 61
    2650:	de b7       	in	r29, 0x3e	; 62
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();
    2652:	89 83       	std	Y+1, r24	; 0x01
    2654:	0e 94 27 12 	call	0x244e	; 0x244e <EEPROM_WaitForNVM>

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE);
    2658:	89 81       	ldd	r24, Y+1	; 0x01
    265a:	20 e2       	ldi	r18, 0x20	; 32
    265c:	82 9f       	mul	r24, r18
    265e:	c0 01       	movw	r24, r0
    2660:	11 24       	eor	r1, r1

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    2662:	e0 ec       	ldi	r30, 0xC0	; 192
    2664:	f1 e0       	ldi	r31, 0x01	; 1
    2666:	80 83       	st	Z, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    2668:	91 83       	std	Z+1, r25	; 0x01
	NVM.ADDR2 = 0x00;
    266a:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Erase command. */
	NVM.CMD = NVM_CMD_ERASE_EEPROM_PAGE_gc;
    266c:	82 e3       	ldi	r24, 0x32	; 50
    266e:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    2670:	ef 93       	push	r30
    2672:	ff 93       	push	r31
    2674:	0f 93       	push	r16
    2676:	2f 93       	push	r18
    2678:	eb ec       	ldi	r30, 0xCB	; 203
    267a:	f1 e0       	ldi	r31, 0x01	; 1
    267c:	08 ed       	ldi	r16, 0xD8	; 216
    267e:	21 e0       	ldi	r18, 0x01	; 1
    2680:	04 bf       	out	0x34, r16	; 52
    2682:	20 83       	st	Z, r18
    2684:	2f 91       	pop	r18
    2686:	0f 91       	pop	r16
    2688:	ff 91       	pop	r31
    268a:	ef 91       	pop	r30
}
    268c:	0f 90       	pop	r0
    268e:	df 91       	pop	r29
    2690:	cf 91       	pop	r28
    2692:	08 95       	ret

00002694 <EEPROM_SplitWritePage>:
 *  before writing.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 */
void EEPROM_SplitWritePage( uint8_t pageAddr )
{
    2694:	cf 93       	push	r28
    2696:	df 93       	push	r29
    2698:	1f 92       	push	r1
    269a:	cd b7       	in	r28, 0x3d	; 61
    269c:	de b7       	in	r29, 0x3e	; 62
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();
    269e:	89 83       	std	Y+1, r24	; 0x01
    26a0:	0e 94 27 12 	call	0x244e	; 0x244e <EEPROM_WaitForNVM>

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE);
    26a4:	89 81       	ldd	r24, Y+1	; 0x01
    26a6:	20 e2       	ldi	r18, 0x20	; 32
    26a8:	82 9f       	mul	r24, r18
    26aa:	c0 01       	movw	r24, r0
    26ac:	11 24       	eor	r1, r1

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    26ae:	e0 ec       	ldi	r30, 0xC0	; 192
    26b0:	f1 e0       	ldi	r31, 0x01	; 1
    26b2:	80 83       	st	Z, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    26b4:	91 83       	std	Z+1, r25	; 0x01
	NVM.ADDR2 = 0x00;
    26b6:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Split Write command. */
	NVM.CMD = NVM_CMD_WRITE_EEPROM_PAGE_gc;
    26b8:	84 e3       	ldi	r24, 0x34	; 52
    26ba:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    26bc:	ef 93       	push	r30
    26be:	ff 93       	push	r31
    26c0:	0f 93       	push	r16
    26c2:	2f 93       	push	r18
    26c4:	eb ec       	ldi	r30, 0xCB	; 203
    26c6:	f1 e0       	ldi	r31, 0x01	; 1
    26c8:	08 ed       	ldi	r16, 0xD8	; 216
    26ca:	21 e0       	ldi	r18, 0x01	; 1
    26cc:	04 bf       	out	0x34, r16	; 52
    26ce:	20 83       	st	Z, r18
    26d0:	2f 91       	pop	r18
    26d2:	0f 91       	pop	r16
    26d4:	ff 91       	pop	r31
    26d6:	ef 91       	pop	r30
}
    26d8:	0f 90       	pop	r0
    26da:	df 91       	pop	r29
    26dc:	cf 91       	pop	r28
    26de:	08 95       	ret

000026e0 <EEPROM_EraseAll>:
 *  This function erases the entire EEPROM memory block to 0xFF.
 */
void EEPROM_EraseAll( void )
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();
    26e0:	0e 94 27 12 	call	0x244e	; 0x244e <EEPROM_WaitForNVM>

	/* Issue EEPROM Erase All command. */
	NVM.CMD = NVM_CMD_ERASE_EEPROM_gc;
    26e4:	80 e3       	ldi	r24, 0x30	; 48
    26e6:	e0 ec       	ldi	r30, 0xC0	; 192
    26e8:	f1 e0       	ldi	r31, 0x01	; 1
    26ea:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    26ec:	ef 93       	push	r30
    26ee:	ff 93       	push	r31
    26f0:	0f 93       	push	r16
    26f2:	2f 93       	push	r18
    26f4:	eb ec       	ldi	r30, 0xCB	; 203
    26f6:	f1 e0       	ldi	r31, 0x01	; 1
    26f8:	08 ed       	ldi	r16, 0xD8	; 216
    26fa:	21 e0       	ldi	r18, 0x01	; 1
    26fc:	04 bf       	out	0x34, r16	; 52
    26fe:	20 83       	st	Z, r18
    2700:	2f 91       	pop	r18
    2702:	0f 91       	pop	r16
    2704:	ff 91       	pop	r31
    2706:	ef 91       	pop	r30
    2708:	08 95       	ret

0000270a <spiTxRx>:
#include "ext_memory.h"
#include <avr/io.h>

uint8_t spiTxRx(uint8_t input)
{
	SPIE.DATA = input;
    270a:	80 93 c3 0a 	sts	0x0AC3, r24
	
	while(!(SPIE.STATUS & SPI_IF_bm));
    270e:	80 91 c2 0a 	lds	r24, 0x0AC2
    2712:	87 ff       	sbrs	r24, 7
    2714:	fc cf       	rjmp	.-8      	; 0x270e <spiTxRx+0x4>
	
	return SPIE.DATA;
    2716:	80 91 c3 0a 	lds	r24, 0x0AC3
	
}
    271a:	08 95       	ret

0000271c <setSS>:

void setSS(int which, int level)
{
	if(which == SRAM)
    271c:	01 97       	sbiw	r24, 0x01	; 1
    271e:	49 f4       	brne	.+18     	; 0x2732 <setSS+0x16>
	{
		if(level)
		{
			PORTF.OUTSET = PIN4_bm;
    2720:	80 e1       	ldi	r24, 0x10	; 16

void setSS(int which, int level)
{
	if(which == SRAM)
	{
		if(level)
    2722:	67 2b       	or	r22, r23
    2724:	19 f0       	breq	.+6      	; 0x272c <setSS+0x10>
		{
			PORTF.OUTSET = PIN4_bm;
    2726:	80 93 a5 06 	sts	0x06A5, r24
    272a:	08 95       	ret
		}
		else
		{
			PORTF.OUTCLR = PIN4_bm;	
    272c:	80 93 a6 06 	sts	0x06A6, r24
    2730:	08 95       	ret
	}
	else
	{
		if(level)
		{
			PORTE.OUTSET = PIN4_bm;
    2732:	80 e1       	ldi	r24, 0x10	; 16
			PORTF.OUTCLR = PIN4_bm;	
		}
	}
	else
	{
		if(level)
    2734:	67 2b       	or	r22, r23
    2736:	19 f0       	breq	.+6      	; 0x273e <setSS+0x22>
		{
			PORTE.OUTSET = PIN4_bm;
    2738:	80 93 85 06 	sts	0x0685, r24
    273c:	08 95       	ret
		}
		else
		{
			PORTE.OUTCLR = PIN4_bm;	
    273e:	80 93 86 06 	sts	0x0686, r24
    2742:	08 95       	ret

00002744 <readExtMem>:
	
	}
}

int readExtMem(int which, int start, char * buf, int length)
{
    2744:	ef 92       	push	r14
    2746:	ff 92       	push	r15
    2748:	0f 93       	push	r16
    274a:	1f 93       	push	r17
    274c:	cf 93       	push	r28
    274e:	df 93       	push	r29
    2750:	eb 01       	movw	r28, r22
    2752:	8a 01       	movw	r16, r20
    2754:	79 01       	movw	r14, r18
	if(which == SRAM)
    2756:	01 97       	sbiw	r24, 0x01	; 1
    2758:	f1 f4       	brne	.+60     	; 0x2796 <readExtMem+0x52>
		{
			PORTF.OUTSET = PIN4_bm;
		}
		else
		{
			PORTF.OUTCLR = PIN4_bm;	
    275a:	80 e1       	ldi	r24, 0x10	; 16
    275c:	80 93 a6 06 	sts	0x06A6, r24
	{
		int i;
		
		setSS(SRAM, 0);
		
		spiTxRx(SRAM_READ);
    2760:	83 e0       	ldi	r24, 0x03	; 3
    2762:	0e 94 85 13 	call	0x270a	; 0x270a <spiTxRx>
		spiTxRx((start >> 8) & 0x00FF);
    2766:	8d 2f       	mov	r24, r29
    2768:	0e 94 85 13 	call	0x270a	; 0x270a <spiTxRx>
		spiTxRx(start & 0x00FF);
    276c:	8c 2f       	mov	r24, r28
    276e:	0e 94 85 13 	call	0x270a	; 0x270a <spiTxRx>
    2772:	e8 01       	movw	r28, r16
		
		for(i = 0; i < length; ++i)
    2774:	06 c0       	rjmp	.+12     	; 0x2782 <readExtMem+0x3e>
		{
			buf[i] = spiTxRx(0);
    2776:	80 e0       	ldi	r24, 0x00	; 0
    2778:	0e 94 85 13 	call	0x270a	; 0x270a <spiTxRx>
    277c:	f8 01       	movw	r30, r16
    277e:	81 93       	st	Z+, r24
    2780:	8f 01       	movw	r16, r30
		}	
	
	}
}

int readExtMem(int which, int start, char * buf, int length)
    2782:	c8 01       	movw	r24, r16
    2784:	8c 1b       	sub	r24, r28
    2786:	9d 0b       	sbc	r25, r29
		
		spiTxRx(SRAM_READ);
		spiTxRx((start >> 8) & 0x00FF);
		spiTxRx(start & 0x00FF);
		
		for(i = 0; i < length; ++i)
    2788:	8e 15       	cp	r24, r14
    278a:	9f 05       	cpc	r25, r15
    278c:	a4 f3       	brlt	.-24     	; 0x2776 <readExtMem+0x32>
{
	if(which == SRAM)
	{
		if(level)
		{
			PORTF.OUTSET = PIN4_bm;
    278e:	80 e1       	ldi	r24, 0x10	; 16
    2790:	80 93 a5 06 	sts	0x06A5, r24
    2794:	26 c0       	rjmp	.+76     	; 0x27e2 <readExtMem+0x9e>
		{
			PORTE.OUTSET = PIN4_bm;
		}
		else
		{
			PORTE.OUTCLR = PIN4_bm;	
    2796:	80 e1       	ldi	r24, 0x10	; 16
    2798:	80 93 86 06 	sts	0x0686, r24
	{
		int i;
		
		setSS(FLASH, 0);
		
		spiTxRx(FLASH_BF1RD);
    279c:	84 ed       	ldi	r24, 0xD4	; 212
    279e:	0e 94 85 13 	call	0x270a	; 0x270a <spiTxRx>
		spiTxRx(0x00);
    27a2:	80 e0       	ldi	r24, 0x00	; 0
    27a4:	0e 94 85 13 	call	0x270a	; 0x270a <spiTxRx>
		spiTxRx((start & 0x0300) >> 8);
    27a8:	ce 01       	movw	r24, r28
    27aa:	88 27       	eor	r24, r24
    27ac:	93 70       	andi	r25, 0x03	; 3
    27ae:	89 2f       	mov	r24, r25
    27b0:	0e 94 85 13 	call	0x270a	; 0x270a <spiTxRx>
		spiTxRx(start & 0x00FF);
    27b4:	8c 2f       	mov	r24, r28
    27b6:	0e 94 85 13 	call	0x270a	; 0x270a <spiTxRx>
		spiTxRx(0x00);
    27ba:	80 e0       	ldi	r24, 0x00	; 0
    27bc:	0e 94 85 13 	call	0x270a	; 0x270a <spiTxRx>
    27c0:	e8 01       	movw	r28, r16
		
		for(i = 0; i < length; ++i)
    27c2:	06 c0       	rjmp	.+12     	; 0x27d0 <readExtMem+0x8c>
		{
			buf[i] = spiTxRx(0);
    27c4:	80 e0       	ldi	r24, 0x00	; 0
    27c6:	0e 94 85 13 	call	0x270a	; 0x270a <spiTxRx>
    27ca:	f8 01       	movw	r30, r16
    27cc:	81 93       	st	Z+, r24
    27ce:	8f 01       	movw	r16, r30
		}	
	
	}
}

int readExtMem(int which, int start, char * buf, int length)
    27d0:	c8 01       	movw	r24, r16
    27d2:	8c 1b       	sub	r24, r28
    27d4:	9d 0b       	sbc	r25, r29
		spiTxRx(0x00);
		spiTxRx((start & 0x0300) >> 8);
		spiTxRx(start & 0x00FF);
		spiTxRx(0x00);
		
		for(i = 0; i < length; ++i)
    27d6:	8e 15       	cp	r24, r14
    27d8:	9f 05       	cpc	r25, r15
    27da:	a4 f3       	brlt	.-24     	; 0x27c4 <readExtMem+0x80>
	}
	else
	{
		if(level)
		{
			PORTE.OUTSET = PIN4_bm;
    27dc:	80 e1       	ldi	r24, 0x10	; 16
    27de:	80 93 85 06 	sts	0x0685, r24
		
		setSS(FLASH, 1);	
		
		return 1;
	}
}
    27e2:	81 e0       	ldi	r24, 0x01	; 1
    27e4:	90 e0       	ldi	r25, 0x00	; 0
    27e6:	df 91       	pop	r29
    27e8:	cf 91       	pop	r28
    27ea:	1f 91       	pop	r17
    27ec:	0f 91       	pop	r16
    27ee:	ff 90       	pop	r15
    27f0:	ef 90       	pop	r14
    27f2:	08 95       	ret

000027f4 <writeExtMem>:

int writeExtMem(int which, int start, char * buf, int length)
{
    27f4:	ef 92       	push	r14
    27f6:	ff 92       	push	r15
    27f8:	0f 93       	push	r16
    27fa:	1f 93       	push	r17
    27fc:	cf 93       	push	r28
    27fe:	df 93       	push	r29
    2800:	eb 01       	movw	r28, r22
    2802:	8a 01       	movw	r16, r20
    2804:	79 01       	movw	r14, r18
	if(which == SRAM)
    2806:	01 97       	sbiw	r24, 0x01	; 1
    2808:	e9 f4       	brne	.+58     	; 0x2844 <writeExtMem+0x50>
		{
			PORTF.OUTSET = PIN4_bm;
		}
		else
		{
			PORTF.OUTCLR = PIN4_bm;	
    280a:	80 e1       	ldi	r24, 0x10	; 16
    280c:	80 93 a6 06 	sts	0x06A6, r24
	{
		int i;
		
		setSS(SRAM, 0);
		
		spiTxRx(SRAM_WRITE);
    2810:	82 e0       	ldi	r24, 0x02	; 2
    2812:	0e 94 85 13 	call	0x270a	; 0x270a <spiTxRx>
		spiTxRx((start >> 8) & 0x00FF);
    2816:	8d 2f       	mov	r24, r29
    2818:	0e 94 85 13 	call	0x270a	; 0x270a <spiTxRx>
		spiTxRx(start & 0x00FF);
    281c:	8c 2f       	mov	r24, r28
    281e:	0e 94 85 13 	call	0x270a	; 0x270a <spiTxRx>
    2822:	e8 01       	movw	r28, r16
		
		for(i = 0; i < length; ++i)
    2824:	05 c0       	rjmp	.+10     	; 0x2830 <writeExtMem+0x3c>
		{
			spiTxRx(buf[i]);
    2826:	f8 01       	movw	r30, r16
    2828:	81 91       	ld	r24, Z+
    282a:	8f 01       	movw	r16, r30
    282c:	0e 94 85 13 	call	0x270a	; 0x270a <spiTxRx>
		
		return 1;
	}
}

int writeExtMem(int which, int start, char * buf, int length)
    2830:	c8 01       	movw	r24, r16
    2832:	8c 1b       	sub	r24, r28
    2834:	9d 0b       	sbc	r25, r29
		
		spiTxRx(SRAM_WRITE);
		spiTxRx((start >> 8) & 0x00FF);
		spiTxRx(start & 0x00FF);
		
		for(i = 0; i < length; ++i)
    2836:	8e 15       	cp	r24, r14
    2838:	9f 05       	cpc	r25, r15
    283a:	ac f3       	brlt	.-22     	; 0x2826 <writeExtMem+0x32>
{
	if(which == SRAM)
	{
		if(level)
		{
			PORTF.OUTSET = PIN4_bm;
    283c:	80 e1       	ldi	r24, 0x10	; 16
    283e:	80 93 a5 06 	sts	0x06A5, r24
    2842:	22 c0       	rjmp	.+68     	; 0x2888 <writeExtMem+0x94>
		{
			PORTE.OUTSET = PIN4_bm;
		}
		else
		{
			PORTE.OUTCLR = PIN4_bm;	
    2844:	80 e1       	ldi	r24, 0x10	; 16
    2846:	80 93 86 06 	sts	0x0686, r24
	{
		int i;
		
		setSS(FLASH, 0);
		
		spiTxRx(FLASH_BF1WR);
    284a:	84 e8       	ldi	r24, 0x84	; 132
    284c:	0e 94 85 13 	call	0x270a	; 0x270a <spiTxRx>
		spiTxRx(0x00);
    2850:	80 e0       	ldi	r24, 0x00	; 0
    2852:	0e 94 85 13 	call	0x270a	; 0x270a <spiTxRx>
		spiTxRx((start & 0x0300) >> 8);
    2856:	ce 01       	movw	r24, r28
    2858:	88 27       	eor	r24, r24
    285a:	93 70       	andi	r25, 0x03	; 3
    285c:	89 2f       	mov	r24, r25
    285e:	0e 94 85 13 	call	0x270a	; 0x270a <spiTxRx>
		spiTxRx(start & 0x00FF);
    2862:	8c 2f       	mov	r24, r28
    2864:	0e 94 85 13 	call	0x270a	; 0x270a <spiTxRx>
    2868:	e8 01       	movw	r28, r16
		
		for(i = 0; i < length; ++i)
    286a:	05 c0       	rjmp	.+10     	; 0x2876 <writeExtMem+0x82>
		{
			spiTxRx(buf[i]);
    286c:	f8 01       	movw	r30, r16
    286e:	81 91       	ld	r24, Z+
    2870:	8f 01       	movw	r16, r30
    2872:	0e 94 85 13 	call	0x270a	; 0x270a <spiTxRx>
		
		return 1;
	}
}

int writeExtMem(int which, int start, char * buf, int length)
    2876:	c8 01       	movw	r24, r16
    2878:	8c 1b       	sub	r24, r28
    287a:	9d 0b       	sbc	r25, r29
		spiTxRx(FLASH_BF1WR);
		spiTxRx(0x00);
		spiTxRx((start & 0x0300) >> 8);
		spiTxRx(start & 0x00FF);
		
		for(i = 0; i < length; ++i)
    287c:	8e 15       	cp	r24, r14
    287e:	9f 05       	cpc	r25, r15
    2880:	ac f3       	brlt	.-22     	; 0x286c <writeExtMem+0x78>
	}
	else
	{
		if(level)
		{
			PORTE.OUTSET = PIN4_bm;
    2882:	80 e1       	ldi	r24, 0x10	; 16
    2884:	80 93 85 06 	sts	0x0685, r24
		
		return 1;
	}


}
    2888:	81 e0       	ldi	r24, 0x01	; 1
    288a:	90 e0       	ldi	r25, 0x00	; 0
    288c:	df 91       	pop	r29
    288e:	cf 91       	pop	r28
    2890:	1f 91       	pop	r17
    2892:	0f 91       	pop	r16
    2894:	ff 90       	pop	r15
    2896:	ef 90       	pop	r14
    2898:	08 95       	ret

0000289a <initFlash>:



void initFlash()
{
    289a:	08 95       	ret

0000289c <initSRAM>:

}

void initSRAM()
{
    289c:	1f 93       	push	r17
    289e:	cf 93       	push	r28
    28a0:	df 93       	push	r29
		{
			PORTF.OUTSET = PIN4_bm;
		}
		else
		{
			PORTF.OUTCLR = PIN4_bm;	
    28a2:	c0 ea       	ldi	r28, 0xA0	; 160
    28a4:	d6 e0       	ldi	r29, 0x06	; 6
    28a6:	10 e1       	ldi	r17, 0x10	; 16
    28a8:	1e 83       	std	Y+6, r17	; 0x06

void initSRAM()
{
		setSS(SRAM, 0);
		
		spiTxRx(SRAM_WRSR);
    28aa:	81 e0       	ldi	r24, 0x01	; 1
    28ac:	0e 94 85 13 	call	0x270a	; 0x270a <spiTxRx>
		spiTxRx(0x41);	// set mode to sequential, disable HOLD feature
    28b0:	81 e4       	ldi	r24, 0x41	; 65
    28b2:	0e 94 85 13 	call	0x270a	; 0x270a <spiTxRx>
{
	if(which == SRAM)
	{
		if(level)
		{
			PORTF.OUTSET = PIN4_bm;
    28b6:	1d 83       	std	Y+5, r17	; 0x05
		}
		else
		{
			PORTF.OUTCLR = PIN4_bm;	
    28b8:	1e 83       	std	Y+6, r17	; 0x06
	
	{
		uint8_t val;
		setSS(SRAM, 0);
		
		spiTxRx(SRAM_RDSR);
    28ba:	85 e0       	ldi	r24, 0x05	; 5
    28bc:	0e 94 85 13 	call	0x270a	; 0x270a <spiTxRx>
		val = spiTxRx(0x0);	// set mode to sequential, disable HOLD feature
    28c0:	80 e0       	ldi	r24, 0x00	; 0
    28c2:	0e 94 85 13 	call	0x270a	; 0x270a <spiTxRx>
{
	if(which == SRAM)
	{
		if(level)
		{
			PORTF.OUTSET = PIN4_bm;
    28c6:	1d 83       	std	Y+5, r17	; 0x05
		spiTxRx(SRAM_RDSR);
		val = spiTxRx(0x0);	// set mode to sequential, disable HOLD feature
		
		setSS(SRAM, 1);			
		
		printf("SR is: %x\r\n",val);
    28c8:	1f 92       	push	r1
    28ca:	8f 93       	push	r24
    28cc:	86 e1       	ldi	r24, 0x16	; 22
    28ce:	91 e2       	ldi	r25, 0x21	; 33
    28d0:	9f 93       	push	r25
    28d2:	8f 93       	push	r24
    28d4:	0e 94 e6 28 	call	0x51cc	; 0x51cc <printf>
    28d8:	0f 90       	pop	r0
    28da:	0f 90       	pop	r0
    28dc:	0f 90       	pop	r0
    28de:	0f 90       	pop	r0
	}
}
    28e0:	df 91       	pop	r29
    28e2:	cf 91       	pop	r28
    28e4:	1f 91       	pop	r17
    28e6:	08 95       	ret

000028e8 <initExtMem>:

void initExtMem()
{
	PORTE.OUTSET = PIN4_bm;
    28e8:	e0 e8       	ldi	r30, 0x80	; 128
    28ea:	f6 e0       	ldi	r31, 0x06	; 6
    28ec:	80 e1       	ldi	r24, 0x10	; 16
    28ee:	85 83       	std	Z+5, r24	; 0x05
	PORTE.DIRSET = PIN4_bm;
    28f0:	81 83       	std	Z+1, r24	; 0x01

	// set !SS1 lhigh
	PORTF.OUTSET = PIN4_bm;
    28f2:	a0 ea       	ldi	r26, 0xA0	; 160
    28f4:	b6 e0       	ldi	r27, 0x06	; 6
    28f6:	15 96       	adiw	r26, 0x05	; 5
    28f8:	8c 93       	st	X, r24
    28fa:	15 97       	sbiw	r26, 0x05	; 5
	PORTF.DIRSET = PIN4_bm;
    28fc:	11 96       	adiw	r26, 0x01	; 1
    28fe:	8c 93       	st	X, r24


	PORTE.DIRSET = PIN5_bm | PIN7_bm;	// !ss/mosi/sck as output
    2900:	80 ea       	ldi	r24, 0xA0	; 160
    2902:	81 83       	std	Z+1, r24	; 0x01
	PORTE.DIRCLR = PIN6_bm;				// miso as input
    2904:	80 e4       	ldi	r24, 0x40	; 64
    2906:	82 83       	std	Z+2, r24	; 0x02

	SPIE.CTRL = SPI_ENABLE_bm | SPI_MASTER_bm;	//mode 0, clock/4
    2908:	80 e5       	ldi	r24, 0x50	; 80
    290a:	80 93 c0 0a 	sts	0x0AC0, r24

	initFlash();
	initSRAM();
    290e:	0c 94 4e 14 	jmp	0x289c	; 0x289c <initSRAM>

00002912 <newHWAccelData>:
TWI_Master_t twiMaster;
extern AccelData _acc;

int newHWAccelData()
{
	return (twiMaster.result == TWIM_RESULT_OK && twiMaster.status == TWIM_STATUS_READY);
    2912:	80 91 9d 26 	lds	r24, 0x269D
    2916:	81 30       	cpi	r24, 0x01	; 1
    2918:	31 f4       	brne	.+12     	; 0x2926 <newHWAccelData+0x14>
    291a:	80 91 9c 26 	lds	r24, 0x269C
    291e:	21 e0       	ldi	r18, 0x01	; 1
    2920:	30 e0       	ldi	r19, 0x00	; 0
    2922:	88 23       	and	r24, r24
    2924:	11 f0       	breq	.+4      	; 0x292a <newHWAccelData+0x18>
    2926:	20 e0       	ldi	r18, 0x00	; 0
    2928:	30 e0       	ldi	r19, 0x00	; 0
}
    292a:	c9 01       	movw	r24, r18
    292c:	08 95       	ret

0000292e <updateHWAccel>:

// this is currently non-blocking.
void updateHWAccel()
{
    292e:	cf 93       	push	r28
	if(twiMaster.result == TWIM_RESULT_OK && twiMaster.status == TWIM_STATUS_READY)
    2930:	80 91 9d 26 	lds	r24, 0x269D
    2934:	81 30       	cpi	r24, 0x01	; 1
    2936:	09 f0       	breq	.+2      	; 0x293a <updateHWAccel+0xc>
    2938:	4b c0       	rjmp	.+150    	; 0x29d0 <updateHWAccel+0xa2>
    293a:	80 91 9c 26 	lds	r24, 0x269C
    293e:	81 11       	cpse	r24, r1
    2940:	47 c0       	rjmp	.+142    	; 0x29d0 <updateHWAccel+0xa2>
	{ 
		byte oldstatus = _acc.status & ACC_O_MASK;
    2942:	c0 91 45 21 	lds	r28, 0x2145
		
		// I2C reads in as unsigned - we need to convert back to 2s complement (+- 32)
		_acc.x = (Angle)(twiMaster.readData[0] << 2) >> 2;
    2946:	80 91 94 26 	lds	r24, 0x2694
    294a:	24 e0       	ldi	r18, 0x04	; 4
    294c:	82 9f       	mul	r24, r18
    294e:	c0 01       	movw	r24, r0
    2950:	11 24       	eor	r1, r1
    2952:	85 95       	asr	r24
    2954:	85 95       	asr	r24
    2956:	80 93 42 21 	sts	0x2142, r24
		_acc.y = (Angle)(twiMaster.readData[1] << 2) >> 2;
    295a:	80 91 95 26 	lds	r24, 0x2695
    295e:	24 e0       	ldi	r18, 0x04	; 4
    2960:	82 9f       	mul	r24, r18
    2962:	c0 01       	movw	r24, r0
    2964:	11 24       	eor	r1, r1
    2966:	85 95       	asr	r24
    2968:	85 95       	asr	r24
    296a:	80 93 43 21 	sts	0x2143, r24
		_acc.z = (Angle)(twiMaster.readData[2] << 2) >> 2;
    296e:	80 91 96 26 	lds	r24, 0x2696
    2972:	24 e0       	ldi	r18, 0x04	; 4
    2974:	82 9f       	mul	r24, r18
    2976:	c0 01       	movw	r24, r0
    2978:	11 24       	eor	r1, r1
    297a:	85 95       	asr	r24
    297c:	85 95       	asr	r24
    297e:	80 93 44 21 	sts	0x2144, r24
		_acc.status = twiMaster.readData[3];
    2982:	80 91 97 26 	lds	r24, 0x2697
    2986:	80 93 45 21 	sts	0x2145, r24
		
		twiMaster.result = TWIM_RESULT_UNKNOWN;
    298a:	10 92 9d 26 	sts	0x269D, r1
		
		// if superceding event isn't registered, register sub-events, if necessary
		if(!triggerHandler(EVENT_ACCEL_CHANGE))
    298e:	8b e0       	ldi	r24, 0x0B	; 11
    2990:	0e 94 7a 07 	call	0xef4	; 0xef4 <triggerHandler>
    2994:	89 2b       	or	r24, r25
    2996:	e1 f4       	brne	.+56     	; 0x29d0 <updateHWAccel+0xa2>
		{
			if(_acc.status & ACC_TAP)
    2998:	80 91 45 21 	lds	r24, 0x2145
    299c:	85 ff       	sbrs	r24, 5
    299e:	03 c0       	rjmp	.+6      	; 0x29a6 <updateHWAccel+0x78>
			{
				triggerHandler(EVENT_ACCEL_TAP);
    29a0:	8c e0       	ldi	r24, 0x0C	; 12
    29a2:	0e 94 7a 07 	call	0xef4	; 0xef4 <triggerHandler>
			}	
			if(_acc.status & ACC_SHAKE)
    29a6:	80 91 45 21 	lds	r24, 0x2145
    29aa:	87 ff       	sbrs	r24, 7
    29ac:	03 c0       	rjmp	.+6      	; 0x29b4 <updateHWAccel+0x86>
			{
				triggerHandler(EVENT_ACCEL_SHAKE);
    29ae:	8d e0       	ldi	r24, 0x0D	; 13
    29b0:	0e 94 7a 07 	call	0xef4	; 0xef4 <triggerHandler>
// this is currently non-blocking.
void updateHWAccel()
{
	if(twiMaster.result == TWIM_RESULT_OK && twiMaster.status == TWIM_STATUS_READY)
	{ 
		byte oldstatus = _acc.status & ACC_O_MASK;
    29b4:	cf 71       	andi	r28, 0x1F	; 31
			}	
			if(_acc.status & ACC_SHAKE)
			{
				triggerHandler(EVENT_ACCEL_SHAKE);
			}	
			if(oldstatus != (_acc.status & ACC_O_MASK))
    29b6:	2c 2f       	mov	r18, r28
    29b8:	30 e0       	ldi	r19, 0x00	; 0
    29ba:	80 91 45 21 	lds	r24, 0x2145
    29be:	8f 71       	andi	r24, 0x1F	; 31
    29c0:	90 e0       	ldi	r25, 0x00	; 0
    29c2:	28 17       	cp	r18, r24
    29c4:	39 07       	cpc	r19, r25
    29c6:	21 f0       	breq	.+8      	; 0x29d0 <updateHWAccel+0xa2>
			{
				triggerHandler(EVENT_ACCEL_TAP);
    29c8:	8c e0       	ldi	r24, 0x0C	; 12
			}			
		}
	}
}
    29ca:	cf 91       	pop	r28
			{
				triggerHandler(EVENT_ACCEL_SHAKE);
			}	
			if(oldstatus != (_acc.status & ACC_O_MASK))
			{
				triggerHandler(EVENT_ACCEL_TAP);
    29cc:	0c 94 7a 07 	jmp	0xef4	; 0xef4 <triggerHandler>
			}			
		}
	}
}
    29d0:	cf 91       	pop	r28
    29d2:	08 95       	ret

000029d4 <initHWAccel>:

// Doesn't *really* need to be blocking, just checked for success
// TODO: should block? yes no?
void initHWAccel()
{
    29d4:	0f 93       	push	r16
    29d6:	cf 93       	push	r28
    29d8:	df 93       	push	r29
    29da:	1f 92       	push	r1
    29dc:	1f 92       	push	r1
    29de:	cd b7       	in	r28, 0x3d	; 61
    29e0:	de b7       	in	r29, 0x3e	; 62
	/* Initialize TWI master. */
	TWI_MasterInit(&twiMaster,
    29e2:	2b e9       	ldi	r18, 0x9B	; 155
    29e4:	40 e4       	ldi	r20, 0x40	; 64
    29e6:	60 ea       	ldi	r22, 0xA0	; 160
    29e8:	74 e0       	ldi	r23, 0x04	; 4
    29ea:	8d e8       	ldi	r24, 0x8D	; 141
    29ec:	96 e2       	ldi	r25, 0x26	; 38
    29ee:	0e 94 00 1f 	call	0x3e00	; 0x3e00 <TWI_MasterInit>

	// prepare configuration data for the accelerometer
	byte buf[2];

	// set mode to STANDBY if it isn't already (can't update registers in ACTIVE mode!)
	buf[0] = 0x07;
    29f2:	87 e0       	ldi	r24, 0x07	; 7
    29f4:	89 83       	std	Y+1, r24	; 0x01
	buf[1] = 0x18;
    29f6:	88 e1       	ldi	r24, 0x18	; 24
    29f8:	8a 83       	std	Y+2, r24	; 0x02
	TWI_MasterWriteRead(&twiMaster, ACCEL_I2C_ADDR, buf, 2, 0);
    29fa:	00 e0       	ldi	r16, 0x00	; 0
    29fc:	22 e0       	ldi	r18, 0x02	; 2
    29fe:	ae 01       	movw	r20, r28
    2a00:	4f 5f       	subi	r20, 0xFF	; 255
    2a02:	5f 4f       	sbci	r21, 0xFF	; 255
    2a04:	6c e4       	ldi	r22, 0x4C	; 76
    2a06:	8d e8       	ldi	r24, 0x8D	; 141
    2a08:	96 e2       	ldi	r25, 0x26	; 38
    2a0a:	0e 94 1b 1f 	call	0x3e36	; 0x3e36 <TWI_MasterWriteRead>
	while (twiMaster.status != TWIM_STATUS_READY);
    2a0e:	80 91 9c 26 	lds	r24, 0x269C
    2a12:	81 11       	cpse	r24, r1
    2a14:	fc cf       	rjmp	.-8      	; 0x2a0e <initHWAccel+0x3a>

	// set sleep mode
	buf[0] = 0x05;
    2a16:	85 e0       	ldi	r24, 0x05	; 5
    2a18:	89 83       	std	Y+1, r24	; 0x01
	buf[1] = 0x00;	// no sleep
    2a1a:	1a 82       	std	Y+2, r1	; 0x02
	TWI_MasterWriteRead(&twiMaster, ACCEL_I2C_ADDR, buf, 2, 0);
    2a1c:	00 e0       	ldi	r16, 0x00	; 0
    2a1e:	22 e0       	ldi	r18, 0x02	; 2
    2a20:	ae 01       	movw	r20, r28
    2a22:	4f 5f       	subi	r20, 0xFF	; 255
    2a24:	5f 4f       	sbci	r21, 0xFF	; 255
    2a26:	6c e4       	ldi	r22, 0x4C	; 76
    2a28:	8d e8       	ldi	r24, 0x8D	; 141
    2a2a:	96 e2       	ldi	r25, 0x26	; 38
    2a2c:	0e 94 1b 1f 	call	0x3e36	; 0x3e36 <TWI_MasterWriteRead>
	while (twiMaster.status != TWIM_STATUS_READY);
    2a30:	80 91 9c 26 	lds	r24, 0x269C
    2a34:	81 11       	cpse	r24, r1
    2a36:	fc cf       	rjmp	.-8      	; 0x2a30 <initHWAccel+0x5c>

	// set interrupts
	buf[0] = 0x06;
    2a38:	86 e0       	ldi	r24, 0x06	; 6
    2a3a:	89 83       	std	Y+1, r24	; 0x01
	buf[1] = 0x07;	// 0x06 Interrupt Setup Register -> PDINT | PLINT | FBINT
    2a3c:	87 e0       	ldi	r24, 0x07	; 7
    2a3e:	8a 83       	std	Y+2, r24	; 0x02
	TWI_MasterWriteRead(&twiMaster, ACCEL_I2C_ADDR, buf, 2, 0);
    2a40:	00 e0       	ldi	r16, 0x00	; 0
    2a42:	22 e0       	ldi	r18, 0x02	; 2
    2a44:	ae 01       	movw	r20, r28
    2a46:	4f 5f       	subi	r20, 0xFF	; 255
    2a48:	5f 4f       	sbci	r21, 0xFF	; 255
    2a4a:	6c e4       	ldi	r22, 0x4C	; 76
    2a4c:	8d e8       	ldi	r24, 0x8D	; 141
    2a4e:	96 e2       	ldi	r25, 0x26	; 38
    2a50:	0e 94 1b 1f 	call	0x3e36	; 0x3e36 <TWI_MasterWriteRead>
	while (twiMaster.status != TWIM_STATUS_READY);
    2a54:	80 91 9c 26 	lds	r24, 0x269C
    2a58:	81 11       	cpse	r24, r1
    2a5a:	fc cf       	rjmp	.-8      	; 0x2a54 <initHWAccel+0x80>

	// set filter rate
	buf[0] = 0x08;
    2a5c:	88 e0       	ldi	r24, 0x08	; 8
    2a5e:	89 83       	std	Y+1, r24	; 0x01
	buf[1] = 0xE0;	// 0x08 Sample Register -> Fil[0:2]
    2a60:	80 ee       	ldi	r24, 0xE0	; 224
    2a62:	8a 83       	std	Y+2, r24	; 0x02
	TWI_MasterWriteRead(&twiMaster, ACCEL_I2C_ADDR, buf, 2, 0);
    2a64:	00 e0       	ldi	r16, 0x00	; 0
    2a66:	22 e0       	ldi	r18, 0x02	; 2
    2a68:	ae 01       	movw	r20, r28
    2a6a:	4f 5f       	subi	r20, 0xFF	; 255
    2a6c:	5f 4f       	sbci	r21, 0xFF	; 255
    2a6e:	6c e4       	ldi	r22, 0x4C	; 76
    2a70:	8d e8       	ldi	r24, 0x8D	; 141
    2a72:	96 e2       	ldi	r25, 0x26	; 38
    2a74:	0e 94 1b 1f 	call	0x3e36	; 0x3e36 <TWI_MasterWriteRead>
	while (twiMaster.status != TWIM_STATUS_READY);
    2a78:	80 91 9c 26 	lds	r24, 0x269C
    2a7c:	81 11       	cpse	r24, r1
    2a7e:	fc cf       	rjmp	.-8      	; 0x2a78 <initHWAccel+0xa4>
	
	// set tap detection
	buf[0] = 0x09;
    2a80:	89 e0       	ldi	r24, 0x09	; 9
    2a82:	89 83       	std	Y+1, r24	; 0x01
	buf[1] = 0x10;	// 0x09	Pulse detection -> +- 4 counts
    2a84:	80 e1       	ldi	r24, 0x10	; 16
    2a86:	8a 83       	std	Y+2, r24	; 0x02
	TWI_MasterWriteRead(&twiMaster, ACCEL_I2C_ADDR, buf, 2, 0);
    2a88:	00 e0       	ldi	r16, 0x00	; 0
    2a8a:	22 e0       	ldi	r18, 0x02	; 2
    2a8c:	ae 01       	movw	r20, r28
    2a8e:	4f 5f       	subi	r20, 0xFF	; 255
    2a90:	5f 4f       	sbci	r21, 0xFF	; 255
    2a92:	6c e4       	ldi	r22, 0x4C	; 76
    2a94:	8d e8       	ldi	r24, 0x8D	; 141
    2a96:	96 e2       	ldi	r25, 0x26	; 38
    2a98:	0e 94 1b 1f 	call	0x3e36	; 0x3e36 <TWI_MasterWriteRead>
	while (twiMaster.status != TWIM_STATUS_READY);
    2a9c:	80 91 9c 26 	lds	r24, 0x269C
    2aa0:	81 11       	cpse	r24, r1
    2aa2:	fc cf       	rjmp	.-8      	; 0x2a9c <initHWAccel+0xc8>

	// set tap debounce
	buf[0] = 0x0A;
    2aa4:	8a e0       	ldi	r24, 0x0A	; 10
    2aa6:	89 83       	std	Y+1, r24	; 0x01
	buf[1] = 0x10;	// 0x0A Tap debounce ->	4 detections
    2aa8:	80 e1       	ldi	r24, 0x10	; 16
    2aaa:	8a 83       	std	Y+2, r24	; 0x02
	TWI_MasterWriteRead(&twiMaster, ACCEL_I2C_ADDR, buf, 2, 0);
    2aac:	00 e0       	ldi	r16, 0x00	; 0
    2aae:	22 e0       	ldi	r18, 0x02	; 2
    2ab0:	ae 01       	movw	r20, r28
    2ab2:	4f 5f       	subi	r20, 0xFF	; 255
    2ab4:	5f 4f       	sbci	r21, 0xFF	; 255
    2ab6:	6c e4       	ldi	r22, 0x4C	; 76
    2ab8:	8d e8       	ldi	r24, 0x8D	; 141
    2aba:	96 e2       	ldi	r25, 0x26	; 38
    2abc:	0e 94 1b 1f 	call	0x3e36	; 0x3e36 <TWI_MasterWriteRead>
	while (twiMaster.status != TWIM_STATUS_READY);	
    2ac0:	80 91 9c 26 	lds	r24, 0x269C
    2ac4:	81 11       	cpse	r24, r1
    2ac6:	fc cf       	rjmp	.-8      	; 0x2ac0 <initHWAccel+0xec>
	
	// enable the accelerometer
	buf[0] = 0x07;
    2ac8:	87 e0       	ldi	r24, 0x07	; 7
    2aca:	89 83       	std	Y+1, r24	; 0x01
	buf[1] = 0x19;
    2acc:	89 e1       	ldi	r24, 0x19	; 25
    2ace:	8a 83       	std	Y+2, r24	; 0x02
	TWI_MasterWriteRead(&twiMaster, ACCEL_I2C_ADDR, buf, 2, 0);
    2ad0:	00 e0       	ldi	r16, 0x00	; 0
    2ad2:	22 e0       	ldi	r18, 0x02	; 2
    2ad4:	ae 01       	movw	r20, r28
    2ad6:	4f 5f       	subi	r20, 0xFF	; 255
    2ad8:	5f 4f       	sbci	r21, 0xFF	; 255
    2ada:	6c e4       	ldi	r22, 0x4C	; 76
    2adc:	8d e8       	ldi	r24, 0x8D	; 141
    2ade:	96 e2       	ldi	r25, 0x26	; 38
    2ae0:	0e 94 1b 1f 	call	0x3e36	; 0x3e36 <TWI_MasterWriteRead>
	while (twiMaster.status != TWIM_STATUS_READY);
    2ae4:	80 91 9c 26 	lds	r24, 0x269C
    2ae8:	81 11       	cpse	r24, r1
    2aea:	fc cf       	rjmp	.-8      	; 0x2ae4 <initHWAccel+0x110>
	
	// set up input/interrupt to detect acceleromter IRQs
	PORTB.DIRCLR = PIN0_bm;					// set Pin0 as input
    2aec:	81 e0       	ldi	r24, 0x01	; 1
    2aee:	80 93 22 06 	sts	0x0622, r24
	PORTB.PIN0CTRL = PORT_OPC_PULLUP_gc | PORT_ISC_FALLING_gc;	// set pullup, trigger interrupt on falling edge
    2af2:	9a e1       	ldi	r25, 0x1A	; 26
    2af4:	90 93 30 06 	sts	0x0630, r25
	PORTB.INT0MASK = PIN0_bm;				// enable PIN0 to trigger INT0
    2af8:	80 93 2a 06 	sts	0x062A, r24
	PORTB.INTCTRL = PORT_INT0LVL_LO_gc;		// enable INT0 interrupt on LOW priority
    2afc:	80 93 29 06 	sts	0x0629, r24
}
    2b00:	0f 90       	pop	r0
    2b02:	0f 90       	pop	r0
    2b04:	df 91       	pop	r29
    2b06:	cf 91       	pop	r28
    2b08:	0f 91       	pop	r16
    2b0a:	08 95       	ret

00002b0c <__vector_34>:

// Acceleromter status change detection interrupt
ISR(PORTB_INT0_vect)
{
    2b0c:	1f 92       	push	r1
    2b0e:	0f 92       	push	r0
    2b10:	0f b6       	in	r0, 0x3f	; 63
    2b12:	0f 92       	push	r0
    2b14:	11 24       	eor	r1, r1
    2b16:	0b b6       	in	r0, 0x3b	; 59
    2b18:	0f 92       	push	r0
    2b1a:	0f 93       	push	r16
    2b1c:	2f 93       	push	r18
    2b1e:	3f 93       	push	r19
    2b20:	4f 93       	push	r20
    2b22:	5f 93       	push	r21
    2b24:	6f 93       	push	r22
    2b26:	7f 93       	push	r23
    2b28:	8f 93       	push	r24
    2b2a:	9f 93       	push	r25
    2b2c:	af 93       	push	r26
    2b2e:	bf 93       	push	r27
    2b30:	ef 93       	push	r30
    2b32:	ff 93       	push	r31
    2b34:	cf 93       	push	r28
    2b36:	df 93       	push	r29
    2b38:	1f 92       	push	r1
    2b3a:	cd b7       	in	r28, 0x3d	; 61
    2b3c:	de b7       	in	r29, 0x3e	; 62

	if(twiMaster.status == TWIM_STATUS_READY)
    2b3e:	80 91 9c 26 	lds	r24, 0x269C
    2b42:	81 11       	cpse	r24, r1
    2b44:	0b c0       	rjmp	.+22     	; 0x2b5c <__vector_34+0x50>
	{
		byte buf = 0x00;		// read 4 bytes, starting at 0x00 (x,y,z,status)
    2b46:	19 82       	std	Y+1, r1	; 0x01
		TWI_MasterWriteRead(&twiMaster, ACCEL_I2C_ADDR, &buf, 1, 4);
    2b48:	04 e0       	ldi	r16, 0x04	; 4
    2b4a:	21 e0       	ldi	r18, 0x01	; 1
    2b4c:	ae 01       	movw	r20, r28
    2b4e:	4f 5f       	subi	r20, 0xFF	; 255
    2b50:	5f 4f       	sbci	r21, 0xFF	; 255
    2b52:	6c e4       	ldi	r22, 0x4C	; 76
    2b54:	8d e8       	ldi	r24, 0x8D	; 141
    2b56:	96 e2       	ldi	r25, 0x26	; 38
    2b58:	0e 94 1b 1f 	call	0x3e36	; 0x3e36 <TWI_MasterWriteRead>
	}

}
    2b5c:	0f 90       	pop	r0
    2b5e:	df 91       	pop	r29
    2b60:	cf 91       	pop	r28
    2b62:	ff 91       	pop	r31
    2b64:	ef 91       	pop	r30
    2b66:	bf 91       	pop	r27
    2b68:	af 91       	pop	r26
    2b6a:	9f 91       	pop	r25
    2b6c:	8f 91       	pop	r24
    2b6e:	7f 91       	pop	r23
    2b70:	6f 91       	pop	r22
    2b72:	5f 91       	pop	r21
    2b74:	4f 91       	pop	r20
    2b76:	3f 91       	pop	r19
    2b78:	2f 91       	pop	r18
    2b7a:	0f 91       	pop	r16
    2b7c:	0f 90       	pop	r0
    2b7e:	0b be       	out	0x3b, r0	; 59
    2b80:	0f 90       	pop	r0
    2b82:	0f be       	out	0x3f, r0	; 63
    2b84:	0f 90       	pop	r0
    2b86:	1f 90       	pop	r1
    2b88:	18 95       	reti

00002b8a <__vector_46>:

/*! TWIE Master Interrupt vector. */
ISR(TWIE_TWIM_vect)
{
    2b8a:	1f 92       	push	r1
    2b8c:	0f 92       	push	r0
    2b8e:	0f b6       	in	r0, 0x3f	; 63
    2b90:	0f 92       	push	r0
    2b92:	11 24       	eor	r1, r1
    2b94:	0b b6       	in	r0, 0x3b	; 59
    2b96:	0f 92       	push	r0
    2b98:	2f 93       	push	r18
    2b9a:	3f 93       	push	r19
    2b9c:	4f 93       	push	r20
    2b9e:	5f 93       	push	r21
    2ba0:	6f 93       	push	r22
    2ba2:	7f 93       	push	r23
    2ba4:	8f 93       	push	r24
    2ba6:	9f 93       	push	r25
    2ba8:	af 93       	push	r26
    2baa:	bf 93       	push	r27
    2bac:	ef 93       	push	r30
    2bae:	ff 93       	push	r31

	TWI_MasterInterruptHandler(&twiMaster);
    2bb0:	8d e8       	ldi	r24, 0x8D	; 141
    2bb2:	96 e2       	ldi	r25, 0x26	; 38
    2bb4:	0e 94 cb 1f 	call	0x3f96	; 0x3f96 <TWI_MasterInterruptHandler>
}
    2bb8:	ff 91       	pop	r31
    2bba:	ef 91       	pop	r30
    2bbc:	bf 91       	pop	r27
    2bbe:	af 91       	pop	r26
    2bc0:	9f 91       	pop	r25
    2bc2:	8f 91       	pop	r24
    2bc4:	7f 91       	pop	r23
    2bc6:	6f 91       	pop	r22
    2bc8:	5f 91       	pop	r21
    2bca:	4f 91       	pop	r20
    2bcc:	3f 91       	pop	r19
    2bce:	2f 91       	pop	r18
    2bd0:	0f 90       	pop	r0
    2bd2:	0b be       	out	0x3b, r0	; 59
    2bd4:	0f 90       	pop	r0
    2bd6:	0f be       	out	0x3f, r0	; 63
    2bd8:	0f 90       	pop	r0
    2bda:	1f 90       	pop	r1
    2bdc:	18 95       	reti

00002bde <setAccelRegister>:

// helper function to setup accelerometer registers
void setAccelRegister(byte one, byte two)
{
    2bde:	0f 93       	push	r16
    2be0:	cf 93       	push	r28
    2be2:	df 93       	push	r29
    2be4:	1f 92       	push	r1
    2be6:	1f 92       	push	r1
    2be8:	cd b7       	in	r28, 0x3d	; 61
    2bea:	de b7       	in	r29, 0x3e	; 62
    byte buf[2];

    buf[0] = one;
    2bec:	89 83       	std	Y+1, r24	; 0x01
    buf[1] = two;
    2bee:	6a 83       	std	Y+2, r22	; 0x02
    
    TWI_MasterWriteRead(&twiMaster, ACCEL_I2C_ADDR, buf, 2, 0);
    2bf0:	00 e0       	ldi	r16, 0x00	; 0
    2bf2:	22 e0       	ldi	r18, 0x02	; 2
    2bf4:	ae 01       	movw	r20, r28
    2bf6:	4f 5f       	subi	r20, 0xFF	; 255
    2bf8:	5f 4f       	sbci	r21, 0xFF	; 255
    2bfa:	6c e4       	ldi	r22, 0x4C	; 76
    2bfc:	8d e8       	ldi	r24, 0x8D	; 141
    2bfe:	96 e2       	ldi	r25, 0x26	; 38
    2c00:	0e 94 1b 1f 	call	0x3e36	; 0x3e36 <TWI_MasterWriteRead>
    while(twiMaster.status != TWIM_STATUS_READY);
    2c04:	80 91 9c 26 	lds	r24, 0x269C
    2c08:	81 11       	cpse	r24, r1
    2c0a:	fc cf       	rjmp	.-8      	; 0x2c04 <setAccelRegister+0x26>
}
    2c0c:	0f 90       	pop	r0
    2c0e:	0f 90       	pop	r0
    2c10:	df 91       	pop	r29
    2c12:	cf 91       	pop	r28
    2c14:	0f 91       	pop	r16
    2c16:	08 95       	ret

00002c18 <scaryBlockTickHack>:

extern int blockTickRunning;

void scaryBlockTickHack(void)
{
	TCF0.CTRLA = TC_CLKSEL_DIV1_gc;
    2c18:	e0 e0       	ldi	r30, 0x00	; 0
    2c1a:	fb e0       	ldi	r31, 0x0B	; 11
    2c1c:	81 e0       	ldi	r24, 0x01	; 1
    2c1e:	80 83       	st	Z, r24
	
	TCF0.PER = 16000;  // 2000hz blocktick
    2c20:	80 e8       	ldi	r24, 0x80	; 128
    2c22:	9e e3       	ldi	r25, 0x3E	; 62
    2c24:	86 a3       	std	Z+38, r24	; 0x26
    2c26:	97 a3       	std	Z+39, r25	; 0x27
	TCF0.INTCTRLA = TC_OVFINTLVL_MED_gc;
    2c28:	82 e0       	ldi	r24, 0x02	; 2
    2c2a:	86 83       	std	Z+6, r24	; 0x06
    2c2c:	08 95       	ret

00002c2e <initBlockTick>:


void initBlockTick()
{

	blockTickRunning=0;
    2c2e:	10 92 24 21 	sts	0x2124, r1
    2c32:	10 92 25 21 	sts	0x2125, r1
     
	scaryBlockTickHack();
    2c36:	0e 94 0c 16 	call	0x2c18	; 0x2c18 <scaryBlockTickHack>

	/* Enable interrupt levels. */
	PMIC.CTRL |= PMIC_HILVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_LOLVLEN_bm;
    2c3a:	e0 ea       	ldi	r30, 0xA0	; 160
    2c3c:	f0 e0       	ldi	r31, 0x00	; 0
    2c3e:	82 81       	ldd	r24, Z+2	; 0x02
    2c40:	87 60       	ori	r24, 0x07	; 7
    2c42:	82 83       	std	Z+2, r24	; 0x02
	sei();
    2c44:	78 94       	sei
    2c46:	08 95       	ret

00002c48 <__vector_108>:
}

// part of scary blocktick hack
// called every 38400 khz or so
ISR(TCF0_OVF_vect)
{
    2c48:	1f 92       	push	r1
    2c4a:	0f 92       	push	r0
    2c4c:	0f b6       	in	r0, 0x3f	; 63
    2c4e:	0f 92       	push	r0
    2c50:	11 24       	eor	r1, r1
    2c52:	0b b6       	in	r0, 0x3b	; 59
    2c54:	0f 92       	push	r0
    2c56:	2f 93       	push	r18
    2c58:	3f 93       	push	r19
    2c5a:	4f 93       	push	r20
    2c5c:	5f 93       	push	r21
    2c5e:	6f 93       	push	r22
    2c60:	7f 93       	push	r23
    2c62:	8f 93       	push	r24
    2c64:	9f 93       	push	r25
    2c66:	af 93       	push	r26
    2c68:	bf 93       	push	r27
    2c6a:	ef 93       	push	r30
    2c6c:	ff 93       	push	r31
	if (!blockTickRunning)
    2c6e:	80 91 24 21 	lds	r24, 0x2124
    2c72:	90 91 25 21 	lds	r25, 0x2125
    2c76:	89 2b       	or	r24, r25
    2c78:	19 f4       	brne	.+6      	; 0x2c80 <__vector_108+0x38>
	  {
	    wdt_reset();
    2c7a:	a8 95       	wdr
	    blockTick();
    2c7c:	0e 94 2d 02 	call	0x45a	; 0x45a <blockTick>
	  }
}
    2c80:	ff 91       	pop	r31
    2c82:	ef 91       	pop	r30
    2c84:	bf 91       	pop	r27
    2c86:	af 91       	pop	r26
    2c88:	9f 91       	pop	r25
    2c8a:	8f 91       	pop	r24
    2c8c:	7f 91       	pop	r23
    2c8e:	6f 91       	pop	r22
    2c90:	5f 91       	pop	r21
    2c92:	4f 91       	pop	r20
    2c94:	3f 91       	pop	r19
    2c96:	2f 91       	pop	r18
    2c98:	0f 90       	pop	r0
    2c9a:	0b be       	out	0x3b, r0	; 59
    2c9c:	0f 90       	pop	r0
    2c9e:	0f be       	out	0x3f, r0	; 63
    2ca0:	0f 90       	pop	r0
    2ca2:	1f 90       	pop	r1
    2ca4:	18 95       	reti

00002ca6 <jumpToHWBootSection>:
#include <avr/io.h>
#include "../hw-api/hwBoot.h"

void jumpToHWBootSection(){
	uint8_t temp = RST.CTRL | RST_SWRST_bm;
    2ca6:	e8 e7       	ldi	r30, 0x78	; 120
    2ca8:	f0 e0       	ldi	r31, 0x00	; 0
    2caa:	81 81       	ldd	r24, Z+1	; 0x01
    2cac:	81 60       	ori	r24, 0x01	; 1
	CCP = CCP_IOREG_gc; // grab permission to modify the reset reg
    2cae:	98 ed       	ldi	r25, 0xD8	; 216
    2cb0:	94 bf       	out	0x34, r25	; 52
	RST.CTRL = temp; // set the reset reg to trigger a SW reset
    2cb2:	81 83       	std	Z+1, r24	; 0x01
    2cb4:	08 95       	ret

00002cb6 <crcCalc>:
byte crcCalc(byte currCrc, byte newVal)
{
    byte crc = currCrc;
	int i;
	
	crc ^= newVal;
    2cb6:	68 27       	eor	r22, r24
    2cb8:	28 e0       	ldi	r18, 0x08	; 8
    2cba:	30 e0       	ldi	r19, 0x00	; 0
    for (i=0; i<8; i++)
	{
        if (0x80 & crc) {
    2cbc:	67 ff       	sbrs	r22, 7
    2cbe:	09 c0       	rjmp	.+18     	; 0x2cd2 <crcCalc+0x1c>
            crc = (crc << 1) ^ CRC_POLY;
    2cc0:	86 2f       	mov	r24, r22
    2cc2:	90 e0       	ldi	r25, 0x00	; 0
    2cc4:	88 0f       	add	r24, r24
    2cc6:	99 1f       	adc	r25, r25
    2cc8:	46 ea       	ldi	r20, 0xA6	; 166
    2cca:	84 27       	eor	r24, r20
    2ccc:	90 95       	com	r25
    2cce:	68 2f       	mov	r22, r24
    2cd0:	01 c0       	rjmp	.+2      	; 0x2cd4 <crcCalc+0x1e>
        }
		else {
            crc = crc << 1;
    2cd2:	66 0f       	add	r22, r22
    2cd4:	21 50       	subi	r18, 0x01	; 1
    2cd6:	31 09       	sbc	r19, r1
{
    byte crc = currCrc;
	int i;
	
	crc ^= newVal;
    for (i=0; i<8; i++)
    2cd8:	89 f7       	brne	.-30     	; 0x2cbc <crcCalc+0x6>
		else {
            crc = crc << 1;
        }
    }
	return crc;
} 
    2cda:	86 2f       	mov	r24, r22
    2cdc:	08 95       	ret

00002cde <ackHandler>:
// handles the ack byte and updates the packet queue
//    (parity, timer, CTS)
// inputs:  port received on
// returns: nothing
void ackHandler(PRef p)
{
    2cde:	0f 93       	push	r16
    2ce0:	1f 93       	push	r17
    2ce2:	cf 93       	push	r28
    2ce4:	df 93       	push	r29
    byte currParity = sendParity(port[p].sq);
    2ce6:	98 e5       	ldi	r25, 0x58	; 88
    2ce8:	89 9f       	mul	r24, r25
    2cea:	80 01       	movw	r16, r0
    2cec:	11 24       	eor	r1, r1
    2cee:	e8 01       	movw	r28, r16
    2cf0:	c0 5b       	subi	r28, 0xB0	; 176
    2cf2:	db 4d       	sbci	r29, 0xDB	; 219
    2cf4:	3e 85       	ldd	r19, Y+14	; 0x0e
    
    // check for double acks (shouldn't ever happen)
    if( !(gotOddAck(port[p].rq) ^ gotEvenAck(port[p].rq)) ) 
    2cf6:	9d 89       	ldd	r25, Y+21	; 0x15
    2cf8:	29 2f       	mov	r18, r25
    2cfa:	26 95       	lsr	r18
    2cfc:	42 2f       	mov	r20, r18
    2cfe:	49 27       	eor	r20, r25
    2d00:	9c 7f       	andi	r25, 0xFC	; 252
    {
        clearReceivedAcks( port[p].rq );
    2d02:	9d 8b       	std	Y+21, r25	; 0x15
void ackHandler(PRef p)
{
    byte currParity = sendParity(port[p].sq);
    
    // check for double acks (shouldn't ever happen)
    if( !(gotOddAck(port[p].rq) ^ gotEvenAck(port[p].rq)) ) 
    2d04:	40 ff       	sbrs	r20, 0
    {
        clearReceivedAcks( port[p].rq );
        return;
    2d06:	18 c0       	rjmp	.+48     	; 0x2d38 <ackHandler+0x5a>
//    (parity, timer, CTS)
// inputs:  port received on
// returns: nothing
void ackHandler(PRef p)
{
    byte currParity = sendParity(port[p].sq);
    2d08:	32 fb       	bst	r19, 2
    2d0a:	99 27       	eor	r25, r25
    2d0c:	90 f9       	bld	r25, 0
    if( !(gotOddAck(port[p].rq) ^ gotEvenAck(port[p].rq)) ) 
    {
        clearReceivedAcks( port[p].rq );
        return;
    }
    byte recdParity = gotOddAck(port[p].rq);
    2d0e:	21 70       	andi	r18, 0x01	; 1
    clearReceivedAcks( port[p].rq );
    
    // parity matches
    if(currParity == recdParity)
    2d10:	92 13       	cpse	r25, r18
    2d12:	12 c0       	rjmp	.+36     	; 0x2d38 <ackHandler+0x5a>
    {
        // remove the Chunk, call callback with successfull response
        removeFromSq(p, MSG_RESP_ACK);
    2d14:	68 e0       	ldi	r22, 0x08	; 8
    2d16:	0e 94 e7 02 	call	0x5ce	; 0x5ce <removeFromSq>
        
        // reset the flags
        port[p].sq.retry    = NUM_RETRIES;
    2d1a:	94 e0       	ldi	r25, 0x04	; 4
    2d1c:	9d 87       	std	Y+13, r25	; 0x0d
        flipParity(port[p].sq);
    2d1e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2d20:	89 27       	eor	r24, r25
        port[p].sq.flags   |= CLEAR_TO_SEND;
    2d22:	80 64       	ori	r24, 0x40	; 64
    2d24:	8e 87       	std	Y+14, r24	; 0x0e
        
        // reset the timer
        deregisterTimeout(&(port[p].sq.qtout.tout));
    2d26:	c8 01       	movw	r24, r16
    2d28:	8f 5a       	subi	r24, 0xAF	; 175
    2d2a:	9b 4d       	sbci	r25, 0xDB	; 219
    }
    // else, parity error - don't do anything
}
    2d2c:	df 91       	pop	r29
    2d2e:	cf 91       	pop	r28
    2d30:	1f 91       	pop	r17
    2d32:	0f 91       	pop	r16
        port[p].sq.retry    = NUM_RETRIES;
        flipParity(port[p].sq);
        port[p].sq.flags   |= CLEAR_TO_SEND;
        
        // reset the timer
        deregisterTimeout(&(port[p].sq.qtout.tout));
    2d34:	0c 94 04 0a 	jmp	0x1408	; 0x1408 <deregisterTimeout>
    }
    // else, parity error - don't do anything
}
    2d38:	df 91       	pop	r29
    2d3a:	cf 91       	pop	r28
    2d3c:	1f 91       	pop	r17
    2d3e:	0f 91       	pop	r16
    2d40:	08 95       	ret

00002d42 <addToGlobalRq>:

// adds a Chunk to the global receive queue
void addToGlobalRq(Chunk* c)
{
    // nothing to add
    if( c == NULL ) 
    2d42:	00 97       	sbiw	r24, 0x00	; 0
    2d44:	d9 f0       	breq	.+54     	; 0x2d7c <addToGlobalRq+0x3a>
    {
        return;
    }
        
    // isolate Chunk
    c->next = NULL;
    2d46:	fc 01       	movw	r30, r24
    2d48:	12 8a       	std	Z+18, r1	; 0x12
    2d4a:	13 8a       	std	Z+19, r1	; 0x13
    
    // update pointers
    if( globalRq.head == NULL ) 
    2d4c:	20 91 46 21 	lds	r18, 0x2146
    2d50:	30 91 47 21 	lds	r19, 0x2147
    2d54:	23 2b       	or	r18, r19
    2d56:	29 f4       	brne	.+10     	; 0x2d62 <addToGlobalRq+0x20>
    {
        globalRq.head = c;
    2d58:	80 93 46 21 	sts	0x2146, r24
    2d5c:	90 93 47 21 	sts	0x2147, r25
    2d60:	06 c0       	rjmp	.+12     	; 0x2d6e <addToGlobalRq+0x2c>
    }
    else 
    {
        globalRq.tail->next = c;
    2d62:	e0 91 48 21 	lds	r30, 0x2148
    2d66:	f0 91 49 21 	lds	r31, 0x2149
    2d6a:	82 8b       	std	Z+18, r24	; 0x12
    2d6c:	93 8b       	std	Z+19, r25	; 0x13
    }
    
    // add/flag it
    globalRq.tail  = c;
    2d6e:	80 93 48 21 	sts	0x2148, r24
    2d72:	90 93 49 21 	sts	0x2149, r25
    globalRq.flags = PACKET_READY;
    2d76:	80 e8       	ldi	r24, 0x80	; 128
    2d78:	80 93 4a 21 	sts	0x214A, r24
    2d7c:	08 95       	ret

00002d7e <isSpecial>:
}

// check to see if character is special
byte isSpecial(byte val)
{
    2d7e:	28 2f       	mov	r18, r24
    if( ((val & ACK_MASK) == ACK   ) || ((val & ACK_MASK) == NACK  ) ||
    2d80:	98 2f       	mov	r25, r24
    2d82:	9e 7f       	andi	r25, 0xFE	; 254
        ((val & FD_MASK)  == FD    ) || (val              == ESCAPE )   )
    {
        return 1;
    2d84:	81 e0       	ldi	r24, 0x01	; 1
}

// check to see if character is special
byte isSpecial(byte val)
{
    if( ((val & ACK_MASK) == ACK   ) || ((val & ACK_MASK) == NACK  ) ||
    2d86:	98 30       	cpi	r25, 0x08	; 8
    2d88:	41 f0       	breq	.+16     	; 0x2d9a <isSpecial+0x1c>
    2d8a:	9a 30       	cpi	r25, 0x0A	; 10
    2d8c:	31 f0       	breq	.+12     	; 0x2d9a <isSpecial+0x1c>
    2d8e:	92 31       	cpi	r25, 0x12	; 18
    2d90:	29 f0       	breq	.+10     	; 0x2d9c <isSpecial+0x1e>
        ((val & FD_MASK)  == FD    ) || (val              == ESCAPE )   )
    2d92:	2d 37       	cpi	r18, 0x7D	; 125
    2d94:	19 f0       	breq	.+6      	; 0x2d9c <isSpecial+0x1e>
    2d96:	80 e0       	ldi	r24, 0x00	; 0
    2d98:	08 95       	ret
    2d9a:	08 95       	ret
    {
        return 1;
    }
        
    return 0;
}
    2d9c:	08 95       	ret

00002d9e <sendToBuffer>:

// makes the Chunk into the correct send string
void sendToBuffer(PRef p, Chunk* c, byte parity)
{
    2d9e:	9f 92       	push	r9
    2da0:	af 92       	push	r10
    2da2:	bf 92       	push	r11
    2da4:	cf 92       	push	r12
    2da6:	df 92       	push	r13
    2da8:	ef 92       	push	r14
    2daa:	ff 92       	push	r15
    2dac:	0f 93       	push	r16
    2dae:	1f 93       	push	r17
    2db0:	cf 93       	push	r28
    2db2:	df 93       	push	r29
    2db4:	b8 2e       	mov	r11, r24
    2db6:	7b 01       	movw	r14, r22
    byte checksum = 0;
    byte val;
    byte i;
    byte delim;
    
    if(c == NULL)
    2db8:	61 15       	cp	r22, r1
    2dba:	71 05       	cpc	r23, r1
    2dbc:	09 f4       	brne	.+2      	; 0x2dc0 <sendToBuffer+0x22>
    2dbe:	83 c0       	rjmp	.+262    	; 0x2ec6 <sendToBuffer+0x128>
    {
        return;
    }
	
    // send FD
    delim = (FD | parity);
    2dc0:	62 e1       	ldi	r22, 0x12	; 18
    2dc2:	c6 2e       	mov	r12, r22
    2dc4:	c4 2a       	or	r12, r20
    2dc6:	00 e0       	ldi	r16, 0x00	; 0
    2dc8:	10 e0       	ldi	r17, 0x00	; 0
}

// makes the Chunk into the correct send string
void sendToBuffer(PRef p, Chunk* c, byte parity)
{
    byte checksum = 0;
    2dca:	d1 2c       	mov	r13, r1
            push(val^ESCAPE_CHAR, &(port[p].tx));
        }
        // send regular
        else 
        {
            push(val, &(port[p].tx));
    2dcc:	88 e5       	ldi	r24, 0x58	; 88
    2dce:	b8 9e       	mul	r11, r24
    2dd0:	e0 01       	movw	r28, r0
    2dd2:	11 24       	eor	r1, r1
    2dd4:	c8 57       	subi	r28, 0x78	; 120
    2dd6:	db 4d       	sbci	r29, 0xDB	; 219
        
        // escape it
        if( isSpecial(val) ) 
        {
            push(ESCAPE, &(port[p].tx));
            push(val^ESCAPE_CHAR, &(port[p].tx));
    2dd8:	70 e2       	ldi	r23, 0x20	; 32
    2dda:	97 2e       	mov	r9, r23
        
    return 0;
}

// makes the Chunk into the correct send string
void sendToBuffer(PRef p, Chunk* c, byte parity)
    2ddc:	f7 01       	movw	r30, r14
    2dde:	e0 0f       	add	r30, r16
    2de0:	f1 1f       	adc	r31, r17
    delim = (FD | parity);

    // send messageHandler
    for(i=0; i<POINTER_SIZE; i++)
    {
        val = c->handler[i];
    2de2:	a4 88       	ldd	r10, Z+20	; 0x14
        checksum = crcCalc(checksum, val);
    2de4:	6a 2d       	mov	r22, r10
    2de6:	8d 2d       	mov	r24, r13
    2de8:	0e 94 5b 16 	call	0x2cb6	; 0x2cb6 <crcCalc>
    2dec:	d8 2e       	mov	r13, r24
        
        // escape it
        if( isSpecial(val) ) 
    2dee:	8a 2d       	mov	r24, r10
    2df0:	0e 94 bf 16 	call	0x2d7e	; 0x2d7e <isSpecial>
        {
            push(ESCAPE, &(port[p].tx));
    2df4:	be 01       	movw	r22, r28
    {
        val = c->handler[i];
        checksum = crcCalc(checksum, val);
        
        // escape it
        if( isSpecial(val) ) 
    2df6:	88 23       	and	r24, r24
    2df8:	39 f0       	breq	.+14     	; 0x2e08 <sendToBuffer+0x6a>
        {
            push(ESCAPE, &(port[p].tx));
    2dfa:	8d e7       	ldi	r24, 0x7D	; 125
    2dfc:	0e 94 8b 02 	call	0x516	; 0x516 <push>
            push(val^ESCAPE_CHAR, &(port[p].tx));
    2e00:	be 01       	movw	r22, r28
    2e02:	8a 2d       	mov	r24, r10
    2e04:	89 25       	eor	r24, r9
    2e06:	01 c0       	rjmp	.+2      	; 0x2e0a <sendToBuffer+0x6c>
        }
        // send regular
        else 
        {
            push(val, &(port[p].tx));
    2e08:	8a 2d       	mov	r24, r10
    2e0a:	0e 94 8b 02 	call	0x516	; 0x516 <push>
    2e0e:	0f 5f       	subi	r16, 0xFF	; 255
    2e10:	1f 4f       	sbci	r17, 0xFF	; 255
	
    // send FD
    delim = (FD | parity);

    // send messageHandler
    for(i=0; i<POINTER_SIZE; i++)
    2e12:	02 30       	cpi	r16, 0x02	; 2
    2e14:	11 05       	cpc	r17, r1
    2e16:	11 f7       	brne	.-60     	; 0x2ddc <sendToBuffer+0x3e>
    2e18:	01 e1       	ldi	r16, 0x11	; 17
            push(val^ESCAPE_CHAR, &(port[p].tx));
        }
        // send regular
        else 
        {
            push(val, &(port[p].tx));
    2e1a:	e8 e5       	ldi	r30, 0x58	; 88
    2e1c:	be 9e       	mul	r11, r30
    2e1e:	e0 01       	movw	r28, r0
    2e20:	11 24       	eor	r1, r1
    2e22:	c8 57       	subi	r28, 0x78	; 120
    2e24:	db 4d       	sbci	r29, 0xDB	; 219
        // escape it
        if( isSpecial(val) ) 
        {
            push(ESCAPE, &(port[p].tx));

            push(val^ESCAPE_CHAR, &(port[p].tx));
    2e26:	50 e2       	ldi	r21, 0x20	; 32
    2e28:	95 2e       	mov	r9, r21
    }
    
    // send data
    for(i=0; i<DATA_SIZE; i++)
    {
        val = c->data[i];
    2e2a:	f7 01       	movw	r30, r14
    2e2c:	11 91       	ld	r17, Z+
    2e2e:	7f 01       	movw	r14, r30
        checksum = crcCalc(checksum, val);
    2e30:	61 2f       	mov	r22, r17
    2e32:	8d 2d       	mov	r24, r13
    2e34:	0e 94 5b 16 	call	0x2cb6	; 0x2cb6 <crcCalc>
    2e38:	d8 2e       	mov	r13, r24
        
        // escape it
        if( isSpecial(val) ) 
    2e3a:	81 2f       	mov	r24, r17
    2e3c:	0e 94 bf 16 	call	0x2d7e	; 0x2d7e <isSpecial>
    2e40:	a8 2e       	mov	r10, r24
        {
            push(ESCAPE, &(port[p].tx));
    2e42:	be 01       	movw	r22, r28
    {
        val = c->data[i];
        checksum = crcCalc(checksum, val);
        
        // escape it
        if( isSpecial(val) ) 
    2e44:	88 23       	and	r24, r24
    2e46:	39 f0       	breq	.+14     	; 0x2e56 <sendToBuffer+0xb8>
        {
            push(ESCAPE, &(port[p].tx));
    2e48:	8d e7       	ldi	r24, 0x7D	; 125
    2e4a:	0e 94 8b 02 	call	0x516	; 0x516 <push>

            push(val^ESCAPE_CHAR, &(port[p].tx));
    2e4e:	be 01       	movw	r22, r28
    2e50:	81 2f       	mov	r24, r17
    2e52:	89 25       	eor	r24, r9
    2e54:	01 c0       	rjmp	.+2      	; 0x2e58 <sendToBuffer+0xba>
        }
        // send regular
        else 
        {
            push(val, &(port[p].tx));
    2e56:	81 2f       	mov	r24, r17
    2e58:	0e 94 8b 02 	call	0x516	; 0x516 <push>
    2e5c:	01 50       	subi	r16, 0x01	; 1
            push(val, &(port[p].tx));
        }
    }
    
    // send data
    for(i=0; i<DATA_SIZE; i++)
    2e5e:	29 f7       	brne	.-54     	; 0x2e2a <sendToBuffer+0x8c>
    2e60:	2b 2d       	mov	r18, r11
    2e62:	30 e0       	ldi	r19, 0x00	; 0

    // send checksum
	// escape it
    if( isSpecial(val) ) 
    {
        push(ESCAPE, &(port[p].tx));
    2e64:	88 e5       	ldi	r24, 0x58	; 88
        }
    }

    // send checksum
	// escape it
    if( isSpecial(val) ) 
    2e66:	aa 20       	and	r10, r10
    2e68:	79 f0       	breq	.+30     	; 0x2e88 <sendToBuffer+0xea>
    {
        push(ESCAPE, &(port[p].tx));
    2e6a:	82 9f       	mul	r24, r18
    2e6c:	e0 01       	movw	r28, r0
    2e6e:	83 9f       	mul	r24, r19
    2e70:	d0 0d       	add	r29, r0
    2e72:	11 24       	eor	r1, r1
    2e74:	c8 57       	subi	r28, 0x78	; 120
    2e76:	db 4d       	sbci	r29, 0xDB	; 219
    2e78:	be 01       	movw	r22, r28
    2e7a:	8d e7       	ldi	r24, 0x7D	; 125
    2e7c:	0e 94 8b 02 	call	0x516	; 0x516 <push>
        push(checksum^ESCAPE_CHAR, &(port[p].tx));
    2e80:	be 01       	movw	r22, r28
    2e82:	80 e2       	ldi	r24, 0x20	; 32
    2e84:	8d 25       	eor	r24, r13
    2e86:	08 c0       	rjmp	.+16     	; 0x2e98 <sendToBuffer+0xfa>
    }
    // send regular
    else 
    {
        push(checksum, &(port[p].tx));
    2e88:	82 9f       	mul	r24, r18
    2e8a:	b0 01       	movw	r22, r0
    2e8c:	83 9f       	mul	r24, r19
    2e8e:	70 0d       	add	r23, r0
    2e90:	11 24       	eor	r1, r1
    2e92:	68 57       	subi	r22, 0x78	; 120
    2e94:	7b 4d       	sbci	r23, 0xDB	; 219
    2e96:	8d 2d       	mov	r24, r13
    2e98:	0e 94 8b 02 	call	0x516	; 0x516 <push>
    }
    
    // start the interrupt by sending a byte (FD)
    pPutChar(delim, port[p].pnum);
    2e9c:	88 e5       	ldi	r24, 0x58	; 88
    2e9e:	b8 9e       	mul	r11, r24
    2ea0:	f0 01       	movw	r30, r0
    2ea2:	11 24       	eor	r1, r1
    2ea4:	e0 5b       	subi	r30, 0xB0	; 176
    2ea6:	fb 4d       	sbci	r31, 0xDB	; 219
    2ea8:	60 81       	ld	r22, Z
    2eaa:	8c 2d       	mov	r24, r12
}
    2eac:	df 91       	pop	r29
    2eae:	cf 91       	pop	r28
    2eb0:	1f 91       	pop	r17
    2eb2:	0f 91       	pop	r16
    2eb4:	ff 90       	pop	r15
    2eb6:	ef 90       	pop	r14
    2eb8:	df 90       	pop	r13
    2eba:	cf 90       	pop	r12
    2ebc:	bf 90       	pop	r11
    2ebe:	af 90       	pop	r10
    2ec0:	9f 90       	pop	r9
    {
        push(checksum, &(port[p].tx));
    }
    
    // start the interrupt by sending a byte (FD)
    pPutChar(delim, port[p].pnum);
    2ec2:	0c 94 29 1a 	jmp	0x3452	; 0x3452 <pPutChar>
}
    2ec6:	df 91       	pop	r29
    2ec8:	cf 91       	pop	r28
    2eca:	1f 91       	pop	r17
    2ecc:	0f 91       	pop	r16
    2ece:	ff 90       	pop	r15
    2ed0:	ef 90       	pop	r14
    2ed2:	df 90       	pop	r13
    2ed4:	cf 90       	pop	r12
    2ed6:	bf 90       	pop	r11
    2ed8:	af 90       	pop	r10
    2eda:	9f 90       	pop	r9
    2edc:	08 95       	ret

00002ede <processBuffer>:


// pulls bytes from the buffer and puts them into Chunks
// also handles ACKs appropriately
void processBuffer(PRef p)
{
    2ede:	2f 92       	push	r2
    2ee0:	3f 92       	push	r3
    2ee2:	4f 92       	push	r4
    2ee4:	5f 92       	push	r5
    2ee6:	6f 92       	push	r6
    2ee8:	7f 92       	push	r7
    2eea:	8f 92       	push	r8
    2eec:	9f 92       	push	r9
    2eee:	af 92       	push	r10
    2ef0:	bf 92       	push	r11
    2ef2:	cf 92       	push	r12
    2ef4:	df 92       	push	r13
    2ef6:	ef 92       	push	r14
    2ef8:	ff 92       	push	r15
    2efa:	0f 93       	push	r16
    2efc:	1f 93       	push	r17
    2efe:	cf 93       	push	r28
    2f00:	df 93       	push	r29
    2f02:	38 2e       	mov	r3, r24
    byte   currByte;
    Chunk* currChunk = NULL;
    byte   wasEscape = wasEscapeStore[p];
    2f04:	e8 2e       	mov	r14, r24
    2f06:	f1 2c       	mov	r15, r1
    2f08:	f7 01       	movw	r30, r14
    2f0a:	e2 56       	subi	r30, 0x62	; 98
    2f0c:	f9 4d       	sbci	r31, 0xD9	; 217
    2f0e:	20 80       	ld	r2, Z


    // nothing to process
    if( isEmpty(&(port[p].rx)) )
    2f10:	88 e5       	ldi	r24, 0x58	; 88
    2f12:	8e 9d       	mul	r24, r14
    2f14:	e0 01       	movw	r28, r0
    2f16:	8f 9d       	mul	r24, r15
    2f18:	d0 0d       	add	r29, r0
    2f1a:	11 24       	eor	r1, r1
    2f1c:	f8 e6       	ldi	r31, 0x68	; 104
    2f1e:	6f 2e       	mov	r6, r31
    2f20:	f4 e2       	ldi	r31, 0x24	; 36
    2f22:	7f 2e       	mov	r7, r31
    2f24:	6c 0e       	add	r6, r28
    2f26:	7d 1e       	adc	r7, r29
    2f28:	c3 01       	movw	r24, r6
    2f2a:	0e 94 c1 02 	call	0x582	; 0x582 <isEmpty>
    2f2e:	81 11       	cpse	r24, r1
    2f30:	d9 c0       	rjmp	.+434    	; 0x30e4 <processBuffer+0x206>
    {
        return;
    }

    // continue filling unfinished Chunk
    if( (port[p].rq.curr != NULL) && chunkFilling(port[p].rq.curr) ) 
    2f32:	fe 01       	movw	r30, r28
    2f34:	e0 5b       	subi	r30, 0xB0	; 176
    2f36:	fb 4d       	sbci	r31, 0xDB	; 219
    2f38:	46 88       	ldd	r4, Z+22	; 0x16
    2f3a:	57 88       	ldd	r5, Z+23	; 0x17
    2f3c:	41 14       	cp	r4, r1
    2f3e:	51 04       	cpc	r5, r1
    2f40:	21 f0       	breq	.+8      	; 0x2f4a <processBuffer+0x6c>
    2f42:	f2 01       	movw	r30, r4
    2f44:	81 89       	ldd	r24, Z+17	; 0x11
    2f46:	86 fd       	sbrc	r24, 6
    2f48:	ac c0       	rjmp	.+344    	; 0x30a2 <processBuffer+0x1c4>
    {
        currChunk = port[p].rq.curr;
    }
    else
    {
        port[p].rq.index    = 0;
    2f4a:	88 e5       	ldi	r24, 0x58	; 88
    2f4c:	8e 9d       	mul	r24, r14
    2f4e:	f0 01       	movw	r30, r0
    2f50:	8f 9d       	mul	r24, r15
    2f52:	f0 0d       	add	r31, r0
    2f54:	11 24       	eor	r1, r1
    2f56:	e0 5b       	subi	r30, 0xB0	; 176
    2f58:	fb 4d       	sbci	r31, 0xDB	; 219
    2f5a:	13 8a       	std	Z+19, r1	; 0x13
        port[p].rq.checksum = 0;
    2f5c:	14 8a       	std	Z+20, r1	; 0x14
        wasEscape           = 0;
    2f5e:	21 2c       	mov	r2, r1
// pulls bytes from the buffer and puts them into Chunks
// also handles ACKs appropriately
void processBuffer(PRef p)
{
    byte   currByte;
    Chunk* currChunk = NULL;
    2f60:	41 2c       	mov	r4, r1
    2f62:	51 2c       	mov	r5, r1
    2f64:	9e c0       	rjmp	.+316    	; 0x30a2 <processBuffer+0x1c4>
        wasEscape           = 0;
    }
                
    while( !isEmpty(&(port[p].rx)) )
    {
        currByte = (byte)pop(&(port[p].rx));
    2f66:	c3 01       	movw	r24, r6
    2f68:	0e 94 a6 02 	call	0x54c	; 0x54c <pop>
        
        // is ACK
        if( (currByte & ACK_MASK) == ACK )
    2f6c:	bc 01       	movw	r22, r24
    2f6e:	6e 7f       	andi	r22, 0xFE	; 254
    2f70:	77 27       	eor	r23, r23
    2f72:	68 30       	cpi	r22, 0x08	; 8
    2f74:	71 05       	cpc	r23, r1
    2f76:	91 f4       	brne	.+36     	; 0x2f9c <processBuffer+0xbe>
        {
            // set ack parity
            port[p].rq.flags |= (1 << (currByte & 0x01));
    2f78:	81 70       	andi	r24, 0x01	; 1
    2f7a:	99 27       	eor	r25, r25
    2f7c:	21 e0       	ldi	r18, 0x01	; 1
    2f7e:	30 e0       	ldi	r19, 0x00	; 0
    2f80:	02 c0       	rjmp	.+4      	; 0x2f86 <processBuffer+0xa8>
    2f82:	22 0f       	add	r18, r18
    2f84:	33 1f       	adc	r19, r19
    2f86:	8a 95       	dec	r24
    2f88:	e2 f7       	brpl	.-8      	; 0x2f82 <processBuffer+0xa4>
    2f8a:	c9 01       	movw	r24, r18
    2f8c:	f8 01       	movw	r30, r16
    2f8e:	90 81       	ld	r25, Z
    2f90:	98 2b       	or	r25, r24
    2f92:	90 83       	st	Z, r25
        
            ackHandler(p);
    2f94:	83 2d       	mov	r24, r3
    2f96:	0e 94 6f 16 	call	0x2cde	; 0x2cde <ackHandler>
            continue;
    2f9a:	9a c0       	rjmp	.+308    	; 0x30d0 <processBuffer+0x1f2>
	        nackHandler(p);
	        continue;
	        }*/
        
        // is FRAME_DELIMETER
        if( (currByte & FD_MASK) == FD )
    2f9c:	62 31       	cpi	r22, 0x12	; 18
    2f9e:	71 05       	cpc	r23, r1
    2fa0:	01 f5       	brne	.+64     	; 0x2fe2 <processBuffer+0x104>
        {
            // determine parity
            byte parity = setParityFromByte(currByte);
    2fa2:	81 70       	andi	r24, 0x01	; 1
    2fa4:	99 27       	eor	r25, r25
    2fa6:	28 2e       	mov	r2, r24
    2fa8:	22 94       	swap	r2
    2faa:	22 0c       	add	r2, r2
    2fac:	e0 ee       	ldi	r30, 0xE0	; 224
    2fae:	2e 22       	and	r2, r30
        
            // restart the fill
            port[p].rq.index    = 0;
    2fb0:	f6 01       	movw	r30, r12
    2fb2:	10 82       	st	Z, r1
            port[p].rq.checksum = 0;
    2fb4:	f5 01       	movw	r30, r10
    2fb6:	10 82       	st	Z, r1
            wasEscape           = 0;
                
            // unfinished Chunk
            if(port[p].rq.curr != NULL)
    2fb8:	f4 01       	movw	r30, r8
    2fba:	40 80       	ld	r4, Z
    2fbc:	51 80       	ldd	r5, Z+1	; 0x01
    2fbe:	41 14       	cp	r4, r1
    2fc0:	51 04       	cpc	r5, r1
    2fc2:	49 f4       	brne	.+18     	; 0x2fd6 <processBuffer+0xf8>
                currChunk = port[p].rq.curr;
            }
            // need new Chunk
            else
            {
                currChunk = getSystemRXChunk();
    2fc4:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <getSystemRXChunk>
    2fc8:	2c 01       	movw	r4, r24
					// insert receive time
					//insertReceiveTime(currChunk);
				}*/
#endif
                // out of memory, can't fill
                if( currChunk == NULL )
    2fca:	00 97       	sbiw	r24, 0x00	; 0
    2fcc:	09 f4       	brne	.+2      	; 0x2fd0 <processBuffer+0xf2>
    2fce:	64 c0       	rjmp	.+200    	; 0x3098 <processBuffer+0x1ba>
                    // discard bytes, hopefully will get resent
                    continue;
                }
                
                // add to the queue
                port[p].rq.curr = currChunk;
    2fd0:	f4 01       	movw	r30, r8
    2fd2:	80 83       	st	Z, r24
    2fd4:	91 83       	std	Z+1, r25	; 0x01
            }
            
            // reset the status of the Chunk, just in case
            currChunk->status = CHUNK_USED | CHUNK_FILLING | parity | port[p].pnum;
    2fd6:	98 81       	ld	r25, Y
    2fd8:	90 6c       	ori	r25, 0xC0	; 192
    2fda:	92 29       	or	r25, r2
    2fdc:	f2 01       	movw	r30, r4
    2fde:	91 8b       	std	Z+17, r25	; 0x11
    2fe0:	5b c0       	rjmp	.+182    	; 0x3098 <processBuffer+0x1ba>
            
            continue;
        }
        
        // no use processing if can't put anywhere
        if(currChunk == NULL)
    2fe2:	41 14       	cp	r4, r1
    2fe4:	51 04       	cpc	r5, r1
    2fe6:	09 f4       	brne	.+2      	; 0x2fea <processBuffer+0x10c>
    2fe8:	73 c0       	rjmp	.+230    	; 0x30d0 <processBuffer+0x1f2>
        wasEscape           = 0;
    }
                
    while( !isEmpty(&(port[p].rx)) )
    {
        currByte = (byte)pop(&(port[p].rx));
    2fea:	68 2f       	mov	r22, r24
        {
            continue;
        }
        
        // is an escape char        
        if( currByte == ESCAPE )
    2fec:	8d 37       	cpi	r24, 0x7D	; 125
    2fee:	09 f4       	brne	.+2      	; 0x2ff2 <processBuffer+0x114>
    2ff0:	55 c0       	rjmp	.+170    	; 0x309c <processBuffer+0x1be>
            continue;
        }

        // is a regular character
        // was escaped
        if( wasEscape )
    2ff2:	22 20       	and	r2, r2
    2ff4:	19 f0       	breq	.+6      	; 0x2ffc <processBuffer+0x11e>
        {
            currByte ^= ESCAPE_CHAR;
    2ff6:	f0 e2       	ldi	r31, 0x20	; 32
    2ff8:	8f 27       	eor	r24, r31
    2ffa:	68 2f       	mov	r22, r24
            wasEscape = 0;
        }

        // is transmitted checksum
        if( port[p].rq.index >= (DATA_SIZE + POINTER_SIZE) )
    2ffc:	f6 01       	movw	r30, r12
    2ffe:	80 81       	ld	r24, Z
    3000:	83 31       	cpi	r24, 0x13	; 19
    3002:	b0 f1       	brcs	.+108    	; 0x3070 <processBuffer+0x192>
        {
            // checksum matches!
            if( currByte == port[p].rq.checksum )
    3004:	f5 01       	movw	r30, r10
    3006:	80 81       	ld	r24, Z
    3008:	68 13       	cpse	r22, r24
    300a:	2a c0       	rjmp	.+84     	; 0x3060 <processBuffer+0x182>
            {
                currChunk->status &= ~CHUNK_FILLING;
    300c:	f2 01       	movw	r30, r4
    300e:	81 89       	ldd	r24, Z+17	; 0x11
    3010:	8f 7b       	andi	r24, 0xBF	; 191
    3012:	81 8b       	std	Z+17, r24	; 0x11
                port[p].rq.flags  |=  CHUNK_READY;
    3014:	f8 01       	movw	r30, r16
    3016:	80 81       	ld	r24, Z
    3018:	80 68       	ori	r24, 0x80	; 128
    301a:	80 83       	st	Z, r24
				
                // check for parity error
                byte parity = chunkParity(currChunk);
    301c:	f2 01       	movw	r30, r4
    301e:	91 89       	ldd	r25, Z+17	; 0x11
    3020:	95 fb       	bst	r25, 5
    3022:	99 27       	eor	r25, r25
    3024:	90 f9       	bld	r25, 0
                byte last   = parityLastChunk(port[p].rq);
    3026:	86 fb       	bst	r24, 6
    3028:	88 27       	eor	r24, r24
    302a:	80 f9       	bld	r24, 0
	      
                // not a duplicate packet		
                if(parity != last) {
    302c:	98 17       	cp	r25, r24
    302e:	91 f0       	breq	.+36     	; 0x3054 <processBuffer+0x176>
                    // update neighborhood (fix for race condition)
                    //updateNeighbor(p, PRESENT);
#ifdef CLOCK_SYNC
					if (isAClockSyncMessage(currChunk) == 1)
    3030:	c2 01       	movw	r24, r4
    3032:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <isAClockSyncMessage>
    3036:	81 30       	cpi	r24, 0x01	; 1
    3038:	19 f4       	brne	.+6      	; 0x3040 <processBuffer+0x162>
					{		
						// insert receive time
						insertReceiveTime(currChunk);
    303a:	c2 01       	movw	r24, r4
    303c:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <insertReceiveTime>
					}
#endif
                    // add to global receive queue
                    addToGlobalRq(currChunk);
    3040:	c2 01       	movw	r24, r4
    3042:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <addToGlobalRq>
		
                    // flip the parity
                    flipParityLast(port[p].rq);
    3046:	f8 01       	movw	r30, r16
    3048:	80 81       	ld	r24, Z
    304a:	f0 e4       	ldi	r31, 0x40	; 64
    304c:	8f 27       	eor	r24, r31
    304e:	f8 01       	movw	r30, r16
    3050:	80 83       	st	Z, r24
    3052:	03 c0       	rjmp	.+6      	; 0x305a <processBuffer+0x17c>
                }
                // free the chunk
                else 
                {
                    freeChunk(currChunk);
    3054:	c2 01       	movw	r24, r4
    3056:	0e 94 2f 08 	call	0x105e	; 0x105e <freeChunk>
                }
              
                // remove from the port rq
                port[p].rq.curr = NULL;
    305a:	f4 01       	movw	r30, r8
    305c:	10 82       	st	Z, r1
    305e:	11 82       	std	Z+1, r1	; 0x01
            }
            
            // reset the data
            port[p].rq.index    = 0;
    3060:	f6 01       	movw	r30, r12
    3062:	10 82       	st	Z, r1
            port[p].rq.checksum = 0;
    3064:	f5 01       	movw	r30, r10
    3066:	10 82       	st	Z, r1
            wasEscape           = 0;
    3068:	21 2c       	mov	r2, r1
            currChunk           = NULL;
    306a:	41 2c       	mov	r4, r1
    306c:	51 2c       	mov	r5, r1
	    
            /// TODO: send NACK
            continue;
    306e:	30 c0       	rjmp	.+96     	; 0x30d0 <processBuffer+0x1f2>
    3070:	e8 2f       	mov	r30, r24
    3072:	f0 e0       	ldi	r31, 0x00	; 0
        }
		
        // message handler
        if( port[p].rq.index < POINTER_SIZE )
        {
            currChunk->handler[port[p].rq.index] = currByte;
    3074:	e4 0d       	add	r30, r4
    3076:	f5 1d       	adc	r31, r5
            /// TODO: send NACK
            continue;
        }
		
        // message handler
        if( port[p].rq.index < POINTER_SIZE )
    3078:	82 30       	cpi	r24, 0x02	; 2
    307a:	10 f4       	brcc	.+4      	; 0x3080 <processBuffer+0x1a2>
        {
            currChunk->handler[port[p].rq.index] = currByte;
    307c:	64 8b       	std	Z+20, r22	; 0x14
    307e:	02 c0       	rjmp	.+4      	; 0x3084 <processBuffer+0x1a6>
        }
        // regular byte
        else
        {
            currChunk->data[port[p].rq.index-POINTER_SIZE] = currByte;
    3080:	32 97       	sbiw	r30, 0x02	; 2
    3082:	60 83       	st	Z, r22
        }

        port[p].rq.checksum = crcCalc(port[p].rq.checksum, currByte);
    3084:	f5 01       	movw	r30, r10
    3086:	80 81       	ld	r24, Z
    3088:	0e 94 5b 16 	call	0x2cb6	; 0x2cb6 <crcCalc>
    308c:	f5 01       	movw	r30, r10
    308e:	80 83       	st	Z, r24
        port[p].rq.index++;
    3090:	f6 01       	movw	r30, r12
    3092:	80 81       	ld	r24, Z
    3094:	8f 5f       	subi	r24, 0xFF	; 255
    3096:	80 83       	st	Z, r24
            byte parity = setParityFromByte(currByte);
        
            // restart the fill
            port[p].rq.index    = 0;
            port[p].rq.checksum = 0;
            wasEscape           = 0;
    3098:	21 2c       	mov	r2, r1
    309a:	1a c0       	rjmp	.+52     	; 0x30d0 <processBuffer+0x1f2>
        }
        
        // is an escape char        
        if( currByte == ESCAPE )
        {
            wasEscape = 1;   
    309c:	22 24       	eor	r2, r2
    309e:	23 94       	inc	r2
    30a0:	17 c0       	rjmp	.+46     	; 0x30d0 <processBuffer+0x1f2>
            currByte ^= ESCAPE_CHAR;
            wasEscape = 0;
        }

        // is transmitted checksum
        if( port[p].rq.index >= (DATA_SIZE + POINTER_SIZE) )
    30a2:	88 e5       	ldi	r24, 0x58	; 88
    30a4:	8e 9d       	mul	r24, r14
    30a6:	e0 01       	movw	r28, r0
    30a8:	8f 9d       	mul	r24, r15
    30aa:	d0 0d       	add	r29, r0
    30ac:	11 24       	eor	r1, r1
    30ae:	c0 5b       	subi	r28, 0xB0	; 176
    30b0:	db 4d       	sbci	r29, 0xDB	; 219
    30b2:	6e 01       	movw	r12, r28
    30b4:	f3 e1       	ldi	r31, 0x13	; 19
    30b6:	cf 0e       	add	r12, r31
    30b8:	d1 1c       	adc	r13, r1
        else
        {
            currChunk->data[port[p].rq.index-POINTER_SIZE] = currByte;
        }

        port[p].rq.checksum = crcCalc(port[p].rq.checksum, currByte);
    30ba:	5e 01       	movw	r10, r28
    30bc:	24 e1       	ldi	r18, 0x14	; 20
    30be:	a2 0e       	add	r10, r18
    30c0:	b1 1c       	adc	r11, r1
        {
            // checksum matches!
            if( currByte == port[p].rq.checksum )
            {
                currChunk->status &= ~CHUNK_FILLING;
                port[p].rq.flags  |=  CHUNK_READY;
    30c2:	8e 01       	movw	r16, r28
    30c4:	0b 5e       	subi	r16, 0xEB	; 235
    30c6:	1f 4f       	sbci	r17, 0xFF	; 255
                {
                    freeChunk(currChunk);
                }
              
                // remove from the port rq
                port[p].rq.curr = NULL;
    30c8:	4e 01       	movw	r8, r28
    30ca:	36 e1       	ldi	r19, 0x16	; 22
    30cc:	83 0e       	add	r8, r19
    30ce:	91 1c       	adc	r9, r1
        port[p].rq.index    = 0;
        port[p].rq.checksum = 0;
        wasEscape           = 0;
    }
                
    while( !isEmpty(&(port[p].rx)) )
    30d0:	c3 01       	movw	r24, r6
    30d2:	0e 94 c1 02 	call	0x582	; 0x582 <isEmpty>
    30d6:	88 23       	and	r24, r24
    30d8:	09 f4       	brne	.+2      	; 0x30dc <processBuffer+0x1fe>
    30da:	45 cf       	rjmp	.-374    	; 0x2f66 <processBuffer+0x88>
        port[p].rq.checksum = crcCalc(port[p].rq.checksum, currByte);
        port[p].rq.index++;
    }
    
    // store wasEscape
    wasEscapeStore[p] = wasEscape;
    30dc:	f7 01       	movw	r30, r14
    30de:	e2 56       	subi	r30, 0x62	; 98
    30e0:	f9 4d       	sbci	r31, 0xD9	; 217
    30e2:	20 82       	st	Z, r2
}
    30e4:	df 91       	pop	r29
    30e6:	cf 91       	pop	r28
    30e8:	1f 91       	pop	r17
    30ea:	0f 91       	pop	r16
    30ec:	ff 90       	pop	r15
    30ee:	ef 90       	pop	r14
    30f0:	df 90       	pop	r13
    30f2:	cf 90       	pop	r12
    30f4:	bf 90       	pop	r11
    30f6:	af 90       	pop	r10
    30f8:	9f 90       	pop	r9
    30fa:	8f 90       	pop	r8
    30fc:	7f 90       	pop	r7
    30fe:	6f 90       	pop	r6
    3100:	5f 90       	pop	r5
    3102:	4f 90       	pop	r4
    3104:	3f 90       	pop	r3
    3106:	2f 90       	pop	r2
    3108:	08 95       	ret

0000310a <nextPacket>:
Chunk* nextPacket(void)
{
    Chunk* c = NULL;

    // no packets
    if( globalRq.head == NULL )
    310a:	e0 91 46 21 	lds	r30, 0x2146
    310e:	f0 91 47 21 	lds	r31, 0x2147
    3112:	30 97       	sbiw	r30, 0x00	; 0
    3114:	51 f4       	brne	.+20     	; 0x312a <nextPacket+0x20>
    {
        globalRq.tail = NULL;
    3116:	10 92 48 21 	sts	0x2148, r1
    311a:	10 92 49 21 	sts	0x2149, r1
        globalRq.flags &= ~PACKET_READY;
    311e:	80 91 4a 21 	lds	r24, 0x214A
    3122:	8f 77       	andi	r24, 0x7F	; 127
    3124:	80 93 4a 21 	sts	0x214A, r24
        return NULL;
    3128:	13 c0       	rjmp	.+38     	; 0x3150 <nextPacket+0x46>
    }

    // update pointers
    c = globalRq.head;
    
    globalRq.head = c->next;
    312a:	82 89       	ldd	r24, Z+18	; 0x12
    312c:	93 89       	ldd	r25, Z+19	; 0x13
    312e:	80 93 46 21 	sts	0x2146, r24
    3132:	90 93 47 21 	sts	0x2147, r25
    if( globalRq.head == NULL )
    3136:	89 2b       	or	r24, r25
    3138:	49 f4       	brne	.+18     	; 0x314c <nextPacket+0x42>
    {
        globalRq.flags &= ~PACKET_READY;
    313a:	80 91 4a 21 	lds	r24, 0x214A
    313e:	8f 77       	andi	r24, 0x7F	; 127
    3140:	80 93 4a 21 	sts	0x214A, r24
        globalRq.tail = NULL;
    3144:	10 92 48 21 	sts	0x2148, r1
    3148:	10 92 49 21 	sts	0x2149, r1
    }
    
    // isolate and return
    c->next = NULL;
    314c:	12 8a       	std	Z+18, r1	; 0x12
    314e:	13 8a       	std	Z+19, r1	; 0x13
    return c;
}
    3150:	cf 01       	movw	r24, r30
    3152:	08 95       	ret

00003154 <sendOnSerial>:

// try sending stuff if available and ready
void sendOnSerial(PRef p)
{
    3154:	df 92       	push	r13
    3156:	ef 92       	push	r14
    3158:	ff 92       	push	r15
    315a:	0f 93       	push	r16
    315c:	1f 93       	push	r17
    315e:	cf 93       	push	r28
    3160:	df 93       	push	r29
    3162:	d8 2e       	mov	r13, r24
    // send acks
    if( shouldSendOddAck(port[p].sq) )
    3164:	08 2f       	mov	r16, r24
    3166:	10 e0       	ldi	r17, 0x00	; 0
    3168:	28 e5       	ldi	r18, 0x58	; 88
    316a:	82 9f       	mul	r24, r18
    316c:	c0 01       	movw	r24, r0
    316e:	11 24       	eor	r1, r1
    3170:	ec 01       	movw	r28, r24
    3172:	c0 5b       	subi	r28, 0xB0	; 176
    3174:	db 4d       	sbci	r29, 0xDB	; 219
    3176:	2e 85       	ldd	r18, Y+14	; 0x0e
    3178:	21 ff       	sbrs	r18, 1
    317a:	14 c0       	rjmp	.+40     	; 0x31a4 <sendOnSerial+0x50>
    {
        if( isEmpty(&(port[p].tx)) ) {
    317c:	b8 e8       	ldi	r27, 0x88	; 136
    317e:	eb 2e       	mov	r14, r27
    3180:	b4 e2       	ldi	r27, 0x24	; 36
    3182:	fb 2e       	mov	r15, r27
    3184:	e8 0e       	add	r14, r24
    3186:	f9 1e       	adc	r15, r25
    3188:	c7 01       	movw	r24, r14
    318a:	0e 94 c1 02 	call	0x582	; 0x582 <isEmpty>
    318e:	88 23       	and	r24, r24
    3190:	29 f0       	breq	.+10     	; 0x319c <sendOnSerial+0x48>
            pPutChar(ACK | ODD, port[p].pnum);
    3192:	68 81       	ld	r22, Y
    3194:	89 e0       	ldi	r24, 0x09	; 9
    3196:	0e 94 29 1a 	call	0x3452	; 0x3452 <pPutChar>
    319a:	04 c0       	rjmp	.+8      	; 0x31a4 <sendOnSerial+0x50>
        }
        else {
            push(ACK | ODD, &(port[p].tx));
    319c:	b7 01       	movw	r22, r14
    319e:	89 e0       	ldi	r24, 0x09	; 9
    31a0:	0e 94 8b 02 	call	0x516	; 0x516 <push>
        }
    }
    if( shouldSendEvenAck(port[p].sq) )
    31a4:	88 e5       	ldi	r24, 0x58	; 88
    31a6:	80 9f       	mul	r24, r16
    31a8:	e0 01       	movw	r28, r0
    31aa:	81 9f       	mul	r24, r17
    31ac:	d0 0d       	add	r29, r0
    31ae:	11 24       	eor	r1, r1
    31b0:	a0 e5       	ldi	r26, 0x50	; 80
    31b2:	ea 2e       	mov	r14, r26
    31b4:	a4 e2       	ldi	r26, 0x24	; 36
    31b6:	fa 2e       	mov	r15, r26
    31b8:	ec 0e       	add	r14, r28
    31ba:	fd 1e       	adc	r15, r29
    31bc:	f7 01       	movw	r30, r14
    31be:	86 85       	ldd	r24, Z+14	; 0x0e
    31c0:	80 ff       	sbrs	r24, 0
    31c2:	11 c0       	rjmp	.+34     	; 0x31e6 <sendOnSerial+0x92>
    {
        if( isEmpty(&(port[p].tx)) ) {
    31c4:	c8 57       	subi	r28, 0x78	; 120
    31c6:	db 4d       	sbci	r29, 0xDB	; 219
    31c8:	ce 01       	movw	r24, r28
    31ca:	0e 94 c1 02 	call	0x582	; 0x582 <isEmpty>
    31ce:	88 23       	and	r24, r24
    31d0:	31 f0       	breq	.+12     	; 0x31de <sendOnSerial+0x8a>
            pPutChar(ACK | EVEN, port[p].pnum);
    31d2:	f7 01       	movw	r30, r14
    31d4:	60 81       	ld	r22, Z
    31d6:	88 e0       	ldi	r24, 0x08	; 8
    31d8:	0e 94 29 1a 	call	0x3452	; 0x3452 <pPutChar>
    31dc:	04 c0       	rjmp	.+8      	; 0x31e6 <sendOnSerial+0x92>
        }
        else {
            push(ACK | EVEN, &(port[p].tx));
    31de:	be 01       	movw	r22, r28
    31e0:	88 e0       	ldi	r24, 0x08	; 8
    31e2:	0e 94 8b 02 	call	0x516	; 0x516 <push>
        }
    }
    clearSendAcks(port[p].sq);
    31e6:	28 e5       	ldi	r18, 0x58	; 88
    31e8:	20 9f       	mul	r18, r16
    31ea:	c0 01       	movw	r24, r0
    31ec:	21 9f       	mul	r18, r17
    31ee:	90 0d       	add	r25, r0
    31f0:	11 24       	eor	r1, r1
    31f2:	ec 01       	movw	r28, r24
    31f4:	c0 5b       	subi	r28, 0xB0	; 176
    31f6:	db 4d       	sbci	r29, 0xDB	; 219
    31f8:	2e 85       	ldd	r18, Y+14	; 0x0e
    31fa:	2c 7f       	andi	r18, 0xFC	; 252
    31fc:	2e 87       	std	Y+14, r18	; 0x0e
    
    // send Chunk?
    if( chunkReady(port[p].sq) )
    31fe:	27 ff       	sbrs	r18, 7
    3200:	4a c0       	rjmp	.+148    	; 0x3296 <sendOnSerial+0x142>
    {
        if( clearToSend(port[p].sq) )
    3202:	26 ff       	sbrs	r18, 6
    3204:	48 c0       	rjmp	.+144    	; 0x3296 <sendOnSerial+0x142>
        {
            // out of retries
            if( (port[p].sq.retry <= 0) || (port[p].sq.retry > NUM_RETRIES))
    3206:	2d 85       	ldd	r18, Y+13	; 0x0d
    3208:	21 50       	subi	r18, 0x01	; 1
    320a:	24 30       	cpi	r18, 0x04	; 4
    320c:	70 f0       	brcs	.+28     	; 0x322a <sendOnSerial+0xd6>
            {
                // reset the timer
                deregisterTimeout(&(port[p].sq.qtout.tout));
    320e:	8f 5a       	subi	r24, 0xAF	; 175
    3210:	9b 4d       	sbci	r25, 0xDB	; 219
    3212:	0e 94 04 0a 	call	0x1408	; 0x1408 <deregisterTimeout>

                // flush the queue
                flushSendQueue(p);
    3216:	8d 2d       	mov	r24, r13
    3218:	0e 94 2b 03 	call	0x656	; 0x656 <flushSendQueue>
                        
                // reset the flags
                port[p].sq.retry    = NUM_RETRIES;
    321c:	94 e0       	ldi	r25, 0x04	; 4
    321e:	9d 87       	std	Y+13, r25	; 0x0d
                port[p].sq.flags   |= CLEAR_TO_SEND;
    3220:	8e 85       	ldd	r24, Y+14	; 0x0e
    3222:	80 64       	ori	r24, 0x40	; 64
                flipParity(port[p].sq);
    3224:	89 27       	eor	r24, r25
    3226:	8e 87       	std	Y+14, r24	; 0x0e

                // ensemble level updates - remove neighbor, restart neighbor scanning
                //     These don't belong in data-link in my opinion
                //restartScan(p);

                return;
    3228:	36 c0       	rjmp	.+108    	; 0x3296 <sendOnSerial+0x142>
            }
            port[p].sq.retry--;
    322a:	2d 87       	std	Y+13, r18	; 0x0d

#ifdef CLOCK_SYNC
			if (isAClockSyncMessage(port[p].sq.head) == 1)
    322c:	8f 85       	ldd	r24, Y+15	; 0x0f
    322e:	98 89       	ldd	r25, Y+16	; 0x10
    3230:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <isAClockSyncMessage>
    3234:	81 30       	cpi	r24, 0x01	; 1
    3236:	21 f4       	brne	.+8      	; 0x3240 <sendOnSerial+0xec>
			{		
				// insert send time
				insertSendTime(port[p].sq.head);
    3238:	8f 85       	ldd	r24, Y+15	; 0x0f
    323a:	98 89       	ldd	r25, Y+16	; 0x10
    323c:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <insertSendTime>
			}
#endif
            sendToBuffer(p, port[p].sq.head, sendParity(port[p].sq) );
    3240:	88 e5       	ldi	r24, 0x58	; 88
    3242:	80 9f       	mul	r24, r16
    3244:	70 01       	movw	r14, r0
    3246:	81 9f       	mul	r24, r17
    3248:	f0 0c       	add	r15, r0
    324a:	11 24       	eor	r1, r1
    324c:	e7 01       	movw	r28, r14
    324e:	c0 5b       	subi	r28, 0xB0	; 176
    3250:	db 4d       	sbci	r29, 0xDB	; 219
    3252:	4e 85       	ldd	r20, Y+14	; 0x0e
    3254:	42 fb       	bst	r20, 2
    3256:	44 27       	eor	r20, r20
    3258:	40 f9       	bld	r20, 0
    325a:	6f 85       	ldd	r22, Y+15	; 0x0f
    325c:	78 89       	ldd	r23, Y+16	; 0x10
    325e:	8d 2d       	mov	r24, r13
    3260:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <sendToBuffer>
            port[p].sq.flags &= ~CLEAR_TO_SEND;
    3264:	8e 85       	ldd	r24, Y+14	; 0x0e
    3266:	8f 7b       	andi	r24, 0xBF	; 191
    3268:	8e 87       	std	Y+14, r24	; 0x0e
            
            // start the timeout
            port[p].sq.qtout.tout.calltime = getTime() + DEFAULT_TIMEOUT;
    326a:	0e 94 71 09 	call	0x12e2	; 0x12e2 <getTime>
    326e:	6e 5c       	subi	r22, 0xCE	; 206
    3270:	7f 4f       	sbci	r23, 0xFF	; 255
    3272:	8f 4f       	sbci	r24, 0xFF	; 255
    3274:	9f 4f       	sbci	r25, 0xFF	; 255
    3276:	6b 83       	std	Y+3, r22	; 0x03
    3278:	7c 83       	std	Y+4, r23	; 0x04
    327a:	8d 83       	std	Y+5, r24	; 0x05
    327c:	9e 83       	std	Y+6, r25	; 0x06
            registerTimeout(&(port[p].sq.qtout.tout));
    327e:	c7 01       	movw	r24, r14
    3280:	8f 5a       	subi	r24, 0xAF	; 175
    3282:	9b 4d       	sbci	r25, 0xDB	; 219
        }
    }
}
    3284:	df 91       	pop	r29
    3286:	cf 91       	pop	r28
    3288:	1f 91       	pop	r17
    328a:	0f 91       	pop	r16
    328c:	ff 90       	pop	r15
    328e:	ef 90       	pop	r14
    3290:	df 90       	pop	r13
            sendToBuffer(p, port[p].sq.head, sendParity(port[p].sq) );
            port[p].sq.flags &= ~CLEAR_TO_SEND;
            
            // start the timeout
            port[p].sq.qtout.tout.calltime = getTime() + DEFAULT_TIMEOUT;
            registerTimeout(&(port[p].sq.qtout.tout));
    3292:	0c 94 bc 09 	jmp	0x1378	; 0x1378 <registerTimeout>
        }
    }
}
    3296:	df 91       	pop	r29
    3298:	cf 91       	pop	r28
    329a:	1f 91       	pop	r17
    329c:	0f 91       	pop	r16
    329e:	ff 90       	pop	r15
    32a0:	ef 90       	pop	r14
    32a2:	df 90       	pop	r13
    32a4:	08 95       	ret

000032a6 <initHWDataLink>:

// initialize
void initHWDataLink(){
    32a6:	08 95       	ret

000032a8 <setHWLED>:
	
	//r = 255 - r;
	//g = 255 - g;
	//b = 255 - b;

	currentRGB[0] = r;
    32a8:	80 93 07 22 	sts	0x2207, r24
	currentRGB[1] = g;
    32ac:	60 93 08 22 	sts	0x2208, r22
	currentRGB[2] = b;
    32b0:	40 93 09 22 	sts	0x2209, r20

	rr = (uint16_t)i*(uint16_t)r;
    32b4:	28 9f       	mul	r18, r24
    32b6:	c0 01       	movw	r24, r0
    32b8:	11 24       	eor	r1, r1
	gg = (uint16_t)i*(uint16_t)g;
    32ba:	26 9f       	mul	r18, r22
    32bc:	b0 01       	movw	r22, r0
    32be:	11 24       	eor	r1, r1
	bb = (uint16_t)i*(uint16_t)b;
    32c0:	24 9f       	mul	r18, r20
    32c2:	a0 01       	movw	r20, r0
    32c4:	11 24       	eor	r1, r1
	
	rr = 0xFFFF - rr;
    32c6:	80 95       	com	r24
    32c8:	90 95       	com	r25
	gg = 0xFFFF - gg;
    32ca:	60 95       	com	r22
    32cc:	70 95       	com	r23
	bb = 0xFFFF - bb;
    32ce:	40 95       	com	r20
    32d0:	50 95       	com	r21
	
	TCC0.CCABUF = rr;
    32d2:	e0 e0       	ldi	r30, 0x00	; 0
    32d4:	f8 e0       	ldi	r31, 0x08	; 8
    32d6:	80 af       	std	Z+56, r24	; 0x38
    32d8:	91 af       	std	Z+57, r25	; 0x39
	TCC0.CCBBUF = rr;
    32da:	82 af       	std	Z+58, r24	; 0x3a
    32dc:	93 af       	std	Z+59, r25	; 0x3b

	TCD0.CCABUF = gg;
    32de:	e0 e0       	ldi	r30, 0x00	; 0
    32e0:	f9 e0       	ldi	r31, 0x09	; 9
    32e2:	60 af       	std	Z+56, r22	; 0x38
    32e4:	71 af       	std	Z+57, r23	; 0x39
	TCD0.CCBBUF = bb;
    32e6:	42 af       	std	Z+58, r20	; 0x3a
    32e8:	53 af       	std	Z+59, r21	; 0x3b
	
	TCC1.CCABUF = gg;
    32ea:	e0 e4       	ldi	r30, 0x40	; 64
    32ec:	f8 e0       	ldi	r31, 0x08	; 8
    32ee:	60 af       	std	Z+56, r22	; 0x38
    32f0:	71 af       	std	Z+57, r23	; 0x39
	TCC1.CCBBUF = bb;
    32f2:	42 af       	std	Z+58, r20	; 0x3a
    32f4:	53 af       	std	Z+59, r21	; 0x3b
    32f6:	08 95       	ret

000032f8 <initHWLED>:


void initHWLED()
{
	// Initialize the RED
	TCC0.CTRLA |= TC_CLKSEL_DIV4_gc;	// RED clock source
    32f8:	e0 e0       	ldi	r30, 0x00	; 0
    32fa:	f8 e0       	ldi	r31, 0x08	; 8
    32fc:	80 81       	ld	r24, Z
    32fe:	83 60       	ori	r24, 0x03	; 3
    3300:	80 83       	st	Z, r24
	TCC0.CTRLB = TC0_CCAEN_bm | TC0_CCBEN_bm | TC_WGMODE_SS_gc;	// enable REDs, set WGM to SS PWM
    3302:	33 e3       	ldi	r19, 0x33	; 51
    3304:	31 83       	std	Z+1, r19	; 0x01
	TCC0.PERBUF = 0xFFFF;		// set period to 8-bit for 8-bit resolution
    3306:	8f ef       	ldi	r24, 0xFF	; 255
    3308:	9f ef       	ldi	r25, 0xFF	; 255
    330a:	86 ab       	std	Z+54, r24	; 0x36
    330c:	97 ab       	std	Z+55, r25	; 0x37
	TCC0.CCABUF = 0;		// set to off by default
    330e:	10 ae       	std	Z+56, r1	; 0x38
    3310:	11 ae       	std	Z+57, r1	; 0x39
	TCC0.CCBBUF = 0;		// set to off by default
    3312:	12 ae       	std	Z+58, r1	; 0x3a
    3314:	13 ae       	std	Z+59, r1	; 0x3b
	PORTC.DIRSET = PIN0_bm | PIN1_bm;  // set REDs to OUTPUT
    3316:	a0 e4       	ldi	r26, 0x40	; 64
    3318:	b6 e0       	ldi	r27, 0x06	; 6
    331a:	23 e0       	ldi	r18, 0x03	; 3
    331c:	11 96       	adiw	r26, 0x01	; 1
    331e:	2c 93       	st	X, r18
    3320:	11 97       	sbiw	r26, 0x01	; 1

	TCC1.CTRLA = TC_CLKSEL_DIV4_gc;	// BLUE clock source
    3322:	e0 e4       	ldi	r30, 0x40	; 64
    3324:	f8 e0       	ldi	r31, 0x08	; 8
    3326:	20 83       	st	Z, r18
	TCC1.CTRLB = TC1_CCAEN_bm | TC1_CCBEN_bm | TC_WGMODE_SS_gc;	// enable BLUEs, set WGM to SS PWM
    3328:	31 83       	std	Z+1, r19	; 0x01
	TCC1.PERBUF = 0xFFFF;		// set period to 8-bit for 8-bit resolution
    332a:	86 ab       	std	Z+54, r24	; 0x36
    332c:	97 ab       	std	Z+55, r25	; 0x37
	TCC1.CCABUF = 0;		// set to off by default
    332e:	10 ae       	std	Z+56, r1	; 0x38
    3330:	11 ae       	std	Z+57, r1	; 0x39
	TCC1.CCBBUF = 0;		// set to off by default
    3332:	12 ae       	std	Z+58, r1	; 0x3a
    3334:	13 ae       	std	Z+59, r1	; 0x3b
	PORTC.DIRSET = PIN4_bm | PIN5_bm;  // set BLUEs to OUTPUT
    3336:	40 e3       	ldi	r20, 0x30	; 48
    3338:	11 96       	adiw	r26, 0x01	; 1
    333a:	4c 93       	st	X, r20

	TCD0.CTRLA = TC_CLKSEL_DIV4_gc;	// GREEN clock source
    333c:	e0 e0       	ldi	r30, 0x00	; 0
    333e:	f9 e0       	ldi	r31, 0x09	; 9
    3340:	20 83       	st	Z, r18
	TCD0.CTRLB = TC0_CCAEN_bm | TC0_CCBEN_bm | TC_WGMODE_SS_gc;	// enable REDs, set WGM to SS PWM
    3342:	31 83       	std	Z+1, r19	; 0x01
	TCD0.PERBUF = 0xFFFF;		// set period to 8-bit for 8-bit resolution
    3344:	86 ab       	std	Z+54, r24	; 0x36
    3346:	97 ab       	std	Z+55, r25	; 0x37
	TCD0.CCABUF = 0;		// set to off by default
    3348:	10 ae       	std	Z+56, r1	; 0x38
    334a:	11 ae       	std	Z+57, r1	; 0x39
	TCD0.CCBBUF = 0;		// set to off by default
    334c:	12 ae       	std	Z+58, r1	; 0x3a
    334e:	13 ae       	std	Z+59, r1	; 0x3b
	PORTD.DIRSET = PIN0_bm | PIN1_bm;  // set GREENs to OUTPUT	
    3350:	e0 e6       	ldi	r30, 0x60	; 96
    3352:	f6 e0       	ldi	r31, 0x06	; 6
    3354:	21 83       	std	Z+1, r18	; 0x01
    3356:	08 95       	ret

00003358 <store>:
//
//  nv_addr points to the desired EEMEM structure address (if you declared it using 'type EEMEM mydata', then '(char *)&mydata'
//  data points to the desired SRAM structure address
//  len    is sizeof(type)
void store(void * nv_addr, void * data, int len)
{
    3358:	cf 92       	push	r12
    335a:	df 92       	push	r13
    335c:	ef 92       	push	r14
    335e:	ff 92       	push	r15
    3360:	0f 93       	push	r16
    3362:	1f 93       	push	r17
    3364:	cf 93       	push	r28
    3366:	df 93       	push	r29
    3368:	8c 01       	movw	r16, r24
    336a:	7b 01       	movw	r14, r22
    336c:	ea 01       	movw	r28, r20
    while(len != 0)
    {
        // grab the page offset address from the current
        partial_offset = (uint16_t)nv_addr & (EEPROM_PAGESIZE - 1);
    
        partial_length = EEPROM_PAGESIZE - partial_offset;
    336e:	30 e2       	ldi	r19, 0x20	; 32
    3370:	c3 2e       	mov	r12, r19
//  len    is sizeof(type)
void store(void * nv_addr, void * data, int len)
{
    uint8_t partial_offset, partial_length;

    while(len != 0)
    3372:	1e c0       	rjmp	.+60     	; 0x33b0 <store+0x58>
    {
        // grab the page offset address from the current
        partial_offset = (uint16_t)nv_addr & (EEPROM_PAGESIZE - 1);
    3374:	60 2f       	mov	r22, r16
    3376:	6f 71       	andi	r22, 0x1F	; 31
    
        partial_length = EEPROM_PAGESIZE - partial_offset;
    3378:	dc 2c       	mov	r13, r12
    337a:	d6 1a       	sub	r13, r22
        
        if(partial_length > len)
    337c:	8d 2d       	mov	r24, r13
    337e:	90 e0       	ldi	r25, 0x00	; 0
    3380:	c8 17       	cp	r28, r24
    3382:	d9 07       	cpc	r29, r25
    3384:	0c f4       	brge	.+2      	; 0x3388 <store+0x30>
        {
            partial_length = len;
    3386:	dc 2e       	mov	r13, r28
        }

        EEPROM_LoadPartialPage(data, partial_offset, partial_length);
    3388:	4d 2d       	mov	r20, r13
    338a:	c7 01       	movw	r24, r14
    338c:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <EEPROM_LoadPartialPage>
        EEPROM_AtomicWritePage((uint16_t)nv_addr / (EEPROM_PAGESIZE));
    3390:	c8 01       	movw	r24, r16
    3392:	25 e0       	ldi	r18, 0x05	; 5
    3394:	96 95       	lsr	r25
    3396:	87 95       	ror	r24
    3398:	2a 95       	dec	r18
    339a:	e1 f7       	brne	.-8      	; 0x3394 <store+0x3c>
    339c:	0e 94 fe 12 	call	0x25fc	; 0x25fc <EEPROM_AtomicWritePage>

        len -= partial_length;
    33a0:	4d 2d       	mov	r20, r13
    33a2:	50 e0       	ldi	r21, 0x00	; 0
    33a4:	c4 1b       	sub	r28, r20
    33a6:	d5 0b       	sbc	r29, r21
        nv_addr += partial_length;
    33a8:	04 0f       	add	r16, r20
    33aa:	15 1f       	adc	r17, r21
        data += partial_length;
    33ac:	e4 0e       	add	r14, r20
    33ae:	f5 1e       	adc	r15, r21
//  len    is sizeof(type)
void store(void * nv_addr, void * data, int len)
{
    uint8_t partial_offset, partial_length;

    while(len != 0)
    33b0:	20 97       	sbiw	r28, 0x00	; 0
    33b2:	01 f7       	brne	.-64     	; 0x3374 <store+0x1c>
        len -= partial_length;
        nv_addr += partial_length;
        data += partial_length;
    }
    
}
    33b4:	df 91       	pop	r29
    33b6:	cf 91       	pop	r28
    33b8:	1f 91       	pop	r17
    33ba:	0f 91       	pop	r16
    33bc:	ff 90       	pop	r15
    33be:	ef 90       	pop	r14
    33c0:	df 90       	pop	r13
    33c2:	cf 90       	pop	r12
    33c4:	08 95       	ret

000033c6 <restore>:

// this could be done in pages but reads are pretty quick so it shouldn't matter
void restore(void * vaddr, void * vnv_addr, int len)
{    
    33c6:	ef 92       	push	r14
    33c8:	ff 92       	push	r15
    33ca:	0f 93       	push	r16
    33cc:	1f 93       	push	r17
    33ce:	cf 93       	push	r28
    33d0:	df 93       	push	r29
    33d2:	7a 01       	movw	r14, r20
    }
    
}

// this could be done in pages but reads are pretty quick so it shouldn't matter
void restore(void * vaddr, void * vnv_addr, int len)
    33d4:	e6 0e       	add	r14, r22
    33d6:	f7 1e       	adc	r15, r23
{    
	byte *addr=(byte *)vaddr;
	byte *nv_addr=(byte *) vnv_addr;
    33d8:	eb 01       	movw	r28, r22
}

// this could be done in pages but reads are pretty quick so it shouldn't matter
void restore(void * vaddr, void * vnv_addr, int len)
{    
	byte *addr=(byte *)vaddr;
    33da:	8c 01       	movw	r16, r24
	byte *nv_addr=(byte *) vnv_addr;
    while(len != 0)
    33dc:	0f c0       	rjmp	.+30     	; 0x33fc <restore+0x36>
    {
        *addr = EEPROM_ReadByte(((uint16_t)(nv_addr) / (EEPROM_PAGESIZE)), (uint16_t)(nv_addr) & (EEPROM_PAGESIZE-1));
    33de:	be 01       	movw	r22, r28
    33e0:	6f 71       	andi	r22, 0x1F	; 31
    33e2:	77 27       	eor	r23, r23
    33e4:	ce 01       	movw	r24, r28
    33e6:	45 e0       	ldi	r20, 0x05	; 5
    33e8:	96 95       	lsr	r25
    33ea:	87 95       	ror	r24
    33ec:	4a 95       	dec	r20
    33ee:	e1 f7       	brne	.-8      	; 0x33e8 <restore+0x22>
    33f0:	0e 94 2c 12 	call	0x2458	; 0x2458 <EEPROM_ReadByte>
    33f4:	f8 01       	movw	r30, r16
    33f6:	81 93       	st	Z+, r24
    33f8:	8f 01       	movw	r16, r30
        nv_addr++;
    33fa:	21 96       	adiw	r28, 0x01	; 1
// this could be done in pages but reads are pretty quick so it shouldn't matter
void restore(void * vaddr, void * vnv_addr, int len)
{    
	byte *addr=(byte *)vaddr;
	byte *nv_addr=(byte *) vnv_addr;
    while(len != 0)
    33fc:	ce 15       	cp	r28, r14
    33fe:	df 05       	cpc	r29, r15
    3400:	71 f7       	brne	.-36     	; 0x33de <restore+0x18>
        *addr = EEPROM_ReadByte(((uint16_t)(nv_addr) / (EEPROM_PAGESIZE)), (uint16_t)(nv_addr) & (EEPROM_PAGESIZE-1));
        nv_addr++;
        addr++;
        len--;
    }
}
    3402:	df 91       	pop	r29
    3404:	cf 91       	pop	r28
    3406:	1f 91       	pop	r17
    3408:	0f 91       	pop	r16
    340a:	ff 90       	pop	r15
    340c:	ef 90       	pop	r14
    340e:	08 95       	ret

00003410 <getGUID>:
#define ID_BYTE_ADDR 0x00


/* TODO: This is WRONG. It should be Uid, but the build system is being stupid and now is not a good time to spend forever trying to fix it. */
//reads GUID from eeprom
uint16_t getGUID(){
    3410:	cf 93       	push	r28
  //return 255;
	//TODO: read from eeprom
  return (((uint16_t)EEPROM_ReadByte(ID_PAGE_ADDR, ID_BYTE_ADDR))<<8) |
    3412:	60 e0       	ldi	r22, 0x00	; 0
    3414:	80 e0       	ldi	r24, 0x00	; 0
    3416:	0e 94 2c 12 	call	0x2458	; 0x2458 <EEPROM_ReadByte>
    341a:	c8 2f       	mov	r28, r24
	  ((uint16_t)EEPROM_ReadByte(ID_PAGE_ADDR, ID_BYTE_ADDR+1));
    341c:	61 e0       	ldi	r22, 0x01	; 1
    341e:	80 e0       	ldi	r24, 0x00	; 0
    3420:	0e 94 2c 12 	call	0x2458	; 0x2458 <EEPROM_ReadByte>
/* TODO: This is WRONG. It should be Uid, but the build system is being stupid and now is not a good time to spend forever trying to fix it. */
//reads GUID from eeprom
uint16_t getGUID(){
  //return 255;
	//TODO: read from eeprom
  return (((uint16_t)EEPROM_ReadByte(ID_PAGE_ADDR, ID_BYTE_ADDR))<<8) |
    3424:	3c 2f       	mov	r19, r28
    3426:	20 e0       	ldi	r18, 0x00	; 0
    3428:	28 2b       	or	r18, r24
	  ((uint16_t)EEPROM_ReadByte(ID_PAGE_ADDR, ID_BYTE_ADDR+1));
}
    342a:	c9 01       	movw	r24, r18
    342c:	cf 91       	pop	r28
    342e:	08 95       	ret

00003430 <u_putchar>:
void initHWUart(USART_t * uart);


void u_putchar(char c, USART_t * uart)
{
	while(!(uart->STATUS & USART_DREIF_bm));
    3430:	fb 01       	movw	r30, r22
    3432:	91 81       	ldd	r25, Z+1	; 0x01
    3434:	95 ff       	sbrs	r25, 5
    3436:	fc cf       	rjmp	.-8      	; 0x3430 <u_putchar>
    //loop_until_bit_is_set(UCSR0A, UDRE0);
	// Load buffer with your character
    uart->DATA = c;
    3438:	80 83       	st	Z, r24
    343a:	08 95       	ret

0000343c <u_getchar>:
int	u_getchar(USART_t * uart)
{
	//char c;
	// Wait for the receive buffer to be filled
    //loop_until_bit_is_set(UCSR0A, RXC0);
	if((uart->STATUS & USART_RXCIF_bm))
    343c:	fc 01       	movw	r30, r24
    343e:	21 81       	ldd	r18, Z+1	; 0x01
    3440:	27 ff       	sbrs	r18, 7
    3442:	03 c0       	rjmp	.+6      	; 0x344a <u_getchar+0xe>
	{
		// Read the receive buffer
		//c = uart->DATA;
		return uart->DATA;
    3444:	20 81       	ld	r18, Z
    3446:	30 e0       	ldi	r19, 0x00	; 0
    3448:	02 c0       	rjmp	.+4      	; 0x344e <u_getchar+0x12>
	}
	else
	{
		return -1;
    344a:	2f ef       	ldi	r18, 0xFF	; 255
    344c:	3f ef       	ldi	r19, 0xFF	; 255
	}
}
    344e:	c9 01       	movw	r24, r18
    3450:	08 95       	ret

00003452 <pPutChar>:

void pPutChar(char c, PRef p)
{
	if(p >= 0 && p < NUM_PORTS)
    3452:	66 30       	cpi	r22, 0x06	; 6
    3454:	78 f4       	brcc	.+30     	; 0x3474 <pPutChar+0x22>
	{
		if(hwPort[p].ptype == HARDWARE_UART)
    3456:	70 e0       	ldi	r23, 0x00	; 0
    3458:	fb 01       	movw	r30, r22
    345a:	ee 0f       	add	r30, r30
    345c:	ff 1f       	adc	r31, r31
    345e:	e6 0f       	add	r30, r22
    3460:	f7 1f       	adc	r31, r23
    3462:	ec 55       	subi	r30, 0x5C	; 92
    3464:	f9 4d       	sbci	r31, 0xD9	; 217
    3466:	92 81       	ldd	r25, Z+2	; 0x02
    3468:	91 11       	cpse	r25, r1
    346a:	04 c0       	rjmp	.+8      	; 0x3474 <pPutChar+0x22>
		{
			u_putchar(c, hwPort[p].uart.huart);
    346c:	60 81       	ld	r22, Z
    346e:	71 81       	ldd	r23, Z+1	; 0x01
    3470:	0c 94 18 1a 	jmp	0x3430	; 0x3430 <u_putchar>
    3474:	08 95       	ret

00003476 <pGetChar>:
	}
}

int pGetChar(PRef p)
{
	if(p >= 0 && p < NUM_PORTS)
    3476:	86 30       	cpi	r24, 0x06	; 6
    3478:	a0 f4       	brcc	.+40     	; 0x34a2 <pGetChar+0x2c>
	{
		if(hwPort[p].ptype == HARDWARE_UART)
    347a:	90 e0       	ldi	r25, 0x00	; 0
    347c:	fc 01       	movw	r30, r24
    347e:	ee 0f       	add	r30, r30
    3480:	ff 1f       	adc	r31, r31
    3482:	e8 0f       	add	r30, r24
    3484:	f9 1f       	adc	r31, r25
    3486:	ec 55       	subi	r30, 0x5C	; 92
    3488:	f9 4d       	sbci	r31, 0xD9	; 217
    348a:	82 81       	ldd	r24, Z+2	; 0x02
    348c:	81 11       	cpse	r24, r1
    348e:	09 c0       	rjmp	.+18     	; 0x34a2 <pGetChar+0x2c>
		{
			return u_getchar(hwPort[p].uart.huart);
    3490:	01 90       	ld	r0, Z+
    3492:	f0 81       	ld	r31, Z
    3494:	e0 2d       	mov	r30, r0
int	u_getchar(USART_t * uart)
{
	//char c;
	// Wait for the receive buffer to be filled
    //loop_until_bit_is_set(UCSR0A, RXC0);
	if((uart->STATUS & USART_RXCIF_bm))
    3496:	81 81       	ldd	r24, Z+1	; 0x01
    3498:	87 ff       	sbrs	r24, 7
    349a:	03 c0       	rjmp	.+6      	; 0x34a2 <pGetChar+0x2c>
	{
		// Read the receive buffer
		//c = uart->DATA;
		return uart->DATA;
    349c:	20 81       	ld	r18, Z
    349e:	30 e0       	ldi	r19, 0x00	; 0
    34a0:	02 c0       	rjmp	.+4      	; 0x34a6 <pGetChar+0x30>
		{
			//return su_getchar(hwPort[p].uart.suart);
		}
	}

	return -1;
    34a2:	2f ef       	ldi	r18, 0xFF	; 255
    34a4:	3f ef       	ldi	r19, 0xFF	; 255
}
    34a6:	c9 01       	movw	r24, r18
    34a8:	08 95       	ret

000034aa <initHWUart>:
	PORTD.DIRSET = PIN3_bm;	
	initializeHWPort(&(hwPort[DOWN]), &USARTD0);
}

void initHWUart(USART_t * huart)
{
    34aa:	fc 01       	movw	r30, r24
	huart->CTRLB = USART_RXEN_bm | USART_TXEN_bm;		// turn on RX/TX, somewhat helpful!
    34ac:	88 e1       	ldi	r24, 0x18	; 24
    34ae:	84 83       	std	Z+4, r24	; 0x04
	huart->CTRLC = USART_CHSIZE_8BIT_gc;				// use 8-bit data
    34b0:	83 e0       	ldi	r24, 0x03	; 3
    34b2:	85 83       	std	Z+5, r24	; 0x05

	huart->CTRLA = USART_RXCINTLVL_HI_gc | USART_TXCINTLVL_HI_gc;	// enable RX/TX interrupt support
    34b4:	8c e3       	ldi	r24, 0x3C	; 60
    34b6:	83 83       	std	Z+3, r24	; 0x03
	huart->BAUDCTRLA = 51;  // 38400 		// 57600   			//103;	//19200 	16; // 115200
    34b8:	83 e3       	ldi	r24, 0x33	; 51
    34ba:	86 83       	std	Z+6, r24	; 0x06
	huart->BAUDCTRLB = 0;				//0xB4;  // 57600, set to 0 for others
    34bc:	17 82       	std	Z+7, r1	; 0x07
    34be:	08 95       	ret

000034c0 <initializeHWPort>:
	return -1;
}

void initializeHWPort(HWPort *p, USART_t *huart)
{
	if(huart != NULL)
    34c0:	61 15       	cp	r22, r1
    34c2:	71 05       	cpc	r23, r1
    34c4:	39 f0       	breq	.+14     	; 0x34d4 <initializeHWPort+0x14>
	{
		(p->uart).huart = huart;
    34c6:	fc 01       	movw	r30, r24
    34c8:	60 83       	st	Z, r22
    34ca:	71 83       	std	Z+1, r23	; 0x01
		p->ptype = HARDWARE_UART;
    34cc:	12 82       	std	Z+2, r1	; 0x02

		initHWUart(huart);
    34ce:	cb 01       	movw	r24, r22
    34d0:	0c 94 55 1a 	jmp	0x34aa	; 0x34aa <initHWUart>
    34d4:	08 95       	ret

000034d6 <initHWPorts>:
	}
}

void initHWPorts()
{
    34d6:	ff 92       	push	r15
    34d8:	0f 93       	push	r16
    34da:	1f 93       	push	r17
    34dc:	cf 93       	push	r28
    34de:	df 93       	push	r29
	// male headers
	PORTD.DIRSET = PIN7_bm;
    34e0:	c0 e6       	ldi	r28, 0x60	; 96
    34e2:	d6 e0       	ldi	r29, 0x06	; 6
    34e4:	30 e8       	ldi	r19, 0x80	; 128
    34e6:	f3 2e       	mov	r15, r19
    34e8:	f9 82       	std	Y+1, r15	; 0x01

void initializeHWPort(HWPort *p, USART_t *huart)
{
	if(huart != NULL)
	{
		(p->uart).huart = huart;
    34ea:	80 eb       	ldi	r24, 0xB0	; 176
    34ec:	99 e0       	ldi	r25, 0x09	; 9
    34ee:	80 93 b3 26 	sts	0x26B3, r24
    34f2:	90 93 b4 26 	sts	0x26B4, r25
		p->ptype = HARDWARE_UART;
    34f6:	10 92 b5 26 	sts	0x26B5, r1

		initHWUart(huart);
    34fa:	0e 94 55 1a 	call	0x34aa	; 0x34aa <initHWUart>
	// male headers
	PORTD.DIRSET = PIN7_bm;
	initializeHWPort(&(hwPort[UP]), &USARTD1);

	// near the double TVS diodes
	PORTC.DIRSET = PIN7_bm;
    34fe:	00 e4       	ldi	r16, 0x40	; 64
    3500:	16 e0       	ldi	r17, 0x06	; 6
    3502:	f8 01       	movw	r30, r16
    3504:	f1 82       	std	Z+1, r15	; 0x01

void initializeHWPort(HWPort *p, USART_t *huart)
{
	if(huart != NULL)
	{
		(p->uart).huart = huart;
    3506:	80 eb       	ldi	r24, 0xB0	; 176
    3508:	98 e0       	ldi	r25, 0x08	; 8
    350a:	80 93 a7 26 	sts	0x26A7, r24
    350e:	90 93 a8 26 	sts	0x26A8, r25
		p->ptype = HARDWARE_UART;
    3512:	10 92 a9 26 	sts	0x26A9, r1

		initHWUart(huart);
    3516:	0e 94 55 1a 	call	0x34aa	; 0x34aa <initHWUart>
	// near the double TVS diodes
	PORTC.DIRSET = PIN7_bm;
	initializeHWPort(&(hwPort[NORTH]), &USARTC1);
	
	// closest to audio amp
	PORTE.DIRSET = PIN3_bm;
    351a:	48 e0       	ldi	r20, 0x08	; 8
    351c:	f4 2e       	mov	r15, r20
    351e:	e0 e8       	ldi	r30, 0x80	; 128
    3520:	f6 e0       	ldi	r31, 0x06	; 6
    3522:	f1 82       	std	Z+1, r15	; 0x01

void initializeHWPort(HWPort *p, USART_t *huart)
{
	if(huart != NULL)
	{
		(p->uart).huart = huart;
    3524:	80 ea       	ldi	r24, 0xA0	; 160
    3526:	9a e0       	ldi	r25, 0x0A	; 10
    3528:	80 93 b0 26 	sts	0x26B0, r24
    352c:	90 93 b1 26 	sts	0x26B1, r25
		p->ptype = HARDWARE_UART;
    3530:	10 92 b2 26 	sts	0x26B2, r1

		initHWUart(huart);
    3534:	0e 94 55 1a 	call	0x34aa	; 0x34aa <initHWUart>
	// closest to audio amp
	PORTE.DIRSET = PIN3_bm;
	initializeHWPort(&(hwPort[SOUTH]), &USARTE0);
	
	// closest to LEDs
	PORTF.DIRSET = PIN3_bm;	
    3538:	e0 ea       	ldi	r30, 0xA0	; 160
    353a:	f6 e0       	ldi	r31, 0x06	; 6
    353c:	f1 82       	std	Z+1, r15	; 0x01

void initializeHWPort(HWPort *p, USART_t *huart)
{
	if(huart != NULL)
	{
		(p->uart).huart = huart;
    353e:	80 ea       	ldi	r24, 0xA0	; 160
    3540:	9b e0       	ldi	r25, 0x0B	; 11
    3542:	80 93 aa 26 	sts	0x26AA, r24
    3546:	90 93 ab 26 	sts	0x26AB, r25
		p->ptype = HARDWARE_UART;
    354a:	10 92 ac 26 	sts	0x26AC, r1

		initHWUart(huart);
    354e:	0e 94 55 1a 	call	0x34aa	; 0x34aa <initHWUart>
	// closest to LEDs
	PORTF.DIRSET = PIN3_bm;	
	initializeHWPort(&(hwPort[EAST]), &USARTF0);
	
	// closest to analog input dividers
	PORTC.DIRSET = PIN3_bm;	
    3552:	f8 01       	movw	r30, r16
    3554:	f1 82       	std	Z+1, r15	; 0x01

void initializeHWPort(HWPort *p, USART_t *huart)
{
	if(huart != NULL)
	{
		(p->uart).huart = huart;
    3556:	80 ea       	ldi	r24, 0xA0	; 160
    3558:	98 e0       	ldi	r25, 0x08	; 8
    355a:	80 93 ad 26 	sts	0x26AD, r24
    355e:	90 93 ae 26 	sts	0x26AE, r25
		p->ptype = HARDWARE_UART;
    3562:	10 92 af 26 	sts	0x26AF, r1

		initHWUart(huart);
    3566:	0e 94 55 1a 	call	0x34aa	; 0x34aa <initHWUart>
	
	// closest to analog input dividers
	PORTC.DIRSET = PIN3_bm;	
	initializeHWPort(&(hwPort[WEST]), &USARTC0);
	
	PORTD.DIRSET = PIN3_bm;	
    356a:	f9 82       	std	Y+1, r15	; 0x01

void initializeHWPort(HWPort *p, USART_t *huart)
{
	if(huart != NULL)
	{
		(p->uart).huart = huart;
    356c:	80 ea       	ldi	r24, 0xA0	; 160
    356e:	99 e0       	ldi	r25, 0x09	; 9
    3570:	80 93 a4 26 	sts	0x26A4, r24
    3574:	90 93 a5 26 	sts	0x26A5, r25
		p->ptype = HARDWARE_UART;
    3578:	10 92 a6 26 	sts	0x26A6, r1
	PORTC.DIRSET = PIN3_bm;	
	initializeHWPort(&(hwPort[WEST]), &USARTC0);
	
	PORTD.DIRSET = PIN3_bm;	
	initializeHWPort(&(hwPort[DOWN]), &USARTD0);
}
    357c:	df 91       	pop	r29
    357e:	cf 91       	pop	r28
    3580:	1f 91       	pop	r17
    3582:	0f 91       	pop	r16
    3584:	ff 90       	pop	r15
	if(huart != NULL)
	{
		(p->uart).huart = huart;
		p->ptype = HARDWARE_UART;

		initHWUart(huart);
    3586:	0c 94 55 1a 	jmp	0x34aa	; 0x34aa <initHWUart>

0000358a <__vector_91>:
	huart->BAUDCTRLB = 0;				//0xB4;  // 57600, set to 0 for others
}


ISR(USARTD1_RXC_vect)
{
    358a:	1f 92       	push	r1
    358c:	0f 92       	push	r0
    358e:	0f b6       	in	r0, 0x3f	; 63
    3590:	0f 92       	push	r0
    3592:	11 24       	eor	r1, r1
    3594:	0b b6       	in	r0, 0x3b	; 59
    3596:	0f 92       	push	r0
    3598:	2f 93       	push	r18
    359a:	3f 93       	push	r19
    359c:	4f 93       	push	r20
    359e:	5f 93       	push	r21
    35a0:	6f 93       	push	r22
    35a2:	7f 93       	push	r23
    35a4:	8f 93       	push	r24
    35a6:	9f 93       	push	r25
    35a8:	af 93       	push	r26
    35aa:	bf 93       	push	r27
    35ac:	ef 93       	push	r30
    35ae:	ff 93       	push	r31
	uint8_t c;
	
	c = USARTD1.DATA;
    35b0:	80 91 b0 09 	lds	r24, 0x09B0
	//printf("R:%x",c);	
	push(c, &(port[UP].rx));
    35b4:	60 e2       	ldi	r22, 0x20	; 32
    35b6:	76 e2       	ldi	r23, 0x26	; 38
    35b8:	0e 94 8b 02 	call	0x516	; 0x516 <push>
}
    35bc:	ff 91       	pop	r31
    35be:	ef 91       	pop	r30
    35c0:	bf 91       	pop	r27
    35c2:	af 91       	pop	r26
    35c4:	9f 91       	pop	r25
    35c6:	8f 91       	pop	r24
    35c8:	7f 91       	pop	r23
    35ca:	6f 91       	pop	r22
    35cc:	5f 91       	pop	r21
    35ce:	4f 91       	pop	r20
    35d0:	3f 91       	pop	r19
    35d2:	2f 91       	pop	r18
    35d4:	0f 90       	pop	r0
    35d6:	0b be       	out	0x3b, r0	; 59
    35d8:	0f 90       	pop	r0
    35da:	0f be       	out	0x3f, r0	; 63
    35dc:	0f 90       	pop	r0
    35de:	1f 90       	pop	r1
    35e0:	18 95       	reti

000035e2 <__vector_93>:

ISR(USARTD1_TXC_vect)
{
    35e2:	1f 92       	push	r1
    35e4:	0f 92       	push	r0
    35e6:	0f b6       	in	r0, 0x3f	; 63
    35e8:	0f 92       	push	r0
    35ea:	11 24       	eor	r1, r1
    35ec:	0b b6       	in	r0, 0x3b	; 59
    35ee:	0f 92       	push	r0
    35f0:	2f 93       	push	r18
    35f2:	3f 93       	push	r19
    35f4:	4f 93       	push	r20
    35f6:	5f 93       	push	r21
    35f8:	6f 93       	push	r22
    35fa:	7f 93       	push	r23
    35fc:	8f 93       	push	r24
    35fe:	9f 93       	push	r25
    3600:	af 93       	push	r26
    3602:	bf 93       	push	r27
    3604:	ef 93       	push	r30
    3606:	ff 93       	push	r31
	int16_t c;
	
	c  = pop(&(port[UP].tx));
    3608:	80 e4       	ldi	r24, 0x40	; 64
    360a:	96 e2       	ldi	r25, 0x26	; 38
    360c:	0e 94 a6 02 	call	0x54c	; 0x54c <pop>
	
	if(c != -1)
    3610:	8f 3f       	cpi	r24, 0xFF	; 255
    3612:	2f ef       	ldi	r18, 0xFF	; 255
    3614:	92 07       	cpc	r25, r18
    3616:	11 f0       	breq	.+4      	; 0x361c <__vector_93+0x3a>
	{
		USARTD1.DATA = c;
    3618:	80 93 b0 09 	sts	0x09B0, r24
	}
	else
	{
		// should flag that we're waiting for an ACK now
	}
}
    361c:	ff 91       	pop	r31
    361e:	ef 91       	pop	r30
    3620:	bf 91       	pop	r27
    3622:	af 91       	pop	r26
    3624:	9f 91       	pop	r25
    3626:	8f 91       	pop	r24
    3628:	7f 91       	pop	r23
    362a:	6f 91       	pop	r22
    362c:	5f 91       	pop	r21
    362e:	4f 91       	pop	r20
    3630:	3f 91       	pop	r19
    3632:	2f 91       	pop	r18
    3634:	0f 90       	pop	r0
    3636:	0b be       	out	0x3b, r0	; 59
    3638:	0f 90       	pop	r0
    363a:	0f be       	out	0x3f, r0	; 63
    363c:	0f 90       	pop	r0
    363e:	1f 90       	pop	r1
    3640:	18 95       	reti

00003642 <__vector_28>:

ISR(USARTC1_RXC_vect)
{
    3642:	1f 92       	push	r1
    3644:	0f 92       	push	r0
    3646:	0f b6       	in	r0, 0x3f	; 63
    3648:	0f 92       	push	r0
    364a:	11 24       	eor	r1, r1
    364c:	0b b6       	in	r0, 0x3b	; 59
    364e:	0f 92       	push	r0
    3650:	2f 93       	push	r18
    3652:	3f 93       	push	r19
    3654:	4f 93       	push	r20
    3656:	5f 93       	push	r21
    3658:	6f 93       	push	r22
    365a:	7f 93       	push	r23
    365c:	8f 93       	push	r24
    365e:	9f 93       	push	r25
    3660:	af 93       	push	r26
    3662:	bf 93       	push	r27
    3664:	ef 93       	push	r30
    3666:	ff 93       	push	r31
	uint8_t c;
	
	c = USARTC1.DATA;
    3668:	80 91 b0 08 	lds	r24, 0x08B0
	//printf("R:%x",c);	
	push(c, &(port[NORTH].rx));
    366c:	60 ec       	ldi	r22, 0xC0	; 192
    366e:	74 e2       	ldi	r23, 0x24	; 36
    3670:	0e 94 8b 02 	call	0x516	; 0x516 <push>
}
    3674:	ff 91       	pop	r31
    3676:	ef 91       	pop	r30
    3678:	bf 91       	pop	r27
    367a:	af 91       	pop	r26
    367c:	9f 91       	pop	r25
    367e:	8f 91       	pop	r24
    3680:	7f 91       	pop	r23
    3682:	6f 91       	pop	r22
    3684:	5f 91       	pop	r21
    3686:	4f 91       	pop	r20
    3688:	3f 91       	pop	r19
    368a:	2f 91       	pop	r18
    368c:	0f 90       	pop	r0
    368e:	0b be       	out	0x3b, r0	; 59
    3690:	0f 90       	pop	r0
    3692:	0f be       	out	0x3f, r0	; 63
    3694:	0f 90       	pop	r0
    3696:	1f 90       	pop	r1
    3698:	18 95       	reti

0000369a <__vector_30>:
ISR(USARTC1_TXC_vect)
{
    369a:	1f 92       	push	r1
    369c:	0f 92       	push	r0
    369e:	0f b6       	in	r0, 0x3f	; 63
    36a0:	0f 92       	push	r0
    36a2:	11 24       	eor	r1, r1
    36a4:	0b b6       	in	r0, 0x3b	; 59
    36a6:	0f 92       	push	r0
    36a8:	2f 93       	push	r18
    36aa:	3f 93       	push	r19
    36ac:	4f 93       	push	r20
    36ae:	5f 93       	push	r21
    36b0:	6f 93       	push	r22
    36b2:	7f 93       	push	r23
    36b4:	8f 93       	push	r24
    36b6:	9f 93       	push	r25
    36b8:	af 93       	push	r26
    36ba:	bf 93       	push	r27
    36bc:	ef 93       	push	r30
    36be:	ff 93       	push	r31
	int16_t c;
	
	c  = pop(&(port[NORTH].tx));
    36c0:	80 ee       	ldi	r24, 0xE0	; 224
    36c2:	94 e2       	ldi	r25, 0x24	; 36
    36c4:	0e 94 a6 02 	call	0x54c	; 0x54c <pop>
	
	if(c != -1)
    36c8:	8f 3f       	cpi	r24, 0xFF	; 255
    36ca:	2f ef       	ldi	r18, 0xFF	; 255
    36cc:	92 07       	cpc	r25, r18
    36ce:	11 f0       	breq	.+4      	; 0x36d4 <__vector_30+0x3a>
	{
		USARTC1.DATA = c;
    36d0:	80 93 b0 08 	sts	0x08B0, r24
	}
}
    36d4:	ff 91       	pop	r31
    36d6:	ef 91       	pop	r30
    36d8:	bf 91       	pop	r27
    36da:	af 91       	pop	r26
    36dc:	9f 91       	pop	r25
    36de:	8f 91       	pop	r24
    36e0:	7f 91       	pop	r23
    36e2:	6f 91       	pop	r22
    36e4:	5f 91       	pop	r21
    36e6:	4f 91       	pop	r20
    36e8:	3f 91       	pop	r19
    36ea:	2f 91       	pop	r18
    36ec:	0f 90       	pop	r0
    36ee:	0b be       	out	0x3b, r0	; 59
    36f0:	0f 90       	pop	r0
    36f2:	0f be       	out	0x3f, r0	; 63
    36f4:	0f 90       	pop	r0
    36f6:	1f 90       	pop	r1
    36f8:	18 95       	reti

000036fa <__vector_119>:

ISR(USARTF0_RXC_vect)
{
    36fa:	1f 92       	push	r1
    36fc:	0f 92       	push	r0
    36fe:	0f b6       	in	r0, 0x3f	; 63
    3700:	0f 92       	push	r0
    3702:	11 24       	eor	r1, r1
    3704:	0b b6       	in	r0, 0x3b	; 59
    3706:	0f 92       	push	r0
    3708:	2f 93       	push	r18
    370a:	3f 93       	push	r19
    370c:	4f 93       	push	r20
    370e:	5f 93       	push	r21
    3710:	6f 93       	push	r22
    3712:	7f 93       	push	r23
    3714:	8f 93       	push	r24
    3716:	9f 93       	push	r25
    3718:	af 93       	push	r26
    371a:	bf 93       	push	r27
    371c:	ef 93       	push	r30
    371e:	ff 93       	push	r31
	uint8_t c;
	
	c = USARTF0.DATA;
    3720:	80 91 a0 0b 	lds	r24, 0x0BA0
	//printf("R:%x",c);	
	push(c, &(port[EAST].rx));
    3724:	68 e1       	ldi	r22, 0x18	; 24
    3726:	75 e2       	ldi	r23, 0x25	; 37
    3728:	0e 94 8b 02 	call	0x516	; 0x516 <push>
}
    372c:	ff 91       	pop	r31
    372e:	ef 91       	pop	r30
    3730:	bf 91       	pop	r27
    3732:	af 91       	pop	r26
    3734:	9f 91       	pop	r25
    3736:	8f 91       	pop	r24
    3738:	7f 91       	pop	r23
    373a:	6f 91       	pop	r22
    373c:	5f 91       	pop	r21
    373e:	4f 91       	pop	r20
    3740:	3f 91       	pop	r19
    3742:	2f 91       	pop	r18
    3744:	0f 90       	pop	r0
    3746:	0b be       	out	0x3b, r0	; 59
    3748:	0f 90       	pop	r0
    374a:	0f be       	out	0x3f, r0	; 63
    374c:	0f 90       	pop	r0
    374e:	1f 90       	pop	r1
    3750:	18 95       	reti

00003752 <__vector_121>:
ISR(USARTF0_TXC_vect)
{
    3752:	1f 92       	push	r1
    3754:	0f 92       	push	r0
    3756:	0f b6       	in	r0, 0x3f	; 63
    3758:	0f 92       	push	r0
    375a:	11 24       	eor	r1, r1
    375c:	0b b6       	in	r0, 0x3b	; 59
    375e:	0f 92       	push	r0
    3760:	2f 93       	push	r18
    3762:	3f 93       	push	r19
    3764:	4f 93       	push	r20
    3766:	5f 93       	push	r21
    3768:	6f 93       	push	r22
    376a:	7f 93       	push	r23
    376c:	8f 93       	push	r24
    376e:	9f 93       	push	r25
    3770:	af 93       	push	r26
    3772:	bf 93       	push	r27
    3774:	ef 93       	push	r30
    3776:	ff 93       	push	r31
	int16_t c;
	
	c  = pop(&(port[EAST].tx));
    3778:	88 e3       	ldi	r24, 0x38	; 56
    377a:	95 e2       	ldi	r25, 0x25	; 37
    377c:	0e 94 a6 02 	call	0x54c	; 0x54c <pop>
	
	if(c != -1)
    3780:	8f 3f       	cpi	r24, 0xFF	; 255
    3782:	2f ef       	ldi	r18, 0xFF	; 255
    3784:	92 07       	cpc	r25, r18
    3786:	11 f0       	breq	.+4      	; 0x378c <__vector_121+0x3a>
	{
		USARTF0.DATA = c;
    3788:	80 93 a0 0b 	sts	0x0BA0, r24
	}
}
    378c:	ff 91       	pop	r31
    378e:	ef 91       	pop	r30
    3790:	bf 91       	pop	r27
    3792:	af 91       	pop	r26
    3794:	9f 91       	pop	r25
    3796:	8f 91       	pop	r24
    3798:	7f 91       	pop	r23
    379a:	6f 91       	pop	r22
    379c:	5f 91       	pop	r21
    379e:	4f 91       	pop	r20
    37a0:	3f 91       	pop	r19
    37a2:	2f 91       	pop	r18
    37a4:	0f 90       	pop	r0
    37a6:	0b be       	out	0x3b, r0	; 59
    37a8:	0f 90       	pop	r0
    37aa:	0f be       	out	0x3f, r0	; 63
    37ac:	0f 90       	pop	r0
    37ae:	1f 90       	pop	r1
    37b0:	18 95       	reti

000037b2 <__vector_58>:

ISR(USARTE0_RXC_vect)
{
    37b2:	1f 92       	push	r1
    37b4:	0f 92       	push	r0
    37b6:	0f b6       	in	r0, 0x3f	; 63
    37b8:	0f 92       	push	r0
    37ba:	11 24       	eor	r1, r1
    37bc:	0b b6       	in	r0, 0x3b	; 59
    37be:	0f 92       	push	r0
    37c0:	2f 93       	push	r18
    37c2:	3f 93       	push	r19
    37c4:	4f 93       	push	r20
    37c6:	5f 93       	push	r21
    37c8:	6f 93       	push	r22
    37ca:	7f 93       	push	r23
    37cc:	8f 93       	push	r24
    37ce:	9f 93       	push	r25
    37d0:	af 93       	push	r26
    37d2:	bf 93       	push	r27
    37d4:	ef 93       	push	r30
    37d6:	ff 93       	push	r31
	uint8_t c;
	
	c = USARTE0.DATA;
    37d8:	80 91 a0 0a 	lds	r24, 0x0AA0
	//printf("R:%x",c);	
	push(c, &(port[SOUTH].rx));
    37dc:	68 ec       	ldi	r22, 0xC8	; 200
    37de:	75 e2       	ldi	r23, 0x25	; 37
    37e0:	0e 94 8b 02 	call	0x516	; 0x516 <push>
}
    37e4:	ff 91       	pop	r31
    37e6:	ef 91       	pop	r30
    37e8:	bf 91       	pop	r27
    37ea:	af 91       	pop	r26
    37ec:	9f 91       	pop	r25
    37ee:	8f 91       	pop	r24
    37f0:	7f 91       	pop	r23
    37f2:	6f 91       	pop	r22
    37f4:	5f 91       	pop	r21
    37f6:	4f 91       	pop	r20
    37f8:	3f 91       	pop	r19
    37fa:	2f 91       	pop	r18
    37fc:	0f 90       	pop	r0
    37fe:	0b be       	out	0x3b, r0	; 59
    3800:	0f 90       	pop	r0
    3802:	0f be       	out	0x3f, r0	; 63
    3804:	0f 90       	pop	r0
    3806:	1f 90       	pop	r1
    3808:	18 95       	reti

0000380a <__vector_60>:
ISR(USARTE0_TXC_vect)
{
    380a:	1f 92       	push	r1
    380c:	0f 92       	push	r0
    380e:	0f b6       	in	r0, 0x3f	; 63
    3810:	0f 92       	push	r0
    3812:	11 24       	eor	r1, r1
    3814:	0b b6       	in	r0, 0x3b	; 59
    3816:	0f 92       	push	r0
    3818:	2f 93       	push	r18
    381a:	3f 93       	push	r19
    381c:	4f 93       	push	r20
    381e:	5f 93       	push	r21
    3820:	6f 93       	push	r22
    3822:	7f 93       	push	r23
    3824:	8f 93       	push	r24
    3826:	9f 93       	push	r25
    3828:	af 93       	push	r26
    382a:	bf 93       	push	r27
    382c:	ef 93       	push	r30
    382e:	ff 93       	push	r31
	int16_t c;
	
	c  = pop(&(port[SOUTH].tx));
    3830:	88 ee       	ldi	r24, 0xE8	; 232
    3832:	95 e2       	ldi	r25, 0x25	; 37
    3834:	0e 94 a6 02 	call	0x54c	; 0x54c <pop>
	
	if(c != -1)
    3838:	8f 3f       	cpi	r24, 0xFF	; 255
    383a:	2f ef       	ldi	r18, 0xFF	; 255
    383c:	92 07       	cpc	r25, r18
    383e:	11 f0       	breq	.+4      	; 0x3844 <__vector_60+0x3a>
	{
		USARTE0.DATA = c;
    3840:	80 93 a0 0a 	sts	0x0AA0, r24
	}
}
    3844:	ff 91       	pop	r31
    3846:	ef 91       	pop	r30
    3848:	bf 91       	pop	r27
    384a:	af 91       	pop	r26
    384c:	9f 91       	pop	r25
    384e:	8f 91       	pop	r24
    3850:	7f 91       	pop	r23
    3852:	6f 91       	pop	r22
    3854:	5f 91       	pop	r21
    3856:	4f 91       	pop	r20
    3858:	3f 91       	pop	r19
    385a:	2f 91       	pop	r18
    385c:	0f 90       	pop	r0
    385e:	0b be       	out	0x3b, r0	; 59
    3860:	0f 90       	pop	r0
    3862:	0f be       	out	0x3f, r0	; 63
    3864:	0f 90       	pop	r0
    3866:	1f 90       	pop	r1
    3868:	18 95       	reti

0000386a <__vector_25>:

ISR(USARTC0_RXC_vect)
{
    386a:	1f 92       	push	r1
    386c:	0f 92       	push	r0
    386e:	0f b6       	in	r0, 0x3f	; 63
    3870:	0f 92       	push	r0
    3872:	11 24       	eor	r1, r1
    3874:	0b b6       	in	r0, 0x3b	; 59
    3876:	0f 92       	push	r0
    3878:	2f 93       	push	r18
    387a:	3f 93       	push	r19
    387c:	4f 93       	push	r20
    387e:	5f 93       	push	r21
    3880:	6f 93       	push	r22
    3882:	7f 93       	push	r23
    3884:	8f 93       	push	r24
    3886:	9f 93       	push	r25
    3888:	af 93       	push	r26
    388a:	bf 93       	push	r27
    388c:	ef 93       	push	r30
    388e:	ff 93       	push	r31
	uint8_t c;
	
	c = USARTC0.DATA;
    3890:	80 91 a0 08 	lds	r24, 0x08A0
	//printf("R:%x",c);	
	push(c, &(port[WEST].rx));
    3894:	60 e7       	ldi	r22, 0x70	; 112
    3896:	75 e2       	ldi	r23, 0x25	; 37
    3898:	0e 94 8b 02 	call	0x516	; 0x516 <push>
}
    389c:	ff 91       	pop	r31
    389e:	ef 91       	pop	r30
    38a0:	bf 91       	pop	r27
    38a2:	af 91       	pop	r26
    38a4:	9f 91       	pop	r25
    38a6:	8f 91       	pop	r24
    38a8:	7f 91       	pop	r23
    38aa:	6f 91       	pop	r22
    38ac:	5f 91       	pop	r21
    38ae:	4f 91       	pop	r20
    38b0:	3f 91       	pop	r19
    38b2:	2f 91       	pop	r18
    38b4:	0f 90       	pop	r0
    38b6:	0b be       	out	0x3b, r0	; 59
    38b8:	0f 90       	pop	r0
    38ba:	0f be       	out	0x3f, r0	; 63
    38bc:	0f 90       	pop	r0
    38be:	1f 90       	pop	r1
    38c0:	18 95       	reti

000038c2 <__vector_27>:
ISR(USARTC0_TXC_vect)
{
    38c2:	1f 92       	push	r1
    38c4:	0f 92       	push	r0
    38c6:	0f b6       	in	r0, 0x3f	; 63
    38c8:	0f 92       	push	r0
    38ca:	11 24       	eor	r1, r1
    38cc:	0b b6       	in	r0, 0x3b	; 59
    38ce:	0f 92       	push	r0
    38d0:	2f 93       	push	r18
    38d2:	3f 93       	push	r19
    38d4:	4f 93       	push	r20
    38d6:	5f 93       	push	r21
    38d8:	6f 93       	push	r22
    38da:	7f 93       	push	r23
    38dc:	8f 93       	push	r24
    38de:	9f 93       	push	r25
    38e0:	af 93       	push	r26
    38e2:	bf 93       	push	r27
    38e4:	ef 93       	push	r30
    38e6:	ff 93       	push	r31
	int16_t c;
	
	c  = pop(&(port[WEST].tx));
    38e8:	80 e9       	ldi	r24, 0x90	; 144
    38ea:	95 e2       	ldi	r25, 0x25	; 37
    38ec:	0e 94 a6 02 	call	0x54c	; 0x54c <pop>
	
	if(c != -1)
    38f0:	8f 3f       	cpi	r24, 0xFF	; 255
    38f2:	2f ef       	ldi	r18, 0xFF	; 255
    38f4:	92 07       	cpc	r25, r18
    38f6:	11 f0       	breq	.+4      	; 0x38fc <__vector_27+0x3a>
	{
		USARTC0.DATA = c;
    38f8:	80 93 a0 08 	sts	0x08A0, r24
	}
}
    38fc:	ff 91       	pop	r31
    38fe:	ef 91       	pop	r30
    3900:	bf 91       	pop	r27
    3902:	af 91       	pop	r26
    3904:	9f 91       	pop	r25
    3906:	8f 91       	pop	r24
    3908:	7f 91       	pop	r23
    390a:	6f 91       	pop	r22
    390c:	5f 91       	pop	r21
    390e:	4f 91       	pop	r20
    3910:	3f 91       	pop	r19
    3912:	2f 91       	pop	r18
    3914:	0f 90       	pop	r0
    3916:	0b be       	out	0x3b, r0	; 59
    3918:	0f 90       	pop	r0
    391a:	0f be       	out	0x3f, r0	; 63
    391c:	0f 90       	pop	r0
    391e:	1f 90       	pop	r1
    3920:	18 95       	reti

00003922 <__vector_88>:

ISR(USARTD0_RXC_vect)
{
    3922:	1f 92       	push	r1
    3924:	0f 92       	push	r0
    3926:	0f b6       	in	r0, 0x3f	; 63
    3928:	0f 92       	push	r0
    392a:	11 24       	eor	r1, r1
    392c:	0b b6       	in	r0, 0x3b	; 59
    392e:	0f 92       	push	r0
    3930:	2f 93       	push	r18
    3932:	3f 93       	push	r19
    3934:	4f 93       	push	r20
    3936:	5f 93       	push	r21
    3938:	6f 93       	push	r22
    393a:	7f 93       	push	r23
    393c:	8f 93       	push	r24
    393e:	9f 93       	push	r25
    3940:	af 93       	push	r26
    3942:	bf 93       	push	r27
    3944:	ef 93       	push	r30
    3946:	ff 93       	push	r31
	uint8_t c;
	
	c = USARTD0.DATA;
    3948:	80 91 a0 09 	lds	r24, 0x09A0
	//printf("R:%x",c);
	push(c, &(port[DOWN].rx));
    394c:	68 e6       	ldi	r22, 0x68	; 104
    394e:	74 e2       	ldi	r23, 0x24	; 36
    3950:	0e 94 8b 02 	call	0x516	; 0x516 <push>
}
    3954:	ff 91       	pop	r31
    3956:	ef 91       	pop	r30
    3958:	bf 91       	pop	r27
    395a:	af 91       	pop	r26
    395c:	9f 91       	pop	r25
    395e:	8f 91       	pop	r24
    3960:	7f 91       	pop	r23
    3962:	6f 91       	pop	r22
    3964:	5f 91       	pop	r21
    3966:	4f 91       	pop	r20
    3968:	3f 91       	pop	r19
    396a:	2f 91       	pop	r18
    396c:	0f 90       	pop	r0
    396e:	0b be       	out	0x3b, r0	; 59
    3970:	0f 90       	pop	r0
    3972:	0f be       	out	0x3f, r0	; 63
    3974:	0f 90       	pop	r0
    3976:	1f 90       	pop	r1
    3978:	18 95       	reti

0000397a <__vector_90>:
ISR(USARTD0_TXC_vect)
{
    397a:	1f 92       	push	r1
    397c:	0f 92       	push	r0
    397e:	0f b6       	in	r0, 0x3f	; 63
    3980:	0f 92       	push	r0
    3982:	11 24       	eor	r1, r1
    3984:	0b b6       	in	r0, 0x3b	; 59
    3986:	0f 92       	push	r0
    3988:	2f 93       	push	r18
    398a:	3f 93       	push	r19
    398c:	4f 93       	push	r20
    398e:	5f 93       	push	r21
    3990:	6f 93       	push	r22
    3992:	7f 93       	push	r23
    3994:	8f 93       	push	r24
    3996:	9f 93       	push	r25
    3998:	af 93       	push	r26
    399a:	bf 93       	push	r27
    399c:	ef 93       	push	r30
    399e:	ff 93       	push	r31
	int16_t c;
	
	c  = pop(&(port[DOWN].tx));
    39a0:	88 e8       	ldi	r24, 0x88	; 136
    39a2:	94 e2       	ldi	r25, 0x24	; 36
    39a4:	0e 94 a6 02 	call	0x54c	; 0x54c <pop>
	
	if(c != -1)
    39a8:	8f 3f       	cpi	r24, 0xFF	; 255
    39aa:	2f ef       	ldi	r18, 0xFF	; 255
    39ac:	92 07       	cpc	r25, r18
    39ae:	11 f0       	breq	.+4      	; 0x39b4 <__vector_90+0x3a>
	{
		USARTD0.DATA = c;
    39b0:	80 93 a0 09 	sts	0x09A0, r24
	}
}
    39b4:	ff 91       	pop	r31
    39b6:	ef 91       	pop	r30
    39b8:	bf 91       	pop	r27
    39ba:	af 91       	pop	r26
    39bc:	9f 91       	pop	r25
    39be:	8f 91       	pop	r24
    39c0:	7f 91       	pop	r23
    39c2:	6f 91       	pop	r22
    39c4:	5f 91       	pop	r21
    39c6:	4f 91       	pop	r20
    39c8:	3f 91       	pop	r19
    39ca:	2f 91       	pop	r18
    39cc:	0f 90       	pop	r0
    39ce:	0b be       	out	0x3b, r0	; 59
    39d0:	0f 90       	pop	r0
    39d2:	0f be       	out	0x3f, r0	; 63
    39d4:	0f 90       	pop	r0
    39d6:	1f 90       	pop	r1
    39d8:	18 95       	reti

000039da <getHWTime>:

uint16_t timeHi;			// semi-private data, do not modify outside of this file

// Time in ms
Time getHWTime()
{
    39da:	0f 93       	push	r16
    39dc:	1f 93       	push	r17
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    39de:	f8 94       	cli
	Time tmp;
	// prevents ISRs from corrupting multibyte write
	ATOMIC_BLOCK(ATOMIC_FORCEON)
    {
		tmp = (((Time)timeHi) << 16) | RTC.CNT;
    39e0:	e0 e0       	ldi	r30, 0x00	; 0
    39e2:	f4 e0       	ldi	r31, 0x04	; 4
    39e4:	80 85       	ldd	r24, Z+8	; 0x08
    39e6:	91 85       	ldd	r25, Z+9	; 0x09
    39e8:	00 91 b6 26 	lds	r16, 0x26B6
    39ec:	10 91 b7 26 	lds	r17, 0x26B7
    39f0:	20 e0       	ldi	r18, 0x00	; 0
    39f2:	30 e0       	ldi	r19, 0x00	; 0
    39f4:	98 01       	movw	r18, r16
    39f6:	11 27       	eor	r17, r17
    39f8:	00 27       	eor	r16, r16
    39fa:	a0 e0       	ldi	r26, 0x00	; 0
    39fc:	b0 e0       	ldi	r27, 0x00	; 0
    39fe:	08 2b       	or	r16, r24
    3a00:	19 2b       	or	r17, r25
    3a02:	2a 2b       	or	r18, r26
    3a04:	3b 2b       	or	r19, r27
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
    3a06:	78 94       	sei
	}
	
	return tmp;
}
    3a08:	b8 01       	movw	r22, r16
    3a0a:	c9 01       	movw	r24, r18
    3a0c:	1f 91       	pop	r17
    3a0e:	0f 91       	pop	r16
    3a10:	08 95       	ret

00003a12 <initHWClock>:

void initHWClock(void)
{
	OSC.CTRL |= _BV(OSC_RC32MEN_bp);			// turn on 32MHz internal RC oscillator
    3a12:	80 91 50 00 	lds	r24, 0x0050
    3a16:	82 60       	ori	r24, 0x02	; 2
    3a18:	80 93 50 00 	sts	0x0050, r24
	while(!(OSC.STATUS & OSC_RC32MRDY_bm));  	// wait for it to be ready
    3a1c:	80 91 51 00 	lds	r24, 0x0051
    3a20:	81 ff       	sbrs	r24, 1
    3a22:	fc cf       	rjmp	.-8      	; 0x3a1c <initHWClock+0xa>

	CCP=0xD8;							// allow modification of protected register
    3a24:	88 ed       	ldi	r24, 0xD8	; 216
    3a26:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc;	// change from 2MHz to 32MHz
    3a28:	81 e0       	ldi	r24, 0x01	; 1
    3a2a:	80 93 40 00 	sts	0x0040, r24
    3a2e:	08 95       	ret

00003a30 <initHWRTC>:
}
#else
void initHWRTC(void)
{
	//OSC_RC32KCAL = 80;
	OSC.CTRL |= OSC_RC32KEN_bm;
    3a30:	80 91 50 00 	lds	r24, 0x0050
    3a34:	84 60       	ori	r24, 0x04	; 4
    3a36:	80 93 50 00 	sts	0x0050, r24
	do {/* Wait for the 32kHz oscillator to stabilize. */} while ( ( OSC.STATUS & OSC_RC32KRDY_bm ) == 0); 
    3a3a:	80 91 51 00 	lds	r24, 0x0051
    3a3e:	82 ff       	sbrs	r24, 2
    3a40:	fc cf       	rjmp	.-8      	; 0x3a3a <initHWRTC+0xa>
	RTC.CTRL = RTC_PRESCALER_DIV1_gc;
    3a42:	81 e0       	ldi	r24, 0x01	; 1
    3a44:	80 93 00 04 	sts	0x0400, r24
	CLK.RTCCTRL = CLK_RTCSRC_RCOSC_gc | CLK_RTCEN_bm;
    3a48:	85 e0       	ldi	r24, 0x05	; 5
    3a4a:	80 93 43 00 	sts	0x0043, r24
	//RTC.INTCTRL = RTC_OVFINTLVL_LO_gc;
	RTC.INTCTRL = RTC_OVFINTLVL_HI_gc;
    3a4e:	83 e0       	ldi	r24, 0x03	; 3
    3a50:	80 93 02 04 	sts	0x0402, r24
	// initalise the RTC as zero
	RTC.CNT = 0;
    3a54:	10 92 08 04 	sts	0x0408, r1
    3a58:	10 92 09 04 	sts	0x0409, r1
    3a5c:	08 95       	ret

00003a5e <initHWTime>:
} */


void initHWTime()
{
	initHWClock();
    3a5e:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <initHWClock>
	initHWRTC();
    3a62:	0c 94 18 1d 	jmp	0x3a30	; 0x3a30 <initHWRTC>

00003a66 <__vector_10>:
}

ISR(RTC_OVF_vect)
{
    3a66:	1f 92       	push	r1
    3a68:	0f 92       	push	r0
    3a6a:	0f b6       	in	r0, 0x3f	; 63
    3a6c:	0f 92       	push	r0
    3a6e:	11 24       	eor	r1, r1
    3a70:	8f 93       	push	r24
    3a72:	9f 93       	push	r25
	timeHi++;
    3a74:	80 91 b6 26 	lds	r24, 0x26B6
    3a78:	90 91 b7 26 	lds	r25, 0x26B7
    3a7c:	01 96       	adiw	r24, 0x01	; 1
    3a7e:	80 93 b6 26 	sts	0x26B6, r24
    3a82:	90 93 b7 26 	sts	0x26B7, r25
}
    3a86:	9f 91       	pop	r25
    3a88:	8f 91       	pop	r24
    3a8a:	0f 90       	pop	r0
    3a8c:	0f be       	out	0x3f, r0	; 63
    3a8e:	0f 90       	pop	r0
    3a90:	1f 90       	pop	r1
    3a92:	18 95       	reti

00003a94 <updateHWMic>:
extern MicData _mic;


void updateHWMic()
{
    BB_LOCK(ATOMIC_RESTORESTATE)
    3a94:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    3a96:	f8 94       	cli
    // read low, then high byte
    _mic = ADCA.CH0.RES;
    3a98:	e0 e0       	ldi	r30, 0x00	; 0
    3a9a:	f2 e0       	ldi	r31, 0x02	; 2
    3a9c:	84 a1       	ldd	r24, Z+36	; 0x24
    3a9e:	95 a1       	ldd	r25, Z+37	; 0x25

    // sign extend to full 16 bits
    _mic = _mic >> 4;
    3aa0:	34 e0       	ldi	r19, 0x04	; 4
    3aa2:	95 95       	asr	r25
    3aa4:	87 95       	ror	r24
    3aa6:	3a 95       	dec	r19
    3aa8:	e1 f7       	brne	.-8      	; 0x3aa2 <updateHWMic+0xe>
    3aaa:	80 93 66 26 	sts	0x2666, r24
    3aae:	90 93 67 26 	sts	0x2667, r25
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    3ab2:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
    3ab4:	08 95       	ret

00003ab6 <initHWMic>:
}

void initHWMic(void)
{
    // set-up basic function
    ADCA.CTRLA = ADC_ENABLE_bm;                                 // disable combined DMA but enable ADC
    3ab6:	e0 e0       	ldi	r30, 0x00	; 0
    3ab8:	f2 e0       	ldi	r31, 0x02	; 2
    3aba:	81 e0       	ldi	r24, 0x01	; 1
    3abc:	80 83       	st	Z, r24
    ADCA.CTRLB = ADC_CONMODE_bm | ADC_RESOLUTION_LEFT12BIT_gc;  // use signed 12 bit left adjusted format
    3abe:	96 e1       	ldi	r25, 0x16	; 22
    3ac0:	91 83       	std	Z+1, r25	; 0x01
    ADCA.REFCTRL = ADC_REFSEL_VCC_gc | ADC_BANDGAP_bm;          // disable combined DMA but enable ADC
    3ac2:	92 e1       	ldi	r25, 0x12	; 18
    3ac4:	92 83       	std	Z+2, r25	; 0x02
    ADCA.PRESCALER = ADC_PRESCALER_DIV512_gc;                   // DIV512 prescaler
    3ac6:	97 e0       	ldi	r25, 0x07	; 7
    3ac8:	94 83       	std	Z+4, r25	; 0x04

    // set-up inputs (NOTE: define for ADC_CH_MUXNEG_PIN5_gv is incorrect)
    ADCA.CH0.MUXCTRL = ADC_CH_MUXPOS_PIN0_gc | ADC_CH_MUXNEG_PIN1_gc;   // take inputs from microphone (A0, A5)
    3aca:	81 a3       	std	Z+33, r24	; 0x21
    ADCA.CH0.CTRL = ADC_CH_GAIN_1X_gc | ADC_CH_INPUTMODE_DIFFWGAIN_gc;  // use differential gain (x1)
    3acc:	93 e0       	ldi	r25, 0x03	; 3
    3ace:	90 a3       	std	Z+32, r25	; 0x20

    // set-up interrupts
    ADCA.CH0.INTCTRL = ADC_CH_INTLVL1_bm;    // interrupts on conversion completion with MED priority
    3ad0:	92 e0       	ldi	r25, 0x02	; 2
    3ad2:	92 a3       	std	Z+34, r25	; 0x22

    // start conversion/clear interrupts
    ADCA.CH0.INTFLAGS = ADC_CH_CHIF_bm;
    3ad4:	83 a3       	std	Z+35, r24	; 0x23
    ADCA.CH0.CTRL |= ADC_CH_START_bm;
    3ad6:	80 a1       	ldd	r24, Z+32	; 0x20
    3ad8:	80 68       	ori	r24, 0x80	; 128
    3ada:	80 a3       	std	Z+32, r24	; 0x20
    3adc:	08 95       	ret

00003ade <rejuvenateHWMic>:
}

void rejuvenateHWMic(void)
{
    // set as outputs
    PORTA.DIRSET = PIN0_bm;
    3ade:	e0 e0       	ldi	r30, 0x00	; 0
    3ae0:	f6 e0       	ldi	r31, 0x06	; 6
    3ae2:	91 e0       	ldi	r25, 0x01	; 1
    3ae4:	91 83       	std	Z+1, r25	; 0x01
    PORTA.DIRSET = PIN5_bm;
    3ae6:	80 e2       	ldi	r24, 0x20	; 32
    3ae8:	81 83       	std	Z+1, r24	; 0x01

    // drive both back to zero
    PORTA.OUTCLR = PIN0_bm;
    3aea:	96 83       	std	Z+6, r25	; 0x06
    PORTA.OUTCLR = PIN5_bm;
    3aec:	86 83       	std	Z+6, r24	; 0x06

    // reset as inputs
    PORTA.DIRCLR = PIN0_bm;
    3aee:	92 83       	std	Z+2, r25	; 0x02
    PORTA.DIRCLR = PIN5_bm;
    3af0:	82 83       	std	Z+2, r24	; 0x02
    3af2:	08 95       	ret

00003af4 <__vector_71>:

}

ISR(ADCA_CH0_vect)
{
    3af4:	1f 92       	push	r1
    3af6:	0f 92       	push	r0
    3af8:	0f b6       	in	r0, 0x3f	; 63
    3afa:	0f 92       	push	r0
    3afc:	11 24       	eor	r1, r1
    3afe:	0b b6       	in	r0, 0x3b	; 59
    3b00:	0f 92       	push	r0
    3b02:	2f 93       	push	r18
    3b04:	3f 93       	push	r19
    3b06:	4f 93       	push	r20
    3b08:	5f 93       	push	r21
    3b0a:	6f 93       	push	r22
    3b0c:	7f 93       	push	r23
    3b0e:	8f 93       	push	r24
    3b10:	9f 93       	push	r25
    3b12:	af 93       	push	r26
    3b14:	bf 93       	push	r27
    3b16:	cf 93       	push	r28
    3b18:	df 93       	push	r29
    3b1a:	ef 93       	push	r30
    3b1c:	ff 93       	push	r31
    ADCA.CH0.INTFLAGS |= ADC_CH_CHIF_bm;
    3b1e:	c0 e0       	ldi	r28, 0x00	; 0
    3b20:	d2 e0       	ldi	r29, 0x02	; 2
    3b22:	8b a1       	ldd	r24, Y+35	; 0x23
    3b24:	81 60       	ori	r24, 0x01	; 1
    3b26:	8b a3       	std	Y+35, r24	; 0x23
    
    // update the data
    updateHWMic();
    3b28:	0e 94 4a 1d 	call	0x3a94	; 0x3a94 <updateHWMic>

    // restart the conversion
    ADCA.CH0.CTRL |= ADC_CH_START_bm;
    3b2c:	88 a1       	ldd	r24, Y+32	; 0x20
    3b2e:	80 68       	ori	r24, 0x80	; 128
    3b30:	88 a3       	std	Y+32, r24	; 0x20
}
    3b32:	ff 91       	pop	r31
    3b34:	ef 91       	pop	r30
    3b36:	df 91       	pop	r29
    3b38:	cf 91       	pop	r28
    3b3a:	bf 91       	pop	r27
    3b3c:	af 91       	pop	r26
    3b3e:	9f 91       	pop	r25
    3b40:	8f 91       	pop	r24
    3b42:	7f 91       	pop	r23
    3b44:	6f 91       	pop	r22
    3b46:	5f 91       	pop	r21
    3b48:	4f 91       	pop	r20
    3b4a:	3f 91       	pop	r19
    3b4c:	2f 91       	pop	r18
    3b4e:	0f 90       	pop	r0
    3b50:	0b be       	out	0x3b, r0	; 59
    3b52:	0f 90       	pop	r0
    3b54:	0f be       	out	0x3f, r0	; 63
    3b56:	0f 90       	pop	r0
    3b58:	1f 90       	pop	r1
    3b5a:	18 95       	reti

00003b5c <timer_set>:
		}
	}
*/

void timer_set( uint32_t bps, TC0_t * tx_timer, TC1_t * rx_timer)
{
    3b5c:	6f 92       	push	r6
    3b5e:	7f 92       	push	r7
    3b60:	8f 92       	push	r8
    3b62:	9f 92       	push	r9
    3b64:	af 92       	push	r10
    3b66:	bf 92       	push	r11
    3b68:	cf 92       	push	r12
    3b6a:	df 92       	push	r13
    3b6c:	ef 92       	push	r14
    3b6e:	ff 92       	push	r15
    3b70:	0f 93       	push	r16
    3b72:	1f 93       	push	r17
    3b74:	cf 93       	push	r28
    3b76:	df 93       	push	r29
    3b78:	4b 01       	movw	r8, r22
    3b7a:	5c 01       	movw	r10, r24
    3b7c:	8a 01       	movw	r16, r20
    3b7e:	e9 01       	movw	r28, r18
	uint16_t per;
	
	per = ((uint32_t)F_CPU / (bps));
    3b80:	c1 2c       	mov	r12, r1
    3b82:	88 e4       	ldi	r24, 0x48	; 72
    3b84:	d8 2e       	mov	r13, r24
    3b86:	88 ee       	ldi	r24, 0xE8	; 232
    3b88:	e8 2e       	mov	r14, r24
    3b8a:	ff 24       	eor	r15, r15
    3b8c:	f3 94       	inc	r15
    3b8e:	c7 01       	movw	r24, r14
    3b90:	b6 01       	movw	r22, r12
    3b92:	a5 01       	movw	r20, r10
    3b94:	94 01       	movw	r18, r8
    3b96:	0e 94 1f 26 	call	0x4c3e	; 0x4c3e <__udivmodsi4>

	tx_timer->INTCTRLA = TC_OVFINTLVL_HI_gc;
    3b9a:	93 e0       	ldi	r25, 0x03	; 3
    3b9c:	69 2e       	mov	r6, r25
    3b9e:	f8 01       	movw	r30, r16
    3ba0:	66 82       	std	Z+6, r6	; 0x06
	tx_timer->PER = per;
    3ba2:	26 a3       	std	Z+38, r18	; 0x26
    3ba4:	37 a3       	std	Z+39, r19	; 0x27
	tx_timer->CTRLA = TC_CLKSEL_DIV1_gc;
    3ba6:	77 24       	eor	r7, r7
    3ba8:	73 94       	inc	r7
    3baa:	70 82       	st	Z, r7
	
//	printf("TCE0 set to %x %x %x\r\n",tx_timer->INTCTRLA, tx_timer->PER, tx_timer->CTRLA);
	
	per = ((uint32_t)F_CPU / (bps*3));	
    3bac:	a3 e0       	ldi	r26, 0x03	; 3
    3bae:	b0 e0       	ldi	r27, 0x00	; 0
    3bb0:	a5 01       	movw	r20, r10
    3bb2:	94 01       	movw	r18, r8
    3bb4:	0e 94 f4 25 	call	0x4be8	; 0x4be8 <__muluhisi3>
    3bb8:	9b 01       	movw	r18, r22
    3bba:	ac 01       	movw	r20, r24
    3bbc:	c7 01       	movw	r24, r14
    3bbe:	b6 01       	movw	r22, r12
    3bc0:	0e 94 1f 26 	call	0x4c3e	; 0x4c3e <__udivmodsi4>
	//per = 31; // bps*9
	
	rx_timer->INTCTRLA = TC_OVFINTLVL_HI_gc;
    3bc4:	6e 82       	std	Y+6, r6	; 0x06
	rx_timer->PER = per;
    3bc6:	2e a3       	std	Y+38, r18	; 0x26
    3bc8:	3f a3       	std	Y+39, r19	; 0x27
	rx_timer->CTRLA = TC_CLKSEL_DIV1_gc;	
    3bca:	78 82       	st	Y, r7
}
    3bcc:	df 91       	pop	r29
    3bce:	cf 91       	pop	r28
    3bd0:	1f 91       	pop	r17
    3bd2:	0f 91       	pop	r16
    3bd4:	ff 90       	pop	r15
    3bd6:	ef 90       	pop	r14
    3bd8:	df 90       	pop	r13
    3bda:	cf 90       	pop	r12
    3bdc:	bf 90       	pop	r11
    3bde:	af 90       	pop	r10
    3be0:	9f 90       	pop	r9
    3be2:	8f 90       	pop	r8
    3be4:	7f 90       	pop	r7
    3be6:	6f 90       	pop	r6
    3be8:	08 95       	ret

00003bea <configure_soft_uart>:

void configure_soft_uart(soft_uart_t * uart, CircBuf * ctx, CircBuf * crx)
{
    3bea:	fc 01       	movw	r30, r24
	uart->rx = crx;
    3bec:	40 87       	std	Z+8, r20	; 0x08
    3bee:	51 87       	std	Z+9, r21	; 0x09
	uart->tx = ctx;
    3bf0:	66 83       	std	Z+6, r22	; 0x06
    3bf2:	77 83       	std	Z+7, r23	; 0x07
	uart->internal_rx_buffer =  0;
    3bf4:	10 82       	st	Z, r1
	uart->internal_tx_buffer  = 0;
    3bf6:	11 82       	std	Z+1, r1	; 0x01
    3bf8:	12 82       	std	Z+2, r1	; 0x02
    3bfa:	08 95       	ret

00003bfc <init_soft_uart>:
}

void init_soft_uart()
{
	PORTD.OUTSET = PIN5_bm | PIN6_bm; // set tx output high (idle)
    3bfc:	e0 e6       	ldi	r30, 0x60	; 96
    3bfe:	f6 e0       	ldi	r31, 0x06	; 6
    3c00:	80 e6       	ldi	r24, 0x60	; 96
    3c02:	85 83       	std	Z+5, r24	; 0x05
	PORTD.DIRSET = PIN5_bm | PIN6_bm; // tx pins as output
    3c04:	81 83       	std	Z+1, r24	; 0x01
	PORTD.DIRCLR = PIN4_bm | PIN7_bm; // rx pins as input
    3c06:	80 e9       	ldi	r24, 0x90	; 144
    3c08:	82 83       	std	Z+2, r24	; 0x02
	
	PORTD.PIN4CTRL |= PORT_OPC_PULLUP_gc;	// set pullups on rx lines to prevent floating noise
    3c0a:	84 89       	ldd	r24, Z+20	; 0x14
    3c0c:	88 61       	ori	r24, 0x18	; 24
    3c0e:	84 8b       	std	Z+20, r24	; 0x14
	PORTD.PIN7CTRL |= PORT_OPC_PULLUP_gc;	
    3c10:	87 89       	ldd	r24, Z+23	; 0x17
    3c12:	88 61       	ori	r24, 0x18	; 24
    3c14:	87 8b       	std	Z+23, r24	; 0x17

	soft_uart[1].rx_state = SU_RX_IDLE;
    3c16:	10 92 c6 26 	sts	0x26C6, r1
{
	uint16_t per;
	
	per = ((uint32_t)F_CPU / (bps));

	tx_timer->INTCTRLA = TC_OVFINTLVL_HI_gc;
    3c1a:	e0 e0       	ldi	r30, 0x00	; 0
    3c1c:	fa e0       	ldi	r31, 0x0A	; 10
    3c1e:	33 e0       	ldi	r19, 0x03	; 3
    3c20:	36 83       	std	Z+6, r19	; 0x06
	tx_timer->PER = per;
    3c22:	81 e4       	ldi	r24, 0x41	; 65
    3c24:	93 e0       	ldi	r25, 0x03	; 3
    3c26:	86 a3       	std	Z+38, r24	; 0x26
    3c28:	97 a3       	std	Z+39, r25	; 0x27
	tx_timer->CTRLA = TC_CLKSEL_DIV1_gc;
    3c2a:	21 e0       	ldi	r18, 0x01	; 1
    3c2c:	20 83       	st	Z, r18
//	printf("TCE0 set to %x %x %x\r\n",tx_timer->INTCTRLA, tx_timer->PER, tx_timer->CTRLA);
	
	per = ((uint32_t)F_CPU / (bps*3));	
	//per = 31; // bps*9
	
	rx_timer->INTCTRLA = TC_OVFINTLVL_HI_gc;
    3c2e:	e0 e4       	ldi	r30, 0x40	; 64
    3c30:	f9 e0       	ldi	r31, 0x09	; 9
    3c32:	36 83       	std	Z+6, r19	; 0x06
	rx_timer->PER = per;
    3c34:	85 e1       	ldi	r24, 0x15	; 21
    3c36:	91 e0       	ldi	r25, 0x01	; 1
    3c38:	86 a3       	std	Z+38, r24	; 0x26
    3c3a:	97 a3       	std	Z+39, r25	; 0x27
	rx_timer->CTRLA = TC_CLKSEL_DIV1_gc;	
    3c3c:	20 83       	st	Z, r18
    3c3e:	08 95       	ret

00003c40 <su_getchar>:

	timer_set( BAUD_RATE, &TCE0, &TCD1);	
}

int su_getchar(soft_uart_t * uart)
{
    3c40:	cf 93       	push	r28
    3c42:	df 93       	push	r29
    3c44:	ec 01       	movw	r28, r24
	char		ch;

	if(isEmpty((uart->rx)))
    3c46:	88 85       	ldd	r24, Y+8	; 0x08
    3c48:	99 85       	ldd	r25, Y+9	; 0x09
    3c4a:	0e 94 c1 02 	call	0x582	; 0x582 <isEmpty>
    3c4e:	81 11       	cpse	r24, r1
    3c50:	07 c0       	rjmp	.+14     	; 0x3c60 <su_getchar+0x20>
	{
		return -1;
	}
	else
	{	
		ch = pop((uart->rx));
    3c52:	88 85       	ldd	r24, Y+8	; 0x08
    3c54:	99 85       	ldd	r25, Y+9	; 0x09
    3c56:	0e 94 a6 02 	call	0x54c	; 0x54c <pop>
    3c5a:	9c 01       	movw	r18, r24
		return( ch );
    3c5c:	33 27       	eor	r19, r19
    3c5e:	02 c0       	rjmp	.+4      	; 0x3c64 <su_getchar+0x24>
{
	char		ch;

	if(isEmpty((uart->rx)))
	{
		return -1;
    3c60:	2f ef       	ldi	r18, 0xFF	; 255
    3c62:	3f ef       	ldi	r19, 0xFF	; 255
	else
	{	
		ch = pop((uart->rx));
		return( ch );
	}
}
    3c64:	c9 01       	movw	r24, r18
    3c66:	df 91       	pop	r29
    3c68:	cf 91       	pop	r28
    3c6a:	08 95       	ret

00003c6c <set_tx_char>:

void set_tx_char(int ch, soft_uart_t * uart)
{
	if(ch != -1)
    3c6c:	8f 3f       	cpi	r24, 0xFF	; 255
    3c6e:	2f ef       	ldi	r18, 0xFF	; 255
    3c70:	92 07       	cpc	r25, r18
    3c72:	31 f0       	breq	.+12     	; 0x3c80 <set_tx_char+0x14>
	{
		uart->internal_tx_buffer = (ch << 1) | 0x200;
    3c74:	88 0f       	add	r24, r24
    3c76:	99 1f       	adc	r25, r25
    3c78:	92 60       	ori	r25, 0x02	; 2
    3c7a:	fb 01       	movw	r30, r22
    3c7c:	81 83       	std	Z+1, r24	; 0x01
    3c7e:	92 83       	std	Z+2, r25	; 0x02
    3c80:	08 95       	ret

00003c82 <su_putchar>:
	}
}

void su_putchar( char ch, soft_uart_t * uart)
{	
	while ( uart->internal_tx_buffer != 0 );
    3c82:	fb 01       	movw	r30, r22
    3c84:	21 81       	ldd	r18, Z+1	; 0x01
    3c86:	32 81       	ldd	r19, Z+2	; 0x02
    3c88:	23 2b       	or	r18, r19
    3c8a:	d9 f7       	brne	.-10     	; 0x3c82 <su_putchar>
	
	set_tx_char(ch, uart);
    3c8c:	90 e0       	ldi	r25, 0x00	; 0
    3c8e:	0c 94 36 1e 	jmp	0x3c6c	; 0x3c6c <set_tx_char>

00003c92 <kbhit>:

}

int kbhit( soft_uart_t * uart )
{
	return( !isEmpty(uart->rx));
    3c92:	fc 01       	movw	r30, r24
    3c94:	80 85       	ldd	r24, Z+8	; 0x08
    3c96:	91 85       	ldd	r25, Z+9	; 0x09
    3c98:	0e 94 c1 02 	call	0x582	; 0x582 <isEmpty>
    3c9c:	21 e0       	ldi	r18, 0x01	; 1
    3c9e:	30 e0       	ldi	r19, 0x00	; 0
    3ca0:	88 23       	and	r24, r24
    3ca2:	11 f0       	breq	.+4      	; 0x3ca8 <kbhit+0x16>
    3ca4:	20 e0       	ldi	r18, 0x00	; 0
    3ca6:	30 e0       	ldi	r19, 0x00	; 0
}
    3ca8:	c9 01       	movw	r24, r18
    3caa:	08 95       	ret

00003cac <__vector_83>:

// rx ISR
ISR(TCD1_OVF_vect)
{
    3cac:	1f 92       	push	r1
    3cae:	0f 92       	push	r0
    3cb0:	0f b6       	in	r0, 0x3f	; 63
    3cb2:	0f 92       	push	r0
    3cb4:	11 24       	eor	r1, r1
    3cb6:	0b b6       	in	r0, 0x3b	; 59
    3cb8:	0f 92       	push	r0
    3cba:	2f 93       	push	r18
    3cbc:	3f 93       	push	r19
    3cbe:	4f 93       	push	r20
    3cc0:	5f 93       	push	r21
    3cc2:	6f 93       	push	r22
    3cc4:	7f 93       	push	r23
    3cc6:	8f 93       	push	r24
    3cc8:	9f 93       	push	r25
    3cca:	af 93       	push	r26
    3ccc:	bf 93       	push	r27
    3cce:	ef 93       	push	r30
    3cd0:	ff 93       	push	r31
	if(!soft_uart[0].sample_time)
    3cd2:	80 91 bd 26 	lds	r24, 0x26BD
    3cd6:	81 11       	cpse	r24, r1
    3cd8:	3b c0       	rjmp	.+118    	; 0x3d50 <__vector_83+0xa4>
	{
		if(soft_uart[0].rx_state == SU_RX_IDLE)
    3cda:	80 91 bc 26 	lds	r24, 0x26BC
    3cde:	81 11       	cpse	r24, r1
    3ce0:	0b c0       	rjmp	.+22     	; 0x3cf8 <__vector_83+0x4c>
		{
			if(!(PORTD.IN & PIN4_bm))
    3ce2:	80 91 68 06 	lds	r24, 0x0668
    3ce6:	84 fd       	sbrc	r24, 4
    3ce8:	36 c0       	rjmp	.+108    	; 0x3d56 <__vector_83+0xaa>
			{
				soft_uart[0].rx_state = SU_RX_BYTE;
    3cea:	81 e0       	ldi	r24, 0x01	; 1
    3cec:	80 93 bc 26 	sts	0x26BC, r24
				soft_uart[0].rx_mask = 0x01;
    3cf0:	80 93 bb 26 	sts	0x26BB, r24
				soft_uart[0].sample_time = 3;	// begin sampling every third time
    3cf4:	83 e0       	ldi	r24, 0x03	; 3
    3cf6:	2d c0       	rjmp	.+90     	; 0x3d52 <__vector_83+0xa6>
			}
		}
		else if (soft_uart[0].rx_state == SU_RX_BYTE)
    3cf8:	81 30       	cpi	r24, 0x01	; 1
    3cfa:	b9 f4       	brne	.+46     	; 0x3d2a <__vector_83+0x7e>
		{
			if(PORTD.IN & PIN4_bm)
    3cfc:	80 91 68 06 	lds	r24, 0x0668
    3d00:	84 ff       	sbrs	r24, 4
    3d02:	07 c0       	rjmp	.+14     	; 0x3d12 <__vector_83+0x66>
			{
				soft_uart[0].internal_rx_buffer |= soft_uart[0].rx_mask;
    3d04:	80 91 b8 26 	lds	r24, 0x26B8
    3d08:	90 91 bb 26 	lds	r25, 0x26BB
    3d0c:	89 2b       	or	r24, r25
    3d0e:	80 93 b8 26 	sts	0x26B8, r24
			}
			
			soft_uart[0].rx_mask <<= 1;
    3d12:	80 91 bb 26 	lds	r24, 0x26BB
    3d16:	88 0f       	add	r24, r24
    3d18:	80 93 bb 26 	sts	0x26BB, r24

			if(!soft_uart[0].rx_mask)
    3d1c:	81 11       	cpse	r24, r1
    3d1e:	03 c0       	rjmp	.+6      	; 0x3d26 <__vector_83+0x7a>
			{
				soft_uart[0].rx_state = SU_RX_STOP;
    3d20:	82 e0       	ldi	r24, 0x02	; 2
    3d22:	80 93 bc 26 	sts	0x26BC, r24
			}
			
			soft_uart[0].sample_time = 2;	
    3d26:	82 e0       	ldi	r24, 0x02	; 2
    3d28:	14 c0       	rjmp	.+40     	; 0x3d52 <__vector_83+0xa6>
		}
		else if (soft_uart[0].rx_state == SU_RX_STOP)
    3d2a:	82 30       	cpi	r24, 0x02	; 2
    3d2c:	a1 f4       	brne	.+40     	; 0x3d56 <__vector_83+0xaa>
		{
			if(PORTD.IN & PIN4_bm)
    3d2e:	80 91 68 06 	lds	r24, 0x0668
    3d32:	84 ff       	sbrs	r24, 4
    3d34:	0a c0       	rjmp	.+20     	; 0x3d4a <__vector_83+0x9e>
			{
				push(soft_uart[0].internal_rx_buffer, soft_uart[0].rx);
    3d36:	80 91 b8 26 	lds	r24, 0x26B8
    3d3a:	60 91 c0 26 	lds	r22, 0x26C0
    3d3e:	70 91 c1 26 	lds	r23, 0x26C1
    3d42:	0e 94 8b 02 	call	0x516	; 0x516 <push>
				soft_uart[0].internal_rx_buffer = 0;
    3d46:	10 92 b8 26 	sts	0x26B8, r1
			}
			
			soft_uart[0].rx_state = SU_RX_IDLE;		
    3d4a:	10 92 bc 26 	sts	0x26BC, r1
    3d4e:	03 c0       	rjmp	.+6      	; 0x3d56 <__vector_83+0xaa>
		}
	}
	else
	{
		soft_uart[0].sample_time--;
    3d50:	81 50       	subi	r24, 0x01	; 1
    3d52:	80 93 bd 26 	sts	0x26BD, r24
	}

	if(!soft_uart[1].sample_time)
    3d56:	80 91 c7 26 	lds	r24, 0x26C7
    3d5a:	81 11       	cpse	r24, r1
    3d5c:	3b c0       	rjmp	.+118    	; 0x3dd4 <__vector_83+0x128>
	{
		if(soft_uart[1].rx_state == SU_RX_IDLE)
    3d5e:	80 91 c6 26 	lds	r24, 0x26C6
    3d62:	81 11       	cpse	r24, r1
    3d64:	0b c0       	rjmp	.+22     	; 0x3d7c <__vector_83+0xd0>
		{
			if(!(PORTD.IN & PIN7_bm))
    3d66:	80 91 68 06 	lds	r24, 0x0668
    3d6a:	87 fd       	sbrc	r24, 7
    3d6c:	36 c0       	rjmp	.+108    	; 0x3dda <__vector_83+0x12e>
			{
				soft_uart[1].rx_state = SU_RX_BYTE;
    3d6e:	81 e0       	ldi	r24, 0x01	; 1
    3d70:	80 93 c6 26 	sts	0x26C6, r24
				soft_uart[1].rx_mask = 0x01;
    3d74:	80 93 c5 26 	sts	0x26C5, r24
				soft_uart[1].sample_time = 3;	// begin sampling every third time
    3d78:	83 e0       	ldi	r24, 0x03	; 3
    3d7a:	2d c0       	rjmp	.+90     	; 0x3dd6 <__vector_83+0x12a>
			}
		}
		else if (soft_uart[1].rx_state == SU_RX_BYTE)
    3d7c:	81 30       	cpi	r24, 0x01	; 1
    3d7e:	b9 f4       	brne	.+46     	; 0x3dae <__vector_83+0x102>
		{
			if(PORTD.IN & PIN7_bm)
    3d80:	80 91 68 06 	lds	r24, 0x0668
    3d84:	87 ff       	sbrs	r24, 7
    3d86:	07 c0       	rjmp	.+14     	; 0x3d96 <__vector_83+0xea>
			{
				soft_uart[1].internal_rx_buffer |= soft_uart[1].rx_mask;
    3d88:	80 91 c2 26 	lds	r24, 0x26C2
    3d8c:	90 91 c5 26 	lds	r25, 0x26C5
    3d90:	89 2b       	or	r24, r25
    3d92:	80 93 c2 26 	sts	0x26C2, r24
			}
			
			soft_uart[1].rx_mask <<= 1;
    3d96:	80 91 c5 26 	lds	r24, 0x26C5
    3d9a:	88 0f       	add	r24, r24
    3d9c:	80 93 c5 26 	sts	0x26C5, r24

			if(!soft_uart[1].rx_mask)
    3da0:	81 11       	cpse	r24, r1
    3da2:	03 c0       	rjmp	.+6      	; 0x3daa <__vector_83+0xfe>
			{
				soft_uart[1].rx_state = SU_RX_STOP;
    3da4:	82 e0       	ldi	r24, 0x02	; 2
    3da6:	80 93 c6 26 	sts	0x26C6, r24
			}
			
			soft_uart[1].sample_time = 2;	
    3daa:	82 e0       	ldi	r24, 0x02	; 2
    3dac:	14 c0       	rjmp	.+40     	; 0x3dd6 <__vector_83+0x12a>
		}
		else if (soft_uart[1].rx_state == SU_RX_STOP)
    3dae:	82 30       	cpi	r24, 0x02	; 2
    3db0:	a1 f4       	brne	.+40     	; 0x3dda <__vector_83+0x12e>
		{
			if(PORTD.IN & PIN7_bm)
    3db2:	80 91 68 06 	lds	r24, 0x0668
    3db6:	87 ff       	sbrs	r24, 7
    3db8:	0a c0       	rjmp	.+20     	; 0x3dce <__vector_83+0x122>
			{
				push(soft_uart[1].internal_rx_buffer, soft_uart[1].rx);
    3dba:	80 91 c2 26 	lds	r24, 0x26C2
    3dbe:	60 91 ca 26 	lds	r22, 0x26CA
    3dc2:	70 91 cb 26 	lds	r23, 0x26CB
    3dc6:	0e 94 8b 02 	call	0x516	; 0x516 <push>
				soft_uart[1].internal_rx_buffer = 0;
    3dca:	10 92 c2 26 	sts	0x26C2, r1
			}
			
			soft_uart[1].rx_state = SU_RX_IDLE;		
    3dce:	10 92 c6 26 	sts	0x26C6, r1
    3dd2:	03 c0       	rjmp	.+6      	; 0x3dda <__vector_83+0x12e>
		}
	}
	else
	{
		soft_uart[1].sample_time--;
    3dd4:	81 50       	subi	r24, 0x01	; 1
    3dd6:	80 93 c7 26 	sts	0x26C7, r24
	}	
}
    3dda:	ff 91       	pop	r31
    3ddc:	ef 91       	pop	r30
    3dde:	bf 91       	pop	r27
    3de0:	af 91       	pop	r26
    3de2:	9f 91       	pop	r25
    3de4:	8f 91       	pop	r24
    3de6:	7f 91       	pop	r23
    3de8:	6f 91       	pop	r22
    3dea:	5f 91       	pop	r21
    3dec:	4f 91       	pop	r20
    3dee:	3f 91       	pop	r19
    3df0:	2f 91       	pop	r18
    3df2:	0f 90       	pop	r0
    3df4:	0b be       	out	0x3b, r0	; 59
    3df6:	0f 90       	pop	r0
    3df8:	0f be       	out	0x3f, r0	; 63
    3dfa:	0f 90       	pop	r0
    3dfc:	1f 90       	pop	r1
    3dfe:	18 95       	reti

00003e00 <TWI_MasterInit>:
 */
void TWI_MasterInit(TWI_Master_t *twi,
                    TWI_t *module,
                    TWI_MASTER_INTLVL_t intLevel,
                    uint8_t baudRateRegisterSetting)
{
    3e00:	fc 01       	movw	r30, r24
	twi->interface = module;
    3e02:	60 83       	st	Z, r22
    3e04:	71 83       	std	Z+1, r23	; 0x01
	twi->interface->MASTER.CTRLA = intLevel |
    3e06:	48 63       	ori	r20, 0x38	; 56
    3e08:	db 01       	movw	r26, r22
    3e0a:	11 96       	adiw	r26, 0x01	; 1
    3e0c:	4c 93       	st	X, r20
	                               TWI_MASTER_RIEN_bm |
	                               TWI_MASTER_WIEN_bm |
	                               TWI_MASTER_ENABLE_bm;
	twi->interface->MASTER.BAUD = baudRateRegisterSetting;
    3e0e:	a0 81       	ld	r26, Z
    3e10:	b1 81       	ldd	r27, Z+1	; 0x01
    3e12:	15 96       	adiw	r26, 0x05	; 5
    3e14:	2c 93       	st	X, r18
	twi->interface->MASTER.STATUS = TWI_MASTER_BUSSTATE_IDLE_gc;
    3e16:	01 90       	ld	r0, Z+
    3e18:	f0 81       	ld	r31, Z
    3e1a:	e0 2d       	mov	r30, r0
    3e1c:	81 e0       	ldi	r24, 0x01	; 1
    3e1e:	84 83       	std	Z+4, r24	; 0x04
    3e20:	08 95       	ret

00003e22 <TWI_MasterState>:
 *  \retval TWI_MASTER_BUSSTATE_BUSY_gc    Bus state is busy.
 */
TWI_MASTER_BUSSTATE_t TWI_MasterState(TWI_Master_t *twi)
{
	TWI_MASTER_BUSSTATE_t twi_status;
	twi_status = (TWI_MASTER_BUSSTATE_t) (twi->interface->MASTER.STATUS &
    3e22:	dc 01       	movw	r26, r24
    3e24:	ed 91       	ld	r30, X+
    3e26:	fc 91       	ld	r31, X
    3e28:	84 81       	ldd	r24, Z+4	; 0x04
	                                      TWI_MASTER_BUSSTATE_gm);
	return twi_status;
}
    3e2a:	83 70       	andi	r24, 0x03	; 3
    3e2c:	08 95       	ret

00003e2e <TWI_MasterReady>:
 *  \retval true  If transaction could be started.
 *  \retval false If transaction could not be started.
 */
bool TWI_MasterReady(TWI_Master_t *twi)
{
	bool twi_status = (twi->status & TWIM_STATUS_READY);
    3e2e:	fc 01       	movw	r30, r24
    3e30:	87 85       	ldd	r24, Z+15	; 0x0f
	return twi_status;
}
    3e32:	80 e0       	ldi	r24, 0x00	; 0
    3e34:	08 95       	ret

00003e36 <TWI_MasterWriteRead>:
bool TWI_MasterWriteRead(TWI_Master_t *twi,
                         uint8_t address,
                         uint8_t *writeData,
                         uint8_t bytesToWrite,
                         uint8_t bytesToRead)
{
    3e36:	0f 93       	push	r16
    3e38:	cf 93       	push	r28
    3e3a:	df 93       	push	r29
    3e3c:	fc 01       	movw	r30, r24
	/*Parameter sanity check. */
	if (bytesToWrite > TWIM_WRITE_BUFFER_SIZE) {
    3e3e:	25 30       	cpi	r18, 0x05	; 5
    3e40:	50 f5       	brcc	.+84     	; 0x3e96 <TWI_MasterWriteRead+0x60>
		return false;
	}
	if (bytesToRead > TWIM_READ_BUFFER_SIZE) {
    3e42:	05 30       	cpi	r16, 0x05	; 5
    3e44:	40 f5       	brcc	.+80     	; 0x3e96 <TWI_MasterWriteRead+0x60>
		return false;
	}

	/*Initiate transaction if bus is ready. */
	if (twi->status == TWIM_STATUS_READY) {
    3e46:	87 85       	ldd	r24, Z+15	; 0x0f
    3e48:	81 11       	cpse	r24, r1
    3e4a:	25 c0       	rjmp	.+74     	; 0x3e96 <TWI_MasterWriteRead+0x60>

		twi->status = TWIM_STATUS_BUSY;
    3e4c:	81 e0       	ldi	r24, 0x01	; 1
    3e4e:	87 87       	std	Z+15, r24	; 0x0f
		twi->result = TWIM_RESULT_UNKNOWN;
    3e50:	10 8a       	std	Z+16, r1	; 0x10

		twi->address = address<<1;
    3e52:	66 0f       	add	r22, r22
    3e54:	62 83       	std	Z+2, r22	; 0x02
    3e56:	da 01       	movw	r26, r20

		/* Fill write data buffer. */
		for (uint8_t bufferIndex=0; bufferIndex < bytesToWrite; bufferIndex++) {
    3e58:	80 e0       	ldi	r24, 0x00	; 0
    3e5a:	90 e0       	ldi	r25, 0x00	; 0
    3e5c:	06 c0       	rjmp	.+12     	; 0x3e6a <TWI_MasterWriteRead+0x34>
			twi->writeData[bufferIndex] = writeData[bufferIndex];
    3e5e:	3d 91       	ld	r19, X+
    3e60:	ef 01       	movw	r28, r30
    3e62:	c8 0f       	add	r28, r24
    3e64:	d9 1f       	adc	r29, r25
    3e66:	3b 83       	std	Y+3, r19	; 0x03
    3e68:	01 96       	adiw	r24, 0x01	; 1
		twi->result = TWIM_RESULT_UNKNOWN;

		twi->address = address<<1;

		/* Fill write data buffer. */
		for (uint8_t bufferIndex=0; bufferIndex < bytesToWrite; bufferIndex++) {
    3e6a:	82 17       	cp	r24, r18
    3e6c:	c0 f3       	brcs	.-16     	; 0x3e5e <TWI_MasterWriteRead+0x28>
			twi->writeData[bufferIndex] = writeData[bufferIndex];
		}

		twi->bytesToWrite = bytesToWrite;
    3e6e:	23 87       	std	Z+11, r18	; 0x0b
		twi->bytesToRead = bytesToRead;
    3e70:	04 87       	std	Z+12, r16	; 0x0c
		twi->bytesWritten = 0;
    3e72:	15 86       	std	Z+13, r1	; 0x0d
		twi->bytesRead = 0;
    3e74:	16 86       	std	Z+14, r1	; 0x0e

		/* If write command, send the START condition + Address +
		 * 'R/_W = 0'
		 */
		if (twi->bytesToWrite > 0) {
    3e76:	83 85       	ldd	r24, Z+11	; 0x0b
    3e78:	88 23       	and	r24, r24
    3e7a:	19 f0       	breq	.+6      	; 0x3e82 <TWI_MasterWriteRead+0x4c>
			uint8_t writeAddress = twi->address & ~0x01;
    3e7c:	82 81       	ldd	r24, Z+2	; 0x02
    3e7e:	8e 7f       	andi	r24, 0xFE	; 254
    3e80:	05 c0       	rjmp	.+10     	; 0x3e8c <TWI_MasterWriteRead+0x56>
		}

		/* If read command, send the START condition + Address +
		 * 'R/_W = 1'
		 */
		else if (twi->bytesToRead > 0) {
    3e82:	84 85       	ldd	r24, Z+12	; 0x0c
    3e84:	88 23       	and	r24, r24
    3e86:	49 f0       	breq	.+18     	; 0x3e9a <TWI_MasterWriteRead+0x64>
			uint8_t readAddress = twi->address | 0x01;
    3e88:	82 81       	ldd	r24, Z+2	; 0x02
    3e8a:	81 60       	ori	r24, 0x01	; 1
			twi->interface->MASTER.ADDR = readAddress;
    3e8c:	01 90       	ld	r0, Z+
    3e8e:	f0 81       	ld	r31, Z
    3e90:	e0 2d       	mov	r30, r0
    3e92:	86 83       	std	Z+6, r24	; 0x06
    3e94:	02 c0       	rjmp	.+4      	; 0x3e9a <TWI_MasterWriteRead+0x64>
                         uint8_t bytesToWrite,
                         uint8_t bytesToRead)
{
	/*Parameter sanity check. */
	if (bytesToWrite > TWIM_WRITE_BUFFER_SIZE) {
		return false;
    3e96:	80 e0       	ldi	r24, 0x00	; 0
    3e98:	01 c0       	rjmp	.+2      	; 0x3e9c <TWI_MasterWriteRead+0x66>
		 */
		else if (twi->bytesToRead > 0) {
			uint8_t readAddress = twi->address | 0x01;
			twi->interface->MASTER.ADDR = readAddress;
		}
		return true;
    3e9a:	81 e0       	ldi	r24, 0x01	; 1
	} else {
		return false;
	}
}
    3e9c:	df 91       	pop	r29
    3e9e:	cf 91       	pop	r28
    3ea0:	0f 91       	pop	r16
    3ea2:	08 95       	ret

00003ea4 <TWI_MasterRead>:
 *  \retval false If transaction could not be started.
 */
bool TWI_MasterRead(TWI_Master_t *twi,
                    uint8_t address,
                    uint8_t bytesToRead)
{
    3ea4:	0f 93       	push	r16
	bool twi_status = TWI_MasterWriteRead(twi, address, 0, 0, bytesToRead);
    3ea6:	04 2f       	mov	r16, r20
    3ea8:	20 e0       	ldi	r18, 0x00	; 0
    3eaa:	40 e0       	ldi	r20, 0x00	; 0
    3eac:	50 e0       	ldi	r21, 0x00	; 0
    3eae:	0e 94 1b 1f 	call	0x3e36	; 0x3e36 <TWI_MasterWriteRead>
	return twi_status;
}
    3eb2:	0f 91       	pop	r16
    3eb4:	08 95       	ret

00003eb6 <TWI_MasterWrite>:
 */
bool TWI_MasterWrite(TWI_Master_t *twi,
                     uint8_t address,
                     uint8_t *writeData,
                     uint8_t bytesToWrite)
{
    3eb6:	0f 93       	push	r16
	bool twi_status = TWI_MasterWriteRead(twi, address, writeData, bytesToWrite, 0);
    3eb8:	00 e0       	ldi	r16, 0x00	; 0
    3eba:	0e 94 1b 1f 	call	0x3e36	; 0x3e36 <TWI_MasterWriteRead>
	return twi_status;
}
    3ebe:	0f 91       	pop	r16
    3ec0:	08 95       	ret

00003ec2 <TWI_MasterArbitrationLostBusErrorHandler>:
 *  Handles TWI responses to lost arbitration and bus error.
 *
 *  \param twi  The TWI_Master_t struct instance.
 */
void TWI_MasterArbitrationLostBusErrorHandler(TWI_Master_t *twi)
{
    3ec2:	fc 01       	movw	r30, r24
	uint8_t currentStatus = twi->interface->MASTER.STATUS;
    3ec4:	a0 81       	ld	r26, Z
    3ec6:	b1 81       	ldd	r27, Z+1	; 0x01
    3ec8:	14 96       	adiw	r26, 0x04	; 4
    3eca:	8c 91       	ld	r24, X
    3ecc:	14 97       	sbiw	r26, 0x04	; 4

	/* If bus error. */
	if (currentStatus & TWI_MASTER_BUSERR_bm) {
    3ece:	82 ff       	sbrs	r24, 2
    3ed0:	02 c0       	rjmp	.+4      	; 0x3ed6 <TWI_MasterArbitrationLostBusErrorHandler+0x14>
		twi->result = TWIM_RESULT_BUS_ERROR;
    3ed2:	94 e0       	ldi	r25, 0x04	; 4
    3ed4:	01 c0       	rjmp	.+2      	; 0x3ed8 <TWI_MasterArbitrationLostBusErrorHandler+0x16>
	}
	/* If arbitration lost. */
	else {
		twi->result = TWIM_RESULT_ARBITRATION_LOST;
    3ed6:	93 e0       	ldi	r25, 0x03	; 3
    3ed8:	90 8b       	std	Z+16, r25	; 0x10
	}

	/* Clear interrupt flag. */
	twi->interface->MASTER.STATUS = currentStatus | TWI_MASTER_ARBLOST_bm;
    3eda:	88 60       	ori	r24, 0x08	; 8
    3edc:	14 96       	adiw	r26, 0x04	; 4
    3ede:	8c 93       	st	X, r24

	twi->status = TWIM_STATUS_READY;
    3ee0:	17 86       	std	Z+15, r1	; 0x0f
    3ee2:	08 95       	ret

00003ee4 <TWI_MasterWriteHandler>:
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 *
 *  \param twi The TWI_Master_t struct instance.
 */
void TWI_MasterWriteHandler(TWI_Master_t *twi)
{
    3ee4:	cf 93       	push	r28
    3ee6:	df 93       	push	r29
    3ee8:	fc 01       	movw	r30, r24
	/* Local variables used in if tests to avoid compiler warning. */
	uint8_t bytesToWrite  = twi->bytesToWrite;
    3eea:	93 85       	ldd	r25, Z+11	; 0x0b
	uint8_t bytesToRead   = twi->bytesToRead;
    3eec:	84 85       	ldd	r24, Z+12	; 0x0c

	/* If NOT acknowledged (NACK) by slave cancel the transaction. */
	if (twi->interface->MASTER.STATUS & TWI_MASTER_RXACK_bm) {
    3eee:	a0 81       	ld	r26, Z
    3ef0:	b1 81       	ldd	r27, Z+1	; 0x01
    3ef2:	14 96       	adiw	r26, 0x04	; 4
    3ef4:	2c 91       	ld	r18, X
    3ef6:	14 97       	sbiw	r26, 0x04	; 4
    3ef8:	24 ff       	sbrs	r18, 4
    3efa:	05 c0       	rjmp	.+10     	; 0x3f06 <TWI_MasterWriteHandler+0x22>
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    3efc:	83 e0       	ldi	r24, 0x03	; 3
    3efe:	13 96       	adiw	r26, 0x03	; 3
    3f00:	8c 93       	st	X, r24
		twi->result = TWIM_RESULT_NACK_RECEIVED;
    3f02:	85 e0       	ldi	r24, 0x05	; 5
    3f04:	1a c0       	rjmp	.+52     	; 0x3f3a <TWI_MasterWriteHandler+0x56>
		twi->status = TWIM_STATUS_READY;
	}

	/* If more bytes to write, send data. */
	else if (twi->bytesWritten < bytesToWrite) {
    3f06:	25 85       	ldd	r18, Z+13	; 0x0d
    3f08:	29 17       	cp	r18, r25
    3f0a:	58 f4       	brcc	.+22     	; 0x3f22 <TWI_MasterWriteHandler+0x3e>
		uint8_t data = twi->writeData[twi->bytesWritten];
    3f0c:	85 85       	ldd	r24, Z+13	; 0x0d
    3f0e:	ef 01       	movw	r28, r30
    3f10:	c8 0f       	add	r28, r24
    3f12:	d1 1d       	adc	r29, r1
    3f14:	8b 81       	ldd	r24, Y+3	; 0x03
		twi->interface->MASTER.DATA = data;
    3f16:	17 96       	adiw	r26, 0x07	; 7
    3f18:	8c 93       	st	X, r24
		++twi->bytesWritten;
    3f1a:	85 85       	ldd	r24, Z+13	; 0x0d
    3f1c:	8f 5f       	subi	r24, 0xFF	; 255
    3f1e:	85 87       	std	Z+13, r24	; 0x0d
    3f20:	0e c0       	rjmp	.+28     	; 0x3f3e <TWI_MasterWriteHandler+0x5a>
	}

	/* If bytes to read, send repeated START condition + Address +
	 * 'R/_W = 1'
	 */
	else if (twi->bytesRead < bytesToRead) {
    3f22:	96 85       	ldd	r25, Z+14	; 0x0e
    3f24:	98 17       	cp	r25, r24
    3f26:	28 f4       	brcc	.+10     	; 0x3f32 <TWI_MasterWriteHandler+0x4e>
		uint8_t readAddress = twi->address | 0x01;
    3f28:	82 81       	ldd	r24, Z+2	; 0x02
    3f2a:	81 60       	ori	r24, 0x01	; 1
		twi->interface->MASTER.ADDR = readAddress;
    3f2c:	16 96       	adiw	r26, 0x06	; 6
    3f2e:	8c 93       	st	X, r24
    3f30:	06 c0       	rjmp	.+12     	; 0x3f3e <TWI_MasterWriteHandler+0x5a>
	}

	/* If transaction finished, send STOP condition and set RESULT OK. */
	else {
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    3f32:	83 e0       	ldi	r24, 0x03	; 3
    3f34:	13 96       	adiw	r26, 0x03	; 3
    3f36:	8c 93       	st	X, r24
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result)
{
	twi->result = result;
    3f38:	81 e0       	ldi	r24, 0x01	; 1
    3f3a:	80 8b       	std	Z+16, r24	; 0x10
	twi->status = TWIM_STATUS_READY;
    3f3c:	17 86       	std	Z+15, r1	; 0x0f
	/* If transaction finished, send STOP condition and set RESULT OK. */
	else {
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		TWI_MasterTransactionFinished(twi, TWIM_RESULT_OK);
	}
}
    3f3e:	df 91       	pop	r29
    3f40:	cf 91       	pop	r28
    3f42:	08 95       	ret

00003f44 <TWI_MasterReadHandler>:
 *  reading bytes from the TWI slave.
 *
 *  \param twi The TWI_Master_t struct instance.
 */
void TWI_MasterReadHandler(TWI_Master_t *twi)
{
    3f44:	fc 01       	movw	r30, r24
	/* Fetch data if bytes to be read. */
	if (twi->bytesRead < TWIM_READ_BUFFER_SIZE) {
    3f46:	86 85       	ldd	r24, Z+14	; 0x0e
    3f48:	a0 81       	ld	r26, Z
    3f4a:	b1 81       	ldd	r27, Z+1	; 0x01
    3f4c:	84 30       	cpi	r24, 0x04	; 4
    3f4e:	60 f4       	brcc	.+24     	; 0x3f68 <TWI_MasterReadHandler+0x24>
		uint8_t data = twi->interface->MASTER.DATA;
    3f50:	17 96       	adiw	r26, 0x07	; 7
    3f52:	8c 91       	ld	r24, X
		twi->readData[twi->bytesRead] = data;
    3f54:	96 85       	ldd	r25, Z+14	; 0x0e
    3f56:	df 01       	movw	r26, r30
    3f58:	a9 0f       	add	r26, r25
    3f5a:	b1 1d       	adc	r27, r1
    3f5c:	17 96       	adiw	r26, 0x07	; 7
    3f5e:	8c 93       	st	X, r24
		twi->bytesRead++;
    3f60:	86 85       	ldd	r24, Z+14	; 0x0e
    3f62:	8f 5f       	subi	r24, 0xFF	; 255
    3f64:	86 87       	std	Z+14, r24	; 0x0e
    3f66:	06 c0       	rjmp	.+12     	; 0x3f74 <TWI_MasterReadHandler+0x30>
	}

	/* If buffer overflow, issue STOP and BUFFER_OVERFLOW condition. */
	else {
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    3f68:	83 e0       	ldi	r24, 0x03	; 3
    3f6a:	13 96       	adiw	r26, 0x03	; 3
    3f6c:	8c 93       	st	X, r24
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result)
{
	twi->result = result;
    3f6e:	82 e0       	ldi	r24, 0x02	; 2
    3f70:	80 8b       	std	Z+16, r24	; 0x10
	twi->status = TWIM_STATUS_READY;
    3f72:	17 86       	std	Z+15, r1	; 0x0f
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		TWI_MasterTransactionFinished(twi, TWIM_RESULT_BUFFER_OVERFLOW);
	}

	/* Local variable used in if test to avoid compiler warning. */
	uint8_t bytesToRead = twi->bytesToRead;
    3f74:	84 85       	ldd	r24, Z+12	; 0x0c

	/* If more bytes to read, issue ACK and start a byte read. */
	if (twi->bytesRead < bytesToRead) {
    3f76:	96 85       	ldd	r25, Z+14	; 0x0e
    3f78:	a0 81       	ld	r26, Z
    3f7a:	b1 81       	ldd	r27, Z+1	; 0x01
    3f7c:	98 17       	cp	r25, r24
    3f7e:	20 f4       	brcc	.+8      	; 0x3f88 <TWI_MasterReadHandler+0x44>
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    3f80:	82 e0       	ldi	r24, 0x02	; 2
    3f82:	13 96       	adiw	r26, 0x03	; 3
    3f84:	8c 93       	st	X, r24
    3f86:	08 95       	ret
	}

	/* If transaction finished, issue NACK and STOP condition. */
	else {
		twi->interface->MASTER.CTRLC = TWI_MASTER_ACKACT_bm |
    3f88:	87 e0       	ldi	r24, 0x07	; 7
    3f8a:	13 96       	adiw	r26, 0x03	; 3
    3f8c:	8c 93       	st	X, r24
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result)
{
	twi->result = result;
    3f8e:	81 e0       	ldi	r24, 0x01	; 1
    3f90:	80 8b       	std	Z+16, r24	; 0x10
	twi->status = TWIM_STATUS_READY;
    3f92:	17 86       	std	Z+15, r1	; 0x0f
    3f94:	08 95       	ret

00003f96 <TWI_MasterInterruptHandler>:
 *
 *  \param twi  The TWI_Master_t struct instance.
 */
void TWI_MasterInterruptHandler(TWI_Master_t *twi)
{
	uint8_t currentStatus = twi->interface->MASTER.STATUS;
    3f96:	dc 01       	movw	r26, r24
    3f98:	ed 91       	ld	r30, X+
    3f9a:	fc 91       	ld	r31, X
    3f9c:	24 81       	ldd	r18, Z+4	; 0x04
 *
 *  Check current status and calls the appropriate handler.
 *
 *  \param twi  The TWI_Master_t struct instance.
 */
void TWI_MasterInterruptHandler(TWI_Master_t *twi)
    3f9e:	32 2f       	mov	r19, r18
    3fa0:	3c 70       	andi	r19, 0x0C	; 12
{
	uint8_t currentStatus = twi->interface->MASTER.STATUS;

	/* If arbitration lost or bus error. */
	if ((currentStatus & TWI_MASTER_ARBLOST_bm) ||
    3fa2:	11 f0       	breq	.+4      	; 0x3fa8 <TWI_MasterInterruptHandler+0x12>
	    (currentStatus & TWI_MASTER_BUSERR_bm)) {

		TWI_MasterArbitrationLostBusErrorHandler(twi);
    3fa4:	0c 94 61 1f 	jmp	0x3ec2	; 0x3ec2 <TWI_MasterArbitrationLostBusErrorHandler>
	}

	/* If master write interrupt. */
	else if (currentStatus & TWI_MASTER_WIF_bm) {
    3fa8:	26 fd       	sbrc	r18, 6
		TWI_MasterWriteHandler(twi);
    3faa:	0c 94 72 1f 	jmp	0x3ee4	; 0x3ee4 <TWI_MasterWriteHandler>
	}

	/* If master read interrupt. */
	else if (currentStatus & TWI_MASTER_RIF_bm) {
    3fae:	27 fd       	sbrc	r18, 7
		TWI_MasterReadHandler(twi);
    3fb0:	0c 94 a2 1f 	jmp	0x3f44	; 0x3f44 <TWI_MasterReadHandler>
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result)
{
	twi->result = result;
    3fb4:	26 e0       	ldi	r18, 0x06	; 6
    3fb6:	fc 01       	movw	r30, r24
    3fb8:	20 8b       	std	Z+16, r18	; 0x10
	twi->status = TWIM_STATUS_READY;
    3fba:	17 86       	std	Z+15, r1	; 0x0f
    3fbc:	08 95       	ret

00003fbe <TWI_MasterTransactionFinished>:
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result)
{
	twi->result = result;
    3fbe:	fc 01       	movw	r30, r24
    3fc0:	60 8b       	std	Z+16, r22	; 0x10
	twi->status = TWIM_STATUS_READY;
    3fc2:	17 86       	std	Z+15, r1	; 0x0f
    3fc4:	08 95       	ret

00003fc6 <initDebugUart>:
#endif

FILE debug;

void initDebugUart(USART_t * uart)
{
    3fc6:	fc 01       	movw	r30, r24
	uart->CTRLA = 0;	// disable RX/TX interrupts
    3fc8:	13 82       	std	Z+3, r1	; 0x03
	uart->CTRLB = USART_RXEN_bm | USART_TXEN_bm;
    3fca:	88 e1       	ldi	r24, 0x18	; 24
    3fcc:	84 83       	std	Z+4, r24	; 0x04
	uart->CTRLC = USART_CHSIZE_8BIT_gc;
    3fce:	83 e0       	ldi	r24, 0x03	; 3
    3fd0:	85 83       	std	Z+5, r24	; 0x05
	uart->BAUDCTRLA = 16;  // 115200  103;	// 19200?!
    3fd2:	80 e1       	ldi	r24, 0x10	; 16
    3fd4:	86 83       	std	Z+6, r24	; 0x06
	uart->BAUDCTRLB = 0;
    3fd6:	17 82       	std	Z+7, r1	; 0x07
    3fd8:	08 95       	ret

00003fda <debugPutChar>:
#ifdef DEBUG
    while(!(DEBUGUART.STATUS & USART_DREIF_bm));
    DEBUGUART.DATA = c;
#endif
    return 0;
}
    3fda:	80 e0       	ldi	r24, 0x00	; 0
    3fdc:	90 e0       	ldi	r25, 0x00	; 0
    3fde:	08 95       	ret

00003fe0 <debugGetChar>:
	    return -1;
	}
#else
	return -1;
#endif
}
    3fe0:	8f ef       	ldi	r24, 0xFF	; 255
    3fe2:	9f ef       	ldi	r25, 0xFF	; 255
    3fe4:	08 95       	ret

00003fe6 <initHWDebug>:


void initHWDebug() 
{
    3fe6:	08 95       	ret

00003fe8 <vfprintf>:
    3fe8:	2f 92       	push	r2
    3fea:	3f 92       	push	r3
    3fec:	4f 92       	push	r4
    3fee:	5f 92       	push	r5
    3ff0:	6f 92       	push	r6
    3ff2:	7f 92       	push	r7
    3ff4:	8f 92       	push	r8
    3ff6:	9f 92       	push	r9
    3ff8:	af 92       	push	r10
    3ffa:	bf 92       	push	r11
    3ffc:	cf 92       	push	r12
    3ffe:	df 92       	push	r13
    4000:	ef 92       	push	r14
    4002:	ff 92       	push	r15
    4004:	0f 93       	push	r16
    4006:	1f 93       	push	r17
    4008:	cf 93       	push	r28
    400a:	df 93       	push	r29
    400c:	cd b7       	in	r28, 0x3d	; 61
    400e:	de b7       	in	r29, 0x3e	; 62
    4010:	63 97       	sbiw	r28, 0x13	; 19
    4012:	cd bf       	out	0x3d, r28	; 61
    4014:	de bf       	out	0x3e, r29	; 62
    4016:	7c 01       	movw	r14, r24
    4018:	5b 01       	movw	r10, r22
    401a:	8a 01       	movw	r16, r20
    401c:	fc 01       	movw	r30, r24
    401e:	16 82       	std	Z+6, r1	; 0x06
    4020:	17 82       	std	Z+7, r1	; 0x07
    4022:	83 81       	ldd	r24, Z+3	; 0x03
    4024:	81 fd       	sbrc	r24, 1
    4026:	03 c0       	rjmp	.+6      	; 0x402e <vfprintf+0x46>
    4028:	6d c3       	rjmp	.+1754   	; 0x4704 <vfprintf+0x71c>
    402a:	86 01       	movw	r16, r12
    402c:	05 c0       	rjmp	.+10     	; 0x4038 <vfprintf+0x50>
    402e:	88 24       	eor	r8, r8
    4030:	83 94       	inc	r8
    4032:	91 2c       	mov	r9, r1
    4034:	8c 0e       	add	r8, r28
    4036:	9d 1e       	adc	r9, r29
    4038:	f7 01       	movw	r30, r14
    403a:	93 81       	ldd	r25, Z+3	; 0x03
    403c:	f5 01       	movw	r30, r10
    403e:	93 fd       	sbrc	r25, 3
    4040:	85 91       	lpm	r24, Z+
    4042:	93 ff       	sbrs	r25, 3
    4044:	81 91       	ld	r24, Z+
    4046:	5f 01       	movw	r10, r30
    4048:	88 23       	and	r24, r24
    404a:	09 f4       	brne	.+2      	; 0x404e <vfprintf+0x66>
    404c:	57 c3       	rjmp	.+1710   	; 0x46fc <vfprintf+0x714>
    404e:	85 32       	cpi	r24, 0x25	; 37
    4050:	39 f4       	brne	.+14     	; 0x4060 <vfprintf+0x78>
    4052:	93 fd       	sbrc	r25, 3
    4054:	85 91       	lpm	r24, Z+
    4056:	93 ff       	sbrs	r25, 3
    4058:	81 91       	ld	r24, Z+
    405a:	5f 01       	movw	r10, r30
    405c:	85 32       	cpi	r24, 0x25	; 37
    405e:	31 f4       	brne	.+12     	; 0x406c <vfprintf+0x84>
    4060:	b7 01       	movw	r22, r14
    4062:	90 e0       	ldi	r25, 0x00	; 0
    4064:	0e 94 ba 28 	call	0x5174	; 0x5174 <fputc>
    4068:	68 01       	movw	r12, r16
    406a:	df cf       	rjmp	.-66     	; 0x402a <vfprintf+0x42>
    406c:	41 2c       	mov	r4, r1
    406e:	51 2c       	mov	r5, r1
    4070:	20 e0       	ldi	r18, 0x00	; 0
    4072:	20 32       	cpi	r18, 0x20	; 32
    4074:	a8 f4       	brcc	.+42     	; 0x40a0 <vfprintf+0xb8>
    4076:	8b 32       	cpi	r24, 0x2B	; 43
    4078:	61 f0       	breq	.+24     	; 0x4092 <vfprintf+0xaa>
    407a:	28 f4       	brcc	.+10     	; 0x4086 <vfprintf+0x9e>
    407c:	80 32       	cpi	r24, 0x20	; 32
    407e:	51 f0       	breq	.+20     	; 0x4094 <vfprintf+0xac>
    4080:	83 32       	cpi	r24, 0x23	; 35
    4082:	71 f4       	brne	.+28     	; 0x40a0 <vfprintf+0xb8>
    4084:	0b c0       	rjmp	.+22     	; 0x409c <vfprintf+0xb4>
    4086:	8d 32       	cpi	r24, 0x2D	; 45
    4088:	39 f0       	breq	.+14     	; 0x4098 <vfprintf+0xb0>
    408a:	80 33       	cpi	r24, 0x30	; 48
    408c:	49 f4       	brne	.+18     	; 0x40a0 <vfprintf+0xb8>
    408e:	21 60       	ori	r18, 0x01	; 1
    4090:	28 c0       	rjmp	.+80     	; 0x40e2 <vfprintf+0xfa>
    4092:	22 60       	ori	r18, 0x02	; 2
    4094:	24 60       	ori	r18, 0x04	; 4
    4096:	25 c0       	rjmp	.+74     	; 0x40e2 <vfprintf+0xfa>
    4098:	28 60       	ori	r18, 0x08	; 8
    409a:	23 c0       	rjmp	.+70     	; 0x40e2 <vfprintf+0xfa>
    409c:	20 61       	ori	r18, 0x10	; 16
    409e:	21 c0       	rjmp	.+66     	; 0x40e2 <vfprintf+0xfa>
    40a0:	27 fd       	sbrc	r18, 7
    40a2:	27 c0       	rjmp	.+78     	; 0x40f2 <vfprintf+0x10a>
    40a4:	38 2f       	mov	r19, r24
    40a6:	30 53       	subi	r19, 0x30	; 48
    40a8:	3a 30       	cpi	r19, 0x0A	; 10
    40aa:	78 f4       	brcc	.+30     	; 0x40ca <vfprintf+0xe2>
    40ac:	26 ff       	sbrs	r18, 6
    40ae:	06 c0       	rjmp	.+12     	; 0x40bc <vfprintf+0xd4>
    40b0:	fa e0       	ldi	r31, 0x0A	; 10
    40b2:	4f 9e       	mul	r4, r31
    40b4:	30 0d       	add	r19, r0
    40b6:	11 24       	eor	r1, r1
    40b8:	43 2e       	mov	r4, r19
    40ba:	13 c0       	rjmp	.+38     	; 0x40e2 <vfprintf+0xfa>
    40bc:	8a e0       	ldi	r24, 0x0A	; 10
    40be:	58 9e       	mul	r5, r24
    40c0:	30 0d       	add	r19, r0
    40c2:	11 24       	eor	r1, r1
    40c4:	53 2e       	mov	r5, r19
    40c6:	20 62       	ori	r18, 0x20	; 32
    40c8:	0c c0       	rjmp	.+24     	; 0x40e2 <vfprintf+0xfa>
    40ca:	8e 32       	cpi	r24, 0x2E	; 46
    40cc:	21 f4       	brne	.+8      	; 0x40d6 <vfprintf+0xee>
    40ce:	26 fd       	sbrc	r18, 6
    40d0:	15 c3       	rjmp	.+1578   	; 0x46fc <vfprintf+0x714>
    40d2:	20 64       	ori	r18, 0x40	; 64
    40d4:	06 c0       	rjmp	.+12     	; 0x40e2 <vfprintf+0xfa>
    40d6:	8c 36       	cpi	r24, 0x6C	; 108
    40d8:	11 f4       	brne	.+4      	; 0x40de <vfprintf+0xf6>
    40da:	20 68       	ori	r18, 0x80	; 128
    40dc:	02 c0       	rjmp	.+4      	; 0x40e2 <vfprintf+0xfa>
    40de:	88 36       	cpi	r24, 0x68	; 104
    40e0:	41 f4       	brne	.+16     	; 0x40f2 <vfprintf+0x10a>
    40e2:	f5 01       	movw	r30, r10
    40e4:	93 fd       	sbrc	r25, 3
    40e6:	85 91       	lpm	r24, Z+
    40e8:	93 ff       	sbrs	r25, 3
    40ea:	81 91       	ld	r24, Z+
    40ec:	5f 01       	movw	r10, r30
    40ee:	81 11       	cpse	r24, r1
    40f0:	c0 cf       	rjmp	.-128    	; 0x4072 <vfprintf+0x8a>
    40f2:	98 2f       	mov	r25, r24
    40f4:	95 54       	subi	r25, 0x45	; 69
    40f6:	93 30       	cpi	r25, 0x03	; 3
    40f8:	18 f4       	brcc	.+6      	; 0x4100 <vfprintf+0x118>
    40fa:	20 61       	ori	r18, 0x10	; 16
    40fc:	80 5e       	subi	r24, 0xE0	; 224
    40fe:	06 c0       	rjmp	.+12     	; 0x410c <vfprintf+0x124>
    4100:	98 2f       	mov	r25, r24
    4102:	95 56       	subi	r25, 0x65	; 101
    4104:	93 30       	cpi	r25, 0x03	; 3
    4106:	08 f0       	brcs	.+2      	; 0x410a <vfprintf+0x122>
    4108:	a1 c1       	rjmp	.+834    	; 0x444c <vfprintf+0x464>
    410a:	2f 7e       	andi	r18, 0xEF	; 239
    410c:	26 fd       	sbrc	r18, 6
    410e:	02 c0       	rjmp	.+4      	; 0x4114 <vfprintf+0x12c>
    4110:	56 e0       	ldi	r21, 0x06	; 6
    4112:	45 2e       	mov	r4, r21
    4114:	4f e3       	ldi	r20, 0x3F	; 63
    4116:	74 2e       	mov	r7, r20
    4118:	72 22       	and	r7, r18
    411a:	85 36       	cpi	r24, 0x65	; 101
    411c:	19 f4       	brne	.+6      	; 0x4124 <vfprintf+0x13c>
    411e:	f0 e4       	ldi	r31, 0x40	; 64
    4120:	7f 2a       	or	r7, r31
    4122:	07 c0       	rjmp	.+14     	; 0x4132 <vfprintf+0x14a>
    4124:	86 36       	cpi	r24, 0x66	; 102
    4126:	19 f4       	brne	.+6      	; 0x412e <vfprintf+0x146>
    4128:	20 e8       	ldi	r18, 0x80	; 128
    412a:	72 2a       	or	r7, r18
    412c:	02 c0       	rjmp	.+4      	; 0x4132 <vfprintf+0x14a>
    412e:	41 10       	cpse	r4, r1
    4130:	4a 94       	dec	r4
    4132:	77 fe       	sbrs	r7, 7
    4134:	07 c0       	rjmp	.+14     	; 0x4144 <vfprintf+0x15c>
    4136:	3b e3       	ldi	r19, 0x3B	; 59
    4138:	34 15       	cp	r19, r4
    413a:	48 f0       	brcs	.+18     	; 0x414e <vfprintf+0x166>
    413c:	34 2c       	mov	r3, r4
    413e:	33 94       	inc	r3
    4140:	27 e0       	ldi	r18, 0x07	; 7
    4142:	0d c0       	rjmp	.+26     	; 0x415e <vfprintf+0x176>
    4144:	87 e0       	ldi	r24, 0x07	; 7
    4146:	84 15       	cp	r24, r4
    4148:	30 f0       	brcs	.+12     	; 0x4156 <vfprintf+0x16e>
    414a:	24 2d       	mov	r18, r4
    414c:	07 c0       	rjmp	.+14     	; 0x415c <vfprintf+0x174>
    414e:	27 e0       	ldi	r18, 0x07	; 7
    4150:	3c e3       	ldi	r19, 0x3C	; 60
    4152:	33 2e       	mov	r3, r19
    4154:	04 c0       	rjmp	.+8      	; 0x415e <vfprintf+0x176>
    4156:	27 e0       	ldi	r18, 0x07	; 7
    4158:	97 e0       	ldi	r25, 0x07	; 7
    415a:	49 2e       	mov	r4, r25
    415c:	31 2c       	mov	r3, r1
    415e:	68 01       	movw	r12, r16
    4160:	94 e0       	ldi	r25, 0x04	; 4
    4162:	c9 0e       	add	r12, r25
    4164:	d1 1c       	adc	r13, r1
    4166:	f8 01       	movw	r30, r16
    4168:	60 81       	ld	r22, Z
    416a:	71 81       	ldd	r23, Z+1	; 0x01
    416c:	82 81       	ldd	r24, Z+2	; 0x02
    416e:	93 81       	ldd	r25, Z+3	; 0x03
    4170:	03 2d       	mov	r16, r3
    4172:	a4 01       	movw	r20, r8
    4174:	0e 94 b5 27 	call	0x4f6a	; 0x4f6a <__ftoa_engine>
    4178:	8c 01       	movw	r16, r24
    417a:	29 81       	ldd	r18, Y+1	; 0x01
    417c:	2c 87       	std	Y+12, r18	; 0x0c
    417e:	20 ff       	sbrs	r18, 0
    4180:	02 c0       	rjmp	.+4      	; 0x4186 <vfprintf+0x19e>
    4182:	23 ff       	sbrs	r18, 3
    4184:	07 c0       	rjmp	.+14     	; 0x4194 <vfprintf+0x1ac>
    4186:	71 fc       	sbrc	r7, 1
    4188:	08 c0       	rjmp	.+16     	; 0x419a <vfprintf+0x1b2>
    418a:	72 fe       	sbrs	r7, 2
    418c:	09 c0       	rjmp	.+18     	; 0x41a0 <vfprintf+0x1b8>
    418e:	80 e2       	ldi	r24, 0x20	; 32
    4190:	68 2e       	mov	r6, r24
    4192:	07 c0       	rjmp	.+14     	; 0x41a2 <vfprintf+0x1ba>
    4194:	bd e2       	ldi	r27, 0x2D	; 45
    4196:	6b 2e       	mov	r6, r27
    4198:	04 c0       	rjmp	.+8      	; 0x41a2 <vfprintf+0x1ba>
    419a:	ab e2       	ldi	r26, 0x2B	; 43
    419c:	6a 2e       	mov	r6, r26
    419e:	01 c0       	rjmp	.+2      	; 0x41a2 <vfprintf+0x1ba>
    41a0:	61 2c       	mov	r6, r1
    41a2:	8c 85       	ldd	r24, Y+12	; 0x0c
    41a4:	8c 70       	andi	r24, 0x0C	; 12
    41a6:	a1 f1       	breq	.+104    	; 0x4210 <vfprintf+0x228>
    41a8:	66 20       	and	r6, r6
    41aa:	11 f0       	breq	.+4      	; 0x41b0 <vfprintf+0x1c8>
    41ac:	84 e0       	ldi	r24, 0x04	; 4
    41ae:	01 c0       	rjmp	.+2      	; 0x41b2 <vfprintf+0x1ca>
    41b0:	83 e0       	ldi	r24, 0x03	; 3
    41b2:	85 15       	cp	r24, r5
    41b4:	10 f0       	brcs	.+4      	; 0x41ba <vfprintf+0x1d2>
    41b6:	51 2c       	mov	r5, r1
    41b8:	0b c0       	rjmp	.+22     	; 0x41d0 <vfprintf+0x1e8>
    41ba:	58 1a       	sub	r5, r24
    41bc:	73 fc       	sbrc	r7, 3
    41be:	08 c0       	rjmp	.+16     	; 0x41d0 <vfprintf+0x1e8>
    41c0:	b7 01       	movw	r22, r14
    41c2:	80 e2       	ldi	r24, 0x20	; 32
    41c4:	90 e0       	ldi	r25, 0x00	; 0
    41c6:	0e 94 ba 28 	call	0x5174	; 0x5174 <fputc>
    41ca:	5a 94       	dec	r5
    41cc:	c9 f7       	brne	.-14     	; 0x41c0 <vfprintf+0x1d8>
    41ce:	f3 cf       	rjmp	.-26     	; 0x41b6 <vfprintf+0x1ce>
    41d0:	66 20       	and	r6, r6
    41d2:	29 f0       	breq	.+10     	; 0x41de <vfprintf+0x1f6>
    41d4:	b7 01       	movw	r22, r14
    41d6:	86 2d       	mov	r24, r6
    41d8:	90 e0       	ldi	r25, 0x00	; 0
    41da:	0e 94 ba 28 	call	0x5174	; 0x5174 <fputc>
    41de:	3c 85       	ldd	r19, Y+12	; 0x0c
    41e0:	33 fd       	sbrc	r19, 3
    41e2:	03 c0       	rjmp	.+6      	; 0x41ea <vfprintf+0x202>
    41e4:	0c ee       	ldi	r16, 0xEC	; 236
    41e6:	11 e0       	ldi	r17, 0x01	; 1
    41e8:	0c c0       	rjmp	.+24     	; 0x4202 <vfprintf+0x21a>
    41ea:	08 ee       	ldi	r16, 0xE8	; 232
    41ec:	11 e0       	ldi	r17, 0x01	; 1
    41ee:	09 c0       	rjmp	.+18     	; 0x4202 <vfprintf+0x21a>
    41f0:	71 10       	cpse	r7, r1
    41f2:	80 52       	subi	r24, 0x20	; 32
    41f4:	b7 01       	movw	r22, r14
    41f6:	90 e0       	ldi	r25, 0x00	; 0
    41f8:	0e 94 ba 28 	call	0x5174	; 0x5174 <fputc>
    41fc:	0f 5f       	subi	r16, 0xFF	; 255
    41fe:	1f 4f       	sbci	r17, 0xFF	; 255
    4200:	02 c0       	rjmp	.+4      	; 0x4206 <vfprintf+0x21e>
    4202:	80 e1       	ldi	r24, 0x10	; 16
    4204:	78 22       	and	r7, r24
    4206:	f8 01       	movw	r30, r16
    4208:	84 91       	lpm	r24, Z+
    420a:	81 11       	cpse	r24, r1
    420c:	f1 cf       	rjmp	.-30     	; 0x41f0 <vfprintf+0x208>
    420e:	73 c2       	rjmp	.+1254   	; 0x46f6 <vfprintf+0x70e>
    4210:	77 fe       	sbrs	r7, 7
    4212:	0e c0       	rjmp	.+28     	; 0x4230 <vfprintf+0x248>
    4214:	30 0e       	add	r3, r16
    4216:	2c 85       	ldd	r18, Y+12	; 0x0c
    4218:	24 ff       	sbrs	r18, 4
    421a:	04 c0       	rjmp	.+8      	; 0x4224 <vfprintf+0x23c>
    421c:	8a 81       	ldd	r24, Y+2	; 0x02
    421e:	81 33       	cpi	r24, 0x31	; 49
    4220:	09 f4       	brne	.+2      	; 0x4224 <vfprintf+0x23c>
    4222:	3a 94       	dec	r3
    4224:	13 14       	cp	r1, r3
    4226:	4c f5       	brge	.+82     	; 0x427a <vfprintf+0x292>
    4228:	38 e0       	ldi	r19, 0x08	; 8
    422a:	33 15       	cp	r19, r3
    422c:	48 f1       	brcs	.+82     	; 0x4280 <vfprintf+0x298>
    422e:	2c c0       	rjmp	.+88     	; 0x4288 <vfprintf+0x2a0>
    4230:	76 fc       	sbrc	r7, 6
    4232:	2a c0       	rjmp	.+84     	; 0x4288 <vfprintf+0x2a0>
    4234:	24 2d       	mov	r18, r4
    4236:	30 e0       	ldi	r19, 0x00	; 0
    4238:	20 17       	cp	r18, r16
    423a:	31 07       	cpc	r19, r17
    423c:	44 f0       	brlt	.+16     	; 0x424e <vfprintf+0x266>
    423e:	0c 3f       	cpi	r16, 0xFC	; 252
    4240:	8f ef       	ldi	r24, 0xFF	; 255
    4242:	18 07       	cpc	r17, r24
    4244:	24 f0       	brlt	.+8      	; 0x424e <vfprintf+0x266>
    4246:	90 e8       	ldi	r25, 0x80	; 128
    4248:	79 2a       	or	r7, r25
    424a:	01 c0       	rjmp	.+2      	; 0x424e <vfprintf+0x266>
    424c:	4a 94       	dec	r4
    424e:	44 20       	and	r4, r4
    4250:	49 f0       	breq	.+18     	; 0x4264 <vfprintf+0x27c>
    4252:	e2 e0       	ldi	r30, 0x02	; 2
    4254:	f0 e0       	ldi	r31, 0x00	; 0
    4256:	ec 0f       	add	r30, r28
    4258:	fd 1f       	adc	r31, r29
    425a:	e4 0d       	add	r30, r4
    425c:	f1 1d       	adc	r31, r1
    425e:	80 81       	ld	r24, Z
    4260:	80 33       	cpi	r24, 0x30	; 48
    4262:	a1 f3       	breq	.-24     	; 0x424c <vfprintf+0x264>
    4264:	77 fe       	sbrs	r7, 7
    4266:	10 c0       	rjmp	.+32     	; 0x4288 <vfprintf+0x2a0>
    4268:	34 2c       	mov	r3, r4
    426a:	33 94       	inc	r3
    426c:	24 2d       	mov	r18, r4
    426e:	30 e0       	ldi	r19, 0x00	; 0
    4270:	02 17       	cp	r16, r18
    4272:	13 07       	cpc	r17, r19
    4274:	44 f4       	brge	.+16     	; 0x4286 <vfprintf+0x29e>
    4276:	40 1a       	sub	r4, r16
    4278:	07 c0       	rjmp	.+14     	; 0x4288 <vfprintf+0x2a0>
    427a:	33 24       	eor	r3, r3
    427c:	33 94       	inc	r3
    427e:	04 c0       	rjmp	.+8      	; 0x4288 <vfprintf+0x2a0>
    4280:	f8 e0       	ldi	r31, 0x08	; 8
    4282:	3f 2e       	mov	r3, r31
    4284:	01 c0       	rjmp	.+2      	; 0x4288 <vfprintf+0x2a0>
    4286:	41 2c       	mov	r4, r1
    4288:	77 fe       	sbrs	r7, 7
    428a:	07 c0       	rjmp	.+14     	; 0x429a <vfprintf+0x2b2>
    428c:	10 16       	cp	r1, r16
    428e:	11 06       	cpc	r1, r17
    4290:	3c f4       	brge	.+14     	; 0x42a0 <vfprintf+0x2b8>
    4292:	98 01       	movw	r18, r16
    4294:	2f 5f       	subi	r18, 0xFF	; 255
    4296:	3f 4f       	sbci	r19, 0xFF	; 255
    4298:	05 c0       	rjmp	.+10     	; 0x42a4 <vfprintf+0x2bc>
    429a:	25 e0       	ldi	r18, 0x05	; 5
    429c:	30 e0       	ldi	r19, 0x00	; 0
    429e:	02 c0       	rjmp	.+4      	; 0x42a4 <vfprintf+0x2bc>
    42a0:	21 e0       	ldi	r18, 0x01	; 1
    42a2:	30 e0       	ldi	r19, 0x00	; 0
    42a4:	66 20       	and	r6, r6
    42a6:	11 f0       	breq	.+4      	; 0x42ac <vfprintf+0x2c4>
    42a8:	2f 5f       	subi	r18, 0xFF	; 255
    42aa:	3f 4f       	sbci	r19, 0xFF	; 255
    42ac:	44 20       	and	r4, r4
    42ae:	31 f0       	breq	.+12     	; 0x42bc <vfprintf+0x2d4>
    42b0:	44 2d       	mov	r20, r4
    42b2:	50 e0       	ldi	r21, 0x00	; 0
    42b4:	4f 5f       	subi	r20, 0xFF	; 255
    42b6:	5f 4f       	sbci	r21, 0xFF	; 255
    42b8:	24 0f       	add	r18, r20
    42ba:	35 1f       	adc	r19, r21
    42bc:	45 2d       	mov	r20, r5
    42be:	50 e0       	ldi	r21, 0x00	; 0
    42c0:	24 17       	cp	r18, r20
    42c2:	35 07       	cpc	r19, r21
    42c4:	14 f4       	brge	.+4      	; 0x42ca <vfprintf+0x2e2>
    42c6:	52 1a       	sub	r5, r18
    42c8:	01 c0       	rjmp	.+2      	; 0x42cc <vfprintf+0x2e4>
    42ca:	51 2c       	mov	r5, r1
    42cc:	87 2d       	mov	r24, r7
    42ce:	89 70       	andi	r24, 0x09	; 9
    42d0:	49 f4       	brne	.+18     	; 0x42e4 <vfprintf+0x2fc>
    42d2:	06 c0       	rjmp	.+12     	; 0x42e0 <vfprintf+0x2f8>
    42d4:	b7 01       	movw	r22, r14
    42d6:	80 e2       	ldi	r24, 0x20	; 32
    42d8:	90 e0       	ldi	r25, 0x00	; 0
    42da:	0e 94 ba 28 	call	0x5174	; 0x5174 <fputc>
    42de:	5a 94       	dec	r5
    42e0:	51 10       	cpse	r5, r1
    42e2:	f8 cf       	rjmp	.-16     	; 0x42d4 <vfprintf+0x2ec>
    42e4:	66 20       	and	r6, r6
    42e6:	29 f0       	breq	.+10     	; 0x42f2 <vfprintf+0x30a>
    42e8:	b7 01       	movw	r22, r14
    42ea:	86 2d       	mov	r24, r6
    42ec:	90 e0       	ldi	r25, 0x00	; 0
    42ee:	0e 94 ba 28 	call	0x5174	; 0x5174 <fputc>
    42f2:	73 fc       	sbrc	r7, 3
    42f4:	09 c0       	rjmp	.+18     	; 0x4308 <vfprintf+0x320>
    42f6:	06 c0       	rjmp	.+12     	; 0x4304 <vfprintf+0x31c>
    42f8:	b7 01       	movw	r22, r14
    42fa:	80 e3       	ldi	r24, 0x30	; 48
    42fc:	90 e0       	ldi	r25, 0x00	; 0
    42fe:	0e 94 ba 28 	call	0x5174	; 0x5174 <fputc>
    4302:	5a 94       	dec	r5
    4304:	51 10       	cpse	r5, r1
    4306:	f8 cf       	rjmp	.-16     	; 0x42f8 <vfprintf+0x310>
    4308:	77 fe       	sbrs	r7, 7
    430a:	53 c0       	rjmp	.+166    	; 0x43b2 <vfprintf+0x3ca>
    430c:	38 01       	movw	r6, r16
    430e:	17 ff       	sbrs	r17, 7
    4310:	02 c0       	rjmp	.+4      	; 0x4316 <vfprintf+0x32e>
    4312:	61 2c       	mov	r6, r1
    4314:	71 2c       	mov	r7, r1
    4316:	1d 86       	std	Y+13, r1	; 0x0d
    4318:	1e 86       	std	Y+14, r1	; 0x0e
    431a:	98 01       	movw	r18, r16
    431c:	23 19       	sub	r18, r3
    431e:	31 09       	sbc	r19, r1
    4320:	2f 87       	std	Y+15, r18	; 0x0f
    4322:	38 8b       	std	Y+16, r19	; 0x10
    4324:	18 01       	movw	r2, r16
    4326:	26 18       	sub	r2, r6
    4328:	37 08       	sbc	r3, r7
    432a:	28 0c       	add	r2, r8
    432c:	39 1c       	adc	r3, r9
    432e:	64 2d       	mov	r22, r4
    4330:	70 e0       	ldi	r23, 0x00	; 0
    4332:	22 27       	eor	r18, r18
    4334:	33 27       	eor	r19, r19
    4336:	26 1b       	sub	r18, r22
    4338:	37 0b       	sbc	r19, r23
    433a:	29 8b       	std	Y+17, r18	; 0x11
    433c:	3a 8b       	std	Y+18, r19	; 0x12
    433e:	3f ef       	ldi	r19, 0xFF	; 255
    4340:	63 16       	cp	r6, r19
    4342:	73 06       	cpc	r7, r19
    4344:	29 f4       	brne	.+10     	; 0x4350 <vfprintf+0x368>
    4346:	b7 01       	movw	r22, r14
    4348:	8e e2       	ldi	r24, 0x2E	; 46
    434a:	90 e0       	ldi	r25, 0x00	; 0
    434c:	0e 94 ba 28 	call	0x5174	; 0x5174 <fputc>
    4350:	06 15       	cp	r16, r6
    4352:	17 05       	cpc	r17, r7
    4354:	5c f0       	brlt	.+22     	; 0x436c <vfprintf+0x384>
    4356:	2f 85       	ldd	r18, Y+15	; 0x0f
    4358:	38 89       	ldd	r19, Y+16	; 0x10
    435a:	26 15       	cp	r18, r6
    435c:	37 05       	cpc	r19, r7
    435e:	34 f4       	brge	.+12     	; 0x436c <vfprintf+0x384>
    4360:	ed 85       	ldd	r30, Y+13	; 0x0d
    4362:	fe 85       	ldd	r31, Y+14	; 0x0e
    4364:	e2 0d       	add	r30, r2
    4366:	f3 1d       	adc	r31, r3
    4368:	81 81       	ldd	r24, Z+1	; 0x01
    436a:	01 c0       	rjmp	.+2      	; 0x436e <vfprintf+0x386>
    436c:	80 e3       	ldi	r24, 0x30	; 48
    436e:	31 e0       	ldi	r19, 0x01	; 1
    4370:	63 1a       	sub	r6, r19
    4372:	71 08       	sbc	r7, r1
    4374:	2d 85       	ldd	r18, Y+13	; 0x0d
    4376:	3e 85       	ldd	r19, Y+14	; 0x0e
    4378:	2f 5f       	subi	r18, 0xFF	; 255
    437a:	3f 4f       	sbci	r19, 0xFF	; 255
    437c:	2d 87       	std	Y+13, r18	; 0x0d
    437e:	3e 87       	std	Y+14, r19	; 0x0e
    4380:	29 89       	ldd	r18, Y+17	; 0x11
    4382:	3a 89       	ldd	r19, Y+18	; 0x12
    4384:	62 16       	cp	r6, r18
    4386:	73 06       	cpc	r7, r19
    4388:	2c f0       	brlt	.+10     	; 0x4394 <vfprintf+0x3ac>
    438a:	b7 01       	movw	r22, r14
    438c:	90 e0       	ldi	r25, 0x00	; 0
    438e:	0e 94 ba 28 	call	0x5174	; 0x5174 <fputc>
    4392:	d5 cf       	rjmp	.-86     	; 0x433e <vfprintf+0x356>
    4394:	60 16       	cp	r6, r16
    4396:	71 06       	cpc	r7, r17
    4398:	49 f4       	brne	.+18     	; 0x43ac <vfprintf+0x3c4>
    439a:	9a 81       	ldd	r25, Y+2	; 0x02
    439c:	96 33       	cpi	r25, 0x36	; 54
    439e:	28 f4       	brcc	.+10     	; 0x43aa <vfprintf+0x3c2>
    43a0:	95 33       	cpi	r25, 0x35	; 53
    43a2:	21 f4       	brne	.+8      	; 0x43ac <vfprintf+0x3c4>
    43a4:	3c 85       	ldd	r19, Y+12	; 0x0c
    43a6:	34 fd       	sbrc	r19, 4
    43a8:	01 c0       	rjmp	.+2      	; 0x43ac <vfprintf+0x3c4>
    43aa:	81 e3       	ldi	r24, 0x31	; 49
    43ac:	b7 01       	movw	r22, r14
    43ae:	90 e0       	ldi	r25, 0x00	; 0
    43b0:	4a c0       	rjmp	.+148    	; 0x4446 <vfprintf+0x45e>
    43b2:	8a 81       	ldd	r24, Y+2	; 0x02
    43b4:	81 33       	cpi	r24, 0x31	; 49
    43b6:	19 f0       	breq	.+6      	; 0x43be <vfprintf+0x3d6>
    43b8:	2c 85       	ldd	r18, Y+12	; 0x0c
    43ba:	2f 7e       	andi	r18, 0xEF	; 239
    43bc:	2c 87       	std	Y+12, r18	; 0x0c
    43be:	b7 01       	movw	r22, r14
    43c0:	90 e0       	ldi	r25, 0x00	; 0
    43c2:	0e 94 ba 28 	call	0x5174	; 0x5174 <fputc>
    43c6:	41 10       	cpse	r4, r1
    43c8:	05 c0       	rjmp	.+10     	; 0x43d4 <vfprintf+0x3ec>
    43ca:	74 fe       	sbrs	r7, 4
    43cc:	16 c0       	rjmp	.+44     	; 0x43fa <vfprintf+0x412>
    43ce:	85 e4       	ldi	r24, 0x45	; 69
    43d0:	90 e0       	ldi	r25, 0x00	; 0
    43d2:	15 c0       	rjmp	.+42     	; 0x43fe <vfprintf+0x416>
    43d4:	b7 01       	movw	r22, r14
    43d6:	8e e2       	ldi	r24, 0x2E	; 46
    43d8:	90 e0       	ldi	r25, 0x00	; 0
    43da:	0e 94 ba 28 	call	0x5174	; 0x5174 <fputc>
    43de:	e2 e0       	ldi	r30, 0x02	; 2
    43e0:	6e 2e       	mov	r6, r30
    43e2:	f4 01       	movw	r30, r8
    43e4:	e6 0d       	add	r30, r6
    43e6:	f1 1d       	adc	r31, r1
    43e8:	63 94       	inc	r6
    43ea:	b7 01       	movw	r22, r14
    43ec:	80 81       	ld	r24, Z
    43ee:	90 e0       	ldi	r25, 0x00	; 0
    43f0:	0e 94 ba 28 	call	0x5174	; 0x5174 <fputc>
    43f4:	4a 94       	dec	r4
    43f6:	a9 f7       	brne	.-22     	; 0x43e2 <vfprintf+0x3fa>
    43f8:	e8 cf       	rjmp	.-48     	; 0x43ca <vfprintf+0x3e2>
    43fa:	85 e6       	ldi	r24, 0x65	; 101
    43fc:	90 e0       	ldi	r25, 0x00	; 0
    43fe:	b7 01       	movw	r22, r14
    4400:	0e 94 ba 28 	call	0x5174	; 0x5174 <fputc>
    4404:	17 fd       	sbrc	r17, 7
    4406:	06 c0       	rjmp	.+12     	; 0x4414 <vfprintf+0x42c>
    4408:	01 15       	cp	r16, r1
    440a:	11 05       	cpc	r17, r1
    440c:	41 f4       	brne	.+16     	; 0x441e <vfprintf+0x436>
    440e:	3c 85       	ldd	r19, Y+12	; 0x0c
    4410:	34 ff       	sbrs	r19, 4
    4412:	05 c0       	rjmp	.+10     	; 0x441e <vfprintf+0x436>
    4414:	11 95       	neg	r17
    4416:	01 95       	neg	r16
    4418:	11 09       	sbc	r17, r1
    441a:	8d e2       	ldi	r24, 0x2D	; 45
    441c:	01 c0       	rjmp	.+2      	; 0x4420 <vfprintf+0x438>
    441e:	8b e2       	ldi	r24, 0x2B	; 43
    4420:	b7 01       	movw	r22, r14
    4422:	90 e0       	ldi	r25, 0x00	; 0
    4424:	0e 94 ba 28 	call	0x5174	; 0x5174 <fputc>
    4428:	80 e3       	ldi	r24, 0x30	; 48
    442a:	03 c0       	rjmp	.+6      	; 0x4432 <vfprintf+0x44a>
    442c:	8f 5f       	subi	r24, 0xFF	; 255
    442e:	0a 50       	subi	r16, 0x0A	; 10
    4430:	11 09       	sbc	r17, r1
    4432:	0a 30       	cpi	r16, 0x0A	; 10
    4434:	11 05       	cpc	r17, r1
    4436:	d4 f7       	brge	.-12     	; 0x442c <vfprintf+0x444>
    4438:	b7 01       	movw	r22, r14
    443a:	90 e0       	ldi	r25, 0x00	; 0
    443c:	0e 94 ba 28 	call	0x5174	; 0x5174 <fputc>
    4440:	b7 01       	movw	r22, r14
    4442:	c8 01       	movw	r24, r16
    4444:	c0 96       	adiw	r24, 0x30	; 48
    4446:	0e 94 ba 28 	call	0x5174	; 0x5174 <fputc>
    444a:	55 c1       	rjmp	.+682    	; 0x46f6 <vfprintf+0x70e>
    444c:	83 36       	cpi	r24, 0x63	; 99
    444e:	31 f0       	breq	.+12     	; 0x445c <vfprintf+0x474>
    4450:	83 37       	cpi	r24, 0x73	; 115
    4452:	81 f0       	breq	.+32     	; 0x4474 <vfprintf+0x48c>
    4454:	83 35       	cpi	r24, 0x53	; 83
    4456:	09 f0       	breq	.+2      	; 0x445a <vfprintf+0x472>
    4458:	5e c0       	rjmp	.+188    	; 0x4516 <vfprintf+0x52e>
    445a:	24 c0       	rjmp	.+72     	; 0x44a4 <vfprintf+0x4bc>
    445c:	68 01       	movw	r12, r16
    445e:	82 e0       	ldi	r24, 0x02	; 2
    4460:	c8 0e       	add	r12, r24
    4462:	d1 1c       	adc	r13, r1
    4464:	f8 01       	movw	r30, r16
    4466:	80 81       	ld	r24, Z
    4468:	89 83       	std	Y+1, r24	; 0x01
    446a:	66 24       	eor	r6, r6
    446c:	63 94       	inc	r6
    446e:	71 2c       	mov	r7, r1
    4470:	84 01       	movw	r16, r8
    4472:	14 c0       	rjmp	.+40     	; 0x449c <vfprintf+0x4b4>
    4474:	68 01       	movw	r12, r16
    4476:	f2 e0       	ldi	r31, 0x02	; 2
    4478:	cf 0e       	add	r12, r31
    447a:	d1 1c       	adc	r13, r1
    447c:	f8 01       	movw	r30, r16
    447e:	00 81       	ld	r16, Z
    4480:	11 81       	ldd	r17, Z+1	; 0x01
    4482:	26 ff       	sbrs	r18, 6
    4484:	03 c0       	rjmp	.+6      	; 0x448c <vfprintf+0x4a4>
    4486:	64 2d       	mov	r22, r4
    4488:	70 e0       	ldi	r23, 0x00	; 0
    448a:	02 c0       	rjmp	.+4      	; 0x4490 <vfprintf+0x4a8>
    448c:	6f ef       	ldi	r22, 0xFF	; 255
    448e:	7f ef       	ldi	r23, 0xFF	; 255
    4490:	c8 01       	movw	r24, r16
    4492:	2b 8b       	std	Y+19, r18	; 0x13
    4494:	0e 94 af 28 	call	0x515e	; 0x515e <strnlen>
    4498:	3c 01       	movw	r6, r24
    449a:	2b 89       	ldd	r18, Y+19	; 0x13
    449c:	6f e7       	ldi	r22, 0x7F	; 127
    449e:	46 2e       	mov	r4, r22
    44a0:	42 22       	and	r4, r18
    44a2:	17 c0       	rjmp	.+46     	; 0x44d2 <vfprintf+0x4ea>
    44a4:	68 01       	movw	r12, r16
    44a6:	f2 e0       	ldi	r31, 0x02	; 2
    44a8:	cf 0e       	add	r12, r31
    44aa:	d1 1c       	adc	r13, r1
    44ac:	f8 01       	movw	r30, r16
    44ae:	00 81       	ld	r16, Z
    44b0:	11 81       	ldd	r17, Z+1	; 0x01
    44b2:	26 ff       	sbrs	r18, 6
    44b4:	03 c0       	rjmp	.+6      	; 0x44bc <vfprintf+0x4d4>
    44b6:	64 2d       	mov	r22, r4
    44b8:	70 e0       	ldi	r23, 0x00	; 0
    44ba:	02 c0       	rjmp	.+4      	; 0x44c0 <vfprintf+0x4d8>
    44bc:	6f ef       	ldi	r22, 0xFF	; 255
    44be:	7f ef       	ldi	r23, 0xFF	; 255
    44c0:	c8 01       	movw	r24, r16
    44c2:	2b 8b       	std	Y+19, r18	; 0x13
    44c4:	0e 94 8d 28 	call	0x511a	; 0x511a <strnlen_P>
    44c8:	3c 01       	movw	r6, r24
    44ca:	2b 89       	ldd	r18, Y+19	; 0x13
    44cc:	50 e8       	ldi	r21, 0x80	; 128
    44ce:	45 2e       	mov	r4, r21
    44d0:	42 2a       	or	r4, r18
    44d2:	43 fc       	sbrc	r4, 3
    44d4:	1c c0       	rjmp	.+56     	; 0x450e <vfprintf+0x526>
    44d6:	06 c0       	rjmp	.+12     	; 0x44e4 <vfprintf+0x4fc>
    44d8:	b7 01       	movw	r22, r14
    44da:	80 e2       	ldi	r24, 0x20	; 32
    44dc:	90 e0       	ldi	r25, 0x00	; 0
    44de:	0e 94 ba 28 	call	0x5174	; 0x5174 <fputc>
    44e2:	5a 94       	dec	r5
    44e4:	85 2d       	mov	r24, r5
    44e6:	90 e0       	ldi	r25, 0x00	; 0
    44e8:	68 16       	cp	r6, r24
    44ea:	79 06       	cpc	r7, r25
    44ec:	a8 f3       	brcs	.-22     	; 0x44d8 <vfprintf+0x4f0>
    44ee:	0f c0       	rjmp	.+30     	; 0x450e <vfprintf+0x526>
    44f0:	f8 01       	movw	r30, r16
    44f2:	47 fc       	sbrc	r4, 7
    44f4:	85 91       	lpm	r24, Z+
    44f6:	47 fe       	sbrs	r4, 7
    44f8:	81 91       	ld	r24, Z+
    44fa:	8f 01       	movw	r16, r30
    44fc:	b7 01       	movw	r22, r14
    44fe:	90 e0       	ldi	r25, 0x00	; 0
    4500:	0e 94 ba 28 	call	0x5174	; 0x5174 <fputc>
    4504:	51 10       	cpse	r5, r1
    4506:	5a 94       	dec	r5
    4508:	f1 e0       	ldi	r31, 0x01	; 1
    450a:	6f 1a       	sub	r6, r31
    450c:	71 08       	sbc	r7, r1
    450e:	61 14       	cp	r6, r1
    4510:	71 04       	cpc	r7, r1
    4512:	71 f7       	brne	.-36     	; 0x44f0 <vfprintf+0x508>
    4514:	f0 c0       	rjmp	.+480    	; 0x46f6 <vfprintf+0x70e>
    4516:	84 36       	cpi	r24, 0x64	; 100
    4518:	11 f0       	breq	.+4      	; 0x451e <vfprintf+0x536>
    451a:	89 36       	cpi	r24, 0x69	; 105
    451c:	61 f5       	brne	.+88     	; 0x4576 <vfprintf+0x58e>
    451e:	68 01       	movw	r12, r16
    4520:	27 ff       	sbrs	r18, 7
    4522:	09 c0       	rjmp	.+18     	; 0x4536 <vfprintf+0x54e>
    4524:	34 e0       	ldi	r19, 0x04	; 4
    4526:	c3 0e       	add	r12, r19
    4528:	d1 1c       	adc	r13, r1
    452a:	f8 01       	movw	r30, r16
    452c:	60 81       	ld	r22, Z
    452e:	71 81       	ldd	r23, Z+1	; 0x01
    4530:	82 81       	ldd	r24, Z+2	; 0x02
    4532:	93 81       	ldd	r25, Z+3	; 0x03
    4534:	0a c0       	rjmp	.+20     	; 0x454a <vfprintf+0x562>
    4536:	f2 e0       	ldi	r31, 0x02	; 2
    4538:	cf 0e       	add	r12, r31
    453a:	d1 1c       	adc	r13, r1
    453c:	f8 01       	movw	r30, r16
    453e:	60 81       	ld	r22, Z
    4540:	71 81       	ldd	r23, Z+1	; 0x01
    4542:	88 27       	eor	r24, r24
    4544:	77 fd       	sbrc	r23, 7
    4546:	80 95       	com	r24
    4548:	98 2f       	mov	r25, r24
    454a:	4f e6       	ldi	r20, 0x6F	; 111
    454c:	74 2e       	mov	r7, r20
    454e:	72 22       	and	r7, r18
    4550:	97 ff       	sbrs	r25, 7
    4552:	09 c0       	rjmp	.+18     	; 0x4566 <vfprintf+0x57e>
    4554:	90 95       	com	r25
    4556:	80 95       	com	r24
    4558:	70 95       	com	r23
    455a:	61 95       	neg	r22
    455c:	7f 4f       	sbci	r23, 0xFF	; 255
    455e:	8f 4f       	sbci	r24, 0xFF	; 255
    4560:	9f 4f       	sbci	r25, 0xFF	; 255
    4562:	f0 e8       	ldi	r31, 0x80	; 128
    4564:	7f 2a       	or	r7, r31
    4566:	2a e0       	ldi	r18, 0x0A	; 10
    4568:	30 e0       	ldi	r19, 0x00	; 0
    456a:	a4 01       	movw	r20, r8
    456c:	0e 94 37 29 	call	0x526e	; 0x526e <__ultoa_invert>
    4570:	68 2e       	mov	r6, r24
    4572:	68 18       	sub	r6, r8
    4574:	47 c0       	rjmp	.+142    	; 0x4604 <vfprintf+0x61c>
    4576:	85 37       	cpi	r24, 0x75	; 117
    4578:	31 f4       	brne	.+12     	; 0x4586 <vfprintf+0x59e>
    457a:	3f ee       	ldi	r19, 0xEF	; 239
    457c:	73 2e       	mov	r7, r19
    457e:	72 22       	and	r7, r18
    4580:	2a e0       	ldi	r18, 0x0A	; 10
    4582:	30 e0       	ldi	r19, 0x00	; 0
    4584:	24 c0       	rjmp	.+72     	; 0x45ce <vfprintf+0x5e6>
    4586:	99 ef       	ldi	r25, 0xF9	; 249
    4588:	79 2e       	mov	r7, r25
    458a:	72 22       	and	r7, r18
    458c:	8f 36       	cpi	r24, 0x6F	; 111
    458e:	b9 f0       	breq	.+46     	; 0x45be <vfprintf+0x5d6>
    4590:	20 f4       	brcc	.+8      	; 0x459a <vfprintf+0x5b2>
    4592:	88 35       	cpi	r24, 0x58	; 88
    4594:	09 f0       	breq	.+2      	; 0x4598 <vfprintf+0x5b0>
    4596:	b2 c0       	rjmp	.+356    	; 0x46fc <vfprintf+0x714>
    4598:	0d c0       	rjmp	.+26     	; 0x45b4 <vfprintf+0x5cc>
    459a:	80 37       	cpi	r24, 0x70	; 112
    459c:	21 f0       	breq	.+8      	; 0x45a6 <vfprintf+0x5be>
    459e:	88 37       	cpi	r24, 0x78	; 120
    45a0:	09 f0       	breq	.+2      	; 0x45a4 <vfprintf+0x5bc>
    45a2:	ac c0       	rjmp	.+344    	; 0x46fc <vfprintf+0x714>
    45a4:	02 c0       	rjmp	.+4      	; 0x45aa <vfprintf+0x5c2>
    45a6:	20 e1       	ldi	r18, 0x10	; 16
    45a8:	72 2a       	or	r7, r18
    45aa:	74 fe       	sbrs	r7, 4
    45ac:	0b c0       	rjmp	.+22     	; 0x45c4 <vfprintf+0x5dc>
    45ae:	34 e0       	ldi	r19, 0x04	; 4
    45b0:	73 2a       	or	r7, r19
    45b2:	08 c0       	rjmp	.+16     	; 0x45c4 <vfprintf+0x5dc>
    45b4:	24 ff       	sbrs	r18, 4
    45b6:	09 c0       	rjmp	.+18     	; 0x45ca <vfprintf+0x5e2>
    45b8:	86 e0       	ldi	r24, 0x06	; 6
    45ba:	78 2a       	or	r7, r24
    45bc:	06 c0       	rjmp	.+12     	; 0x45ca <vfprintf+0x5e2>
    45be:	28 e0       	ldi	r18, 0x08	; 8
    45c0:	30 e0       	ldi	r19, 0x00	; 0
    45c2:	05 c0       	rjmp	.+10     	; 0x45ce <vfprintf+0x5e6>
    45c4:	20 e1       	ldi	r18, 0x10	; 16
    45c6:	30 e0       	ldi	r19, 0x00	; 0
    45c8:	02 c0       	rjmp	.+4      	; 0x45ce <vfprintf+0x5e6>
    45ca:	20 e1       	ldi	r18, 0x10	; 16
    45cc:	32 e0       	ldi	r19, 0x02	; 2
    45ce:	68 01       	movw	r12, r16
    45d0:	77 fe       	sbrs	r7, 7
    45d2:	09 c0       	rjmp	.+18     	; 0x45e6 <vfprintf+0x5fe>
    45d4:	94 e0       	ldi	r25, 0x04	; 4
    45d6:	c9 0e       	add	r12, r25
    45d8:	d1 1c       	adc	r13, r1
    45da:	f8 01       	movw	r30, r16
    45dc:	60 81       	ld	r22, Z
    45de:	71 81       	ldd	r23, Z+1	; 0x01
    45e0:	82 81       	ldd	r24, Z+2	; 0x02
    45e2:	93 81       	ldd	r25, Z+3	; 0x03
    45e4:	08 c0       	rjmp	.+16     	; 0x45f6 <vfprintf+0x60e>
    45e6:	f2 e0       	ldi	r31, 0x02	; 2
    45e8:	cf 0e       	add	r12, r31
    45ea:	d1 1c       	adc	r13, r1
    45ec:	f8 01       	movw	r30, r16
    45ee:	60 81       	ld	r22, Z
    45f0:	71 81       	ldd	r23, Z+1	; 0x01
    45f2:	80 e0       	ldi	r24, 0x00	; 0
    45f4:	90 e0       	ldi	r25, 0x00	; 0
    45f6:	a4 01       	movw	r20, r8
    45f8:	0e 94 37 29 	call	0x526e	; 0x526e <__ultoa_invert>
    45fc:	68 2e       	mov	r6, r24
    45fe:	68 18       	sub	r6, r8
    4600:	ff e7       	ldi	r31, 0x7F	; 127
    4602:	7f 22       	and	r7, r31
    4604:	76 fe       	sbrs	r7, 6
    4606:	0b c0       	rjmp	.+22     	; 0x461e <vfprintf+0x636>
    4608:	07 2d       	mov	r16, r7
    460a:	0e 7f       	andi	r16, 0xFE	; 254
    460c:	64 14       	cp	r6, r4
    460e:	50 f4       	brcc	.+20     	; 0x4624 <vfprintf+0x63c>
    4610:	74 fe       	sbrs	r7, 4
    4612:	0a c0       	rjmp	.+20     	; 0x4628 <vfprintf+0x640>
    4614:	72 fc       	sbrc	r7, 2
    4616:	08 c0       	rjmp	.+16     	; 0x4628 <vfprintf+0x640>
    4618:	07 2d       	mov	r16, r7
    461a:	0e 7e       	andi	r16, 0xEE	; 238
    461c:	05 c0       	rjmp	.+10     	; 0x4628 <vfprintf+0x640>
    461e:	16 2d       	mov	r17, r6
    4620:	07 2d       	mov	r16, r7
    4622:	03 c0       	rjmp	.+6      	; 0x462a <vfprintf+0x642>
    4624:	16 2d       	mov	r17, r6
    4626:	01 c0       	rjmp	.+2      	; 0x462a <vfprintf+0x642>
    4628:	14 2d       	mov	r17, r4
    462a:	04 ff       	sbrs	r16, 4
    462c:	0c c0       	rjmp	.+24     	; 0x4646 <vfprintf+0x65e>
    462e:	fe 01       	movw	r30, r28
    4630:	e6 0d       	add	r30, r6
    4632:	f1 1d       	adc	r31, r1
    4634:	80 81       	ld	r24, Z
    4636:	80 33       	cpi	r24, 0x30	; 48
    4638:	11 f4       	brne	.+4      	; 0x463e <vfprintf+0x656>
    463a:	09 7e       	andi	r16, 0xE9	; 233
    463c:	08 c0       	rjmp	.+16     	; 0x464e <vfprintf+0x666>
    463e:	02 ff       	sbrs	r16, 2
    4640:	05 c0       	rjmp	.+10     	; 0x464c <vfprintf+0x664>
    4642:	1e 5f       	subi	r17, 0xFE	; 254
    4644:	04 c0       	rjmp	.+8      	; 0x464e <vfprintf+0x666>
    4646:	80 2f       	mov	r24, r16
    4648:	86 78       	andi	r24, 0x86	; 134
    464a:	09 f0       	breq	.+2      	; 0x464e <vfprintf+0x666>
    464c:	1f 5f       	subi	r17, 0xFF	; 255
    464e:	03 fd       	sbrc	r16, 3
    4650:	12 c0       	rjmp	.+36     	; 0x4676 <vfprintf+0x68e>
    4652:	00 ff       	sbrs	r16, 0
    4654:	0d c0       	rjmp	.+26     	; 0x4670 <vfprintf+0x688>
    4656:	46 2c       	mov	r4, r6
    4658:	15 15       	cp	r17, r5
    465a:	50 f4       	brcc	.+20     	; 0x4670 <vfprintf+0x688>
    465c:	45 0c       	add	r4, r5
    465e:	41 1a       	sub	r4, r17
    4660:	15 2d       	mov	r17, r5
    4662:	06 c0       	rjmp	.+12     	; 0x4670 <vfprintf+0x688>
    4664:	b7 01       	movw	r22, r14
    4666:	80 e2       	ldi	r24, 0x20	; 32
    4668:	90 e0       	ldi	r25, 0x00	; 0
    466a:	0e 94 ba 28 	call	0x5174	; 0x5174 <fputc>
    466e:	1f 5f       	subi	r17, 0xFF	; 255
    4670:	15 15       	cp	r17, r5
    4672:	c0 f3       	brcs	.-16     	; 0x4664 <vfprintf+0x67c>
    4674:	04 c0       	rjmp	.+8      	; 0x467e <vfprintf+0x696>
    4676:	15 15       	cp	r17, r5
    4678:	10 f4       	brcc	.+4      	; 0x467e <vfprintf+0x696>
    467a:	51 1a       	sub	r5, r17
    467c:	01 c0       	rjmp	.+2      	; 0x4680 <vfprintf+0x698>
    467e:	51 2c       	mov	r5, r1
    4680:	04 ff       	sbrs	r16, 4
    4682:	10 c0       	rjmp	.+32     	; 0x46a4 <vfprintf+0x6bc>
    4684:	b7 01       	movw	r22, r14
    4686:	80 e3       	ldi	r24, 0x30	; 48
    4688:	90 e0       	ldi	r25, 0x00	; 0
    468a:	0e 94 ba 28 	call	0x5174	; 0x5174 <fputc>
    468e:	02 ff       	sbrs	r16, 2
    4690:	1e c0       	rjmp	.+60     	; 0x46ce <vfprintf+0x6e6>
    4692:	01 ff       	sbrs	r16, 1
    4694:	03 c0       	rjmp	.+6      	; 0x469c <vfprintf+0x6b4>
    4696:	88 e5       	ldi	r24, 0x58	; 88
    4698:	90 e0       	ldi	r25, 0x00	; 0
    469a:	02 c0       	rjmp	.+4      	; 0x46a0 <vfprintf+0x6b8>
    469c:	88 e7       	ldi	r24, 0x78	; 120
    469e:	90 e0       	ldi	r25, 0x00	; 0
    46a0:	b7 01       	movw	r22, r14
    46a2:	0c c0       	rjmp	.+24     	; 0x46bc <vfprintf+0x6d4>
    46a4:	80 2f       	mov	r24, r16
    46a6:	86 78       	andi	r24, 0x86	; 134
    46a8:	91 f0       	breq	.+36     	; 0x46ce <vfprintf+0x6e6>
    46aa:	01 fd       	sbrc	r16, 1
    46ac:	02 c0       	rjmp	.+4      	; 0x46b2 <vfprintf+0x6ca>
    46ae:	80 e2       	ldi	r24, 0x20	; 32
    46b0:	01 c0       	rjmp	.+2      	; 0x46b4 <vfprintf+0x6cc>
    46b2:	8b e2       	ldi	r24, 0x2B	; 43
    46b4:	07 fd       	sbrc	r16, 7
    46b6:	8d e2       	ldi	r24, 0x2D	; 45
    46b8:	b7 01       	movw	r22, r14
    46ba:	90 e0       	ldi	r25, 0x00	; 0
    46bc:	0e 94 ba 28 	call	0x5174	; 0x5174 <fputc>
    46c0:	06 c0       	rjmp	.+12     	; 0x46ce <vfprintf+0x6e6>
    46c2:	b7 01       	movw	r22, r14
    46c4:	80 e3       	ldi	r24, 0x30	; 48
    46c6:	90 e0       	ldi	r25, 0x00	; 0
    46c8:	0e 94 ba 28 	call	0x5174	; 0x5174 <fputc>
    46cc:	4a 94       	dec	r4
    46ce:	64 14       	cp	r6, r4
    46d0:	c0 f3       	brcs	.-16     	; 0x46c2 <vfprintf+0x6da>
    46d2:	6a 94       	dec	r6
    46d4:	f4 01       	movw	r30, r8
    46d6:	e6 0d       	add	r30, r6
    46d8:	f1 1d       	adc	r31, r1
    46da:	b7 01       	movw	r22, r14
    46dc:	80 81       	ld	r24, Z
    46de:	90 e0       	ldi	r25, 0x00	; 0
    46e0:	0e 94 ba 28 	call	0x5174	; 0x5174 <fputc>
    46e4:	61 10       	cpse	r6, r1
    46e6:	f5 cf       	rjmp	.-22     	; 0x46d2 <vfprintf+0x6ea>
    46e8:	06 c0       	rjmp	.+12     	; 0x46f6 <vfprintf+0x70e>
    46ea:	b7 01       	movw	r22, r14
    46ec:	80 e2       	ldi	r24, 0x20	; 32
    46ee:	90 e0       	ldi	r25, 0x00	; 0
    46f0:	0e 94 ba 28 	call	0x5174	; 0x5174 <fputc>
    46f4:	5a 94       	dec	r5
    46f6:	51 10       	cpse	r5, r1
    46f8:	f8 cf       	rjmp	.-16     	; 0x46ea <vfprintf+0x702>
    46fa:	97 cc       	rjmp	.-1746   	; 0x402a <vfprintf+0x42>
    46fc:	f7 01       	movw	r30, r14
    46fe:	26 81       	ldd	r18, Z+6	; 0x06
    4700:	37 81       	ldd	r19, Z+7	; 0x07
    4702:	02 c0       	rjmp	.+4      	; 0x4708 <vfprintf+0x720>
    4704:	2f ef       	ldi	r18, 0xFF	; 255
    4706:	3f ef       	ldi	r19, 0xFF	; 255
    4708:	c9 01       	movw	r24, r18
    470a:	63 96       	adiw	r28, 0x13	; 19
    470c:	cd bf       	out	0x3d, r28	; 61
    470e:	de bf       	out	0x3e, r29	; 62
    4710:	df 91       	pop	r29
    4712:	cf 91       	pop	r28
    4714:	1f 91       	pop	r17
    4716:	0f 91       	pop	r16
    4718:	ff 90       	pop	r15
    471a:	ef 90       	pop	r14
    471c:	df 90       	pop	r13
    471e:	cf 90       	pop	r12
    4720:	bf 90       	pop	r11
    4722:	af 90       	pop	r10
    4724:	9f 90       	pop	r9
    4726:	8f 90       	pop	r8
    4728:	7f 90       	pop	r7
    472a:	6f 90       	pop	r6
    472c:	5f 90       	pop	r5
    472e:	4f 90       	pop	r4
    4730:	3f 90       	pop	r3
    4732:	2f 90       	pop	r2
    4734:	08 95       	ret

00004736 <main>:
#include "system/system.h"

int main(void)
{
		return blockProgram();
    4736:	0c 94 46 09 	jmp	0x128c	; 0x128c <blockProgram>

0000473a <__subsf3>:
    473a:	50 58       	subi	r21, 0x80	; 128

0000473c <__addsf3>:
    473c:	bb 27       	eor	r27, r27
    473e:	aa 27       	eor	r26, r26
    4740:	0e d0       	rcall	.+28     	; 0x475e <__addsf3x>
    4742:	6c c1       	rjmp	.+728    	; 0x4a1c <__fp_round>
    4744:	5d d1       	rcall	.+698    	; 0x4a00 <__fp_pscA>
    4746:	30 f0       	brcs	.+12     	; 0x4754 <__addsf3+0x18>
    4748:	62 d1       	rcall	.+708    	; 0x4a0e <__fp_pscB>
    474a:	20 f0       	brcs	.+8      	; 0x4754 <__addsf3+0x18>
    474c:	31 f4       	brne	.+12     	; 0x475a <__addsf3+0x1e>
    474e:	9f 3f       	cpi	r25, 0xFF	; 255
    4750:	11 f4       	brne	.+4      	; 0x4756 <__addsf3+0x1a>
    4752:	1e f4       	brtc	.+6      	; 0x475a <__addsf3+0x1e>
    4754:	52 c1       	rjmp	.+676    	; 0x49fa <__fp_nan>
    4756:	0e f4       	brtc	.+2      	; 0x475a <__addsf3+0x1e>
    4758:	e0 95       	com	r30
    475a:	e7 fb       	bst	r30, 7
    475c:	48 c1       	rjmp	.+656    	; 0x49ee <__fp_inf>

0000475e <__addsf3x>:
    475e:	e9 2f       	mov	r30, r25
    4760:	6e d1       	rcall	.+732    	; 0x4a3e <__fp_split3>
    4762:	80 f3       	brcs	.-32     	; 0x4744 <__addsf3+0x8>
    4764:	ba 17       	cp	r27, r26
    4766:	62 07       	cpc	r22, r18
    4768:	73 07       	cpc	r23, r19
    476a:	84 07       	cpc	r24, r20
    476c:	95 07       	cpc	r25, r21
    476e:	18 f0       	brcs	.+6      	; 0x4776 <__addsf3x+0x18>
    4770:	71 f4       	brne	.+28     	; 0x478e <__addsf3x+0x30>
    4772:	9e f5       	brtc	.+102    	; 0x47da <__addsf3x+0x7c>
    4774:	86 c1       	rjmp	.+780    	; 0x4a82 <__fp_zero>
    4776:	0e f4       	brtc	.+2      	; 0x477a <__addsf3x+0x1c>
    4778:	e0 95       	com	r30
    477a:	0b 2e       	mov	r0, r27
    477c:	ba 2f       	mov	r27, r26
    477e:	a0 2d       	mov	r26, r0
    4780:	0b 01       	movw	r0, r22
    4782:	b9 01       	movw	r22, r18
    4784:	90 01       	movw	r18, r0
    4786:	0c 01       	movw	r0, r24
    4788:	ca 01       	movw	r24, r20
    478a:	a0 01       	movw	r20, r0
    478c:	11 24       	eor	r1, r1
    478e:	ff 27       	eor	r31, r31
    4790:	59 1b       	sub	r21, r25
    4792:	99 f0       	breq	.+38     	; 0x47ba <__addsf3x+0x5c>
    4794:	59 3f       	cpi	r21, 0xF9	; 249
    4796:	50 f4       	brcc	.+20     	; 0x47ac <__addsf3x+0x4e>
    4798:	50 3e       	cpi	r21, 0xE0	; 224
    479a:	68 f1       	brcs	.+90     	; 0x47f6 <__addsf3x+0x98>
    479c:	1a 16       	cp	r1, r26
    479e:	f0 40       	sbci	r31, 0x00	; 0
    47a0:	a2 2f       	mov	r26, r18
    47a2:	23 2f       	mov	r18, r19
    47a4:	34 2f       	mov	r19, r20
    47a6:	44 27       	eor	r20, r20
    47a8:	58 5f       	subi	r21, 0xF8	; 248
    47aa:	f3 cf       	rjmp	.-26     	; 0x4792 <__addsf3x+0x34>
    47ac:	46 95       	lsr	r20
    47ae:	37 95       	ror	r19
    47b0:	27 95       	ror	r18
    47b2:	a7 95       	ror	r26
    47b4:	f0 40       	sbci	r31, 0x00	; 0
    47b6:	53 95       	inc	r21
    47b8:	c9 f7       	brne	.-14     	; 0x47ac <__addsf3x+0x4e>
    47ba:	7e f4       	brtc	.+30     	; 0x47da <__addsf3x+0x7c>
    47bc:	1f 16       	cp	r1, r31
    47be:	ba 0b       	sbc	r27, r26
    47c0:	62 0b       	sbc	r22, r18
    47c2:	73 0b       	sbc	r23, r19
    47c4:	84 0b       	sbc	r24, r20
    47c6:	ba f0       	brmi	.+46     	; 0x47f6 <__addsf3x+0x98>
    47c8:	91 50       	subi	r25, 0x01	; 1
    47ca:	a1 f0       	breq	.+40     	; 0x47f4 <__addsf3x+0x96>
    47cc:	ff 0f       	add	r31, r31
    47ce:	bb 1f       	adc	r27, r27
    47d0:	66 1f       	adc	r22, r22
    47d2:	77 1f       	adc	r23, r23
    47d4:	88 1f       	adc	r24, r24
    47d6:	c2 f7       	brpl	.-16     	; 0x47c8 <__addsf3x+0x6a>
    47d8:	0e c0       	rjmp	.+28     	; 0x47f6 <__addsf3x+0x98>
    47da:	ba 0f       	add	r27, r26
    47dc:	62 1f       	adc	r22, r18
    47de:	73 1f       	adc	r23, r19
    47e0:	84 1f       	adc	r24, r20
    47e2:	48 f4       	brcc	.+18     	; 0x47f6 <__addsf3x+0x98>
    47e4:	87 95       	ror	r24
    47e6:	77 95       	ror	r23
    47e8:	67 95       	ror	r22
    47ea:	b7 95       	ror	r27
    47ec:	f7 95       	ror	r31
    47ee:	9e 3f       	cpi	r25, 0xFE	; 254
    47f0:	08 f0       	brcs	.+2      	; 0x47f4 <__addsf3x+0x96>
    47f2:	b3 cf       	rjmp	.-154    	; 0x475a <__addsf3+0x1e>
    47f4:	93 95       	inc	r25
    47f6:	88 0f       	add	r24, r24
    47f8:	08 f0       	brcs	.+2      	; 0x47fc <__addsf3x+0x9e>
    47fa:	99 27       	eor	r25, r25
    47fc:	ee 0f       	add	r30, r30
    47fe:	97 95       	ror	r25
    4800:	87 95       	ror	r24
    4802:	08 95       	ret

00004804 <__divsf3>:
    4804:	0c d0       	rcall	.+24     	; 0x481e <__divsf3x>
    4806:	0a c1       	rjmp	.+532    	; 0x4a1c <__fp_round>
    4808:	02 d1       	rcall	.+516    	; 0x4a0e <__fp_pscB>
    480a:	40 f0       	brcs	.+16     	; 0x481c <__divsf3+0x18>
    480c:	f9 d0       	rcall	.+498    	; 0x4a00 <__fp_pscA>
    480e:	30 f0       	brcs	.+12     	; 0x481c <__divsf3+0x18>
    4810:	21 f4       	brne	.+8      	; 0x481a <__divsf3+0x16>
    4812:	5f 3f       	cpi	r21, 0xFF	; 255
    4814:	19 f0       	breq	.+6      	; 0x481c <__divsf3+0x18>
    4816:	eb c0       	rjmp	.+470    	; 0x49ee <__fp_inf>
    4818:	51 11       	cpse	r21, r1
    481a:	34 c1       	rjmp	.+616    	; 0x4a84 <__fp_szero>
    481c:	ee c0       	rjmp	.+476    	; 0x49fa <__fp_nan>

0000481e <__divsf3x>:
    481e:	0f d1       	rcall	.+542    	; 0x4a3e <__fp_split3>
    4820:	98 f3       	brcs	.-26     	; 0x4808 <__divsf3+0x4>

00004822 <__divsf3_pse>:
    4822:	99 23       	and	r25, r25
    4824:	c9 f3       	breq	.-14     	; 0x4818 <__divsf3+0x14>
    4826:	55 23       	and	r21, r21
    4828:	b1 f3       	breq	.-20     	; 0x4816 <__divsf3+0x12>
    482a:	95 1b       	sub	r25, r21
    482c:	55 0b       	sbc	r21, r21
    482e:	bb 27       	eor	r27, r27
    4830:	aa 27       	eor	r26, r26
    4832:	62 17       	cp	r22, r18
    4834:	73 07       	cpc	r23, r19
    4836:	84 07       	cpc	r24, r20
    4838:	38 f0       	brcs	.+14     	; 0x4848 <__divsf3_pse+0x26>
    483a:	9f 5f       	subi	r25, 0xFF	; 255
    483c:	5f 4f       	sbci	r21, 0xFF	; 255
    483e:	22 0f       	add	r18, r18
    4840:	33 1f       	adc	r19, r19
    4842:	44 1f       	adc	r20, r20
    4844:	aa 1f       	adc	r26, r26
    4846:	a9 f3       	breq	.-22     	; 0x4832 <__divsf3_pse+0x10>
    4848:	33 d0       	rcall	.+102    	; 0x48b0 <__divsf3_pse+0x8e>
    484a:	0e 2e       	mov	r0, r30
    484c:	3a f0       	brmi	.+14     	; 0x485c <__divsf3_pse+0x3a>
    484e:	e0 e8       	ldi	r30, 0x80	; 128
    4850:	30 d0       	rcall	.+96     	; 0x48b2 <__divsf3_pse+0x90>
    4852:	91 50       	subi	r25, 0x01	; 1
    4854:	50 40       	sbci	r21, 0x00	; 0
    4856:	e6 95       	lsr	r30
    4858:	00 1c       	adc	r0, r0
    485a:	ca f7       	brpl	.-14     	; 0x484e <__divsf3_pse+0x2c>
    485c:	29 d0       	rcall	.+82     	; 0x48b0 <__divsf3_pse+0x8e>
    485e:	fe 2f       	mov	r31, r30
    4860:	27 d0       	rcall	.+78     	; 0x48b0 <__divsf3_pse+0x8e>
    4862:	66 0f       	add	r22, r22
    4864:	77 1f       	adc	r23, r23
    4866:	88 1f       	adc	r24, r24
    4868:	bb 1f       	adc	r27, r27
    486a:	26 17       	cp	r18, r22
    486c:	37 07       	cpc	r19, r23
    486e:	48 07       	cpc	r20, r24
    4870:	ab 07       	cpc	r26, r27
    4872:	b0 e8       	ldi	r27, 0x80	; 128
    4874:	09 f0       	breq	.+2      	; 0x4878 <__divsf3_pse+0x56>
    4876:	bb 0b       	sbc	r27, r27
    4878:	80 2d       	mov	r24, r0
    487a:	bf 01       	movw	r22, r30
    487c:	ff 27       	eor	r31, r31
    487e:	93 58       	subi	r25, 0x83	; 131
    4880:	5f 4f       	sbci	r21, 0xFF	; 255
    4882:	2a f0       	brmi	.+10     	; 0x488e <__divsf3_pse+0x6c>
    4884:	9e 3f       	cpi	r25, 0xFE	; 254
    4886:	51 05       	cpc	r21, r1
    4888:	68 f0       	brcs	.+26     	; 0x48a4 <__divsf3_pse+0x82>
    488a:	b1 c0       	rjmp	.+354    	; 0x49ee <__fp_inf>
    488c:	fb c0       	rjmp	.+502    	; 0x4a84 <__fp_szero>
    488e:	5f 3f       	cpi	r21, 0xFF	; 255
    4890:	ec f3       	brlt	.-6      	; 0x488c <__divsf3_pse+0x6a>
    4892:	98 3e       	cpi	r25, 0xE8	; 232
    4894:	dc f3       	brlt	.-10     	; 0x488c <__divsf3_pse+0x6a>
    4896:	86 95       	lsr	r24
    4898:	77 95       	ror	r23
    489a:	67 95       	ror	r22
    489c:	b7 95       	ror	r27
    489e:	f7 95       	ror	r31
    48a0:	9f 5f       	subi	r25, 0xFF	; 255
    48a2:	c9 f7       	brne	.-14     	; 0x4896 <__divsf3_pse+0x74>
    48a4:	88 0f       	add	r24, r24
    48a6:	91 1d       	adc	r25, r1
    48a8:	96 95       	lsr	r25
    48aa:	87 95       	ror	r24
    48ac:	97 f9       	bld	r25, 7
    48ae:	08 95       	ret
    48b0:	e1 e0       	ldi	r30, 0x01	; 1
    48b2:	66 0f       	add	r22, r22
    48b4:	77 1f       	adc	r23, r23
    48b6:	88 1f       	adc	r24, r24
    48b8:	bb 1f       	adc	r27, r27
    48ba:	62 17       	cp	r22, r18
    48bc:	73 07       	cpc	r23, r19
    48be:	84 07       	cpc	r24, r20
    48c0:	ba 07       	cpc	r27, r26
    48c2:	20 f0       	brcs	.+8      	; 0x48cc <__divsf3_pse+0xaa>
    48c4:	62 1b       	sub	r22, r18
    48c6:	73 0b       	sbc	r23, r19
    48c8:	84 0b       	sbc	r24, r20
    48ca:	ba 0b       	sbc	r27, r26
    48cc:	ee 1f       	adc	r30, r30
    48ce:	88 f7       	brcc	.-30     	; 0x48b2 <__divsf3_pse+0x90>
    48d0:	e0 95       	com	r30
    48d2:	08 95       	ret

000048d4 <__fixsfsi>:
    48d4:	04 d0       	rcall	.+8      	; 0x48de <__fixunssfsi>
    48d6:	68 94       	set
    48d8:	b1 11       	cpse	r27, r1
    48da:	d4 c0       	rjmp	.+424    	; 0x4a84 <__fp_szero>
    48dc:	08 95       	ret

000048de <__fixunssfsi>:
    48de:	b7 d0       	rcall	.+366    	; 0x4a4e <__fp_splitA>
    48e0:	88 f0       	brcs	.+34     	; 0x4904 <__fixunssfsi+0x26>
    48e2:	9f 57       	subi	r25, 0x7F	; 127
    48e4:	90 f0       	brcs	.+36     	; 0x490a <__fixunssfsi+0x2c>
    48e6:	b9 2f       	mov	r27, r25
    48e8:	99 27       	eor	r25, r25
    48ea:	b7 51       	subi	r27, 0x17	; 23
    48ec:	a0 f0       	brcs	.+40     	; 0x4916 <__fixunssfsi+0x38>
    48ee:	d1 f0       	breq	.+52     	; 0x4924 <__fixunssfsi+0x46>
    48f0:	66 0f       	add	r22, r22
    48f2:	77 1f       	adc	r23, r23
    48f4:	88 1f       	adc	r24, r24
    48f6:	99 1f       	adc	r25, r25
    48f8:	1a f0       	brmi	.+6      	; 0x4900 <__fixunssfsi+0x22>
    48fa:	ba 95       	dec	r27
    48fc:	c9 f7       	brne	.-14     	; 0x48f0 <__fixunssfsi+0x12>
    48fe:	12 c0       	rjmp	.+36     	; 0x4924 <__fixunssfsi+0x46>
    4900:	b1 30       	cpi	r27, 0x01	; 1
    4902:	81 f0       	breq	.+32     	; 0x4924 <__fixunssfsi+0x46>
    4904:	be d0       	rcall	.+380    	; 0x4a82 <__fp_zero>
    4906:	b1 e0       	ldi	r27, 0x01	; 1
    4908:	08 95       	ret
    490a:	bb c0       	rjmp	.+374    	; 0x4a82 <__fp_zero>
    490c:	67 2f       	mov	r22, r23
    490e:	78 2f       	mov	r23, r24
    4910:	88 27       	eor	r24, r24
    4912:	b8 5f       	subi	r27, 0xF8	; 248
    4914:	39 f0       	breq	.+14     	; 0x4924 <__fixunssfsi+0x46>
    4916:	b9 3f       	cpi	r27, 0xF9	; 249
    4918:	cc f3       	brlt	.-14     	; 0x490c <__fixunssfsi+0x2e>
    491a:	86 95       	lsr	r24
    491c:	77 95       	ror	r23
    491e:	67 95       	ror	r22
    4920:	b3 95       	inc	r27
    4922:	d9 f7       	brne	.-10     	; 0x491a <__fixunssfsi+0x3c>
    4924:	3e f4       	brtc	.+14     	; 0x4934 <__fixunssfsi+0x56>
    4926:	90 95       	com	r25
    4928:	80 95       	com	r24
    492a:	70 95       	com	r23
    492c:	61 95       	neg	r22
    492e:	7f 4f       	sbci	r23, 0xFF	; 255
    4930:	8f 4f       	sbci	r24, 0xFF	; 255
    4932:	9f 4f       	sbci	r25, 0xFF	; 255
    4934:	08 95       	ret

00004936 <__floatunsisf>:
    4936:	e8 94       	clt
    4938:	09 c0       	rjmp	.+18     	; 0x494c <__floatsisf+0x12>

0000493a <__floatsisf>:
    493a:	97 fb       	bst	r25, 7
    493c:	3e f4       	brtc	.+14     	; 0x494c <__floatsisf+0x12>
    493e:	90 95       	com	r25
    4940:	80 95       	com	r24
    4942:	70 95       	com	r23
    4944:	61 95       	neg	r22
    4946:	7f 4f       	sbci	r23, 0xFF	; 255
    4948:	8f 4f       	sbci	r24, 0xFF	; 255
    494a:	9f 4f       	sbci	r25, 0xFF	; 255
    494c:	99 23       	and	r25, r25
    494e:	a9 f0       	breq	.+42     	; 0x497a <__floatsisf+0x40>
    4950:	f9 2f       	mov	r31, r25
    4952:	96 e9       	ldi	r25, 0x96	; 150
    4954:	bb 27       	eor	r27, r27
    4956:	93 95       	inc	r25
    4958:	f6 95       	lsr	r31
    495a:	87 95       	ror	r24
    495c:	77 95       	ror	r23
    495e:	67 95       	ror	r22
    4960:	b7 95       	ror	r27
    4962:	f1 11       	cpse	r31, r1
    4964:	f8 cf       	rjmp	.-16     	; 0x4956 <__floatsisf+0x1c>
    4966:	fa f4       	brpl	.+62     	; 0x49a6 <__floatsisf+0x6c>
    4968:	bb 0f       	add	r27, r27
    496a:	11 f4       	brne	.+4      	; 0x4970 <__floatsisf+0x36>
    496c:	60 ff       	sbrs	r22, 0
    496e:	1b c0       	rjmp	.+54     	; 0x49a6 <__floatsisf+0x6c>
    4970:	6f 5f       	subi	r22, 0xFF	; 255
    4972:	7f 4f       	sbci	r23, 0xFF	; 255
    4974:	8f 4f       	sbci	r24, 0xFF	; 255
    4976:	9f 4f       	sbci	r25, 0xFF	; 255
    4978:	16 c0       	rjmp	.+44     	; 0x49a6 <__floatsisf+0x6c>
    497a:	88 23       	and	r24, r24
    497c:	11 f0       	breq	.+4      	; 0x4982 <__floatsisf+0x48>
    497e:	96 e9       	ldi	r25, 0x96	; 150
    4980:	11 c0       	rjmp	.+34     	; 0x49a4 <__floatsisf+0x6a>
    4982:	77 23       	and	r23, r23
    4984:	21 f0       	breq	.+8      	; 0x498e <__floatsisf+0x54>
    4986:	9e e8       	ldi	r25, 0x8E	; 142
    4988:	87 2f       	mov	r24, r23
    498a:	76 2f       	mov	r23, r22
    498c:	05 c0       	rjmp	.+10     	; 0x4998 <__floatsisf+0x5e>
    498e:	66 23       	and	r22, r22
    4990:	71 f0       	breq	.+28     	; 0x49ae <__floatsisf+0x74>
    4992:	96 e8       	ldi	r25, 0x86	; 134
    4994:	86 2f       	mov	r24, r22
    4996:	70 e0       	ldi	r23, 0x00	; 0
    4998:	60 e0       	ldi	r22, 0x00	; 0
    499a:	2a f0       	brmi	.+10     	; 0x49a6 <__floatsisf+0x6c>
    499c:	9a 95       	dec	r25
    499e:	66 0f       	add	r22, r22
    49a0:	77 1f       	adc	r23, r23
    49a2:	88 1f       	adc	r24, r24
    49a4:	da f7       	brpl	.-10     	; 0x499c <__floatsisf+0x62>
    49a6:	88 0f       	add	r24, r24
    49a8:	96 95       	lsr	r25
    49aa:	87 95       	ror	r24
    49ac:	97 f9       	bld	r25, 7
    49ae:	08 95       	ret

000049b0 <fmax>:
    49b0:	99 0f       	add	r25, r25
    49b2:	bb 0b       	sbc	r27, r27
    49b4:	55 0f       	add	r21, r21
    49b6:	aa 0b       	sbc	r26, r26
    49b8:	e0 e8       	ldi	r30, 0x80	; 128
    49ba:	fe ef       	ldi	r31, 0xFE	; 254
    49bc:	16 16       	cp	r1, r22
    49be:	17 06       	cpc	r1, r23
    49c0:	e8 07       	cpc	r30, r24
    49c2:	f9 07       	cpc	r31, r25
    49c4:	70 f0       	brcs	.+28     	; 0x49e2 <fmax+0x32>
    49c6:	12 16       	cp	r1, r18
    49c8:	13 06       	cpc	r1, r19
    49ca:	e4 07       	cpc	r30, r20
    49cc:	f5 07       	cpc	r31, r21
    49ce:	60 f0       	brcs	.+24     	; 0x49e8 <fmax+0x38>
    49d0:	ba 17       	cp	r27, r26
    49d2:	3c f0       	brlt	.+14     	; 0x49e2 <fmax+0x32>
    49d4:	49 f4       	brne	.+18     	; 0x49e8 <fmax+0x38>
    49d6:	62 17       	cp	r22, r18
    49d8:	73 07       	cpc	r23, r19
    49da:	84 07       	cpc	r24, r20
    49dc:	95 07       	cpc	r25, r21
    49de:	a7 95       	ror	r26
    49e0:	1b f4       	brvc	.+6      	; 0x49e8 <fmax+0x38>
    49e2:	b9 01       	movw	r22, r18
    49e4:	ca 01       	movw	r24, r20
    49e6:	ba 2f       	mov	r27, r26
    49e8:	b6 95       	lsr	r27
    49ea:	97 95       	ror	r25
    49ec:	08 95       	ret

000049ee <__fp_inf>:
    49ee:	97 f9       	bld	r25, 7
    49f0:	9f 67       	ori	r25, 0x7F	; 127
    49f2:	80 e8       	ldi	r24, 0x80	; 128
    49f4:	70 e0       	ldi	r23, 0x00	; 0
    49f6:	60 e0       	ldi	r22, 0x00	; 0
    49f8:	08 95       	ret

000049fa <__fp_nan>:
    49fa:	9f ef       	ldi	r25, 0xFF	; 255
    49fc:	80 ec       	ldi	r24, 0xC0	; 192
    49fe:	08 95       	ret

00004a00 <__fp_pscA>:
    4a00:	00 24       	eor	r0, r0
    4a02:	0a 94       	dec	r0
    4a04:	16 16       	cp	r1, r22
    4a06:	17 06       	cpc	r1, r23
    4a08:	18 06       	cpc	r1, r24
    4a0a:	09 06       	cpc	r0, r25
    4a0c:	08 95       	ret

00004a0e <__fp_pscB>:
    4a0e:	00 24       	eor	r0, r0
    4a10:	0a 94       	dec	r0
    4a12:	12 16       	cp	r1, r18
    4a14:	13 06       	cpc	r1, r19
    4a16:	14 06       	cpc	r1, r20
    4a18:	05 06       	cpc	r0, r21
    4a1a:	08 95       	ret

00004a1c <__fp_round>:
    4a1c:	09 2e       	mov	r0, r25
    4a1e:	03 94       	inc	r0
    4a20:	00 0c       	add	r0, r0
    4a22:	11 f4       	brne	.+4      	; 0x4a28 <__fp_round+0xc>
    4a24:	88 23       	and	r24, r24
    4a26:	52 f0       	brmi	.+20     	; 0x4a3c <__fp_round+0x20>
    4a28:	bb 0f       	add	r27, r27
    4a2a:	40 f4       	brcc	.+16     	; 0x4a3c <__fp_round+0x20>
    4a2c:	bf 2b       	or	r27, r31
    4a2e:	11 f4       	brne	.+4      	; 0x4a34 <__fp_round+0x18>
    4a30:	60 ff       	sbrs	r22, 0
    4a32:	04 c0       	rjmp	.+8      	; 0x4a3c <__fp_round+0x20>
    4a34:	6f 5f       	subi	r22, 0xFF	; 255
    4a36:	7f 4f       	sbci	r23, 0xFF	; 255
    4a38:	8f 4f       	sbci	r24, 0xFF	; 255
    4a3a:	9f 4f       	sbci	r25, 0xFF	; 255
    4a3c:	08 95       	ret

00004a3e <__fp_split3>:
    4a3e:	57 fd       	sbrc	r21, 7
    4a40:	90 58       	subi	r25, 0x80	; 128
    4a42:	44 0f       	add	r20, r20
    4a44:	55 1f       	adc	r21, r21
    4a46:	59 f0       	breq	.+22     	; 0x4a5e <__fp_splitA+0x10>
    4a48:	5f 3f       	cpi	r21, 0xFF	; 255
    4a4a:	71 f0       	breq	.+28     	; 0x4a68 <__fp_splitA+0x1a>
    4a4c:	47 95       	ror	r20

00004a4e <__fp_splitA>:
    4a4e:	88 0f       	add	r24, r24
    4a50:	97 fb       	bst	r25, 7
    4a52:	99 1f       	adc	r25, r25
    4a54:	61 f0       	breq	.+24     	; 0x4a6e <__fp_splitA+0x20>
    4a56:	9f 3f       	cpi	r25, 0xFF	; 255
    4a58:	79 f0       	breq	.+30     	; 0x4a78 <__fp_splitA+0x2a>
    4a5a:	87 95       	ror	r24
    4a5c:	08 95       	ret
    4a5e:	12 16       	cp	r1, r18
    4a60:	13 06       	cpc	r1, r19
    4a62:	14 06       	cpc	r1, r20
    4a64:	55 1f       	adc	r21, r21
    4a66:	f2 cf       	rjmp	.-28     	; 0x4a4c <__fp_split3+0xe>
    4a68:	46 95       	lsr	r20
    4a6a:	f1 df       	rcall	.-30     	; 0x4a4e <__fp_splitA>
    4a6c:	08 c0       	rjmp	.+16     	; 0x4a7e <__fp_splitA+0x30>
    4a6e:	16 16       	cp	r1, r22
    4a70:	17 06       	cpc	r1, r23
    4a72:	18 06       	cpc	r1, r24
    4a74:	99 1f       	adc	r25, r25
    4a76:	f1 cf       	rjmp	.-30     	; 0x4a5a <__fp_splitA+0xc>
    4a78:	86 95       	lsr	r24
    4a7a:	71 05       	cpc	r23, r1
    4a7c:	61 05       	cpc	r22, r1
    4a7e:	08 94       	sec
    4a80:	08 95       	ret

00004a82 <__fp_zero>:
    4a82:	e8 94       	clt

00004a84 <__fp_szero>:
    4a84:	bb 27       	eor	r27, r27
    4a86:	66 27       	eor	r22, r22
    4a88:	77 27       	eor	r23, r23
    4a8a:	cb 01       	movw	r24, r22
    4a8c:	97 f9       	bld	r25, 7
    4a8e:	08 95       	ret

00004a90 <__mulsf3>:
    4a90:	0b d0       	rcall	.+22     	; 0x4aa8 <__mulsf3x>
    4a92:	c4 cf       	rjmp	.-120    	; 0x4a1c <__fp_round>
    4a94:	b5 df       	rcall	.-150    	; 0x4a00 <__fp_pscA>
    4a96:	28 f0       	brcs	.+10     	; 0x4aa2 <__mulsf3+0x12>
    4a98:	ba df       	rcall	.-140    	; 0x4a0e <__fp_pscB>
    4a9a:	18 f0       	brcs	.+6      	; 0x4aa2 <__mulsf3+0x12>
    4a9c:	95 23       	and	r25, r21
    4a9e:	09 f0       	breq	.+2      	; 0x4aa2 <__mulsf3+0x12>
    4aa0:	a6 cf       	rjmp	.-180    	; 0x49ee <__fp_inf>
    4aa2:	ab cf       	rjmp	.-170    	; 0x49fa <__fp_nan>
    4aa4:	11 24       	eor	r1, r1
    4aa6:	ee cf       	rjmp	.-36     	; 0x4a84 <__fp_szero>

00004aa8 <__mulsf3x>:
    4aa8:	ca df       	rcall	.-108    	; 0x4a3e <__fp_split3>
    4aaa:	a0 f3       	brcs	.-24     	; 0x4a94 <__mulsf3+0x4>

00004aac <__mulsf3_pse>:
    4aac:	95 9f       	mul	r25, r21
    4aae:	d1 f3       	breq	.-12     	; 0x4aa4 <__mulsf3+0x14>
    4ab0:	95 0f       	add	r25, r21
    4ab2:	50 e0       	ldi	r21, 0x00	; 0
    4ab4:	55 1f       	adc	r21, r21
    4ab6:	62 9f       	mul	r22, r18
    4ab8:	f0 01       	movw	r30, r0
    4aba:	72 9f       	mul	r23, r18
    4abc:	bb 27       	eor	r27, r27
    4abe:	f0 0d       	add	r31, r0
    4ac0:	b1 1d       	adc	r27, r1
    4ac2:	63 9f       	mul	r22, r19
    4ac4:	aa 27       	eor	r26, r26
    4ac6:	f0 0d       	add	r31, r0
    4ac8:	b1 1d       	adc	r27, r1
    4aca:	aa 1f       	adc	r26, r26
    4acc:	64 9f       	mul	r22, r20
    4ace:	66 27       	eor	r22, r22
    4ad0:	b0 0d       	add	r27, r0
    4ad2:	a1 1d       	adc	r26, r1
    4ad4:	66 1f       	adc	r22, r22
    4ad6:	82 9f       	mul	r24, r18
    4ad8:	22 27       	eor	r18, r18
    4ada:	b0 0d       	add	r27, r0
    4adc:	a1 1d       	adc	r26, r1
    4ade:	62 1f       	adc	r22, r18
    4ae0:	73 9f       	mul	r23, r19
    4ae2:	b0 0d       	add	r27, r0
    4ae4:	a1 1d       	adc	r26, r1
    4ae6:	62 1f       	adc	r22, r18
    4ae8:	83 9f       	mul	r24, r19
    4aea:	a0 0d       	add	r26, r0
    4aec:	61 1d       	adc	r22, r1
    4aee:	22 1f       	adc	r18, r18
    4af0:	74 9f       	mul	r23, r20
    4af2:	33 27       	eor	r19, r19
    4af4:	a0 0d       	add	r26, r0
    4af6:	61 1d       	adc	r22, r1
    4af8:	23 1f       	adc	r18, r19
    4afa:	84 9f       	mul	r24, r20
    4afc:	60 0d       	add	r22, r0
    4afe:	21 1d       	adc	r18, r1
    4b00:	82 2f       	mov	r24, r18
    4b02:	76 2f       	mov	r23, r22
    4b04:	6a 2f       	mov	r22, r26
    4b06:	11 24       	eor	r1, r1
    4b08:	9f 57       	subi	r25, 0x7F	; 127
    4b0a:	50 40       	sbci	r21, 0x00	; 0
    4b0c:	8a f0       	brmi	.+34     	; 0x4b30 <__mulsf3_pse+0x84>
    4b0e:	e1 f0       	breq	.+56     	; 0x4b48 <__mulsf3_pse+0x9c>
    4b10:	88 23       	and	r24, r24
    4b12:	4a f0       	brmi	.+18     	; 0x4b26 <__mulsf3_pse+0x7a>
    4b14:	ee 0f       	add	r30, r30
    4b16:	ff 1f       	adc	r31, r31
    4b18:	bb 1f       	adc	r27, r27
    4b1a:	66 1f       	adc	r22, r22
    4b1c:	77 1f       	adc	r23, r23
    4b1e:	88 1f       	adc	r24, r24
    4b20:	91 50       	subi	r25, 0x01	; 1
    4b22:	50 40       	sbci	r21, 0x00	; 0
    4b24:	a9 f7       	brne	.-22     	; 0x4b10 <__mulsf3_pse+0x64>
    4b26:	9e 3f       	cpi	r25, 0xFE	; 254
    4b28:	51 05       	cpc	r21, r1
    4b2a:	70 f0       	brcs	.+28     	; 0x4b48 <__mulsf3_pse+0x9c>
    4b2c:	60 cf       	rjmp	.-320    	; 0x49ee <__fp_inf>
    4b2e:	aa cf       	rjmp	.-172    	; 0x4a84 <__fp_szero>
    4b30:	5f 3f       	cpi	r21, 0xFF	; 255
    4b32:	ec f3       	brlt	.-6      	; 0x4b2e <__mulsf3_pse+0x82>
    4b34:	98 3e       	cpi	r25, 0xE8	; 232
    4b36:	dc f3       	brlt	.-10     	; 0x4b2e <__mulsf3_pse+0x82>
    4b38:	86 95       	lsr	r24
    4b3a:	77 95       	ror	r23
    4b3c:	67 95       	ror	r22
    4b3e:	b7 95       	ror	r27
    4b40:	f7 95       	ror	r31
    4b42:	e7 95       	ror	r30
    4b44:	9f 5f       	subi	r25, 0xFF	; 255
    4b46:	c1 f7       	brne	.-16     	; 0x4b38 <__mulsf3_pse+0x8c>
    4b48:	fe 2b       	or	r31, r30
    4b4a:	88 0f       	add	r24, r24
    4b4c:	91 1d       	adc	r25, r1
    4b4e:	96 95       	lsr	r25
    4b50:	87 95       	ror	r24
    4b52:	97 f9       	bld	r25, 7
    4b54:	08 95       	ret

00004b56 <round>:
    4b56:	7b df       	rcall	.-266    	; 0x4a4e <__fp_splitA>
    4b58:	e0 f0       	brcs	.+56     	; 0x4b92 <round+0x3c>
    4b5a:	9e 37       	cpi	r25, 0x7E	; 126
    4b5c:	d8 f0       	brcs	.+54     	; 0x4b94 <round+0x3e>
    4b5e:	96 39       	cpi	r25, 0x96	; 150
    4b60:	b8 f4       	brcc	.+46     	; 0x4b90 <round+0x3a>
    4b62:	9e 38       	cpi	r25, 0x8E	; 142
    4b64:	48 f4       	brcc	.+18     	; 0x4b78 <round+0x22>
    4b66:	67 2f       	mov	r22, r23
    4b68:	78 2f       	mov	r23, r24
    4b6a:	88 27       	eor	r24, r24
    4b6c:	98 5f       	subi	r25, 0xF8	; 248
    4b6e:	f9 cf       	rjmp	.-14     	; 0x4b62 <round+0xc>
    4b70:	86 95       	lsr	r24
    4b72:	77 95       	ror	r23
    4b74:	67 95       	ror	r22
    4b76:	93 95       	inc	r25
    4b78:	95 39       	cpi	r25, 0x95	; 149
    4b7a:	d0 f3       	brcs	.-12     	; 0x4b70 <round+0x1a>
    4b7c:	b6 2f       	mov	r27, r22
    4b7e:	b1 70       	andi	r27, 0x01	; 1
    4b80:	6b 0f       	add	r22, r27
    4b82:	71 1d       	adc	r23, r1
    4b84:	81 1d       	adc	r24, r1
    4b86:	20 f4       	brcc	.+8      	; 0x4b90 <round+0x3a>
    4b88:	87 95       	ror	r24
    4b8a:	77 95       	ror	r23
    4b8c:	67 95       	ror	r22
    4b8e:	93 95       	inc	r25
    4b90:	02 c0       	rjmp	.+4      	; 0x4b96 <__fp_mintl>
    4b92:	1c c0       	rjmp	.+56     	; 0x4bcc <__fp_mpack>
    4b94:	77 cf       	rjmp	.-274    	; 0x4a84 <__fp_szero>

00004b96 <__fp_mintl>:
    4b96:	88 23       	and	r24, r24
    4b98:	71 f4       	brne	.+28     	; 0x4bb6 <__fp_mintl+0x20>
    4b9a:	77 23       	and	r23, r23
    4b9c:	21 f0       	breq	.+8      	; 0x4ba6 <__fp_mintl+0x10>
    4b9e:	98 50       	subi	r25, 0x08	; 8
    4ba0:	87 2b       	or	r24, r23
    4ba2:	76 2f       	mov	r23, r22
    4ba4:	07 c0       	rjmp	.+14     	; 0x4bb4 <__fp_mintl+0x1e>
    4ba6:	66 23       	and	r22, r22
    4ba8:	11 f4       	brne	.+4      	; 0x4bae <__fp_mintl+0x18>
    4baa:	99 27       	eor	r25, r25
    4bac:	0d c0       	rjmp	.+26     	; 0x4bc8 <__fp_mintl+0x32>
    4bae:	90 51       	subi	r25, 0x10	; 16
    4bb0:	86 2b       	or	r24, r22
    4bb2:	70 e0       	ldi	r23, 0x00	; 0
    4bb4:	60 e0       	ldi	r22, 0x00	; 0
    4bb6:	2a f0       	brmi	.+10     	; 0x4bc2 <__fp_mintl+0x2c>
    4bb8:	9a 95       	dec	r25
    4bba:	66 0f       	add	r22, r22
    4bbc:	77 1f       	adc	r23, r23
    4bbe:	88 1f       	adc	r24, r24
    4bc0:	da f7       	brpl	.-10     	; 0x4bb8 <__fp_mintl+0x22>
    4bc2:	88 0f       	add	r24, r24
    4bc4:	96 95       	lsr	r25
    4bc6:	87 95       	ror	r24
    4bc8:	97 f9       	bld	r25, 7
    4bca:	08 95       	ret

00004bcc <__fp_mpack>:
    4bcc:	9f 3f       	cpi	r25, 0xFF	; 255
    4bce:	31 f0       	breq	.+12     	; 0x4bdc <__fp_mpack_finite+0xc>

00004bd0 <__fp_mpack_finite>:
    4bd0:	91 50       	subi	r25, 0x01	; 1
    4bd2:	20 f4       	brcc	.+8      	; 0x4bdc <__fp_mpack_finite+0xc>
    4bd4:	87 95       	ror	r24
    4bd6:	77 95       	ror	r23
    4bd8:	67 95       	ror	r22
    4bda:	b7 95       	ror	r27
    4bdc:	88 0f       	add	r24, r24
    4bde:	91 1d       	adc	r25, r1
    4be0:	96 95       	lsr	r25
    4be2:	87 95       	ror	r24
    4be4:	97 f9       	bld	r25, 7
    4be6:	08 95       	ret

00004be8 <__muluhisi3>:
    4be8:	0e 94 4d 26 	call	0x4c9a	; 0x4c9a <__umulhisi3>
    4bec:	a5 9f       	mul	r26, r21
    4bee:	90 0d       	add	r25, r0
    4bf0:	b4 9f       	mul	r27, r20
    4bf2:	90 0d       	add	r25, r0
    4bf4:	a4 9f       	mul	r26, r20
    4bf6:	80 0d       	add	r24, r0
    4bf8:	91 1d       	adc	r25, r1
    4bfa:	11 24       	eor	r1, r1
    4bfc:	08 95       	ret

00004bfe <__udivmodqi4>:
    4bfe:	99 1b       	sub	r25, r25
    4c00:	79 e0       	ldi	r23, 0x09	; 9
    4c02:	04 c0       	rjmp	.+8      	; 0x4c0c <__udivmodqi4_ep>

00004c04 <__udivmodqi4_loop>:
    4c04:	99 1f       	adc	r25, r25
    4c06:	96 17       	cp	r25, r22
    4c08:	08 f0       	brcs	.+2      	; 0x4c0c <__udivmodqi4_ep>
    4c0a:	96 1b       	sub	r25, r22

00004c0c <__udivmodqi4_ep>:
    4c0c:	88 1f       	adc	r24, r24
    4c0e:	7a 95       	dec	r23
    4c10:	c9 f7       	brne	.-14     	; 0x4c04 <__udivmodqi4_loop>
    4c12:	80 95       	com	r24
    4c14:	08 95       	ret

00004c16 <__udivmodhi4>:
    4c16:	aa 1b       	sub	r26, r26
    4c18:	bb 1b       	sub	r27, r27
    4c1a:	51 e1       	ldi	r21, 0x11	; 17
    4c1c:	07 c0       	rjmp	.+14     	; 0x4c2c <__udivmodhi4_ep>

00004c1e <__udivmodhi4_loop>:
    4c1e:	aa 1f       	adc	r26, r26
    4c20:	bb 1f       	adc	r27, r27
    4c22:	a6 17       	cp	r26, r22
    4c24:	b7 07       	cpc	r27, r23
    4c26:	10 f0       	brcs	.+4      	; 0x4c2c <__udivmodhi4_ep>
    4c28:	a6 1b       	sub	r26, r22
    4c2a:	b7 0b       	sbc	r27, r23

00004c2c <__udivmodhi4_ep>:
    4c2c:	88 1f       	adc	r24, r24
    4c2e:	99 1f       	adc	r25, r25
    4c30:	5a 95       	dec	r21
    4c32:	a9 f7       	brne	.-22     	; 0x4c1e <__udivmodhi4_loop>
    4c34:	80 95       	com	r24
    4c36:	90 95       	com	r25
    4c38:	bc 01       	movw	r22, r24
    4c3a:	cd 01       	movw	r24, r26
    4c3c:	08 95       	ret

00004c3e <__udivmodsi4>:
    4c3e:	a1 e2       	ldi	r26, 0x21	; 33
    4c40:	1a 2e       	mov	r1, r26
    4c42:	aa 1b       	sub	r26, r26
    4c44:	bb 1b       	sub	r27, r27
    4c46:	fd 01       	movw	r30, r26
    4c48:	0d c0       	rjmp	.+26     	; 0x4c64 <__udivmodsi4_ep>

00004c4a <__udivmodsi4_loop>:
    4c4a:	aa 1f       	adc	r26, r26
    4c4c:	bb 1f       	adc	r27, r27
    4c4e:	ee 1f       	adc	r30, r30
    4c50:	ff 1f       	adc	r31, r31
    4c52:	a2 17       	cp	r26, r18
    4c54:	b3 07       	cpc	r27, r19
    4c56:	e4 07       	cpc	r30, r20
    4c58:	f5 07       	cpc	r31, r21
    4c5a:	20 f0       	brcs	.+8      	; 0x4c64 <__udivmodsi4_ep>
    4c5c:	a2 1b       	sub	r26, r18
    4c5e:	b3 0b       	sbc	r27, r19
    4c60:	e4 0b       	sbc	r30, r20
    4c62:	f5 0b       	sbc	r31, r21

00004c64 <__udivmodsi4_ep>:
    4c64:	66 1f       	adc	r22, r22
    4c66:	77 1f       	adc	r23, r23
    4c68:	88 1f       	adc	r24, r24
    4c6a:	99 1f       	adc	r25, r25
    4c6c:	1a 94       	dec	r1
    4c6e:	69 f7       	brne	.-38     	; 0x4c4a <__udivmodsi4_loop>
    4c70:	60 95       	com	r22
    4c72:	70 95       	com	r23
    4c74:	80 95       	com	r24
    4c76:	90 95       	com	r25
    4c78:	9b 01       	movw	r18, r22
    4c7a:	ac 01       	movw	r20, r24
    4c7c:	bd 01       	movw	r22, r26
    4c7e:	cf 01       	movw	r24, r30
    4c80:	08 95       	ret

00004c82 <__cmpdi2_s8>:
    4c82:	00 24       	eor	r0, r0
    4c84:	a7 fd       	sbrc	r26, 7
    4c86:	00 94       	com	r0
    4c88:	2a 17       	cp	r18, r26
    4c8a:	30 05       	cpc	r19, r0
    4c8c:	40 05       	cpc	r20, r0
    4c8e:	50 05       	cpc	r21, r0
    4c90:	60 05       	cpc	r22, r0
    4c92:	70 05       	cpc	r23, r0
    4c94:	80 05       	cpc	r24, r0
    4c96:	90 05       	cpc	r25, r0
    4c98:	08 95       	ret

00004c9a <__umulhisi3>:
    4c9a:	a2 9f       	mul	r26, r18
    4c9c:	b0 01       	movw	r22, r0
    4c9e:	b3 9f       	mul	r27, r19
    4ca0:	c0 01       	movw	r24, r0
    4ca2:	a3 9f       	mul	r26, r19
    4ca4:	01 d0       	rcall	.+2      	; 0x4ca8 <__umulhisi3+0xe>
    4ca6:	b2 9f       	mul	r27, r18
    4ca8:	70 0d       	add	r23, r0
    4caa:	81 1d       	adc	r24, r1
    4cac:	11 24       	eor	r1, r1
    4cae:	91 1d       	adc	r25, r1
    4cb0:	08 95       	ret

00004cb2 <calloc>:
    4cb2:	0f 93       	push	r16
    4cb4:	1f 93       	push	r17
    4cb6:	cf 93       	push	r28
    4cb8:	df 93       	push	r29
    4cba:	68 9f       	mul	r22, r24
    4cbc:	80 01       	movw	r16, r0
    4cbe:	69 9f       	mul	r22, r25
    4cc0:	10 0d       	add	r17, r0
    4cc2:	78 9f       	mul	r23, r24
    4cc4:	10 0d       	add	r17, r0
    4cc6:	11 24       	eor	r1, r1
    4cc8:	c8 01       	movw	r24, r16
    4cca:	0e 94 77 26 	call	0x4cee	; 0x4cee <malloc>
    4cce:	c8 2f       	mov	r28, r24
    4cd0:	d9 2f       	mov	r29, r25
    4cd2:	20 97       	sbiw	r28, 0x00	; 0
    4cd4:	31 f0       	breq	.+12     	; 0x4ce2 <calloc+0x30>
    4cd6:	a8 01       	movw	r20, r16
    4cd8:	60 e0       	ldi	r22, 0x00	; 0
    4cda:	70 e0       	ldi	r23, 0x00	; 0
    4cdc:	8c 2f       	mov	r24, r28
    4cde:	0e 94 a1 28 	call	0x5142	; 0x5142 <memset>
    4ce2:	ce 01       	movw	r24, r28
    4ce4:	df 91       	pop	r29
    4ce6:	cf 91       	pop	r28
    4ce8:	1f 91       	pop	r17
    4cea:	0f 91       	pop	r16
    4cec:	08 95       	ret

00004cee <malloc>:
    4cee:	0f 93       	push	r16
    4cf0:	1f 93       	push	r17
    4cf2:	cf 93       	push	r28
    4cf4:	df 93       	push	r29
    4cf6:	82 30       	cpi	r24, 0x02	; 2
    4cf8:	91 05       	cpc	r25, r1
    4cfa:	10 f4       	brcc	.+4      	; 0x4d00 <malloc+0x12>
    4cfc:	82 e0       	ldi	r24, 0x02	; 2
    4cfe:	90 e0       	ldi	r25, 0x00	; 0
    4d00:	e0 91 dc 26 	lds	r30, 0x26DC
    4d04:	f0 91 dd 26 	lds	r31, 0x26DD
    4d08:	20 e0       	ldi	r18, 0x00	; 0
    4d0a:	30 e0       	ldi	r19, 0x00	; 0
    4d0c:	c0 e0       	ldi	r28, 0x00	; 0
    4d0e:	d0 e0       	ldi	r29, 0x00	; 0
    4d10:	23 c0       	rjmp	.+70     	; 0x4d58 <malloc+0x6a>
    4d12:	40 81       	ld	r20, Z
    4d14:	51 81       	ldd	r21, Z+1	; 0x01
    4d16:	48 17       	cp	r20, r24
    4d18:	59 07       	cpc	r21, r25
    4d1a:	a8 f0       	brcs	.+42     	; 0x4d46 <malloc+0x58>
    4d1c:	48 17       	cp	r20, r24
    4d1e:	59 07       	cpc	r21, r25
    4d20:	61 f4       	brne	.+24     	; 0x4d3a <malloc+0x4c>
    4d22:	82 81       	ldd	r24, Z+2	; 0x02
    4d24:	93 81       	ldd	r25, Z+3	; 0x03
    4d26:	20 97       	sbiw	r28, 0x00	; 0
    4d28:	19 f0       	breq	.+6      	; 0x4d30 <malloc+0x42>
    4d2a:	8a 83       	std	Y+2, r24	; 0x02
    4d2c:	9b 83       	std	Y+3, r25	; 0x03
    4d2e:	2e c0       	rjmp	.+92     	; 0x4d8c <malloc+0x9e>
    4d30:	80 93 dc 26 	sts	0x26DC, r24
    4d34:	90 93 dd 26 	sts	0x26DD, r25
    4d38:	29 c0       	rjmp	.+82     	; 0x4d8c <malloc+0x9e>
    4d3a:	21 15       	cp	r18, r1
    4d3c:	31 05       	cpc	r19, r1
    4d3e:	29 f0       	breq	.+10     	; 0x4d4a <malloc+0x5c>
    4d40:	42 17       	cp	r20, r18
    4d42:	53 07       	cpc	r21, r19
    4d44:	10 f0       	brcs	.+4      	; 0x4d4a <malloc+0x5c>
    4d46:	a9 01       	movw	r20, r18
    4d48:	02 c0       	rjmp	.+4      	; 0x4d4e <malloc+0x60>
    4d4a:	be 01       	movw	r22, r28
    4d4c:	df 01       	movw	r26, r30
    4d4e:	02 81       	ldd	r16, Z+2	; 0x02
    4d50:	13 81       	ldd	r17, Z+3	; 0x03
    4d52:	ef 01       	movw	r28, r30
    4d54:	9a 01       	movw	r18, r20
    4d56:	f8 01       	movw	r30, r16
    4d58:	30 97       	sbiw	r30, 0x00	; 0
    4d5a:	d9 f6       	brne	.-74     	; 0x4d12 <malloc+0x24>
    4d5c:	21 15       	cp	r18, r1
    4d5e:	31 05       	cpc	r19, r1
    4d60:	09 f1       	breq	.+66     	; 0x4da4 <malloc+0xb6>
    4d62:	28 1b       	sub	r18, r24
    4d64:	39 0b       	sbc	r19, r25
    4d66:	24 30       	cpi	r18, 0x04	; 4
    4d68:	31 05       	cpc	r19, r1
    4d6a:	90 f4       	brcc	.+36     	; 0x4d90 <malloc+0xa2>
    4d6c:	12 96       	adiw	r26, 0x02	; 2
    4d6e:	8d 91       	ld	r24, X+
    4d70:	9c 91       	ld	r25, X
    4d72:	13 97       	sbiw	r26, 0x03	; 3
    4d74:	61 15       	cp	r22, r1
    4d76:	71 05       	cpc	r23, r1
    4d78:	21 f0       	breq	.+8      	; 0x4d82 <malloc+0x94>
    4d7a:	fb 01       	movw	r30, r22
    4d7c:	82 83       	std	Z+2, r24	; 0x02
    4d7e:	93 83       	std	Z+3, r25	; 0x03
    4d80:	04 c0       	rjmp	.+8      	; 0x4d8a <malloc+0x9c>
    4d82:	80 93 dc 26 	sts	0x26DC, r24
    4d86:	90 93 dd 26 	sts	0x26DD, r25
    4d8a:	fd 01       	movw	r30, r26
    4d8c:	32 96       	adiw	r30, 0x02	; 2
    4d8e:	44 c0       	rjmp	.+136    	; 0x4e18 <malloc+0x12a>
    4d90:	fd 01       	movw	r30, r26
    4d92:	e2 0f       	add	r30, r18
    4d94:	f3 1f       	adc	r31, r19
    4d96:	81 93       	st	Z+, r24
    4d98:	91 93       	st	Z+, r25
    4d9a:	22 50       	subi	r18, 0x02	; 2
    4d9c:	31 09       	sbc	r19, r1
    4d9e:	2d 93       	st	X+, r18
    4da0:	3c 93       	st	X, r19
    4da2:	3a c0       	rjmp	.+116    	; 0x4e18 <malloc+0x12a>
    4da4:	20 91 da 26 	lds	r18, 0x26DA
    4da8:	30 91 db 26 	lds	r19, 0x26DB
    4dac:	23 2b       	or	r18, r19
    4dae:	41 f4       	brne	.+16     	; 0x4dc0 <malloc+0xd2>
    4db0:	20 91 1f 20 	lds	r18, 0x201F
    4db4:	30 91 20 20 	lds	r19, 0x2020
    4db8:	20 93 da 26 	sts	0x26DA, r18
    4dbc:	30 93 db 26 	sts	0x26DB, r19
    4dc0:	20 91 1d 20 	lds	r18, 0x201D
    4dc4:	30 91 1e 20 	lds	r19, 0x201E
    4dc8:	21 15       	cp	r18, r1
    4dca:	31 05       	cpc	r19, r1
    4dcc:	41 f4       	brne	.+16     	; 0x4dde <malloc+0xf0>
    4dce:	2d b7       	in	r18, 0x3d	; 61
    4dd0:	3e b7       	in	r19, 0x3e	; 62
    4dd2:	40 91 21 20 	lds	r20, 0x2021
    4dd6:	50 91 22 20 	lds	r21, 0x2022
    4dda:	24 1b       	sub	r18, r20
    4ddc:	35 0b       	sbc	r19, r21
    4dde:	e0 91 da 26 	lds	r30, 0x26DA
    4de2:	f0 91 db 26 	lds	r31, 0x26DB
    4de6:	e2 17       	cp	r30, r18
    4de8:	f3 07       	cpc	r31, r19
    4dea:	a0 f4       	brcc	.+40     	; 0x4e14 <malloc+0x126>
    4dec:	2e 1b       	sub	r18, r30
    4dee:	3f 0b       	sbc	r19, r31
    4df0:	28 17       	cp	r18, r24
    4df2:	39 07       	cpc	r19, r25
    4df4:	78 f0       	brcs	.+30     	; 0x4e14 <malloc+0x126>
    4df6:	ac 01       	movw	r20, r24
    4df8:	4e 5f       	subi	r20, 0xFE	; 254
    4dfa:	5f 4f       	sbci	r21, 0xFF	; 255
    4dfc:	24 17       	cp	r18, r20
    4dfe:	35 07       	cpc	r19, r21
    4e00:	48 f0       	brcs	.+18     	; 0x4e14 <malloc+0x126>
    4e02:	4e 0f       	add	r20, r30
    4e04:	5f 1f       	adc	r21, r31
    4e06:	40 93 da 26 	sts	0x26DA, r20
    4e0a:	50 93 db 26 	sts	0x26DB, r21
    4e0e:	81 93       	st	Z+, r24
    4e10:	91 93       	st	Z+, r25
    4e12:	02 c0       	rjmp	.+4      	; 0x4e18 <malloc+0x12a>
    4e14:	e0 e0       	ldi	r30, 0x00	; 0
    4e16:	f0 e0       	ldi	r31, 0x00	; 0
    4e18:	cf 01       	movw	r24, r30
    4e1a:	df 91       	pop	r29
    4e1c:	cf 91       	pop	r28
    4e1e:	1f 91       	pop	r17
    4e20:	0f 91       	pop	r16
    4e22:	08 95       	ret

00004e24 <free>:
    4e24:	ef 92       	push	r14
    4e26:	ff 92       	push	r15
    4e28:	0f 93       	push	r16
    4e2a:	1f 93       	push	r17
    4e2c:	cf 93       	push	r28
    4e2e:	df 93       	push	r29
    4e30:	00 97       	sbiw	r24, 0x00	; 0
    4e32:	09 f4       	brne	.+2      	; 0x4e36 <free+0x12>
    4e34:	8e c0       	rjmp	.+284    	; 0x4f52 <free+0x12e>
    4e36:	dc 01       	movw	r26, r24
    4e38:	12 97       	sbiw	r26, 0x02	; 2
    4e3a:	12 96       	adiw	r26, 0x02	; 2
    4e3c:	1d 92       	st	X+, r1
    4e3e:	1c 92       	st	X, r1
    4e40:	13 97       	sbiw	r26, 0x03	; 3
    4e42:	e0 90 dc 26 	lds	r14, 0x26DC
    4e46:	f0 90 dd 26 	lds	r15, 0x26DD
    4e4a:	e1 14       	cp	r14, r1
    4e4c:	f1 04       	cpc	r15, r1
    4e4e:	89 f4       	brne	.+34     	; 0x4e72 <free+0x4e>
    4e50:	2d 91       	ld	r18, X+
    4e52:	3c 91       	ld	r19, X
    4e54:	11 97       	sbiw	r26, 0x01	; 1
    4e56:	28 0f       	add	r18, r24
    4e58:	39 1f       	adc	r19, r25
    4e5a:	80 91 da 26 	lds	r24, 0x26DA
    4e5e:	90 91 db 26 	lds	r25, 0x26DB
    4e62:	82 17       	cp	r24, r18
    4e64:	93 07       	cpc	r25, r19
    4e66:	89 f5       	brne	.+98     	; 0x4eca <free+0xa6>
    4e68:	a0 93 da 26 	sts	0x26DA, r26
    4e6c:	b0 93 db 26 	sts	0x26DB, r27
    4e70:	70 c0       	rjmp	.+224    	; 0x4f52 <free+0x12e>
    4e72:	e7 01       	movw	r28, r14
    4e74:	20 e0       	ldi	r18, 0x00	; 0
    4e76:	30 e0       	ldi	r19, 0x00	; 0
    4e78:	01 c0       	rjmp	.+2      	; 0x4e7c <free+0x58>
    4e7a:	ea 01       	movw	r28, r20
    4e7c:	ca 17       	cp	r28, r26
    4e7e:	db 07       	cpc	r29, r27
    4e80:	38 f4       	brcc	.+14     	; 0x4e90 <free+0x6c>
    4e82:	4a 81       	ldd	r20, Y+2	; 0x02
    4e84:	5b 81       	ldd	r21, Y+3	; 0x03
    4e86:	9e 01       	movw	r18, r28
    4e88:	41 15       	cp	r20, r1
    4e8a:	51 05       	cpc	r21, r1
    4e8c:	b1 f7       	brne	.-20     	; 0x4e7a <free+0x56>
    4e8e:	22 c0       	rjmp	.+68     	; 0x4ed4 <free+0xb0>
    4e90:	ac 01       	movw	r20, r24
    4e92:	42 50       	subi	r20, 0x02	; 2
    4e94:	51 09       	sbc	r21, r1
    4e96:	fa 01       	movw	r30, r20
    4e98:	c2 83       	std	Z+2, r28	; 0x02
    4e9a:	d3 83       	std	Z+3, r29	; 0x03
    4e9c:	00 81       	ld	r16, Z
    4e9e:	11 81       	ldd	r17, Z+1	; 0x01
    4ea0:	bc 01       	movw	r22, r24
    4ea2:	60 0f       	add	r22, r16
    4ea4:	71 1f       	adc	r23, r17
    4ea6:	6c 17       	cp	r22, r28
    4ea8:	7d 07       	cpc	r23, r29
    4eaa:	61 f4       	brne	.+24     	; 0x4ec4 <free+0xa0>
    4eac:	68 81       	ld	r22, Y
    4eae:	79 81       	ldd	r23, Y+1	; 0x01
    4eb0:	60 0f       	add	r22, r16
    4eb2:	71 1f       	adc	r23, r17
    4eb4:	6e 5f       	subi	r22, 0xFE	; 254
    4eb6:	7f 4f       	sbci	r23, 0xFF	; 255
    4eb8:	60 83       	st	Z, r22
    4eba:	71 83       	std	Z+1, r23	; 0x01
    4ebc:	6a 81       	ldd	r22, Y+2	; 0x02
    4ebe:	7b 81       	ldd	r23, Y+3	; 0x03
    4ec0:	62 83       	std	Z+2, r22	; 0x02
    4ec2:	73 83       	std	Z+3, r23	; 0x03
    4ec4:	21 15       	cp	r18, r1
    4ec6:	31 05       	cpc	r19, r1
    4ec8:	29 f4       	brne	.+10     	; 0x4ed4 <free+0xb0>
    4eca:	a0 93 dc 26 	sts	0x26DC, r26
    4ece:	b0 93 dd 26 	sts	0x26DD, r27
    4ed2:	3f c0       	rjmp	.+126    	; 0x4f52 <free+0x12e>
    4ed4:	f9 01       	movw	r30, r18
    4ed6:	a2 83       	std	Z+2, r26	; 0x02
    4ed8:	b3 83       	std	Z+3, r27	; 0x03
    4eda:	e9 01       	movw	r28, r18
    4edc:	49 91       	ld	r20, Y+
    4ede:	59 91       	ld	r21, Y+
    4ee0:	c4 0f       	add	r28, r20
    4ee2:	d5 1f       	adc	r29, r21
    4ee4:	ac 17       	cp	r26, r28
    4ee6:	bd 07       	cpc	r27, r29
    4ee8:	71 f4       	brne	.+28     	; 0x4f06 <free+0xe2>
    4eea:	dc 01       	movw	r26, r24
    4eec:	9e 91       	ld	r25, -X
    4eee:	8e 91       	ld	r24, -X
    4ef0:	84 0f       	add	r24, r20
    4ef2:	95 1f       	adc	r25, r21
    4ef4:	02 96       	adiw	r24, 0x02	; 2
    4ef6:	80 83       	st	Z, r24
    4ef8:	91 83       	std	Z+1, r25	; 0x01
    4efa:	12 96       	adiw	r26, 0x02	; 2
    4efc:	8d 91       	ld	r24, X+
    4efe:	9c 91       	ld	r25, X
    4f00:	13 97       	sbiw	r26, 0x03	; 3
    4f02:	82 83       	std	Z+2, r24	; 0x02
    4f04:	93 83       	std	Z+3, r25	; 0x03
    4f06:	a0 e0       	ldi	r26, 0x00	; 0
    4f08:	b0 e0       	ldi	r27, 0x00	; 0
    4f0a:	02 c0       	rjmp	.+4      	; 0x4f10 <free+0xec>
    4f0c:	d7 01       	movw	r26, r14
    4f0e:	7c 01       	movw	r14, r24
    4f10:	f7 01       	movw	r30, r14
    4f12:	82 81       	ldd	r24, Z+2	; 0x02
    4f14:	93 81       	ldd	r25, Z+3	; 0x03
    4f16:	00 97       	sbiw	r24, 0x00	; 0
    4f18:	c9 f7       	brne	.-14     	; 0x4f0c <free+0xe8>
    4f1a:	c7 01       	movw	r24, r14
    4f1c:	02 96       	adiw	r24, 0x02	; 2
    4f1e:	20 81       	ld	r18, Z
    4f20:	31 81       	ldd	r19, Z+1	; 0x01
    4f22:	82 0f       	add	r24, r18
    4f24:	93 1f       	adc	r25, r19
    4f26:	20 91 da 26 	lds	r18, 0x26DA
    4f2a:	30 91 db 26 	lds	r19, 0x26DB
    4f2e:	28 17       	cp	r18, r24
    4f30:	39 07       	cpc	r19, r25
    4f32:	79 f4       	brne	.+30     	; 0x4f52 <free+0x12e>
    4f34:	10 97       	sbiw	r26, 0x00	; 0
    4f36:	29 f4       	brne	.+10     	; 0x4f42 <free+0x11e>
    4f38:	10 92 dc 26 	sts	0x26DC, r1
    4f3c:	10 92 dd 26 	sts	0x26DD, r1
    4f40:	04 c0       	rjmp	.+8      	; 0x4f4a <free+0x126>
    4f42:	12 96       	adiw	r26, 0x02	; 2
    4f44:	1d 92       	st	X+, r1
    4f46:	1c 92       	st	X, r1
    4f48:	13 97       	sbiw	r26, 0x03	; 3
    4f4a:	e0 92 da 26 	sts	0x26DA, r14
    4f4e:	f0 92 db 26 	sts	0x26DB, r15
    4f52:	df 91       	pop	r29
    4f54:	cf 91       	pop	r28
    4f56:	1f 91       	pop	r17
    4f58:	0f 91       	pop	r16
    4f5a:	ff 90       	pop	r15
    4f5c:	ef 90       	pop	r14
    4f5e:	08 95       	ret

00004f60 <abort>:
    4f60:	81 e0       	ldi	r24, 0x01	; 1
    4f62:	90 e0       	ldi	r25, 0x00	; 0
    4f64:	f8 94       	cli
    4f66:	0c 94 95 29 	jmp	0x532a	; 0x532a <_exit>

00004f6a <__ftoa_engine>:
    4f6a:	28 30       	cpi	r18, 0x08	; 8
    4f6c:	08 f0       	brcs	.+2      	; 0x4f70 <__ftoa_engine+0x6>
    4f6e:	27 e0       	ldi	r18, 0x07	; 7
    4f70:	33 27       	eor	r19, r19
    4f72:	da 01       	movw	r26, r20
    4f74:	99 0f       	add	r25, r25
    4f76:	31 1d       	adc	r19, r1
    4f78:	87 fd       	sbrc	r24, 7
    4f7a:	91 60       	ori	r25, 0x01	; 1
    4f7c:	00 96       	adiw	r24, 0x00	; 0
    4f7e:	61 05       	cpc	r22, r1
    4f80:	71 05       	cpc	r23, r1
    4f82:	39 f4       	brne	.+14     	; 0x4f92 <__ftoa_engine+0x28>
    4f84:	32 60       	ori	r19, 0x02	; 2
    4f86:	2e 5f       	subi	r18, 0xFE	; 254
    4f88:	3d 93       	st	X+, r19
    4f8a:	30 e3       	ldi	r19, 0x30	; 48
    4f8c:	2a 95       	dec	r18
    4f8e:	e1 f7       	brne	.-8      	; 0x4f88 <__ftoa_engine+0x1e>
    4f90:	08 95       	ret
    4f92:	9f 3f       	cpi	r25, 0xFF	; 255
    4f94:	30 f0       	brcs	.+12     	; 0x4fa2 <__ftoa_engine+0x38>
    4f96:	80 38       	cpi	r24, 0x80	; 128
    4f98:	71 05       	cpc	r23, r1
    4f9a:	61 05       	cpc	r22, r1
    4f9c:	09 f0       	breq	.+2      	; 0x4fa0 <__ftoa_engine+0x36>
    4f9e:	3c 5f       	subi	r19, 0xFC	; 252
    4fa0:	3c 5f       	subi	r19, 0xFC	; 252
    4fa2:	3d 93       	st	X+, r19
    4fa4:	91 30       	cpi	r25, 0x01	; 1
    4fa6:	08 f0       	brcs	.+2      	; 0x4faa <__ftoa_engine+0x40>
    4fa8:	80 68       	ori	r24, 0x80	; 128
    4faa:	91 1d       	adc	r25, r1
    4fac:	df 93       	push	r29
    4fae:	cf 93       	push	r28
    4fb0:	1f 93       	push	r17
    4fb2:	0f 93       	push	r16
    4fb4:	ff 92       	push	r15
    4fb6:	ef 92       	push	r14
    4fb8:	19 2f       	mov	r17, r25
    4fba:	98 7f       	andi	r25, 0xF8	; 248
    4fbc:	96 95       	lsr	r25
    4fbe:	e9 2f       	mov	r30, r25
    4fc0:	96 95       	lsr	r25
    4fc2:	96 95       	lsr	r25
    4fc4:	e9 0f       	add	r30, r25
    4fc6:	ff 27       	eor	r31, r31
    4fc8:	e6 5b       	subi	r30, 0xB6	; 182
    4fca:	fd 4f       	sbci	r31, 0xFD	; 253
    4fcc:	99 27       	eor	r25, r25
    4fce:	33 27       	eor	r19, r19
    4fd0:	ee 24       	eor	r14, r14
    4fd2:	ff 24       	eor	r15, r15
    4fd4:	a7 01       	movw	r20, r14
    4fd6:	e7 01       	movw	r28, r14
    4fd8:	05 90       	lpm	r0, Z+
    4fda:	08 94       	sec
    4fdc:	07 94       	ror	r0
    4fde:	28 f4       	brcc	.+10     	; 0x4fea <__ftoa_engine+0x80>
    4fe0:	36 0f       	add	r19, r22
    4fe2:	e7 1e       	adc	r14, r23
    4fe4:	f8 1e       	adc	r15, r24
    4fe6:	49 1f       	adc	r20, r25
    4fe8:	51 1d       	adc	r21, r1
    4fea:	66 0f       	add	r22, r22
    4fec:	77 1f       	adc	r23, r23
    4fee:	88 1f       	adc	r24, r24
    4ff0:	99 1f       	adc	r25, r25
    4ff2:	06 94       	lsr	r0
    4ff4:	a1 f7       	brne	.-24     	; 0x4fde <__ftoa_engine+0x74>
    4ff6:	05 90       	lpm	r0, Z+
    4ff8:	07 94       	ror	r0
    4ffa:	28 f4       	brcc	.+10     	; 0x5006 <__ftoa_engine+0x9c>
    4ffc:	e7 0e       	add	r14, r23
    4ffe:	f8 1e       	adc	r15, r24
    5000:	49 1f       	adc	r20, r25
    5002:	56 1f       	adc	r21, r22
    5004:	c1 1d       	adc	r28, r1
    5006:	77 0f       	add	r23, r23
    5008:	88 1f       	adc	r24, r24
    500a:	99 1f       	adc	r25, r25
    500c:	66 1f       	adc	r22, r22
    500e:	06 94       	lsr	r0
    5010:	a1 f7       	brne	.-24     	; 0x4ffa <__ftoa_engine+0x90>
    5012:	05 90       	lpm	r0, Z+
    5014:	07 94       	ror	r0
    5016:	28 f4       	brcc	.+10     	; 0x5022 <__ftoa_engine+0xb8>
    5018:	f8 0e       	add	r15, r24
    501a:	49 1f       	adc	r20, r25
    501c:	56 1f       	adc	r21, r22
    501e:	c7 1f       	adc	r28, r23
    5020:	d1 1d       	adc	r29, r1
    5022:	88 0f       	add	r24, r24
    5024:	99 1f       	adc	r25, r25
    5026:	66 1f       	adc	r22, r22
    5028:	77 1f       	adc	r23, r23
    502a:	06 94       	lsr	r0
    502c:	a1 f7       	brne	.-24     	; 0x5016 <__ftoa_engine+0xac>
    502e:	05 90       	lpm	r0, Z+
    5030:	07 94       	ror	r0
    5032:	20 f4       	brcc	.+8      	; 0x503c <__ftoa_engine+0xd2>
    5034:	49 0f       	add	r20, r25
    5036:	56 1f       	adc	r21, r22
    5038:	c7 1f       	adc	r28, r23
    503a:	d8 1f       	adc	r29, r24
    503c:	99 0f       	add	r25, r25
    503e:	66 1f       	adc	r22, r22
    5040:	77 1f       	adc	r23, r23
    5042:	88 1f       	adc	r24, r24
    5044:	06 94       	lsr	r0
    5046:	a9 f7       	brne	.-22     	; 0x5032 <__ftoa_engine+0xc8>
    5048:	84 91       	lpm	r24, Z+
    504a:	10 95       	com	r17
    504c:	17 70       	andi	r17, 0x07	; 7
    504e:	41 f0       	breq	.+16     	; 0x5060 <__ftoa_engine+0xf6>
    5050:	d6 95       	lsr	r29
    5052:	c7 95       	ror	r28
    5054:	57 95       	ror	r21
    5056:	47 95       	ror	r20
    5058:	f7 94       	ror	r15
    505a:	e7 94       	ror	r14
    505c:	1a 95       	dec	r17
    505e:	c1 f7       	brne	.-16     	; 0x5050 <__ftoa_engine+0xe6>
    5060:	e0 ef       	ldi	r30, 0xF0	; 240
    5062:	f1 e0       	ldi	r31, 0x01	; 1
    5064:	68 94       	set
    5066:	15 90       	lpm	r1, Z+
    5068:	15 91       	lpm	r17, Z+
    506a:	35 91       	lpm	r19, Z+
    506c:	65 91       	lpm	r22, Z+
    506e:	95 91       	lpm	r25, Z+
    5070:	05 90       	lpm	r0, Z+
    5072:	7f e2       	ldi	r23, 0x2F	; 47
    5074:	73 95       	inc	r23
    5076:	e1 18       	sub	r14, r1
    5078:	f1 0a       	sbc	r15, r17
    507a:	43 0b       	sbc	r20, r19
    507c:	56 0b       	sbc	r21, r22
    507e:	c9 0b       	sbc	r28, r25
    5080:	d0 09       	sbc	r29, r0
    5082:	c0 f7       	brcc	.-16     	; 0x5074 <__ftoa_engine+0x10a>
    5084:	e1 0c       	add	r14, r1
    5086:	f1 1e       	adc	r15, r17
    5088:	43 1f       	adc	r20, r19
    508a:	56 1f       	adc	r21, r22
    508c:	c9 1f       	adc	r28, r25
    508e:	d0 1d       	adc	r29, r0
    5090:	7e f4       	brtc	.+30     	; 0x50b0 <__ftoa_engine+0x146>
    5092:	70 33       	cpi	r23, 0x30	; 48
    5094:	11 f4       	brne	.+4      	; 0x509a <__ftoa_engine+0x130>
    5096:	8a 95       	dec	r24
    5098:	e6 cf       	rjmp	.-52     	; 0x5066 <__ftoa_engine+0xfc>
    509a:	e8 94       	clt
    509c:	01 50       	subi	r16, 0x01	; 1
    509e:	30 f0       	brcs	.+12     	; 0x50ac <__ftoa_engine+0x142>
    50a0:	08 0f       	add	r16, r24
    50a2:	0a f4       	brpl	.+2      	; 0x50a6 <__ftoa_engine+0x13c>
    50a4:	00 27       	eor	r16, r16
    50a6:	02 17       	cp	r16, r18
    50a8:	08 f4       	brcc	.+2      	; 0x50ac <__ftoa_engine+0x142>
    50aa:	20 2f       	mov	r18, r16
    50ac:	23 95       	inc	r18
    50ae:	02 2f       	mov	r16, r18
    50b0:	7a 33       	cpi	r23, 0x3A	; 58
    50b2:	28 f0       	brcs	.+10     	; 0x50be <__ftoa_engine+0x154>
    50b4:	79 e3       	ldi	r23, 0x39	; 57
    50b6:	7d 93       	st	X+, r23
    50b8:	2a 95       	dec	r18
    50ba:	e9 f7       	brne	.-6      	; 0x50b6 <__ftoa_engine+0x14c>
    50bc:	10 c0       	rjmp	.+32     	; 0x50de <__ftoa_engine+0x174>
    50be:	7d 93       	st	X+, r23
    50c0:	2a 95       	dec	r18
    50c2:	89 f6       	brne	.-94     	; 0x5066 <__ftoa_engine+0xfc>
    50c4:	06 94       	lsr	r0
    50c6:	97 95       	ror	r25
    50c8:	67 95       	ror	r22
    50ca:	37 95       	ror	r19
    50cc:	17 95       	ror	r17
    50ce:	17 94       	ror	r1
    50d0:	e1 18       	sub	r14, r1
    50d2:	f1 0a       	sbc	r15, r17
    50d4:	43 0b       	sbc	r20, r19
    50d6:	56 0b       	sbc	r21, r22
    50d8:	c9 0b       	sbc	r28, r25
    50da:	d0 09       	sbc	r29, r0
    50dc:	98 f0       	brcs	.+38     	; 0x5104 <__ftoa_engine+0x19a>
    50de:	23 95       	inc	r18
    50e0:	7e 91       	ld	r23, -X
    50e2:	73 95       	inc	r23
    50e4:	7a 33       	cpi	r23, 0x3A	; 58
    50e6:	08 f0       	brcs	.+2      	; 0x50ea <__ftoa_engine+0x180>
    50e8:	70 e3       	ldi	r23, 0x30	; 48
    50ea:	7c 93       	st	X, r23
    50ec:	20 13       	cpse	r18, r16
    50ee:	b8 f7       	brcc	.-18     	; 0x50de <__ftoa_engine+0x174>
    50f0:	7e 91       	ld	r23, -X
    50f2:	70 61       	ori	r23, 0x10	; 16
    50f4:	7d 93       	st	X+, r23
    50f6:	30 f0       	brcs	.+12     	; 0x5104 <__ftoa_engine+0x19a>
    50f8:	83 95       	inc	r24
    50fa:	71 e3       	ldi	r23, 0x31	; 49
    50fc:	7d 93       	st	X+, r23
    50fe:	70 e3       	ldi	r23, 0x30	; 48
    5100:	2a 95       	dec	r18
    5102:	e1 f7       	brne	.-8      	; 0x50fc <__ftoa_engine+0x192>
    5104:	11 24       	eor	r1, r1
    5106:	ef 90       	pop	r14
    5108:	ff 90       	pop	r15
    510a:	0f 91       	pop	r16
    510c:	1f 91       	pop	r17
    510e:	cf 91       	pop	r28
    5110:	df 91       	pop	r29
    5112:	99 27       	eor	r25, r25
    5114:	87 fd       	sbrc	r24, 7
    5116:	90 95       	com	r25
    5118:	08 95       	ret

0000511a <strnlen_P>:
    511a:	fc 01       	movw	r30, r24
    511c:	05 90       	lpm	r0, Z+
    511e:	61 50       	subi	r22, 0x01	; 1
    5120:	70 40       	sbci	r23, 0x00	; 0
    5122:	01 10       	cpse	r0, r1
    5124:	d8 f7       	brcc	.-10     	; 0x511c <strnlen_P+0x2>
    5126:	80 95       	com	r24
    5128:	90 95       	com	r25
    512a:	8e 0f       	add	r24, r30
    512c:	9f 1f       	adc	r25, r31
    512e:	08 95       	ret

00005130 <memcpy>:
    5130:	fb 01       	movw	r30, r22
    5132:	dc 01       	movw	r26, r24
    5134:	02 c0       	rjmp	.+4      	; 0x513a <memcpy+0xa>
    5136:	01 90       	ld	r0, Z+
    5138:	0d 92       	st	X+, r0
    513a:	41 50       	subi	r20, 0x01	; 1
    513c:	50 40       	sbci	r21, 0x00	; 0
    513e:	d8 f7       	brcc	.-10     	; 0x5136 <memcpy+0x6>
    5140:	08 95       	ret

00005142 <memset>:
    5142:	dc 01       	movw	r26, r24
    5144:	01 c0       	rjmp	.+2      	; 0x5148 <memset+0x6>
    5146:	6d 93       	st	X+, r22
    5148:	41 50       	subi	r20, 0x01	; 1
    514a:	50 40       	sbci	r21, 0x00	; 0
    514c:	e0 f7       	brcc	.-8      	; 0x5146 <memset+0x4>
    514e:	08 95       	ret

00005150 <strcpy>:
    5150:	fb 01       	movw	r30, r22
    5152:	dc 01       	movw	r26, r24
    5154:	01 90       	ld	r0, Z+
    5156:	0d 92       	st	X+, r0
    5158:	00 20       	and	r0, r0
    515a:	e1 f7       	brne	.-8      	; 0x5154 <strcpy+0x4>
    515c:	08 95       	ret

0000515e <strnlen>:
    515e:	fc 01       	movw	r30, r24
    5160:	61 50       	subi	r22, 0x01	; 1
    5162:	70 40       	sbci	r23, 0x00	; 0
    5164:	01 90       	ld	r0, Z+
    5166:	01 10       	cpse	r0, r1
    5168:	d8 f7       	brcc	.-10     	; 0x5160 <strnlen+0x2>
    516a:	80 95       	com	r24
    516c:	90 95       	com	r25
    516e:	8e 0f       	add	r24, r30
    5170:	9f 1f       	adc	r25, r31
    5172:	08 95       	ret

00005174 <fputc>:
    5174:	0f 93       	push	r16
    5176:	1f 93       	push	r17
    5178:	cf 93       	push	r28
    517a:	df 93       	push	r29
    517c:	8c 01       	movw	r16, r24
    517e:	eb 01       	movw	r28, r22
    5180:	8b 81       	ldd	r24, Y+3	; 0x03
    5182:	81 fd       	sbrc	r24, 1
    5184:	03 c0       	rjmp	.+6      	; 0x518c <fputc+0x18>
    5186:	0f ef       	ldi	r16, 0xFF	; 255
    5188:	1f ef       	ldi	r17, 0xFF	; 255
    518a:	1a c0       	rjmp	.+52     	; 0x51c0 <fputc+0x4c>
    518c:	82 ff       	sbrs	r24, 2
    518e:	0d c0       	rjmp	.+26     	; 0x51aa <fputc+0x36>
    5190:	2e 81       	ldd	r18, Y+6	; 0x06
    5192:	3f 81       	ldd	r19, Y+7	; 0x07
    5194:	8c 81       	ldd	r24, Y+4	; 0x04
    5196:	9d 81       	ldd	r25, Y+5	; 0x05
    5198:	28 17       	cp	r18, r24
    519a:	39 07       	cpc	r19, r25
    519c:	64 f4       	brge	.+24     	; 0x51b6 <fputc+0x42>
    519e:	e8 81       	ld	r30, Y
    51a0:	f9 81       	ldd	r31, Y+1	; 0x01
    51a2:	01 93       	st	Z+, r16
    51a4:	e8 83       	st	Y, r30
    51a6:	f9 83       	std	Y+1, r31	; 0x01
    51a8:	06 c0       	rjmp	.+12     	; 0x51b6 <fputc+0x42>
    51aa:	e8 85       	ldd	r30, Y+8	; 0x08
    51ac:	f9 85       	ldd	r31, Y+9	; 0x09
    51ae:	80 2f       	mov	r24, r16
    51b0:	19 95       	eicall
    51b2:	89 2b       	or	r24, r25
    51b4:	41 f7       	brne	.-48     	; 0x5186 <fputc+0x12>
    51b6:	8e 81       	ldd	r24, Y+6	; 0x06
    51b8:	9f 81       	ldd	r25, Y+7	; 0x07
    51ba:	01 96       	adiw	r24, 0x01	; 1
    51bc:	8e 83       	std	Y+6, r24	; 0x06
    51be:	9f 83       	std	Y+7, r25	; 0x07
    51c0:	c8 01       	movw	r24, r16
    51c2:	df 91       	pop	r29
    51c4:	cf 91       	pop	r28
    51c6:	1f 91       	pop	r17
    51c8:	0f 91       	pop	r16
    51ca:	08 95       	ret

000051cc <printf>:
    51cc:	cf 93       	push	r28
    51ce:	df 93       	push	r29
    51d0:	1f 92       	push	r1
    51d2:	1f 92       	push	r1
    51d4:	cd b7       	in	r28, 0x3d	; 61
    51d6:	de b7       	in	r29, 0x3e	; 62
    51d8:	fe 01       	movw	r30, r28
    51da:	38 96       	adiw	r30, 0x08	; 8
    51dc:	61 91       	ld	r22, Z+
    51de:	71 91       	ld	r23, Z+
    51e0:	e9 83       	std	Y+1, r30	; 0x01
    51e2:	fa 83       	std	Y+2, r31	; 0x02
    51e4:	af 01       	movw	r20, r30
    51e6:	80 91 e0 26 	lds	r24, 0x26E0
    51ea:	90 91 e1 26 	lds	r25, 0x26E1
    51ee:	0e 94 f4 1f 	call	0x3fe8	; 0x3fe8 <vfprintf>
    51f2:	0f 90       	pop	r0
    51f4:	0f 90       	pop	r0
    51f6:	df 91       	pop	r29
    51f8:	cf 91       	pop	r28
    51fa:	08 95       	ret

000051fc <snprintf>:
    51fc:	0f 93       	push	r16
    51fe:	1f 93       	push	r17
    5200:	cf 93       	push	r28
    5202:	df 93       	push	r29
    5204:	cd b7       	in	r28, 0x3d	; 61
    5206:	de b7       	in	r29, 0x3e	; 62
    5208:	60 97       	sbiw	r28, 0x10	; 16
    520a:	cd bf       	out	0x3d, r28	; 61
    520c:	de bf       	out	0x3e, r29	; 62
    520e:	08 8d       	ldd	r16, Y+24	; 0x18
    5210:	19 8d       	ldd	r17, Y+25	; 0x19
    5212:	8a 8d       	ldd	r24, Y+26	; 0x1a
    5214:	9b 8d       	ldd	r25, Y+27	; 0x1b
    5216:	26 e0       	ldi	r18, 0x06	; 6
    5218:	2c 83       	std	Y+4, r18	; 0x04
    521a:	09 83       	std	Y+1, r16	; 0x01
    521c:	1a 83       	std	Y+2, r17	; 0x02
    521e:	97 ff       	sbrs	r25, 7
    5220:	02 c0       	rjmp	.+4      	; 0x5226 <snprintf+0x2a>
    5222:	80 e0       	ldi	r24, 0x00	; 0
    5224:	90 e8       	ldi	r25, 0x80	; 128
    5226:	01 97       	sbiw	r24, 0x01	; 1
    5228:	8d 83       	std	Y+5, r24	; 0x05
    522a:	9e 83       	std	Y+6, r25	; 0x06
    522c:	ae 01       	movw	r20, r28
    522e:	42 5e       	subi	r20, 0xE2	; 226
    5230:	5f 4f       	sbci	r21, 0xFF	; 255
    5232:	4f 87       	std	Y+15, r20	; 0x0f
    5234:	58 8b       	std	Y+16, r21	; 0x10
    5236:	6c 8d       	ldd	r22, Y+28	; 0x1c
    5238:	7d 8d       	ldd	r23, Y+29	; 0x1d
    523a:	ce 01       	movw	r24, r28
    523c:	01 96       	adiw	r24, 0x01	; 1
    523e:	0e 94 f4 1f 	call	0x3fe8	; 0x3fe8 <vfprintf>
    5242:	4d 81       	ldd	r20, Y+5	; 0x05
    5244:	5e 81       	ldd	r21, Y+6	; 0x06
    5246:	57 fd       	sbrc	r21, 7
    5248:	0a c0       	rjmp	.+20     	; 0x525e <snprintf+0x62>
    524a:	2f 81       	ldd	r18, Y+7	; 0x07
    524c:	38 85       	ldd	r19, Y+8	; 0x08
    524e:	42 17       	cp	r20, r18
    5250:	53 07       	cpc	r21, r19
    5252:	0c f4       	brge	.+2      	; 0x5256 <snprintf+0x5a>
    5254:	9a 01       	movw	r18, r20
    5256:	f8 01       	movw	r30, r16
    5258:	e2 0f       	add	r30, r18
    525a:	f3 1f       	adc	r31, r19
    525c:	10 82       	st	Z, r1
    525e:	60 96       	adiw	r28, 0x10	; 16
    5260:	cd bf       	out	0x3d, r28	; 61
    5262:	de bf       	out	0x3e, r29	; 62
    5264:	df 91       	pop	r29
    5266:	cf 91       	pop	r28
    5268:	1f 91       	pop	r17
    526a:	0f 91       	pop	r16
    526c:	08 95       	ret

0000526e <__ultoa_invert>:
    526e:	fa 01       	movw	r30, r20
    5270:	aa 27       	eor	r26, r26
    5272:	28 30       	cpi	r18, 0x08	; 8
    5274:	51 f1       	breq	.+84     	; 0x52ca <__ultoa_invert+0x5c>
    5276:	20 31       	cpi	r18, 0x10	; 16
    5278:	81 f1       	breq	.+96     	; 0x52da <__ultoa_invert+0x6c>
    527a:	e8 94       	clt
    527c:	6f 93       	push	r22
    527e:	6e 7f       	andi	r22, 0xFE	; 254
    5280:	6e 5f       	subi	r22, 0xFE	; 254
    5282:	7f 4f       	sbci	r23, 0xFF	; 255
    5284:	8f 4f       	sbci	r24, 0xFF	; 255
    5286:	9f 4f       	sbci	r25, 0xFF	; 255
    5288:	af 4f       	sbci	r26, 0xFF	; 255
    528a:	b1 e0       	ldi	r27, 0x01	; 1
    528c:	3e d0       	rcall	.+124    	; 0x530a <__ultoa_invert+0x9c>
    528e:	b4 e0       	ldi	r27, 0x04	; 4
    5290:	3c d0       	rcall	.+120    	; 0x530a <__ultoa_invert+0x9c>
    5292:	67 0f       	add	r22, r23
    5294:	78 1f       	adc	r23, r24
    5296:	89 1f       	adc	r24, r25
    5298:	9a 1f       	adc	r25, r26
    529a:	a1 1d       	adc	r26, r1
    529c:	68 0f       	add	r22, r24
    529e:	79 1f       	adc	r23, r25
    52a0:	8a 1f       	adc	r24, r26
    52a2:	91 1d       	adc	r25, r1
    52a4:	a1 1d       	adc	r26, r1
    52a6:	6a 0f       	add	r22, r26
    52a8:	71 1d       	adc	r23, r1
    52aa:	81 1d       	adc	r24, r1
    52ac:	91 1d       	adc	r25, r1
    52ae:	a1 1d       	adc	r26, r1
    52b0:	20 d0       	rcall	.+64     	; 0x52f2 <__ultoa_invert+0x84>
    52b2:	09 f4       	brne	.+2      	; 0x52b6 <__ultoa_invert+0x48>
    52b4:	68 94       	set
    52b6:	3f 91       	pop	r19
    52b8:	2a e0       	ldi	r18, 0x0A	; 10
    52ba:	26 9f       	mul	r18, r22
    52bc:	11 24       	eor	r1, r1
    52be:	30 19       	sub	r19, r0
    52c0:	30 5d       	subi	r19, 0xD0	; 208
    52c2:	31 93       	st	Z+, r19
    52c4:	de f6       	brtc	.-74     	; 0x527c <__ultoa_invert+0xe>
    52c6:	cf 01       	movw	r24, r30
    52c8:	08 95       	ret
    52ca:	46 2f       	mov	r20, r22
    52cc:	47 70       	andi	r20, 0x07	; 7
    52ce:	40 5d       	subi	r20, 0xD0	; 208
    52d0:	41 93       	st	Z+, r20
    52d2:	b3 e0       	ldi	r27, 0x03	; 3
    52d4:	0f d0       	rcall	.+30     	; 0x52f4 <__ultoa_invert+0x86>
    52d6:	c9 f7       	brne	.-14     	; 0x52ca <__ultoa_invert+0x5c>
    52d8:	f6 cf       	rjmp	.-20     	; 0x52c6 <__ultoa_invert+0x58>
    52da:	46 2f       	mov	r20, r22
    52dc:	4f 70       	andi	r20, 0x0F	; 15
    52de:	40 5d       	subi	r20, 0xD0	; 208
    52e0:	4a 33       	cpi	r20, 0x3A	; 58
    52e2:	18 f0       	brcs	.+6      	; 0x52ea <__ultoa_invert+0x7c>
    52e4:	49 5d       	subi	r20, 0xD9	; 217
    52e6:	31 fd       	sbrc	r19, 1
    52e8:	40 52       	subi	r20, 0x20	; 32
    52ea:	41 93       	st	Z+, r20
    52ec:	02 d0       	rcall	.+4      	; 0x52f2 <__ultoa_invert+0x84>
    52ee:	a9 f7       	brne	.-22     	; 0x52da <__ultoa_invert+0x6c>
    52f0:	ea cf       	rjmp	.-44     	; 0x52c6 <__ultoa_invert+0x58>
    52f2:	b4 e0       	ldi	r27, 0x04	; 4
    52f4:	a6 95       	lsr	r26
    52f6:	97 95       	ror	r25
    52f8:	87 95       	ror	r24
    52fa:	77 95       	ror	r23
    52fc:	67 95       	ror	r22
    52fe:	ba 95       	dec	r27
    5300:	c9 f7       	brne	.-14     	; 0x52f4 <__ultoa_invert+0x86>
    5302:	00 97       	sbiw	r24, 0x00	; 0
    5304:	61 05       	cpc	r22, r1
    5306:	71 05       	cpc	r23, r1
    5308:	08 95       	ret
    530a:	9b 01       	movw	r18, r22
    530c:	ac 01       	movw	r20, r24
    530e:	0a 2e       	mov	r0, r26
    5310:	06 94       	lsr	r0
    5312:	57 95       	ror	r21
    5314:	47 95       	ror	r20
    5316:	37 95       	ror	r19
    5318:	27 95       	ror	r18
    531a:	ba 95       	dec	r27
    531c:	c9 f7       	brne	.-14     	; 0x5310 <__ultoa_invert+0xa2>
    531e:	62 0f       	add	r22, r18
    5320:	73 1f       	adc	r23, r19
    5322:	84 1f       	adc	r24, r20
    5324:	95 1f       	adc	r25, r21
    5326:	a0 1d       	adc	r26, r0
    5328:	08 95       	ret

0000532a <_exit>:
    532a:	f8 94       	cli

0000532c <__stop_program>:
    532c:	ff cf       	rjmp	.-2      	; 0x532c <__stop_program>
