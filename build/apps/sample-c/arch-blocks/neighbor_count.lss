
arch-blocks/neighbor_count.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000354c  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000028  00802000  0000354c  00003600  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000057f  00802028  00802028  00003628  2**0
                  ALLOC
  3 .eeprom       00000004  00810000  00810000  00003628  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00001ea8  00000000  00000000  0000362c  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00000bdd  00000000  00000000  000054d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000022  00000000  00000000  000060b1  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000420  00000000  00000000  000060d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0000ae9e  00000000  00000000  000064f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000032f2  00000000  00000000  00011391  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00003175  00000000  00000000  00014683  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00001784  00000000  00000000  000177f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00002f2d  00000000  00000000  00018f7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00004b04  00000000  00000000  0001bea9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000118  00000000  00000000  000209ad  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__ctors_end>
       4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
       8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
       c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      10:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      14:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      18:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      1c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      20:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      24:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      28:	0c 94 cf 14 	jmp	0x299e	; 0x299e <__vector_10>
      2c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      30:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      34:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      38:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      3c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      40:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      44:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      48:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      4c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      50:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      54:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      58:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      5c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      60:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      64:	0c 94 dd 13 	jmp	0x27ba	; 0x27ba <__vector_25>
      68:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      6c:	0c 94 09 14 	jmp	0x2812	; 0x2812 <__vector_27>
      70:	0c 94 c9 12 	jmp	0x2592	; 0x2592 <__vector_28>
      74:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      78:	0c 94 f5 12 	jmp	0x25ea	; 0x25ea <__vector_30>
      7c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      80:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      84:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      88:	0c 94 50 0d 	jmp	0x1aa0	; 0x1aa0 <__vector_34>
      8c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      90:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      94:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      98:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      9c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      a0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      a4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      a8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      ac:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      b0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      b4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      b8:	0c 94 8f 0d 	jmp	0x1b1e	; 0x1b1e <__vector_46>
      bc:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      c0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      c4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      c8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      cc:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      d0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      d4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      d8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      dc:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      e0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      e4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      e8:	0c 94 81 13 	jmp	0x2702	; 0x2702 <__vector_58>
      ec:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      f0:	0c 94 ad 13 	jmp	0x275a	; 0x275a <__vector_60>
      f4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      f8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      fc:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     100:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     104:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     108:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     10c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     110:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     114:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     118:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     11c:	0c 94 16 15 	jmp	0x2a2c	; 0x2a2c <__vector_71>
     120:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     124:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     128:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     12c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     130:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     134:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     138:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     13c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     140:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     144:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     148:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     14c:	0c 94 f2 15 	jmp	0x2be4	; 0x2be4 <__vector_83>
     150:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     154:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     158:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     15c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     160:	0c 94 39 14 	jmp	0x2872	; 0x2872 <__vector_88>
     164:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     168:	0c 94 65 14 	jmp	0x28ca	; 0x28ca <__vector_90>
     16c:	0c 94 6d 12 	jmp	0x24da	; 0x24da <__vector_91>
     170:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     174:	0c 94 99 12 	jmp	0x2532	; 0x2532 <__vector_93>
     178:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     17c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     180:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     184:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     188:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     18c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     190:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     194:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     198:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     19c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1a0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1a4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1a8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1ac:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1b0:	0c 94 ee 0d 	jmp	0x1bdc	; 0x1bdc <__vector_108>
     1b4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1b8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1bc:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1c0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1c4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1c8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1cc:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1d0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1d4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1d8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1dc:	0c 94 25 13 	jmp	0x264a	; 0x264a <__vector_119>
     1e0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1e4:	0c 94 51 13 	jmp	0x26a2	; 0x26a2 <__vector_121>

000001e8 <__ctors_end>:
     1e8:	11 24       	eor	r1, r1
     1ea:	1f be       	out	0x3f, r1	; 63
     1ec:	cf ef       	ldi	r28, 0xFF	; 255
     1ee:	df e5       	ldi	r29, 0x5F	; 95
     1f0:	de bf       	out	0x3e, r29	; 62
     1f2:	cd bf       	out	0x3d, r28	; 61
     1f4:	00 e0       	ldi	r16, 0x00	; 0
     1f6:	0c bf       	out	0x3c, r16	; 60

000001f8 <__do_copy_data>:
     1f8:	10 e2       	ldi	r17, 0x20	; 32
     1fa:	a0 e0       	ldi	r26, 0x00	; 0
     1fc:	b0 e2       	ldi	r27, 0x20	; 32
     1fe:	ec e4       	ldi	r30, 0x4C	; 76
     200:	f5 e3       	ldi	r31, 0x35	; 53
     202:	00 e0       	ldi	r16, 0x00	; 0
     204:	0b bf       	out	0x3b, r16	; 59
     206:	02 c0       	rjmp	.+4      	; 0x20c <__do_copy_data+0x14>
     208:	07 90       	elpm	r0, Z+
     20a:	0d 92       	st	X+, r0
     20c:	a8 32       	cpi	r26, 0x28	; 40
     20e:	b1 07       	cpc	r27, r17
     210:	d9 f7       	brne	.-10     	; 0x208 <__do_copy_data+0x10>

00000212 <__do_clear_bss>:
     212:	15 e2       	ldi	r17, 0x25	; 37
     214:	a8 e2       	ldi	r26, 0x28	; 40
     216:	b0 e2       	ldi	r27, 0x20	; 32
     218:	01 c0       	rjmp	.+2      	; 0x21c <.do_clear_bss_start>

0000021a <.do_clear_bss_loop>:
     21a:	1d 92       	st	X+, r1

0000021c <.do_clear_bss_start>:
     21c:	a7 3a       	cpi	r26, 0xA7	; 167
     21e:	b1 07       	cpc	r27, r17
     220:	e1 f7       	brne	.-8      	; 0x21a <.do_clear_bss_loop>
     222:	0e 94 90 17 	call	0x2f20	; 0x2f20 <main>
     226:	0c 94 a4 1a 	jmp	0x3548	; 0x3548 <_exit>

0000022a <__bad_interrupt>:
     22a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000022e <myMain>:

void myMain(void)
{
  int numNeighbors;

  setColor(WHITE);
     22e:	86 e0       	ldi	r24, 0x06	; 6
     230:	0e 94 e7 06 	call	0xdce	; 0xdce <setColor>

  while(1)
  {
    numNeighbors = getNeighborCount();
     234:	0e 94 bd 03 	call	0x77a	; 0x77a <getNeighborCount>
     238:	90 e0       	ldi	r25, 0x00	; 0
      
    if( numNeighbors == 1 ) { 
     23a:	81 30       	cpi	r24, 0x01	; 1
     23c:	91 05       	cpc	r25, r1
     23e:	11 f4       	brne	.+4      	; 0x244 <myMain+0x16>
      setColor(RED);
     240:	80 e0       	ldi	r24, 0x00	; 0
     242:	f6 cf       	rjmp	.-20     	; 0x230 <myMain+0x2>
    }
    else if( numNeighbors == 2 ) { 
     244:	82 30       	cpi	r24, 0x02	; 2
     246:	91 05       	cpc	r25, r1
     248:	11 f4       	brne	.+4      	; 0x24e <myMain+0x20>
      setColor(ORANGE);
     24a:	81 e0       	ldi	r24, 0x01	; 1
     24c:	f1 cf       	rjmp	.-30     	; 0x230 <myMain+0x2>
    }
    else if( numNeighbors == 3 ) { 
     24e:	83 30       	cpi	r24, 0x03	; 3
     250:	91 05       	cpc	r25, r1
     252:	11 f4       	brne	.+4      	; 0x258 <myMain+0x2a>
      setColor(YELLOW);
     254:	82 e0       	ldi	r24, 0x02	; 2
     256:	ec cf       	rjmp	.-40     	; 0x230 <myMain+0x2>
    }
    else if( numNeighbors == 4 ) { 
     258:	84 30       	cpi	r24, 0x04	; 4
     25a:	91 05       	cpc	r25, r1
     25c:	11 f4       	brne	.+4      	; 0x262 <myMain+0x34>
      setColor(GREEN);
     25e:	83 e0       	ldi	r24, 0x03	; 3
     260:	e7 cf       	rjmp	.-50     	; 0x230 <myMain+0x2>
    }
    else if( numNeighbors == 5 ) { 
     262:	85 30       	cpi	r24, 0x05	; 5
     264:	91 05       	cpc	r25, r1
     266:	11 f4       	brne	.+4      	; 0x26c <myMain+0x3e>
      setColor(BLUE);
     268:	85 e0       	ldi	r24, 0x05	; 5
     26a:	e2 cf       	rjmp	.-60     	; 0x230 <myMain+0x2>
    }
    else if( numNeighbors == 6 ) { 
     26c:	06 97       	sbiw	r24, 0x06	; 6
     26e:	f9 f6       	brne	.-66     	; 0x22e <myMain>
      setColor(PURPLE);
     270:	87 e0       	ldi	r24, 0x07	; 7
     272:	de cf       	rjmp	.-68     	; 0x230 <myMain+0x2>

00000274 <blocktap>:
  }
}

int tapCount=0;
void blocktap(void){
	tapCount++;
     274:	80 91 28 20 	lds	r24, 0x2028
     278:	90 91 29 20 	lds	r25, 0x2029
     27c:	01 96       	adiw	r24, 0x01	; 1
     27e:	80 93 28 20 	sts	0x2028, r24
     282:	90 93 29 20 	sts	0x2029, r25
	if(tapCount==6){
     286:	06 97       	sbiw	r24, 0x06	; 6
     288:	11 f4       	brne	.+4      	; 0x28e <blocktap+0x1a>
		jumpToBootSection();
     28a:	0c 94 b2 01 	jmp	0x364	; 0x364 <jumpToBootSection>
     28e:	08 95       	ret

00000290 <userRegistration>:
}


void userRegistration(void)
{
	registerHandler(SYSTEM_MAIN, (GenericHandler)&myMain);
     290:	67 e1       	ldi	r22, 0x17	; 23
     292:	71 e0       	ldi	r23, 0x01	; 1
     294:	81 e0       	ldi	r24, 0x01	; 1
     296:	0c 94 a4 06 	jmp	0xd48	; 0xd48 <registerHandler>

0000029a <getAccelData>:

threadvar AccelData _acc;

AccelData getAccelData()
{
	return _acc;
     29a:	60 91 2e 20 	lds	r22, 0x202E
     29e:	70 91 2f 20 	lds	r23, 0x202F
}
     2a2:	80 91 30 20 	lds	r24, 0x2030
     2a6:	90 91 31 20 	lds	r25, 0x2031
     2aa:	08 95       	ret

000002ac <newAccelData>:

int newAccelData()
{
	return newHWAccelData();
     2ac:	0c 94 53 0c 	jmp	0x18a6	; 0x18a6 <newHWAccelData>

000002b0 <updateAccel>:
void updateAccel()
{
	//byte oldstatus = _acc.status & ACC_O_MASK;

	// this changes the _acc datastructure with new data, if available
	updateHWAccel();
     2b0:	0c 94 61 0c 	jmp	0x18c2	; 0x18c2 <updateHWAccel>

000002b4 <blockTick>:
//
// Polling-based hack to step through and update block state, as necessary.
//
// Much of this can probably be done via ISRs and other state change triggers and this function eliminated.
void blockTick()
{
     2b4:	cf 93       	push	r28
    // and never do anything again
    pauseForever();
  }
#endif
  //int input;
  blockTickRunning = 1;
     2b6:	81 e0       	ldi	r24, 0x01	; 1
     2b8:	90 e0       	ldi	r25, 0x00	; 0
     2ba:	80 93 2c 20 	sts	0x202C, r24
     2be:	90 93 2d 20 	sts	0x202D, r25
  
  if(accelReady){
     2c2:	80 91 2a 20 	lds	r24, 0x202A
     2c6:	90 91 2b 20 	lds	r25, 0x202B
     2ca:	89 2b       	or	r24, r25
     2cc:	31 f0       	breq	.+12     	; 0x2da <blockTick+0x26>
    if(newAccelData()){
     2ce:	0e 94 56 01 	call	0x2ac	; 0x2ac <newAccelData>
     2d2:	89 2b       	or	r24, r25
     2d4:	11 f0       	breq	.+4      	; 0x2da <blockTick+0x26>
      updateAccel();
     2d6:	0e 94 58 01 	call	0x2b0	; 0x2b0 <updateAccel>
    }
  }
  
  checkTimeout();
     2da:	0e 94 66 08 	call	0x10cc	; 0x10cc <checkTimeout>
  
  checkTimer();
     2de:	0e 94 4d 09 	call	0x129a	; 0x129a <checkTimer>
  
  for(i = 0; i < NUM_PORTS; ++i)
     2e2:	c0 e0       	ldi	r28, 0x00	; 0
    {
      // read from serial
      processBuffer(i);
     2e4:	8c 2f       	mov	r24, r28
     2e6:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <processBuffer>
      
      // active messaging (handle at most one per port)
      handleOneMessage();
     2ea:	0e 94 c2 02 	call	0x584	; 0x584 <handleOneMessage>
      
      //send packets/ACKS
      sendOnSerial(i);
     2ee:	8c 2f       	mov	r24, r28
     2f0:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <sendOnSerial>
  
  checkTimeout();
  
  checkTimer();
  
  for(i = 0; i < NUM_PORTS; ++i)
     2f4:	cf 5f       	subi	r28, 0xFF	; 255
     2f6:	c6 30       	cpi	r28, 0x06	; 6
     2f8:	a9 f7       	brne	.-22     	; 0x2e4 <blockTick+0x30>
      
      //send packets/ACKS
      sendOnSerial(i);
    }
  
  executeHandlers();	
     2fa:	0e 94 f6 05 	call	0xbec	; 0xbec <executeHandlers>
  blockTickRunning = 0;
     2fe:	10 92 2c 20 	sts	0x202C, r1
     302:	10 92 2d 20 	sts	0x202D, r1
  
}
     306:	cf 91       	pop	r28
     308:	08 95       	ret

0000030a <initBlock>:

// Ties all the horrifying subfunctions together into one simple function
void initBlock()
{
	//software initialization
	initHandlers();
     30a:	0e 94 dd 05 	call	0xbba	; 0xbba <initHandlers>

	//hardware related initialization
	initTime();
     30e:	0e 94 de 09 	call	0x13bc	; 0x13bc <initTime>

	initializeMemory();
     312:	0e 94 11 07 	call	0xe22	; 0xe22 <initializeMemory>

	initPorts();
     316:	0e 94 16 08 	call	0x102c	; 0x102c <initPorts>
#ifdef DEBUG
	initDebug();
    	printf("System Debug Enabled\r\n");
#endif

	initDataLink();	
     31a:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <initDataLink>

   	initHWLED();
     31e:	0e 94 24 11 	call	0x2248	; 0x2248 <initHWLED>
	//initAudio();

	initSystemMessage();
     322:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <initSystemMessage>
	initEnsemble();
     326:	0e 94 b8 05 	call	0xb70	; 0xb70 <initEnsemble>

	initBlockTick();		// HW INITIALIZATION ROUTINE
     32a:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <initBlockTick>

	initHWAccel();
     32e:	0e 94 b4 0c 	call	0x1968	; 0x1968 <initHWAccel>
	accelReady=1;
     332:	81 e0       	ldi	r24, 0x01	; 1
     334:	90 e0       	ldi	r25, 0x00	; 0
     336:	80 93 2a 20 	sts	0x202A, r24
     33a:	90 93 2b 20 	sts	0x202B, r25

#ifndef BBSIM
    initHWMic();
     33e:	0c 94 f7 14 	jmp	0x29ee	; 0x29ee <initHWMic>

00000342 <setUID>:
threadextern blockConf conf;

// sets local copy of UID
void setUID(uint16_t newID)
{
    conf.UID = newID;
     342:	80 93 f7 20 	sts	0x20F7, r24
     346:	90 93 f8 20 	sts	0x20F8, r25
     34a:	08 95       	ret

0000034c <setAndStoreUID>:
}

// sets local copy of UID and stores in EEPROM
void setAndStoreUID(uint16_t newID)
{
    conf.UID = newID;
     34c:	80 93 f7 20 	sts	0x20F7, r24
     350:	90 93 f8 20 	sts	0x20F8, r25
    store(&nv_conf, &conf, sizeof(blockConf));
     354:	44 e0       	ldi	r20, 0x04	; 4
     356:	50 e0       	ldi	r21, 0x00	; 0
     358:	67 ef       	ldi	r22, 0xF7	; 247
     35a:	70 e2       	ldi	r23, 0x20	; 32
     35c:	80 e0       	ldi	r24, 0x00	; 0
     35e:	90 e0       	ldi	r25, 0x00	; 0
     360:	0c 94 54 11 	jmp	0x22a8	; 0x22a8 <store>

00000364 <jumpToBootSection>:

// Jumps into the bootloader section.  This function never returns.
// Note that this function only works if the BOOTRST fuse is set to Boot Loader Reset
void jumpToBootSection()
{
	jumpToHWBootSection();
     364:	0c 94 1d 0e 	jmp	0x1c3a	; 0x1c3a <jumpToHWBootSection>

00000368 <push>:
#ifndef BBSIM
#include "util/atomic.h"
#endif

void push(byte data, CircBuf * b)
{ 
     368:	fb 01       	movw	r30, r22
  #ifndef BBSIM
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     36a:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     36c:	f8 94       	cli
  {
  #endif

    b->buf[b->end++] = data;
     36e:	97 8d       	ldd	r25, Z+31	; 0x1f
     370:	db 01       	movw	r26, r22
     372:	a9 0f       	add	r26, r25
     374:	b1 1d       	adc	r27, r1
     376:	8c 93       	st	X, r24
     378:	89 2f       	mov	r24, r25
     37a:	8f 5f       	subi	r24, 0xFF	; 255

    if(b->end == CIRC_BUF_LEN)
     37c:	8e 31       	cpi	r24, 0x1E	; 30
     37e:	11 f0       	breq	.+4      	; 0x384 <push+0x1c>
  #ifndef BBSIM
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
  {
  #endif

    b->buf[b->end++] = data;
     380:	87 8f       	std	Z+31, r24	; 0x1f
     382:	01 c0       	rjmp	.+2      	; 0x386 <push+0x1e>

    if(b->end == CIRC_BUF_LEN)
    {
      b->end = 0;
     384:	17 8e       	std	Z+31, r1	; 0x1f
    }

    if(b->end == b->start)
     386:	87 8d       	ldd	r24, Z+31	; 0x1f
     388:	96 8d       	ldd	r25, Z+30	; 0x1e
     38a:	89 17       	cp	r24, r25
     38c:	11 f0       	breq	.+4      	; 0x392 <push+0x2a>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     38e:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
     390:	08 95       	ret
    {
      b->start++;
     392:	8f 5f       	subi	r24, 0xFF	; 255
     394:	86 8f       	std	Z+30, r24	; 0x1e
	
      if(b->start == CIRC_BUF_LEN)
     396:	8e 31       	cpi	r24, 0x1E	; 30
     398:	d1 f7       	brne	.-12     	; 0x38e <push+0x26>
	  {
	    b->start = 0;
     39a:	16 8e       	std	Z+30, r1	; 0x1e
     39c:	f8 cf       	rjmp	.-16     	; 0x38e <push+0x26>

0000039e <pop>:
  }
  #endif
}

int pop(CircBuf * b)
{
     39e:	fc 01       	movw	r30, r24
  return data;
}

byte isEmpty(CircBuf * b)
{
  if(b->start == b->end)
     3a0:	96 8d       	ldd	r25, Z+30	; 0x1e
     3a2:	87 8d       	ldd	r24, Z+31	; 0x1f
     3a4:	98 13       	cpse	r25, r24
     3a6:	08 c0       	rjmp	.+16     	; 0x3b8 <pop+0x1a>
     3a8:	04 c0       	rjmp	.+8      	; 0x3b2 <pop+0x14>
  #endif
    data = b->buf[b->start++];
  
    if(b->start == CIRC_BUF_LEN)
    {
      b->start = 0;
     3aa:	16 8e       	std	Z+30, r1	; 0x1e
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     3ac:	9f bf       	out	0x3f, r25	; 63
    }
  #ifndef BBSIM
  }
  #endif
  
  return data;
     3ae:	30 e0       	ldi	r19, 0x00	; 0
     3b0:	0f c0       	rjmp	.+30     	; 0x3d0 <pop+0x32>
{
  uint8_t data;

  if( isEmpty(b) )
  {
	return -1;
     3b2:	2f ef       	ldi	r18, 0xFF	; 255
     3b4:	3f ef       	ldi	r19, 0xFF	; 255
     3b6:	0c c0       	rjmp	.+24     	; 0x3d0 <pop+0x32>
  }
  #ifndef BBSIM
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     3b8:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     3ba:	f8 94       	cli
  {
  #endif
    data = b->buf[b->start++];
     3bc:	86 8d       	ldd	r24, Z+30	; 0x1e
     3be:	df 01       	movw	r26, r30
     3c0:	a8 0f       	add	r26, r24
     3c2:	b1 1d       	adc	r27, r1
     3c4:	2c 91       	ld	r18, X
     3c6:	8f 5f       	subi	r24, 0xFF	; 255
  
    if(b->start == CIRC_BUF_LEN)
     3c8:	8e 31       	cpi	r24, 0x1E	; 30
     3ca:	79 f3       	breq	.-34     	; 0x3aa <pop+0xc>
  }
  #ifndef BBSIM
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
  {
  #endif
    data = b->buf[b->start++];
     3cc:	86 8f       	std	Z+30, r24	; 0x1e
     3ce:	ee cf       	rjmp	.-36     	; 0x3ac <pop+0xe>
  #ifndef BBSIM
  }
  #endif
  
  return data;
}
     3d0:	c9 01       	movw	r24, r18
     3d2:	08 95       	ret

000003d4 <isEmpty>:

byte isEmpty(CircBuf * b)
{
     3d4:	fc 01       	movw	r30, r24
  if(b->start == b->end)
     3d6:	81 e0       	ldi	r24, 0x01	; 1
     3d8:	26 8d       	ldd	r18, Z+30	; 0x1e
     3da:	97 8d       	ldd	r25, Z+31	; 0x1f
     3dc:	29 13       	cpse	r18, r25
     3de:	80 e0       	ldi	r24, 0x00	; 0
  {
    return 1;
  }
  return 0;
}
     3e0:	08 95       	ret

000003e2 <defaultMsgHandler>:
/////////////////// PROTECTED FUNCTIONS ///////////////////
// default message handler - does nothing
byte defaultMsgHandler(void)
{
    return 1;
}
     3e2:	81 e0       	ldi	r24, 0x01	; 1
     3e4:	08 95       	ret

000003e6 <reservedSystemHandler>:
//   using 0x0000 as message handler allows blocks 
//   running different programs to communicate at the system level.
byte reservedSystemHandler(void)
{
    // bogus
    if(thisChunk == NULL) {
     3e6:	e0 91 37 20 	lds	r30, 0x2037
     3ea:	f0 91 38 20 	lds	r31, 0x2038
     3ee:	30 97       	sbiw	r30, 0x00	; 0
     3f0:	49 f0       	breq	.+18     	; 0x404 <reservedSystemHandler+0x1e>
        return 0;
    }
  
    // find msg type and check
    switch( thisChunk->data[0] )
     3f2:	80 81       	ld	r24, Z
     3f4:	81 30       	cpi	r24, 0x01	; 1
     3f6:	21 f0       	breq	.+8      	; 0x400 <reservedSystemHandler+0x1a>
     3f8:	8f 3f       	cpi	r24, 0xFF	; 255
     3fa:	21 f4       	brne	.+8      	; 0x404 <reservedSystemHandler+0x1e>
	                break;
	            }
	            i++;
	        }
	        // consistent
    	    jumpToBootSection();
     3fc:	0e 94 b2 01 	call	0x364	; 0x364 <jumpToBootSection>
        }
        case NEIGHBOR_MSG:
            handleNeighborMessage();
     400:	0e 94 30 04 	call	0x860	; 0x860 <handleNeighborMessage>
        default:
            break;
    }
  
    return 0;
}
     404:	80 e0       	ldi	r24, 0x00	; 0
     406:	08 95       	ret

00000408 <removeFromSq>:
// inputs:  port
// output:  1-success, 0-failure
byte removeFromSq(PRef p, byte response)
{
    // empty or bad
    if( (p >= NUM_PORTS) || (port[p].sq.head == NULL) ) 
     408:	86 30       	cpi	r24, 0x06	; 6
     40a:	08 f0       	brcs	.+2      	; 0x40e <removeFromSq+0x6>
     40c:	3f c0       	rjmp	.+126    	; 0x48c <removeFromSq+0x84>
     40e:	98 e5       	ldi	r25, 0x58	; 88
     410:	89 9f       	mul	r24, r25
     412:	f0 01       	movw	r30, r0
     414:	11 24       	eor	r1, r1
     416:	e4 5c       	subi	r30, 0xC4	; 196
     418:	fc 4d       	sbci	r31, 0xDC	; 220
     41a:	87 85       	ldd	r24, Z+15	; 0x0f
     41c:	90 89       	ldd	r25, Z+16	; 0x10
     41e:	89 2b       	or	r24, r25
     420:	a9 f1       	breq	.+106    	; 0x48c <removeFromSq+0x84>
    {
        return 0;
    }

    BB_LOCK(SQ_LOCK)
     422:	2f b7       	in	r18, 0x3f	; 63
     424:	f8 94       	cli

    // get the first Chunk
    thisChunk = port[p].sq.head;
     426:	a7 85       	ldd	r26, Z+15	; 0x0f
     428:	b0 89       	ldd	r27, Z+16	; 0x10

    // move the head of the queue
    port[p].sq.head = thisChunk->next;
     42a:	52 96       	adiw	r26, 0x12	; 18
     42c:	8d 91       	ld	r24, X+
     42e:	9c 91       	ld	r25, X
     430:	53 97       	sbiw	r26, 0x13	; 19
     432:	87 87       	std	Z+15, r24	; 0x0f
     434:	90 8b       	std	Z+16, r25	; 0x10

    // tail was pointing to head, remove tail as well
    if( port[p].sq.head == NULL ) 
     436:	89 2b       	or	r24, r25
     438:	a1 f0       	breq	.+40     	; 0x462 <removeFromSq+0x5a>
     43a:	a0 93 37 20 	sts	0x2037, r26
     43e:	b0 93 38 20 	sts	0x2038, r27
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     442:	2f bf       	out	0x3f, r18	; 63
    // otherwise, leave it to what it was pointing to

    BB_UNLOCK(SQ_LOCK)

    // remove thisChunk's references to queue
    thisChunk->next = NULL;
     444:	a0 91 37 20 	lds	r26, 0x2037
     448:	b0 91 38 20 	lds	r27, 0x2038
     44c:	52 96       	adiw	r26, 0x12	; 18
     44e:	1d 92       	st	X+, r1
     450:	1c 92       	st	X, r1
     452:	53 97       	sbiw	r26, 0x13	; 19

    if(thisChunk->callback != NULL)
     454:	56 96       	adiw	r26, 0x16	; 22
     456:	ed 91       	ld	r30, X+
     458:	fc 91       	ld	r31, X
     45a:	57 97       	sbiw	r26, 0x17	; 23
     45c:	30 97       	sbiw	r30, 0x00	; 0
     45e:	39 f4       	brne	.+14     	; 0x46e <removeFromSq+0x66>
     460:	0f c0       	rjmp	.+30     	; 0x480 <removeFromSq+0x78>
    port[p].sq.head = thisChunk->next;

    // tail was pointing to head, remove tail as well
    if( port[p].sq.head == NULL ) 
    {
        port[p].sq.tail   = NULL;
     462:	11 8a       	std	Z+17, r1	; 0x11
     464:	12 8a       	std	Z+18, r1	; 0x12
        port[p].sq.flags &= ~CHUNK_READY;
     466:	86 85       	ldd	r24, Z+14	; 0x0e
     468:	8f 77       	andi	r24, 0x7F	; 127
     46a:	86 87       	std	Z+14, r24	; 0x0e
     46c:	e6 cf       	rjmp	.-52     	; 0x43a <removeFromSq+0x32>
    thisChunk->next = NULL;

    if(thisChunk->callback != NULL)
    {
        // set response type for callback
        setChunkResponse(thisChunk, response);
     46e:	68 71       	andi	r22, 0x18	; 24
     470:	51 96       	adiw	r26, 0x11	; 17
     472:	8c 91       	ld	r24, X
     474:	51 97       	sbiw	r26, 0x11	; 17
     476:	87 7e       	andi	r24, 0xE7	; 231
     478:	68 2b       	or	r22, r24
     47a:	51 96       	adiw	r26, 0x11	; 17
     47c:	6c 93       	st	X, r22
	
        // execute callback to clear memory and other user actions
        (thisChunk->callback)();
     47e:	19 95       	eicall
    }

    // we assume that the callback has freed memory
    thisChunk = NULL;
     480:	10 92 37 20 	sts	0x2037, r1
     484:	10 92 38 20 	sts	0x2038, r1
    return 1;
     488:	81 e0       	ldi	r24, 0x01	; 1
     48a:	08 95       	ret
byte removeFromSq(PRef p, byte response)
{
    // empty or bad
    if( (p >= NUM_PORTS) || (port[p].sq.head == NULL) ) 
    {
        return 0;
     48c:	80 e0       	ldi	r24, 0x00	; 0
    }

    // we assume that the callback has freed memory
    thisChunk = NULL;
    return 1;
}
     48e:	08 95       	ret

00000490 <flushSendQueue>:

// flush a send queue (used when retries fails)
void flushSendQueue(PRef p)
{
     490:	cf 93       	push	r28
     492:	c8 2f       	mov	r28, r24
    if(p < NUM_PORTS)
     494:	86 30       	cpi	r24, 0x06	; 6
     496:	30 f4       	brcc	.+12     	; 0x4a4 <flushSendQueue+0x14>
    {
        // flush buffer (call all callbacks as if all messages failed)
        while( removeFromSq(p, MSG_RESP_NOREPLY) );
     498:	68 e1       	ldi	r22, 0x18	; 24
     49a:	8c 2f       	mov	r24, r28
     49c:	0e 94 04 02 	call	0x408	; 0x408 <removeFromSq>
     4a0:	81 11       	cpse	r24, r1
     4a2:	fa cf       	rjmp	.-12     	; 0x498 <flushSendQueue+0x8>
    }
}
     4a4:	cf 91       	pop	r28
     4a6:	08 95       	ret

000004a8 <setupChunk>:
//          mh - handler for this message
//          cb - callback on send failure
// outputs: 1 - chunk correctly formatted
//          0 - inputs contained error, format failed
byte setupChunk(Chunk* c, PRef p, byte * msg, byte length, MsgHandler mh, GenericHandler cb)
{
     4a8:	ef 92       	push	r14
     4aa:	ff 92       	push	r15
     4ac:	0f 93       	push	r16
     4ae:	1f 93       	push	r17
     4b0:	cf 93       	push	r28
     4b2:	df 93       	push	r29
     4b4:	ec 01       	movw	r28, r24
     4b6:	ca 01       	movw	r24, r20
    // invalid Chunk, invalid port, message too long, or no message
    if( (c == NULL) || (p >= NUM_PORTS) || (length > DATA_SIZE) || (msg == NULL) )
     4b8:	20 97       	sbiw	r28, 0x00	; 0
     4ba:	51 f1       	breq	.+84     	; 0x510 <setupChunk+0x68>
     4bc:	66 30       	cpi	r22, 0x06	; 6
     4be:	40 f5       	brcc	.+80     	; 0x510 <setupChunk+0x68>
     4c0:	22 31       	cpi	r18, 0x12	; 18
     4c2:	30 f5       	brcc	.+76     	; 0x510 <setupChunk+0x68>
     4c4:	00 97       	sbiw	r24, 0x00	; 0
     4c6:	21 f1       	breq	.+72     	; 0x510 <setupChunk+0x68>
    {
        return 0;
    }

    // set the flags
    c->status = CHUNK_USED | CHUNK_FILLED | MSG_RESP_SENDING | port[p].pnum;
     4c8:	38 e5       	ldi	r19, 0x58	; 88
     4ca:	63 9f       	mul	r22, r19
     4cc:	f0 01       	movw	r30, r0
     4ce:	11 24       	eor	r1, r1
     4d0:	e4 5c       	subi	r30, 0xC4	; 196
     4d2:	fc 4d       	sbci	r31, 0xDC	; 220
     4d4:	30 81       	ld	r19, Z
     4d6:	30 68       	ori	r19, 0x80	; 128
     4d8:	39 8b       	std	Y+17, r19	; 0x11
    
    // clear out next pointer
    c->next = NULL;
     4da:	1a 8a       	std	Y+18, r1	; 0x12
     4dc:	1b 8a       	std	Y+19, r1	; 0x13

    // set message handler
    *((MsgHandler*)(c->handler)) = mh;
     4de:	0c 8b       	std	Y+20, r16	; 0x14
     4e0:	1d 8b       	std	Y+21, r17	; 0x15

    // setup callback
    c->callback = cb;
     4e2:	ee 8a       	std	Y+22, r14	; 0x16
     4e4:	ff 8a       	std	Y+23, r15	; 0x17

    // copy message
    memcpy(c->data, msg, length);
     4e6:	02 2f       	mov	r16, r18
     4e8:	10 e0       	ldi	r17, 0x00	; 0
     4ea:	42 2f       	mov	r20, r18
     4ec:	50 e0       	ldi	r21, 0x00	; 0
     4ee:	bc 01       	movw	r22, r24
     4f0:	ce 01       	movw	r24, r28
     4f2:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <memcpy>
    
    // 'zero' out extra bytes (use ff's)
    memset((c->data)+length, 0xFF, DATA_SIZE-length);
     4f6:	c0 0f       	add	r28, r16
     4f8:	d1 1f       	adc	r29, r17
     4fa:	41 e1       	ldi	r20, 0x11	; 17
     4fc:	50 e0       	ldi	r21, 0x00	; 0
     4fe:	40 1b       	sub	r20, r16
     500:	51 0b       	sbc	r21, r17
     502:	6f ef       	ldi	r22, 0xFF	; 255
     504:	70 e0       	ldi	r23, 0x00	; 0
     506:	ce 01       	movw	r24, r28
     508:	0e 94 e5 17 	call	0x2fca	; 0x2fca <memset>
    
    return 1;
     50c:	81 e0       	ldi	r24, 0x01	; 1
     50e:	01 c0       	rjmp	.+2      	; 0x512 <setupChunk+0x6a>
byte setupChunk(Chunk* c, PRef p, byte * msg, byte length, MsgHandler mh, GenericHandler cb)
{
    // invalid Chunk, invalid port, message too long, or no message
    if( (c == NULL) || (p >= NUM_PORTS) || (length > DATA_SIZE) || (msg == NULL) )
    {
        return 0;
     510:	80 e0       	ldi	r24, 0x00	; 0
    
    // 'zero' out extra bytes (use ff's)
    memset((c->data)+length, 0xFF, DATA_SIZE-length);
    
    return 1;
}
     512:	df 91       	pop	r29
     514:	cf 91       	pop	r28
     516:	1f 91       	pop	r17
     518:	0f 91       	pop	r16
     51a:	ff 90       	pop	r15
     51c:	ef 90       	pop	r14
     51e:	08 95       	ret

00000520 <queueChunk>:
// outputs: 1 - chunk successfully queued
//          0 - error, chunk was not queued
byte queueChunk(Chunk* c)
{
    // null Chunk
    if(c == NULL)
     520:	00 97       	sbiw	r24, 0x00	; 0
     522:	71 f1       	breq	.+92     	; 0x580 <queueChunk+0x60>
    {
        return 0;    
    }
    
    byte p = faceNum(c);
     524:	dc 01       	movw	r26, r24
     526:	51 96       	adiw	r26, 0x11	; 17
     528:	ec 91       	ld	r30, X
     52a:	e7 70       	andi	r30, 0x07	; 7
    
    if(p < NUM_PORTS)
     52c:	e6 30       	cpi	r30, 0x06	; 6
     52e:	30 f5       	brcc	.+76     	; 0x57c <queueChunk+0x5c>
            freeChunk(c);
            return 0;
        }
#endif    
    
        BB_LOCK(SQ_LOCK)
     530:	6f b7       	in	r22, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     532:	f8 94       	cli

        // add to queue - queue empty
        if( port[p].sq.head == NULL ) 
     534:	2e 2f       	mov	r18, r30
     536:	30 e0       	ldi	r19, 0x00	; 0
     538:	b8 e5       	ldi	r27, 0x58	; 88
     53a:	eb 9f       	mul	r30, r27
     53c:	f0 01       	movw	r30, r0
     53e:	11 24       	eor	r1, r1
     540:	e4 5c       	subi	r30, 0xC4	; 196
     542:	fc 4d       	sbci	r31, 0xDC	; 220
     544:	47 85       	ldd	r20, Z+15	; 0x0f
     546:	50 89       	ldd	r21, Z+16	; 0x10
     548:	45 2b       	or	r20, r21
     54a:	19 f4       	brne	.+6      	; 0x552 <queueChunk+0x32>
        {
            port[p].sq.head = c;
     54c:	87 87       	std	Z+15, r24	; 0x0f
     54e:	90 8b       	std	Z+16, r25	; 0x10
     550:	05 c0       	rjmp	.+10     	; 0x55c <queueChunk+0x3c>
        }
        // queue has stuff
        else 
        {
            port[p].sq.tail->next = c;
     552:	01 88       	ldd	r0, Z+17	; 0x11
     554:	f2 89       	ldd	r31, Z+18	; 0x12
     556:	e0 2d       	mov	r30, r0
     558:	82 8b       	std	Z+18, r24	; 0x12
     55a:	93 8b       	std	Z+19, r25	; 0x13
        }
        // add to tail and update flags
        port[p].sq.tail   = c;
     55c:	48 e5       	ldi	r20, 0x58	; 88
     55e:	42 9f       	mul	r20, r18
     560:	f0 01       	movw	r30, r0
     562:	43 9f       	mul	r20, r19
     564:	f0 0d       	add	r31, r0
     566:	11 24       	eor	r1, r1
     568:	e4 5c       	subi	r30, 0xC4	; 196
     56a:	fc 4d       	sbci	r31, 0xDC	; 220
     56c:	81 8b       	std	Z+17, r24	; 0x11
     56e:	92 8b       	std	Z+18, r25	; 0x12
        port[p].sq.flags |= CHUNK_READY;
     570:	86 85       	ldd	r24, Z+14	; 0x0e
     572:	80 68       	ori	r24, 0x80	; 128
     574:	86 87       	std	Z+14, r24	; 0x0e
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     576:	6f bf       	out	0x3f, r22	; 63

        BB_UNLOCK(SQ_LOCK)

        return 1;
     578:	81 e0       	ldi	r24, 0x01	; 1
     57a:	08 95       	ret
    }
    else
    {
        freeChunk(c);
     57c:	0e 94 22 07 	call	0xe44	; 0xe44 <freeChunk>
byte queueChunk(Chunk* c)
{
    // null Chunk
    if(c == NULL)
    {
        return 0;    
     580:	80 e0       	ldi	r24, 0x00	; 0
    else
    {
        freeChunk(c);
        return 0;
    }
}
     582:	08 95       	ret

00000584 <handleOneMessage>:
// returns: 1 - message processed
//          0 - no new messages
byte handleOneMessage()
{
    // set the global chunk that needs to be processed by the handler
    thisChunk = nextPacket();
     584:	0e 94 47 10 	call	0x208e	; 0x208e <nextPacket>
     588:	80 93 37 20 	sts	0x2037, r24
     58c:	90 93 38 20 	sts	0x2038, r25

    // no packet, no action
    if( thisChunk == NULL )
     590:	00 97       	sbiw	r24, 0x00	; 0
     592:	69 f1       	breq	.+90     	; 0x5ee <handleOneMessage+0x6a>
    {
        return 0;
    }

    // call handler
    if( *((MsgHandler*)thisChunk->handler) == RES_SYS_HANDLER ) 
     594:	dc 01       	movw	r26, r24
     596:	54 96       	adiw	r26, 0x14	; 20
     598:	ed 91       	ld	r30, X+
     59a:	fc 91       	ld	r31, X
     59c:	55 97       	sbiw	r26, 0x15	; 21
     59e:	30 97       	sbiw	r30, 0x00	; 0
     5a0:	19 f4       	brne	.+6      	; 0x5a8 <handleOneMessage+0x24>
    {
	    reservedSystemHandler();
     5a2:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <reservedSystemHandler>
     5a6:	01 c0       	rjmp	.+2      	; 0x5aa <handleOneMessage+0x26>
    }
    else 
    {
	    (*((MsgHandler*)(thisChunk->handler)))();
     5a8:	19 95       	eicall
    }

    // set flag to send ACK
    port[faceNum(thisChunk)].sq.flags |= setAck(thisChunk);
     5aa:	80 91 37 20 	lds	r24, 0x2037
     5ae:	90 91 38 20 	lds	r25, 0x2038
     5b2:	fc 01       	movw	r30, r24
     5b4:	21 89       	ldd	r18, Z+17	; 0x11
     5b6:	e2 2f       	mov	r30, r18
     5b8:	e7 70       	andi	r30, 0x07	; 7
     5ba:	38 e5       	ldi	r19, 0x58	; 88
     5bc:	e3 9f       	mul	r30, r19
     5be:	f0 01       	movw	r30, r0
     5c0:	11 24       	eor	r1, r1
     5c2:	e4 5c       	subi	r30, 0xC4	; 196
     5c4:	fc 4d       	sbci	r31, 0xDC	; 220
     5c6:	25 fb       	bst	r18, 5
     5c8:	44 27       	eor	r20, r20
     5ca:	40 f9       	bld	r20, 0
     5cc:	21 e0       	ldi	r18, 0x01	; 1
     5ce:	30 e0       	ldi	r19, 0x00	; 0
     5d0:	01 c0       	rjmp	.+2      	; 0x5d4 <handleOneMessage+0x50>
     5d2:	22 0f       	add	r18, r18
     5d4:	4a 95       	dec	r20
     5d6:	ea f7       	brpl	.-6      	; 0x5d2 <handleOneMessage+0x4e>
     5d8:	36 85       	ldd	r19, Z+14	; 0x0e
     5da:	32 2b       	or	r19, r18
     5dc:	36 87       	std	Z+14, r19	; 0x0e

    // free the rx chunk
    freeChunk(thisChunk);
     5de:	0e 94 22 07 	call	0xe44	; 0xe44 <freeChunk>

    // reset the global chunk since memory is no longer valid
    thisChunk = NULL;
     5e2:	10 92 37 20 	sts	0x2037, r1
     5e6:	10 92 38 20 	sts	0x2038, r1

    return 1;
     5ea:	81 e0       	ldi	r24, 0x01	; 1
     5ec:	08 95       	ret
    thisChunk = nextPacket();

    // no packet, no action
    if( thisChunk == NULL )
    {
        return 0;
     5ee:	80 e0       	ldi	r24, 0x00	; 0

    // reset the global chunk since memory is no longer valid
    thisChunk = NULL;

    return 1;
}
     5f0:	08 95       	ret

000005f2 <initDataLink>:

// initialization
void initDataLink()
{
    initHWDataLink();
     5f2:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <initHWDataLink>

    globalRq.head  = NULL;
     5f6:	10 92 32 20 	sts	0x2032, r1
     5fa:	10 92 33 20 	sts	0x2033, r1
    globalRq.tail  = NULL;
     5fe:	10 92 34 20 	sts	0x2034, r1
     602:	10 92 35 20 	sts	0x2035, r1
    globalRq.flags = 0;
     606:	10 92 36 20 	sts	0x2036, r1
     60a:	08 95       	ret

0000060c <initDebug>:
#include "debug.bbh"
#include "../hw-api/hwDebug.h"

void initDebug() 
{
  initHWDebug();
     60c:	0c 94 8f 17 	jmp	0x2f1e	; 0x2f1e <initHWDebug>

00000610 <neighborKeepalive>:
    freeChunk(thisChunk);
}

// this is called periodically to verify neighbor is still there and in the right state
void neighborKeepalive(void)
{
     610:	0f 93       	push	r16
     612:	1f 93       	push	r17
     614:	cf 93       	push	r28
     616:	df 93       	push	r29
     618:	00 d0       	rcall	.+0      	; 0x61a <neighborKeepalive+0xa>
     61a:	00 d0       	rcall	.+0      	; 0x61c <neighborKeepalive+0xc>
     61c:	cd b7       	in	r28, 0x3d	; 61
     61e:	de b7       	in	r29, 0x3e	; 62
  // craft and send a keeplive message of the form:
  // [header] [myGUID][yourGUID]
  byte buf[6];
  buf[0] = NEIGHBOR_MSG;
     620:	81 e0       	ldi	r24, 0x01	; 1
     622:	89 83       	std	Y+1, r24	; 0x01
  buf[1] = MSG_NEIGHBOR_KEEPALIVE;
     624:	83 e0       	ldi	r24, 0x03	; 3
     626:	8a 83       	std	Y+2, r24	; 0x02
  GUIDIntoChar(getGUID(), &(buf[2]));
     628:	0e 94 b0 11 	call	0x2360	; 0x2360 <getGUID>
threadvar Timer ttNeighbor[6];

// converts a UID into a passed in character stream.  Assumes 2-byte GUIDs.
void GUIDIntoChar(Uid id, byte * c)
{
    c[0] = (id >> 8) & 0x00FF;
     62c:	9b 83       	std	Y+3, r25	; 0x03
    c[1] = (id & 0x00FF); 
     62e:	8c 83       	std	Y+4, r24	; 0x04
  // [header] [myGUID][yourGUID]
  byte buf[6];
  buf[0] = NEIGHBOR_MSG;
  buf[1] = MSG_NEIGHBOR_KEEPALIVE;
  GUIDIntoChar(getGUID(), &(buf[2]));
  GUIDIntoChar(thisNeighborhood.n[thisTimeout->arg], &(buf[4]));
     630:	a0 91 4c 25 	lds	r26, 0x254C
     634:	b0 91 4d 25 	lds	r27, 0x254D
     638:	19 96       	adiw	r26, 0x09	; 9
     63a:	8c 91       	ld	r24, X
     63c:	19 97       	sbiw	r26, 0x09	; 9
     63e:	90 e0       	ldi	r25, 0x00	; 0
     640:	fc 01       	movw	r30, r24
     642:	ee 0f       	add	r30, r30
     644:	ff 1f       	adc	r31, r31
     646:	e7 5c       	subi	r30, 0xC7	; 199
     648:	ff 4d       	sbci	r31, 0xDF	; 223
     64a:	20 81       	ld	r18, Z
     64c:	31 81       	ldd	r19, Z+1	; 0x01
threadvar Timer ttNeighbor[6];

// converts a UID into a passed in character stream.  Assumes 2-byte GUIDs.
void GUIDIntoChar(Uid id, byte * c)
{
    c[0] = (id >> 8) & 0x00FF;
     64e:	3d 83       	std	Y+5, r19	; 0x05
    c[1] = (id & 0x00FF); 
     650:	2e 83       	std	Y+6, r18	; 0x06
  buf[1] = MSG_NEIGHBOR_KEEPALIVE;
  GUIDIntoChar(getGUID(), &(buf[2]));
  GUIDIntoChar(thisNeighborhood.n[thisTimeout->arg], &(buf[4]));

  // prevent timer from calling this again, message callback will reenable as necessary
  disableTimer(ttNeighbor[thisTimeout->arg]);
     652:	21 e1       	ldi	r18, 0x11	; 17
     654:	28 9f       	mul	r18, r24
     656:	f0 01       	movw	r30, r0
     658:	29 9f       	mul	r18, r25
     65a:	f0 0d       	add	r31, r0
     65c:	11 24       	eor	r1, r1
     65e:	eb 5b       	subi	r30, 0xBB	; 187
     660:	ff 4d       	sbci	r31, 0xDF	; 223
     662:	10 8a       	std	Z+16, r1	; 0x10

  // send message - CB will either re-add timer, or restart scanning for neighbors
  sendSystemMessage(thisTimeout->arg, buf, 6, RES_SYS_HANDLER, (GenericHandler)&neighborKeepaliveCB);
     664:	0d e9       	ldi	r16, 0x9D	; 157
     666:	15 e0       	ldi	r17, 0x05	; 5
     668:	20 e0       	ldi	r18, 0x00	; 0
     66a:	30 e0       	ldi	r19, 0x00	; 0
     66c:	46 e0       	ldi	r20, 0x06	; 6
     66e:	be 01       	movw	r22, r28
     670:	6f 5f       	subi	r22, 0xFF	; 255
     672:	7f 4f       	sbci	r23, 0xFF	; 255
     674:	19 96       	adiw	r26, 0x09	; 9
     676:	8c 91       	ld	r24, X
     678:	0e 94 97 07 	call	0xf2e	; 0xf2e <sendSystemMessage>
}
     67c:	26 96       	adiw	r28, 0x06	; 6
     67e:	cd bf       	out	0x3d, r28	; 61
     680:	de bf       	out	0x3e, r29	; 62
     682:	df 91       	pop	r29
     684:	cf 91       	pop	r28
     686:	1f 91       	pop	r17
     688:	0f 91       	pop	r16
     68a:	08 95       	ret

0000068c <neighborScan>:
  freeChunk(thisChunk);
}

// send a start handshake message to a vacant port
void neighborScan(void)
{
     68c:	ff 92       	push	r15
     68e:	0f 93       	push	r16
     690:	1f 93       	push	r17
     692:	cf 93       	push	r28
     694:	df 93       	push	r29
     696:	00 d0       	rcall	.+0      	; 0x698 <neighborScan+0xc>
     698:	1f 92       	push	r1
     69a:	cd b7       	in	r28, 0x3d	; 61
     69c:	de b7       	in	r29, 0x3e	; 62
  byte buf[4];
  PRef p = thisTimeout->arg;
     69e:	e0 91 4c 25 	lds	r30, 0x254C
     6a2:	f0 91 4d 25 	lds	r31, 0x254D
     6a6:	f1 84       	ldd	r15, Z+9	; 0x09
      return;
  }
  #endif

  // prepare message
  buf[0] = NEIGHBOR_MSG;
     6a8:	81 e0       	ldi	r24, 0x01	; 1
     6aa:	89 83       	std	Y+1, r24	; 0x01
  buf[1] = MSG_NEIGHBOR_START;
     6ac:	8a 83       	std	Y+2, r24	; 0x02
  GUIDIntoChar(getGUID(), &(buf[2]));
     6ae:	0e 94 b0 11 	call	0x2360	; 0x2360 <getGUID>
threadvar Timer ttNeighbor[6];

// converts a UID into a passed in character stream.  Assumes 2-byte GUIDs.
void GUIDIntoChar(Uid id, byte * c)
{
    c[0] = (id >> 8) & 0x00FF;
     6b2:	9b 83       	std	Y+3, r25	; 0x03
    c[1] = (id & 0x00FF); 
     6b4:	8c 83       	std	Y+4, r24	; 0x04
  buf[0] = NEIGHBOR_MSG;
  buf[1] = MSG_NEIGHBOR_START;
  GUIDIntoChar(getGUID(), &(buf[2]));
  
  // disable timer so no extra time-based calls are executed until sent message callback
  disableTimer(ttNeighbor[p]);
     6b6:	81 e1       	ldi	r24, 0x11	; 17
     6b8:	f8 9e       	mul	r15, r24
     6ba:	90 01       	movw	r18, r0
     6bc:	11 24       	eor	r1, r1
     6be:	f9 01       	movw	r30, r18
     6c0:	eb 5b       	subi	r30, 0xBB	; 187
     6c2:	ff 4d       	sbci	r31, 0xDF	; 223
     6c4:	10 8a       	std	Z+16, r1	; 0x10
  if(ttNeighbor[p].t.state != INACTIVE)
     6c6:	82 85       	ldd	r24, Z+10	; 0x0a
     6c8:	88 23       	and	r24, r24
     6ca:	29 f0       	breq	.+10     	; 0x6d6 <neighborScan+0x4a>
    {
      deregisterTimeout(&(ttNeighbor[p].t));
     6cc:	c9 01       	movw	r24, r18
     6ce:	89 5b       	subi	r24, 0xB9	; 185
     6d0:	9f 4d       	sbci	r25, 0xDF	; 223
     6d2:	0e 94 f7 08 	call	0x11ee	; 0x11ee <deregisterTimeout>
    }

  // enqueue message
  sendSystemMessage(p, buf, 4, RES_SYS_HANDLER, (GenericHandler)&neighborScanCB);
     6d6:	0f e7       	ldi	r16, 0x7F	; 127
     6d8:	13 e0       	ldi	r17, 0x03	; 3
     6da:	20 e0       	ldi	r18, 0x00	; 0
     6dc:	30 e0       	ldi	r19, 0x00	; 0
     6de:	44 e0       	ldi	r20, 0x04	; 4
     6e0:	be 01       	movw	r22, r28
     6e2:	6f 5f       	subi	r22, 0xFF	; 255
     6e4:	7f 4f       	sbci	r23, 0xFF	; 255
     6e6:	8f 2d       	mov	r24, r15
     6e8:	0e 94 97 07 	call	0xf2e	; 0xf2e <sendSystemMessage>
}
     6ec:	24 96       	adiw	r28, 0x04	; 4
     6ee:	cd bf       	out	0x3d, r28	; 61
     6f0:	de bf       	out	0x3e, r29	; 62
     6f2:	df 91       	pop	r29
     6f4:	cf 91       	pop	r28
     6f6:	1f 91       	pop	r17
     6f8:	0f 91       	pop	r16
     6fa:	ff 90       	pop	r15
     6fc:	08 95       	ret

000006fe <neighborScanCB>:

// called when start handshake message is complete by success or failure
void neighborScanCB(void)
{
  // message was received.  wait for handshake to return, but allow for timeout to restart scan
  if(chunkResponseType(thisChunk) == MSG_RESP_ACK)
     6fe:	80 91 37 20 	lds	r24, 0x2037
     702:	90 91 38 20 	lds	r25, 0x2038
     706:	dc 01       	movw	r26, r24
     708:	51 96       	adiw	r26, 0x11	; 17
     70a:	ec 91       	ld	r30, X
     70c:	2e 2f       	mov	r18, r30
     70e:	28 71       	andi	r18, 0x18	; 24
     710:	ae 2f       	mov	r26, r30
     712:	a7 70       	andi	r26, 0x07	; 7
     714:	28 30       	cpi	r18, 0x08	; 8
     716:	59 f4       	brne	.+22     	; 0x72e <neighborScanCB+0x30>
    {
      (ttNeighbor[faceNum(thisChunk)]).period = NEIGHBOR_HANDSHAKE_TIMEOUT_PERIOD;
     718:	21 e1       	ldi	r18, 0x11	; 17
     71a:	a2 9f       	mul	r26, r18
     71c:	d0 01       	movw	r26, r0
     71e:	11 24       	eor	r1, r1
     720:	ab 5b       	subi	r26, 0xBB	; 187
     722:	bf 4d       	sbci	r27, 0xDF	; 223
     724:	44 e6       	ldi	r20, 0x64	; 100
     726:	50 e0       	ldi	r21, 0x00	; 0
     728:	60 e0       	ldi	r22, 0x00	; 0
     72a:	70 e0       	ldi	r23, 0x00	; 0
     72c:	0a c0       	rjmp	.+20     	; 0x742 <neighborScanCB+0x44>
    }
  // else failure
  else
    {
      (ttNeighbor[faceNum(thisChunk)]).period = NEIGHBOR_SCAN_PERIOD;
     72e:	21 e1       	ldi	r18, 0x11	; 17
     730:	a2 9f       	mul	r26, r18
     732:	d0 01       	movw	r26, r0
     734:	11 24       	eor	r1, r1
     736:	ab 5b       	subi	r26, 0xBB	; 187
     738:	bf 4d       	sbci	r27, 0xDF	; 223
     73a:	42 e3       	ldi	r20, 0x32	; 50
     73c:	50 e0       	ldi	r21, 0x00	; 0
     73e:	60 e0       	ldi	r22, 0x00	; 0
     740:	70 e0       	ldi	r23, 0x00	; 0
     742:	1c 96       	adiw	r26, 0x0c	; 12
     744:	4d 93       	st	X+, r20
     746:	5d 93       	st	X+, r21
     748:	6d 93       	st	X+, r22
     74a:	7c 93       	st	X, r23
     74c:	1f 97       	sbiw	r26, 0x0f	; 15
    }

  // re-enable timer with potentially new period
  enableTimer(ttNeighbor[faceNum(thisChunk)]);
     74e:	e7 70       	andi	r30, 0x07	; 7
     750:	a1 e1       	ldi	r26, 0x11	; 17
     752:	ea 9f       	mul	r30, r26
     754:	f0 01       	movw	r30, r0
     756:	11 24       	eor	r1, r1
     758:	eb 5b       	subi	r30, 0xBB	; 187
     75a:	ff 4d       	sbci	r31, 0xDF	; 223
     75c:	21 e0       	ldi	r18, 0x01	; 1
     75e:	20 8b       	std	Z+16, r18	; 0x10
 
  freeChunk(thisChunk);
     760:	0c 94 22 07 	jmp	0xe44	; 0xe44 <freeChunk>

00000764 <GUIDIntoChar>:
threadvar Timer ttNeighbor[6];

// converts a UID into a passed in character stream.  Assumes 2-byte GUIDs.
void GUIDIntoChar(Uid id, byte * c)
{
    c[0] = (id >> 8) & 0x00FF;
     764:	fb 01       	movw	r30, r22
     766:	90 83       	st	Z, r25
    c[1] = (id & 0x00FF); 
     768:	81 83       	std	Z+1, r24	; 0x01
     76a:	08 95       	ret

0000076c <charToGUID>:
// takes a passed in character array and returns a UID representing the array.  Assumes 2-byte GUIDs.
Uid charToGUID(byte * c)
{
    Uid tmp;

    tmp = (Uid)(c[0]) << 8;
     76c:	fc 01       	movw	r30, r24
     76e:	30 81       	ld	r19, Z
     770:	20 e0       	ldi	r18, 0x00	; 0
    tmp |= c[1];
     772:	81 81       	ldd	r24, Z+1	; 0x01
     774:	28 2b       	or	r18, r24

    return tmp;
}
     776:	c9 01       	movw	r24, r18
     778:	08 95       	ret

0000077a <getNeighborCount>:

// returns number of neighbors that are not VACANT.
byte getNeighborCount()
{
     77a:	e9 e3       	ldi	r30, 0x39	; 57
     77c:	f0 e2       	ldi	r31, 0x20	; 32
	uint8_t count, i;
	
	for(count = 0, i = 0; i < NUM_PORTS; ++i)
     77e:	80 e0       	ldi	r24, 0x00	; 0
	{
		if(thisNeighborhood.n[i] != VACANT)
     780:	21 91       	ld	r18, Z+
     782:	31 91       	ld	r19, Z+
     784:	23 2b       	or	r18, r19
     786:	09 f0       	breq	.+2      	; 0x78a <getNeighborCount+0x10>
		{
			count++;
     788:	8f 5f       	subi	r24, 0xFF	; 255
// returns number of neighbors that are not VACANT.
byte getNeighborCount()
{
	uint8_t count, i;
	
	for(count = 0, i = 0; i < NUM_PORTS; ++i)
     78a:	90 e2       	ldi	r25, 0x20	; 32
     78c:	e5 34       	cpi	r30, 0x45	; 69
     78e:	f9 07       	cpc	r31, r25
     790:	b9 f7       	brne	.-18     	; 0x780 <getNeighborCount+0x6>
	}

//	if(count>0)
//	  printf("NEIGHBORCOUNT = %d\r\n", count);
	return count;
}
     792:	08 95       	ret

00000794 <down>:

// simple functions to access geographic neighbors
Uid down(void) { return thisNeighborhood.n[DOWN]; }
     794:	e9 e3       	ldi	r30, 0x39	; 57
     796:	f0 e2       	ldi	r31, 0x20	; 32
     798:	80 81       	ld	r24, Z
     79a:	91 81       	ldd	r25, Z+1	; 0x01
     79c:	08 95       	ret

0000079e <up>:
Uid up(void) { return thisNeighborhood.n[UP]; }
     79e:	e3 e4       	ldi	r30, 0x43	; 67
     7a0:	f0 e2       	ldi	r31, 0x20	; 32
     7a2:	80 81       	ld	r24, Z
     7a4:	91 81       	ldd	r25, Z+1	; 0x01
     7a6:	08 95       	ret

000007a8 <north>:
Uid north(void) { return thisNeighborhood.n[NORTH]; }
     7a8:	eb e3       	ldi	r30, 0x3B	; 59
     7aa:	f0 e2       	ldi	r31, 0x20	; 32
     7ac:	80 81       	ld	r24, Z
     7ae:	91 81       	ldd	r25, Z+1	; 0x01
     7b0:	08 95       	ret

000007b2 <south>:
Uid south(void) { return thisNeighborhood.n[SOUTH]; }
     7b2:	e1 e4       	ldi	r30, 0x41	; 65
     7b4:	f0 e2       	ldi	r31, 0x20	; 32
     7b6:	80 81       	ld	r24, Z
     7b8:	91 81       	ldd	r25, Z+1	; 0x01
     7ba:	08 95       	ret

000007bc <east>:
Uid east(void) { return thisNeighborhood.n[EAST]; }
     7bc:	ed e3       	ldi	r30, 0x3D	; 61
     7be:	f0 e2       	ldi	r31, 0x20	; 32
     7c0:	80 81       	ld	r24, Z
     7c2:	91 81       	ldd	r25, Z+1	; 0x01
     7c4:	08 95       	ret

000007c6 <west>:
Uid west(void) { return thisNeighborhood.n[WEST]; }
     7c6:	ef e3       	ldi	r30, 0x3F	; 63
     7c8:	f0 e2       	ldi	r31, 0x20	; 32
     7ca:	80 81       	ld	r24, Z
     7cc:	91 81       	ldd	r25, Z+1	; 0x01
     7ce:	08 95       	ret

000007d0 <updateNeighbor>:
		return;
	}

#endif

	if(p < NUM_PORTS)
     7d0:	86 30       	cpi	r24, 0x06	; 6
     7d2:	80 f4       	brcc	.+32     	; 0x7f4 <updateNeighbor+0x24>
	{
		// is the state changing?  Trigger handler
	    if(thisNeighborhood.n[p] != b)
     7d4:	e8 2f       	mov	r30, r24
     7d6:	f0 e0       	ldi	r31, 0x00	; 0
     7d8:	ee 0f       	add	r30, r30
     7da:	ff 1f       	adc	r31, r31
     7dc:	e7 5c       	subi	r30, 0xC7	; 199
     7de:	ff 4d       	sbci	r31, 0xDF	; 223
     7e0:	80 81       	ld	r24, Z
     7e2:	91 81       	ldd	r25, Z+1	; 0x01
     7e4:	86 17       	cp	r24, r22
     7e6:	97 07       	cpc	r25, r23
     7e8:	29 f0       	breq	.+10     	; 0x7f4 <updateNeighbor+0x24>
	    {
	        thisNeighborhood.n[p] = b;
     7ea:	60 83       	st	Z, r22
     7ec:	71 83       	std	Z+1, r23	; 0x01
	        triggerHandler(EVENT_NEIGHBOR_CHANGE);
     7ee:	83 e1       	ldi	r24, 0x13	; 19
     7f0:	0c 94 6d 06 	jmp	0xcda	; 0xcda <triggerHandler>
     7f4:	08 95       	ret

000007f6 <restartScan>:
    return 1;
}

// sets neighbor to VACANT, and starts a timer/timeout to send handshake initialization messages
void restartScan(PRef i)
{
     7f6:	1f 93       	push	r17
     7f8:	cf 93       	push	r28
     7fa:	df 93       	push	r29
     7fc:	18 2f       	mov	r17, r24
  updateNeighbor(i, VACANT);
     7fe:	60 e0       	ldi	r22, 0x00	; 0
     800:	70 e0       	ldi	r23, 0x00	; 0
     802:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <updateNeighbor>

  // deregister timer and deregister timeouts if they are already in the lists
  disableTimer(ttNeighbor[i]);
     806:	c1 2f       	mov	r28, r17
     808:	d0 e0       	ldi	r29, 0x00	; 0
     80a:	81 e1       	ldi	r24, 0x11	; 17
     80c:	18 9f       	mul	r17, r24
     80e:	90 01       	movw	r18, r0
     810:	11 24       	eor	r1, r1
     812:	f9 01       	movw	r30, r18
     814:	eb 5b       	subi	r30, 0xBB	; 187
     816:	ff 4d       	sbci	r31, 0xDF	; 223
     818:	10 8a       	std	Z+16, r1	; 0x10
  if(ttNeighbor[i].t.state != INACTIVE)
     81a:	82 85       	ldd	r24, Z+10	; 0x0a
     81c:	88 23       	and	r24, r24
     81e:	29 f0       	breq	.+10     	; 0x82a <restartScan+0x34>
    {
      deregisterTimeout(&(ttNeighbor[i].t));
     820:	c9 01       	movw	r24, r18
     822:	89 5b       	subi	r24, 0xB9	; 185
     824:	9f 4d       	sbci	r25, 0xDF	; 223
     826:	0e 94 f7 08 	call	0x11ee	; 0x11ee <deregisterTimeout>
    }

  // set up timer to call neighbor scan
  (ttNeighbor[i]).t.arg = i;
     82a:	81 e1       	ldi	r24, 0x11	; 17
     82c:	8c 9f       	mul	r24, r28
     82e:	f0 01       	movw	r30, r0
     830:	8d 9f       	mul	r24, r29
     832:	f0 0d       	add	r31, r0
     834:	11 24       	eor	r1, r1
     836:	eb 5b       	subi	r30, 0xBB	; 187
     838:	ff 4d       	sbci	r31, 0xDF	; 223
     83a:	13 87       	std	Z+11, r17	; 0x0b
  (ttNeighbor[i]).t.callback = (GenericHandler)&neighborScan;
     83c:	86 e4       	ldi	r24, 0x46	; 70
     83e:	93 e0       	ldi	r25, 0x03	; 3
     840:	80 87       	std	Z+8, r24	; 0x08
     842:	91 87       	std	Z+9, r25	; 0x09
  (ttNeighbor[i]).period = NEIGHBOR_SCAN_PERIOD;
     844:	82 e3       	ldi	r24, 0x32	; 50
     846:	90 e0       	ldi	r25, 0x00	; 0
     848:	a0 e0       	ldi	r26, 0x00	; 0
     84a:	b0 e0       	ldi	r27, 0x00	; 0
     84c:	84 87       	std	Z+12, r24	; 0x0c
     84e:	95 87       	std	Z+13, r25	; 0x0d
     850:	a6 87       	std	Z+14, r26	; 0x0e
     852:	b7 87       	std	Z+15, r27	; 0x0f
  enableTimer(ttNeighbor[i]);
     854:	81 e0       	ldi	r24, 0x01	; 1
     856:	80 8b       	std	Z+16, r24	; 0x10
}
     858:	df 91       	pop	r29
     85a:	cf 91       	pop	r28
     85c:	1f 91       	pop	r17
     85e:	08 95       	ret

00000860 <handleNeighborMessage>:
  freeChunk(thisChunk);
}

// called for all NEIGHBOR_MSG type reserved system handlers
byte handleNeighborMessage(void)
{
     860:	df 92       	push	r13
     862:	ef 92       	push	r14
     864:	ff 92       	push	r15
     866:	0f 93       	push	r16
     868:	1f 93       	push	r17
     86a:	cf 93       	push	r28
     86c:	df 93       	push	r29
     86e:	00 d0       	rcall	.+0      	; 0x870 <handleNeighborMessage+0x10>
     870:	00 d0       	rcall	.+0      	; 0x872 <handleNeighborMessage+0x12>
     872:	cd b7       	in	r28, 0x3d	; 61
     874:	de b7       	in	r29, 0x3e	; 62
    if( thisChunk == NULL ) 
     876:	e0 91 37 20 	lds	r30, 0x2037
     87a:	f0 91 38 20 	lds	r31, 0x2038
     87e:	30 97       	sbiw	r30, 0x00	; 0
     880:	09 f4       	brne	.+2      	; 0x884 <handleNeighborMessage+0x24>
     882:	00 c1       	rjmp	.+512    	; 0xa84 <handleNeighborMessage+0x224>
    {
      return 0;
    }
  
    switch(thisChunk->data[1])
     884:	91 81       	ldd	r25, Z+1	; 0x01
     886:	92 30       	cpi	r25, 0x02	; 2
     888:	09 f4       	brne	.+2      	; 0x88c <handleNeighborMessage+0x2c>
     88a:	5c c0       	rjmp	.+184    	; 0x944 <handleNeighborMessage+0xe4>
     88c:	93 30       	cpi	r25, 0x03	; 3
     88e:	09 f4       	brne	.+2      	; 0x892 <handleNeighborMessage+0x32>
     890:	be c0       	rjmp	.+380    	; 0xa0e <handleNeighborMessage+0x1ae>
     892:	91 30       	cpi	r25, 0x01	; 1
     894:	09 f0       	breq	.+2      	; 0x898 <handleNeighborMessage+0x38>
     896:	f8 c0       	rjmp	.+496    	; 0xa88 <handleNeighborMessage+0x228>
    {
      // a neighbor wants to initiate a response with us, craft a response
      case MSG_NEIGHBOR_START:
      {
	    // have we already received an ACK to our own NEIGHBOR_MSG?  If not, respond
	    if((ttNeighbor[faceNum(thisChunk)]).period != NEIGHBOR_HANDSHAKE_TIMEOUT_PERIOD)
     898:	e1 89       	ldd	r30, Z+17	; 0x11
     89a:	e7 70       	andi	r30, 0x07	; 7
     89c:	11 e1       	ldi	r17, 0x11	; 17
     89e:	1e 9f       	mul	r17, r30
     8a0:	f0 01       	movw	r30, r0
     8a2:	11 24       	eor	r1, r1
     8a4:	eb 5b       	subi	r30, 0xBB	; 187
     8a6:	ff 4d       	sbci	r31, 0xDF	; 223
     8a8:	44 85       	ldd	r20, Z+12	; 0x0c
     8aa:	55 85       	ldd	r21, Z+13	; 0x0d
     8ac:	66 85       	ldd	r22, Z+14	; 0x0e
     8ae:	77 85       	ldd	r23, Z+15	; 0x0f
     8b0:	44 36       	cpi	r20, 0x64	; 100
     8b2:	51 05       	cpc	r21, r1
     8b4:	61 05       	cpc	r22, r1
     8b6:	71 05       	cpc	r23, r1
     8b8:	09 f4       	brne	.+2      	; 0x8bc <handleNeighborMessage+0x5c>
     8ba:	e6 c0       	rjmp	.+460    	; 0xa88 <handleNeighborMessage+0x228>
	    {
	      // build a neighbor handshake packet
	      // of the form:
	      // [handshake header] [my guid] [your guid]
	      byte buf[6];
	      buf[0] = NEIGHBOR_MSG;
     8bc:	99 83       	std	Y+1, r25	; 0x01
	      buf[1] = MSG_NEIGHBOR_RESPONSE;
     8be:	82 e0       	ldi	r24, 0x02	; 2
     8c0:	8a 83       	std	Y+2, r24	; 0x02
	      GUIDIntoChar(getGUID(), &(buf[2]));
     8c2:	0e 94 b0 11 	call	0x2360	; 0x2360 <getGUID>
threadvar Timer ttNeighbor[6];

// converts a UID into a passed in character stream.  Assumes 2-byte GUIDs.
void GUIDIntoChar(Uid id, byte * c)
{
    c[0] = (id >> 8) & 0x00FF;
     8c6:	9b 83       	std	Y+3, r25	; 0x03
    c[1] = (id & 0x00FF); 
     8c8:	8c 83       	std	Y+4, r24	; 0x04
	      // [handshake header] [my guid] [your guid]
	      byte buf[6];
	      buf[0] = NEIGHBOR_MSG;
	      buf[1] = MSG_NEIGHBOR_RESPONSE;
	      GUIDIntoChar(getGUID(), &(buf[2]));
	      buf[4] = thisChunk->data[2];
     8ca:	e0 91 37 20 	lds	r30, 0x2037
     8ce:	f0 91 38 20 	lds	r31, 0x2038
     8d2:	82 81       	ldd	r24, Z+2	; 0x02
     8d4:	8d 83       	std	Y+5, r24	; 0x05
	      buf[5] = thisChunk->data[3];
     8d6:	83 81       	ldd	r24, Z+3	; 0x03
     8d8:	8e 83       	std	Y+6, r24	; 0x06
	
	      // if our neighbor is already vacant, nothing happens.
	      // if this guid == old guid, they got reset somehow, so drop neighbor so user can re-add gracefully
	      // if this guid != old guid, then we got a new block, so drop neighbor so user can re-add gracefully
	      updateNeighbor(faceNum(thisChunk), VACANT);
     8da:	81 89       	ldd	r24, Z+17	; 0x11
     8dc:	60 e0       	ldi	r22, 0x00	; 0
     8de:	70 e0       	ldi	r23, 0x00	; 0
     8e0:	87 70       	andi	r24, 0x07	; 7
     8e2:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <updateNeighbor>
	    
	      // stop any imminent timeouts such as neighborscanning
	      disableTimer(ttNeighbor[faceNum(thisChunk)]);
     8e6:	a0 91 37 20 	lds	r26, 0x2037
     8ea:	b0 91 38 20 	lds	r27, 0x2038
     8ee:	51 96       	adiw	r26, 0x11	; 17
     8f0:	ec 91       	ld	r30, X
     8f2:	51 97       	sbiw	r26, 0x11	; 17
     8f4:	e7 70       	andi	r30, 0x07	; 7
     8f6:	1e 9f       	mul	r17, r30
     8f8:	f0 01       	movw	r30, r0
     8fa:	11 24       	eor	r1, r1
     8fc:	eb 5b       	subi	r30, 0xBB	; 187
     8fe:	ff 4d       	sbci	r31, 0xDF	; 223
     900:	10 8a       	std	Z+16, r1	; 0x10
	      if(ttNeighbor[faceNum(thisChunk)].t.state != INACTIVE)
     902:	51 96       	adiw	r26, 0x11	; 17
     904:	8c 91       	ld	r24, X
     906:	87 70       	andi	r24, 0x07	; 7
     908:	18 9f       	mul	r17, r24
     90a:	c0 01       	movw	r24, r0
     90c:	11 24       	eor	r1, r1
     90e:	fc 01       	movw	r30, r24
     910:	eb 5b       	subi	r30, 0xBB	; 187
     912:	ff 4d       	sbci	r31, 0xDF	; 223
     914:	22 85       	ldd	r18, Z+10	; 0x0a
     916:	22 23       	and	r18, r18
     918:	21 f0       	breq	.+8      	; 0x922 <handleNeighborMessage+0xc2>
		{
		  deregisterTimeout(&(ttNeighbor[faceNum(thisChunk)].t));
     91a:	89 5b       	subi	r24, 0xB9	; 185
     91c:	9f 4d       	sbci	r25, 0xDF	; 223
     91e:	0e 94 f7 08 	call	0x11ee	; 0x11ee <deregisterTimeout>
		}

	      // callback will add neighbor or restart scanning, as necessary
	      sendSystemMessage(faceNum(thisChunk), buf, 6, RES_SYS_HANDLER, (GenericHandler)&neighborHandshakeCB);
     922:	e0 91 37 20 	lds	r30, 0x2037
     926:	f0 91 38 20 	lds	r31, 0x2038
     92a:	81 89       	ldd	r24, Z+17	; 0x11
     92c:	00 e5       	ldi	r16, 0x50	; 80
     92e:	15 e0       	ldi	r17, 0x05	; 5
     930:	20 e0       	ldi	r18, 0x00	; 0
     932:	30 e0       	ldi	r19, 0x00	; 0
     934:	46 e0       	ldi	r20, 0x06	; 6
     936:	be 01       	movw	r22, r28
     938:	6f 5f       	subi	r22, 0xFF	; 255
     93a:	7f 4f       	sbci	r23, 0xFF	; 255
     93c:	87 70       	andi	r24, 0x07	; 7
     93e:	0e 94 97 07 	call	0xf2e	; 0xf2e <sendSystemMessage>
     942:	a2 c0       	rjmp	.+324    	; 0xa88 <handleNeighborMessage+0x228>
      }
      // got a response to our request for a neighbor handshake
      case MSG_NEIGHBOR_RESPONSE:
      {
	    // are we waiting for a handshake?  well, here it is!
	    if((ttNeighbor[faceNum(thisChunk)]).period == NEIGHBOR_HANDSHAKE_TIMEOUT_PERIOD)
     944:	a1 89       	ldd	r26, Z+17	; 0x11
     946:	a7 70       	andi	r26, 0x07	; 7
     948:	51 e1       	ldi	r21, 0x11	; 17
     94a:	d5 2e       	mov	r13, r21
     94c:	da 9e       	mul	r13, r26
     94e:	d0 01       	movw	r26, r0
     950:	11 24       	eor	r1, r1
     952:	ab 5b       	subi	r26, 0xBB	; 187
     954:	bf 4d       	sbci	r27, 0xDF	; 223
     956:	1c 96       	adiw	r26, 0x0c	; 12
     958:	4d 91       	ld	r20, X+
     95a:	5d 91       	ld	r21, X+
     95c:	6d 91       	ld	r22, X+
     95e:	7c 91       	ld	r23, X
     960:	1f 97       	sbiw	r26, 0x0f	; 15
     962:	44 36       	cpi	r20, 0x64	; 100
     964:	51 05       	cpc	r21, r1
     966:	61 05       	cpc	r22, r1
     968:	71 05       	cpc	r23, r1
     96a:	09 f0       	breq	.+2      	; 0x96e <handleNeighborMessage+0x10e>
     96c:	8d c0       	rjmp	.+282    	; 0xa88 <handleNeighborMessage+0x228>
// takes a passed in character array and returns a UID representing the array.  Assumes 2-byte GUIDs.
Uid charToGUID(byte * c)
{
    Uid tmp;

    tmp = (Uid)(c[0]) << 8;
     96e:	02 81       	ldd	r16, Z+2	; 0x02
    tmp |= c[1];
     970:	13 81       	ldd	r17, Z+3	; 0x03
// takes a passed in character array and returns a UID representing the array.  Assumes 2-byte GUIDs.
Uid charToGUID(byte * c)
{
    Uid tmp;

    tmp = (Uid)(c[0]) << 8;
     972:	34 81       	ldd	r19, Z+4	; 0x04
     974:	20 e0       	ldi	r18, 0x00	; 0
    tmp |= c[1];
     976:	85 81       	ldd	r24, Z+5	; 0x05
     978:	79 01       	movw	r14, r18
     97a:	e8 2a       	or	r14, r24
	        // pull [your guid][my guid] from the handshake packet - reversed from how it was sent
	        neighbor = charToGUID(&(thisChunk->data[2]));
	        me = charToGUID(&(thisChunk->data[4]));
	    
	        // got a sensible response
	        if(me == getGUID())
     97c:	0e 94 b0 11 	call	0x2360	; 0x2360 <getGUID>
     980:	e8 16       	cp	r14, r24
     982:	f9 06       	cpc	r15, r25
     984:	09 f0       	breq	.+2      	; 0x988 <handleNeighborMessage+0x128>
     986:	80 c0       	rjmp	.+256    	; 0xa88 <handleNeighborMessage+0x228>
	        {
		        // stop any imminent rescans
		        disableTimer(ttNeighbor[faceNum(thisChunk)]);
     988:	a0 91 37 20 	lds	r26, 0x2037
     98c:	b0 91 38 20 	lds	r27, 0x2038
     990:	51 96       	adiw	r26, 0x11	; 17
     992:	ec 91       	ld	r30, X
     994:	51 97       	sbiw	r26, 0x11	; 17
     996:	e7 70       	andi	r30, 0x07	; 7
     998:	de 9e       	mul	r13, r30
     99a:	f0 01       	movw	r30, r0
     99c:	11 24       	eor	r1, r1
     99e:	eb 5b       	subi	r30, 0xBB	; 187
     9a0:	ff 4d       	sbci	r31, 0xDF	; 223
     9a2:	10 8a       	std	Z+16, r1	; 0x10
			if(ttNeighbor[faceNum(thisChunk)].t.state != INACTIVE)
     9a4:	51 96       	adiw	r26, 0x11	; 17
     9a6:	8c 91       	ld	r24, X
     9a8:	87 70       	andi	r24, 0x07	; 7
     9aa:	d8 9e       	mul	r13, r24
     9ac:	c0 01       	movw	r24, r0
     9ae:	11 24       	eor	r1, r1
     9b0:	fc 01       	movw	r30, r24
     9b2:	eb 5b       	subi	r30, 0xBB	; 187
     9b4:	ff 4d       	sbci	r31, 0xDF	; 223
     9b6:	22 85       	ldd	r18, Z+10	; 0x0a
     9b8:	22 23       	and	r18, r18
     9ba:	21 f0       	breq	.+8      	; 0x9c4 <handleNeighborMessage+0x164>
			  {
			    deregisterTimeout(&(ttNeighbor[faceNum(thisChunk)].t));
     9bc:	89 5b       	subi	r24, 0xB9	; 185
     9be:	9f 4d       	sbci	r25, 0xDF	; 223
     9c0:	0e 94 f7 08 	call	0x11ee	; 0x11ee <deregisterTimeout>
			  }
		
		        // re-add timer, but now for keepalive purposes
		        ttNeighbor[faceNum(thisChunk)].period = NEIGHBOR_KEEPALIVE_PERIOD;
     9c4:	20 91 37 20 	lds	r18, 0x2037
     9c8:	30 91 38 20 	lds	r19, 0x2038
     9cc:	d9 01       	movw	r26, r18
     9ce:	51 96       	adiw	r26, 0x11	; 17
     9d0:	ec 91       	ld	r30, X
     9d2:	e7 70       	andi	r30, 0x07	; 7
     9d4:	b1 e1       	ldi	r27, 0x11	; 17
     9d6:	eb 9f       	mul	r30, r27
     9d8:	f0 01       	movw	r30, r0
     9da:	11 24       	eor	r1, r1
     9dc:	eb 5b       	subi	r30, 0xBB	; 187
     9de:	ff 4d       	sbci	r31, 0xDF	; 223
     9e0:	84 ef       	ldi	r24, 0xF4	; 244
     9e2:	91 e0       	ldi	r25, 0x01	; 1
     9e4:	a0 e0       	ldi	r26, 0x00	; 0
     9e6:	b0 e0       	ldi	r27, 0x00	; 0
     9e8:	84 87       	std	Z+12, r24	; 0x0c
     9ea:	95 87       	std	Z+13, r25	; 0x0d
     9ec:	a6 87       	std	Z+14, r26	; 0x0e
     9ee:	b7 87       	std	Z+15, r27	; 0x0f
		        ttNeighbor[faceNum(thisChunk)].t.callback = (GenericHandler)&neighborKeepalive;
     9f0:	88 e0       	ldi	r24, 0x08	; 8
     9f2:	93 e0       	ldi	r25, 0x03	; 3
     9f4:	80 87       	std	Z+8, r24	; 0x08
     9f6:	91 87       	std	Z+9, r25	; 0x09
        		enableTimer(ttNeighbor[faceNum(thisChunk)]);
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	80 8b       	std	Z+16, r24	; 0x10
// takes a passed in character array and returns a UID representing the array.  Assumes 2-byte GUIDs.
Uid charToGUID(byte * c)
{
    Uid tmp;

    tmp = (Uid)(c[0]) << 8;
     9fc:	70 2f       	mov	r23, r16
     9fe:	60 e0       	ldi	r22, 0x00	; 0
    tmp |= c[1];
     a00:	61 2b       	or	r22, r17
		        ttNeighbor[faceNum(thisChunk)].period = NEIGHBOR_KEEPALIVE_PERIOD;
		        ttNeighbor[faceNum(thisChunk)].t.callback = (GenericHandler)&neighborKeepalive;
        		enableTimer(ttNeighbor[faceNum(thisChunk)]);
		
		        // add new neighbor to neighborhood
        		updateNeighbor(faceNum(thisChunk), neighbor);
     a02:	f9 01       	movw	r30, r18
     a04:	81 89       	ldd	r24, Z+17	; 0x11
     a06:	87 70       	andi	r24, 0x07	; 7
     a08:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <updateNeighbor>
     a0c:	3d c0       	rjmp	.+122    	; 0xa88 <handleNeighborMessage+0x228>
	    break;
      }
      case MSG_NEIGHBOR_KEEPALIVE:
      {
	    // are we currently looking for keepalives?  if yes, here it is!
	    if((ttNeighbor[faceNum(thisChunk)]).period == NEIGHBOR_KEEPALIVE_PERIOD)
     a0e:	a1 89       	ldd	r26, Z+17	; 0x11
     a10:	a7 70       	andi	r26, 0x07	; 7
     a12:	21 e1       	ldi	r18, 0x11	; 17
     a14:	a2 9f       	mul	r26, r18
     a16:	d0 01       	movw	r26, r0
     a18:	11 24       	eor	r1, r1
     a1a:	ab 5b       	subi	r26, 0xBB	; 187
     a1c:	bf 4d       	sbci	r27, 0xDF	; 223
     a1e:	1c 96       	adiw	r26, 0x0c	; 12
     a20:	8d 91       	ld	r24, X+
     a22:	9d 91       	ld	r25, X+
     a24:	0d 90       	ld	r0, X+
     a26:	bc 91       	ld	r27, X
     a28:	a0 2d       	mov	r26, r0
     a2a:	84 3f       	cpi	r24, 0xF4	; 244
     a2c:	91 40       	sbci	r25, 0x01	; 1
     a2e:	a1 05       	cpc	r26, r1
     a30:	b1 05       	cpc	r27, r1
     a32:	51 f5       	brne	.+84     	; 0xa88 <handleNeighborMessage+0x228>
// takes a passed in character array and returns a UID representing the array.  Assumes 2-byte GUIDs.
Uid charToGUID(byte * c)
{
    Uid tmp;

    tmp = (Uid)(c[0]) << 8;
     a34:	e2 80       	ldd	r14, Z+2	; 0x02
    tmp |= c[1];
     a36:	f3 80       	ldd	r15, Z+3	; 0x03
// takes a passed in character array and returns a UID representing the array.  Assumes 2-byte GUIDs.
Uid charToGUID(byte * c)
{
    Uid tmp;

    tmp = (Uid)(c[0]) << 8;
     a38:	94 81       	ldd	r25, Z+4	; 0x04
     a3a:	80 e0       	ldi	r24, 0x00	; 0
    tmp |= c[1];
     a3c:	25 81       	ldd	r18, Z+5	; 0x05
     a3e:	8c 01       	movw	r16, r24
     a40:	02 2b       	or	r16, r18

	        neighbor = charToGUID(&(thisChunk->data[2]));
	        me = charToGUID(&(thisChunk->data[4]));

	        // got a bad or unexpected response - clear neighbor and restart scan
	        if(me != getGUID() || neighbor != thisNeighborhood.n[faceNum(thisChunk)])
     a42:	0e 94 b0 11 	call	0x2360	; 0x2360 <getGUID>
     a46:	08 17       	cp	r16, r24
     a48:	19 07       	cpc	r17, r25
     a4a:	99 f4       	brne	.+38     	; 0xa72 <handleNeighborMessage+0x212>
// takes a passed in character array and returns a UID representing the array.  Assumes 2-byte GUIDs.
Uid charToGUID(byte * c)
{
    Uid tmp;

    tmp = (Uid)(c[0]) << 8;
     a4c:	9e 2d       	mov	r25, r14
     a4e:	80 e0       	ldi	r24, 0x00	; 0
    tmp |= c[1];
     a50:	8f 29       	or	r24, r15

	        neighbor = charToGUID(&(thisChunk->data[2]));
	        me = charToGUID(&(thisChunk->data[4]));

	        // got a bad or unexpected response - clear neighbor and restart scan
	        if(me != getGUID() || neighbor != thisNeighborhood.n[faceNum(thisChunk)])
     a52:	e0 91 37 20 	lds	r30, 0x2037
     a56:	f0 91 38 20 	lds	r31, 0x2038
     a5a:	e1 89       	ldd	r30, Z+17	; 0x11
     a5c:	e7 70       	andi	r30, 0x07	; 7
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	ee 0f       	add	r30, r30
     a62:	ff 1f       	adc	r31, r31
     a64:	e7 5c       	subi	r30, 0xC7	; 199
     a66:	ff 4d       	sbci	r31, 0xDF	; 223
     a68:	20 81       	ld	r18, Z
     a6a:	31 81       	ldd	r19, Z+1	; 0x01
     a6c:	82 17       	cp	r24, r18
     a6e:	93 07       	cpc	r25, r19
     a70:	59 f0       	breq	.+22     	; 0xa88 <handleNeighborMessage+0x228>
	        {
		        restartScan(faceNum(thisChunk));
     a72:	e0 91 37 20 	lds	r30, 0x2037
     a76:	f0 91 38 20 	lds	r31, 0x2038
     a7a:	81 89       	ldd	r24, Z+17	; 0x11
     a7c:	87 70       	andi	r24, 0x07	; 7
     a7e:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <restartScan>
     a82:	02 c0       	rjmp	.+4      	; 0xa88 <handleNeighborMessage+0x228>
// called for all NEIGHBOR_MSG type reserved system handlers
byte handleNeighborMessage(void)
{
    if( thisChunk == NULL ) 
    {
      return 0;
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	01 c0       	rjmp	.+2      	; 0xa8a <handleNeighborMessage+0x22a>
        break;
      }
      default: 
        break;  
    }
    return 1;
     a88:	81 e0       	ldi	r24, 0x01	; 1
}
     a8a:	26 96       	adiw	r28, 0x06	; 6
     a8c:	cd bf       	out	0x3d, r28	; 61
     a8e:	de bf       	out	0x3e, r29	; 62
     a90:	df 91       	pop	r29
     a92:	cf 91       	pop	r28
     a94:	1f 91       	pop	r17
     a96:	0f 91       	pop	r16
     a98:	ff 90       	pop	r15
     a9a:	ef 90       	pop	r14
     a9c:	df 90       	pop	r13
     a9e:	08 95       	ret

00000aa0 <neighborHandshakeCB>:
  sendSystemMessage(thisTimeout->arg, buf, 6, RES_SYS_HANDLER, (GenericHandler)&neighborKeepaliveCB);
}

// callback for neighbor_response packet
void neighborHandshakeCB(void)
{
     aa0:	cf 93       	push	r28
     aa2:	df 93       	push	r29
    // message was received.  add neighbor to neighborhood and initiate keepalives
    if(chunkResponseType(thisChunk) == MSG_RESP_ACK)
     aa4:	e0 91 37 20 	lds	r30, 0x2037
     aa8:	f0 91 38 20 	lds	r31, 0x2038
     aac:	81 89       	ldd	r24, Z+17	; 0x11
     aae:	98 2f       	mov	r25, r24
     ab0:	98 71       	andi	r25, 0x18	; 24
     ab2:	98 30       	cpi	r25, 0x08	; 8
     ab4:	b9 f5       	brne	.+110    	; 0xb24 <neighborHandshakeCB+0x84>
// takes a passed in character array and returns a UID representing the array.  Assumes 2-byte GUIDs.
Uid charToGUID(byte * c)
{
    Uid tmp;

    tmp = (Uid)(c[0]) << 8;
     ab6:	74 81       	ldd	r23, Z+4	; 0x04
     ab8:	60 e0       	ldi	r22, 0x00	; 0
    tmp |= c[1];
     aba:	95 81       	ldd	r25, Z+5	; 0x05
     abc:	eb 01       	movw	r28, r22
     abe:	c9 2b       	or	r28, r25
    {
      // pull neighbor from packet, same position as how we initially sent it
      Uid neighbor = charToGUID(&(thisChunk->data[4]));
      
      // re-add timer for keepalive purposes
      ttNeighbor[faceNum(thisChunk)].period = NEIGHBOR_KEEPALIVE_PERIOD;
     ac0:	87 70       	andi	r24, 0x07	; 7
     ac2:	21 e1       	ldi	r18, 0x11	; 17
     ac4:	82 9f       	mul	r24, r18
     ac6:	c0 01       	movw	r24, r0
     ac8:	11 24       	eor	r1, r1
     aca:	fc 01       	movw	r30, r24
     acc:	eb 5b       	subi	r30, 0xBB	; 187
     ace:	ff 4d       	sbci	r31, 0xDF	; 223
     ad0:	44 ef       	ldi	r20, 0xF4	; 244
     ad2:	51 e0       	ldi	r21, 0x01	; 1
     ad4:	60 e0       	ldi	r22, 0x00	; 0
     ad6:	70 e0       	ldi	r23, 0x00	; 0
     ad8:	44 87       	std	Z+12, r20	; 0x0c
     ada:	55 87       	std	Z+13, r21	; 0x0d
     adc:	66 87       	std	Z+14, r22	; 0x0e
     ade:	77 87       	std	Z+15, r23	; 0x0f
      if(ttNeighbor[faceNum(thisChunk)].t.state != INACTIVE)
     ae0:	22 85       	ldd	r18, Z+10	; 0x0a
     ae2:	22 23       	and	r18, r18
     ae4:	21 f0       	breq	.+8      	; 0xaee <neighborHandshakeCB+0x4e>
	{
	  deregisterTimeout(&(ttNeighbor[faceNum(thisChunk)].t));
     ae6:	89 5b       	subi	r24, 0xB9	; 185
     ae8:	9f 4d       	sbci	r25, 0xDF	; 223
     aea:	0e 94 f7 08 	call	0x11ee	; 0x11ee <deregisterTimeout>
	}
      ttNeighbor[faceNum(thisChunk)].t.callback = (GenericHandler)&neighborKeepalive;
     aee:	a0 91 37 20 	lds	r26, 0x2037
     af2:	b0 91 38 20 	lds	r27, 0x2038
     af6:	51 96       	adiw	r26, 0x11	; 17
     af8:	ec 91       	ld	r30, X
     afa:	51 97       	sbiw	r26, 0x11	; 17
     afc:	e7 70       	andi	r30, 0x07	; 7
     afe:	81 e1       	ldi	r24, 0x11	; 17
     b00:	e8 9f       	mul	r30, r24
     b02:	f0 01       	movw	r30, r0
     b04:	11 24       	eor	r1, r1
     b06:	eb 5b       	subi	r30, 0xBB	; 187
     b08:	ff 4d       	sbci	r31, 0xDF	; 223
     b0a:	88 e0       	ldi	r24, 0x08	; 8
     b0c:	93 e0       	ldi	r25, 0x03	; 3
     b0e:	80 87       	std	Z+8, r24	; 0x08
     b10:	91 87       	std	Z+9, r25	; 0x09
      enableTimer(ttNeighbor[faceNum(thisChunk)]);
     b12:	81 e0       	ldi	r24, 0x01	; 1
     b14:	80 8b       	std	Z+16, r24	; 0x10
      
      // add new neighbor to neighborhood
      updateNeighbor(faceNum(thisChunk), neighbor);
     b16:	51 96       	adiw	r26, 0x11	; 17
     b18:	8c 91       	ld	r24, X
     b1a:	be 01       	movw	r22, r28
     b1c:	87 70       	andi	r24, 0x07	; 7
     b1e:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <updateNeighbor>
     b22:	03 c0       	rjmp	.+6      	; 0xb2a <neighborHandshakeCB+0x8a>

    }
    else // no neighbor ACK!  begin rescanning
    {
      restartScan(faceNum(thisChunk));
     b24:	87 70       	andi	r24, 0x07	; 7
     b26:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <restartScan>
    }
  
  freeChunk(thisChunk);
     b2a:	80 91 37 20 	lds	r24, 0x2037
     b2e:	90 91 38 20 	lds	r25, 0x2038
}
     b32:	df 91       	pop	r29
     b34:	cf 91       	pop	r28
    else // no neighbor ACK!  begin rescanning
    {
      restartScan(faceNum(thisChunk));
    }
  
  freeChunk(thisChunk);
     b36:	0c 94 22 07 	jmp	0xe44	; 0xe44 <freeChunk>

00000b3a <neighborKeepaliveCB>:
void neighborKeepaliveCB(void)
{
    // message was received.  re-enable timer and continue as normal
    // note that since we always ACK a received message, this will happen even if the other block 
    // does not understand why the keepalive was sent.  however, the other block will restart a handshake.
    if(chunkResponseType(thisChunk) == MSG_RESP_ACK)
     b3a:	e0 91 37 20 	lds	r30, 0x2037
     b3e:	f0 91 38 20 	lds	r31, 0x2038
     b42:	81 89       	ldd	r24, Z+17	; 0x11
     b44:	98 2f       	mov	r25, r24
     b46:	98 71       	andi	r25, 0x18	; 24
     b48:	87 70       	andi	r24, 0x07	; 7
     b4a:	98 30       	cpi	r25, 0x08	; 8
     b4c:	49 f4       	brne	.+18     	; 0xb60 <neighborKeepaliveCB+0x26>
    {
        enableTimer(ttNeighbor[faceNum(thisChunk)]);
     b4e:	91 e1       	ldi	r25, 0x11	; 17
     b50:	89 9f       	mul	r24, r25
     b52:	f0 01       	movw	r30, r0
     b54:	11 24       	eor	r1, r1
     b56:	eb 5b       	subi	r30, 0xBB	; 187
     b58:	ff 4d       	sbci	r31, 0xDF	; 223
     b5a:	81 e0       	ldi	r24, 0x01	; 1
     b5c:	80 8b       	std	Z+16, r24	; 0x10
     b5e:	02 c0       	rjmp	.+4      	; 0xb64 <neighborKeepaliveCB+0x2a>
    }
    else // neighbor lost!  begin rescanning
    {
        restartScan(faceNum(thisChunk));
     b60:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <restartScan>
    }

    freeChunk(thisChunk);
     b64:	80 91 37 20 	lds	r24, 0x2037
     b68:	90 91 38 20 	lds	r25, 0x2038
     b6c:	0c 94 22 07 	jmp	0xe44	; 0xe44 <freeChunk>

00000b70 <initEnsemble>:
  (ttNeighbor[i]).period = NEIGHBOR_SCAN_PERIOD;
  enableTimer(ttNeighbor[i]);
}

void initEnsemble(void)
{
     b70:	ff 92       	push	r15
     b72:	0f 93       	push	r16
     b74:	1f 93       	push	r17
     b76:	cf 93       	push	r28
     b78:	df 93       	push	r29
     b7a:	05 e5       	ldi	r16, 0x55	; 85
     b7c:	10 e2       	ldi	r17, 0x20	; 32
    int i;
  
    // restart scanning for neighbors on all ports
    for( i=0; i<NUM_PORTS; ++i)
     b7e:	c0 e0       	ldi	r28, 0x00	; 0
     b80:	d0 e0       	ldi	r29, 0x00	; 0
        if(i == DEBUGPORT) {
            continue;
        }
        #endif

	registerTimer(&(ttNeighbor[i]));
     b82:	61 e1       	ldi	r22, 0x11	; 17
     b84:	f6 2e       	mov	r15, r22
     b86:	fc 9e       	mul	r15, r28
     b88:	c0 01       	movw	r24, r0
     b8a:	fd 9e       	mul	r15, r29
     b8c:	90 0d       	add	r25, r0
     b8e:	11 24       	eor	r1, r1
     b90:	8b 5b       	subi	r24, 0xBB	; 187
     b92:	9f 4d       	sbci	r25, 0xDF	; 223
     b94:	0e 94 78 09 	call	0x12f0	; 0x12f0 <registerTimer>
	disableTimer(ttNeighbor[i]);
     b98:	f8 01       	movw	r30, r16
     b9a:	10 82       	st	Z, r1
        restartScan(i);
     b9c:	8c 2f       	mov	r24, r28
     b9e:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <restartScan>
void initEnsemble(void)
{
    int i;
  
    // restart scanning for neighbors on all ports
    for( i=0; i<NUM_PORTS; ++i)
     ba2:	21 96       	adiw	r28, 0x01	; 1
     ba4:	0f 5e       	subi	r16, 0xEF	; 239
     ba6:	1f 4f       	sbci	r17, 0xFF	; 255
     ba8:	c6 30       	cpi	r28, 0x06	; 6
     baa:	d1 05       	cpc	r29, r1
     bac:	61 f7       	brne	.-40     	; 0xb86 <initEnsemble+0x16>

	registerTimer(&(ttNeighbor[i]));
	disableTimer(ttNeighbor[i]);
        restartScan(i);
    }
}
     bae:	df 91       	pop	r29
     bb0:	cf 91       	pop	r28
     bb2:	1f 91       	pop	r17
     bb4:	0f 91       	pop	r16
     bb6:	ff 90       	pop	r15
     bb8:	08 95       	ret

00000bba <initHandlers>:
threadvar SystemHandler system;


void initHandlers(void){
  int i;
  system.HandlerMask=0;
     bba:	10 92 ab 20 	sts	0x20AB, r1
     bbe:	10 92 ac 20 	sts	0x20AC, r1
     bc2:	10 92 ad 20 	sts	0x20AD, r1
     bc6:	10 92 ae 20 	sts	0x20AE, r1
     bca:	10 92 af 20 	sts	0x20AF, r1
     bce:	10 92 b0 20 	sts	0x20B0, r1
     bd2:	10 92 b1 20 	sts	0x20B1, r1
     bd6:	10 92 b2 20 	sts	0x20B2, r1
     bda:	e3 eb       	ldi	r30, 0xB3	; 179
     bdc:	f0 e2       	ldi	r31, 0x20	; 32
  for( i=0; i<NUM_HANDLERS; i++){
    system.HandlerTable[i]=NULL;
     bde:	11 92       	st	Z+, r1
     be0:	11 92       	st	Z+, r1


void initHandlers(void){
  int i;
  system.HandlerMask=0;
  for( i=0; i<NUM_HANDLERS; i++){
     be2:	80 e2       	ldi	r24, 0x20	; 32
     be4:	e3 3f       	cpi	r30, 0xF3	; 243
     be6:	f8 07       	cpc	r31, r24
     be8:	d1 f7       	brne	.-12     	; 0xbde <initHandlers+0x24>
    system.HandlerTable[i]=NULL;
  }
}
     bea:	08 95       	ret

00000bec <executeHandlers>:
//
//  if any mask is set, will scan through and execute handlers in ascending numerical order.
//  it is technically possible to trigger handlers during earlier handlers, or even the same handler repeatedly.
//  triggering an earlier handler will cause it to execute during the next iteration.
void executeHandlers(void)
{
     bec:	8f 92       	push	r8
     bee:	9f 92       	push	r9
     bf0:	af 92       	push	r10
     bf2:	bf 92       	push	r11
     bf4:	cf 92       	push	r12
     bf6:	df 92       	push	r13
     bf8:	ef 92       	push	r14
     bfa:	ff 92       	push	r15
     bfc:	0f 93       	push	r16
     bfe:	1f 93       	push	r17
     c00:	cf 93       	push	r28
     c02:	df 93       	push	r29
	if(system.HandlerMask)
     c04:	20 91 ab 20 	lds	r18, 0x20AB
     c08:	30 91 ac 20 	lds	r19, 0x20AC
     c0c:	40 91 ad 20 	lds	r20, 0x20AD
     c10:	50 91 ae 20 	lds	r21, 0x20AE
     c14:	60 91 af 20 	lds	r22, 0x20AF
     c18:	70 91 b0 20 	lds	r23, 0x20B0
     c1c:	80 91 b1 20 	lds	r24, 0x20B1
     c20:	90 91 b2 20 	lds	r25, 0x20B2
     c24:	a0 e0       	ldi	r26, 0x00	; 0
     c26:	0e 94 bf 17 	call	0x2f7e	; 0x2f7e <__cmpdi2_s8>
     c2a:	09 f4       	brne	.+2      	; 0xc2e <executeHandlers+0x42>
     c2c:	49 c0       	rjmp	.+146    	; 0xcc0 <executeHandlers+0xd4>
     c2e:	03 eb       	ldi	r16, 0xB3	; 179
     c30:	10 e2       	ldi	r17, 0x20	; 32
//  ExecuteHandlers
//
//  if any mask is set, will scan through and execute handlers in ascending numerical order.
//  it is technically possible to trigger handlers during earlier handlers, or even the same handler repeatedly.
//  triggering an earlier handler will cause it to execute during the next iteration.
void executeHandlers(void)
     c32:	c1 2c       	mov	r12, r1
     c34:	d1 2c       	mov	r13, r1
     c36:	76 01       	movw	r14, r12
     c38:	c3 94       	inc	r12
		Event i = 0;
		uint32_t j = 0x00000001;
	
		while(i < NUM_HANDLERS)
		{
			if(system.HandlerMask & j)
     c3a:	80 90 ab 20 	lds	r8, 0x20AB
     c3e:	90 90 ac 20 	lds	r9, 0x20AC
     c42:	a0 90 ad 20 	lds	r10, 0x20AD
     c46:	b0 90 ae 20 	lds	r11, 0x20AE
     c4a:	d7 01       	movw	r26, r14
     c4c:	c6 01       	movw	r24, r12
     c4e:	2c 2d       	mov	r18, r12
     c50:	28 21       	and	r18, r8
     c52:	39 2f       	mov	r19, r25
     c54:	39 21       	and	r19, r9
     c56:	4a 2f       	mov	r20, r26
     c58:	4a 21       	and	r20, r10
     c5a:	5b 2f       	mov	r21, r27
     c5c:	5b 21       	and	r21, r11
     c5e:	60 e0       	ldi	r22, 0x00	; 0
     c60:	70 e0       	ldi	r23, 0x00	; 0
     c62:	80 e0       	ldi	r24, 0x00	; 0
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	a0 e0       	ldi	r26, 0x00	; 0
     c68:	0e 94 bf 17 	call	0x2f7e	; 0x2f7e <__cmpdi2_s8>
     c6c:	f1 f0       	breq	.+60     	; 0xcaa <executeHandlers+0xbe>
			{
				// clear mask bit1
				system.HandlerMask &= ~j;
     c6e:	d7 01       	movw	r26, r14
     c70:	c6 01       	movw	r24, r12
     c72:	80 95       	com	r24
     c74:	90 95       	com	r25
     c76:	a0 95       	com	r26
     c78:	b0 95       	com	r27
     c7a:	88 22       	and	r8, r24
     c7c:	99 22       	and	r9, r25
     c7e:	aa 22       	and	r10, r26
     c80:	bb 22       	and	r11, r27
     c82:	80 92 ab 20 	sts	0x20AB, r8
     c86:	90 92 ac 20 	sts	0x20AC, r9
     c8a:	a0 92 ad 20 	sts	0x20AD, r10
     c8e:	b0 92 ae 20 	sts	0x20AE, r11
     c92:	10 92 af 20 	sts	0x20AF, r1
     c96:	10 92 b0 20 	sts	0x20B0, r1
     c9a:	10 92 b1 20 	sts	0x20B1, r1
     c9e:	10 92 b2 20 	sts	0x20B2, r1
				
				// execute callback
				(*(system.HandlerTable[i]))();
     ca2:	d8 01       	movw	r26, r16
     ca4:	ed 91       	ld	r30, X+
     ca6:	fc 91       	ld	r31, X
     ca8:	19 95       	eicall
			}

			i++;
			j <<= 1;
     caa:	cc 0c       	add	r12, r12
     cac:	dd 1c       	adc	r13, r13
     cae:	ee 1c       	adc	r14, r14
     cb0:	ff 1c       	adc	r15, r15
     cb2:	0e 5f       	subi	r16, 0xFE	; 254
     cb4:	1f 4f       	sbci	r17, 0xFF	; 255
	if(system.HandlerMask)
	{
		Event i = 0;
		uint32_t j = 0x00000001;
	
		while(i < NUM_HANDLERS)
     cb6:	b0 e2       	ldi	r27, 0x20	; 32
     cb8:	03 3f       	cpi	r16, 0xF3	; 243
     cba:	1b 07       	cpc	r17, r27
     cbc:	09 f0       	breq	.+2      	; 0xcc0 <executeHandlers+0xd4>
     cbe:	bd cf       	rjmp	.-134    	; 0xc3a <executeHandlers+0x4e>

			i++;
			j <<= 1;
		}
	}
}
     cc0:	df 91       	pop	r29
     cc2:	cf 91       	pop	r28
     cc4:	1f 91       	pop	r17
     cc6:	0f 91       	pop	r16
     cc8:	ff 90       	pop	r15
     cca:	ef 90       	pop	r14
     ccc:	df 90       	pop	r13
     cce:	cf 90       	pop	r12
     cd0:	bf 90       	pop	r11
     cd2:	af 90       	pop	r10
     cd4:	9f 90       	pop	r9
     cd6:	8f 90       	pop	r8
     cd8:	08 95       	ret

00000cda <triggerHandler>:
//TriggerHandler
//	will trigger a callback for a valid event and valid handler
//  execution will occur during the CURRENT or NEXT handler scan
// 	returns 1 on success, 0 on failure
int triggerHandler(Event e)
{
     cda:	cf 93       	push	r28
     cdc:	df 93       	push	r29
     cde:	48 2f       	mov	r20, r24
	if(e < NUM_HANDLERS)
     ce0:	80 32       	cpi	r24, 0x20	; 32
     ce2:	60 f5       	brcc	.+88     	; 0xd3c <triggerHandler+0x62>
	{
		if(system.HandlerTable[e] == NULL)
     ce4:	e8 2f       	mov	r30, r24
     ce6:	f0 e0       	ldi	r31, 0x00	; 0
     ce8:	ee 0f       	add	r30, r30
     cea:	ff 1f       	adc	r31, r31
     cec:	ed 54       	subi	r30, 0x4D	; 77
     cee:	ff 4d       	sbci	r31, 0xDF	; 223
     cf0:	20 81       	ld	r18, Z
     cf2:	31 81       	ldd	r19, Z+1	; 0x01
     cf4:	23 2b       	or	r18, r19
     cf6:	11 f1       	breq	.+68     	; 0xd3c <triggerHandler+0x62>
		{
			return 0;
		}
		
		system.HandlerMask |= (uint32_t)1 << e;
     cf8:	81 e0       	ldi	r24, 0x01	; 1
     cfa:	90 e0       	ldi	r25, 0x00	; 0
     cfc:	a0 e0       	ldi	r26, 0x00	; 0
     cfe:	b0 e0       	ldi	r27, 0x00	; 0
     d00:	04 c0       	rjmp	.+8      	; 0xd0a <triggerHandler+0x30>
     d02:	88 0f       	add	r24, r24
     d04:	99 1f       	adc	r25, r25
     d06:	aa 1f       	adc	r26, r26
     d08:	bb 1f       	adc	r27, r27
     d0a:	4a 95       	dec	r20
     d0c:	d2 f7       	brpl	.-12     	; 0xd02 <triggerHandler+0x28>
     d0e:	50 91 ab 20 	lds	r21, 0x20AB
     d12:	58 2b       	or	r21, r24
     d14:	40 91 ac 20 	lds	r20, 0x20AC
     d18:	49 2b       	or	r20, r25
     d1a:	30 91 ad 20 	lds	r19, 0x20AD
     d1e:	3a 2b       	or	r19, r26
     d20:	20 91 ae 20 	lds	r18, 0x20AE
     d24:	2b 2b       	or	r18, r27
     d26:	50 93 ab 20 	sts	0x20AB, r21
     d2a:	40 93 ac 20 	sts	0x20AC, r20
     d2e:	30 93 ad 20 	sts	0x20AD, r19
     d32:	20 93 ae 20 	sts	0x20AE, r18
		return 1;
     d36:	21 e0       	ldi	r18, 0x01	; 1
     d38:	30 e0       	ldi	r19, 0x00	; 0
     d3a:	02 c0       	rjmp	.+4      	; 0xd40 <triggerHandler+0x66>
	}
	
	return 0;	
     d3c:	20 e0       	ldi	r18, 0x00	; 0
     d3e:	30 e0       	ldi	r19, 0x00	; 0
}
     d40:	c9 01       	movw	r24, r18
     d42:	df 91       	pop	r29
     d44:	cf 91       	pop	r28
     d46:	08 95       	ret

00000d48 <registerHandler>:
// will register a callback for a valid event with currently NULL callback.
// must unregister a valid handler before re-registering.
// returns 1 on success, 0 on failure.
int registerHandler(Event e, GenericHandler callback)
{
	if(e < NUM_HANDLERS)
     d48:	80 32       	cpi	r24, 0x20	; 32
     d4a:	78 f4       	brcc	.+30     	; 0xd6a <registerHandler+0x22>
	{
		if(system.HandlerTable[e] == NULL)
     d4c:	e8 2f       	mov	r30, r24
     d4e:	f0 e0       	ldi	r31, 0x00	; 0
     d50:	ee 0f       	add	r30, r30
     d52:	ff 1f       	adc	r31, r31
     d54:	ed 54       	subi	r30, 0x4D	; 77
     d56:	ff 4d       	sbci	r31, 0xDF	; 223
     d58:	80 81       	ld	r24, Z
     d5a:	91 81       	ldd	r25, Z+1	; 0x01
     d5c:	89 2b       	or	r24, r25
     d5e:	29 f4       	brne	.+10     	; 0xd6a <registerHandler+0x22>
		{
			system.HandlerTable[e] = callback;
     d60:	60 83       	st	Z, r22
     d62:	71 83       	std	Z+1, r23	; 0x01
			return 1;
     d64:	21 e0       	ldi	r18, 0x01	; 1
     d66:	30 e0       	ldi	r19, 0x00	; 0
     d68:	02 c0       	rjmp	.+4      	; 0xd6e <registerHandler+0x26>
		}
		
		return 0;
	}
	
	return 0;
     d6a:	20 e0       	ldi	r18, 0x00	; 0
     d6c:	30 e0       	ldi	r19, 0x00	; 0
}
     d6e:	c9 01       	movw	r24, r18
     d70:	08 95       	ret

00000d72 <unregisterHandler>:
// will unregister a valid callback for a valid event, setting it to NULL.
// must unregister a valid handler before re-registering.
// returns 1 on success, 0 on failure.
int unregisterHandler(Event e)
{
	if(e < NUM_HANDLERS)
     d72:	80 32       	cpi	r24, 0x20	; 32
     d74:	78 f4       	brcc	.+30     	; 0xd94 <unregisterHandler+0x22>
	{
		if(system.HandlerTable[e] == NULL)
     d76:	e8 2f       	mov	r30, r24
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	ee 0f       	add	r30, r30
     d7c:	ff 1f       	adc	r31, r31
     d7e:	ed 54       	subi	r30, 0x4D	; 77
     d80:	ff 4d       	sbci	r31, 0xDF	; 223
     d82:	80 81       	ld	r24, Z
     d84:	91 81       	ldd	r25, Z+1	; 0x01
     d86:	89 2b       	or	r24, r25
     d88:	29 f0       	breq	.+10     	; 0xd94 <unregisterHandler+0x22>
		{
			return 0;
		}
		
		system.HandlerTable[e] = NULL;
     d8a:	10 82       	st	Z, r1
     d8c:	11 82       	std	Z+1, r1	; 0x01
		return 1;
     d8e:	21 e0       	ldi	r18, 0x01	; 1
     d90:	30 e0       	ldi	r19, 0x00	; 0
     d92:	02 c0       	rjmp	.+4      	; 0xd98 <unregisterHandler+0x26>
	}
	
	return 0;
     d94:	20 e0       	ldi	r18, 0x00	; 0
     d96:	30 e0       	ldi	r19, 0x00	; 0
}
     d98:	c9 01       	movw	r24, r18
     d9a:	08 95       	ret

00000d9c <callHandler>:

void callHandler(Event e)
{
	if(e < NUM_HANDLERS)
     d9c:	80 32       	cpi	r24, 0x20	; 32
     d9e:	60 f4       	brcc	.+24     	; 0xdb8 <callHandler+0x1c>
	{
		if(system.HandlerTable[e] != NULL)
     da0:	e8 2f       	mov	r30, r24
     da2:	f0 e0       	ldi	r31, 0x00	; 0
     da4:	ee 0f       	add	r30, r30
     da6:	ff 1f       	adc	r31, r31
     da8:	ed 54       	subi	r30, 0x4D	; 77
     daa:	ff 4d       	sbci	r31, 0xDF	; 223
     dac:	01 90       	ld	r0, Z+
     dae:	f0 81       	ld	r31, Z
     db0:	e0 2d       	mov	r30, r0
     db2:	30 97       	sbiw	r30, 0x00	; 0
     db4:	09 f0       	breq	.+2      	; 0xdb8 <callHandler+0x1c>
		{
			(system.HandlerTable[e])();
     db6:	19 94       	eijmp
     db8:	08 95       	ret

00000dba <getColor>:
threadvar Intensity 	currentIntensity = INTENSITY_MAX;

Color getColor()
{
	return currentColor;
}
     dba:	80 91 f6 20 	lds	r24, 0x20F6
     dbe:	08 95       	ret

00000dc0 <getNextColor>:

Color getNextColor()
{
	Color tmp = currentColor;
     dc0:	80 91 f6 20 	lds	r24, 0x20F6
	
	tmp++;
     dc4:	8f 5f       	subi	r24, 0xFF	; 255
	
	if(tmp >= NUM_COLORS)
     dc6:	89 30       	cpi	r24, 0x09	; 9
     dc8:	08 f0       	brcs	.+2      	; 0xdcc <getNextColor+0xc>
	{
		tmp = 0;
     dca:	80 e0       	ldi	r24, 0x00	; 0
	}

	return tmp;
}
     dcc:	08 95       	ret

00000dce <setColor>:

void setColor(Color c)
{
	currentColor = c;
     dce:	80 93 f6 20 	sts	0x20F6, r24

	setLED(colors[c][0], colors[c][1], colors[c][2], currentIntensity);
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	fc 01       	movw	r30, r24
     dd6:	ee 0f       	add	r30, r30
     dd8:	ff 1f       	adc	r31, r31
     dda:	e8 0f       	add	r30, r24
     ddc:	f9 1f       	adc	r31, r25
     dde:	ef 5f       	subi	r30, 0xFF	; 255
     de0:	ff 4d       	sbci	r31, 0xDF	; 223
	return currentColor;
}

void setLED(byte r, byte g, byte b, Intensity i)
{
	setHWLED(r,g,b,i);
     de2:	20 91 00 20 	lds	r18, 0x2000
     de6:	42 81       	ldd	r20, Z+2	; 0x02
     de8:	61 81       	ldd	r22, Z+1	; 0x01
     dea:	80 81       	ld	r24, Z
     dec:	0c 94 fc 10 	jmp	0x21f8	; 0x21f8 <setHWLED>

00000df0 <setNextColor>:
	setLED(colors[c][0], colors[c][1], colors[c][2], currentIntensity);
}

Color setNextColor()
{
	Color tmp = getNextColor();
     df0:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <getNextColor>

	setColor(tmp);
     df4:	0e 94 e7 06 	call	0xdce	; 0xdce <setColor>
	
	return currentColor;
}
     df8:	80 91 f6 20 	lds	r24, 0x20F6
     dfc:	08 95       	ret

00000dfe <setLED>:

void setLED(byte r, byte g, byte b, Intensity i)
{
	setHWLED(r,g,b,i);
     dfe:	0c 94 fc 10 	jmp	0x21f8	; 0x21f8 <setHWLED>

00000e02 <setIntensity>:
}

void setIntensity(Intensity i)
{
	currentIntensity = i;
     e02:	80 93 00 20 	sts	0x2000, r24
	return currentColor;
}

void setLED(byte r, byte g, byte b, Intensity i)
{
	setHWLED(r,g,b,i);
     e06:	28 2f       	mov	r18, r24
     e08:	40 91 f5 20 	lds	r20, 0x20F5
     e0c:	60 91 f4 20 	lds	r22, 0x20F4
     e10:	80 91 f3 20 	lds	r24, 0x20F3
     e14:	0c 94 fc 10 	jmp	0x21f8	; 0x21f8 <setHWLED>

00000e18 <getIntensity>:
}

Intensity getIntensity()
{
	return currentIntensity;
}
     e18:	80 91 00 20 	lds	r24, 0x2000
     e1c:	08 95       	ret

00000e1e <initLED>:

void initLED()
{
	initHWLED();
     e1e:	0c 94 24 11 	jmp	0x2248	; 0x2248 <initHWLED>

00000e22 <initializeMemory>:
threadvar blockConf conf;

//////////////////// PUBLIC FUNCTIONS /////////////////////
// set-up memory
void initializeMemory(void)
{
     e22:	ec e2       	ldi	r30, 0x2C	; 44
     e24:	f2 e2       	ldi	r31, 0x22	; 34
    uint8_t i;

    // clear all status bits for receive chunks
    for( i=0; i<NUM_RXCHUNKS; i++ )
    {
        rxChunks[i].status = CHUNK_FREE;
     e26:	10 82       	st	Z, r1
     e28:	78 96       	adiw	r30, 0x18	; 24
void initializeMemory(void)
{
    uint8_t i;

    // clear all status bits for receive chunks
    for( i=0; i<NUM_RXCHUNKS; i++ )
     e2a:	83 e2       	ldi	r24, 0x23	; 35
     e2c:	ec 34       	cpi	r30, 0x4C	; 76
     e2e:	f8 07       	cpc	r31, r24
     e30:	d1 f7       	brne	.-12     	; 0xe26 <initializeMemory+0x4>
     e32:	ec e0       	ldi	r30, 0x0C	; 12
     e34:	f1 e2       	ldi	r31, 0x21	; 33
    }
    
    // clear all status bits for receive chunks
    for( i=0; i<NUM_TXCHUNKS; i++ )
    {
        txChunks[i].status = CHUNK_FREE;
     e36:	10 82       	st	Z, r1
     e38:	78 96       	adiw	r30, 0x18	; 24
    {
        rxChunks[i].status = CHUNK_FREE;
    }
    
    // clear all status bits for receive chunks
    for( i=0; i<NUM_TXCHUNKS; i++ )
     e3a:	82 e2       	ldi	r24, 0x22	; 34
     e3c:	ec 32       	cpi	r30, 0x2C	; 44
     e3e:	f8 07       	cpc	r31, r24
     e40:	d1 f7       	brne	.-12     	; 0xe36 <initializeMemory+0x14>
    }

    // load config data
    //TODO: re-enable
    //restore(&conf, &nv_conf, sizeof(blockConf));
}
     e42:	08 95       	ret

00000e44 <freeChunk>:

// this loops through and frees all connected Chunks in the list.
void freeChunk(Chunk * c)
{
     e44:	fc 01       	movw	r30, r24
  Chunk * tmp;	

  while(c != NULL)
     e46:	09 c0       	rjmp	.+18     	; 0xe5a <freeChunk+0x16>
    {
      if(chunkInUse(c))
     e48:	81 89       	ldd	r24, Z+17	; 0x11
     e4a:	87 fd       	sbrc	r24, 7
        {
	  c->status = CHUNK_FREE;
     e4c:	11 8a       	std	Z+17, r1	; 0x11
        }
      tmp = c->next;
     e4e:	92 89       	ldd	r25, Z+18	; 0x12
     e50:	83 89       	ldd	r24, Z+19	; 0x13
      c->next = NULL;
     e52:	12 8a       	std	Z+18, r1	; 0x12
     e54:	13 8a       	std	Z+19, r1	; 0x13
      c = tmp;
     e56:	e9 2f       	mov	r30, r25
     e58:	f8 2f       	mov	r31, r24
// this loops through and frees all connected Chunks in the list.
void freeChunk(Chunk * c)
{
  Chunk * tmp;	

  while(c != NULL)
     e5a:	30 97       	sbiw	r30, 0x00	; 0
     e5c:	a9 f7       	brne	.-22     	; 0xe48 <freeChunk+0x4>
        }
      tmp = c->next;
      c->next = NULL;
      c = tmp;
    }
}
     e5e:	08 95       	ret

00000e60 <getSystemChunk>:
Chunk* getSystemChunk(byte which)
{
    int8_t i;
    Chunk*  current;

    if(which == RXCHUNK)
     e60:	81 11       	cpse	r24, r1
     e62:	03 c0       	rjmp	.+6      	; 0xe6a <getSystemChunk+0xa>
      {
	current = rxChunks;
     e64:	8b e1       	ldi	r24, 0x1B	; 27
     e66:	92 e2       	ldi	r25, 0x22	; 34
     e68:	02 c0       	rjmp	.+4      	; 0xe6e <getSystemChunk+0xe>

	i = NUM_RXCHUNKS-1;
      }
    else
      {
	current = txChunks;
     e6a:	8b ef       	ldi	r24, 0xFB	; 251
     e6c:	90 e2       	ldi	r25, 0x20	; 32
    int8_t i;
    Chunk*  current;

    if(which == RXCHUNK)
      {
	current = rxChunks;
     e6e:	2c e0       	ldi	r18, 0x0C	; 12
      c->next = NULL;
      c = tmp;
    }
}

Chunk* getSystemChunk(byte which)
     e70:	fc 01       	movw	r30, r24
     e72:	e8 5f       	subi	r30, 0xF8	; 248
     e74:	fe 4f       	sbci	r31, 0xFE	; 254
     e76:	dc 01       	movw	r26, r24
     e78:	a7 5e       	subi	r26, 0xE7	; 231
     e7a:	be 4f       	sbci	r27, 0xFE	; 254

    // look for unused Chunk
    for(; i>=0; i--)
    {
        // check top bit to indicate usage
      if( !chunkInUse((&(current[i]))) )
     e7c:	3c 91       	ld	r19, X
     e7e:	37 fd       	sbrc	r19, 7
     e80:	05 c0       	rjmp	.+10     	; 0xe8c <getSystemChunk+0x2c>
        {
            // indicate in use
	  (current[i]).status = CHUNK_USED;
     e82:	80 e8       	ldi	r24, 0x80	; 128
     e84:	81 8b       	std	Z+17, r24	; 0x11
          
	  // clear old next ptr in case non-NULL
	  (current[i]).next = NULL;
     e86:	12 8a       	std	Z+18, r1	; 0x12
     e88:	13 8a       	std	Z+19, r1	; 0x13
	  return &(current[i]);
     e8a:	06 c0       	rjmp	.+12     	; 0xe98 <getSystemChunk+0x38>
     e8c:	21 50       	subi	r18, 0x01	; 1
     e8e:	48 97       	sbiw	r24, 0x18	; 24

	i = NUM_TXCHUNKS-1;
      }

    // look for unused Chunk
    for(; i>=0; i--)
     e90:	21 11       	cpse	r18, r1
     e92:	ee cf       	rjmp	.-36     	; 0xe70 <getSystemChunk+0x10>
	  return &(current[i]);
        }
        // else, in use (supposedly)
    }
    // none free!
    return NULL;  
     e94:	e0 e0       	ldi	r30, 0x00	; 0
     e96:	f0 e0       	ldi	r31, 0x00	; 0
}
     e98:	cf 01       	movw	r24, r30
     e9a:	08 95       	ret

00000e9c <getSystemRXChunk>:

// return pointer to free memory Chunk
Chunk* getSystemRXChunk()
{
  return getSystemChunk(RXCHUNK);
     e9c:	80 e0       	ldi	r24, 0x00	; 0
     e9e:	0c 94 30 07 	jmp	0xe60	; 0xe60 <getSystemChunk>

00000ea2 <getSystemTXChunk>:
}

Chunk* getSystemTXChunk()
{
  return getSystemChunk(TXCHUNK);
     ea2:	81 e0       	ldi	r24, 0x01	; 1
     ea4:	0c 94 30 07 	jmp	0xe60	; 0xe60 <getSystemChunk>

00000ea8 <sendMessageToUid>:
#include "led.bbh"



byte sendMessageToUid(Chunk* c, Uid dest, byte * msg, byte length, MsgHandler mh, GenericHandler cb)
{
     ea8:	ef 92       	push	r14
     eaa:	ff 92       	push	r15
     eac:	0f 93       	push	r16
     eae:	1f 93       	push	r17
     eb0:	cf 93       	push	r28
     eb2:	df 93       	push	r29
     eb4:	ec 01       	movw	r28, r24
     eb6:	cb 01       	movw	r24, r22
     eb8:	e9 e3       	ldi	r30, 0x39	; 57
     eba:	f0 e2       	ldi	r31, 0x20	; 32
    byte i;

    for(i = 0; i < NUM_PORTS; ++i)
     ebc:	60 e0       	ldi	r22, 0x00	; 0
    {
        if(thisNeighborhood.n[i] == dest)
     ebe:	a1 91       	ld	r26, Z+
     ec0:	b1 91       	ld	r27, Z+
     ec2:	a8 17       	cp	r26, r24
     ec4:	b9 07       	cpc	r27, r25
     ec6:	61 f4       	brne	.+24     	; 0xee0 <sendMessageToUid+0x38>
        {
            if(setupChunk(c,i, msg, length, mh, cb) == 0)
     ec8:	ce 01       	movw	r24, r28
     eca:	0e 94 54 02 	call	0x4a8	; 0x4a8 <setupChunk>
     ece:	81 11       	cpse	r24, r1
     ed0:	02 c0       	rjmp	.+4      	; 0xed6 <sendMessageToUid+0x2e>
            {
                return 0;
     ed2:	80 e0       	ldi	r24, 0x00	; 0
     ed4:	09 c0       	rjmp	.+18     	; 0xee8 <sendMessageToUid+0x40>
            }
            queueChunk(c);
     ed6:	ce 01       	movw	r24, r28
     ed8:	0e 94 90 02 	call	0x520	; 0x520 <queueChunk>
            return 1;
     edc:	81 e0       	ldi	r24, 0x01	; 1
     ede:	04 c0       	rjmp	.+8      	; 0xee8 <sendMessageToUid+0x40>

byte sendMessageToUid(Chunk* c, Uid dest, byte * msg, byte length, MsgHandler mh, GenericHandler cb)
{
    byte i;

    for(i = 0; i < NUM_PORTS; ++i)
     ee0:	6f 5f       	subi	r22, 0xFF	; 255
     ee2:	66 30       	cpi	r22, 0x06	; 6
     ee4:	61 f7       	brne	.-40     	; 0xebe <sendMessageToUid+0x16>
     ee6:	f5 cf       	rjmp	.-22     	; 0xed2 <sendMessageToUid+0x2a>
            return 1;
        }
    }

    return 0;
}
     ee8:	df 91       	pop	r29
     eea:	cf 91       	pop	r28
     eec:	1f 91       	pop	r17
     eee:	0f 91       	pop	r16
     ef0:	ff 90       	pop	r15
     ef2:	ef 90       	pop	r14
     ef4:	08 95       	ret

00000ef6 <sendMessageToPort>:

byte sendMessageToPort(Chunk* c, PRef dest, byte * msg, byte length, MsgHandler mh, GenericHandler cb)
{
     ef6:	ef 92       	push	r14
     ef8:	ff 92       	push	r15
     efa:	0f 93       	push	r16
     efc:	1f 93       	push	r17
     efe:	cf 93       	push	r28
     f00:	df 93       	push	r29
     f02:	ec 01       	movw	r28, r24
    // NOTE: Can no longer support BROADCAST since requires 6 memory chunks passed in
    if(dest == BROADCAST)
     f04:	6f 3f       	cpi	r22, 0xFF	; 255
     f06:	11 f4       	brne	.+4      	; 0xf0c <sendMessageToPort+0x16>
    {
        return 0;
     f08:	80 e0       	ldi	r24, 0x00	; 0
     f0a:	0a c0       	rjmp	.+20     	; 0xf20 <sendMessageToPort+0x2a>
    }
    else
    {
        if(dest < NUM_PORTS)
     f0c:	66 30       	cpi	r22, 0x06	; 6
     f0e:	e0 f7       	brcc	.-8      	; 0xf08 <sendMessageToPort+0x12>
        {
            if(setupChunk(c,dest, msg, length, mh, cb) == 0)
     f10:	0e 94 54 02 	call	0x4a8	; 0x4a8 <setupChunk>
     f14:	88 23       	and	r24, r24
     f16:	c1 f3       	breq	.-16     	; 0xf08 <sendMessageToPort+0x12>
            {
                return 0;
            }
            queueChunk(c);
     f18:	ce 01       	movw	r24, r28
     f1a:	0e 94 90 02 	call	0x520	; 0x520 <queueChunk>
            return 1;
     f1e:	81 e0       	ldi	r24, 0x01	; 1
        }
    }
    
    return 0;
}
     f20:	df 91       	pop	r29
     f22:	cf 91       	pop	r28
     f24:	1f 91       	pop	r17
     f26:	0f 91       	pop	r16
     f28:	ff 90       	pop	r15
     f2a:	ef 90       	pop	r14
     f2c:	08 95       	ret

00000f2e <sendSystemMessage>:

// ----------- SEND SYSTEM MESSAGE to PORT
//
// Probably shouldn't be used by a user, but needed by various sytem routines.
byte sendSystemMessage(PRef dest, byte * msg, byte length, MsgHandler mh, GenericHandler cb)
{
     f2e:	6f 92       	push	r6
     f30:	7f 92       	push	r7
     f32:	8f 92       	push	r8
     f34:	9f 92       	push	r9
     f36:	af 92       	push	r10
     f38:	bf 92       	push	r11
     f3a:	cf 92       	push	r12
     f3c:	df 92       	push	r13
     f3e:	ef 92       	push	r14
     f40:	ff 92       	push	r15
     f42:	0f 93       	push	r16
     f44:	1f 93       	push	r17
     f46:	cf 93       	push	r28
     f48:	df 93       	push	r29
     f4a:	78 2e       	mov	r7, r24
     f4c:	6b 01       	movw	r12, r22
     f4e:	64 2e       	mov	r6, r20
     f50:	59 01       	movw	r10, r18
     f52:	48 01       	movw	r8, r16
    Chunk* c;

    if(dest == BROADCAST)
     f54:	8f ef       	ldi	r24, 0xFF	; 255
     f56:	78 12       	cpse	r7, r24
     f58:	1b c0       	rjmp	.+54     	; 0xf90 <sendSystemMessage+0x62>
     f5a:	71 2c       	mov	r7, r1
        byte i;
        
        for(i = 0; i < NUM_PORTS; ++i)
        {
            // set it to appropriate chunk
            c = getSystemTXChunk();
     f5c:	0e 94 51 07 	call	0xea2	; 0xea2 <getSystemTXChunk>
     f60:	ec 01       	movw	r28, r24
            
            // in use - can't send
            if( c == NULL ) 
     f62:	00 97       	sbiw	r24, 0x00	; 0
     f64:	81 f0       	breq	.+32     	; 0xf86 <sendSystemMessage+0x58>
            {
                continue;
            }
            
            if(setupChunk(c,i, msg, length, mh, cb) == 0)
     f66:	74 01       	movw	r14, r8
     f68:	85 01       	movw	r16, r10
     f6a:	26 2d       	mov	r18, r6
     f6c:	a6 01       	movw	r20, r12
     f6e:	67 2d       	mov	r22, r7
     f70:	0e 94 54 02 	call	0x4a8	; 0x4a8 <setupChunk>
     f74:	81 11       	cpse	r24, r1
     f76:	04 c0       	rjmp	.+8      	; 0xf80 <sendSystemMessage+0x52>
            {
                freeChunk(c);
     f78:	ce 01       	movw	r24, r28
     f7a:	0e 94 22 07 	call	0xe44	; 0xe44 <freeChunk>
                continue;
     f7e:	03 c0       	rjmp	.+6      	; 0xf86 <sendSystemMessage+0x58>
            }
            queueChunk(c);
     f80:	ce 01       	movw	r24, r28
     f82:	0e 94 90 02 	call	0x520	; 0x520 <queueChunk>

    if(dest == BROADCAST)
    {
        byte i;
        
        for(i = 0; i < NUM_PORTS; ++i)
     f86:	73 94       	inc	r7
     f88:	86 e0       	ldi	r24, 0x06	; 6
     f8a:	78 12       	cpse	r7, r24
     f8c:	e7 cf       	rjmp	.-50     	; 0xf5c <sendSystemMessage+0x2e>
     f8e:	1c c0       	rjmp	.+56     	; 0xfc8 <sendSystemMessage+0x9a>
        
        return i;
    }
    else
    {
        if(dest < NUM_PORTS)
     f90:	85 e0       	ldi	r24, 0x05	; 5
     f92:	87 15       	cp	r24, r7
     f94:	08 f4       	brcc	.+2      	; 0xf98 <sendSystemMessage+0x6a>
     f96:	11 c0       	rjmp	.+34     	; 0xfba <sendSystemMessage+0x8c>
        {
            // set it to appropriate chunk
            c = getSystemTXChunk();
     f98:	0e 94 51 07 	call	0xea2	; 0xea2 <getSystemTXChunk>
     f9c:	ec 01       	movw	r28, r24
            
            // in use - can't send
            if( c == NULL ) 
     f9e:	00 97       	sbiw	r24, 0x00	; 0
     fa0:	61 f0       	breq	.+24     	; 0xfba <sendSystemMessage+0x8c>
            {
                return 0;
            }
            
            if(setupChunk(c,dest, msg, length, mh, cb) == 0)
     fa2:	78 01       	movw	r14, r16
     fa4:	85 01       	movw	r16, r10
     fa6:	26 2d       	mov	r18, r6
     fa8:	a6 01       	movw	r20, r12
     faa:	67 2d       	mov	r22, r7
     fac:	0e 94 54 02 	call	0x4a8	; 0x4a8 <setupChunk>
     fb0:	81 11       	cpse	r24, r1
     fb2:	05 c0       	rjmp	.+10     	; 0xfbe <sendSystemMessage+0x90>
            {
                freeChunk(c);
     fb4:	ce 01       	movw	r24, r28
     fb6:	0e 94 22 07 	call	0xe44	; 0xe44 <freeChunk>
                return 0;
     fba:	71 2c       	mov	r7, r1
     fbc:	05 c0       	rjmp	.+10     	; 0xfc8 <sendSystemMessage+0x9a>
            }
            queueChunk(c);
     fbe:	ce 01       	movw	r24, r28
     fc0:	0e 94 90 02 	call	0x520	; 0x520 <queueChunk>
            return 1;
     fc4:	77 24       	eor	r7, r7
     fc6:	73 94       	inc	r7
        }
    }
    
    return 0;
}
     fc8:	87 2d       	mov	r24, r7
     fca:	df 91       	pop	r29
     fcc:	cf 91       	pop	r28
     fce:	1f 91       	pop	r17
     fd0:	0f 91       	pop	r16
     fd2:	ff 90       	pop	r15
     fd4:	ef 90       	pop	r14
     fd6:	df 90       	pop	r13
     fd8:	cf 90       	pop	r12
     fda:	bf 90       	pop	r11
     fdc:	af 90       	pop	r10
     fde:	9f 90       	pop	r9
     fe0:	8f 90       	pop	r8
     fe2:	7f 90       	pop	r7
     fe4:	6f 90       	pop	r6
     fe6:	08 95       	ret

00000fe8 <initSystemMessage>:


void initSystemMessage()
{
     fe8:	08 95       	ret

00000fea <retrySend>:

#include "queues.bbh"

void retrySend(void)
{
    SendChunkQueue* currSq = ((SQTimeout *)thisTimeout)->sq;
     fea:	e0 91 4c 25 	lds	r30, 0x254C
     fee:	f0 91 4d 25 	lds	r31, 0x254D
     ff2:	02 84       	ldd	r0, Z+10	; 0x0a
     ff4:	f3 85       	ldd	r31, Z+11	; 0x0b
     ff6:	e0 2d       	mov	r30, r0
    
    //Try to resend
    currSq->flags |= CLEAR_TO_SEND;
     ff8:	85 85       	ldd	r24, Z+13	; 0x0d
     ffa:	80 64       	ori	r24, 0x40	; 64
     ffc:	85 87       	std	Z+13, r24	; 0x0d
     ffe:	08 95       	ret

00001000 <initPortQueues>:
#include "../hw-api/hwSerial.h"

threadvar Port port[NUM_PORTS];

void initPortQueues(Port* p)
{
    1000:	fc 01       	movw	r30, r24
    // reset send queue status
    p->sq.retry         = 0;
    1002:	15 86       	std	Z+13, r1	; 0x0d
    p->sq.flags         = CLEAR_TO_SEND;
    1004:	80 e4       	ldi	r24, 0x40	; 64
    1006:	86 87       	std	Z+14, r24	; 0x0e
	
	// send queue timers
	p->sq.qtout.sq = &(p->sq);
    1008:	cf 01       	movw	r24, r30
    100a:	01 96       	adiw	r24, 0x01	; 1
    100c:	83 87       	std	Z+11, r24	; 0x0b
    100e:	94 87       	std	Z+12, r25	; 0x0c
	p->sq.qtout.tout.callback = (GenericHandler)&retrySend;
    1010:	85 ef       	ldi	r24, 0xF5	; 245
    1012:	97 e0       	ldi	r25, 0x07	; 7
    1014:	87 83       	std	Z+7, r24	; 0x07
    1016:	90 87       	std	Z+8, r25	; 0x08


	
	// empty the send queue
	//freeChunk(p->sq.head);
    p->sq.head = NULL;
    1018:	17 86       	std	Z+15, r1	; 0x0f
    101a:	10 8a       	std	Z+16, r1	; 0x10
    //freeChunk(p->sq.tail);
    p->sq.tail = NULL;
    101c:	11 8a       	std	Z+17, r1	; 0x11
    101e:	12 8a       	std	Z+18, r1	; 0x12
	
	// reset receive queue status
    p->rq.index         = 0;
    1020:	13 8a       	std	Z+19, r1	; 0x13
	p->rq.checksum      = 0;
    1022:	14 8a       	std	Z+20, r1	; 0x14
    p->rq.flags         = NO_CHUNK_READY;
    1024:	15 8a       	std	Z+21, r1	; 0x15

	// empty receive queues
    //freeReceiveChunk(p->rq.curr);
	p->rq.curr = NULL;
    1026:	16 8a       	std	Z+22, r1	; 0x16
    1028:	17 8a       	std	Z+23, r1	; 0x17
    102a:	08 95       	ret

0000102c <initPorts>:
}

void initPorts()
{
    102c:	ff 92       	push	r15
    102e:	0f 93       	push	r16
    1030:	1f 93       	push	r17
    1032:	cf 93       	push	r28
    1034:	df 93       	push	r29
    1036:	0c e3       	ldi	r16, 0x3C	; 60
    1038:	13 e2       	ldi	r17, 0x23	; 35
    103a:	c0 e0       	ldi	r28, 0x00	; 0
    103c:	d0 e0       	ldi	r29, 0x00	; 0
	PRef i;
	for(i = 0; i < NUM_PORTS; i++)
	{
		port[i].pnum  = i;
		initPortQueues(&port[i]);
    103e:	88 e5       	ldi	r24, 0x58	; 88
    1040:	f8 2e       	mov	r15, r24
void initPorts()
{
	PRef i;
	for(i = 0; i < NUM_PORTS; i++)
	{
		port[i].pnum  = i;
    1042:	f8 01       	movw	r30, r16
    1044:	c0 83       	st	Z, r28
		initPortQueues(&port[i]);
    1046:	fc 9e       	mul	r15, r28
    1048:	c0 01       	movw	r24, r0
    104a:	fd 9e       	mul	r15, r29
    104c:	90 0d       	add	r25, r0
    104e:	11 24       	eor	r1, r1
    1050:	84 5c       	subi	r24, 0xC4	; 196
    1052:	9c 4d       	sbci	r25, 0xDC	; 220
    1054:	0e 94 00 08 	call	0x1000	; 0x1000 <initPortQueues>
    1058:	21 96       	adiw	r28, 0x01	; 1
    105a:	08 5a       	subi	r16, 0xA8	; 168
    105c:	1f 4f       	sbci	r17, 0xFF	; 255
}

void initPorts()
{
	PRef i;
	for(i = 0; i < NUM_PORTS; i++)
    105e:	c6 30       	cpi	r28, 0x06	; 6
    1060:	d1 05       	cpc	r29, r1
    1062:	79 f7       	brne	.-34     	; 0x1042 <initPorts+0x16>
	{
		port[i].pnum  = i;
		initPortQueues(&port[i]);
	}
	initHWPorts();
}
    1064:	df 91       	pop	r29
    1066:	cf 91       	pop	r28
    1068:	1f 91       	pop	r17
    106a:	0f 91       	pop	r16
    106c:	ff 90       	pop	r15
	for(i = 0; i < NUM_PORTS; i++)
	{
		port[i].pnum  = i;
		initPortQueues(&port[i]);
	}
	initHWPorts();
    106e:	0c 94 13 12 	jmp	0x2426	; 0x2426 <initHWPorts>

00001072 <blockProgram>:
#include "led.bbh"

int blockProgram(void)
{

    initBlock();
    1072:	0e 94 85 01 	call	0x30a	; 0x30a <initBlock>

    
    // low-level robot initialization routine
    
    // handler registration / load control structure
    userRegistration();
    1076:	0e 94 48 01 	call	0x290	; 0x290 <userRegistration>
    
    // Call user-based system_init function, if registered
    // A good idea to separate from UserRegistration?
    callHandler(SYSTEM_INIT);    
    107a:	80 e0       	ldi	r24, 0x00	; 0
    107c:	0e 94 ce 06 	call	0xd9c	; 0xd9c <callHandler>

        // step through triggered handler functions
	//printf("%d\r\n",count++);
	    
        // Run user system_main function, if registered
	callHandler(SYSTEM_MAIN);
    1080:	81 e0       	ldi	r24, 0x01	; 1
    1082:	fc cf       	rjmp	.-8      	; 0x107c <blockProgram+0xa>

00001084 <delayMS>:
#ifdef BBSIM
extern void yieldTil(Time x);
#endif

void delayMS(int ms) 
{
    1084:	cf 92       	push	r12
    1086:	df 92       	push	r13
    1088:	ef 92       	push	r14
    108a:	ff 92       	push	r15
    108c:	cf 93       	push	r28
    108e:	df 93       	push	r29
    1090:	ec 01       	movw	r28, r24
  }
}

Time getTime()
{
	return getHWTime();
    1092:	0e 94 95 14 	call	0x292a	; 0x292a <getHWTime>
    1096:	6b 01       	movw	r12, r22
    1098:	7c 01       	movw	r14, r24
extern void yieldTil(Time x);
#endif

void delayMS(int ms) 
{
  Time until = getTime() + ms;
    109a:	ce 01       	movw	r24, r28
    109c:	aa 27       	eor	r26, r26
    109e:	97 fd       	sbrc	r25, 7
    10a0:	a0 95       	com	r26
    10a2:	ba 2f       	mov	r27, r26
    10a4:	c8 0e       	add	r12, r24
    10a6:	d9 1e       	adc	r13, r25
    10a8:	ea 1e       	adc	r14, r26
    10aa:	fb 1e       	adc	r15, r27
  }
}

Time getTime()
{
	return getHWTime();
    10ac:	0e 94 95 14 	call	0x292a	; 0x292a <getHWTime>

void delayMS(int ms) 
{
  Time until = getTime() + ms;
	
  while(getTime() < until) {
    10b0:	6c 15       	cp	r22, r12
    10b2:	7d 05       	cpc	r23, r13
    10b4:	8e 05       	cpc	r24, r14
    10b6:	9f 05       	cpc	r25, r15
    10b8:	c8 f3       	brcs	.-14     	; 0x10ac <delayMS+0x28>
#ifdef BBSIM
    yieldTil(until);
#endif
  }
}
    10ba:	df 91       	pop	r29
    10bc:	cf 91       	pop	r28
    10be:	ff 90       	pop	r15
    10c0:	ef 90       	pop	r14
    10c2:	df 90       	pop	r13
    10c4:	cf 90       	pop	r12
    10c6:	08 95       	ret

000010c8 <getTime>:

Time getTime()
{
	return getHWTime();
    10c8:	0c 94 95 14 	jmp	0x292a	; 0x292a <getHWTime>

000010cc <checkTimeout>:
}

void checkTimeout()
{
    10cc:	0f 93       	push	r16
    10ce:	1f 93       	push	r17
    10d0:	cf 93       	push	r28
    10d2:	df 93       	push	r29
    10d4:	00 d0       	rcall	.+0      	; 0x10d6 <checkTimeout+0xa>
    10d6:	1f 92       	push	r1
    10d8:	cd b7       	in	r28, 0x3d	; 61
    10da:	de b7       	in	r29, 0x3e	; 62
	if(timeoutList != NULL)
    10dc:	80 91 50 25 	lds	r24, 0x2550
    10e0:	90 91 51 25 	lds	r25, 0x2551
    10e4:	89 2b       	or	r24, r25
    10e6:	99 f1       	breq	.+102    	; 0x114e <checkTimeout+0x82>
  }
}

Time getTime()
{
	return getHWTime();
    10e8:	0e 94 95 14 	call	0x292a	; 0x292a <getHWTime>
		Time now = getTime();
		
		do
		{
			// check list, remove timer and call function
			if(now >= timeoutList->calltime)
    10ec:	e0 91 50 25 	lds	r30, 0x2550
    10f0:	f0 91 51 25 	lds	r31, 0x2551
    10f4:	02 81       	ldd	r16, Z+2	; 0x02
    10f6:	13 81       	ldd	r17, Z+3	; 0x03
    10f8:	24 81       	ldd	r18, Z+4	; 0x04
    10fa:	35 81       	ldd	r19, Z+5	; 0x05
    10fc:	60 17       	cp	r22, r16
    10fe:	71 07       	cpc	r23, r17
    1100:	82 07       	cpc	r24, r18
    1102:	93 07       	cpc	r25, r19
    1104:	20 f1       	brcs	.+72     	; 0x114e <checkTimeout+0x82>
			{
				// set reference variable, remove timeout from list
				thisTimeout = timeoutList;
    1106:	e0 93 4c 25 	sts	0x254C, r30
    110a:	f0 93 4d 25 	sts	0x254D, r31
				timeoutList = timeoutList->next;
    110e:	20 81       	ld	r18, Z
    1110:	31 81       	ldd	r19, Z+1	; 0x01
    1112:	20 93 50 25 	sts	0x2550, r18
    1116:	30 93 51 25 	sts	0x2551, r19

				// if timeout was not pre-emptively disable, execute callback();
				if(thisTimeout->state != INACTIVE)
    111a:	20 85       	ldd	r18, Z+8	; 0x08
    111c:	22 23       	and	r18, r18
    111e:	61 f0       	breq	.+24     	; 0x1138 <checkTimeout+0x6c>
				  {
				    (thisTimeout->callback)();	
    1120:	06 80       	ldd	r0, Z+6	; 0x06
    1122:	f7 81       	ldd	r31, Z+7	; 0x07
    1124:	e0 2d       	mov	r30, r0
    1126:	69 83       	std	Y+1, r22	; 0x01
    1128:	7a 83       	std	Y+2, r23	; 0x02
    112a:	8b 83       	std	Y+3, r24	; 0x03
    112c:	9c 83       	std	Y+4, r25	; 0x04
    112e:	19 95       	eicall
    1130:	9c 81       	ldd	r25, Y+4	; 0x04
    1132:	8b 81       	ldd	r24, Y+3	; 0x03
    1134:	7a 81       	ldd	r23, Y+2	; 0x02
    1136:	69 81       	ldd	r22, Y+1	; 0x01
				  }

				// disable callback until reactivated/reinserted into list.
				thisTimeout->state = INACTIVE;
    1138:	e0 91 4c 25 	lds	r30, 0x254C
    113c:	f0 91 4d 25 	lds	r31, 0x254D
    1140:	10 86       	std	Z+8, r1	; 0x08
			{
				// stop searching list
				break;
			}
			
		} while (timeoutList != NULL);
    1142:	20 91 50 25 	lds	r18, 0x2550
    1146:	30 91 51 25 	lds	r19, 0x2551
    114a:	23 2b       	or	r18, r19
    114c:	79 f6       	brne	.-98     	; 0x10ec <checkTimeout+0x20>
	}
}
    114e:	24 96       	adiw	r28, 0x04	; 4
    1150:	cd bf       	out	0x3d, r28	; 61
    1152:	de bf       	out	0x3e, r29	; 62
    1154:	df 91       	pop	r29
    1156:	cf 91       	pop	r28
    1158:	1f 91       	pop	r17
    115a:	0f 91       	pop	r16
    115c:	08 95       	ret

0000115e <registerTimeout>:

int registerTimeout(Timeout * t)
{
    115e:	0f 93       	push	r16
    1160:	1f 93       	push	r17
    1162:	cf 93       	push	r28
    1164:	df 93       	push	r29
    1166:	fc 01       	movw	r30, r24
	t->next = NULL;
    1168:	10 82       	st	Z, r1
    116a:	11 82       	std	Z+1, r1	; 0x01

	if(timeoutList == NULL)
    116c:	a0 91 50 25 	lds	r26, 0x2550
    1170:	b0 91 51 25 	lds	r27, 0x2551
    1174:	10 97       	sbiw	r26, 0x00	; 0
    1176:	29 f4       	brne	.+10     	; 0x1182 <registerTimeout+0x24>
	{
		timeoutList = t;
    1178:	80 93 50 25 	sts	0x2550, r24
    117c:	90 93 51 25 	sts	0x2551, r25
    1180:	2d c0       	rjmp	.+90     	; 0x11dc <registerTimeout+0x7e>
		Timeout * prev = NULL;
		Timeout * cur;
		
		cur = timeoutList;
		
		while(cur->calltime < t->calltime && cur->next != NULL)
    1182:	42 81       	ldd	r20, Z+2	; 0x02
    1184:	53 81       	ldd	r21, Z+3	; 0x03
    1186:	64 81       	ldd	r22, Z+4	; 0x04
    1188:	75 81       	ldd	r23, Z+5	; 0x05
    118a:	c0 e0       	ldi	r28, 0x00	; 0
    118c:	d0 e0       	ldi	r29, 0x00	; 0
    118e:	03 c0       	rjmp	.+6      	; 0x1196 <registerTimeout+0x38>
		{
			prev = cur;
			cur = cur->next;
    1190:	dc 01       	movw	r26, r24
		Timeout * prev = NULL;
		Timeout * cur;
		
		cur = timeoutList;
		
		while(cur->calltime < t->calltime && cur->next != NULL)
    1192:	c3 2f       	mov	r28, r19
    1194:	d2 2f       	mov	r29, r18
    1196:	12 96       	adiw	r26, 0x02	; 2
    1198:	0d 91       	ld	r16, X+
    119a:	1d 91       	ld	r17, X+
    119c:	2d 91       	ld	r18, X+
    119e:	3c 91       	ld	r19, X
    11a0:	15 97       	sbiw	r26, 0x05	; 5
    11a2:	04 17       	cp	r16, r20
    11a4:	15 07       	cpc	r17, r21
    11a6:	26 07       	cpc	r18, r22
    11a8:	37 07       	cpc	r19, r23
    11aa:	18 f0       	brcs	.+6      	; 0x11b2 <registerTimeout+0x54>
			cur = cur->next;
		}		
		
		if(cur->calltime >= t->calltime)
		{
			if(prev == NULL)
    11ac:	20 97       	sbiw	r28, 0x00	; 0
    11ae:	91 f4       	brne	.+36     	; 0x11d4 <registerTimeout+0x76>
    11b0:	0c c0       	rjmp	.+24     	; 0x11ca <registerTimeout+0x6c>
		Timeout * prev = NULL;
		Timeout * cur;
		
		cur = timeoutList;
		
		while(cur->calltime < t->calltime && cur->next != NULL)
    11b2:	8d 91       	ld	r24, X+
    11b4:	9c 91       	ld	r25, X
    11b6:	11 97       	sbiw	r26, 0x01	; 1
    11b8:	3a 2f       	mov	r19, r26
    11ba:	2b 2f       	mov	r18, r27
    11bc:	00 97       	sbiw	r24, 0x00	; 0
    11be:	41 f7       	brne	.-48     	; 0x1190 <registerTimeout+0x32>
			
			t->next = cur;
		}
		else
		{
			cur->next = t;
    11c0:	ed 93       	st	X+, r30
    11c2:	fc 93       	st	X, r31
			t->next = NULL;
    11c4:	10 82       	st	Z, r1
    11c6:	11 82       	std	Z+1, r1	; 0x01
    11c8:	09 c0       	rjmp	.+18     	; 0x11dc <registerTimeout+0x7e>
		
		if(cur->calltime >= t->calltime)
		{
			if(prev == NULL)
			{
				timeoutList = t;
    11ca:	e0 93 50 25 	sts	0x2550, r30
    11ce:	f0 93 51 25 	sts	0x2551, r31
    11d2:	02 c0       	rjmp	.+4      	; 0x11d8 <registerTimeout+0x7a>
			}
			else
			{
				prev->next = t;
    11d4:	e8 83       	st	Y, r30
    11d6:	f9 83       	std	Y+1, r31	; 0x01
			}
			
			t->next = cur;
    11d8:	a0 83       	st	Z, r26
    11da:	b1 83       	std	Z+1, r27	; 0x01
			cur->next = t;
			t->next = NULL;
		}
	}
	
	t->state = ACTIVE;
    11dc:	81 e0       	ldi	r24, 0x01	; 1
    11de:	80 87       	std	Z+8, r24	; 0x08
	
	return 1;	
}
    11e0:	81 e0       	ldi	r24, 0x01	; 1
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	df 91       	pop	r29
    11e6:	cf 91       	pop	r28
    11e8:	1f 91       	pop	r17
    11ea:	0f 91       	pop	r16
    11ec:	08 95       	ret

000011ee <deregisterTimeout>:

int deregisterTimeout(Timeout * t)
{
	if(timeoutList == NULL)
    11ee:	e0 91 50 25 	lds	r30, 0x2550
    11f2:	f0 91 51 25 	lds	r31, 0x2551
    11f6:	30 97       	sbiw	r30, 0x00	; 0
    11f8:	d1 f0       	breq	.+52     	; 0x122e <deregisterTimeout+0x40>
    11fa:	a0 e0       	ldi	r26, 0x00	; 0
    11fc:	b0 e0       	ldi	r27, 0x00	; 0
    11fe:	07 c0       	rjmp	.+14     	; 0x120e <deregisterTimeout+0x20>
		

		while((cur != NULL) && (t != cur)) //(cur->callback != t->callback) && (cur->calltime != t->calltime))
		{
			prev = cur;
			cur = cur->next;
    1200:	20 81       	ld	r18, Z
    1202:	31 81       	ldd	r19, Z+1	; 0x01
    1204:	df 01       	movw	r26, r30
		Timeout * cur;

		cur = timeoutList;
		

		while((cur != NULL) && (t != cur)) //(cur->callback != t->callback) && (cur->calltime != t->calltime))
    1206:	21 15       	cp	r18, r1
    1208:	31 05       	cpc	r19, r1
    120a:	89 f0       	breq	.+34     	; 0x122e <deregisterTimeout+0x40>
		{
			prev = cur;
			cur = cur->next;
    120c:	f9 01       	movw	r30, r18
		Timeout * cur;

		cur = timeoutList;
		

		while((cur != NULL) && (t != cur)) //(cur->callback != t->callback) && (cur->calltime != t->calltime))
    120e:	8e 17       	cp	r24, r30
    1210:	9f 07       	cpc	r25, r31
    1212:	b1 f7       	brne	.-20     	; 0x1200 <deregisterTimeout+0x12>
    1214:	0f c0       	rjmp	.+30     	; 0x1234 <deregisterTimeout+0x46>
		}
		else
		{
			if(prev == NULL)
			{
				timeoutList = cur->next;
    1216:	20 93 50 25 	sts	0x2550, r18
    121a:	30 93 51 25 	sts	0x2551, r19
    121e:	02 c0       	rjmp	.+4      	; 0x1224 <deregisterTimeout+0x36>
			}
			else
			{
				prev->next = cur->next;
    1220:	2d 93       	st	X+, r18
    1222:	3c 93       	st	X, r19
			}
			
			t->state = INACTIVE;
    1224:	fc 01       	movw	r30, r24
    1226:	10 86       	std	Z+8, r1	; 0x08
			
			return 1;
    1228:	21 e0       	ldi	r18, 0x01	; 1
    122a:	30 e0       	ldi	r19, 0x00	; 0
    122c:	09 c0       	rjmp	.+18     	; 0x1240 <deregisterTimeout+0x52>

int deregisterTimeout(Timeout * t)
{
	if(timeoutList == NULL)
	{		
		return 0;
    122e:	20 e0       	ldi	r18, 0x00	; 0
    1230:	30 e0       	ldi	r19, 0x00	; 0
    1232:	06 c0       	rjmp	.+12     	; 0x1240 <deregisterTimeout+0x52>
    1234:	fc 01       	movw	r30, r24
    1236:	20 81       	ld	r18, Z
    1238:	31 81       	ldd	r19, Z+1	; 0x01
		{
			return 0;
		}
		else
		{
			if(prev == NULL)
    123a:	10 97       	sbiw	r26, 0x00	; 0
    123c:	89 f7       	brne	.-30     	; 0x1220 <deregisterTimeout+0x32>
    123e:	eb cf       	rjmp	.-42     	; 0x1216 <deregisterTimeout+0x28>
			t->state = INACTIVE;
			
			return 1;
		}
	}
}
    1240:	c9 01       	movw	r24, r18
    1242:	08 95       	ret

00001244 <deregisterTimeoutByHandler>:

int deregisterTimeoutByHandler(GenericHandler h)
{
	if(timeoutList == NULL)
    1244:	e0 91 50 25 	lds	r30, 0x2550
    1248:	f0 91 51 25 	lds	r31, 0x2551
    124c:	30 97       	sbiw	r30, 0x00	; 0
    124e:	d9 f0       	breq	.+54     	; 0x1286 <deregisterTimeoutByHandler+0x42>
    1250:	a0 e0       	ldi	r26, 0x00	; 0
    1252:	b0 e0       	ldi	r27, 0x00	; 0
    1254:	07 c0       	rjmp	.+14     	; 0x1264 <deregisterTimeoutByHandler+0x20>
		cur = timeoutList;
		
		while((cur != NULL) && (cur->callback != h))
		{
			prev = cur;
			cur = cur->next;
    1256:	20 81       	ld	r18, Z
    1258:	31 81       	ldd	r19, Z+1	; 0x01
    125a:	df 01       	movw	r26, r30
		Timeout * prev = NULL;
		Timeout * cur;

		cur = timeoutList;
		
		while((cur != NULL) && (cur->callback != h))
    125c:	21 15       	cp	r18, r1
    125e:	31 05       	cpc	r19, r1
    1260:	91 f0       	breq	.+36     	; 0x1286 <deregisterTimeoutByHandler+0x42>
		{
			prev = cur;
			cur = cur->next;
    1262:	f9 01       	movw	r30, r18
		Timeout * prev = NULL;
		Timeout * cur;

		cur = timeoutList;
		
		while((cur != NULL) && (cur->callback != h))
    1264:	26 81       	ldd	r18, Z+6	; 0x06
    1266:	37 81       	ldd	r19, Z+7	; 0x07
    1268:	28 17       	cp	r18, r24
    126a:	39 07       	cpc	r19, r25
    126c:	a1 f7       	brne	.-24     	; 0x1256 <deregisterTimeoutByHandler+0x12>
    126e:	0e c0       	rjmp	.+28     	; 0x128c <deregisterTimeoutByHandler+0x48>
		}
		else
		{
			if(prev == NULL)
			{
				timeoutList = cur->next;
    1270:	80 93 50 25 	sts	0x2550, r24
    1274:	90 93 51 25 	sts	0x2551, r25
    1278:	02 c0       	rjmp	.+4      	; 0x127e <deregisterTimeoutByHandler+0x3a>
			}
			else
			{
				prev->next = cur->next;
    127a:	8d 93       	st	X+, r24
    127c:	9c 93       	st	X, r25
			}
			
			cur->state = INACTIVE;
    127e:	10 86       	std	Z+8, r1	; 0x08
			
			return 1;
    1280:	21 e0       	ldi	r18, 0x01	; 1
    1282:	30 e0       	ldi	r19, 0x00	; 0
    1284:	08 c0       	rjmp	.+16     	; 0x1296 <deregisterTimeoutByHandler+0x52>

int deregisterTimeoutByHandler(GenericHandler h)
{
	if(timeoutList == NULL)
	{		
		return 0;
    1286:	20 e0       	ldi	r18, 0x00	; 0
    1288:	30 e0       	ldi	r19, 0x00	; 0
    128a:	05 c0       	rjmp	.+10     	; 0x1296 <deregisterTimeoutByHandler+0x52>
    128c:	80 81       	ld	r24, Z
    128e:	91 81       	ldd	r25, Z+1	; 0x01
		{
			return 0;
		}
		else
		{
			if(prev == NULL)
    1290:	10 97       	sbiw	r26, 0x00	; 0
    1292:	99 f7       	brne	.-26     	; 0x127a <deregisterTimeoutByHandler+0x36>
    1294:	ed cf       	rjmp	.-38     	; 0x1270 <deregisterTimeoutByHandler+0x2c>
			
			return 1;
		}
	}

}
    1296:	c9 01       	movw	r24, r18
    1298:	08 95       	ret

0000129a <checkTimer>:

void checkTimer()
{
    129a:	0f 93       	push	r16
    129c:	1f 93       	push	r17
    129e:	cf 93       	push	r28
    12a0:	df 93       	push	r29
	Timer * tt = timerList;
    12a2:	c0 91 4e 25 	lds	r28, 0x254E
    12a6:	d0 91 4f 25 	lds	r29, 0x254F
	
	while(tt != NULL)
    12aa:	1b c0       	rjmp	.+54     	; 0x12e2 <checkTimer+0x48>
	{
		if(tt->state == ACTIVE)
    12ac:	88 89       	ldd	r24, Y+16	; 0x10
    12ae:	81 30       	cpi	r24, 0x01	; 1
    12b0:	a9 f4       	brne	.+42     	; 0x12dc <checkTimer+0x42>
		{
			if((tt->t).state == INACTIVE)
    12b2:	8a 85       	ldd	r24, Y+10	; 0x0a
    12b4:	81 11       	cpse	r24, r1
    12b6:	12 c0       	rjmp	.+36     	; 0x12dc <checkTimer+0x42>
  }
}

Time getTime()
{
	return getHWTime();
    12b8:	0e 94 95 14 	call	0x292a	; 0x292a <getHWTime>
	{
		if(tt->state == ACTIVE)
		{
			if((tt->t).state == INACTIVE)
			{
				(tt->t).calltime = getTime() + tt->period;
    12bc:	0c 85       	ldd	r16, Y+12	; 0x0c
    12be:	1d 85       	ldd	r17, Y+13	; 0x0d
    12c0:	2e 85       	ldd	r18, Y+14	; 0x0e
    12c2:	3f 85       	ldd	r19, Y+15	; 0x0f
    12c4:	60 0f       	add	r22, r16
    12c6:	71 1f       	adc	r23, r17
    12c8:	82 1f       	adc	r24, r18
    12ca:	93 1f       	adc	r25, r19
    12cc:	6c 83       	std	Y+4, r22	; 0x04
    12ce:	7d 83       	std	Y+5, r23	; 0x05
    12d0:	8e 83       	std	Y+6, r24	; 0x06
    12d2:	9f 83       	std	Y+7, r25	; 0x07
				registerTimeout(&(tt->t));
    12d4:	ce 01       	movw	r24, r28
    12d6:	02 96       	adiw	r24, 0x02	; 2
    12d8:	0e 94 af 08 	call	0x115e	; 0x115e <registerTimeout>
				
			}
		}
	
		tt = tt->next;
    12dc:	09 90       	ld	r0, Y+
    12de:	d8 81       	ld	r29, Y
    12e0:	c0 2d       	mov	r28, r0

void checkTimer()
{
	Timer * tt = timerList;
	
	while(tt != NULL)
    12e2:	20 97       	sbiw	r28, 0x00	; 0
    12e4:	19 f7       	brne	.-58     	; 0x12ac <checkTimer+0x12>
			}
		}
	
		tt = tt->next;
	}
}
    12e6:	df 91       	pop	r29
    12e8:	cf 91       	pop	r28
    12ea:	1f 91       	pop	r17
    12ec:	0f 91       	pop	r16
    12ee:	08 95       	ret

000012f0 <registerTimer>:

int registerTimer(Timer * tt)
{
  tt->next = NULL;
    12f0:	fc 01       	movw	r30, r24
    12f2:	10 82       	st	Z, r1
    12f4:	11 82       	std	Z+1, r1	; 0x01

	if(timerList == NULL)
    12f6:	e0 91 4e 25 	lds	r30, 0x254E
    12fa:	f0 91 4f 25 	lds	r31, 0x254F
    12fe:	30 97       	sbiw	r30, 0x00	; 0
    1300:	59 f4       	brne	.+22     	; 0x1318 <registerTimer+0x28>
	{
		timerList = tt;
    1302:	80 93 4e 25 	sts	0x254E, r24
    1306:	90 93 4f 25 	sts	0x254F, r25
    130a:	10 c0       	rjmp	.+32     	; 0x132c <registerTimer+0x3c>
		Timer * cur = timerList;
		
		
		while(cur->next != NULL)
		{
		  assert(tt != cur);
    130c:	8e 17       	cp	r24, r30
    130e:	9f 07       	cpc	r25, r31
    1310:	11 f4       	brne	.+4      	; 0x1316 <registerTimer+0x26>
    1312:	0e 94 d7 17 	call	0x2fae	; 0x2fae <abort>
			cur = cur->next;
    1316:	f9 01       	movw	r30, r18
	else
	{
		Timer * cur = timerList;
		
		
		while(cur->next != NULL)
    1318:	20 81       	ld	r18, Z
    131a:	31 81       	ldd	r19, Z+1	; 0x01
    131c:	21 15       	cp	r18, r1
    131e:	31 05       	cpc	r19, r1
    1320:	a9 f7       	brne	.-22     	; 0x130c <registerTimer+0x1c>
		{
		  assert(tt != cur);
			cur = cur->next;
		}
		assert(tt != cur);
    1322:	8e 17       	cp	r24, r30
    1324:	9f 07       	cpc	r25, r31
    1326:	a9 f3       	breq	.-22     	; 0x1312 <registerTimer+0x22>
		
		cur->next = tt;
    1328:	80 83       	st	Z, r24
    132a:	91 83       	std	Z+1, r25	; 0x01
	}
	
	tt->state = ACTIVE;	
    132c:	21 e0       	ldi	r18, 0x01	; 1
    132e:	fc 01       	movw	r30, r24
    1330:	20 8b       	std	Z+16, r18	; 0x10
	
	return 1;
}
    1332:	81 e0       	ldi	r24, 0x01	; 1
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	08 95       	ret

00001338 <deregisterTimer>:

int deregisterTimer(Timer * tt)
{
	if(timerList == NULL)
    1338:	e0 91 4e 25 	lds	r30, 0x254E
    133c:	f0 91 4f 25 	lds	r31, 0x254F
    1340:	30 97       	sbiw	r30, 0x00	; 0
    1342:	d9 f0       	breq	.+54     	; 0x137a <deregisterTimer+0x42>
    1344:	a0 e0       	ldi	r26, 0x00	; 0
    1346:	b0 e0       	ldi	r27, 0x00	; 0
    1348:	07 c0       	rjmp	.+14     	; 0x1358 <deregisterTimer+0x20>
		Timer * cur = timerList;
	
		while(cur != NULL && cur != tt)
		{
			prev = cur;
			cur = cur->next;
    134a:	20 81       	ld	r18, Z
    134c:	31 81       	ldd	r19, Z+1	; 0x01
    134e:	df 01       	movw	r26, r30
	else
	{
		Timer * prev = NULL;
		Timer * cur = timerList;
	
		while(cur != NULL && cur != tt)
    1350:	21 15       	cp	r18, r1
    1352:	31 05       	cpc	r19, r1
    1354:	91 f0       	breq	.+36     	; 0x137a <deregisterTimer+0x42>
		{
			prev = cur;
			cur = cur->next;
    1356:	f9 01       	movw	r30, r18
	else
	{
		Timer * prev = NULL;
		Timer * cur = timerList;
	
		while(cur != NULL && cur != tt)
    1358:	e8 17       	cp	r30, r24
    135a:	f9 07       	cpc	r31, r25
    135c:	b1 f7       	brne	.-20     	; 0x134a <deregisterTimer+0x12>
    135e:	10 c0       	rjmp	.+32     	; 0x1380 <deregisterTimer+0x48>
		}
		else
		{
			if(prev == NULL)
			{
				timerList = cur->next;
    1360:	80 93 4e 25 	sts	0x254E, r24
    1364:	90 93 4f 25 	sts	0x254F, r25
    1368:	02 c0       	rjmp	.+4      	; 0x136e <deregisterTimer+0x36>
			}
			else
			{
				prev->next = cur->next;
    136a:	8d 93       	st	X+, r24
    136c:	9c 93       	st	X, r25
			}
			cur->next = NULL;
    136e:	10 82       	st	Z, r1
    1370:	11 82       	std	Z+1, r1	; 0x01
			cur->state = INACTIVE;
    1372:	10 8a       	std	Z+16, r1	; 0x10
			
			return 1;
    1374:	21 e0       	ldi	r18, 0x01	; 1
    1376:	30 e0       	ldi	r19, 0x00	; 0
    1378:	08 c0       	rjmp	.+16     	; 0x138a <deregisterTimer+0x52>

int deregisterTimer(Timer * tt)
{
	if(timerList == NULL)
	{
		return 0;
    137a:	20 e0       	ldi	r18, 0x00	; 0
    137c:	30 e0       	ldi	r19, 0x00	; 0
    137e:	05 c0       	rjmp	.+10     	; 0x138a <deregisterTimer+0x52>
    1380:	80 81       	ld	r24, Z
    1382:	91 81       	ldd	r25, Z+1	; 0x01
		{
			return 0;
		}
		else
		{
			if(prev == NULL)
    1384:	10 97       	sbiw	r26, 0x00	; 0
    1386:	89 f7       	brne	.-30     	; 0x136a <deregisterTimer+0x32>
    1388:	eb cf       	rjmp	.-42     	; 0x1360 <deregisterTimer+0x28>
			cur->state = INACTIVE;
			
			return 1;
		}
	}
}
    138a:	c9 01       	movw	r24, r18
    138c:	08 95       	ret

0000138e <clearTimer>:

// attempts to deregister the timer and its timeout from both queues.
// returns the sum of the component deregistrations.
int clearTimer(Timer * tt)
{
    138e:	0f 93       	push	r16
    1390:	1f 93       	push	r17
    1392:	cf 93       	push	r28
    1394:	df 93       	push	r29
    1396:	8c 01       	movw	r16, r24

  int ret = deregisterTimer(tt);
    1398:	0e 94 9c 09 	call	0x1338	; 0x1338 <deregisterTimer>
    139c:	ec 01       	movw	r28, r24


  if(tt != NULL)
    139e:	01 15       	cp	r16, r1
    13a0:	11 05       	cpc	r17, r1
    13a2:	31 f0       	breq	.+12     	; 0x13b0 <clearTimer+0x22>
    {
      ret += deregisterTimeout(&(tt->t));
    13a4:	c8 01       	movw	r24, r16
    13a6:	02 96       	adiw	r24, 0x02	; 2
    13a8:	0e 94 f7 08 	call	0x11ee	; 0x11ee <deregisterTimeout>
    13ac:	c8 0f       	add	r28, r24
    13ae:	d9 1f       	adc	r29, r25
    }

  return ret;
}
    13b0:	ce 01       	movw	r24, r28
    13b2:	df 91       	pop	r29
    13b4:	cf 91       	pop	r28
    13b6:	1f 91       	pop	r17
    13b8:	0f 91       	pop	r16
    13ba:	08 95       	ret

000013bc <initTime>:

void initTime()
{
	timeoutList = NULL;
    13bc:	10 92 50 25 	sts	0x2550, r1
    13c0:	10 92 51 25 	sts	0x2551, r1
	thisTimeout = NULL;
    13c4:	10 92 4c 25 	sts	0x254C, r1
    13c8:	10 92 4d 25 	sts	0x254D, r1
	timerList = NULL;
    13cc:	10 92 4e 25 	sts	0x254E, r1
    13d0:	10 92 4f 25 	sts	0x254F, r1
	
	initHWTime();
    13d4:	0c 94 cb 14 	jmp	0x2996	; 0x2996 <initHWTime>

000013d8 <getMicData>:
threadvar MicData _mic;

MicData getMicData()
{
    return _mic;
}
    13d8:	80 91 52 25 	lds	r24, 0x2552
    13dc:	90 91 53 25 	lds	r25, 0x2553
    13e0:	08 95       	ret

000013e2 <EEPROM_WaitForNVM>:
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    13e2:	80 91 cf 01 	lds	r24, 0x01CF
    13e6:	87 fd       	sbrc	r24, 7
    13e8:	fc cf       	rjmp	.-8      	; 0x13e2 <EEPROM_WaitForNVM>
}
    13ea:	08 95       	ret

000013ec <EEPROM_ReadByte>:
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGESIZE.
 *
 *  \return  Byte value read from EEPROM.
 */
uint8_t EEPROM_ReadByte( uint8_t pageAddr, uint8_t byteAddr )
{
    13ec:	cf 93       	push	r28
    13ee:	df 93       	push	r29
    13f0:	1f 92       	push	r1
    13f2:	1f 92       	push	r1
    13f4:	cd b7       	in	r28, 0x3d	; 61
    13f6:	de b7       	in	r29, 0x3e	; 62
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();
    13f8:	6a 83       	std	Y+2, r22	; 0x02
    13fa:	89 83       	std	Y+1, r24	; 0x01
    13fc:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <EEPROM_WaitForNVM>

	/* Calculate address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE)
	                            |(byteAddr & (EEPROM_PAGESIZE-1));
    1400:	6a 81       	ldd	r22, Y+2	; 0x02
    1402:	6f 71       	andi	r22, 0x1F	; 31
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE)
    1404:	89 81       	ldd	r24, Y+1	; 0x01
    1406:	20 e2       	ldi	r18, 0x20	; 32
    1408:	82 9f       	mul	r24, r18
    140a:	c0 01       	movw	r24, r0
    140c:	11 24       	eor	r1, r1
    140e:	86 2b       	or	r24, r22
	                            |(byteAddr & (EEPROM_PAGESIZE-1));

	/* Set address to read from. */
	NVM.ADDR0 = address & 0xFF;
    1410:	e0 ec       	ldi	r30, 0xC0	; 192
    1412:	f1 e0       	ldi	r31, 0x01	; 1
    1414:	80 83       	st	Z, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    1416:	91 83       	std	Z+1, r25	; 0x01
	NVM.ADDR2 = 0x00;
    1418:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Read command. */
	NVM.CMD = NVM_CMD_READ_EEPROM_gc;
    141a:	86 e0       	ldi	r24, 0x06	; 6
    141c:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    141e:	ef 93       	push	r30
    1420:	ff 93       	push	r31
    1422:	0f 93       	push	r16
    1424:	2f 93       	push	r18
    1426:	eb ec       	ldi	r30, 0xCB	; 203
    1428:	f1 e0       	ldi	r31, 0x01	; 1
    142a:	08 ed       	ldi	r16, 0xD8	; 216
    142c:	21 e0       	ldi	r18, 0x01	; 1
    142e:	04 bf       	out	0x34, r16	; 52
    1430:	20 83       	st	Z, r18
    1432:	2f 91       	pop	r18
    1434:	0f 91       	pop	r16
    1436:	ff 91       	pop	r31
    1438:	ef 91       	pop	r30

	return NVM.DATA0;
    143a:	84 81       	ldd	r24, Z+4	; 0x04
}
    143c:	0f 90       	pop	r0
    143e:	0f 90       	pop	r0
    1440:	df 91       	pop	r29
    1442:	cf 91       	pop	r28
    1444:	08 95       	ret

00001446 <EEPROM_FlushBuffer>:
 *  \note The EEPROM write operations will automatically flush the buffer for you.
 */
void EEPROM_FlushBuffer( void )
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();
    1446:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <EEPROM_WaitForNVM>

	/* Flush EEPROM page buffer if necessary. */
	if ((NVM.STATUS & NVM_EELOAD_bm) != 0) {
    144a:	80 91 cf 01 	lds	r24, 0x01CF
    144e:	81 ff       	sbrs	r24, 1
    1450:	11 c0       	rjmp	.+34     	; 0x1474 <EEPROM_FlushBuffer+0x2e>
		NVM.CMD = NVM_CMD_ERASE_EEPROM_BUFFER_gc;
    1452:	86 e3       	ldi	r24, 0x36	; 54
    1454:	80 93 ca 01 	sts	0x01CA, r24
		NVM_EXEC();
    1458:	ef 93       	push	r30
    145a:	ff 93       	push	r31
    145c:	0f 93       	push	r16
    145e:	2f 93       	push	r18
    1460:	eb ec       	ldi	r30, 0xCB	; 203
    1462:	f1 e0       	ldi	r31, 0x01	; 1
    1464:	08 ed       	ldi	r16, 0xD8	; 216
    1466:	21 e0       	ldi	r18, 0x01	; 1
    1468:	04 bf       	out	0x34, r16	; 52
    146a:	20 83       	st	Z, r18
    146c:	2f 91       	pop	r18
    146e:	0f 91       	pop	r16
    1470:	ff 91       	pop	r31
    1472:	ef 91       	pop	r30
    1474:	08 95       	ret

00001476 <EEPROM_WriteByte>:
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGESIZE.
 *  \param  value     Byte value to write to EEPROM.
 */
void EEPROM_WriteByte( uint8_t pageAddr, uint8_t byteAddr, uint8_t value )
{
    1476:	cf 93       	push	r28
    1478:	df 93       	push	r29
    147a:	00 d0       	rcall	.+0      	; 0x147c <EEPROM_WriteByte+0x6>
    147c:	cd b7       	in	r28, 0x3d	; 61
    147e:	de b7       	in	r29, 0x3e	; 62
	/*  Flush buffer to make sure no unintetional data is written and load
	 *  the "Page Load" command into the command register.
	 */
	EEPROM_FlushBuffer();
    1480:	4b 83       	std	Y+3, r20	; 0x03
    1482:	6a 83       	std	Y+2, r22	; 0x02
    1484:	89 83       	std	Y+1, r24	; 0x01
    1486:	0e 94 23 0a 	call	0x1446	; 0x1446 <EEPROM_FlushBuffer>
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    148a:	e0 ec       	ldi	r30, 0xC0	; 192
    148c:	f1 e0       	ldi	r31, 0x01	; 1
    148e:	93 e3       	ldi	r25, 0x33	; 51
    1490:	92 87       	std	Z+10, r25	; 0x0a

	/* Calculate address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE)
	                            |(byteAddr & (EEPROM_PAGESIZE-1));
    1492:	6a 81       	ldd	r22, Y+2	; 0x02
    1494:	6f 71       	andi	r22, 0x1F	; 31
	 */
	EEPROM_FlushBuffer();
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;

	/* Calculate address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE)
    1496:	89 81       	ldd	r24, Y+1	; 0x01
    1498:	20 e2       	ldi	r18, 0x20	; 32
    149a:	82 9f       	mul	r24, r18
    149c:	c0 01       	movw	r24, r0
    149e:	11 24       	eor	r1, r1
    14a0:	86 2b       	or	r24, r22
	                            |(byteAddr & (EEPROM_PAGESIZE-1));

	/* Set address to write to. */
	NVM.ADDR0 = address & 0xFF;
    14a2:	80 83       	st	Z, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    14a4:	91 83       	std	Z+1, r25	; 0x01
	NVM.ADDR2 = 0x00;
    14a6:	12 82       	std	Z+2, r1	; 0x02

	/* Load data to write, which triggers the loading of EEPROM page buffer. */
	NVM.DATA0 = value;
    14a8:	4b 81       	ldd	r20, Y+3	; 0x03
    14aa:	44 83       	std	Z+4, r20	; 0x04

	/*  Issue EEPROM Atomic Write (Erase&Write) command. Load command, write
	 *  the protection signature and execute command.
	 */
	NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
    14ac:	85 e3       	ldi	r24, 0x35	; 53
    14ae:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    14b0:	ef 93       	push	r30
    14b2:	ff 93       	push	r31
    14b4:	0f 93       	push	r16
    14b6:	2f 93       	push	r18
    14b8:	eb ec       	ldi	r30, 0xCB	; 203
    14ba:	f1 e0       	ldi	r31, 0x01	; 1
    14bc:	08 ed       	ldi	r16, 0xD8	; 216
    14be:	21 e0       	ldi	r18, 0x01	; 1
    14c0:	04 bf       	out	0x34, r16	; 52
    14c2:	20 83       	st	Z, r18
    14c4:	2f 91       	pop	r18
    14c6:	0f 91       	pop	r16
    14c8:	ff 91       	pop	r31
    14ca:	ef 91       	pop	r30
}
    14cc:	23 96       	adiw	r28, 0x03	; 3
    14ce:	cd bf       	out	0x3d, r28	; 61
    14d0:	de bf       	out	0x3e, r29	; 62
    14d2:	df 91       	pop	r29
    14d4:	cf 91       	pop	r28
    14d6:	08 95       	ret

000014d8 <EEPROM_LoadByte>:
 *
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGESIZE.
 *  \param  value     Byte value to write to buffer.
 */
void EEPROM_LoadByte( uint8_t byteAddr, uint8_t value )
{
    14d8:	cf 93       	push	r28
    14da:	df 93       	push	r29
    14dc:	1f 92       	push	r1
    14de:	1f 92       	push	r1
    14e0:	cd b7       	in	r28, 0x3d	; 61
    14e2:	de b7       	in	r29, 0x3e	; 62
	/* Wait until NVM is not busy and prepare NVM command.*/
	EEPROM_WaitForNVM();
    14e4:	6a 83       	std	Y+2, r22	; 0x02
    14e6:	89 83       	std	Y+1, r24	; 0x01
    14e8:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <EEPROM_WaitForNVM>
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    14ec:	e0 ec       	ldi	r30, 0xC0	; 192
    14ee:	f1 e0       	ldi	r31, 0x01	; 1
    14f0:	93 e3       	ldi	r25, 0x33	; 51
    14f2:	92 87       	std	Z+10, r25	; 0x0a

	/* Set address. */
	NVM.ADDR0 = byteAddr & 0xFF;
    14f4:	89 81       	ldd	r24, Y+1	; 0x01
    14f6:	80 83       	st	Z, r24
	NVM.ADDR1 = 0x00;
    14f8:	11 82       	std	Z+1, r1	; 0x01
	NVM.ADDR2 = 0x00;
    14fa:	12 82       	std	Z+2, r1	; 0x02

	/* Set data, which triggers loading of EEPROM page buffer. */
	NVM.DATA0 = value;
    14fc:	6a 81       	ldd	r22, Y+2	; 0x02
    14fe:	64 83       	std	Z+4, r22	; 0x04
}
    1500:	0f 90       	pop	r0
    1502:	0f 90       	pop	r0
    1504:	df 91       	pop	r29
    1506:	cf 91       	pop	r28
    1508:	08 95       	ret

0000150a <EEPROM_LoadPage>:
 *        EEPROM write page operation.
 *
 *  \param  values   Pointer to SRAM buffer containing an entire page.
 */
void EEPROM_LoadPage( const uint8_t * values )
{
    150a:	cf 93       	push	r28
    150c:	df 93       	push	r29
    150e:	ec 01       	movw	r28, r24
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();
    1510:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <EEPROM_WaitForNVM>
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    1514:	83 e3       	ldi	r24, 0x33	; 51
    1516:	80 93 ca 01 	sts	0x01CA, r24

	/*  Set address to zero, as only the lower bits matters. ADDR0 is
	 *  maintained inside the loop below.
	 */
	NVM.ADDR1 = 0x00;
    151a:	10 92 c1 01 	sts	0x01C1, r1
	NVM.ADDR2 = 0x00;
    151e:	10 92 c2 01 	sts	0x01C2, r1

	/* Load multible bytes into page buffer. */
	for (uint8_t i = 0; i < EEPROM_PAGESIZE; ++i) {
    1522:	80 e0       	ldi	r24, 0x00	; 0
		NVM.ADDR0 = i;
    1524:	80 93 c0 01 	sts	0x01C0, r24
		NVM.DATA0 = *values;
    1528:	99 91       	ld	r25, Y+
    152a:	90 93 c4 01 	sts	0x01C4, r25
	 */
	NVM.ADDR1 = 0x00;
	NVM.ADDR2 = 0x00;

	/* Load multible bytes into page buffer. */
	for (uint8_t i = 0; i < EEPROM_PAGESIZE; ++i) {
    152e:	8f 5f       	subi	r24, 0xFF	; 255
    1530:	80 32       	cpi	r24, 0x20	; 32
    1532:	c1 f7       	brne	.-16     	; 0x1524 <EEPROM_LoadPage+0x1a>
		NVM.ADDR0 = i;
		NVM.DATA0 = *values;
		++values;
	}
}
    1534:	df 91       	pop	r29
    1536:	cf 91       	pop	r28
    1538:	08 95       	ret

0000153a <EEPROM_LoadPartialPage>:
 *  \param  values   Pointer to SRAM buffer containing an entire page.
 *			offset   Offset address to begin from (0-EEPROM_PAGESIZE)
 *			length	 Number of values to write into EEPROM
 */
void EEPROM_LoadPartialPage(const uint8_t * values, uint8_t offset, uint8_t length)
{
    153a:	0f 93       	push	r16
    153c:	1f 93       	push	r17
    153e:	cf 93       	push	r28
    1540:	df 93       	push	r29
    1542:	1f 92       	push	r1
    1544:	1f 92       	push	r1
    1546:	cd b7       	in	r28, 0x3d	; 61
    1548:	de b7       	in	r29, 0x3e	; 62
    154a:	8c 01       	movw	r16, r24
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();
    154c:	4a 83       	std	Y+2, r20	; 0x02
    154e:	69 83       	std	Y+1, r22	; 0x01
    1550:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <EEPROM_WaitForNVM>
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    1554:	83 e3       	ldi	r24, 0x33	; 51
    1556:	80 93 ca 01 	sts	0x01CA, r24

	/*  Set address to zero, as only the lower bits matters. ADDR0 is
	 *  maintained inside the loop below.
	 */
	NVM.ADDR1 = 0x00;
    155a:	10 92 c1 01 	sts	0x01C1, r1
	NVM.ADDR2 = 0x00;
    155e:	10 92 c2 01 	sts	0x01C2, r1
 *
 *  \param  values   Pointer to SRAM buffer containing an entire page.
 *			offset   Offset address to begin from (0-EEPROM_PAGESIZE)
 *			length	 Number of values to write into EEPROM
 */
void EEPROM_LoadPartialPage(const uint8_t * values, uint8_t offset, uint8_t length)
    1562:	4a 81       	ldd	r20, Y+2	; 0x02
    1564:	69 81       	ldd	r22, Y+1	; 0x01
    1566:	46 0f       	add	r20, r22
	 */
	NVM.ADDR1 = 0x00;
	NVM.ADDR2 = 0x00;

	/* Load multible bytes into page buffer. */
	for (uint8_t i = offset; length != 0 && i < EEPROM_PAGESIZE; ++i,--length) {
    1568:	08 c0       	rjmp	.+16     	; 0x157a <EEPROM_LoadPartialPage+0x40>
		NVM.ADDR0 = i;
    156a:	60 93 c0 01 	sts	0x01C0, r22
		NVM.DATA0 = *values;
    156e:	f8 01       	movw	r30, r16
    1570:	81 91       	ld	r24, Z+
    1572:	8f 01       	movw	r16, r30
    1574:	80 93 c4 01 	sts	0x01C4, r24
	 */
	NVM.ADDR1 = 0x00;
	NVM.ADDR2 = 0x00;

	/* Load multible bytes into page buffer. */
	for (uint8_t i = offset; length != 0 && i < EEPROM_PAGESIZE; ++i,--length) {
    1578:	6f 5f       	subi	r22, 0xFF	; 255
    157a:	64 17       	cp	r22, r20
    157c:	11 f0       	breq	.+4      	; 0x1582 <EEPROM_LoadPartialPage+0x48>
    157e:	60 32       	cpi	r22, 0x20	; 32
    1580:	a0 f3       	brcs	.-24     	; 0x156a <EEPROM_LoadPartialPage+0x30>
		NVM.ADDR0 = i;
		NVM.DATA0 = *values;
		++values;
	}
}
    1582:	0f 90       	pop	r0
    1584:	0f 90       	pop	r0
    1586:	df 91       	pop	r29
    1588:	cf 91       	pop	r28
    158a:	1f 91       	pop	r17
    158c:	0f 91       	pop	r16
    158e:	08 95       	ret

00001590 <EEPROM_AtomicWritePage>:
 *  locations that have not been loaded will be left untouched in EEPROM.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 */
void EEPROM_AtomicWritePage( uint8_t pageAddr )
{
    1590:	cf 93       	push	r28
    1592:	df 93       	push	r29
    1594:	1f 92       	push	r1
    1596:	cd b7       	in	r28, 0x3d	; 61
    1598:	de b7       	in	r29, 0x3e	; 62
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();
    159a:	89 83       	std	Y+1, r24	; 0x01
    159c:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <EEPROM_WaitForNVM>

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE);
    15a0:	89 81       	ldd	r24, Y+1	; 0x01
    15a2:	20 e2       	ldi	r18, 0x20	; 32
    15a4:	82 9f       	mul	r24, r18
    15a6:	c0 01       	movw	r24, r0
    15a8:	11 24       	eor	r1, r1

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    15aa:	e0 ec       	ldi	r30, 0xC0	; 192
    15ac:	f1 e0       	ldi	r31, 0x01	; 1
    15ae:	80 83       	st	Z, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    15b0:	91 83       	std	Z+1, r25	; 0x01
	NVM.ADDR2 = 0x00;
    15b2:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Atomic Write (Erase&Write) command. */
	NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
    15b4:	85 e3       	ldi	r24, 0x35	; 53
    15b6:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    15b8:	ef 93       	push	r30
    15ba:	ff 93       	push	r31
    15bc:	0f 93       	push	r16
    15be:	2f 93       	push	r18
    15c0:	eb ec       	ldi	r30, 0xCB	; 203
    15c2:	f1 e0       	ldi	r31, 0x01	; 1
    15c4:	08 ed       	ldi	r16, 0xD8	; 216
    15c6:	21 e0       	ldi	r18, 0x01	; 1
    15c8:	04 bf       	out	0x34, r16	; 52
    15ca:	20 83       	st	Z, r18
    15cc:	2f 91       	pop	r18
    15ce:	0f 91       	pop	r16
    15d0:	ff 91       	pop	r31
    15d2:	ef 91       	pop	r30
}
    15d4:	0f 90       	pop	r0
    15d6:	df 91       	pop	r29
    15d8:	cf 91       	pop	r28
    15da:	08 95       	ret

000015dc <EEPROM_ErasePage>:
 *  This function erases one EEPROM page, so that every location reads 0xFF.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 */
void EEPROM_ErasePage( uint8_t pageAddr )
{
    15dc:	cf 93       	push	r28
    15de:	df 93       	push	r29
    15e0:	1f 92       	push	r1
    15e2:	cd b7       	in	r28, 0x3d	; 61
    15e4:	de b7       	in	r29, 0x3e	; 62
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();
    15e6:	89 83       	std	Y+1, r24	; 0x01
    15e8:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <EEPROM_WaitForNVM>

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE);
    15ec:	89 81       	ldd	r24, Y+1	; 0x01
    15ee:	20 e2       	ldi	r18, 0x20	; 32
    15f0:	82 9f       	mul	r24, r18
    15f2:	c0 01       	movw	r24, r0
    15f4:	11 24       	eor	r1, r1

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    15f6:	e0 ec       	ldi	r30, 0xC0	; 192
    15f8:	f1 e0       	ldi	r31, 0x01	; 1
    15fa:	80 83       	st	Z, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    15fc:	91 83       	std	Z+1, r25	; 0x01
	NVM.ADDR2 = 0x00;
    15fe:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Erase command. */
	NVM.CMD = NVM_CMD_ERASE_EEPROM_PAGE_gc;
    1600:	82 e3       	ldi	r24, 0x32	; 50
    1602:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    1604:	ef 93       	push	r30
    1606:	ff 93       	push	r31
    1608:	0f 93       	push	r16
    160a:	2f 93       	push	r18
    160c:	eb ec       	ldi	r30, 0xCB	; 203
    160e:	f1 e0       	ldi	r31, 0x01	; 1
    1610:	08 ed       	ldi	r16, 0xD8	; 216
    1612:	21 e0       	ldi	r18, 0x01	; 1
    1614:	04 bf       	out	0x34, r16	; 52
    1616:	20 83       	st	Z, r18
    1618:	2f 91       	pop	r18
    161a:	0f 91       	pop	r16
    161c:	ff 91       	pop	r31
    161e:	ef 91       	pop	r30
}
    1620:	0f 90       	pop	r0
    1622:	df 91       	pop	r29
    1624:	cf 91       	pop	r28
    1626:	08 95       	ret

00001628 <EEPROM_SplitWritePage>:
 *  before writing.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 */
void EEPROM_SplitWritePage( uint8_t pageAddr )
{
    1628:	cf 93       	push	r28
    162a:	df 93       	push	r29
    162c:	1f 92       	push	r1
    162e:	cd b7       	in	r28, 0x3d	; 61
    1630:	de b7       	in	r29, 0x3e	; 62
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();
    1632:	89 83       	std	Y+1, r24	; 0x01
    1634:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <EEPROM_WaitForNVM>

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE);
    1638:	89 81       	ldd	r24, Y+1	; 0x01
    163a:	20 e2       	ldi	r18, 0x20	; 32
    163c:	82 9f       	mul	r24, r18
    163e:	c0 01       	movw	r24, r0
    1640:	11 24       	eor	r1, r1

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    1642:	e0 ec       	ldi	r30, 0xC0	; 192
    1644:	f1 e0       	ldi	r31, 0x01	; 1
    1646:	80 83       	st	Z, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    1648:	91 83       	std	Z+1, r25	; 0x01
	NVM.ADDR2 = 0x00;
    164a:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Split Write command. */
	NVM.CMD = NVM_CMD_WRITE_EEPROM_PAGE_gc;
    164c:	84 e3       	ldi	r24, 0x34	; 52
    164e:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    1650:	ef 93       	push	r30
    1652:	ff 93       	push	r31
    1654:	0f 93       	push	r16
    1656:	2f 93       	push	r18
    1658:	eb ec       	ldi	r30, 0xCB	; 203
    165a:	f1 e0       	ldi	r31, 0x01	; 1
    165c:	08 ed       	ldi	r16, 0xD8	; 216
    165e:	21 e0       	ldi	r18, 0x01	; 1
    1660:	04 bf       	out	0x34, r16	; 52
    1662:	20 83       	st	Z, r18
    1664:	2f 91       	pop	r18
    1666:	0f 91       	pop	r16
    1668:	ff 91       	pop	r31
    166a:	ef 91       	pop	r30
}
    166c:	0f 90       	pop	r0
    166e:	df 91       	pop	r29
    1670:	cf 91       	pop	r28
    1672:	08 95       	ret

00001674 <EEPROM_EraseAll>:
 *  This function erases the entire EEPROM memory block to 0xFF.
 */
void EEPROM_EraseAll( void )
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();
    1674:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <EEPROM_WaitForNVM>

	/* Issue EEPROM Erase All command. */
	NVM.CMD = NVM_CMD_ERASE_EEPROM_gc;
    1678:	80 e3       	ldi	r24, 0x30	; 48
    167a:	e0 ec       	ldi	r30, 0xC0	; 192
    167c:	f1 e0       	ldi	r31, 0x01	; 1
    167e:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    1680:	ef 93       	push	r30
    1682:	ff 93       	push	r31
    1684:	0f 93       	push	r16
    1686:	2f 93       	push	r18
    1688:	eb ec       	ldi	r30, 0xCB	; 203
    168a:	f1 e0       	ldi	r31, 0x01	; 1
    168c:	08 ed       	ldi	r16, 0xD8	; 216
    168e:	21 e0       	ldi	r18, 0x01	; 1
    1690:	04 bf       	out	0x34, r16	; 52
    1692:	20 83       	st	Z, r18
    1694:	2f 91       	pop	r18
    1696:	0f 91       	pop	r16
    1698:	ff 91       	pop	r31
    169a:	ef 91       	pop	r30
    169c:	08 95       	ret

0000169e <spiTxRx>:
#include "ext_memory.h"
#include <avr/io.h>

uint8_t spiTxRx(uint8_t input)
{
	SPIE.DATA = input;
    169e:	80 93 c3 0a 	sts	0x0AC3, r24
	
	while(!(SPIE.STATUS & SPI_IF_bm));
    16a2:	80 91 c2 0a 	lds	r24, 0x0AC2
    16a6:	87 ff       	sbrs	r24, 7
    16a8:	fc cf       	rjmp	.-8      	; 0x16a2 <spiTxRx+0x4>
	
	return SPIE.DATA;
    16aa:	80 91 c3 0a 	lds	r24, 0x0AC3
	
}
    16ae:	08 95       	ret

000016b0 <setSS>:

void setSS(int which, int level)
{
	if(which == SRAM)
    16b0:	01 97       	sbiw	r24, 0x01	; 1
    16b2:	49 f4       	brne	.+18     	; 0x16c6 <setSS+0x16>
	{
		if(level)
		{
			PORTF.OUTSET = PIN4_bm;
    16b4:	80 e1       	ldi	r24, 0x10	; 16

void setSS(int which, int level)
{
	if(which == SRAM)
	{
		if(level)
    16b6:	67 2b       	or	r22, r23
    16b8:	19 f0       	breq	.+6      	; 0x16c0 <setSS+0x10>
		{
			PORTF.OUTSET = PIN4_bm;
    16ba:	80 93 a5 06 	sts	0x06A5, r24
    16be:	08 95       	ret
		}
		else
		{
			PORTF.OUTCLR = PIN4_bm;	
    16c0:	80 93 a6 06 	sts	0x06A6, r24
    16c4:	08 95       	ret
	}
	else
	{
		if(level)
		{
			PORTE.OUTSET = PIN4_bm;
    16c6:	80 e1       	ldi	r24, 0x10	; 16
			PORTF.OUTCLR = PIN4_bm;	
		}
	}
	else
	{
		if(level)
    16c8:	67 2b       	or	r22, r23
    16ca:	19 f0       	breq	.+6      	; 0x16d2 <setSS+0x22>
		{
			PORTE.OUTSET = PIN4_bm;
    16cc:	80 93 85 06 	sts	0x0685, r24
    16d0:	08 95       	ret
		}
		else
		{
			PORTE.OUTCLR = PIN4_bm;	
    16d2:	80 93 86 06 	sts	0x0686, r24
    16d6:	08 95       	ret

000016d8 <readExtMem>:
	
	}
}

int readExtMem(int which, int start, char * buf, int length)
{
    16d8:	ef 92       	push	r14
    16da:	ff 92       	push	r15
    16dc:	0f 93       	push	r16
    16de:	1f 93       	push	r17
    16e0:	cf 93       	push	r28
    16e2:	df 93       	push	r29
    16e4:	eb 01       	movw	r28, r22
    16e6:	8a 01       	movw	r16, r20
    16e8:	79 01       	movw	r14, r18
	if(which == SRAM)
    16ea:	01 97       	sbiw	r24, 0x01	; 1
    16ec:	f1 f4       	brne	.+60     	; 0x172a <readExtMem+0x52>
		{
			PORTF.OUTSET = PIN4_bm;
		}
		else
		{
			PORTF.OUTCLR = PIN4_bm;	
    16ee:	80 e1       	ldi	r24, 0x10	; 16
    16f0:	80 93 a6 06 	sts	0x06A6, r24
	{
		int i;
		
		setSS(SRAM, 0);
		
		spiTxRx(SRAM_READ);
    16f4:	83 e0       	ldi	r24, 0x03	; 3
    16f6:	0e 94 4f 0b 	call	0x169e	; 0x169e <spiTxRx>
		spiTxRx((start >> 8) & 0x00FF);
    16fa:	8d 2f       	mov	r24, r29
    16fc:	0e 94 4f 0b 	call	0x169e	; 0x169e <spiTxRx>
		spiTxRx(start & 0x00FF);
    1700:	8c 2f       	mov	r24, r28
    1702:	0e 94 4f 0b 	call	0x169e	; 0x169e <spiTxRx>
    1706:	e8 01       	movw	r28, r16
		
		for(i = 0; i < length; ++i)
    1708:	06 c0       	rjmp	.+12     	; 0x1716 <readExtMem+0x3e>
		{
			buf[i] = spiTxRx(0);
    170a:	80 e0       	ldi	r24, 0x00	; 0
    170c:	0e 94 4f 0b 	call	0x169e	; 0x169e <spiTxRx>
    1710:	f8 01       	movw	r30, r16
    1712:	81 93       	st	Z+, r24
    1714:	8f 01       	movw	r16, r30
		}	
	
	}
}

int readExtMem(int which, int start, char * buf, int length)
    1716:	c8 01       	movw	r24, r16
    1718:	8c 1b       	sub	r24, r28
    171a:	9d 0b       	sbc	r25, r29
		
		spiTxRx(SRAM_READ);
		spiTxRx((start >> 8) & 0x00FF);
		spiTxRx(start & 0x00FF);
		
		for(i = 0; i < length; ++i)
    171c:	8e 15       	cp	r24, r14
    171e:	9f 05       	cpc	r25, r15
    1720:	a4 f3       	brlt	.-24     	; 0x170a <readExtMem+0x32>
{
	if(which == SRAM)
	{
		if(level)
		{
			PORTF.OUTSET = PIN4_bm;
    1722:	80 e1       	ldi	r24, 0x10	; 16
    1724:	80 93 a5 06 	sts	0x06A5, r24
    1728:	26 c0       	rjmp	.+76     	; 0x1776 <readExtMem+0x9e>
		{
			PORTE.OUTSET = PIN4_bm;
		}
		else
		{
			PORTE.OUTCLR = PIN4_bm;	
    172a:	80 e1       	ldi	r24, 0x10	; 16
    172c:	80 93 86 06 	sts	0x0686, r24
	{
		int i;
		
		setSS(FLASH, 0);
		
		spiTxRx(FLASH_BF1RD);
    1730:	84 ed       	ldi	r24, 0xD4	; 212
    1732:	0e 94 4f 0b 	call	0x169e	; 0x169e <spiTxRx>
		spiTxRx(0x00);
    1736:	80 e0       	ldi	r24, 0x00	; 0
    1738:	0e 94 4f 0b 	call	0x169e	; 0x169e <spiTxRx>
		spiTxRx((start & 0x0300) >> 8);
    173c:	ce 01       	movw	r24, r28
    173e:	88 27       	eor	r24, r24
    1740:	93 70       	andi	r25, 0x03	; 3
    1742:	89 2f       	mov	r24, r25
    1744:	0e 94 4f 0b 	call	0x169e	; 0x169e <spiTxRx>
		spiTxRx(start & 0x00FF);
    1748:	8c 2f       	mov	r24, r28
    174a:	0e 94 4f 0b 	call	0x169e	; 0x169e <spiTxRx>
		spiTxRx(0x00);
    174e:	80 e0       	ldi	r24, 0x00	; 0
    1750:	0e 94 4f 0b 	call	0x169e	; 0x169e <spiTxRx>
    1754:	e8 01       	movw	r28, r16
		
		for(i = 0; i < length; ++i)
    1756:	06 c0       	rjmp	.+12     	; 0x1764 <readExtMem+0x8c>
		{
			buf[i] = spiTxRx(0);
    1758:	80 e0       	ldi	r24, 0x00	; 0
    175a:	0e 94 4f 0b 	call	0x169e	; 0x169e <spiTxRx>
    175e:	f8 01       	movw	r30, r16
    1760:	81 93       	st	Z+, r24
    1762:	8f 01       	movw	r16, r30
		}	
	
	}
}

int readExtMem(int which, int start, char * buf, int length)
    1764:	c8 01       	movw	r24, r16
    1766:	8c 1b       	sub	r24, r28
    1768:	9d 0b       	sbc	r25, r29
		spiTxRx(0x00);
		spiTxRx((start & 0x0300) >> 8);
		spiTxRx(start & 0x00FF);
		spiTxRx(0x00);
		
		for(i = 0; i < length; ++i)
    176a:	8e 15       	cp	r24, r14
    176c:	9f 05       	cpc	r25, r15
    176e:	a4 f3       	brlt	.-24     	; 0x1758 <readExtMem+0x80>
	}
	else
	{
		if(level)
		{
			PORTE.OUTSET = PIN4_bm;
    1770:	80 e1       	ldi	r24, 0x10	; 16
    1772:	80 93 85 06 	sts	0x0685, r24
		
		setSS(FLASH, 1);	
		
		return 1;
	}
}
    1776:	81 e0       	ldi	r24, 0x01	; 1
    1778:	90 e0       	ldi	r25, 0x00	; 0
    177a:	df 91       	pop	r29
    177c:	cf 91       	pop	r28
    177e:	1f 91       	pop	r17
    1780:	0f 91       	pop	r16
    1782:	ff 90       	pop	r15
    1784:	ef 90       	pop	r14
    1786:	08 95       	ret

00001788 <writeExtMem>:

int writeExtMem(int which, int start, char * buf, int length)
{
    1788:	ef 92       	push	r14
    178a:	ff 92       	push	r15
    178c:	0f 93       	push	r16
    178e:	1f 93       	push	r17
    1790:	cf 93       	push	r28
    1792:	df 93       	push	r29
    1794:	eb 01       	movw	r28, r22
    1796:	8a 01       	movw	r16, r20
    1798:	79 01       	movw	r14, r18
	if(which == SRAM)
    179a:	01 97       	sbiw	r24, 0x01	; 1
    179c:	e9 f4       	brne	.+58     	; 0x17d8 <writeExtMem+0x50>
		{
			PORTF.OUTSET = PIN4_bm;
		}
		else
		{
			PORTF.OUTCLR = PIN4_bm;	
    179e:	80 e1       	ldi	r24, 0x10	; 16
    17a0:	80 93 a6 06 	sts	0x06A6, r24
	{
		int i;
		
		setSS(SRAM, 0);
		
		spiTxRx(SRAM_WRITE);
    17a4:	82 e0       	ldi	r24, 0x02	; 2
    17a6:	0e 94 4f 0b 	call	0x169e	; 0x169e <spiTxRx>
		spiTxRx((start >> 8) & 0x00FF);
    17aa:	8d 2f       	mov	r24, r29
    17ac:	0e 94 4f 0b 	call	0x169e	; 0x169e <spiTxRx>
		spiTxRx(start & 0x00FF);
    17b0:	8c 2f       	mov	r24, r28
    17b2:	0e 94 4f 0b 	call	0x169e	; 0x169e <spiTxRx>
    17b6:	e8 01       	movw	r28, r16
		
		for(i = 0; i < length; ++i)
    17b8:	05 c0       	rjmp	.+10     	; 0x17c4 <writeExtMem+0x3c>
		{
			spiTxRx(buf[i]);
    17ba:	f8 01       	movw	r30, r16
    17bc:	81 91       	ld	r24, Z+
    17be:	8f 01       	movw	r16, r30
    17c0:	0e 94 4f 0b 	call	0x169e	; 0x169e <spiTxRx>
		
		return 1;
	}
}

int writeExtMem(int which, int start, char * buf, int length)
    17c4:	c8 01       	movw	r24, r16
    17c6:	8c 1b       	sub	r24, r28
    17c8:	9d 0b       	sbc	r25, r29
		
		spiTxRx(SRAM_WRITE);
		spiTxRx((start >> 8) & 0x00FF);
		spiTxRx(start & 0x00FF);
		
		for(i = 0; i < length; ++i)
    17ca:	8e 15       	cp	r24, r14
    17cc:	9f 05       	cpc	r25, r15
    17ce:	ac f3       	brlt	.-22     	; 0x17ba <writeExtMem+0x32>
{
	if(which == SRAM)
	{
		if(level)
		{
			PORTF.OUTSET = PIN4_bm;
    17d0:	80 e1       	ldi	r24, 0x10	; 16
    17d2:	80 93 a5 06 	sts	0x06A5, r24
    17d6:	22 c0       	rjmp	.+68     	; 0x181c <writeExtMem+0x94>
		{
			PORTE.OUTSET = PIN4_bm;
		}
		else
		{
			PORTE.OUTCLR = PIN4_bm;	
    17d8:	80 e1       	ldi	r24, 0x10	; 16
    17da:	80 93 86 06 	sts	0x0686, r24
	{
		int i;
		
		setSS(FLASH, 0);
		
		spiTxRx(FLASH_BF1WR);
    17de:	84 e8       	ldi	r24, 0x84	; 132
    17e0:	0e 94 4f 0b 	call	0x169e	; 0x169e <spiTxRx>
		spiTxRx(0x00);
    17e4:	80 e0       	ldi	r24, 0x00	; 0
    17e6:	0e 94 4f 0b 	call	0x169e	; 0x169e <spiTxRx>
		spiTxRx((start & 0x0300) >> 8);
    17ea:	ce 01       	movw	r24, r28
    17ec:	88 27       	eor	r24, r24
    17ee:	93 70       	andi	r25, 0x03	; 3
    17f0:	89 2f       	mov	r24, r25
    17f2:	0e 94 4f 0b 	call	0x169e	; 0x169e <spiTxRx>
		spiTxRx(start & 0x00FF);
    17f6:	8c 2f       	mov	r24, r28
    17f8:	0e 94 4f 0b 	call	0x169e	; 0x169e <spiTxRx>
    17fc:	e8 01       	movw	r28, r16
		
		for(i = 0; i < length; ++i)
    17fe:	05 c0       	rjmp	.+10     	; 0x180a <writeExtMem+0x82>
		{
			spiTxRx(buf[i]);
    1800:	f8 01       	movw	r30, r16
    1802:	81 91       	ld	r24, Z+
    1804:	8f 01       	movw	r16, r30
    1806:	0e 94 4f 0b 	call	0x169e	; 0x169e <spiTxRx>
		
		return 1;
	}
}

int writeExtMem(int which, int start, char * buf, int length)
    180a:	c8 01       	movw	r24, r16
    180c:	8c 1b       	sub	r24, r28
    180e:	9d 0b       	sbc	r25, r29
		spiTxRx(FLASH_BF1WR);
		spiTxRx(0x00);
		spiTxRx((start & 0x0300) >> 8);
		spiTxRx(start & 0x00FF);
		
		for(i = 0; i < length; ++i)
    1810:	8e 15       	cp	r24, r14
    1812:	9f 05       	cpc	r25, r15
    1814:	ac f3       	brlt	.-22     	; 0x1800 <writeExtMem+0x78>
	}
	else
	{
		if(level)
		{
			PORTE.OUTSET = PIN4_bm;
    1816:	80 e1       	ldi	r24, 0x10	; 16
    1818:	80 93 85 06 	sts	0x0685, r24
		
		return 1;
	}


}
    181c:	81 e0       	ldi	r24, 0x01	; 1
    181e:	90 e0       	ldi	r25, 0x00	; 0
    1820:	df 91       	pop	r29
    1822:	cf 91       	pop	r28
    1824:	1f 91       	pop	r17
    1826:	0f 91       	pop	r16
    1828:	ff 90       	pop	r15
    182a:	ef 90       	pop	r14
    182c:	08 95       	ret

0000182e <initFlash>:



void initFlash()
{
    182e:	08 95       	ret

00001830 <initSRAM>:

}

void initSRAM()
{
    1830:	1f 93       	push	r17
    1832:	cf 93       	push	r28
    1834:	df 93       	push	r29
		{
			PORTF.OUTSET = PIN4_bm;
		}
		else
		{
			PORTF.OUTCLR = PIN4_bm;	
    1836:	c0 ea       	ldi	r28, 0xA0	; 160
    1838:	d6 e0       	ldi	r29, 0x06	; 6
    183a:	10 e1       	ldi	r17, 0x10	; 16
    183c:	1e 83       	std	Y+6, r17	; 0x06

void initSRAM()
{
		setSS(SRAM, 0);
		
		spiTxRx(SRAM_WRSR);
    183e:	81 e0       	ldi	r24, 0x01	; 1
    1840:	0e 94 4f 0b 	call	0x169e	; 0x169e <spiTxRx>
		spiTxRx(0x41);	// set mode to sequential, disable HOLD feature
    1844:	81 e4       	ldi	r24, 0x41	; 65
    1846:	0e 94 4f 0b 	call	0x169e	; 0x169e <spiTxRx>
{
	if(which == SRAM)
	{
		if(level)
		{
			PORTF.OUTSET = PIN4_bm;
    184a:	1d 83       	std	Y+5, r17	; 0x05
		}
		else
		{
			PORTF.OUTCLR = PIN4_bm;	
    184c:	1e 83       	std	Y+6, r17	; 0x06
	
	{
		uint8_t val;
		setSS(SRAM, 0);
		
		spiTxRx(SRAM_RDSR);
    184e:	85 e0       	ldi	r24, 0x05	; 5
    1850:	0e 94 4f 0b 	call	0x169e	; 0x169e <spiTxRx>
		val = spiTxRx(0x0);	// set mode to sequential, disable HOLD feature
    1854:	80 e0       	ldi	r24, 0x00	; 0
    1856:	0e 94 4f 0b 	call	0x169e	; 0x169e <spiTxRx>
{
	if(which == SRAM)
	{
		if(level)
		{
			PORTF.OUTSET = PIN4_bm;
    185a:	1d 83       	std	Y+5, r17	; 0x05
		spiTxRx(SRAM_RDSR);
		val = spiTxRx(0x0);	// set mode to sequential, disable HOLD feature
		
		setSS(SRAM, 1);			
		
		printf("SR is: %x\r\n",val);
    185c:	1f 92       	push	r1
    185e:	8f 93       	push	r24
    1860:	8c e1       	ldi	r24, 0x1C	; 28
    1862:	90 e2       	ldi	r25, 0x20	; 32
    1864:	9f 93       	push	r25
    1866:	8f 93       	push	r24
    1868:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <printf>
    186c:	0f 90       	pop	r0
    186e:	0f 90       	pop	r0
    1870:	0f 90       	pop	r0
    1872:	0f 90       	pop	r0
	}
}
    1874:	df 91       	pop	r29
    1876:	cf 91       	pop	r28
    1878:	1f 91       	pop	r17
    187a:	08 95       	ret

0000187c <initExtMem>:

void initExtMem()
{
	PORTE.OUTSET = PIN4_bm;
    187c:	e0 e8       	ldi	r30, 0x80	; 128
    187e:	f6 e0       	ldi	r31, 0x06	; 6
    1880:	80 e1       	ldi	r24, 0x10	; 16
    1882:	85 83       	std	Z+5, r24	; 0x05
	PORTE.DIRSET = PIN4_bm;
    1884:	81 83       	std	Z+1, r24	; 0x01

	// set !SS1 lhigh
	PORTF.OUTSET = PIN4_bm;
    1886:	a0 ea       	ldi	r26, 0xA0	; 160
    1888:	b6 e0       	ldi	r27, 0x06	; 6
    188a:	15 96       	adiw	r26, 0x05	; 5
    188c:	8c 93       	st	X, r24
    188e:	15 97       	sbiw	r26, 0x05	; 5
	PORTF.DIRSET = PIN4_bm;
    1890:	11 96       	adiw	r26, 0x01	; 1
    1892:	8c 93       	st	X, r24


	PORTE.DIRSET = PIN5_bm | PIN7_bm;	// !ss/mosi/sck as output
    1894:	80 ea       	ldi	r24, 0xA0	; 160
    1896:	81 83       	std	Z+1, r24	; 0x01
	PORTE.DIRCLR = PIN6_bm;				// miso as input
    1898:	80 e4       	ldi	r24, 0x40	; 64
    189a:	82 83       	std	Z+2, r24	; 0x02

	SPIE.CTRL = SPI_ENABLE_bm | SPI_MASTER_bm;	//mode 0, clock/4
    189c:	80 e5       	ldi	r24, 0x50	; 80
    189e:	80 93 c0 0a 	sts	0x0AC0, r24

	initFlash();
	initSRAM();
    18a2:	0c 94 18 0c 	jmp	0x1830	; 0x1830 <initSRAM>

000018a6 <newHWAccelData>:
TWI_Master_t twiMaster;
extern AccelData _acc;

int newHWAccelData()
{
	return (twiMaster.result == TWIM_RESULT_OK && twiMaster.status == TWIM_STATUS_READY);
    18a6:	80 91 64 25 	lds	r24, 0x2564
    18aa:	81 30       	cpi	r24, 0x01	; 1
    18ac:	31 f4       	brne	.+12     	; 0x18ba <newHWAccelData+0x14>
    18ae:	80 91 63 25 	lds	r24, 0x2563
    18b2:	21 e0       	ldi	r18, 0x01	; 1
    18b4:	30 e0       	ldi	r19, 0x00	; 0
    18b6:	88 23       	and	r24, r24
    18b8:	11 f0       	breq	.+4      	; 0x18be <newHWAccelData+0x18>
    18ba:	20 e0       	ldi	r18, 0x00	; 0
    18bc:	30 e0       	ldi	r19, 0x00	; 0
}
    18be:	c9 01       	movw	r24, r18
    18c0:	08 95       	ret

000018c2 <updateHWAccel>:

// this is currently non-blocking.
void updateHWAccel()
{
    18c2:	cf 93       	push	r28
	if(twiMaster.result == TWIM_RESULT_OK && twiMaster.status == TWIM_STATUS_READY)
    18c4:	80 91 64 25 	lds	r24, 0x2564
    18c8:	81 30       	cpi	r24, 0x01	; 1
    18ca:	09 f0       	breq	.+2      	; 0x18ce <updateHWAccel+0xc>
    18cc:	4b c0       	rjmp	.+150    	; 0x1964 <updateHWAccel+0xa2>
    18ce:	80 91 63 25 	lds	r24, 0x2563
    18d2:	81 11       	cpse	r24, r1
    18d4:	47 c0       	rjmp	.+142    	; 0x1964 <updateHWAccel+0xa2>
	{ 
		byte oldstatus = _acc.status & ACC_O_MASK;
    18d6:	c0 91 31 20 	lds	r28, 0x2031
		
		// I2C reads in as unsigned - we need to convert back to 2s complement (+- 32)
		_acc.x = (Angle)(twiMaster.readData[0] << 2) >> 2;
    18da:	80 91 5b 25 	lds	r24, 0x255B
    18de:	24 e0       	ldi	r18, 0x04	; 4
    18e0:	82 9f       	mul	r24, r18
    18e2:	c0 01       	movw	r24, r0
    18e4:	11 24       	eor	r1, r1
    18e6:	85 95       	asr	r24
    18e8:	85 95       	asr	r24
    18ea:	80 93 2e 20 	sts	0x202E, r24
		_acc.y = (Angle)(twiMaster.readData[1] << 2) >> 2;
    18ee:	80 91 5c 25 	lds	r24, 0x255C
    18f2:	24 e0       	ldi	r18, 0x04	; 4
    18f4:	82 9f       	mul	r24, r18
    18f6:	c0 01       	movw	r24, r0
    18f8:	11 24       	eor	r1, r1
    18fa:	85 95       	asr	r24
    18fc:	85 95       	asr	r24
    18fe:	80 93 2f 20 	sts	0x202F, r24
		_acc.z = (Angle)(twiMaster.readData[2] << 2) >> 2;
    1902:	80 91 5d 25 	lds	r24, 0x255D
    1906:	24 e0       	ldi	r18, 0x04	; 4
    1908:	82 9f       	mul	r24, r18
    190a:	c0 01       	movw	r24, r0
    190c:	11 24       	eor	r1, r1
    190e:	85 95       	asr	r24
    1910:	85 95       	asr	r24
    1912:	80 93 30 20 	sts	0x2030, r24
		_acc.status = twiMaster.readData[3];
    1916:	80 91 5e 25 	lds	r24, 0x255E
    191a:	80 93 31 20 	sts	0x2031, r24
		
		twiMaster.result = TWIM_RESULT_UNKNOWN;
    191e:	10 92 64 25 	sts	0x2564, r1
		
		// if superceding event isn't registered, register sub-events, if necessary
		if(!triggerHandler(EVENT_ACCEL_CHANGE))
    1922:	8b e0       	ldi	r24, 0x0B	; 11
    1924:	0e 94 6d 06 	call	0xcda	; 0xcda <triggerHandler>
    1928:	89 2b       	or	r24, r25
    192a:	e1 f4       	brne	.+56     	; 0x1964 <updateHWAccel+0xa2>
		{
			if(_acc.status & ACC_TAP)
    192c:	80 91 31 20 	lds	r24, 0x2031
    1930:	85 ff       	sbrs	r24, 5
    1932:	03 c0       	rjmp	.+6      	; 0x193a <updateHWAccel+0x78>
			{
				triggerHandler(EVENT_ACCEL_TAP);
    1934:	8c e0       	ldi	r24, 0x0C	; 12
    1936:	0e 94 6d 06 	call	0xcda	; 0xcda <triggerHandler>
			}	
			if(_acc.status & ACC_SHAKE)
    193a:	80 91 31 20 	lds	r24, 0x2031
    193e:	87 ff       	sbrs	r24, 7
    1940:	03 c0       	rjmp	.+6      	; 0x1948 <updateHWAccel+0x86>
			{
				triggerHandler(EVENT_ACCEL_SHAKE);
    1942:	8d e0       	ldi	r24, 0x0D	; 13
    1944:	0e 94 6d 06 	call	0xcda	; 0xcda <triggerHandler>
// this is currently non-blocking.
void updateHWAccel()
{
	if(twiMaster.result == TWIM_RESULT_OK && twiMaster.status == TWIM_STATUS_READY)
	{ 
		byte oldstatus = _acc.status & ACC_O_MASK;
    1948:	cf 71       	andi	r28, 0x1F	; 31
			}	
			if(_acc.status & ACC_SHAKE)
			{
				triggerHandler(EVENT_ACCEL_SHAKE);
			}	
			if(oldstatus != (_acc.status & ACC_O_MASK))
    194a:	2c 2f       	mov	r18, r28
    194c:	30 e0       	ldi	r19, 0x00	; 0
    194e:	80 91 31 20 	lds	r24, 0x2031
    1952:	8f 71       	andi	r24, 0x1F	; 31
    1954:	90 e0       	ldi	r25, 0x00	; 0
    1956:	28 17       	cp	r18, r24
    1958:	39 07       	cpc	r19, r25
    195a:	21 f0       	breq	.+8      	; 0x1964 <updateHWAccel+0xa2>
			{
				triggerHandler(EVENT_ACCEL_TAP);
    195c:	8c e0       	ldi	r24, 0x0C	; 12
			}			
		}
	}
}
    195e:	cf 91       	pop	r28
			{
				triggerHandler(EVENT_ACCEL_SHAKE);
			}	
			if(oldstatus != (_acc.status & ACC_O_MASK))
			{
				triggerHandler(EVENT_ACCEL_TAP);
    1960:	0c 94 6d 06 	jmp	0xcda	; 0xcda <triggerHandler>
			}			
		}
	}
}
    1964:	cf 91       	pop	r28
    1966:	08 95       	ret

00001968 <initHWAccel>:

// Doesn't *really* need to be blocking, just checked for success
// TODO: should block? yes no?
void initHWAccel()
{
    1968:	0f 93       	push	r16
    196a:	cf 93       	push	r28
    196c:	df 93       	push	r29
    196e:	1f 92       	push	r1
    1970:	1f 92       	push	r1
    1972:	cd b7       	in	r28, 0x3d	; 61
    1974:	de b7       	in	r29, 0x3e	; 62
	/* Initialize TWI master. */
	TWI_MasterInit(&twiMaster,
    1976:	2b e9       	ldi	r18, 0x9B	; 155
    1978:	40 e4       	ldi	r20, 0x40	; 64
    197a:	60 ea       	ldi	r22, 0xA0	; 160
    197c:	74 e0       	ldi	r23, 0x04	; 4
    197e:	84 e5       	ldi	r24, 0x54	; 84
    1980:	95 e2       	ldi	r25, 0x25	; 37
    1982:	0e 94 9c 16 	call	0x2d38	; 0x2d38 <TWI_MasterInit>

	// prepare configuration data for the accelerometer
	byte buf[2];

	// set mode to STANDBY if it isn't already (can't update registers in ACTIVE mode!)
	buf[0] = 0x07;
    1986:	87 e0       	ldi	r24, 0x07	; 7
    1988:	89 83       	std	Y+1, r24	; 0x01
	buf[1] = 0x18;
    198a:	88 e1       	ldi	r24, 0x18	; 24
    198c:	8a 83       	std	Y+2, r24	; 0x02
	TWI_MasterWriteRead(&twiMaster, ACCEL_I2C_ADDR, buf, 2, 0);
    198e:	00 e0       	ldi	r16, 0x00	; 0
    1990:	22 e0       	ldi	r18, 0x02	; 2
    1992:	ae 01       	movw	r20, r28
    1994:	4f 5f       	subi	r20, 0xFF	; 255
    1996:	5f 4f       	sbci	r21, 0xFF	; 255
    1998:	6c e4       	ldi	r22, 0x4C	; 76
    199a:	84 e5       	ldi	r24, 0x54	; 84
    199c:	95 e2       	ldi	r25, 0x25	; 37
    199e:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <TWI_MasterWriteRead>
	while (twiMaster.status != TWIM_STATUS_READY);
    19a2:	80 91 63 25 	lds	r24, 0x2563
    19a6:	81 11       	cpse	r24, r1
    19a8:	fc cf       	rjmp	.-8      	; 0x19a2 <initHWAccel+0x3a>

	// set sleep mode
	buf[0] = 0x05;
    19aa:	85 e0       	ldi	r24, 0x05	; 5
    19ac:	89 83       	std	Y+1, r24	; 0x01
	buf[1] = 0x00;	// no sleep
    19ae:	1a 82       	std	Y+2, r1	; 0x02
	TWI_MasterWriteRead(&twiMaster, ACCEL_I2C_ADDR, buf, 2, 0);
    19b0:	00 e0       	ldi	r16, 0x00	; 0
    19b2:	22 e0       	ldi	r18, 0x02	; 2
    19b4:	ae 01       	movw	r20, r28
    19b6:	4f 5f       	subi	r20, 0xFF	; 255
    19b8:	5f 4f       	sbci	r21, 0xFF	; 255
    19ba:	6c e4       	ldi	r22, 0x4C	; 76
    19bc:	84 e5       	ldi	r24, 0x54	; 84
    19be:	95 e2       	ldi	r25, 0x25	; 37
    19c0:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <TWI_MasterWriteRead>
	while (twiMaster.status != TWIM_STATUS_READY);
    19c4:	80 91 63 25 	lds	r24, 0x2563
    19c8:	81 11       	cpse	r24, r1
    19ca:	fc cf       	rjmp	.-8      	; 0x19c4 <initHWAccel+0x5c>

	// set interrupts
	buf[0] = 0x06;
    19cc:	86 e0       	ldi	r24, 0x06	; 6
    19ce:	89 83       	std	Y+1, r24	; 0x01
	buf[1] = 0x07;	// 0x06 Interrupt Setup Register -> PDINT | PLINT | FBINT
    19d0:	87 e0       	ldi	r24, 0x07	; 7
    19d2:	8a 83       	std	Y+2, r24	; 0x02
	TWI_MasterWriteRead(&twiMaster, ACCEL_I2C_ADDR, buf, 2, 0);
    19d4:	00 e0       	ldi	r16, 0x00	; 0
    19d6:	22 e0       	ldi	r18, 0x02	; 2
    19d8:	ae 01       	movw	r20, r28
    19da:	4f 5f       	subi	r20, 0xFF	; 255
    19dc:	5f 4f       	sbci	r21, 0xFF	; 255
    19de:	6c e4       	ldi	r22, 0x4C	; 76
    19e0:	84 e5       	ldi	r24, 0x54	; 84
    19e2:	95 e2       	ldi	r25, 0x25	; 37
    19e4:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <TWI_MasterWriteRead>
	while (twiMaster.status != TWIM_STATUS_READY);
    19e8:	80 91 63 25 	lds	r24, 0x2563
    19ec:	81 11       	cpse	r24, r1
    19ee:	fc cf       	rjmp	.-8      	; 0x19e8 <initHWAccel+0x80>

	// set filter rate
	buf[0] = 0x08;
    19f0:	88 e0       	ldi	r24, 0x08	; 8
    19f2:	89 83       	std	Y+1, r24	; 0x01
	buf[1] = 0xE0;	// 0x08 Sample Register -> Fil[0:2]
    19f4:	80 ee       	ldi	r24, 0xE0	; 224
    19f6:	8a 83       	std	Y+2, r24	; 0x02
	TWI_MasterWriteRead(&twiMaster, ACCEL_I2C_ADDR, buf, 2, 0);
    19f8:	00 e0       	ldi	r16, 0x00	; 0
    19fa:	22 e0       	ldi	r18, 0x02	; 2
    19fc:	ae 01       	movw	r20, r28
    19fe:	4f 5f       	subi	r20, 0xFF	; 255
    1a00:	5f 4f       	sbci	r21, 0xFF	; 255
    1a02:	6c e4       	ldi	r22, 0x4C	; 76
    1a04:	84 e5       	ldi	r24, 0x54	; 84
    1a06:	95 e2       	ldi	r25, 0x25	; 37
    1a08:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <TWI_MasterWriteRead>
	while (twiMaster.status != TWIM_STATUS_READY);
    1a0c:	80 91 63 25 	lds	r24, 0x2563
    1a10:	81 11       	cpse	r24, r1
    1a12:	fc cf       	rjmp	.-8      	; 0x1a0c <initHWAccel+0xa4>
	
	// set tap detection
	buf[0] = 0x09;
    1a14:	89 e0       	ldi	r24, 0x09	; 9
    1a16:	89 83       	std	Y+1, r24	; 0x01
	buf[1] = 0x10;	// 0x09	Pulse detection -> +- 4 counts
    1a18:	80 e1       	ldi	r24, 0x10	; 16
    1a1a:	8a 83       	std	Y+2, r24	; 0x02
	TWI_MasterWriteRead(&twiMaster, ACCEL_I2C_ADDR, buf, 2, 0);
    1a1c:	00 e0       	ldi	r16, 0x00	; 0
    1a1e:	22 e0       	ldi	r18, 0x02	; 2
    1a20:	ae 01       	movw	r20, r28
    1a22:	4f 5f       	subi	r20, 0xFF	; 255
    1a24:	5f 4f       	sbci	r21, 0xFF	; 255
    1a26:	6c e4       	ldi	r22, 0x4C	; 76
    1a28:	84 e5       	ldi	r24, 0x54	; 84
    1a2a:	95 e2       	ldi	r25, 0x25	; 37
    1a2c:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <TWI_MasterWriteRead>
	while (twiMaster.status != TWIM_STATUS_READY);
    1a30:	80 91 63 25 	lds	r24, 0x2563
    1a34:	81 11       	cpse	r24, r1
    1a36:	fc cf       	rjmp	.-8      	; 0x1a30 <initHWAccel+0xc8>

	// set tap debounce
	buf[0] = 0x0A;
    1a38:	8a e0       	ldi	r24, 0x0A	; 10
    1a3a:	89 83       	std	Y+1, r24	; 0x01
	buf[1] = 0x10;	// 0x0A Tap debounce ->	4 detections
    1a3c:	80 e1       	ldi	r24, 0x10	; 16
    1a3e:	8a 83       	std	Y+2, r24	; 0x02
	TWI_MasterWriteRead(&twiMaster, ACCEL_I2C_ADDR, buf, 2, 0);
    1a40:	00 e0       	ldi	r16, 0x00	; 0
    1a42:	22 e0       	ldi	r18, 0x02	; 2
    1a44:	ae 01       	movw	r20, r28
    1a46:	4f 5f       	subi	r20, 0xFF	; 255
    1a48:	5f 4f       	sbci	r21, 0xFF	; 255
    1a4a:	6c e4       	ldi	r22, 0x4C	; 76
    1a4c:	84 e5       	ldi	r24, 0x54	; 84
    1a4e:	95 e2       	ldi	r25, 0x25	; 37
    1a50:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <TWI_MasterWriteRead>
	while (twiMaster.status != TWIM_STATUS_READY);	
    1a54:	80 91 63 25 	lds	r24, 0x2563
    1a58:	81 11       	cpse	r24, r1
    1a5a:	fc cf       	rjmp	.-8      	; 0x1a54 <initHWAccel+0xec>
	
	// enable the accelerometer
	buf[0] = 0x07;
    1a5c:	87 e0       	ldi	r24, 0x07	; 7
    1a5e:	89 83       	std	Y+1, r24	; 0x01
	buf[1] = 0x19;
    1a60:	89 e1       	ldi	r24, 0x19	; 25
    1a62:	8a 83       	std	Y+2, r24	; 0x02
	TWI_MasterWriteRead(&twiMaster, ACCEL_I2C_ADDR, buf, 2, 0);
    1a64:	00 e0       	ldi	r16, 0x00	; 0
    1a66:	22 e0       	ldi	r18, 0x02	; 2
    1a68:	ae 01       	movw	r20, r28
    1a6a:	4f 5f       	subi	r20, 0xFF	; 255
    1a6c:	5f 4f       	sbci	r21, 0xFF	; 255
    1a6e:	6c e4       	ldi	r22, 0x4C	; 76
    1a70:	84 e5       	ldi	r24, 0x54	; 84
    1a72:	95 e2       	ldi	r25, 0x25	; 37
    1a74:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <TWI_MasterWriteRead>
	while (twiMaster.status != TWIM_STATUS_READY);
    1a78:	80 91 63 25 	lds	r24, 0x2563
    1a7c:	81 11       	cpse	r24, r1
    1a7e:	fc cf       	rjmp	.-8      	; 0x1a78 <initHWAccel+0x110>
	
	// set up input/interrupt to detect acceleromter IRQs
	PORTB.DIRCLR = PIN0_bm;					// set Pin0 as input
    1a80:	81 e0       	ldi	r24, 0x01	; 1
    1a82:	80 93 22 06 	sts	0x0622, r24
	PORTB.PIN0CTRL = PORT_OPC_PULLUP_gc | PORT_ISC_FALLING_gc;	// set pullup, trigger interrupt on falling edge
    1a86:	9a e1       	ldi	r25, 0x1A	; 26
    1a88:	90 93 30 06 	sts	0x0630, r25
	PORTB.INT0MASK = PIN0_bm;				// enable PIN0 to trigger INT0
    1a8c:	80 93 2a 06 	sts	0x062A, r24
	PORTB.INTCTRL = PORT_INT0LVL_LO_gc;		// enable INT0 interrupt on LOW priority
    1a90:	80 93 29 06 	sts	0x0629, r24
}
    1a94:	0f 90       	pop	r0
    1a96:	0f 90       	pop	r0
    1a98:	df 91       	pop	r29
    1a9a:	cf 91       	pop	r28
    1a9c:	0f 91       	pop	r16
    1a9e:	08 95       	ret

00001aa0 <__vector_34>:

// Acceleromter status change detection interrupt
ISR(PORTB_INT0_vect)
{
    1aa0:	1f 92       	push	r1
    1aa2:	0f 92       	push	r0
    1aa4:	0f b6       	in	r0, 0x3f	; 63
    1aa6:	0f 92       	push	r0
    1aa8:	11 24       	eor	r1, r1
    1aaa:	0b b6       	in	r0, 0x3b	; 59
    1aac:	0f 92       	push	r0
    1aae:	0f 93       	push	r16
    1ab0:	2f 93       	push	r18
    1ab2:	3f 93       	push	r19
    1ab4:	4f 93       	push	r20
    1ab6:	5f 93       	push	r21
    1ab8:	6f 93       	push	r22
    1aba:	7f 93       	push	r23
    1abc:	8f 93       	push	r24
    1abe:	9f 93       	push	r25
    1ac0:	af 93       	push	r26
    1ac2:	bf 93       	push	r27
    1ac4:	ef 93       	push	r30
    1ac6:	ff 93       	push	r31
    1ac8:	cf 93       	push	r28
    1aca:	df 93       	push	r29
    1acc:	1f 92       	push	r1
    1ace:	cd b7       	in	r28, 0x3d	; 61
    1ad0:	de b7       	in	r29, 0x3e	; 62

	if(twiMaster.status == TWIM_STATUS_READY)
    1ad2:	80 91 63 25 	lds	r24, 0x2563
    1ad6:	81 11       	cpse	r24, r1
    1ad8:	0b c0       	rjmp	.+22     	; 0x1af0 <__vector_34+0x50>
	{
		byte buf = 0x00;		// read 4 bytes, starting at 0x00 (x,y,z,status)
    1ada:	19 82       	std	Y+1, r1	; 0x01
		TWI_MasterWriteRead(&twiMaster, ACCEL_I2C_ADDR, &buf, 1, 4);
    1adc:	04 e0       	ldi	r16, 0x04	; 4
    1ade:	21 e0       	ldi	r18, 0x01	; 1
    1ae0:	ae 01       	movw	r20, r28
    1ae2:	4f 5f       	subi	r20, 0xFF	; 255
    1ae4:	5f 4f       	sbci	r21, 0xFF	; 255
    1ae6:	6c e4       	ldi	r22, 0x4C	; 76
    1ae8:	84 e5       	ldi	r24, 0x54	; 84
    1aea:	95 e2       	ldi	r25, 0x25	; 37
    1aec:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <TWI_MasterWriteRead>
	}

}
    1af0:	0f 90       	pop	r0
    1af2:	df 91       	pop	r29
    1af4:	cf 91       	pop	r28
    1af6:	ff 91       	pop	r31
    1af8:	ef 91       	pop	r30
    1afa:	bf 91       	pop	r27
    1afc:	af 91       	pop	r26
    1afe:	9f 91       	pop	r25
    1b00:	8f 91       	pop	r24
    1b02:	7f 91       	pop	r23
    1b04:	6f 91       	pop	r22
    1b06:	5f 91       	pop	r21
    1b08:	4f 91       	pop	r20
    1b0a:	3f 91       	pop	r19
    1b0c:	2f 91       	pop	r18
    1b0e:	0f 91       	pop	r16
    1b10:	0f 90       	pop	r0
    1b12:	0b be       	out	0x3b, r0	; 59
    1b14:	0f 90       	pop	r0
    1b16:	0f be       	out	0x3f, r0	; 63
    1b18:	0f 90       	pop	r0
    1b1a:	1f 90       	pop	r1
    1b1c:	18 95       	reti

00001b1e <__vector_46>:

/*! TWIE Master Interrupt vector. */
ISR(TWIE_TWIM_vect)
{
    1b1e:	1f 92       	push	r1
    1b20:	0f 92       	push	r0
    1b22:	0f b6       	in	r0, 0x3f	; 63
    1b24:	0f 92       	push	r0
    1b26:	11 24       	eor	r1, r1
    1b28:	0b b6       	in	r0, 0x3b	; 59
    1b2a:	0f 92       	push	r0
    1b2c:	2f 93       	push	r18
    1b2e:	3f 93       	push	r19
    1b30:	4f 93       	push	r20
    1b32:	5f 93       	push	r21
    1b34:	6f 93       	push	r22
    1b36:	7f 93       	push	r23
    1b38:	8f 93       	push	r24
    1b3a:	9f 93       	push	r25
    1b3c:	af 93       	push	r26
    1b3e:	bf 93       	push	r27
    1b40:	ef 93       	push	r30
    1b42:	ff 93       	push	r31

	TWI_MasterInterruptHandler(&twiMaster);
    1b44:	84 e5       	ldi	r24, 0x54	; 84
    1b46:	95 e2       	ldi	r25, 0x25	; 37
    1b48:	0e 94 67 17 	call	0x2ece	; 0x2ece <TWI_MasterInterruptHandler>
}
    1b4c:	ff 91       	pop	r31
    1b4e:	ef 91       	pop	r30
    1b50:	bf 91       	pop	r27
    1b52:	af 91       	pop	r26
    1b54:	9f 91       	pop	r25
    1b56:	8f 91       	pop	r24
    1b58:	7f 91       	pop	r23
    1b5a:	6f 91       	pop	r22
    1b5c:	5f 91       	pop	r21
    1b5e:	4f 91       	pop	r20
    1b60:	3f 91       	pop	r19
    1b62:	2f 91       	pop	r18
    1b64:	0f 90       	pop	r0
    1b66:	0b be       	out	0x3b, r0	; 59
    1b68:	0f 90       	pop	r0
    1b6a:	0f be       	out	0x3f, r0	; 63
    1b6c:	0f 90       	pop	r0
    1b6e:	1f 90       	pop	r1
    1b70:	18 95       	reti

00001b72 <setAccelRegister>:

// helper function to setup accelerometer registers
void setAccelRegister(byte one, byte two)
{
    1b72:	0f 93       	push	r16
    1b74:	cf 93       	push	r28
    1b76:	df 93       	push	r29
    1b78:	1f 92       	push	r1
    1b7a:	1f 92       	push	r1
    1b7c:	cd b7       	in	r28, 0x3d	; 61
    1b7e:	de b7       	in	r29, 0x3e	; 62
    byte buf[2];

    buf[0] = one;
    1b80:	89 83       	std	Y+1, r24	; 0x01
    buf[1] = two;
    1b82:	6a 83       	std	Y+2, r22	; 0x02
    
    TWI_MasterWriteRead(&twiMaster, ACCEL_I2C_ADDR, buf, 2, 0);
    1b84:	00 e0       	ldi	r16, 0x00	; 0
    1b86:	22 e0       	ldi	r18, 0x02	; 2
    1b88:	ae 01       	movw	r20, r28
    1b8a:	4f 5f       	subi	r20, 0xFF	; 255
    1b8c:	5f 4f       	sbci	r21, 0xFF	; 255
    1b8e:	6c e4       	ldi	r22, 0x4C	; 76
    1b90:	84 e5       	ldi	r24, 0x54	; 84
    1b92:	95 e2       	ldi	r25, 0x25	; 37
    1b94:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <TWI_MasterWriteRead>
    while(twiMaster.status != TWIM_STATUS_READY);
    1b98:	80 91 63 25 	lds	r24, 0x2563
    1b9c:	81 11       	cpse	r24, r1
    1b9e:	fc cf       	rjmp	.-8      	; 0x1b98 <setAccelRegister+0x26>
}
    1ba0:	0f 90       	pop	r0
    1ba2:	0f 90       	pop	r0
    1ba4:	df 91       	pop	r29
    1ba6:	cf 91       	pop	r28
    1ba8:	0f 91       	pop	r16
    1baa:	08 95       	ret

00001bac <scaryBlockTickHack>:

extern int blockTickRunning;

void scaryBlockTickHack(void)
{
	TCF0.CTRLA = TC_CLKSEL_DIV1_gc;
    1bac:	e0 e0       	ldi	r30, 0x00	; 0
    1bae:	fb e0       	ldi	r31, 0x0B	; 11
    1bb0:	81 e0       	ldi	r24, 0x01	; 1
    1bb2:	80 83       	st	Z, r24
	
	TCF0.PER = 16000;  // 2000hz blocktick
    1bb4:	80 e8       	ldi	r24, 0x80	; 128
    1bb6:	9e e3       	ldi	r25, 0x3E	; 62
    1bb8:	86 a3       	std	Z+38, r24	; 0x26
    1bba:	97 a3       	std	Z+39, r25	; 0x27
	TCF0.INTCTRLA = TC_OVFINTLVL_MED_gc;
    1bbc:	82 e0       	ldi	r24, 0x02	; 2
    1bbe:	86 83       	std	Z+6, r24	; 0x06
    1bc0:	08 95       	ret

00001bc2 <initBlockTick>:


void initBlockTick()
{

	blockTickRunning=0;
    1bc2:	10 92 2c 20 	sts	0x202C, r1
    1bc6:	10 92 2d 20 	sts	0x202D, r1
     
	scaryBlockTickHack();
    1bca:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <scaryBlockTickHack>

	/* Enable interrupt levels. */
	PMIC.CTRL |= PMIC_HILVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_LOLVLEN_bm;
    1bce:	e0 ea       	ldi	r30, 0xA0	; 160
    1bd0:	f0 e0       	ldi	r31, 0x00	; 0
    1bd2:	82 81       	ldd	r24, Z+2	; 0x02
    1bd4:	87 60       	ori	r24, 0x07	; 7
    1bd6:	82 83       	std	Z+2, r24	; 0x02
	sei();
    1bd8:	78 94       	sei
    1bda:	08 95       	ret

00001bdc <__vector_108>:
}

// part of scary blocktick hack
// called every 38400 khz or so
ISR(TCF0_OVF_vect)
{
    1bdc:	1f 92       	push	r1
    1bde:	0f 92       	push	r0
    1be0:	0f b6       	in	r0, 0x3f	; 63
    1be2:	0f 92       	push	r0
    1be4:	11 24       	eor	r1, r1
    1be6:	0b b6       	in	r0, 0x3b	; 59
    1be8:	0f 92       	push	r0
    1bea:	2f 93       	push	r18
    1bec:	3f 93       	push	r19
    1bee:	4f 93       	push	r20
    1bf0:	5f 93       	push	r21
    1bf2:	6f 93       	push	r22
    1bf4:	7f 93       	push	r23
    1bf6:	8f 93       	push	r24
    1bf8:	9f 93       	push	r25
    1bfa:	af 93       	push	r26
    1bfc:	bf 93       	push	r27
    1bfe:	ef 93       	push	r30
    1c00:	ff 93       	push	r31
	if (!blockTickRunning)
    1c02:	80 91 2c 20 	lds	r24, 0x202C
    1c06:	90 91 2d 20 	lds	r25, 0x202D
    1c0a:	89 2b       	or	r24, r25
    1c0c:	19 f4       	brne	.+6      	; 0x1c14 <__vector_108+0x38>
	  {
	    wdt_reset();
    1c0e:	a8 95       	wdr
	    blockTick();
    1c10:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <blockTick>
	  }
}
    1c14:	ff 91       	pop	r31
    1c16:	ef 91       	pop	r30
    1c18:	bf 91       	pop	r27
    1c1a:	af 91       	pop	r26
    1c1c:	9f 91       	pop	r25
    1c1e:	8f 91       	pop	r24
    1c20:	7f 91       	pop	r23
    1c22:	6f 91       	pop	r22
    1c24:	5f 91       	pop	r21
    1c26:	4f 91       	pop	r20
    1c28:	3f 91       	pop	r19
    1c2a:	2f 91       	pop	r18
    1c2c:	0f 90       	pop	r0
    1c2e:	0b be       	out	0x3b, r0	; 59
    1c30:	0f 90       	pop	r0
    1c32:	0f be       	out	0x3f, r0	; 63
    1c34:	0f 90       	pop	r0
    1c36:	1f 90       	pop	r1
    1c38:	18 95       	reti

00001c3a <jumpToHWBootSection>:
#include <avr/io.h>
#include "../hw-api/hwBoot.h"

void jumpToHWBootSection(){
	uint8_t temp = RST.CTRL | RST_SWRST_bm;
    1c3a:	e8 e7       	ldi	r30, 0x78	; 120
    1c3c:	f0 e0       	ldi	r31, 0x00	; 0
    1c3e:	81 81       	ldd	r24, Z+1	; 0x01
    1c40:	81 60       	ori	r24, 0x01	; 1
	CCP = CCP_IOREG_gc; // grab permission to modify the reset reg
    1c42:	98 ed       	ldi	r25, 0xD8	; 216
    1c44:	94 bf       	out	0x34, r25	; 52
	RST.CTRL = temp; // set the reset reg to trigger a SW reset
    1c46:	81 83       	std	Z+1, r24	; 0x01
    1c48:	08 95       	ret

00001c4a <crcCalc>:
byte crcCalc(byte currCrc, byte newVal)
{
    byte crc = currCrc;
	int i;
	
	crc ^= newVal;
    1c4a:	68 27       	eor	r22, r24
    1c4c:	28 e0       	ldi	r18, 0x08	; 8
    1c4e:	30 e0       	ldi	r19, 0x00	; 0
    for (i=0; i<8; i++)
	{
        if (0x80 & crc) {
    1c50:	67 ff       	sbrs	r22, 7
    1c52:	09 c0       	rjmp	.+18     	; 0x1c66 <crcCalc+0x1c>
            crc = (crc << 1) ^ CRC_POLY;
    1c54:	86 2f       	mov	r24, r22
    1c56:	90 e0       	ldi	r25, 0x00	; 0
    1c58:	88 0f       	add	r24, r24
    1c5a:	99 1f       	adc	r25, r25
    1c5c:	46 ea       	ldi	r20, 0xA6	; 166
    1c5e:	84 27       	eor	r24, r20
    1c60:	90 95       	com	r25
    1c62:	68 2f       	mov	r22, r24
    1c64:	01 c0       	rjmp	.+2      	; 0x1c68 <crcCalc+0x1e>
        }
		else {
            crc = crc << 1;
    1c66:	66 0f       	add	r22, r22
    1c68:	21 50       	subi	r18, 0x01	; 1
    1c6a:	31 09       	sbc	r19, r1
{
    byte crc = currCrc;
	int i;
	
	crc ^= newVal;
    for (i=0; i<8; i++)
    1c6c:	89 f7       	brne	.-30     	; 0x1c50 <crcCalc+0x6>
		else {
            crc = crc << 1;
        }
    }
	return crc;
} 
    1c6e:	86 2f       	mov	r24, r22
    1c70:	08 95       	ret

00001c72 <ackHandler>:
// handles the ack byte and updates the packet queue
//    (parity, timer, CTS)
// inputs:  port received on
// returns: nothing
void ackHandler(PRef p)
{
    1c72:	0f 93       	push	r16
    1c74:	1f 93       	push	r17
    1c76:	cf 93       	push	r28
    1c78:	df 93       	push	r29
    byte currParity = sendParity(port[p].sq);
    1c7a:	98 e5       	ldi	r25, 0x58	; 88
    1c7c:	89 9f       	mul	r24, r25
    1c7e:	80 01       	movw	r16, r0
    1c80:	11 24       	eor	r1, r1
    1c82:	e8 01       	movw	r28, r16
    1c84:	c4 5c       	subi	r28, 0xC4	; 196
    1c86:	dc 4d       	sbci	r29, 0xDC	; 220
    1c88:	3e 85       	ldd	r19, Y+14	; 0x0e
    
    // check for double acks (shouldn't ever happen)
    if( !(gotOddAck(port[p].rq) ^ gotEvenAck(port[p].rq)) ) 
    1c8a:	9d 89       	ldd	r25, Y+21	; 0x15
    1c8c:	29 2f       	mov	r18, r25
    1c8e:	26 95       	lsr	r18
    1c90:	42 2f       	mov	r20, r18
    1c92:	49 27       	eor	r20, r25
    1c94:	9c 7f       	andi	r25, 0xFC	; 252
    {
        clearReceivedAcks( port[p].rq );
    1c96:	9d 8b       	std	Y+21, r25	; 0x15
void ackHandler(PRef p)
{
    byte currParity = sendParity(port[p].sq);
    
    // check for double acks (shouldn't ever happen)
    if( !(gotOddAck(port[p].rq) ^ gotEvenAck(port[p].rq)) ) 
    1c98:	40 ff       	sbrs	r20, 0
    {
        clearReceivedAcks( port[p].rq );
        return;
    1c9a:	18 c0       	rjmp	.+48     	; 0x1ccc <ackHandler+0x5a>
//    (parity, timer, CTS)
// inputs:  port received on
// returns: nothing
void ackHandler(PRef p)
{
    byte currParity = sendParity(port[p].sq);
    1c9c:	32 fb       	bst	r19, 2
    1c9e:	99 27       	eor	r25, r25
    1ca0:	90 f9       	bld	r25, 0
    if( !(gotOddAck(port[p].rq) ^ gotEvenAck(port[p].rq)) ) 
    {
        clearReceivedAcks( port[p].rq );
        return;
    }
    byte recdParity = gotOddAck(port[p].rq);
    1ca2:	21 70       	andi	r18, 0x01	; 1
    clearReceivedAcks( port[p].rq );
    
    // parity matches
    if(currParity == recdParity)
    1ca4:	92 13       	cpse	r25, r18
    1ca6:	12 c0       	rjmp	.+36     	; 0x1ccc <ackHandler+0x5a>
    {
        // remove the Chunk, call callback with successfull response
        removeFromSq(p, MSG_RESP_ACK);
    1ca8:	68 e0       	ldi	r22, 0x08	; 8
    1caa:	0e 94 04 02 	call	0x408	; 0x408 <removeFromSq>
        
        // reset the flags
        port[p].sq.retry    = NUM_RETRIES;
    1cae:	94 e0       	ldi	r25, 0x04	; 4
    1cb0:	9d 87       	std	Y+13, r25	; 0x0d
        flipParity(port[p].sq);
    1cb2:	8e 85       	ldd	r24, Y+14	; 0x0e
    1cb4:	89 27       	eor	r24, r25
        port[p].sq.flags   |= CLEAR_TO_SEND;
    1cb6:	80 64       	ori	r24, 0x40	; 64
    1cb8:	8e 87       	std	Y+14, r24	; 0x0e
        
        // reset the timer
        deregisterTimeout(&(port[p].sq.qtout.tout));
    1cba:	c8 01       	movw	r24, r16
    1cbc:	83 5c       	subi	r24, 0xC3	; 195
    1cbe:	9c 4d       	sbci	r25, 0xDC	; 220
    }
    // else, parity error - don't do anything
}
    1cc0:	df 91       	pop	r29
    1cc2:	cf 91       	pop	r28
    1cc4:	1f 91       	pop	r17
    1cc6:	0f 91       	pop	r16
        port[p].sq.retry    = NUM_RETRIES;
        flipParity(port[p].sq);
        port[p].sq.flags   |= CLEAR_TO_SEND;
        
        // reset the timer
        deregisterTimeout(&(port[p].sq.qtout.tout));
    1cc8:	0c 94 f7 08 	jmp	0x11ee	; 0x11ee <deregisterTimeout>
    }
    // else, parity error - don't do anything
}
    1ccc:	df 91       	pop	r29
    1cce:	cf 91       	pop	r28
    1cd0:	1f 91       	pop	r17
    1cd2:	0f 91       	pop	r16
    1cd4:	08 95       	ret

00001cd6 <addToGlobalRq>:

// adds a Chunk to the global receive queue
void addToGlobalRq(Chunk* c)
{
    // nothing to add
    if( c == NULL ) 
    1cd6:	00 97       	sbiw	r24, 0x00	; 0
    1cd8:	d9 f0       	breq	.+54     	; 0x1d10 <addToGlobalRq+0x3a>
    {
        return;
    }
        
    // isolate Chunk
    c->next = NULL;
    1cda:	fc 01       	movw	r30, r24
    1cdc:	12 8a       	std	Z+18, r1	; 0x12
    1cde:	13 8a       	std	Z+19, r1	; 0x13
    
    // update pointers
    if( globalRq.head == NULL ) 
    1ce0:	20 91 32 20 	lds	r18, 0x2032
    1ce4:	30 91 33 20 	lds	r19, 0x2033
    1ce8:	23 2b       	or	r18, r19
    1cea:	29 f4       	brne	.+10     	; 0x1cf6 <addToGlobalRq+0x20>
    {
        globalRq.head = c;
    1cec:	80 93 32 20 	sts	0x2032, r24
    1cf0:	90 93 33 20 	sts	0x2033, r25
    1cf4:	06 c0       	rjmp	.+12     	; 0x1d02 <addToGlobalRq+0x2c>
    }
    else 
    {
        globalRq.tail->next = c;
    1cf6:	e0 91 34 20 	lds	r30, 0x2034
    1cfa:	f0 91 35 20 	lds	r31, 0x2035
    1cfe:	82 8b       	std	Z+18, r24	; 0x12
    1d00:	93 8b       	std	Z+19, r25	; 0x13
    }
    
    // add/flag it
    globalRq.tail  = c;
    1d02:	80 93 34 20 	sts	0x2034, r24
    1d06:	90 93 35 20 	sts	0x2035, r25
    globalRq.flags = PACKET_READY;
    1d0a:	80 e8       	ldi	r24, 0x80	; 128
    1d0c:	80 93 36 20 	sts	0x2036, r24
    1d10:	08 95       	ret

00001d12 <isSpecial>:
}

// check to see if character is special
byte isSpecial(byte val)
{
    1d12:	28 2f       	mov	r18, r24
    if( ((val & ACK_MASK) == ACK   ) || ((val & ACK_MASK) == NACK  ) ||
    1d14:	98 2f       	mov	r25, r24
    1d16:	9e 7f       	andi	r25, 0xFE	; 254
        ((val & FD_MASK)  == FD    ) || (val              == ESCAPE )   )
    {
        return 1;
    1d18:	81 e0       	ldi	r24, 0x01	; 1
}

// check to see if character is special
byte isSpecial(byte val)
{
    if( ((val & ACK_MASK) == ACK   ) || ((val & ACK_MASK) == NACK  ) ||
    1d1a:	98 30       	cpi	r25, 0x08	; 8
    1d1c:	41 f0       	breq	.+16     	; 0x1d2e <isSpecial+0x1c>
    1d1e:	9a 30       	cpi	r25, 0x0A	; 10
    1d20:	31 f0       	breq	.+12     	; 0x1d2e <isSpecial+0x1c>
    1d22:	92 31       	cpi	r25, 0x12	; 18
    1d24:	29 f0       	breq	.+10     	; 0x1d30 <isSpecial+0x1e>
        ((val & FD_MASK)  == FD    ) || (val              == ESCAPE )   )
    1d26:	2d 37       	cpi	r18, 0x7D	; 125
    1d28:	19 f0       	breq	.+6      	; 0x1d30 <isSpecial+0x1e>
    1d2a:	80 e0       	ldi	r24, 0x00	; 0
    1d2c:	08 95       	ret
    1d2e:	08 95       	ret
    {
        return 1;
    }
        
    return 0;
}
    1d30:	08 95       	ret

00001d32 <sendToBuffer>:

// makes the Chunk into the correct send string
void sendToBuffer(PRef p, Chunk* c, byte parity)
{
    1d32:	9f 92       	push	r9
    1d34:	af 92       	push	r10
    1d36:	bf 92       	push	r11
    1d38:	cf 92       	push	r12
    1d3a:	df 92       	push	r13
    1d3c:	ef 92       	push	r14
    1d3e:	ff 92       	push	r15
    1d40:	0f 93       	push	r16
    1d42:	1f 93       	push	r17
    1d44:	cf 93       	push	r28
    1d46:	df 93       	push	r29
    1d48:	b8 2e       	mov	r11, r24
    1d4a:	7b 01       	movw	r14, r22
    byte checksum = 0;
    byte val;
    byte i;
    byte delim;
    
    if(c == NULL)
    1d4c:	61 15       	cp	r22, r1
    1d4e:	71 05       	cpc	r23, r1
    1d50:	09 f4       	brne	.+2      	; 0x1d54 <sendToBuffer+0x22>
    1d52:	83 c0       	rjmp	.+262    	; 0x1e5a <sendToBuffer+0x128>
    {
        return;
    }
	
    // send FD
    delim = (FD | parity);
    1d54:	62 e1       	ldi	r22, 0x12	; 18
    1d56:	c6 2e       	mov	r12, r22
    1d58:	c4 2a       	or	r12, r20
    1d5a:	00 e0       	ldi	r16, 0x00	; 0
    1d5c:	10 e0       	ldi	r17, 0x00	; 0
}

// makes the Chunk into the correct send string
void sendToBuffer(PRef p, Chunk* c, byte parity)
{
    byte checksum = 0;
    1d5e:	d1 2c       	mov	r13, r1
            push(val^ESCAPE_CHAR, &(port[p].tx));
        }
        // send regular
        else 
        {
            push(val, &(port[p].tx));
    1d60:	88 e5       	ldi	r24, 0x58	; 88
    1d62:	b8 9e       	mul	r11, r24
    1d64:	e0 01       	movw	r28, r0
    1d66:	11 24       	eor	r1, r1
    1d68:	cc 58       	subi	r28, 0x8C	; 140
    1d6a:	dc 4d       	sbci	r29, 0xDC	; 220
        
        // escape it
        if( isSpecial(val) ) 
        {
            push(ESCAPE, &(port[p].tx));
            push(val^ESCAPE_CHAR, &(port[p].tx));
    1d6c:	70 e2       	ldi	r23, 0x20	; 32
    1d6e:	97 2e       	mov	r9, r23
        
    return 0;
}

// makes the Chunk into the correct send string
void sendToBuffer(PRef p, Chunk* c, byte parity)
    1d70:	f7 01       	movw	r30, r14
    1d72:	e0 0f       	add	r30, r16
    1d74:	f1 1f       	adc	r31, r17
    delim = (FD | parity);

    // send messageHandler
    for(i=0; i<POINTER_SIZE; i++)
    {
        val = c->handler[i];
    1d76:	a4 88       	ldd	r10, Z+20	; 0x14
        checksum = crcCalc(checksum, val);
    1d78:	6a 2d       	mov	r22, r10
    1d7a:	8d 2d       	mov	r24, r13
    1d7c:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <crcCalc>
    1d80:	d8 2e       	mov	r13, r24
        
        // escape it
        if( isSpecial(val) ) 
    1d82:	8a 2d       	mov	r24, r10
    1d84:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <isSpecial>
        {
            push(ESCAPE, &(port[p].tx));
    1d88:	be 01       	movw	r22, r28
    {
        val = c->handler[i];
        checksum = crcCalc(checksum, val);
        
        // escape it
        if( isSpecial(val) ) 
    1d8a:	88 23       	and	r24, r24
    1d8c:	39 f0       	breq	.+14     	; 0x1d9c <sendToBuffer+0x6a>
        {
            push(ESCAPE, &(port[p].tx));
    1d8e:	8d e7       	ldi	r24, 0x7D	; 125
    1d90:	0e 94 b4 01 	call	0x368	; 0x368 <push>
            push(val^ESCAPE_CHAR, &(port[p].tx));
    1d94:	be 01       	movw	r22, r28
    1d96:	8a 2d       	mov	r24, r10
    1d98:	89 25       	eor	r24, r9
    1d9a:	01 c0       	rjmp	.+2      	; 0x1d9e <sendToBuffer+0x6c>
        }
        // send regular
        else 
        {
            push(val, &(port[p].tx));
    1d9c:	8a 2d       	mov	r24, r10
    1d9e:	0e 94 b4 01 	call	0x368	; 0x368 <push>
    1da2:	0f 5f       	subi	r16, 0xFF	; 255
    1da4:	1f 4f       	sbci	r17, 0xFF	; 255
	
    // send FD
    delim = (FD | parity);

    // send messageHandler
    for(i=0; i<POINTER_SIZE; i++)
    1da6:	02 30       	cpi	r16, 0x02	; 2
    1da8:	11 05       	cpc	r17, r1
    1daa:	11 f7       	brne	.-60     	; 0x1d70 <sendToBuffer+0x3e>
    1dac:	01 e1       	ldi	r16, 0x11	; 17
            push(val^ESCAPE_CHAR, &(port[p].tx));
        }
        // send regular
        else 
        {
            push(val, &(port[p].tx));
    1dae:	e8 e5       	ldi	r30, 0x58	; 88
    1db0:	be 9e       	mul	r11, r30
    1db2:	e0 01       	movw	r28, r0
    1db4:	11 24       	eor	r1, r1
    1db6:	cc 58       	subi	r28, 0x8C	; 140
    1db8:	dc 4d       	sbci	r29, 0xDC	; 220
        // escape it
        if( isSpecial(val) ) 
        {
            push(ESCAPE, &(port[p].tx));

            push(val^ESCAPE_CHAR, &(port[p].tx));
    1dba:	50 e2       	ldi	r21, 0x20	; 32
    1dbc:	95 2e       	mov	r9, r21
    }
    
    // send data
    for(i=0; i<DATA_SIZE; i++)
    {
        val = c->data[i];
    1dbe:	f7 01       	movw	r30, r14
    1dc0:	11 91       	ld	r17, Z+
    1dc2:	7f 01       	movw	r14, r30
        checksum = crcCalc(checksum, val);
    1dc4:	61 2f       	mov	r22, r17
    1dc6:	8d 2d       	mov	r24, r13
    1dc8:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <crcCalc>
    1dcc:	d8 2e       	mov	r13, r24
        
        // escape it
        if( isSpecial(val) ) 
    1dce:	81 2f       	mov	r24, r17
    1dd0:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <isSpecial>
    1dd4:	a8 2e       	mov	r10, r24
        {
            push(ESCAPE, &(port[p].tx));
    1dd6:	be 01       	movw	r22, r28
    {
        val = c->data[i];
        checksum = crcCalc(checksum, val);
        
        // escape it
        if( isSpecial(val) ) 
    1dd8:	88 23       	and	r24, r24
    1dda:	39 f0       	breq	.+14     	; 0x1dea <sendToBuffer+0xb8>
        {
            push(ESCAPE, &(port[p].tx));
    1ddc:	8d e7       	ldi	r24, 0x7D	; 125
    1dde:	0e 94 b4 01 	call	0x368	; 0x368 <push>

            push(val^ESCAPE_CHAR, &(port[p].tx));
    1de2:	be 01       	movw	r22, r28
    1de4:	81 2f       	mov	r24, r17
    1de6:	89 25       	eor	r24, r9
    1de8:	01 c0       	rjmp	.+2      	; 0x1dec <sendToBuffer+0xba>
        }
        // send regular
        else 
        {
            push(val, &(port[p].tx));
    1dea:	81 2f       	mov	r24, r17
    1dec:	0e 94 b4 01 	call	0x368	; 0x368 <push>
    1df0:	01 50       	subi	r16, 0x01	; 1
            push(val, &(port[p].tx));
        }
    }
    
    // send data
    for(i=0; i<DATA_SIZE; i++)
    1df2:	29 f7       	brne	.-54     	; 0x1dbe <sendToBuffer+0x8c>
    1df4:	2b 2d       	mov	r18, r11
    1df6:	30 e0       	ldi	r19, 0x00	; 0

    // send checksum
	// escape it
    if( isSpecial(val) ) 
    {
        push(ESCAPE, &(port[p].tx));
    1df8:	88 e5       	ldi	r24, 0x58	; 88
        }
    }

    // send checksum
	// escape it
    if( isSpecial(val) ) 
    1dfa:	aa 20       	and	r10, r10
    1dfc:	79 f0       	breq	.+30     	; 0x1e1c <sendToBuffer+0xea>
    {
        push(ESCAPE, &(port[p].tx));
    1dfe:	82 9f       	mul	r24, r18
    1e00:	e0 01       	movw	r28, r0
    1e02:	83 9f       	mul	r24, r19
    1e04:	d0 0d       	add	r29, r0
    1e06:	11 24       	eor	r1, r1
    1e08:	cc 58       	subi	r28, 0x8C	; 140
    1e0a:	dc 4d       	sbci	r29, 0xDC	; 220
    1e0c:	be 01       	movw	r22, r28
    1e0e:	8d e7       	ldi	r24, 0x7D	; 125
    1e10:	0e 94 b4 01 	call	0x368	; 0x368 <push>
        push(checksum^ESCAPE_CHAR, &(port[p].tx));
    1e14:	be 01       	movw	r22, r28
    1e16:	80 e2       	ldi	r24, 0x20	; 32
    1e18:	8d 25       	eor	r24, r13
    1e1a:	08 c0       	rjmp	.+16     	; 0x1e2c <sendToBuffer+0xfa>
    }
    // send regular
    else 
    {
        push(checksum, &(port[p].tx));
    1e1c:	82 9f       	mul	r24, r18
    1e1e:	b0 01       	movw	r22, r0
    1e20:	83 9f       	mul	r24, r19
    1e22:	70 0d       	add	r23, r0
    1e24:	11 24       	eor	r1, r1
    1e26:	6c 58       	subi	r22, 0x8C	; 140
    1e28:	7c 4d       	sbci	r23, 0xDC	; 220
    1e2a:	8d 2d       	mov	r24, r13
    1e2c:	0e 94 b4 01 	call	0x368	; 0x368 <push>
    }
    
    // start the interrupt by sending a byte (FD)
    pPutChar(delim, port[p].pnum);
    1e30:	88 e5       	ldi	r24, 0x58	; 88
    1e32:	b8 9e       	mul	r11, r24
    1e34:	f0 01       	movw	r30, r0
    1e36:	11 24       	eor	r1, r1
    1e38:	e4 5c       	subi	r30, 0xC4	; 196
    1e3a:	fc 4d       	sbci	r31, 0xDC	; 220
    1e3c:	60 81       	ld	r22, Z
    1e3e:	8c 2d       	mov	r24, r12
}
    1e40:	df 91       	pop	r29
    1e42:	cf 91       	pop	r28
    1e44:	1f 91       	pop	r17
    1e46:	0f 91       	pop	r16
    1e48:	ff 90       	pop	r15
    1e4a:	ef 90       	pop	r14
    1e4c:	df 90       	pop	r13
    1e4e:	cf 90       	pop	r12
    1e50:	bf 90       	pop	r11
    1e52:	af 90       	pop	r10
    1e54:	9f 90       	pop	r9
    {
        push(checksum, &(port[p].tx));
    }
    
    // start the interrupt by sending a byte (FD)
    pPutChar(delim, port[p].pnum);
    1e56:	0c 94 d1 11 	jmp	0x23a2	; 0x23a2 <pPutChar>
}
    1e5a:	df 91       	pop	r29
    1e5c:	cf 91       	pop	r28
    1e5e:	1f 91       	pop	r17
    1e60:	0f 91       	pop	r16
    1e62:	ff 90       	pop	r15
    1e64:	ef 90       	pop	r14
    1e66:	df 90       	pop	r13
    1e68:	cf 90       	pop	r12
    1e6a:	bf 90       	pop	r11
    1e6c:	af 90       	pop	r10
    1e6e:	9f 90       	pop	r9
    1e70:	08 95       	ret

00001e72 <processBuffer>:


// pulls bytes from the buffer and puts them into Chunks
// also handles ACKs appropriately
void processBuffer(PRef p)
{
    1e72:	2f 92       	push	r2
    1e74:	3f 92       	push	r3
    1e76:	4f 92       	push	r4
    1e78:	5f 92       	push	r5
    1e7a:	6f 92       	push	r6
    1e7c:	7f 92       	push	r7
    1e7e:	8f 92       	push	r8
    1e80:	9f 92       	push	r9
    1e82:	af 92       	push	r10
    1e84:	bf 92       	push	r11
    1e86:	cf 92       	push	r12
    1e88:	df 92       	push	r13
    1e8a:	ef 92       	push	r14
    1e8c:	ff 92       	push	r15
    1e8e:	0f 93       	push	r16
    1e90:	1f 93       	push	r17
    1e92:	cf 93       	push	r28
    1e94:	df 93       	push	r29
    1e96:	38 2e       	mov	r3, r24
    byte   currByte;
    Chunk* currChunk = NULL;
    byte   wasEscape = wasEscapeStore[p];
    1e98:	e8 2e       	mov	r14, r24
    1e9a:	f1 2c       	mov	r15, r1
    1e9c:	f7 01       	movw	r30, r14
    1e9e:	eb 59       	subi	r30, 0x9B	; 155
    1ea0:	fa 4d       	sbci	r31, 0xDA	; 218
    1ea2:	20 80       	ld	r2, Z


    // nothing to process
    if( isEmpty(&(port[p].rx)) )
    1ea4:	88 e5       	ldi	r24, 0x58	; 88
    1ea6:	8e 9d       	mul	r24, r14
    1ea8:	e0 01       	movw	r28, r0
    1eaa:	8f 9d       	mul	r24, r15
    1eac:	d0 0d       	add	r29, r0
    1eae:	11 24       	eor	r1, r1
    1eb0:	f4 e5       	ldi	r31, 0x54	; 84
    1eb2:	6f 2e       	mov	r6, r31
    1eb4:	f3 e2       	ldi	r31, 0x23	; 35
    1eb6:	7f 2e       	mov	r7, r31
    1eb8:	6c 0e       	add	r6, r28
    1eba:	7d 1e       	adc	r7, r29
    1ebc:	c3 01       	movw	r24, r6
    1ebe:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <isEmpty>
    1ec2:	81 11       	cpse	r24, r1
    1ec4:	d1 c0       	rjmp	.+418    	; 0x2068 <processBuffer+0x1f6>
    {
        return;
    }

    // continue filling unfinished Chunk
    if( (port[p].rq.curr != NULL) && chunkFilling(port[p].rq.curr) ) 
    1ec6:	fe 01       	movw	r30, r28
    1ec8:	e4 5c       	subi	r30, 0xC4	; 196
    1eca:	fc 4d       	sbci	r31, 0xDC	; 220
    1ecc:	46 88       	ldd	r4, Z+22	; 0x16
    1ece:	57 88       	ldd	r5, Z+23	; 0x17
    1ed0:	41 14       	cp	r4, r1
    1ed2:	51 04       	cpc	r5, r1
    1ed4:	21 f0       	breq	.+8      	; 0x1ede <processBuffer+0x6c>
    1ed6:	f2 01       	movw	r30, r4
    1ed8:	81 89       	ldd	r24, Z+17	; 0x11
    1eda:	86 fd       	sbrc	r24, 6
    1edc:	a4 c0       	rjmp	.+328    	; 0x2026 <processBuffer+0x1b4>
    {
        currChunk = port[p].rq.curr;
    }
    else
    {
        port[p].rq.index    = 0;
    1ede:	88 e5       	ldi	r24, 0x58	; 88
    1ee0:	8e 9d       	mul	r24, r14
    1ee2:	f0 01       	movw	r30, r0
    1ee4:	8f 9d       	mul	r24, r15
    1ee6:	f0 0d       	add	r31, r0
    1ee8:	11 24       	eor	r1, r1
    1eea:	e4 5c       	subi	r30, 0xC4	; 196
    1eec:	fc 4d       	sbci	r31, 0xDC	; 220
    1eee:	13 8a       	std	Z+19, r1	; 0x13
        port[p].rq.checksum = 0;
    1ef0:	14 8a       	std	Z+20, r1	; 0x14
        wasEscape           = 0;
    1ef2:	21 2c       	mov	r2, r1
// pulls bytes from the buffer and puts them into Chunks
// also handles ACKs appropriately
void processBuffer(PRef p)
{
    byte   currByte;
    Chunk* currChunk = NULL;
    1ef4:	41 2c       	mov	r4, r1
    1ef6:	51 2c       	mov	r5, r1
    1ef8:	96 c0       	rjmp	.+300    	; 0x2026 <processBuffer+0x1b4>
        wasEscape           = 0;
    }
                
    while( !isEmpty(&(port[p].rx)) )
    {
        currByte = (byte)pop(&(port[p].rx));
    1efa:	c3 01       	movw	r24, r6
    1efc:	0e 94 cf 01 	call	0x39e	; 0x39e <pop>
        
        // is ACK
        if( (currByte & ACK_MASK) == ACK )
    1f00:	bc 01       	movw	r22, r24
    1f02:	6e 7f       	andi	r22, 0xFE	; 254
    1f04:	77 27       	eor	r23, r23
    1f06:	68 30       	cpi	r22, 0x08	; 8
    1f08:	71 05       	cpc	r23, r1
    1f0a:	91 f4       	brne	.+36     	; 0x1f30 <processBuffer+0xbe>
        {
            // set ack parity
            port[p].rq.flags |= (1 << (currByte & 0x01));
    1f0c:	81 70       	andi	r24, 0x01	; 1
    1f0e:	99 27       	eor	r25, r25
    1f10:	21 e0       	ldi	r18, 0x01	; 1
    1f12:	30 e0       	ldi	r19, 0x00	; 0
    1f14:	02 c0       	rjmp	.+4      	; 0x1f1a <processBuffer+0xa8>
    1f16:	22 0f       	add	r18, r18
    1f18:	33 1f       	adc	r19, r19
    1f1a:	8a 95       	dec	r24
    1f1c:	e2 f7       	brpl	.-8      	; 0x1f16 <processBuffer+0xa4>
    1f1e:	c9 01       	movw	r24, r18
    1f20:	f8 01       	movw	r30, r16
    1f22:	90 81       	ld	r25, Z
    1f24:	98 2b       	or	r25, r24
    1f26:	90 83       	st	Z, r25
        
            ackHandler(p);
    1f28:	83 2d       	mov	r24, r3
    1f2a:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <ackHandler>
            continue;
    1f2e:	92 c0       	rjmp	.+292    	; 0x2054 <processBuffer+0x1e2>
	        nackHandler(p);
	        continue;
	        }*/
        
        // is FRAME_DELIMETER
        if( (currByte & FD_MASK) == FD )
    1f30:	62 31       	cpi	r22, 0x12	; 18
    1f32:	71 05       	cpc	r23, r1
    1f34:	01 f5       	brne	.+64     	; 0x1f76 <processBuffer+0x104>
        {
            // determine parity
            byte parity = setParityFromByte(currByte);
    1f36:	81 70       	andi	r24, 0x01	; 1
    1f38:	99 27       	eor	r25, r25
    1f3a:	28 2e       	mov	r2, r24
    1f3c:	22 94       	swap	r2
    1f3e:	22 0c       	add	r2, r2
    1f40:	e0 ee       	ldi	r30, 0xE0	; 224
    1f42:	2e 22       	and	r2, r30
        
            // restart the fill
            port[p].rq.index    = 0;
    1f44:	f6 01       	movw	r30, r12
    1f46:	10 82       	st	Z, r1
            port[p].rq.checksum = 0;
    1f48:	f5 01       	movw	r30, r10
    1f4a:	10 82       	st	Z, r1
            wasEscape           = 0;
                
            // unfinished Chunk
            if(port[p].rq.curr != NULL)
    1f4c:	f4 01       	movw	r30, r8
    1f4e:	40 80       	ld	r4, Z
    1f50:	51 80       	ldd	r5, Z+1	; 0x01
    1f52:	41 14       	cp	r4, r1
    1f54:	51 04       	cpc	r5, r1
    1f56:	49 f4       	brne	.+18     	; 0x1f6a <processBuffer+0xf8>
                currChunk = port[p].rq.curr;
            }
            // need new Chunk
            else
            {
                currChunk = getSystemRXChunk();
    1f58:	0e 94 4e 07 	call	0xe9c	; 0xe9c <getSystemRXChunk>
    1f5c:	2c 01       	movw	r4, r24
                
                // out of memory, can't fill
                if( currChunk == NULL )
    1f5e:	00 97       	sbiw	r24, 0x00	; 0
    1f60:	09 f4       	brne	.+2      	; 0x1f64 <processBuffer+0xf2>
    1f62:	5c c0       	rjmp	.+184    	; 0x201c <processBuffer+0x1aa>
                    // discard bytes, hopefully will get resent
                    continue;
                }
                
                // add to the queue
                port[p].rq.curr = currChunk;
    1f64:	f4 01       	movw	r30, r8
    1f66:	80 83       	st	Z, r24
    1f68:	91 83       	std	Z+1, r25	; 0x01
            }
            
            // reset the status of the Chunk, just in case
            currChunk->status = CHUNK_USED | CHUNK_FILLING | parity | port[p].pnum;
    1f6a:	98 81       	ld	r25, Y
    1f6c:	90 6c       	ori	r25, 0xC0	; 192
    1f6e:	92 29       	or	r25, r2
    1f70:	f2 01       	movw	r30, r4
    1f72:	91 8b       	std	Z+17, r25	; 0x11
    1f74:	53 c0       	rjmp	.+166    	; 0x201c <processBuffer+0x1aa>
            
            continue;
        }
        
        // no use processing if can't put anywhere
        if(currChunk == NULL)
    1f76:	41 14       	cp	r4, r1
    1f78:	51 04       	cpc	r5, r1
    1f7a:	09 f4       	brne	.+2      	; 0x1f7e <processBuffer+0x10c>
    1f7c:	6b c0       	rjmp	.+214    	; 0x2054 <processBuffer+0x1e2>
        wasEscape           = 0;
    }
                
    while( !isEmpty(&(port[p].rx)) )
    {
        currByte = (byte)pop(&(port[p].rx));
    1f7e:	68 2f       	mov	r22, r24
        {
            continue;
        }
        
        // is an escape char        
        if( currByte == ESCAPE )
    1f80:	8d 37       	cpi	r24, 0x7D	; 125
    1f82:	09 f4       	brne	.+2      	; 0x1f86 <processBuffer+0x114>
    1f84:	4d c0       	rjmp	.+154    	; 0x2020 <processBuffer+0x1ae>
            continue;
        }

        // is a regular character
        // was escaped
        if( wasEscape )
    1f86:	22 20       	and	r2, r2
    1f88:	19 f0       	breq	.+6      	; 0x1f90 <processBuffer+0x11e>
        {
            currByte ^= ESCAPE_CHAR;
    1f8a:	f0 e2       	ldi	r31, 0x20	; 32
    1f8c:	8f 27       	eor	r24, r31
    1f8e:	68 2f       	mov	r22, r24
            wasEscape = 0;
        }

        // is transmitted checksum
        if( port[p].rq.index >= (DATA_SIZE + POINTER_SIZE) )
    1f90:	f6 01       	movw	r30, r12
    1f92:	80 81       	ld	r24, Z
    1f94:	83 31       	cpi	r24, 0x13	; 19
    1f96:	70 f1       	brcs	.+92     	; 0x1ff4 <processBuffer+0x182>
        {
            // checksum matches!
            if( currByte == port[p].rq.checksum )
    1f98:	f5 01       	movw	r30, r10
    1f9a:	80 81       	ld	r24, Z
    1f9c:	68 13       	cpse	r22, r24
    1f9e:	22 c0       	rjmp	.+68     	; 0x1fe4 <processBuffer+0x172>
            {
                currChunk->status &= ~CHUNK_FILLING;
    1fa0:	f2 01       	movw	r30, r4
    1fa2:	81 89       	ldd	r24, Z+17	; 0x11
    1fa4:	8f 7b       	andi	r24, 0xBF	; 191
    1fa6:	81 8b       	std	Z+17, r24	; 0x11
                port[p].rq.flags  |=  CHUNK_READY;
    1fa8:	f8 01       	movw	r30, r16
    1faa:	80 81       	ld	r24, Z
    1fac:	80 68       	ori	r24, 0x80	; 128
    1fae:	80 83       	st	Z, r24
				
                // check for parity error
                byte parity = chunkParity(currChunk);
    1fb0:	f2 01       	movw	r30, r4
    1fb2:	91 89       	ldd	r25, Z+17	; 0x11
    1fb4:	95 fb       	bst	r25, 5
    1fb6:	99 27       	eor	r25, r25
    1fb8:	90 f9       	bld	r25, 0
                byte last   = parityLastChunk(port[p].rq);
    1fba:	86 fb       	bst	r24, 6
    1fbc:	88 27       	eor	r24, r24
    1fbe:	80 f9       	bld	r24, 0
	      
                // not a duplicate packet		
                if(parity != last) {
    1fc0:	98 17       	cp	r25, r24
    1fc2:	51 f0       	breq	.+20     	; 0x1fd8 <processBuffer+0x166>
                    // update neighborhood (fix for race condition)
                    //updateNeighbor(p, PRESENT);
		
                    // add to global receive queue
                    addToGlobalRq(currChunk);
    1fc4:	c2 01       	movw	r24, r4
    1fc6:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <addToGlobalRq>
		
                    // flip the parity
                    flipParityLast(port[p].rq);
    1fca:	f8 01       	movw	r30, r16
    1fcc:	80 81       	ld	r24, Z
    1fce:	f0 e4       	ldi	r31, 0x40	; 64
    1fd0:	8f 27       	eor	r24, r31
    1fd2:	f8 01       	movw	r30, r16
    1fd4:	80 83       	st	Z, r24
    1fd6:	03 c0       	rjmp	.+6      	; 0x1fde <processBuffer+0x16c>
                }
                // free the chunk
                else 
                {
                    freeChunk(currChunk);
    1fd8:	c2 01       	movw	r24, r4
    1fda:	0e 94 22 07 	call	0xe44	; 0xe44 <freeChunk>
                }
              
                // remove from the port rq
                port[p].rq.curr = NULL;
    1fde:	f4 01       	movw	r30, r8
    1fe0:	10 82       	st	Z, r1
    1fe2:	11 82       	std	Z+1, r1	; 0x01
            }
            
            // reset the data
            port[p].rq.index    = 0;
    1fe4:	f6 01       	movw	r30, r12
    1fe6:	10 82       	st	Z, r1
            port[p].rq.checksum = 0;
    1fe8:	f5 01       	movw	r30, r10
    1fea:	10 82       	st	Z, r1
            wasEscape           = 0;
    1fec:	21 2c       	mov	r2, r1
            currChunk           = NULL;
    1fee:	41 2c       	mov	r4, r1
    1ff0:	51 2c       	mov	r5, r1
	    
            /// TODO: send NACK
            continue;
    1ff2:	30 c0       	rjmp	.+96     	; 0x2054 <processBuffer+0x1e2>
    1ff4:	e8 2f       	mov	r30, r24
    1ff6:	f0 e0       	ldi	r31, 0x00	; 0
        }
		
        // message handler
        if( port[p].rq.index < POINTER_SIZE )
        {
            currChunk->handler[port[p].rq.index] = currByte;
    1ff8:	e4 0d       	add	r30, r4
    1ffa:	f5 1d       	adc	r31, r5
            /// TODO: send NACK
            continue;
        }
		
        // message handler
        if( port[p].rq.index < POINTER_SIZE )
    1ffc:	82 30       	cpi	r24, 0x02	; 2
    1ffe:	10 f4       	brcc	.+4      	; 0x2004 <processBuffer+0x192>
        {
            currChunk->handler[port[p].rq.index] = currByte;
    2000:	64 8b       	std	Z+20, r22	; 0x14
    2002:	02 c0       	rjmp	.+4      	; 0x2008 <processBuffer+0x196>
        }
        // regular byte
        else
        {
            currChunk->data[port[p].rq.index-POINTER_SIZE] = currByte;
    2004:	32 97       	sbiw	r30, 0x02	; 2
    2006:	60 83       	st	Z, r22
        }

        port[p].rq.checksum = crcCalc(port[p].rq.checksum, currByte);
    2008:	f5 01       	movw	r30, r10
    200a:	80 81       	ld	r24, Z
    200c:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <crcCalc>
    2010:	f5 01       	movw	r30, r10
    2012:	80 83       	st	Z, r24
        port[p].rq.index++;
    2014:	f6 01       	movw	r30, r12
    2016:	80 81       	ld	r24, Z
    2018:	8f 5f       	subi	r24, 0xFF	; 255
    201a:	80 83       	st	Z, r24
            byte parity = setParityFromByte(currByte);
        
            // restart the fill
            port[p].rq.index    = 0;
            port[p].rq.checksum = 0;
            wasEscape           = 0;
    201c:	21 2c       	mov	r2, r1
    201e:	1a c0       	rjmp	.+52     	; 0x2054 <processBuffer+0x1e2>
        }
        
        // is an escape char        
        if( currByte == ESCAPE )
        {
            wasEscape = 1;   
    2020:	22 24       	eor	r2, r2
    2022:	23 94       	inc	r2
    2024:	17 c0       	rjmp	.+46     	; 0x2054 <processBuffer+0x1e2>
            currByte ^= ESCAPE_CHAR;
            wasEscape = 0;
        }

        // is transmitted checksum
        if( port[p].rq.index >= (DATA_SIZE + POINTER_SIZE) )
    2026:	88 e5       	ldi	r24, 0x58	; 88
    2028:	8e 9d       	mul	r24, r14
    202a:	e0 01       	movw	r28, r0
    202c:	8f 9d       	mul	r24, r15
    202e:	d0 0d       	add	r29, r0
    2030:	11 24       	eor	r1, r1
    2032:	c4 5c       	subi	r28, 0xC4	; 196
    2034:	dc 4d       	sbci	r29, 0xDC	; 220
    2036:	6e 01       	movw	r12, r28
    2038:	f3 e1       	ldi	r31, 0x13	; 19
    203a:	cf 0e       	add	r12, r31
    203c:	d1 1c       	adc	r13, r1
        else
        {
            currChunk->data[port[p].rq.index-POINTER_SIZE] = currByte;
        }

        port[p].rq.checksum = crcCalc(port[p].rq.checksum, currByte);
    203e:	5e 01       	movw	r10, r28
    2040:	24 e1       	ldi	r18, 0x14	; 20
    2042:	a2 0e       	add	r10, r18
    2044:	b1 1c       	adc	r11, r1
        {
            // checksum matches!
            if( currByte == port[p].rq.checksum )
            {
                currChunk->status &= ~CHUNK_FILLING;
                port[p].rq.flags  |=  CHUNK_READY;
    2046:	8e 01       	movw	r16, r28
    2048:	0b 5e       	subi	r16, 0xEB	; 235
    204a:	1f 4f       	sbci	r17, 0xFF	; 255
                {
                    freeChunk(currChunk);
                }
              
                // remove from the port rq
                port[p].rq.curr = NULL;
    204c:	4e 01       	movw	r8, r28
    204e:	36 e1       	ldi	r19, 0x16	; 22
    2050:	83 0e       	add	r8, r19
    2052:	91 1c       	adc	r9, r1
        port[p].rq.index    = 0;
        port[p].rq.checksum = 0;
        wasEscape           = 0;
    }
                
    while( !isEmpty(&(port[p].rx)) )
    2054:	c3 01       	movw	r24, r6
    2056:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <isEmpty>
    205a:	88 23       	and	r24, r24
    205c:	09 f4       	brne	.+2      	; 0x2060 <processBuffer+0x1ee>
    205e:	4d cf       	rjmp	.-358    	; 0x1efa <processBuffer+0x88>
        port[p].rq.checksum = crcCalc(port[p].rq.checksum, currByte);
        port[p].rq.index++;
    }
    
    // store wasEscape
    wasEscapeStore[p] = wasEscape;
    2060:	f7 01       	movw	r30, r14
    2062:	eb 59       	subi	r30, 0x9B	; 155
    2064:	fa 4d       	sbci	r31, 0xDA	; 218
    2066:	20 82       	st	Z, r2
}
    2068:	df 91       	pop	r29
    206a:	cf 91       	pop	r28
    206c:	1f 91       	pop	r17
    206e:	0f 91       	pop	r16
    2070:	ff 90       	pop	r15
    2072:	ef 90       	pop	r14
    2074:	df 90       	pop	r13
    2076:	cf 90       	pop	r12
    2078:	bf 90       	pop	r11
    207a:	af 90       	pop	r10
    207c:	9f 90       	pop	r9
    207e:	8f 90       	pop	r8
    2080:	7f 90       	pop	r7
    2082:	6f 90       	pop	r6
    2084:	5f 90       	pop	r5
    2086:	4f 90       	pop	r4
    2088:	3f 90       	pop	r3
    208a:	2f 90       	pop	r2
    208c:	08 95       	ret

0000208e <nextPacket>:
Chunk* nextPacket(void)
{
    Chunk* c = NULL;

    // no packets
    if( globalRq.head == NULL )
    208e:	e0 91 32 20 	lds	r30, 0x2032
    2092:	f0 91 33 20 	lds	r31, 0x2033
    2096:	30 97       	sbiw	r30, 0x00	; 0
    2098:	51 f4       	brne	.+20     	; 0x20ae <nextPacket+0x20>
    {
        globalRq.tail = NULL;
    209a:	10 92 34 20 	sts	0x2034, r1
    209e:	10 92 35 20 	sts	0x2035, r1
        globalRq.flags &= ~PACKET_READY;
    20a2:	80 91 36 20 	lds	r24, 0x2036
    20a6:	8f 77       	andi	r24, 0x7F	; 127
    20a8:	80 93 36 20 	sts	0x2036, r24
        return NULL;
    20ac:	13 c0       	rjmp	.+38     	; 0x20d4 <nextPacket+0x46>
    }

    // update pointers
    c = globalRq.head;
    
    globalRq.head = c->next;
    20ae:	82 89       	ldd	r24, Z+18	; 0x12
    20b0:	93 89       	ldd	r25, Z+19	; 0x13
    20b2:	80 93 32 20 	sts	0x2032, r24
    20b6:	90 93 33 20 	sts	0x2033, r25
    if( globalRq.head == NULL )
    20ba:	89 2b       	or	r24, r25
    20bc:	49 f4       	brne	.+18     	; 0x20d0 <nextPacket+0x42>
    {
        globalRq.flags &= ~PACKET_READY;
    20be:	80 91 36 20 	lds	r24, 0x2036
    20c2:	8f 77       	andi	r24, 0x7F	; 127
    20c4:	80 93 36 20 	sts	0x2036, r24
        globalRq.tail = NULL;
    20c8:	10 92 34 20 	sts	0x2034, r1
    20cc:	10 92 35 20 	sts	0x2035, r1
    }
    
    // isolate and return
    c->next = NULL;
    20d0:	12 8a       	std	Z+18, r1	; 0x12
    20d2:	13 8a       	std	Z+19, r1	; 0x13
    return c;
}
    20d4:	cf 01       	movw	r24, r30
    20d6:	08 95       	ret

000020d8 <sendOnSerial>:

// try sending stuff if available and ready
void sendOnSerial(PRef p)
{
    20d8:	df 92       	push	r13
    20da:	ef 92       	push	r14
    20dc:	ff 92       	push	r15
    20de:	0f 93       	push	r16
    20e0:	1f 93       	push	r17
    20e2:	cf 93       	push	r28
    20e4:	df 93       	push	r29
    20e6:	d8 2e       	mov	r13, r24
    // send acks
    if( shouldSendOddAck(port[p].sq) )
    20e8:	e8 2e       	mov	r14, r24
    20ea:	f1 2c       	mov	r15, r1
    20ec:	88 e5       	ldi	r24, 0x58	; 88
    20ee:	d8 9e       	mul	r13, r24
    20f0:	80 01       	movw	r16, r0
    20f2:	11 24       	eor	r1, r1
    20f4:	e8 01       	movw	r28, r16
    20f6:	c4 5c       	subi	r28, 0xC4	; 196
    20f8:	dc 4d       	sbci	r29, 0xDC	; 220
    20fa:	8e 85       	ldd	r24, Y+14	; 0x0e
    20fc:	81 ff       	sbrs	r24, 1
    20fe:	10 c0       	rjmp	.+32     	; 0x2120 <sendOnSerial+0x48>
    {
        if( isEmpty(&(port[p].tx)) ) {
    2100:	0c 58       	subi	r16, 0x8C	; 140
    2102:	1c 4d       	sbci	r17, 0xDC	; 220
    2104:	c8 01       	movw	r24, r16
    2106:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <isEmpty>
    210a:	88 23       	and	r24, r24
    210c:	29 f0       	breq	.+10     	; 0x2118 <sendOnSerial+0x40>
            pPutChar(ACK | ODD, port[p].pnum);
    210e:	68 81       	ld	r22, Y
    2110:	89 e0       	ldi	r24, 0x09	; 9
    2112:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <pPutChar>
    2116:	04 c0       	rjmp	.+8      	; 0x2120 <sendOnSerial+0x48>
        }
        else {
            push(ACK | ODD, &(port[p].tx));
    2118:	b8 01       	movw	r22, r16
    211a:	89 e0       	ldi	r24, 0x09	; 9
    211c:	0e 94 b4 01 	call	0x368	; 0x368 <push>
        }
    }
    if( shouldSendEvenAck(port[p].sq) )
    2120:	88 e5       	ldi	r24, 0x58	; 88
    2122:	8e 9d       	mul	r24, r14
    2124:	e0 01       	movw	r28, r0
    2126:	8f 9d       	mul	r24, r15
    2128:	d0 0d       	add	r29, r0
    212a:	11 24       	eor	r1, r1
    212c:	8e 01       	movw	r16, r28
    212e:	04 5c       	subi	r16, 0xC4	; 196
    2130:	1c 4d       	sbci	r17, 0xDC	; 220
    2132:	f8 01       	movw	r30, r16
    2134:	86 85       	ldd	r24, Z+14	; 0x0e
    2136:	80 ff       	sbrs	r24, 0
    2138:	11 c0       	rjmp	.+34     	; 0x215c <sendOnSerial+0x84>
    {
        if( isEmpty(&(port[p].tx)) ) {
    213a:	cc 58       	subi	r28, 0x8C	; 140
    213c:	dc 4d       	sbci	r29, 0xDC	; 220
    213e:	ce 01       	movw	r24, r28
    2140:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <isEmpty>
    2144:	88 23       	and	r24, r24
    2146:	31 f0       	breq	.+12     	; 0x2154 <sendOnSerial+0x7c>
            pPutChar(ACK | EVEN, port[p].pnum);
    2148:	f8 01       	movw	r30, r16
    214a:	60 81       	ld	r22, Z
    214c:	88 e0       	ldi	r24, 0x08	; 8
    214e:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <pPutChar>
    2152:	04 c0       	rjmp	.+8      	; 0x215c <sendOnSerial+0x84>
        }
        else {
            push(ACK | EVEN, &(port[p].tx));
    2154:	be 01       	movw	r22, r28
    2156:	88 e0       	ldi	r24, 0x08	; 8
    2158:	0e 94 b4 01 	call	0x368	; 0x368 <push>
        }
    }
    clearSendAcks(port[p].sq);
    215c:	88 e5       	ldi	r24, 0x58	; 88
    215e:	8e 9d       	mul	r24, r14
    2160:	80 01       	movw	r16, r0
    2162:	8f 9d       	mul	r24, r15
    2164:	10 0d       	add	r17, r0
    2166:	11 24       	eor	r1, r1
    2168:	e8 01       	movw	r28, r16
    216a:	c4 5c       	subi	r28, 0xC4	; 196
    216c:	dc 4d       	sbci	r29, 0xDC	; 220
    216e:	4e 85       	ldd	r20, Y+14	; 0x0e
    2170:	4c 7f       	andi	r20, 0xFC	; 252
    2172:	4e 87       	std	Y+14, r20	; 0x0e
    
    // send Chunk?
    if( chunkReady(port[p].sq) )
    2174:	47 ff       	sbrs	r20, 7
    2176:	37 c0       	rjmp	.+110    	; 0x21e6 <sendOnSerial+0x10e>
    {
        if( clearToSend(port[p].sq) )
    2178:	46 ff       	sbrs	r20, 6
    217a:	35 c0       	rjmp	.+106    	; 0x21e6 <sendOnSerial+0x10e>
        {
            // out of retries
            if( (port[p].sq.retry <= 0) || (port[p].sq.retry > NUM_RETRIES))
    217c:	8d 85       	ldd	r24, Y+13	; 0x0d
    217e:	81 50       	subi	r24, 0x01	; 1
    2180:	84 30       	cpi	r24, 0x04	; 4
    2182:	78 f0       	brcs	.+30     	; 0x21a2 <sendOnSerial+0xca>
            {
                // reset the timer
                deregisterTimeout(&(port[p].sq.qtout.tout));
    2184:	c8 01       	movw	r24, r16
    2186:	83 5c       	subi	r24, 0xC3	; 195
    2188:	9c 4d       	sbci	r25, 0xDC	; 220
    218a:	0e 94 f7 08 	call	0x11ee	; 0x11ee <deregisterTimeout>

                // flush the queue
                flushSendQueue(p);
    218e:	8d 2d       	mov	r24, r13
    2190:	0e 94 48 02 	call	0x490	; 0x490 <flushSendQueue>
                        
                // reset the flags
                port[p].sq.retry    = NUM_RETRIES;
    2194:	94 e0       	ldi	r25, 0x04	; 4
    2196:	9d 87       	std	Y+13, r25	; 0x0d
                port[p].sq.flags   |= CLEAR_TO_SEND;
    2198:	8e 85       	ldd	r24, Y+14	; 0x0e
    219a:	80 64       	ori	r24, 0x40	; 64
                flipParity(port[p].sq);
    219c:	89 27       	eor	r24, r25
    219e:	8e 87       	std	Y+14, r24	; 0x0e

                // ensemble level updates - remove neighbor, restart neighbor scanning
                //     These don't belong in data-link in my opinion
                //restartScan(p);

                return;
    21a0:	22 c0       	rjmp	.+68     	; 0x21e6 <sendOnSerial+0x10e>
            }
            port[p].sq.retry--;
    21a2:	8d 87       	std	Y+13, r24	; 0x0d

            sendToBuffer(p, port[p].sq.head, sendParity(port[p].sq) );
    21a4:	42 fb       	bst	r20, 2
    21a6:	44 27       	eor	r20, r20
    21a8:	40 f9       	bld	r20, 0
    21aa:	6f 85       	ldd	r22, Y+15	; 0x0f
    21ac:	78 89       	ldd	r23, Y+16	; 0x10
    21ae:	8d 2d       	mov	r24, r13
    21b0:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <sendToBuffer>
            port[p].sq.flags &= ~CLEAR_TO_SEND;
    21b4:	8e 85       	ldd	r24, Y+14	; 0x0e
    21b6:	8f 7b       	andi	r24, 0xBF	; 191
    21b8:	8e 87       	std	Y+14, r24	; 0x0e
            
            // start the timeout
            port[p].sq.qtout.tout.calltime = getTime() + DEFAULT_TIMEOUT;
    21ba:	0e 94 64 08 	call	0x10c8	; 0x10c8 <getTime>
    21be:	6e 5c       	subi	r22, 0xCE	; 206
    21c0:	7f 4f       	sbci	r23, 0xFF	; 255
    21c2:	8f 4f       	sbci	r24, 0xFF	; 255
    21c4:	9f 4f       	sbci	r25, 0xFF	; 255
    21c6:	6b 83       	std	Y+3, r22	; 0x03
    21c8:	7c 83       	std	Y+4, r23	; 0x04
    21ca:	8d 83       	std	Y+5, r24	; 0x05
    21cc:	9e 83       	std	Y+6, r25	; 0x06
            registerTimeout(&(port[p].sq.qtout.tout));
    21ce:	c8 01       	movw	r24, r16
    21d0:	83 5c       	subi	r24, 0xC3	; 195
    21d2:	9c 4d       	sbci	r25, 0xDC	; 220
        }
    }
}
    21d4:	df 91       	pop	r29
    21d6:	cf 91       	pop	r28
    21d8:	1f 91       	pop	r17
    21da:	0f 91       	pop	r16
    21dc:	ff 90       	pop	r15
    21de:	ef 90       	pop	r14
    21e0:	df 90       	pop	r13
            sendToBuffer(p, port[p].sq.head, sendParity(port[p].sq) );
            port[p].sq.flags &= ~CLEAR_TO_SEND;
            
            // start the timeout
            port[p].sq.qtout.tout.calltime = getTime() + DEFAULT_TIMEOUT;
            registerTimeout(&(port[p].sq.qtout.tout));
    21e2:	0c 94 af 08 	jmp	0x115e	; 0x115e <registerTimeout>
        }
    }
}
    21e6:	df 91       	pop	r29
    21e8:	cf 91       	pop	r28
    21ea:	1f 91       	pop	r17
    21ec:	0f 91       	pop	r16
    21ee:	ff 90       	pop	r15
    21f0:	ef 90       	pop	r14
    21f2:	df 90       	pop	r13
    21f4:	08 95       	ret

000021f6 <initHWDataLink>:

// initialize
void initHWDataLink(){
    21f6:	08 95       	ret

000021f8 <setHWLED>:
	
	//r = 255 - r;
	//g = 255 - g;
	//b = 255 - b;

	currentRGB[0] = r;
    21f8:	80 93 f3 20 	sts	0x20F3, r24
	currentRGB[1] = g;
    21fc:	60 93 f4 20 	sts	0x20F4, r22
	currentRGB[2] = b;
    2200:	40 93 f5 20 	sts	0x20F5, r20

	rr = (uint16_t)i*(uint16_t)r;
    2204:	28 9f       	mul	r18, r24
    2206:	c0 01       	movw	r24, r0
    2208:	11 24       	eor	r1, r1
	gg = (uint16_t)i*(uint16_t)g;
    220a:	26 9f       	mul	r18, r22
    220c:	b0 01       	movw	r22, r0
    220e:	11 24       	eor	r1, r1
	bb = (uint16_t)i*(uint16_t)b;
    2210:	24 9f       	mul	r18, r20
    2212:	a0 01       	movw	r20, r0
    2214:	11 24       	eor	r1, r1
	
	rr = 0xFFFF - rr;
    2216:	80 95       	com	r24
    2218:	90 95       	com	r25
	gg = 0xFFFF - gg;
    221a:	60 95       	com	r22
    221c:	70 95       	com	r23
	bb = 0xFFFF - bb;
    221e:	40 95       	com	r20
    2220:	50 95       	com	r21
	
	TCC0.CCABUF = rr;
    2222:	e0 e0       	ldi	r30, 0x00	; 0
    2224:	f8 e0       	ldi	r31, 0x08	; 8
    2226:	80 af       	std	Z+56, r24	; 0x38
    2228:	91 af       	std	Z+57, r25	; 0x39
	TCC0.CCBBUF = rr;
    222a:	82 af       	std	Z+58, r24	; 0x3a
    222c:	93 af       	std	Z+59, r25	; 0x3b

	TCD0.CCABUF = gg;
    222e:	e0 e0       	ldi	r30, 0x00	; 0
    2230:	f9 e0       	ldi	r31, 0x09	; 9
    2232:	60 af       	std	Z+56, r22	; 0x38
    2234:	71 af       	std	Z+57, r23	; 0x39
	TCD0.CCBBUF = bb;
    2236:	42 af       	std	Z+58, r20	; 0x3a
    2238:	53 af       	std	Z+59, r21	; 0x3b
	
	TCC1.CCABUF = gg;
    223a:	e0 e4       	ldi	r30, 0x40	; 64
    223c:	f8 e0       	ldi	r31, 0x08	; 8
    223e:	60 af       	std	Z+56, r22	; 0x38
    2240:	71 af       	std	Z+57, r23	; 0x39
	TCC1.CCBBUF = bb;
    2242:	42 af       	std	Z+58, r20	; 0x3a
    2244:	53 af       	std	Z+59, r21	; 0x3b
    2246:	08 95       	ret

00002248 <initHWLED>:


void initHWLED()
{
	// Initialize the RED
	TCC0.CTRLA |= TC_CLKSEL_DIV4_gc;	// RED clock source
    2248:	e0 e0       	ldi	r30, 0x00	; 0
    224a:	f8 e0       	ldi	r31, 0x08	; 8
    224c:	80 81       	ld	r24, Z
    224e:	83 60       	ori	r24, 0x03	; 3
    2250:	80 83       	st	Z, r24
	TCC0.CTRLB = TC0_CCAEN_bm | TC0_CCBEN_bm | TC_WGMODE_SS_gc;	// enable REDs, set WGM to SS PWM
    2252:	33 e3       	ldi	r19, 0x33	; 51
    2254:	31 83       	std	Z+1, r19	; 0x01
	TCC0.PERBUF = 0xFFFF;		// set period to 8-bit for 8-bit resolution
    2256:	8f ef       	ldi	r24, 0xFF	; 255
    2258:	9f ef       	ldi	r25, 0xFF	; 255
    225a:	86 ab       	std	Z+54, r24	; 0x36
    225c:	97 ab       	std	Z+55, r25	; 0x37
	TCC0.CCABUF = 0;		// set to off by default
    225e:	10 ae       	std	Z+56, r1	; 0x38
    2260:	11 ae       	std	Z+57, r1	; 0x39
	TCC0.CCBBUF = 0;		// set to off by default
    2262:	12 ae       	std	Z+58, r1	; 0x3a
    2264:	13 ae       	std	Z+59, r1	; 0x3b
	PORTC.DIRSET = PIN0_bm | PIN1_bm;  // set REDs to OUTPUT
    2266:	a0 e4       	ldi	r26, 0x40	; 64
    2268:	b6 e0       	ldi	r27, 0x06	; 6
    226a:	23 e0       	ldi	r18, 0x03	; 3
    226c:	11 96       	adiw	r26, 0x01	; 1
    226e:	2c 93       	st	X, r18
    2270:	11 97       	sbiw	r26, 0x01	; 1

	TCC1.CTRLA = TC_CLKSEL_DIV4_gc;	// BLUE clock source
    2272:	e0 e4       	ldi	r30, 0x40	; 64
    2274:	f8 e0       	ldi	r31, 0x08	; 8
    2276:	20 83       	st	Z, r18
	TCC1.CTRLB = TC1_CCAEN_bm | TC1_CCBEN_bm | TC_WGMODE_SS_gc;	// enable BLUEs, set WGM to SS PWM
    2278:	31 83       	std	Z+1, r19	; 0x01
	TCC1.PERBUF = 0xFFFF;		// set period to 8-bit for 8-bit resolution
    227a:	86 ab       	std	Z+54, r24	; 0x36
    227c:	97 ab       	std	Z+55, r25	; 0x37
	TCC1.CCABUF = 0;		// set to off by default
    227e:	10 ae       	std	Z+56, r1	; 0x38
    2280:	11 ae       	std	Z+57, r1	; 0x39
	TCC1.CCBBUF = 0;		// set to off by default
    2282:	12 ae       	std	Z+58, r1	; 0x3a
    2284:	13 ae       	std	Z+59, r1	; 0x3b
	PORTC.DIRSET = PIN4_bm | PIN5_bm;  // set BLUEs to OUTPUT
    2286:	40 e3       	ldi	r20, 0x30	; 48
    2288:	11 96       	adiw	r26, 0x01	; 1
    228a:	4c 93       	st	X, r20

	TCD0.CTRLA = TC_CLKSEL_DIV4_gc;	// GREEN clock source
    228c:	e0 e0       	ldi	r30, 0x00	; 0
    228e:	f9 e0       	ldi	r31, 0x09	; 9
    2290:	20 83       	st	Z, r18
	TCD0.CTRLB = TC0_CCAEN_bm | TC0_CCBEN_bm | TC_WGMODE_SS_gc;	// enable REDs, set WGM to SS PWM
    2292:	31 83       	std	Z+1, r19	; 0x01
	TCD0.PERBUF = 0xFFFF;		// set period to 8-bit for 8-bit resolution
    2294:	86 ab       	std	Z+54, r24	; 0x36
    2296:	97 ab       	std	Z+55, r25	; 0x37
	TCD0.CCABUF = 0;		// set to off by default
    2298:	10 ae       	std	Z+56, r1	; 0x38
    229a:	11 ae       	std	Z+57, r1	; 0x39
	TCD0.CCBBUF = 0;		// set to off by default
    229c:	12 ae       	std	Z+58, r1	; 0x3a
    229e:	13 ae       	std	Z+59, r1	; 0x3b
	PORTD.DIRSET = PIN0_bm | PIN1_bm;  // set GREENs to OUTPUT	
    22a0:	e0 e6       	ldi	r30, 0x60	; 96
    22a2:	f6 e0       	ldi	r31, 0x06	; 6
    22a4:	21 83       	std	Z+1, r18	; 0x01
    22a6:	08 95       	ret

000022a8 <store>:
//
//  nv_addr points to the desired EEMEM structure address (if you declared it using 'type EEMEM mydata', then '(char *)&mydata'
//  data points to the desired SRAM structure address
//  len    is sizeof(type)
void store(void * nv_addr, void * data, int len)
{
    22a8:	cf 92       	push	r12
    22aa:	df 92       	push	r13
    22ac:	ef 92       	push	r14
    22ae:	ff 92       	push	r15
    22b0:	0f 93       	push	r16
    22b2:	1f 93       	push	r17
    22b4:	cf 93       	push	r28
    22b6:	df 93       	push	r29
    22b8:	8c 01       	movw	r16, r24
    22ba:	7b 01       	movw	r14, r22
    22bc:	ea 01       	movw	r28, r20
    while(len != 0)
    {
        // grab the page offset address from the current
        partial_offset = (uint16_t)nv_addr & (EEPROM_PAGESIZE - 1);
    
        partial_length = EEPROM_PAGESIZE - partial_offset;
    22be:	30 e2       	ldi	r19, 0x20	; 32
    22c0:	c3 2e       	mov	r12, r19
//  len    is sizeof(type)
void store(void * nv_addr, void * data, int len)
{
    uint8_t partial_offset, partial_length;

    while(len != 0)
    22c2:	1e c0       	rjmp	.+60     	; 0x2300 <store+0x58>
    {
        // grab the page offset address from the current
        partial_offset = (uint16_t)nv_addr & (EEPROM_PAGESIZE - 1);
    22c4:	60 2f       	mov	r22, r16
    22c6:	6f 71       	andi	r22, 0x1F	; 31
    
        partial_length = EEPROM_PAGESIZE - partial_offset;
    22c8:	dc 2c       	mov	r13, r12
    22ca:	d6 1a       	sub	r13, r22
        
        if(partial_length > len)
    22cc:	8d 2d       	mov	r24, r13
    22ce:	90 e0       	ldi	r25, 0x00	; 0
    22d0:	c8 17       	cp	r28, r24
    22d2:	d9 07       	cpc	r29, r25
    22d4:	0c f4       	brge	.+2      	; 0x22d8 <store+0x30>
        {
            partial_length = len;
    22d6:	dc 2e       	mov	r13, r28
        }

        EEPROM_LoadPartialPage(data, partial_offset, partial_length);
    22d8:	4d 2d       	mov	r20, r13
    22da:	c7 01       	movw	r24, r14
    22dc:	0e 94 9d 0a 	call	0x153a	; 0x153a <EEPROM_LoadPartialPage>
        EEPROM_AtomicWritePage((uint16_t)nv_addr / (EEPROM_PAGESIZE));
    22e0:	c8 01       	movw	r24, r16
    22e2:	25 e0       	ldi	r18, 0x05	; 5
    22e4:	96 95       	lsr	r25
    22e6:	87 95       	ror	r24
    22e8:	2a 95       	dec	r18
    22ea:	e1 f7       	brne	.-8      	; 0x22e4 <store+0x3c>
    22ec:	0e 94 c8 0a 	call	0x1590	; 0x1590 <EEPROM_AtomicWritePage>

        len -= partial_length;
    22f0:	4d 2d       	mov	r20, r13
    22f2:	50 e0       	ldi	r21, 0x00	; 0
    22f4:	c4 1b       	sub	r28, r20
    22f6:	d5 0b       	sbc	r29, r21
        nv_addr += partial_length;
    22f8:	04 0f       	add	r16, r20
    22fa:	15 1f       	adc	r17, r21
        data += partial_length;
    22fc:	e4 0e       	add	r14, r20
    22fe:	f5 1e       	adc	r15, r21
//  len    is sizeof(type)
void store(void * nv_addr, void * data, int len)
{
    uint8_t partial_offset, partial_length;

    while(len != 0)
    2300:	20 97       	sbiw	r28, 0x00	; 0
    2302:	01 f7       	brne	.-64     	; 0x22c4 <store+0x1c>
        len -= partial_length;
        nv_addr += partial_length;
        data += partial_length;
    }
    
}
    2304:	df 91       	pop	r29
    2306:	cf 91       	pop	r28
    2308:	1f 91       	pop	r17
    230a:	0f 91       	pop	r16
    230c:	ff 90       	pop	r15
    230e:	ef 90       	pop	r14
    2310:	df 90       	pop	r13
    2312:	cf 90       	pop	r12
    2314:	08 95       	ret

00002316 <restore>:

// this could be done in pages but reads are pretty quick so it shouldn't matter
void restore(void * vaddr, void * vnv_addr, int len)
{    
    2316:	ef 92       	push	r14
    2318:	ff 92       	push	r15
    231a:	0f 93       	push	r16
    231c:	1f 93       	push	r17
    231e:	cf 93       	push	r28
    2320:	df 93       	push	r29
    2322:	7a 01       	movw	r14, r20
    }
    
}

// this could be done in pages but reads are pretty quick so it shouldn't matter
void restore(void * vaddr, void * vnv_addr, int len)
    2324:	e6 0e       	add	r14, r22
    2326:	f7 1e       	adc	r15, r23
{    
	byte *addr=(byte *)vaddr;
	byte *nv_addr=(byte *) vnv_addr;
    2328:	eb 01       	movw	r28, r22
}

// this could be done in pages but reads are pretty quick so it shouldn't matter
void restore(void * vaddr, void * vnv_addr, int len)
{    
	byte *addr=(byte *)vaddr;
    232a:	8c 01       	movw	r16, r24
	byte *nv_addr=(byte *) vnv_addr;
    while(len != 0)
    232c:	0f c0       	rjmp	.+30     	; 0x234c <restore+0x36>
    {
        *addr = EEPROM_ReadByte(((uint16_t)(nv_addr) / (EEPROM_PAGESIZE)), (uint16_t)(nv_addr) & (EEPROM_PAGESIZE-1));
    232e:	be 01       	movw	r22, r28
    2330:	6f 71       	andi	r22, 0x1F	; 31
    2332:	77 27       	eor	r23, r23
    2334:	ce 01       	movw	r24, r28
    2336:	45 e0       	ldi	r20, 0x05	; 5
    2338:	96 95       	lsr	r25
    233a:	87 95       	ror	r24
    233c:	4a 95       	dec	r20
    233e:	e1 f7       	brne	.-8      	; 0x2338 <restore+0x22>
    2340:	0e 94 f6 09 	call	0x13ec	; 0x13ec <EEPROM_ReadByte>
    2344:	f8 01       	movw	r30, r16
    2346:	81 93       	st	Z+, r24
    2348:	8f 01       	movw	r16, r30
        nv_addr++;
    234a:	21 96       	adiw	r28, 0x01	; 1
// this could be done in pages but reads are pretty quick so it shouldn't matter
void restore(void * vaddr, void * vnv_addr, int len)
{    
	byte *addr=(byte *)vaddr;
	byte *nv_addr=(byte *) vnv_addr;
    while(len != 0)
    234c:	ce 15       	cp	r28, r14
    234e:	df 05       	cpc	r29, r15
    2350:	71 f7       	brne	.-36     	; 0x232e <restore+0x18>
        *addr = EEPROM_ReadByte(((uint16_t)(nv_addr) / (EEPROM_PAGESIZE)), (uint16_t)(nv_addr) & (EEPROM_PAGESIZE-1));
        nv_addr++;
        addr++;
        len--;
    }
}
    2352:	df 91       	pop	r29
    2354:	cf 91       	pop	r28
    2356:	1f 91       	pop	r17
    2358:	0f 91       	pop	r16
    235a:	ff 90       	pop	r15
    235c:	ef 90       	pop	r14
    235e:	08 95       	ret

00002360 <getGUID>:
#define ID_BYTE_ADDR 0x00


/* TODO: This is WRONG. It should be Uid, but the build system is being stupid and now is not a good time to spend forever trying to fix it. */
//reads GUID from eeprom
uint16_t getGUID(){
    2360:	cf 93       	push	r28
  //return 255;
	//TODO: read from eeprom
  return (((uint16_t)EEPROM_ReadByte(ID_PAGE_ADDR, ID_BYTE_ADDR))<<8) |
    2362:	60 e0       	ldi	r22, 0x00	; 0
    2364:	80 e0       	ldi	r24, 0x00	; 0
    2366:	0e 94 f6 09 	call	0x13ec	; 0x13ec <EEPROM_ReadByte>
    236a:	c8 2f       	mov	r28, r24
	  ((uint16_t)EEPROM_ReadByte(ID_PAGE_ADDR, ID_BYTE_ADDR+1));
    236c:	61 e0       	ldi	r22, 0x01	; 1
    236e:	80 e0       	ldi	r24, 0x00	; 0
    2370:	0e 94 f6 09 	call	0x13ec	; 0x13ec <EEPROM_ReadByte>
/* TODO: This is WRONG. It should be Uid, but the build system is being stupid and now is not a good time to spend forever trying to fix it. */
//reads GUID from eeprom
uint16_t getGUID(){
  //return 255;
	//TODO: read from eeprom
  return (((uint16_t)EEPROM_ReadByte(ID_PAGE_ADDR, ID_BYTE_ADDR))<<8) |
    2374:	3c 2f       	mov	r19, r28
    2376:	20 e0       	ldi	r18, 0x00	; 0
    2378:	28 2b       	or	r18, r24
	  ((uint16_t)EEPROM_ReadByte(ID_PAGE_ADDR, ID_BYTE_ADDR+1));
}
    237a:	c9 01       	movw	r24, r18
    237c:	cf 91       	pop	r28
    237e:	08 95       	ret

00002380 <u_putchar>:
void initHWUart(USART_t * uart);


void u_putchar(char c, USART_t * uart)
{
	while(!(uart->STATUS & USART_DREIF_bm));
    2380:	fb 01       	movw	r30, r22
    2382:	91 81       	ldd	r25, Z+1	; 0x01
    2384:	95 ff       	sbrs	r25, 5
    2386:	fc cf       	rjmp	.-8      	; 0x2380 <u_putchar>
    //loop_until_bit_is_set(UCSR0A, UDRE0);
	// Load buffer with your character
    uart->DATA = c;
    2388:	80 83       	st	Z, r24
    238a:	08 95       	ret

0000238c <u_getchar>:
int	u_getchar(USART_t * uart)
{
	//char c;
	// Wait for the receive buffer to be filled
    //loop_until_bit_is_set(UCSR0A, RXC0);
	if((uart->STATUS & USART_RXCIF_bm))
    238c:	fc 01       	movw	r30, r24
    238e:	21 81       	ldd	r18, Z+1	; 0x01
    2390:	27 ff       	sbrs	r18, 7
    2392:	03 c0       	rjmp	.+6      	; 0x239a <u_getchar+0xe>
	{
		// Read the receive buffer
		//c = uart->DATA;
		return uart->DATA;
    2394:	20 81       	ld	r18, Z
    2396:	30 e0       	ldi	r19, 0x00	; 0
    2398:	02 c0       	rjmp	.+4      	; 0x239e <u_getchar+0x12>
	}
	else
	{
		return -1;
    239a:	2f ef       	ldi	r18, 0xFF	; 255
    239c:	3f ef       	ldi	r19, 0xFF	; 255
	}
}
    239e:	c9 01       	movw	r24, r18
    23a0:	08 95       	ret

000023a2 <pPutChar>:

void pPutChar(char c, PRef p)
{
	if(p >= 0 && p < NUM_PORTS)
    23a2:	66 30       	cpi	r22, 0x06	; 6
    23a4:	78 f4       	brcc	.+30     	; 0x23c4 <pPutChar+0x22>
	{
		if(hwPort[p].ptype == HARDWARE_UART)
    23a6:	70 e0       	ldi	r23, 0x00	; 0
    23a8:	fb 01       	movw	r30, r22
    23aa:	ee 0f       	add	r30, r30
    23ac:	ff 1f       	adc	r31, r31
    23ae:	e6 0f       	add	r30, r22
    23b0:	f7 1f       	adc	r31, r23
    23b2:	e5 59       	subi	r30, 0x95	; 149
    23b4:	fa 4d       	sbci	r31, 0xDA	; 218
    23b6:	92 81       	ldd	r25, Z+2	; 0x02
    23b8:	91 11       	cpse	r25, r1
    23ba:	04 c0       	rjmp	.+8      	; 0x23c4 <pPutChar+0x22>
		{
			u_putchar(c, hwPort[p].uart.huart);
    23bc:	60 81       	ld	r22, Z
    23be:	71 81       	ldd	r23, Z+1	; 0x01
    23c0:	0c 94 c0 11 	jmp	0x2380	; 0x2380 <u_putchar>
    23c4:	08 95       	ret

000023c6 <pGetChar>:
	}
}

int pGetChar(PRef p)
{
	if(p >= 0 && p < NUM_PORTS)
    23c6:	86 30       	cpi	r24, 0x06	; 6
    23c8:	a0 f4       	brcc	.+40     	; 0x23f2 <pGetChar+0x2c>
	{
		if(hwPort[p].ptype == HARDWARE_UART)
    23ca:	90 e0       	ldi	r25, 0x00	; 0
    23cc:	fc 01       	movw	r30, r24
    23ce:	ee 0f       	add	r30, r30
    23d0:	ff 1f       	adc	r31, r31
    23d2:	e8 0f       	add	r30, r24
    23d4:	f9 1f       	adc	r31, r25
    23d6:	e5 59       	subi	r30, 0x95	; 149
    23d8:	fa 4d       	sbci	r31, 0xDA	; 218
    23da:	82 81       	ldd	r24, Z+2	; 0x02
    23dc:	81 11       	cpse	r24, r1
    23de:	09 c0       	rjmp	.+18     	; 0x23f2 <pGetChar+0x2c>
		{
			return u_getchar(hwPort[p].uart.huart);
    23e0:	01 90       	ld	r0, Z+
    23e2:	f0 81       	ld	r31, Z
    23e4:	e0 2d       	mov	r30, r0
int	u_getchar(USART_t * uart)
{
	//char c;
	// Wait for the receive buffer to be filled
    //loop_until_bit_is_set(UCSR0A, RXC0);
	if((uart->STATUS & USART_RXCIF_bm))
    23e6:	81 81       	ldd	r24, Z+1	; 0x01
    23e8:	87 ff       	sbrs	r24, 7
    23ea:	03 c0       	rjmp	.+6      	; 0x23f2 <pGetChar+0x2c>
	{
		// Read the receive buffer
		//c = uart->DATA;
		return uart->DATA;
    23ec:	20 81       	ld	r18, Z
    23ee:	30 e0       	ldi	r19, 0x00	; 0
    23f0:	02 c0       	rjmp	.+4      	; 0x23f6 <pGetChar+0x30>
		{
			//return su_getchar(hwPort[p].uart.suart);
		}
	}

	return -1;
    23f2:	2f ef       	ldi	r18, 0xFF	; 255
    23f4:	3f ef       	ldi	r19, 0xFF	; 255
}
    23f6:	c9 01       	movw	r24, r18
    23f8:	08 95       	ret

000023fa <initHWUart>:
	PORTD.DIRSET = PIN3_bm;	
	initializeHWPort(&(hwPort[DOWN]), &USARTD0);
}

void initHWUart(USART_t * huart)
{
    23fa:	fc 01       	movw	r30, r24
	huart->CTRLB = USART_RXEN_bm | USART_TXEN_bm;		// turn on RX/TX, somewhat helpful!
    23fc:	88 e1       	ldi	r24, 0x18	; 24
    23fe:	84 83       	std	Z+4, r24	; 0x04
	huart->CTRLC = USART_CHSIZE_8BIT_gc;				// use 8-bit data
    2400:	83 e0       	ldi	r24, 0x03	; 3
    2402:	85 83       	std	Z+5, r24	; 0x05

	huart->CTRLA = USART_RXCINTLVL_HI_gc | USART_TXCINTLVL_HI_gc;	// enable RX/TX interrupt support
    2404:	8c e3       	ldi	r24, 0x3C	; 60
    2406:	83 83       	std	Z+3, r24	; 0x03
	huart->BAUDCTRLA = 51;  // 38400 		// 57600   			//103;	//19200 	16; // 115200
    2408:	83 e3       	ldi	r24, 0x33	; 51
    240a:	86 83       	std	Z+6, r24	; 0x06
	huart->BAUDCTRLB = 0;				//0xB4;  // 57600, set to 0 for others
    240c:	17 82       	std	Z+7, r1	; 0x07
    240e:	08 95       	ret

00002410 <initializeHWPort>:
	return -1;
}

void initializeHWPort(HWPort *p, USART_t *huart)
{
	if(huart != NULL)
    2410:	61 15       	cp	r22, r1
    2412:	71 05       	cpc	r23, r1
    2414:	39 f0       	breq	.+14     	; 0x2424 <initializeHWPort+0x14>
	{
		(p->uart).huart = huart;
    2416:	fc 01       	movw	r30, r24
    2418:	60 83       	st	Z, r22
    241a:	71 83       	std	Z+1, r23	; 0x01
		p->ptype = HARDWARE_UART;
    241c:	12 82       	std	Z+2, r1	; 0x02

		initHWUart(huart);
    241e:	cb 01       	movw	r24, r22
    2420:	0c 94 fd 11 	jmp	0x23fa	; 0x23fa <initHWUart>
    2424:	08 95       	ret

00002426 <initHWPorts>:
	}
}

void initHWPorts()
{
    2426:	ff 92       	push	r15
    2428:	0f 93       	push	r16
    242a:	1f 93       	push	r17
    242c:	cf 93       	push	r28
    242e:	df 93       	push	r29
	// male headers
	PORTD.DIRSET = PIN7_bm;
    2430:	c0 e6       	ldi	r28, 0x60	; 96
    2432:	d6 e0       	ldi	r29, 0x06	; 6
    2434:	30 e8       	ldi	r19, 0x80	; 128
    2436:	f3 2e       	mov	r15, r19
    2438:	f9 82       	std	Y+1, r15	; 0x01

void initializeHWPort(HWPort *p, USART_t *huart)
{
	if(huart != NULL)
	{
		(p->uart).huart = huart;
    243a:	80 eb       	ldi	r24, 0xB0	; 176
    243c:	99 e0       	ldi	r25, 0x09	; 9
    243e:	80 93 7a 25 	sts	0x257A, r24
    2442:	90 93 7b 25 	sts	0x257B, r25
		p->ptype = HARDWARE_UART;
    2446:	10 92 7c 25 	sts	0x257C, r1

		initHWUart(huart);
    244a:	0e 94 fd 11 	call	0x23fa	; 0x23fa <initHWUart>
	// male headers
	PORTD.DIRSET = PIN7_bm;
	initializeHWPort(&(hwPort[UP]), &USARTD1);

	// near the double TVS diodes
	PORTC.DIRSET = PIN7_bm;
    244e:	00 e4       	ldi	r16, 0x40	; 64
    2450:	16 e0       	ldi	r17, 0x06	; 6
    2452:	f8 01       	movw	r30, r16
    2454:	f1 82       	std	Z+1, r15	; 0x01

void initializeHWPort(HWPort *p, USART_t *huart)
{
	if(huart != NULL)
	{
		(p->uart).huart = huart;
    2456:	80 eb       	ldi	r24, 0xB0	; 176
    2458:	98 e0       	ldi	r25, 0x08	; 8
    245a:	80 93 6e 25 	sts	0x256E, r24
    245e:	90 93 6f 25 	sts	0x256F, r25
		p->ptype = HARDWARE_UART;
    2462:	10 92 70 25 	sts	0x2570, r1

		initHWUart(huart);
    2466:	0e 94 fd 11 	call	0x23fa	; 0x23fa <initHWUart>
	// near the double TVS diodes
	PORTC.DIRSET = PIN7_bm;
	initializeHWPort(&(hwPort[NORTH]), &USARTC1);
	
	// closest to audio amp
	PORTE.DIRSET = PIN3_bm;
    246a:	48 e0       	ldi	r20, 0x08	; 8
    246c:	f4 2e       	mov	r15, r20
    246e:	e0 e8       	ldi	r30, 0x80	; 128
    2470:	f6 e0       	ldi	r31, 0x06	; 6
    2472:	f1 82       	std	Z+1, r15	; 0x01

void initializeHWPort(HWPort *p, USART_t *huart)
{
	if(huart != NULL)
	{
		(p->uart).huart = huart;
    2474:	80 ea       	ldi	r24, 0xA0	; 160
    2476:	9a e0       	ldi	r25, 0x0A	; 10
    2478:	80 93 77 25 	sts	0x2577, r24
    247c:	90 93 78 25 	sts	0x2578, r25
		p->ptype = HARDWARE_UART;
    2480:	10 92 79 25 	sts	0x2579, r1

		initHWUart(huart);
    2484:	0e 94 fd 11 	call	0x23fa	; 0x23fa <initHWUart>
	// closest to audio amp
	PORTE.DIRSET = PIN3_bm;
	initializeHWPort(&(hwPort[SOUTH]), &USARTE0);
	
	// closest to LEDs
	PORTF.DIRSET = PIN3_bm;	
    2488:	e0 ea       	ldi	r30, 0xA0	; 160
    248a:	f6 e0       	ldi	r31, 0x06	; 6
    248c:	f1 82       	std	Z+1, r15	; 0x01

void initializeHWPort(HWPort *p, USART_t *huart)
{
	if(huart != NULL)
	{
		(p->uart).huart = huart;
    248e:	80 ea       	ldi	r24, 0xA0	; 160
    2490:	9b e0       	ldi	r25, 0x0B	; 11
    2492:	80 93 71 25 	sts	0x2571, r24
    2496:	90 93 72 25 	sts	0x2572, r25
		p->ptype = HARDWARE_UART;
    249a:	10 92 73 25 	sts	0x2573, r1

		initHWUart(huart);
    249e:	0e 94 fd 11 	call	0x23fa	; 0x23fa <initHWUart>
	// closest to LEDs
	PORTF.DIRSET = PIN3_bm;	
	initializeHWPort(&(hwPort[EAST]), &USARTF0);
	
	// closest to analog input dividers
	PORTC.DIRSET = PIN3_bm;	
    24a2:	f8 01       	movw	r30, r16
    24a4:	f1 82       	std	Z+1, r15	; 0x01

void initializeHWPort(HWPort *p, USART_t *huart)
{
	if(huart != NULL)
	{
		(p->uart).huart = huart;
    24a6:	80 ea       	ldi	r24, 0xA0	; 160
    24a8:	98 e0       	ldi	r25, 0x08	; 8
    24aa:	80 93 74 25 	sts	0x2574, r24
    24ae:	90 93 75 25 	sts	0x2575, r25
		p->ptype = HARDWARE_UART;
    24b2:	10 92 76 25 	sts	0x2576, r1

		initHWUart(huart);
    24b6:	0e 94 fd 11 	call	0x23fa	; 0x23fa <initHWUart>
	
	// closest to analog input dividers
	PORTC.DIRSET = PIN3_bm;	
	initializeHWPort(&(hwPort[WEST]), &USARTC0);
	
	PORTD.DIRSET = PIN3_bm;	
    24ba:	f9 82       	std	Y+1, r15	; 0x01

void initializeHWPort(HWPort *p, USART_t *huart)
{
	if(huart != NULL)
	{
		(p->uart).huart = huart;
    24bc:	80 ea       	ldi	r24, 0xA0	; 160
    24be:	99 e0       	ldi	r25, 0x09	; 9
    24c0:	80 93 6b 25 	sts	0x256B, r24
    24c4:	90 93 6c 25 	sts	0x256C, r25
		p->ptype = HARDWARE_UART;
    24c8:	10 92 6d 25 	sts	0x256D, r1
	PORTC.DIRSET = PIN3_bm;	
	initializeHWPort(&(hwPort[WEST]), &USARTC0);
	
	PORTD.DIRSET = PIN3_bm;	
	initializeHWPort(&(hwPort[DOWN]), &USARTD0);
}
    24cc:	df 91       	pop	r29
    24ce:	cf 91       	pop	r28
    24d0:	1f 91       	pop	r17
    24d2:	0f 91       	pop	r16
    24d4:	ff 90       	pop	r15
	if(huart != NULL)
	{
		(p->uart).huart = huart;
		p->ptype = HARDWARE_UART;

		initHWUart(huart);
    24d6:	0c 94 fd 11 	jmp	0x23fa	; 0x23fa <initHWUart>

000024da <__vector_91>:
	huart->BAUDCTRLB = 0;				//0xB4;  // 57600, set to 0 for others
}


ISR(USARTD1_RXC_vect)
{
    24da:	1f 92       	push	r1
    24dc:	0f 92       	push	r0
    24de:	0f b6       	in	r0, 0x3f	; 63
    24e0:	0f 92       	push	r0
    24e2:	11 24       	eor	r1, r1
    24e4:	0b b6       	in	r0, 0x3b	; 59
    24e6:	0f 92       	push	r0
    24e8:	2f 93       	push	r18
    24ea:	3f 93       	push	r19
    24ec:	4f 93       	push	r20
    24ee:	5f 93       	push	r21
    24f0:	6f 93       	push	r22
    24f2:	7f 93       	push	r23
    24f4:	8f 93       	push	r24
    24f6:	9f 93       	push	r25
    24f8:	af 93       	push	r26
    24fa:	bf 93       	push	r27
    24fc:	ef 93       	push	r30
    24fe:	ff 93       	push	r31
	uint8_t c;
	
	c = USARTD1.DATA;
    2500:	80 91 b0 09 	lds	r24, 0x09B0
	//printf("R:%x",c);	
	push(c, &(port[UP].rx));
    2504:	6c e0       	ldi	r22, 0x0C	; 12
    2506:	75 e2       	ldi	r23, 0x25	; 37
    2508:	0e 94 b4 01 	call	0x368	; 0x368 <push>
}
    250c:	ff 91       	pop	r31
    250e:	ef 91       	pop	r30
    2510:	bf 91       	pop	r27
    2512:	af 91       	pop	r26
    2514:	9f 91       	pop	r25
    2516:	8f 91       	pop	r24
    2518:	7f 91       	pop	r23
    251a:	6f 91       	pop	r22
    251c:	5f 91       	pop	r21
    251e:	4f 91       	pop	r20
    2520:	3f 91       	pop	r19
    2522:	2f 91       	pop	r18
    2524:	0f 90       	pop	r0
    2526:	0b be       	out	0x3b, r0	; 59
    2528:	0f 90       	pop	r0
    252a:	0f be       	out	0x3f, r0	; 63
    252c:	0f 90       	pop	r0
    252e:	1f 90       	pop	r1
    2530:	18 95       	reti

00002532 <__vector_93>:

ISR(USARTD1_TXC_vect)
{
    2532:	1f 92       	push	r1
    2534:	0f 92       	push	r0
    2536:	0f b6       	in	r0, 0x3f	; 63
    2538:	0f 92       	push	r0
    253a:	11 24       	eor	r1, r1
    253c:	0b b6       	in	r0, 0x3b	; 59
    253e:	0f 92       	push	r0
    2540:	2f 93       	push	r18
    2542:	3f 93       	push	r19
    2544:	4f 93       	push	r20
    2546:	5f 93       	push	r21
    2548:	6f 93       	push	r22
    254a:	7f 93       	push	r23
    254c:	8f 93       	push	r24
    254e:	9f 93       	push	r25
    2550:	af 93       	push	r26
    2552:	bf 93       	push	r27
    2554:	ef 93       	push	r30
    2556:	ff 93       	push	r31
	int16_t c;
	
	c  = pop(&(port[UP].tx));
    2558:	8c e2       	ldi	r24, 0x2C	; 44
    255a:	95 e2       	ldi	r25, 0x25	; 37
    255c:	0e 94 cf 01 	call	0x39e	; 0x39e <pop>
	
	if(c != -1)
    2560:	8f 3f       	cpi	r24, 0xFF	; 255
    2562:	2f ef       	ldi	r18, 0xFF	; 255
    2564:	92 07       	cpc	r25, r18
    2566:	11 f0       	breq	.+4      	; 0x256c <__vector_93+0x3a>
	{
		USARTD1.DATA = c;
    2568:	80 93 b0 09 	sts	0x09B0, r24
	}
	else
	{
		// should flag that we're waiting for an ACK now
	}
}
    256c:	ff 91       	pop	r31
    256e:	ef 91       	pop	r30
    2570:	bf 91       	pop	r27
    2572:	af 91       	pop	r26
    2574:	9f 91       	pop	r25
    2576:	8f 91       	pop	r24
    2578:	7f 91       	pop	r23
    257a:	6f 91       	pop	r22
    257c:	5f 91       	pop	r21
    257e:	4f 91       	pop	r20
    2580:	3f 91       	pop	r19
    2582:	2f 91       	pop	r18
    2584:	0f 90       	pop	r0
    2586:	0b be       	out	0x3b, r0	; 59
    2588:	0f 90       	pop	r0
    258a:	0f be       	out	0x3f, r0	; 63
    258c:	0f 90       	pop	r0
    258e:	1f 90       	pop	r1
    2590:	18 95       	reti

00002592 <__vector_28>:

ISR(USARTC1_RXC_vect)
{
    2592:	1f 92       	push	r1
    2594:	0f 92       	push	r0
    2596:	0f b6       	in	r0, 0x3f	; 63
    2598:	0f 92       	push	r0
    259a:	11 24       	eor	r1, r1
    259c:	0b b6       	in	r0, 0x3b	; 59
    259e:	0f 92       	push	r0
    25a0:	2f 93       	push	r18
    25a2:	3f 93       	push	r19
    25a4:	4f 93       	push	r20
    25a6:	5f 93       	push	r21
    25a8:	6f 93       	push	r22
    25aa:	7f 93       	push	r23
    25ac:	8f 93       	push	r24
    25ae:	9f 93       	push	r25
    25b0:	af 93       	push	r26
    25b2:	bf 93       	push	r27
    25b4:	ef 93       	push	r30
    25b6:	ff 93       	push	r31
	uint8_t c;
	
	c = USARTC1.DATA;
    25b8:	80 91 b0 08 	lds	r24, 0x08B0
	//printf("R:%x",c);	
	push(c, &(port[NORTH].rx));
    25bc:	6c ea       	ldi	r22, 0xAC	; 172
    25be:	73 e2       	ldi	r23, 0x23	; 35
    25c0:	0e 94 b4 01 	call	0x368	; 0x368 <push>
}
    25c4:	ff 91       	pop	r31
    25c6:	ef 91       	pop	r30
    25c8:	bf 91       	pop	r27
    25ca:	af 91       	pop	r26
    25cc:	9f 91       	pop	r25
    25ce:	8f 91       	pop	r24
    25d0:	7f 91       	pop	r23
    25d2:	6f 91       	pop	r22
    25d4:	5f 91       	pop	r21
    25d6:	4f 91       	pop	r20
    25d8:	3f 91       	pop	r19
    25da:	2f 91       	pop	r18
    25dc:	0f 90       	pop	r0
    25de:	0b be       	out	0x3b, r0	; 59
    25e0:	0f 90       	pop	r0
    25e2:	0f be       	out	0x3f, r0	; 63
    25e4:	0f 90       	pop	r0
    25e6:	1f 90       	pop	r1
    25e8:	18 95       	reti

000025ea <__vector_30>:
ISR(USARTC1_TXC_vect)
{
    25ea:	1f 92       	push	r1
    25ec:	0f 92       	push	r0
    25ee:	0f b6       	in	r0, 0x3f	; 63
    25f0:	0f 92       	push	r0
    25f2:	11 24       	eor	r1, r1
    25f4:	0b b6       	in	r0, 0x3b	; 59
    25f6:	0f 92       	push	r0
    25f8:	2f 93       	push	r18
    25fa:	3f 93       	push	r19
    25fc:	4f 93       	push	r20
    25fe:	5f 93       	push	r21
    2600:	6f 93       	push	r22
    2602:	7f 93       	push	r23
    2604:	8f 93       	push	r24
    2606:	9f 93       	push	r25
    2608:	af 93       	push	r26
    260a:	bf 93       	push	r27
    260c:	ef 93       	push	r30
    260e:	ff 93       	push	r31
	int16_t c;
	
	c  = pop(&(port[NORTH].tx));
    2610:	8c ec       	ldi	r24, 0xCC	; 204
    2612:	93 e2       	ldi	r25, 0x23	; 35
    2614:	0e 94 cf 01 	call	0x39e	; 0x39e <pop>
	
	if(c != -1)
    2618:	8f 3f       	cpi	r24, 0xFF	; 255
    261a:	2f ef       	ldi	r18, 0xFF	; 255
    261c:	92 07       	cpc	r25, r18
    261e:	11 f0       	breq	.+4      	; 0x2624 <__vector_30+0x3a>
	{
		USARTC1.DATA = c;
    2620:	80 93 b0 08 	sts	0x08B0, r24
	}
}
    2624:	ff 91       	pop	r31
    2626:	ef 91       	pop	r30
    2628:	bf 91       	pop	r27
    262a:	af 91       	pop	r26
    262c:	9f 91       	pop	r25
    262e:	8f 91       	pop	r24
    2630:	7f 91       	pop	r23
    2632:	6f 91       	pop	r22
    2634:	5f 91       	pop	r21
    2636:	4f 91       	pop	r20
    2638:	3f 91       	pop	r19
    263a:	2f 91       	pop	r18
    263c:	0f 90       	pop	r0
    263e:	0b be       	out	0x3b, r0	; 59
    2640:	0f 90       	pop	r0
    2642:	0f be       	out	0x3f, r0	; 63
    2644:	0f 90       	pop	r0
    2646:	1f 90       	pop	r1
    2648:	18 95       	reti

0000264a <__vector_119>:

ISR(USARTF0_RXC_vect)
{
    264a:	1f 92       	push	r1
    264c:	0f 92       	push	r0
    264e:	0f b6       	in	r0, 0x3f	; 63
    2650:	0f 92       	push	r0
    2652:	11 24       	eor	r1, r1
    2654:	0b b6       	in	r0, 0x3b	; 59
    2656:	0f 92       	push	r0
    2658:	2f 93       	push	r18
    265a:	3f 93       	push	r19
    265c:	4f 93       	push	r20
    265e:	5f 93       	push	r21
    2660:	6f 93       	push	r22
    2662:	7f 93       	push	r23
    2664:	8f 93       	push	r24
    2666:	9f 93       	push	r25
    2668:	af 93       	push	r26
    266a:	bf 93       	push	r27
    266c:	ef 93       	push	r30
    266e:	ff 93       	push	r31
	uint8_t c;
	
	c = USARTF0.DATA;
    2670:	80 91 a0 0b 	lds	r24, 0x0BA0
	//printf("R:%x",c);	
	push(c, &(port[EAST].rx));
    2674:	64 e0       	ldi	r22, 0x04	; 4
    2676:	74 e2       	ldi	r23, 0x24	; 36
    2678:	0e 94 b4 01 	call	0x368	; 0x368 <push>
}
    267c:	ff 91       	pop	r31
    267e:	ef 91       	pop	r30
    2680:	bf 91       	pop	r27
    2682:	af 91       	pop	r26
    2684:	9f 91       	pop	r25
    2686:	8f 91       	pop	r24
    2688:	7f 91       	pop	r23
    268a:	6f 91       	pop	r22
    268c:	5f 91       	pop	r21
    268e:	4f 91       	pop	r20
    2690:	3f 91       	pop	r19
    2692:	2f 91       	pop	r18
    2694:	0f 90       	pop	r0
    2696:	0b be       	out	0x3b, r0	; 59
    2698:	0f 90       	pop	r0
    269a:	0f be       	out	0x3f, r0	; 63
    269c:	0f 90       	pop	r0
    269e:	1f 90       	pop	r1
    26a0:	18 95       	reti

000026a2 <__vector_121>:
ISR(USARTF0_TXC_vect)
{
    26a2:	1f 92       	push	r1
    26a4:	0f 92       	push	r0
    26a6:	0f b6       	in	r0, 0x3f	; 63
    26a8:	0f 92       	push	r0
    26aa:	11 24       	eor	r1, r1
    26ac:	0b b6       	in	r0, 0x3b	; 59
    26ae:	0f 92       	push	r0
    26b0:	2f 93       	push	r18
    26b2:	3f 93       	push	r19
    26b4:	4f 93       	push	r20
    26b6:	5f 93       	push	r21
    26b8:	6f 93       	push	r22
    26ba:	7f 93       	push	r23
    26bc:	8f 93       	push	r24
    26be:	9f 93       	push	r25
    26c0:	af 93       	push	r26
    26c2:	bf 93       	push	r27
    26c4:	ef 93       	push	r30
    26c6:	ff 93       	push	r31
	int16_t c;
	
	c  = pop(&(port[EAST].tx));
    26c8:	84 e2       	ldi	r24, 0x24	; 36
    26ca:	94 e2       	ldi	r25, 0x24	; 36
    26cc:	0e 94 cf 01 	call	0x39e	; 0x39e <pop>
	
	if(c != -1)
    26d0:	8f 3f       	cpi	r24, 0xFF	; 255
    26d2:	2f ef       	ldi	r18, 0xFF	; 255
    26d4:	92 07       	cpc	r25, r18
    26d6:	11 f0       	breq	.+4      	; 0x26dc <__vector_121+0x3a>
	{
		USARTF0.DATA = c;
    26d8:	80 93 a0 0b 	sts	0x0BA0, r24
	}
}
    26dc:	ff 91       	pop	r31
    26de:	ef 91       	pop	r30
    26e0:	bf 91       	pop	r27
    26e2:	af 91       	pop	r26
    26e4:	9f 91       	pop	r25
    26e6:	8f 91       	pop	r24
    26e8:	7f 91       	pop	r23
    26ea:	6f 91       	pop	r22
    26ec:	5f 91       	pop	r21
    26ee:	4f 91       	pop	r20
    26f0:	3f 91       	pop	r19
    26f2:	2f 91       	pop	r18
    26f4:	0f 90       	pop	r0
    26f6:	0b be       	out	0x3b, r0	; 59
    26f8:	0f 90       	pop	r0
    26fa:	0f be       	out	0x3f, r0	; 63
    26fc:	0f 90       	pop	r0
    26fe:	1f 90       	pop	r1
    2700:	18 95       	reti

00002702 <__vector_58>:

ISR(USARTE0_RXC_vect)
{
    2702:	1f 92       	push	r1
    2704:	0f 92       	push	r0
    2706:	0f b6       	in	r0, 0x3f	; 63
    2708:	0f 92       	push	r0
    270a:	11 24       	eor	r1, r1
    270c:	0b b6       	in	r0, 0x3b	; 59
    270e:	0f 92       	push	r0
    2710:	2f 93       	push	r18
    2712:	3f 93       	push	r19
    2714:	4f 93       	push	r20
    2716:	5f 93       	push	r21
    2718:	6f 93       	push	r22
    271a:	7f 93       	push	r23
    271c:	8f 93       	push	r24
    271e:	9f 93       	push	r25
    2720:	af 93       	push	r26
    2722:	bf 93       	push	r27
    2724:	ef 93       	push	r30
    2726:	ff 93       	push	r31
	uint8_t c;
	
	c = USARTE0.DATA;
    2728:	80 91 a0 0a 	lds	r24, 0x0AA0
	//printf("R:%x",c);	
	push(c, &(port[SOUTH].rx));
    272c:	64 eb       	ldi	r22, 0xB4	; 180
    272e:	74 e2       	ldi	r23, 0x24	; 36
    2730:	0e 94 b4 01 	call	0x368	; 0x368 <push>
}
    2734:	ff 91       	pop	r31
    2736:	ef 91       	pop	r30
    2738:	bf 91       	pop	r27
    273a:	af 91       	pop	r26
    273c:	9f 91       	pop	r25
    273e:	8f 91       	pop	r24
    2740:	7f 91       	pop	r23
    2742:	6f 91       	pop	r22
    2744:	5f 91       	pop	r21
    2746:	4f 91       	pop	r20
    2748:	3f 91       	pop	r19
    274a:	2f 91       	pop	r18
    274c:	0f 90       	pop	r0
    274e:	0b be       	out	0x3b, r0	; 59
    2750:	0f 90       	pop	r0
    2752:	0f be       	out	0x3f, r0	; 63
    2754:	0f 90       	pop	r0
    2756:	1f 90       	pop	r1
    2758:	18 95       	reti

0000275a <__vector_60>:
ISR(USARTE0_TXC_vect)
{
    275a:	1f 92       	push	r1
    275c:	0f 92       	push	r0
    275e:	0f b6       	in	r0, 0x3f	; 63
    2760:	0f 92       	push	r0
    2762:	11 24       	eor	r1, r1
    2764:	0b b6       	in	r0, 0x3b	; 59
    2766:	0f 92       	push	r0
    2768:	2f 93       	push	r18
    276a:	3f 93       	push	r19
    276c:	4f 93       	push	r20
    276e:	5f 93       	push	r21
    2770:	6f 93       	push	r22
    2772:	7f 93       	push	r23
    2774:	8f 93       	push	r24
    2776:	9f 93       	push	r25
    2778:	af 93       	push	r26
    277a:	bf 93       	push	r27
    277c:	ef 93       	push	r30
    277e:	ff 93       	push	r31
	int16_t c;
	
	c  = pop(&(port[SOUTH].tx));
    2780:	84 ed       	ldi	r24, 0xD4	; 212
    2782:	94 e2       	ldi	r25, 0x24	; 36
    2784:	0e 94 cf 01 	call	0x39e	; 0x39e <pop>
	
	if(c != -1)
    2788:	8f 3f       	cpi	r24, 0xFF	; 255
    278a:	2f ef       	ldi	r18, 0xFF	; 255
    278c:	92 07       	cpc	r25, r18
    278e:	11 f0       	breq	.+4      	; 0x2794 <__vector_60+0x3a>
	{
		USARTE0.DATA = c;
    2790:	80 93 a0 0a 	sts	0x0AA0, r24
	}
}
    2794:	ff 91       	pop	r31
    2796:	ef 91       	pop	r30
    2798:	bf 91       	pop	r27
    279a:	af 91       	pop	r26
    279c:	9f 91       	pop	r25
    279e:	8f 91       	pop	r24
    27a0:	7f 91       	pop	r23
    27a2:	6f 91       	pop	r22
    27a4:	5f 91       	pop	r21
    27a6:	4f 91       	pop	r20
    27a8:	3f 91       	pop	r19
    27aa:	2f 91       	pop	r18
    27ac:	0f 90       	pop	r0
    27ae:	0b be       	out	0x3b, r0	; 59
    27b0:	0f 90       	pop	r0
    27b2:	0f be       	out	0x3f, r0	; 63
    27b4:	0f 90       	pop	r0
    27b6:	1f 90       	pop	r1
    27b8:	18 95       	reti

000027ba <__vector_25>:

ISR(USARTC0_RXC_vect)
{
    27ba:	1f 92       	push	r1
    27bc:	0f 92       	push	r0
    27be:	0f b6       	in	r0, 0x3f	; 63
    27c0:	0f 92       	push	r0
    27c2:	11 24       	eor	r1, r1
    27c4:	0b b6       	in	r0, 0x3b	; 59
    27c6:	0f 92       	push	r0
    27c8:	2f 93       	push	r18
    27ca:	3f 93       	push	r19
    27cc:	4f 93       	push	r20
    27ce:	5f 93       	push	r21
    27d0:	6f 93       	push	r22
    27d2:	7f 93       	push	r23
    27d4:	8f 93       	push	r24
    27d6:	9f 93       	push	r25
    27d8:	af 93       	push	r26
    27da:	bf 93       	push	r27
    27dc:	ef 93       	push	r30
    27de:	ff 93       	push	r31
	uint8_t c;
	
	c = USARTC0.DATA;
    27e0:	80 91 a0 08 	lds	r24, 0x08A0
	//printf("R:%x",c);	
	push(c, &(port[WEST].rx));
    27e4:	6c e5       	ldi	r22, 0x5C	; 92
    27e6:	74 e2       	ldi	r23, 0x24	; 36
    27e8:	0e 94 b4 01 	call	0x368	; 0x368 <push>
}
    27ec:	ff 91       	pop	r31
    27ee:	ef 91       	pop	r30
    27f0:	bf 91       	pop	r27
    27f2:	af 91       	pop	r26
    27f4:	9f 91       	pop	r25
    27f6:	8f 91       	pop	r24
    27f8:	7f 91       	pop	r23
    27fa:	6f 91       	pop	r22
    27fc:	5f 91       	pop	r21
    27fe:	4f 91       	pop	r20
    2800:	3f 91       	pop	r19
    2802:	2f 91       	pop	r18
    2804:	0f 90       	pop	r0
    2806:	0b be       	out	0x3b, r0	; 59
    2808:	0f 90       	pop	r0
    280a:	0f be       	out	0x3f, r0	; 63
    280c:	0f 90       	pop	r0
    280e:	1f 90       	pop	r1
    2810:	18 95       	reti

00002812 <__vector_27>:
ISR(USARTC0_TXC_vect)
{
    2812:	1f 92       	push	r1
    2814:	0f 92       	push	r0
    2816:	0f b6       	in	r0, 0x3f	; 63
    2818:	0f 92       	push	r0
    281a:	11 24       	eor	r1, r1
    281c:	0b b6       	in	r0, 0x3b	; 59
    281e:	0f 92       	push	r0
    2820:	2f 93       	push	r18
    2822:	3f 93       	push	r19
    2824:	4f 93       	push	r20
    2826:	5f 93       	push	r21
    2828:	6f 93       	push	r22
    282a:	7f 93       	push	r23
    282c:	8f 93       	push	r24
    282e:	9f 93       	push	r25
    2830:	af 93       	push	r26
    2832:	bf 93       	push	r27
    2834:	ef 93       	push	r30
    2836:	ff 93       	push	r31
	int16_t c;
	
	c  = pop(&(port[WEST].tx));
    2838:	8c e7       	ldi	r24, 0x7C	; 124
    283a:	94 e2       	ldi	r25, 0x24	; 36
    283c:	0e 94 cf 01 	call	0x39e	; 0x39e <pop>
	
	if(c != -1)
    2840:	8f 3f       	cpi	r24, 0xFF	; 255
    2842:	2f ef       	ldi	r18, 0xFF	; 255
    2844:	92 07       	cpc	r25, r18
    2846:	11 f0       	breq	.+4      	; 0x284c <__vector_27+0x3a>
	{
		USARTC0.DATA = c;
    2848:	80 93 a0 08 	sts	0x08A0, r24
	}
}
    284c:	ff 91       	pop	r31
    284e:	ef 91       	pop	r30
    2850:	bf 91       	pop	r27
    2852:	af 91       	pop	r26
    2854:	9f 91       	pop	r25
    2856:	8f 91       	pop	r24
    2858:	7f 91       	pop	r23
    285a:	6f 91       	pop	r22
    285c:	5f 91       	pop	r21
    285e:	4f 91       	pop	r20
    2860:	3f 91       	pop	r19
    2862:	2f 91       	pop	r18
    2864:	0f 90       	pop	r0
    2866:	0b be       	out	0x3b, r0	; 59
    2868:	0f 90       	pop	r0
    286a:	0f be       	out	0x3f, r0	; 63
    286c:	0f 90       	pop	r0
    286e:	1f 90       	pop	r1
    2870:	18 95       	reti

00002872 <__vector_88>:

ISR(USARTD0_RXC_vect)
{
    2872:	1f 92       	push	r1
    2874:	0f 92       	push	r0
    2876:	0f b6       	in	r0, 0x3f	; 63
    2878:	0f 92       	push	r0
    287a:	11 24       	eor	r1, r1
    287c:	0b b6       	in	r0, 0x3b	; 59
    287e:	0f 92       	push	r0
    2880:	2f 93       	push	r18
    2882:	3f 93       	push	r19
    2884:	4f 93       	push	r20
    2886:	5f 93       	push	r21
    2888:	6f 93       	push	r22
    288a:	7f 93       	push	r23
    288c:	8f 93       	push	r24
    288e:	9f 93       	push	r25
    2890:	af 93       	push	r26
    2892:	bf 93       	push	r27
    2894:	ef 93       	push	r30
    2896:	ff 93       	push	r31
	uint8_t c;
	
	c = USARTD0.DATA;
    2898:	80 91 a0 09 	lds	r24, 0x09A0
	//printf("R:%x",c);
	push(c, &(port[DOWN].rx));
    289c:	64 e5       	ldi	r22, 0x54	; 84
    289e:	73 e2       	ldi	r23, 0x23	; 35
    28a0:	0e 94 b4 01 	call	0x368	; 0x368 <push>
}
    28a4:	ff 91       	pop	r31
    28a6:	ef 91       	pop	r30
    28a8:	bf 91       	pop	r27
    28aa:	af 91       	pop	r26
    28ac:	9f 91       	pop	r25
    28ae:	8f 91       	pop	r24
    28b0:	7f 91       	pop	r23
    28b2:	6f 91       	pop	r22
    28b4:	5f 91       	pop	r21
    28b6:	4f 91       	pop	r20
    28b8:	3f 91       	pop	r19
    28ba:	2f 91       	pop	r18
    28bc:	0f 90       	pop	r0
    28be:	0b be       	out	0x3b, r0	; 59
    28c0:	0f 90       	pop	r0
    28c2:	0f be       	out	0x3f, r0	; 63
    28c4:	0f 90       	pop	r0
    28c6:	1f 90       	pop	r1
    28c8:	18 95       	reti

000028ca <__vector_90>:
ISR(USARTD0_TXC_vect)
{
    28ca:	1f 92       	push	r1
    28cc:	0f 92       	push	r0
    28ce:	0f b6       	in	r0, 0x3f	; 63
    28d0:	0f 92       	push	r0
    28d2:	11 24       	eor	r1, r1
    28d4:	0b b6       	in	r0, 0x3b	; 59
    28d6:	0f 92       	push	r0
    28d8:	2f 93       	push	r18
    28da:	3f 93       	push	r19
    28dc:	4f 93       	push	r20
    28de:	5f 93       	push	r21
    28e0:	6f 93       	push	r22
    28e2:	7f 93       	push	r23
    28e4:	8f 93       	push	r24
    28e6:	9f 93       	push	r25
    28e8:	af 93       	push	r26
    28ea:	bf 93       	push	r27
    28ec:	ef 93       	push	r30
    28ee:	ff 93       	push	r31
	int16_t c;
	
	c  = pop(&(port[DOWN].tx));
    28f0:	84 e7       	ldi	r24, 0x74	; 116
    28f2:	93 e2       	ldi	r25, 0x23	; 35
    28f4:	0e 94 cf 01 	call	0x39e	; 0x39e <pop>
	
	if(c != -1)
    28f8:	8f 3f       	cpi	r24, 0xFF	; 255
    28fa:	2f ef       	ldi	r18, 0xFF	; 255
    28fc:	92 07       	cpc	r25, r18
    28fe:	11 f0       	breq	.+4      	; 0x2904 <__vector_90+0x3a>
	{
		USARTD0.DATA = c;
    2900:	80 93 a0 09 	sts	0x09A0, r24
	}
}
    2904:	ff 91       	pop	r31
    2906:	ef 91       	pop	r30
    2908:	bf 91       	pop	r27
    290a:	af 91       	pop	r26
    290c:	9f 91       	pop	r25
    290e:	8f 91       	pop	r24
    2910:	7f 91       	pop	r23
    2912:	6f 91       	pop	r22
    2914:	5f 91       	pop	r21
    2916:	4f 91       	pop	r20
    2918:	3f 91       	pop	r19
    291a:	2f 91       	pop	r18
    291c:	0f 90       	pop	r0
    291e:	0b be       	out	0x3b, r0	; 59
    2920:	0f 90       	pop	r0
    2922:	0f be       	out	0x3f, r0	; 63
    2924:	0f 90       	pop	r0
    2926:	1f 90       	pop	r1
    2928:	18 95       	reti

0000292a <getHWTime>:
#include "../system/hardwaretime.h"

uint16_t timeHi;			// semi-private data, do not modify outside of this file

Time getHWTime()
{
    292a:	0f 93       	push	r16
    292c:	1f 93       	push	r17
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    292e:	f8 94       	cli
	Time tmp;
	// prevents ISRs from corrupting multibyte write
	ATOMIC_BLOCK(ATOMIC_FORCEON)
    {
		tmp = (((Time)timeHi) << 16) | RTC.CNT;
    2930:	e0 e0       	ldi	r30, 0x00	; 0
    2932:	f4 e0       	ldi	r31, 0x04	; 4
    2934:	80 85       	ldd	r24, Z+8	; 0x08
    2936:	91 85       	ldd	r25, Z+9	; 0x09
    2938:	00 91 7d 25 	lds	r16, 0x257D
    293c:	10 91 7e 25 	lds	r17, 0x257E
    2940:	20 e0       	ldi	r18, 0x00	; 0
    2942:	30 e0       	ldi	r19, 0x00	; 0
    2944:	98 01       	movw	r18, r16
    2946:	11 27       	eor	r17, r17
    2948:	00 27       	eor	r16, r16
    294a:	a0 e0       	ldi	r26, 0x00	; 0
    294c:	b0 e0       	ldi	r27, 0x00	; 0
    294e:	08 2b       	or	r16, r24
    2950:	19 2b       	or	r17, r25
    2952:	2a 2b       	or	r18, r26
    2954:	3b 2b       	or	r19, r27
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
    2956:	78 94       	sei
	}
	
	return tmp;
}
    2958:	b8 01       	movw	r22, r16
    295a:	c9 01       	movw	r24, r18
    295c:	1f 91       	pop	r17
    295e:	0f 91       	pop	r16
    2960:	08 95       	ret

00002962 <initClock>:

void initClock(void)
{
	OSC.CTRL |= _BV(OSC_RC32MEN_bp);			// turn on 32MHz internal RC oscillator
    2962:	80 91 50 00 	lds	r24, 0x0050
    2966:	82 60       	ori	r24, 0x02	; 2
    2968:	80 93 50 00 	sts	0x0050, r24
	while(!(OSC.STATUS & OSC_RC32MRDY_bm));  	// wait for it to be ready
    296c:	80 91 51 00 	lds	r24, 0x0051
    2970:	81 ff       	sbrs	r24, 1
    2972:	fc cf       	rjmp	.-8      	; 0x296c <initClock+0xa>

	CCP=0xD8;							// allow modification of protected register
    2974:	88 ed       	ldi	r24, 0xD8	; 216
    2976:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc;	// change from 2MHz to 32MHz
    2978:	81 e0       	ldi	r24, 0x01	; 1
    297a:	80 93 40 00 	sts	0x0040, r24
    297e:	08 95       	ret

00002980 <initRTC>:
}

void initRTC(void)
{
	RTC.CTRL = RTC_PRESCALER_DIV1_gc;
    2980:	e0 e0       	ldi	r30, 0x00	; 0
    2982:	f4 e0       	ldi	r31, 0x04	; 4
    2984:	81 e0       	ldi	r24, 0x01	; 1
    2986:	80 83       	st	Z, r24
	CLK.RTCCTRL = CLK_RTCSRC_ULP_gc | CLK_RTCEN_bm; 
    2988:	a0 e4       	ldi	r26, 0x40	; 64
    298a:	b0 e0       	ldi	r27, 0x00	; 0
    298c:	13 96       	adiw	r26, 0x03	; 3
    298e:	8c 93       	st	X, r24

	RTC.INTCTRL = RTC_OVFINTLVL_HI_gc;
    2990:	83 e0       	ldi	r24, 0x03	; 3
    2992:	82 83       	std	Z+2, r24	; 0x02
    2994:	08 95       	ret

00002996 <initHWTime>:
}

void initHWTime()
{
	initClock();
    2996:	0e 94 b1 14 	call	0x2962	; 0x2962 <initClock>
	initRTC();
    299a:	0c 94 c0 14 	jmp	0x2980	; 0x2980 <initRTC>

0000299e <__vector_10>:
}

ISR(RTC_OVF_vect)
{
    299e:	1f 92       	push	r1
    29a0:	0f 92       	push	r0
    29a2:	0f b6       	in	r0, 0x3f	; 63
    29a4:	0f 92       	push	r0
    29a6:	11 24       	eor	r1, r1
    29a8:	8f 93       	push	r24
    29aa:	9f 93       	push	r25
	timeHi++;
    29ac:	80 91 7d 25 	lds	r24, 0x257D
    29b0:	90 91 7e 25 	lds	r25, 0x257E
    29b4:	01 96       	adiw	r24, 0x01	; 1
    29b6:	80 93 7d 25 	sts	0x257D, r24
    29ba:	90 93 7e 25 	sts	0x257E, r25
}
    29be:	9f 91       	pop	r25
    29c0:	8f 91       	pop	r24
    29c2:	0f 90       	pop	r0
    29c4:	0f be       	out	0x3f, r0	; 63
    29c6:	0f 90       	pop	r0
    29c8:	1f 90       	pop	r1
    29ca:	18 95       	reti

000029cc <updateHWMic>:
extern MicData _mic;


void updateHWMic()
{
    BB_LOCK(ATOMIC_RESTORESTATE)
    29cc:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    29ce:	f8 94       	cli
    // read low, then high byte
    _mic = ADCA.CH0.RES;
    29d0:	e0 e0       	ldi	r30, 0x00	; 0
    29d2:	f2 e0       	ldi	r31, 0x02	; 2
    29d4:	84 a1       	ldd	r24, Z+36	; 0x24
    29d6:	95 a1       	ldd	r25, Z+37	; 0x25

    // sign extend to full 16 bits
    _mic = _mic >> 4;
    29d8:	34 e0       	ldi	r19, 0x04	; 4
    29da:	95 95       	asr	r25
    29dc:	87 95       	ror	r24
    29de:	3a 95       	dec	r19
    29e0:	e1 f7       	brne	.-8      	; 0x29da <updateHWMic+0xe>
    29e2:	80 93 52 25 	sts	0x2552, r24
    29e6:	90 93 53 25 	sts	0x2553, r25
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    29ea:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
    29ec:	08 95       	ret

000029ee <initHWMic>:
}

void initHWMic(void)
{
    // set-up basic function
    ADCA.CTRLA = ADC_ENABLE_bm;                                 // disable combined DMA but enable ADC
    29ee:	e0 e0       	ldi	r30, 0x00	; 0
    29f0:	f2 e0       	ldi	r31, 0x02	; 2
    29f2:	81 e0       	ldi	r24, 0x01	; 1
    29f4:	80 83       	st	Z, r24
    ADCA.CTRLB = ADC_CONMODE_bm | ADC_RESOLUTION_LEFT12BIT_gc;  // use signed 12 bit left adjusted format
    29f6:	96 e1       	ldi	r25, 0x16	; 22
    29f8:	91 83       	std	Z+1, r25	; 0x01
    ADCA.REFCTRL = ADC_REFSEL_VCC_gc | ADC_BANDGAP_bm;          // disable combined DMA but enable ADC
    29fa:	92 e1       	ldi	r25, 0x12	; 18
    29fc:	92 83       	std	Z+2, r25	; 0x02
    ADCA.PRESCALER = ADC_PRESCALER_DIV512_gc;                   // DIV512 prescaler
    29fe:	97 e0       	ldi	r25, 0x07	; 7
    2a00:	94 83       	std	Z+4, r25	; 0x04

    // set-up inputs (NOTE: define for ADC_CH_MUXNEG_PIN5_gv is incorrect)
    ADCA.CH0.MUXCTRL = ADC_CH_MUXPOS_PIN0_gc | ADC_CH_MUXNEG_PIN1_gc;   // take inputs from microphone (A0, A5)
    2a02:	81 a3       	std	Z+33, r24	; 0x21
    ADCA.CH0.CTRL = ADC_CH_GAIN_1X_gc | ADC_CH_INPUTMODE_DIFFWGAIN_gc;  // use differential gain (x1)
    2a04:	93 e0       	ldi	r25, 0x03	; 3
    2a06:	90 a3       	std	Z+32, r25	; 0x20

    // set-up interrupts
    ADCA.CH0.INTCTRL = ADC_CH_INTLVL1_bm;    // interrupts on conversion completion with MED priority
    2a08:	92 e0       	ldi	r25, 0x02	; 2
    2a0a:	92 a3       	std	Z+34, r25	; 0x22

    // start conversion/clear interrupts
    ADCA.CH0.INTFLAGS = ADC_CH_CHIF_bm;
    2a0c:	83 a3       	std	Z+35, r24	; 0x23
    ADCA.CH0.CTRL |= ADC_CH_START_bm;
    2a0e:	80 a1       	ldd	r24, Z+32	; 0x20
    2a10:	80 68       	ori	r24, 0x80	; 128
    2a12:	80 a3       	std	Z+32, r24	; 0x20
    2a14:	08 95       	ret

00002a16 <rejuvenateHWMic>:
}

void rejuvenateHWMic(void)
{
    // set as outputs
    PORTA.DIRSET = PIN0_bm;
    2a16:	e0 e0       	ldi	r30, 0x00	; 0
    2a18:	f6 e0       	ldi	r31, 0x06	; 6
    2a1a:	91 e0       	ldi	r25, 0x01	; 1
    2a1c:	91 83       	std	Z+1, r25	; 0x01
    PORTA.DIRSET = PIN5_bm;
    2a1e:	80 e2       	ldi	r24, 0x20	; 32
    2a20:	81 83       	std	Z+1, r24	; 0x01

    // drive both back to zero
    PORTA.OUTCLR = PIN0_bm;
    2a22:	96 83       	std	Z+6, r25	; 0x06
    PORTA.OUTCLR = PIN5_bm;
    2a24:	86 83       	std	Z+6, r24	; 0x06

    // reset as inputs
    PORTA.DIRCLR = PIN0_bm;
    2a26:	92 83       	std	Z+2, r25	; 0x02
    PORTA.DIRCLR = PIN5_bm;
    2a28:	82 83       	std	Z+2, r24	; 0x02
    2a2a:	08 95       	ret

00002a2c <__vector_71>:

}

ISR(ADCA_CH0_vect)
{
    2a2c:	1f 92       	push	r1
    2a2e:	0f 92       	push	r0
    2a30:	0f b6       	in	r0, 0x3f	; 63
    2a32:	0f 92       	push	r0
    2a34:	11 24       	eor	r1, r1
    2a36:	0b b6       	in	r0, 0x3b	; 59
    2a38:	0f 92       	push	r0
    2a3a:	2f 93       	push	r18
    2a3c:	3f 93       	push	r19
    2a3e:	4f 93       	push	r20
    2a40:	5f 93       	push	r21
    2a42:	6f 93       	push	r22
    2a44:	7f 93       	push	r23
    2a46:	8f 93       	push	r24
    2a48:	9f 93       	push	r25
    2a4a:	af 93       	push	r26
    2a4c:	bf 93       	push	r27
    2a4e:	cf 93       	push	r28
    2a50:	df 93       	push	r29
    2a52:	ef 93       	push	r30
    2a54:	ff 93       	push	r31
    ADCA.CH0.INTFLAGS |= ADC_CH_CHIF_bm;
    2a56:	c0 e0       	ldi	r28, 0x00	; 0
    2a58:	d2 e0       	ldi	r29, 0x02	; 2
    2a5a:	8b a1       	ldd	r24, Y+35	; 0x23
    2a5c:	81 60       	ori	r24, 0x01	; 1
    2a5e:	8b a3       	std	Y+35, r24	; 0x23
    
    // update the data
    updateHWMic();
    2a60:	0e 94 e6 14 	call	0x29cc	; 0x29cc <updateHWMic>

    // restart the conversion
    ADCA.CH0.CTRL |= ADC_CH_START_bm;
    2a64:	88 a1       	ldd	r24, Y+32	; 0x20
    2a66:	80 68       	ori	r24, 0x80	; 128
    2a68:	88 a3       	std	Y+32, r24	; 0x20
}
    2a6a:	ff 91       	pop	r31
    2a6c:	ef 91       	pop	r30
    2a6e:	df 91       	pop	r29
    2a70:	cf 91       	pop	r28
    2a72:	bf 91       	pop	r27
    2a74:	af 91       	pop	r26
    2a76:	9f 91       	pop	r25
    2a78:	8f 91       	pop	r24
    2a7a:	7f 91       	pop	r23
    2a7c:	6f 91       	pop	r22
    2a7e:	5f 91       	pop	r21
    2a80:	4f 91       	pop	r20
    2a82:	3f 91       	pop	r19
    2a84:	2f 91       	pop	r18
    2a86:	0f 90       	pop	r0
    2a88:	0b be       	out	0x3b, r0	; 59
    2a8a:	0f 90       	pop	r0
    2a8c:	0f be       	out	0x3f, r0	; 63
    2a8e:	0f 90       	pop	r0
    2a90:	1f 90       	pop	r1
    2a92:	18 95       	reti

00002a94 <timer_set>:
		}
	}
*/

void timer_set( uint32_t bps, TC0_t * tx_timer, TC1_t * rx_timer)
{
    2a94:	6f 92       	push	r6
    2a96:	7f 92       	push	r7
    2a98:	8f 92       	push	r8
    2a9a:	9f 92       	push	r9
    2a9c:	af 92       	push	r10
    2a9e:	bf 92       	push	r11
    2aa0:	cf 92       	push	r12
    2aa2:	df 92       	push	r13
    2aa4:	ef 92       	push	r14
    2aa6:	ff 92       	push	r15
    2aa8:	0f 93       	push	r16
    2aaa:	1f 93       	push	r17
    2aac:	cf 93       	push	r28
    2aae:	df 93       	push	r29
    2ab0:	4b 01       	movw	r8, r22
    2ab2:	5c 01       	movw	r10, r24
    2ab4:	8a 01       	movw	r16, r20
    2ab6:	e9 01       	movw	r28, r18
	uint16_t per;

	per = ((uint32_t)F_CPU / (bps));
    2ab8:	c1 2c       	mov	r12, r1
    2aba:	88 e4       	ldi	r24, 0x48	; 72
    2abc:	d8 2e       	mov	r13, r24
    2abe:	88 ee       	ldi	r24, 0xE8	; 232
    2ac0:	e8 2e       	mov	r14, r24
    2ac2:	ff 24       	eor	r15, r15
    2ac4:	f3 94       	inc	r15
    2ac6:	c7 01       	movw	r24, r14
    2ac8:	b6 01       	movw	r22, r12
    2aca:	a5 01       	movw	r20, r10
    2acc:	94 01       	movw	r18, r8
    2ace:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <__udivmodsi4>

	tx_timer->INTCTRLA = TC_OVFINTLVL_HI_gc;
    2ad2:	93 e0       	ldi	r25, 0x03	; 3
    2ad4:	69 2e       	mov	r6, r25
    2ad6:	f8 01       	movw	r30, r16
    2ad8:	66 82       	std	Z+6, r6	; 0x06
	tx_timer->PER = per;
    2ada:	26 a3       	std	Z+38, r18	; 0x26
    2adc:	37 a3       	std	Z+39, r19	; 0x27
	tx_timer->CTRLA = TC_CLKSEL_DIV1_gc;
    2ade:	77 24       	eor	r7, r7
    2ae0:	73 94       	inc	r7
    2ae2:	70 82       	st	Z, r7

//	printf("TCE0 set to %x %x %x\r\n",tx_timer->INTCTRLA, tx_timer->PER, tx_timer->CTRLA);

	per = ((uint32_t)F_CPU / (bps*3));
    2ae4:	a3 e0       	ldi	r26, 0x03	; 3
    2ae6:	b0 e0       	ldi	r27, 0x00	; 0
    2ae8:	a5 01       	movw	r20, r10
    2aea:	94 01       	movw	r18, r8
    2aec:	0e 94 92 17 	call	0x2f24	; 0x2f24 <__muluhisi3>
    2af0:	9b 01       	movw	r18, r22
    2af2:	ac 01       	movw	r20, r24
    2af4:	c7 01       	movw	r24, r14
    2af6:	b6 01       	movw	r22, r12
    2af8:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <__udivmodsi4>
	//per = 31; // bps*9

	rx_timer->INTCTRLA = TC_OVFINTLVL_HI_gc;
    2afc:	6e 82       	std	Y+6, r6	; 0x06
	rx_timer->PER = per;
    2afe:	2e a3       	std	Y+38, r18	; 0x26
    2b00:	3f a3       	std	Y+39, r19	; 0x27
	rx_timer->CTRLA = TC_CLKSEL_DIV1_gc;
    2b02:	78 82       	st	Y, r7
}
    2b04:	df 91       	pop	r29
    2b06:	cf 91       	pop	r28
    2b08:	1f 91       	pop	r17
    2b0a:	0f 91       	pop	r16
    2b0c:	ff 90       	pop	r15
    2b0e:	ef 90       	pop	r14
    2b10:	df 90       	pop	r13
    2b12:	cf 90       	pop	r12
    2b14:	bf 90       	pop	r11
    2b16:	af 90       	pop	r10
    2b18:	9f 90       	pop	r9
    2b1a:	8f 90       	pop	r8
    2b1c:	7f 90       	pop	r7
    2b1e:	6f 90       	pop	r6
    2b20:	08 95       	ret

00002b22 <configure_soft_uart>:

void configure_soft_uart(soft_uart_t * uart, CircBuf * ctx, CircBuf * crx)
{
    2b22:	fc 01       	movw	r30, r24
	uart->rx = crx;
    2b24:	40 87       	std	Z+8, r20	; 0x08
    2b26:	51 87       	std	Z+9, r21	; 0x09
	uart->tx = ctx;
    2b28:	66 83       	std	Z+6, r22	; 0x06
    2b2a:	77 83       	std	Z+7, r23	; 0x07
	uart->internal_rx_buffer =  0;
    2b2c:	10 82       	st	Z, r1
	uart->internal_tx_buffer  = 0;
    2b2e:	11 82       	std	Z+1, r1	; 0x01
    2b30:	12 82       	std	Z+2, r1	; 0x02
    2b32:	08 95       	ret

00002b34 <init_soft_uart>:
}

void init_soft_uart()
{
	PORTD.OUTSET = PIN5_bm | PIN6_bm; // set tx output high (idle)
    2b34:	e0 e6       	ldi	r30, 0x60	; 96
    2b36:	f6 e0       	ldi	r31, 0x06	; 6
    2b38:	80 e6       	ldi	r24, 0x60	; 96
    2b3a:	85 83       	std	Z+5, r24	; 0x05
	PORTD.DIRSET = PIN5_bm | PIN6_bm; // tx pins as output
    2b3c:	81 83       	std	Z+1, r24	; 0x01
	PORTD.DIRCLR = PIN4_bm | PIN7_bm; // rx pins as input
    2b3e:	80 e9       	ldi	r24, 0x90	; 144
    2b40:	82 83       	std	Z+2, r24	; 0x02

	PORTD.PIN4CTRL |= PORT_OPC_PULLUP_gc;	// set pullups on rx lines to prevent floating noise
    2b42:	84 89       	ldd	r24, Z+20	; 0x14
    2b44:	88 61       	ori	r24, 0x18	; 24
    2b46:	84 8b       	std	Z+20, r24	; 0x14
	PORTD.PIN7CTRL |= PORT_OPC_PULLUP_gc;
    2b48:	87 89       	ldd	r24, Z+23	; 0x17
    2b4a:	88 61       	ori	r24, 0x18	; 24
    2b4c:	87 8b       	std	Z+23, r24	; 0x17

	soft_uart[1].rx_state = SU_RX_IDLE;
    2b4e:	10 92 8d 25 	sts	0x258D, r1
{
	uint16_t per;

	per = ((uint32_t)F_CPU / (bps));

	tx_timer->INTCTRLA = TC_OVFINTLVL_HI_gc;
    2b52:	e0 e0       	ldi	r30, 0x00	; 0
    2b54:	fa e0       	ldi	r31, 0x0A	; 10
    2b56:	33 e0       	ldi	r19, 0x03	; 3
    2b58:	36 83       	std	Z+6, r19	; 0x06
	tx_timer->PER = per;
    2b5a:	81 e4       	ldi	r24, 0x41	; 65
    2b5c:	93 e0       	ldi	r25, 0x03	; 3
    2b5e:	86 a3       	std	Z+38, r24	; 0x26
    2b60:	97 a3       	std	Z+39, r25	; 0x27
	tx_timer->CTRLA = TC_CLKSEL_DIV1_gc;
    2b62:	21 e0       	ldi	r18, 0x01	; 1
    2b64:	20 83       	st	Z, r18
//	printf("TCE0 set to %x %x %x\r\n",tx_timer->INTCTRLA, tx_timer->PER, tx_timer->CTRLA);

	per = ((uint32_t)F_CPU / (bps*3));
	//per = 31; // bps*9

	rx_timer->INTCTRLA = TC_OVFINTLVL_HI_gc;
    2b66:	e0 e4       	ldi	r30, 0x40	; 64
    2b68:	f9 e0       	ldi	r31, 0x09	; 9
    2b6a:	36 83       	std	Z+6, r19	; 0x06
	rx_timer->PER = per;
    2b6c:	85 e1       	ldi	r24, 0x15	; 21
    2b6e:	91 e0       	ldi	r25, 0x01	; 1
    2b70:	86 a3       	std	Z+38, r24	; 0x26
    2b72:	97 a3       	std	Z+39, r25	; 0x27
	rx_timer->CTRLA = TC_CLKSEL_DIV1_gc;
    2b74:	20 83       	st	Z, r18
    2b76:	08 95       	ret

00002b78 <su_getchar>:

	timer_set( BAUD_RATE, &TCE0, &TCD1);
}

int su_getchar(soft_uart_t * uart)
{
    2b78:	cf 93       	push	r28
    2b7a:	df 93       	push	r29
    2b7c:	ec 01       	movw	r28, r24
	char		ch;

	if(isEmpty((uart->rx)))
    2b7e:	88 85       	ldd	r24, Y+8	; 0x08
    2b80:	99 85       	ldd	r25, Y+9	; 0x09
    2b82:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <isEmpty>
    2b86:	81 11       	cpse	r24, r1
    2b88:	07 c0       	rjmp	.+14     	; 0x2b98 <su_getchar+0x20>
	{
		return -1;
	}
	else
	{
		ch = pop((uart->rx));
    2b8a:	88 85       	ldd	r24, Y+8	; 0x08
    2b8c:	99 85       	ldd	r25, Y+9	; 0x09
    2b8e:	0e 94 cf 01 	call	0x39e	; 0x39e <pop>
    2b92:	9c 01       	movw	r18, r24
		return( ch );
    2b94:	33 27       	eor	r19, r19
    2b96:	02 c0       	rjmp	.+4      	; 0x2b9c <su_getchar+0x24>
{
	char		ch;

	if(isEmpty((uart->rx)))
	{
		return -1;
    2b98:	2f ef       	ldi	r18, 0xFF	; 255
    2b9a:	3f ef       	ldi	r19, 0xFF	; 255
	else
	{
		ch = pop((uart->rx));
		return( ch );
	}
}
    2b9c:	c9 01       	movw	r24, r18
    2b9e:	df 91       	pop	r29
    2ba0:	cf 91       	pop	r28
    2ba2:	08 95       	ret

00002ba4 <set_tx_char>:

void set_tx_char(int ch, soft_uart_t * uart)
{
	if(ch != -1)
    2ba4:	8f 3f       	cpi	r24, 0xFF	; 255
    2ba6:	2f ef       	ldi	r18, 0xFF	; 255
    2ba8:	92 07       	cpc	r25, r18
    2baa:	31 f0       	breq	.+12     	; 0x2bb8 <set_tx_char+0x14>
	{
		uart->internal_tx_buffer = (ch << 1) | 0x200;
    2bac:	88 0f       	add	r24, r24
    2bae:	99 1f       	adc	r25, r25
    2bb0:	92 60       	ori	r25, 0x02	; 2
    2bb2:	fb 01       	movw	r30, r22
    2bb4:	81 83       	std	Z+1, r24	; 0x01
    2bb6:	92 83       	std	Z+2, r25	; 0x02
    2bb8:	08 95       	ret

00002bba <su_putchar>:
	}
}

void su_putchar( char ch, soft_uart_t * uart)
{
	while ( uart->internal_tx_buffer != 0 );
    2bba:	fb 01       	movw	r30, r22
    2bbc:	21 81       	ldd	r18, Z+1	; 0x01
    2bbe:	32 81       	ldd	r19, Z+2	; 0x02
    2bc0:	23 2b       	or	r18, r19
    2bc2:	d9 f7       	brne	.-10     	; 0x2bba <su_putchar>

	set_tx_char(ch, uart);
    2bc4:	90 e0       	ldi	r25, 0x00	; 0
    2bc6:	0c 94 d2 15 	jmp	0x2ba4	; 0x2ba4 <set_tx_char>

00002bca <kbhit>:

}

int kbhit( soft_uart_t * uart )
{
	return( !isEmpty(uart->rx));
    2bca:	fc 01       	movw	r30, r24
    2bcc:	80 85       	ldd	r24, Z+8	; 0x08
    2bce:	91 85       	ldd	r25, Z+9	; 0x09
    2bd0:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <isEmpty>
    2bd4:	21 e0       	ldi	r18, 0x01	; 1
    2bd6:	30 e0       	ldi	r19, 0x00	; 0
    2bd8:	88 23       	and	r24, r24
    2bda:	11 f0       	breq	.+4      	; 0x2be0 <kbhit+0x16>
    2bdc:	20 e0       	ldi	r18, 0x00	; 0
    2bde:	30 e0       	ldi	r19, 0x00	; 0
}
    2be0:	c9 01       	movw	r24, r18
    2be2:	08 95       	ret

00002be4 <__vector_83>:

// rx ISR
ISR(TCD1_OVF_vect)
{
    2be4:	1f 92       	push	r1
    2be6:	0f 92       	push	r0
    2be8:	0f b6       	in	r0, 0x3f	; 63
    2bea:	0f 92       	push	r0
    2bec:	11 24       	eor	r1, r1
    2bee:	0b b6       	in	r0, 0x3b	; 59
    2bf0:	0f 92       	push	r0
    2bf2:	2f 93       	push	r18
    2bf4:	3f 93       	push	r19
    2bf6:	4f 93       	push	r20
    2bf8:	5f 93       	push	r21
    2bfa:	6f 93       	push	r22
    2bfc:	7f 93       	push	r23
    2bfe:	8f 93       	push	r24
    2c00:	9f 93       	push	r25
    2c02:	af 93       	push	r26
    2c04:	bf 93       	push	r27
    2c06:	ef 93       	push	r30
    2c08:	ff 93       	push	r31
	if(!soft_uart[0].sample_time)
    2c0a:	80 91 84 25 	lds	r24, 0x2584
    2c0e:	81 11       	cpse	r24, r1
    2c10:	3b c0       	rjmp	.+118    	; 0x2c88 <__vector_83+0xa4>
	{
		if(soft_uart[0].rx_state == SU_RX_IDLE)
    2c12:	80 91 83 25 	lds	r24, 0x2583
    2c16:	81 11       	cpse	r24, r1
    2c18:	0b c0       	rjmp	.+22     	; 0x2c30 <__vector_83+0x4c>
		{
			if(!(PORTD.IN & PIN4_bm))
    2c1a:	80 91 68 06 	lds	r24, 0x0668
    2c1e:	84 fd       	sbrc	r24, 4
    2c20:	36 c0       	rjmp	.+108    	; 0x2c8e <__vector_83+0xaa>
			{
				soft_uart[0].rx_state = SU_RX_BYTE;
    2c22:	81 e0       	ldi	r24, 0x01	; 1
    2c24:	80 93 83 25 	sts	0x2583, r24
				soft_uart[0].rx_mask = 0x01;
    2c28:	80 93 82 25 	sts	0x2582, r24
				soft_uart[0].sample_time = 3;	// begin sampling every third time
    2c2c:	83 e0       	ldi	r24, 0x03	; 3
    2c2e:	2d c0       	rjmp	.+90     	; 0x2c8a <__vector_83+0xa6>
			}
		}
		else if (soft_uart[0].rx_state == SU_RX_BYTE)
    2c30:	81 30       	cpi	r24, 0x01	; 1
    2c32:	b9 f4       	brne	.+46     	; 0x2c62 <__vector_83+0x7e>
		{
			if(PORTD.IN & PIN4_bm)
    2c34:	80 91 68 06 	lds	r24, 0x0668
    2c38:	84 ff       	sbrs	r24, 4
    2c3a:	07 c0       	rjmp	.+14     	; 0x2c4a <__vector_83+0x66>
			{
				soft_uart[0].internal_rx_buffer |= soft_uart[0].rx_mask;
    2c3c:	80 91 7f 25 	lds	r24, 0x257F
    2c40:	90 91 82 25 	lds	r25, 0x2582
    2c44:	89 2b       	or	r24, r25
    2c46:	80 93 7f 25 	sts	0x257F, r24
			}

			soft_uart[0].rx_mask <<= 1;
    2c4a:	80 91 82 25 	lds	r24, 0x2582
    2c4e:	88 0f       	add	r24, r24
    2c50:	80 93 82 25 	sts	0x2582, r24

			if(!soft_uart[0].rx_mask)
    2c54:	81 11       	cpse	r24, r1
    2c56:	03 c0       	rjmp	.+6      	; 0x2c5e <__vector_83+0x7a>
			{
				soft_uart[0].rx_state = SU_RX_STOP;
    2c58:	82 e0       	ldi	r24, 0x02	; 2
    2c5a:	80 93 83 25 	sts	0x2583, r24
			}

			soft_uart[0].sample_time = 2;
    2c5e:	82 e0       	ldi	r24, 0x02	; 2
    2c60:	14 c0       	rjmp	.+40     	; 0x2c8a <__vector_83+0xa6>
		}
		else if (soft_uart[0].rx_state == SU_RX_STOP)
    2c62:	82 30       	cpi	r24, 0x02	; 2
    2c64:	a1 f4       	brne	.+40     	; 0x2c8e <__vector_83+0xaa>
		{
			if(PORTD.IN & PIN4_bm)
    2c66:	80 91 68 06 	lds	r24, 0x0668
    2c6a:	84 ff       	sbrs	r24, 4
    2c6c:	0a c0       	rjmp	.+20     	; 0x2c82 <__vector_83+0x9e>
			{
				push(soft_uart[0].internal_rx_buffer, soft_uart[0].rx);
    2c6e:	80 91 7f 25 	lds	r24, 0x257F
    2c72:	60 91 87 25 	lds	r22, 0x2587
    2c76:	70 91 88 25 	lds	r23, 0x2588
    2c7a:	0e 94 b4 01 	call	0x368	; 0x368 <push>
				soft_uart[0].internal_rx_buffer = 0;
    2c7e:	10 92 7f 25 	sts	0x257F, r1
			}

			soft_uart[0].rx_state = SU_RX_IDLE;
    2c82:	10 92 83 25 	sts	0x2583, r1
    2c86:	03 c0       	rjmp	.+6      	; 0x2c8e <__vector_83+0xaa>
		}
	}
	else
	{
		soft_uart[0].sample_time--;
    2c88:	81 50       	subi	r24, 0x01	; 1
    2c8a:	80 93 84 25 	sts	0x2584, r24
	}

	if(!soft_uart[1].sample_time)
    2c8e:	80 91 8e 25 	lds	r24, 0x258E
    2c92:	81 11       	cpse	r24, r1
    2c94:	3b c0       	rjmp	.+118    	; 0x2d0c <__vector_83+0x128>
	{
		if(soft_uart[1].rx_state == SU_RX_IDLE)
    2c96:	80 91 8d 25 	lds	r24, 0x258D
    2c9a:	81 11       	cpse	r24, r1
    2c9c:	0b c0       	rjmp	.+22     	; 0x2cb4 <__vector_83+0xd0>
		{
			if(!(PORTD.IN & PIN7_bm))
    2c9e:	80 91 68 06 	lds	r24, 0x0668
    2ca2:	87 fd       	sbrc	r24, 7
    2ca4:	36 c0       	rjmp	.+108    	; 0x2d12 <__vector_83+0x12e>
			{
				soft_uart[1].rx_state = SU_RX_BYTE;
    2ca6:	81 e0       	ldi	r24, 0x01	; 1
    2ca8:	80 93 8d 25 	sts	0x258D, r24
				soft_uart[1].rx_mask = 0x01;
    2cac:	80 93 8c 25 	sts	0x258C, r24
				soft_uart[1].sample_time = 3;	// begin sampling every third time
    2cb0:	83 e0       	ldi	r24, 0x03	; 3
    2cb2:	2d c0       	rjmp	.+90     	; 0x2d0e <__vector_83+0x12a>
			}
		}
		else if (soft_uart[1].rx_state == SU_RX_BYTE)
    2cb4:	81 30       	cpi	r24, 0x01	; 1
    2cb6:	b9 f4       	brne	.+46     	; 0x2ce6 <__vector_83+0x102>
		{
			if(PORTD.IN & PIN7_bm)
    2cb8:	80 91 68 06 	lds	r24, 0x0668
    2cbc:	87 ff       	sbrs	r24, 7
    2cbe:	07 c0       	rjmp	.+14     	; 0x2cce <__vector_83+0xea>
			{
				soft_uart[1].internal_rx_buffer |= soft_uart[1].rx_mask;
    2cc0:	80 91 89 25 	lds	r24, 0x2589
    2cc4:	90 91 8c 25 	lds	r25, 0x258C
    2cc8:	89 2b       	or	r24, r25
    2cca:	80 93 89 25 	sts	0x2589, r24
			}

			soft_uart[1].rx_mask <<= 1;
    2cce:	80 91 8c 25 	lds	r24, 0x258C
    2cd2:	88 0f       	add	r24, r24
    2cd4:	80 93 8c 25 	sts	0x258C, r24

			if(!soft_uart[1].rx_mask)
    2cd8:	81 11       	cpse	r24, r1
    2cda:	03 c0       	rjmp	.+6      	; 0x2ce2 <__vector_83+0xfe>
			{
				soft_uart[1].rx_state = SU_RX_STOP;
    2cdc:	82 e0       	ldi	r24, 0x02	; 2
    2cde:	80 93 8d 25 	sts	0x258D, r24
			}

			soft_uart[1].sample_time = 2;
    2ce2:	82 e0       	ldi	r24, 0x02	; 2
    2ce4:	14 c0       	rjmp	.+40     	; 0x2d0e <__vector_83+0x12a>
		}
		else if (soft_uart[1].rx_state == SU_RX_STOP)
    2ce6:	82 30       	cpi	r24, 0x02	; 2
    2ce8:	a1 f4       	brne	.+40     	; 0x2d12 <__vector_83+0x12e>
		{
			if(PORTD.IN & PIN7_bm)
    2cea:	80 91 68 06 	lds	r24, 0x0668
    2cee:	87 ff       	sbrs	r24, 7
    2cf0:	0a c0       	rjmp	.+20     	; 0x2d06 <__vector_83+0x122>
			{
				push(soft_uart[1].internal_rx_buffer, soft_uart[1].rx);
    2cf2:	80 91 89 25 	lds	r24, 0x2589
    2cf6:	60 91 91 25 	lds	r22, 0x2591
    2cfa:	70 91 92 25 	lds	r23, 0x2592
    2cfe:	0e 94 b4 01 	call	0x368	; 0x368 <push>
				soft_uart[1].internal_rx_buffer = 0;
    2d02:	10 92 89 25 	sts	0x2589, r1
			}

			soft_uart[1].rx_state = SU_RX_IDLE;
    2d06:	10 92 8d 25 	sts	0x258D, r1
    2d0a:	03 c0       	rjmp	.+6      	; 0x2d12 <__vector_83+0x12e>
		}
	}
	else
	{
		soft_uart[1].sample_time--;
    2d0c:	81 50       	subi	r24, 0x01	; 1
    2d0e:	80 93 8e 25 	sts	0x258E, r24
	}
}
    2d12:	ff 91       	pop	r31
    2d14:	ef 91       	pop	r30
    2d16:	bf 91       	pop	r27
    2d18:	af 91       	pop	r26
    2d1a:	9f 91       	pop	r25
    2d1c:	8f 91       	pop	r24
    2d1e:	7f 91       	pop	r23
    2d20:	6f 91       	pop	r22
    2d22:	5f 91       	pop	r21
    2d24:	4f 91       	pop	r20
    2d26:	3f 91       	pop	r19
    2d28:	2f 91       	pop	r18
    2d2a:	0f 90       	pop	r0
    2d2c:	0b be       	out	0x3b, r0	; 59
    2d2e:	0f 90       	pop	r0
    2d30:	0f be       	out	0x3f, r0	; 63
    2d32:	0f 90       	pop	r0
    2d34:	1f 90       	pop	r1
    2d36:	18 95       	reti

00002d38 <TWI_MasterInit>:
 */
void TWI_MasterInit(TWI_Master_t *twi,
                    TWI_t *module,
                    TWI_MASTER_INTLVL_t intLevel,
                    uint8_t baudRateRegisterSetting)
{
    2d38:	fc 01       	movw	r30, r24
	twi->interface = module;
    2d3a:	60 83       	st	Z, r22
    2d3c:	71 83       	std	Z+1, r23	; 0x01
	twi->interface->MASTER.CTRLA = intLevel |
    2d3e:	48 63       	ori	r20, 0x38	; 56
    2d40:	db 01       	movw	r26, r22
    2d42:	11 96       	adiw	r26, 0x01	; 1
    2d44:	4c 93       	st	X, r20
	                               TWI_MASTER_RIEN_bm |
	                               TWI_MASTER_WIEN_bm |
	                               TWI_MASTER_ENABLE_bm;
	twi->interface->MASTER.BAUD = baudRateRegisterSetting;
    2d46:	a0 81       	ld	r26, Z
    2d48:	b1 81       	ldd	r27, Z+1	; 0x01
    2d4a:	15 96       	adiw	r26, 0x05	; 5
    2d4c:	2c 93       	st	X, r18
	twi->interface->MASTER.STATUS = TWI_MASTER_BUSSTATE_IDLE_gc;
    2d4e:	01 90       	ld	r0, Z+
    2d50:	f0 81       	ld	r31, Z
    2d52:	e0 2d       	mov	r30, r0
    2d54:	81 e0       	ldi	r24, 0x01	; 1
    2d56:	84 83       	std	Z+4, r24	; 0x04
    2d58:	08 95       	ret

00002d5a <TWI_MasterState>:
 *  \retval TWI_MASTER_BUSSTATE_BUSY_gc    Bus state is busy.
 */
TWI_MASTER_BUSSTATE_t TWI_MasterState(TWI_Master_t *twi)
{
	TWI_MASTER_BUSSTATE_t twi_status;
	twi_status = (TWI_MASTER_BUSSTATE_t) (twi->interface->MASTER.STATUS &
    2d5a:	dc 01       	movw	r26, r24
    2d5c:	ed 91       	ld	r30, X+
    2d5e:	fc 91       	ld	r31, X
    2d60:	84 81       	ldd	r24, Z+4	; 0x04
	                                      TWI_MASTER_BUSSTATE_gm);
	return twi_status;
}
    2d62:	83 70       	andi	r24, 0x03	; 3
    2d64:	08 95       	ret

00002d66 <TWI_MasterReady>:
 *  \retval true  If transaction could be started.
 *  \retval false If transaction could not be started.
 */
bool TWI_MasterReady(TWI_Master_t *twi)
{
	bool twi_status = (twi->status & TWIM_STATUS_READY);
    2d66:	fc 01       	movw	r30, r24
    2d68:	87 85       	ldd	r24, Z+15	; 0x0f
	return twi_status;
}
    2d6a:	80 e0       	ldi	r24, 0x00	; 0
    2d6c:	08 95       	ret

00002d6e <TWI_MasterWriteRead>:
bool TWI_MasterWriteRead(TWI_Master_t *twi,
                         uint8_t address,
                         uint8_t *writeData,
                         uint8_t bytesToWrite,
                         uint8_t bytesToRead)
{
    2d6e:	0f 93       	push	r16
    2d70:	cf 93       	push	r28
    2d72:	df 93       	push	r29
    2d74:	fc 01       	movw	r30, r24
	/*Parameter sanity check. */
	if (bytesToWrite > TWIM_WRITE_BUFFER_SIZE) {
    2d76:	25 30       	cpi	r18, 0x05	; 5
    2d78:	50 f5       	brcc	.+84     	; 0x2dce <TWI_MasterWriteRead+0x60>
		return false;
	}
	if (bytesToRead > TWIM_READ_BUFFER_SIZE) {
    2d7a:	05 30       	cpi	r16, 0x05	; 5
    2d7c:	40 f5       	brcc	.+80     	; 0x2dce <TWI_MasterWriteRead+0x60>
		return false;
	}

	/*Initiate transaction if bus is ready. */
	if (twi->status == TWIM_STATUS_READY) {
    2d7e:	87 85       	ldd	r24, Z+15	; 0x0f
    2d80:	81 11       	cpse	r24, r1
    2d82:	25 c0       	rjmp	.+74     	; 0x2dce <TWI_MasterWriteRead+0x60>

		twi->status = TWIM_STATUS_BUSY;
    2d84:	81 e0       	ldi	r24, 0x01	; 1
    2d86:	87 87       	std	Z+15, r24	; 0x0f
		twi->result = TWIM_RESULT_UNKNOWN;
    2d88:	10 8a       	std	Z+16, r1	; 0x10

		twi->address = address<<1;
    2d8a:	66 0f       	add	r22, r22
    2d8c:	62 83       	std	Z+2, r22	; 0x02
    2d8e:	da 01       	movw	r26, r20

		/* Fill write data buffer. */
		for (uint8_t bufferIndex=0; bufferIndex < bytesToWrite; bufferIndex++) {
    2d90:	80 e0       	ldi	r24, 0x00	; 0
    2d92:	90 e0       	ldi	r25, 0x00	; 0
    2d94:	06 c0       	rjmp	.+12     	; 0x2da2 <TWI_MasterWriteRead+0x34>
			twi->writeData[bufferIndex] = writeData[bufferIndex];
    2d96:	3d 91       	ld	r19, X+
    2d98:	ef 01       	movw	r28, r30
    2d9a:	c8 0f       	add	r28, r24
    2d9c:	d9 1f       	adc	r29, r25
    2d9e:	3b 83       	std	Y+3, r19	; 0x03
    2da0:	01 96       	adiw	r24, 0x01	; 1
		twi->result = TWIM_RESULT_UNKNOWN;

		twi->address = address<<1;

		/* Fill write data buffer. */
		for (uint8_t bufferIndex=0; bufferIndex < bytesToWrite; bufferIndex++) {
    2da2:	82 17       	cp	r24, r18
    2da4:	c0 f3       	brcs	.-16     	; 0x2d96 <TWI_MasterWriteRead+0x28>
			twi->writeData[bufferIndex] = writeData[bufferIndex];
		}

		twi->bytesToWrite = bytesToWrite;
    2da6:	23 87       	std	Z+11, r18	; 0x0b
		twi->bytesToRead = bytesToRead;
    2da8:	04 87       	std	Z+12, r16	; 0x0c
		twi->bytesWritten = 0;
    2daa:	15 86       	std	Z+13, r1	; 0x0d
		twi->bytesRead = 0;
    2dac:	16 86       	std	Z+14, r1	; 0x0e

		/* If write command, send the START condition + Address +
		 * 'R/_W = 0'
		 */
		if (twi->bytesToWrite > 0) {
    2dae:	83 85       	ldd	r24, Z+11	; 0x0b
    2db0:	88 23       	and	r24, r24
    2db2:	19 f0       	breq	.+6      	; 0x2dba <TWI_MasterWriteRead+0x4c>
			uint8_t writeAddress = twi->address & ~0x01;
    2db4:	82 81       	ldd	r24, Z+2	; 0x02
    2db6:	8e 7f       	andi	r24, 0xFE	; 254
    2db8:	05 c0       	rjmp	.+10     	; 0x2dc4 <TWI_MasterWriteRead+0x56>
		}

		/* If read command, send the START condition + Address +
		 * 'R/_W = 1'
		 */
		else if (twi->bytesToRead > 0) {
    2dba:	84 85       	ldd	r24, Z+12	; 0x0c
    2dbc:	88 23       	and	r24, r24
    2dbe:	49 f0       	breq	.+18     	; 0x2dd2 <TWI_MasterWriteRead+0x64>
			uint8_t readAddress = twi->address | 0x01;
    2dc0:	82 81       	ldd	r24, Z+2	; 0x02
    2dc2:	81 60       	ori	r24, 0x01	; 1
			twi->interface->MASTER.ADDR = readAddress;
    2dc4:	01 90       	ld	r0, Z+
    2dc6:	f0 81       	ld	r31, Z
    2dc8:	e0 2d       	mov	r30, r0
    2dca:	86 83       	std	Z+6, r24	; 0x06
    2dcc:	02 c0       	rjmp	.+4      	; 0x2dd2 <TWI_MasterWriteRead+0x64>
                         uint8_t bytesToWrite,
                         uint8_t bytesToRead)
{
	/*Parameter sanity check. */
	if (bytesToWrite > TWIM_WRITE_BUFFER_SIZE) {
		return false;
    2dce:	80 e0       	ldi	r24, 0x00	; 0
    2dd0:	01 c0       	rjmp	.+2      	; 0x2dd4 <TWI_MasterWriteRead+0x66>
		 */
		else if (twi->bytesToRead > 0) {
			uint8_t readAddress = twi->address | 0x01;
			twi->interface->MASTER.ADDR = readAddress;
		}
		return true;
    2dd2:	81 e0       	ldi	r24, 0x01	; 1
	} else {
		return false;
	}
}
    2dd4:	df 91       	pop	r29
    2dd6:	cf 91       	pop	r28
    2dd8:	0f 91       	pop	r16
    2dda:	08 95       	ret

00002ddc <TWI_MasterRead>:
 *  \retval false If transaction could not be started.
 */
bool TWI_MasterRead(TWI_Master_t *twi,
                    uint8_t address,
                    uint8_t bytesToRead)
{
    2ddc:	0f 93       	push	r16
	bool twi_status = TWI_MasterWriteRead(twi, address, 0, 0, bytesToRead);
    2dde:	04 2f       	mov	r16, r20
    2de0:	20 e0       	ldi	r18, 0x00	; 0
    2de2:	40 e0       	ldi	r20, 0x00	; 0
    2de4:	50 e0       	ldi	r21, 0x00	; 0
    2de6:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <TWI_MasterWriteRead>
	return twi_status;
}
    2dea:	0f 91       	pop	r16
    2dec:	08 95       	ret

00002dee <TWI_MasterWrite>:
 */
bool TWI_MasterWrite(TWI_Master_t *twi,
                     uint8_t address,
                     uint8_t *writeData,
                     uint8_t bytesToWrite)
{
    2dee:	0f 93       	push	r16
	bool twi_status = TWI_MasterWriteRead(twi, address, writeData, bytesToWrite, 0);
    2df0:	00 e0       	ldi	r16, 0x00	; 0
    2df2:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <TWI_MasterWriteRead>
	return twi_status;
}
    2df6:	0f 91       	pop	r16
    2df8:	08 95       	ret

00002dfa <TWI_MasterArbitrationLostBusErrorHandler>:
 *  Handles TWI responses to lost arbitration and bus error.
 *
 *  \param twi  The TWI_Master_t struct instance.
 */
void TWI_MasterArbitrationLostBusErrorHandler(TWI_Master_t *twi)
{
    2dfa:	fc 01       	movw	r30, r24
	uint8_t currentStatus = twi->interface->MASTER.STATUS;
    2dfc:	a0 81       	ld	r26, Z
    2dfe:	b1 81       	ldd	r27, Z+1	; 0x01
    2e00:	14 96       	adiw	r26, 0x04	; 4
    2e02:	8c 91       	ld	r24, X
    2e04:	14 97       	sbiw	r26, 0x04	; 4

	/* If bus error. */
	if (currentStatus & TWI_MASTER_BUSERR_bm) {
    2e06:	82 ff       	sbrs	r24, 2
    2e08:	02 c0       	rjmp	.+4      	; 0x2e0e <TWI_MasterArbitrationLostBusErrorHandler+0x14>
		twi->result = TWIM_RESULT_BUS_ERROR;
    2e0a:	94 e0       	ldi	r25, 0x04	; 4
    2e0c:	01 c0       	rjmp	.+2      	; 0x2e10 <TWI_MasterArbitrationLostBusErrorHandler+0x16>
	}
	/* If arbitration lost. */
	else {
		twi->result = TWIM_RESULT_ARBITRATION_LOST;
    2e0e:	93 e0       	ldi	r25, 0x03	; 3
    2e10:	90 8b       	std	Z+16, r25	; 0x10
	}

	/* Clear interrupt flag. */
	twi->interface->MASTER.STATUS = currentStatus | TWI_MASTER_ARBLOST_bm;
    2e12:	88 60       	ori	r24, 0x08	; 8
    2e14:	14 96       	adiw	r26, 0x04	; 4
    2e16:	8c 93       	st	X, r24

	twi->status = TWIM_STATUS_READY;
    2e18:	17 86       	std	Z+15, r1	; 0x0f
    2e1a:	08 95       	ret

00002e1c <TWI_MasterWriteHandler>:
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 *
 *  \param twi The TWI_Master_t struct instance.
 */
void TWI_MasterWriteHandler(TWI_Master_t *twi)
{
    2e1c:	cf 93       	push	r28
    2e1e:	df 93       	push	r29
    2e20:	fc 01       	movw	r30, r24
	/* Local variables used in if tests to avoid compiler warning. */
	uint8_t bytesToWrite  = twi->bytesToWrite;
    2e22:	93 85       	ldd	r25, Z+11	; 0x0b
	uint8_t bytesToRead   = twi->bytesToRead;
    2e24:	84 85       	ldd	r24, Z+12	; 0x0c

	/* If NOT acknowledged (NACK) by slave cancel the transaction. */
	if (twi->interface->MASTER.STATUS & TWI_MASTER_RXACK_bm) {
    2e26:	a0 81       	ld	r26, Z
    2e28:	b1 81       	ldd	r27, Z+1	; 0x01
    2e2a:	14 96       	adiw	r26, 0x04	; 4
    2e2c:	2c 91       	ld	r18, X
    2e2e:	14 97       	sbiw	r26, 0x04	; 4
    2e30:	24 ff       	sbrs	r18, 4
    2e32:	05 c0       	rjmp	.+10     	; 0x2e3e <TWI_MasterWriteHandler+0x22>
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    2e34:	83 e0       	ldi	r24, 0x03	; 3
    2e36:	13 96       	adiw	r26, 0x03	; 3
    2e38:	8c 93       	st	X, r24
		twi->result = TWIM_RESULT_NACK_RECEIVED;
    2e3a:	85 e0       	ldi	r24, 0x05	; 5
    2e3c:	1a c0       	rjmp	.+52     	; 0x2e72 <TWI_MasterWriteHandler+0x56>
		twi->status = TWIM_STATUS_READY;
	}

	/* If more bytes to write, send data. */
	else if (twi->bytesWritten < bytesToWrite) {
    2e3e:	25 85       	ldd	r18, Z+13	; 0x0d
    2e40:	29 17       	cp	r18, r25
    2e42:	58 f4       	brcc	.+22     	; 0x2e5a <TWI_MasterWriteHandler+0x3e>
		uint8_t data = twi->writeData[twi->bytesWritten];
    2e44:	85 85       	ldd	r24, Z+13	; 0x0d
    2e46:	ef 01       	movw	r28, r30
    2e48:	c8 0f       	add	r28, r24
    2e4a:	d1 1d       	adc	r29, r1
    2e4c:	8b 81       	ldd	r24, Y+3	; 0x03
		twi->interface->MASTER.DATA = data;
    2e4e:	17 96       	adiw	r26, 0x07	; 7
    2e50:	8c 93       	st	X, r24
		++twi->bytesWritten;
    2e52:	85 85       	ldd	r24, Z+13	; 0x0d
    2e54:	8f 5f       	subi	r24, 0xFF	; 255
    2e56:	85 87       	std	Z+13, r24	; 0x0d
    2e58:	0e c0       	rjmp	.+28     	; 0x2e76 <TWI_MasterWriteHandler+0x5a>
	}

	/* If bytes to read, send repeated START condition + Address +
	 * 'R/_W = 1'
	 */
	else if (twi->bytesRead < bytesToRead) {
    2e5a:	96 85       	ldd	r25, Z+14	; 0x0e
    2e5c:	98 17       	cp	r25, r24
    2e5e:	28 f4       	brcc	.+10     	; 0x2e6a <TWI_MasterWriteHandler+0x4e>
		uint8_t readAddress = twi->address | 0x01;
    2e60:	82 81       	ldd	r24, Z+2	; 0x02
    2e62:	81 60       	ori	r24, 0x01	; 1
		twi->interface->MASTER.ADDR = readAddress;
    2e64:	16 96       	adiw	r26, 0x06	; 6
    2e66:	8c 93       	st	X, r24
    2e68:	06 c0       	rjmp	.+12     	; 0x2e76 <TWI_MasterWriteHandler+0x5a>
	}

	/* If transaction finished, send STOP condition and set RESULT OK. */
	else {
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    2e6a:	83 e0       	ldi	r24, 0x03	; 3
    2e6c:	13 96       	adiw	r26, 0x03	; 3
    2e6e:	8c 93       	st	X, r24
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result)
{
	twi->result = result;
    2e70:	81 e0       	ldi	r24, 0x01	; 1
    2e72:	80 8b       	std	Z+16, r24	; 0x10
	twi->status = TWIM_STATUS_READY;
    2e74:	17 86       	std	Z+15, r1	; 0x0f
	/* If transaction finished, send STOP condition and set RESULT OK. */
	else {
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		TWI_MasterTransactionFinished(twi, TWIM_RESULT_OK);
	}
}
    2e76:	df 91       	pop	r29
    2e78:	cf 91       	pop	r28
    2e7a:	08 95       	ret

00002e7c <TWI_MasterReadHandler>:
 *  reading bytes from the TWI slave.
 *
 *  \param twi The TWI_Master_t struct instance.
 */
void TWI_MasterReadHandler(TWI_Master_t *twi)
{
    2e7c:	fc 01       	movw	r30, r24
	/* Fetch data if bytes to be read. */
	if (twi->bytesRead < TWIM_READ_BUFFER_SIZE) {
    2e7e:	86 85       	ldd	r24, Z+14	; 0x0e
    2e80:	a0 81       	ld	r26, Z
    2e82:	b1 81       	ldd	r27, Z+1	; 0x01
    2e84:	84 30       	cpi	r24, 0x04	; 4
    2e86:	60 f4       	brcc	.+24     	; 0x2ea0 <TWI_MasterReadHandler+0x24>
		uint8_t data = twi->interface->MASTER.DATA;
    2e88:	17 96       	adiw	r26, 0x07	; 7
    2e8a:	8c 91       	ld	r24, X
		twi->readData[twi->bytesRead] = data;
    2e8c:	96 85       	ldd	r25, Z+14	; 0x0e
    2e8e:	df 01       	movw	r26, r30
    2e90:	a9 0f       	add	r26, r25
    2e92:	b1 1d       	adc	r27, r1
    2e94:	17 96       	adiw	r26, 0x07	; 7
    2e96:	8c 93       	st	X, r24
		twi->bytesRead++;
    2e98:	86 85       	ldd	r24, Z+14	; 0x0e
    2e9a:	8f 5f       	subi	r24, 0xFF	; 255
    2e9c:	86 87       	std	Z+14, r24	; 0x0e
    2e9e:	06 c0       	rjmp	.+12     	; 0x2eac <TWI_MasterReadHandler+0x30>
	}

	/* If buffer overflow, issue STOP and BUFFER_OVERFLOW condition. */
	else {
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    2ea0:	83 e0       	ldi	r24, 0x03	; 3
    2ea2:	13 96       	adiw	r26, 0x03	; 3
    2ea4:	8c 93       	st	X, r24
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result)
{
	twi->result = result;
    2ea6:	82 e0       	ldi	r24, 0x02	; 2
    2ea8:	80 8b       	std	Z+16, r24	; 0x10
	twi->status = TWIM_STATUS_READY;
    2eaa:	17 86       	std	Z+15, r1	; 0x0f
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		TWI_MasterTransactionFinished(twi, TWIM_RESULT_BUFFER_OVERFLOW);
	}

	/* Local variable used in if test to avoid compiler warning. */
	uint8_t bytesToRead = twi->bytesToRead;
    2eac:	84 85       	ldd	r24, Z+12	; 0x0c

	/* If more bytes to read, issue ACK and start a byte read. */
	if (twi->bytesRead < bytesToRead) {
    2eae:	96 85       	ldd	r25, Z+14	; 0x0e
    2eb0:	a0 81       	ld	r26, Z
    2eb2:	b1 81       	ldd	r27, Z+1	; 0x01
    2eb4:	98 17       	cp	r25, r24
    2eb6:	20 f4       	brcc	.+8      	; 0x2ec0 <TWI_MasterReadHandler+0x44>
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    2eb8:	82 e0       	ldi	r24, 0x02	; 2
    2eba:	13 96       	adiw	r26, 0x03	; 3
    2ebc:	8c 93       	st	X, r24
    2ebe:	08 95       	ret
	}

	/* If transaction finished, issue NACK and STOP condition. */
	else {
		twi->interface->MASTER.CTRLC = TWI_MASTER_ACKACT_bm |
    2ec0:	87 e0       	ldi	r24, 0x07	; 7
    2ec2:	13 96       	adiw	r26, 0x03	; 3
    2ec4:	8c 93       	st	X, r24
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result)
{
	twi->result = result;
    2ec6:	81 e0       	ldi	r24, 0x01	; 1
    2ec8:	80 8b       	std	Z+16, r24	; 0x10
	twi->status = TWIM_STATUS_READY;
    2eca:	17 86       	std	Z+15, r1	; 0x0f
    2ecc:	08 95       	ret

00002ece <TWI_MasterInterruptHandler>:
 *
 *  \param twi  The TWI_Master_t struct instance.
 */
void TWI_MasterInterruptHandler(TWI_Master_t *twi)
{
	uint8_t currentStatus = twi->interface->MASTER.STATUS;
    2ece:	dc 01       	movw	r26, r24
    2ed0:	ed 91       	ld	r30, X+
    2ed2:	fc 91       	ld	r31, X
    2ed4:	24 81       	ldd	r18, Z+4	; 0x04
 *
 *  Check current status and calls the appropriate handler.
 *
 *  \param twi  The TWI_Master_t struct instance.
 */
void TWI_MasterInterruptHandler(TWI_Master_t *twi)
    2ed6:	32 2f       	mov	r19, r18
    2ed8:	3c 70       	andi	r19, 0x0C	; 12
{
	uint8_t currentStatus = twi->interface->MASTER.STATUS;

	/* If arbitration lost or bus error. */
	if ((currentStatus & TWI_MASTER_ARBLOST_bm) ||
    2eda:	11 f0       	breq	.+4      	; 0x2ee0 <TWI_MasterInterruptHandler+0x12>
	    (currentStatus & TWI_MASTER_BUSERR_bm)) {

		TWI_MasterArbitrationLostBusErrorHandler(twi);
    2edc:	0c 94 fd 16 	jmp	0x2dfa	; 0x2dfa <TWI_MasterArbitrationLostBusErrorHandler>
	}

	/* If master write interrupt. */
	else if (currentStatus & TWI_MASTER_WIF_bm) {
    2ee0:	26 fd       	sbrc	r18, 6
		TWI_MasterWriteHandler(twi);
    2ee2:	0c 94 0e 17 	jmp	0x2e1c	; 0x2e1c <TWI_MasterWriteHandler>
	}

	/* If master read interrupt. */
	else if (currentStatus & TWI_MASTER_RIF_bm) {
    2ee6:	27 fd       	sbrc	r18, 7
		TWI_MasterReadHandler(twi);
    2ee8:	0c 94 3e 17 	jmp	0x2e7c	; 0x2e7c <TWI_MasterReadHandler>
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result)
{
	twi->result = result;
    2eec:	26 e0       	ldi	r18, 0x06	; 6
    2eee:	fc 01       	movw	r30, r24
    2ef0:	20 8b       	std	Z+16, r18	; 0x10
	twi->status = TWIM_STATUS_READY;
    2ef2:	17 86       	std	Z+15, r1	; 0x0f
    2ef4:	08 95       	ret

00002ef6 <TWI_MasterTransactionFinished>:
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result)
{
	twi->result = result;
    2ef6:	fc 01       	movw	r30, r24
    2ef8:	60 8b       	std	Z+16, r22	; 0x10
	twi->status = TWIM_STATUS_READY;
    2efa:	17 86       	std	Z+15, r1	; 0x0f
    2efc:	08 95       	ret

00002efe <initDebugUart>:
#endif

FILE debug;

void initDebugUart(USART_t * uart)
{
    2efe:	fc 01       	movw	r30, r24
	uart->CTRLA = 0;	// disable RX/TX interrupts
    2f00:	13 82       	std	Z+3, r1	; 0x03
	uart->CTRLB = USART_RXEN_bm | USART_TXEN_bm;
    2f02:	88 e1       	ldi	r24, 0x18	; 24
    2f04:	84 83       	std	Z+4, r24	; 0x04
	uart->CTRLC = USART_CHSIZE_8BIT_gc;
    2f06:	83 e0       	ldi	r24, 0x03	; 3
    2f08:	85 83       	std	Z+5, r24	; 0x05
	uart->BAUDCTRLA = 16;  // 115200  103;	// 19200?!
    2f0a:	80 e1       	ldi	r24, 0x10	; 16
    2f0c:	86 83       	std	Z+6, r24	; 0x06
	uart->BAUDCTRLB = 0;
    2f0e:	17 82       	std	Z+7, r1	; 0x07
    2f10:	08 95       	ret

00002f12 <debugPutChar>:
#ifdef DEBUG
    while(!(DEBUGUART.STATUS & USART_DREIF_bm));
    DEBUGUART.DATA = c;
#endif
    return 0;
}
    2f12:	80 e0       	ldi	r24, 0x00	; 0
    2f14:	90 e0       	ldi	r25, 0x00	; 0
    2f16:	08 95       	ret

00002f18 <debugGetChar>:
	    return -1;
	}
#else
	return -1;
#endif
}
    2f18:	8f ef       	ldi	r24, 0xFF	; 255
    2f1a:	9f ef       	ldi	r25, 0xFF	; 255
    2f1c:	08 95       	ret

00002f1e <initHWDebug>:


void initHWDebug() 
{
    2f1e:	08 95       	ret

00002f20 <main>:
#include "system/system.h"

int main(void)
{
		return blockProgram();
    2f20:	0c 94 39 08 	jmp	0x1072	; 0x1072 <blockProgram>

00002f24 <__muluhisi3>:
    2f24:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <__umulhisi3>
    2f28:	a5 9f       	mul	r26, r21
    2f2a:	90 0d       	add	r25, r0
    2f2c:	b4 9f       	mul	r27, r20
    2f2e:	90 0d       	add	r25, r0
    2f30:	a4 9f       	mul	r26, r20
    2f32:	80 0d       	add	r24, r0
    2f34:	91 1d       	adc	r25, r1
    2f36:	11 24       	eor	r1, r1
    2f38:	08 95       	ret

00002f3a <__udivmodsi4>:
    2f3a:	a1 e2       	ldi	r26, 0x21	; 33
    2f3c:	1a 2e       	mov	r1, r26
    2f3e:	aa 1b       	sub	r26, r26
    2f40:	bb 1b       	sub	r27, r27
    2f42:	fd 01       	movw	r30, r26
    2f44:	0d c0       	rjmp	.+26     	; 0x2f60 <__udivmodsi4_ep>

00002f46 <__udivmodsi4_loop>:
    2f46:	aa 1f       	adc	r26, r26
    2f48:	bb 1f       	adc	r27, r27
    2f4a:	ee 1f       	adc	r30, r30
    2f4c:	ff 1f       	adc	r31, r31
    2f4e:	a2 17       	cp	r26, r18
    2f50:	b3 07       	cpc	r27, r19
    2f52:	e4 07       	cpc	r30, r20
    2f54:	f5 07       	cpc	r31, r21
    2f56:	20 f0       	brcs	.+8      	; 0x2f60 <__udivmodsi4_ep>
    2f58:	a2 1b       	sub	r26, r18
    2f5a:	b3 0b       	sbc	r27, r19
    2f5c:	e4 0b       	sbc	r30, r20
    2f5e:	f5 0b       	sbc	r31, r21

00002f60 <__udivmodsi4_ep>:
    2f60:	66 1f       	adc	r22, r22
    2f62:	77 1f       	adc	r23, r23
    2f64:	88 1f       	adc	r24, r24
    2f66:	99 1f       	adc	r25, r25
    2f68:	1a 94       	dec	r1
    2f6a:	69 f7       	brne	.-38     	; 0x2f46 <__udivmodsi4_loop>
    2f6c:	60 95       	com	r22
    2f6e:	70 95       	com	r23
    2f70:	80 95       	com	r24
    2f72:	90 95       	com	r25
    2f74:	9b 01       	movw	r18, r22
    2f76:	ac 01       	movw	r20, r24
    2f78:	bd 01       	movw	r22, r26
    2f7a:	cf 01       	movw	r24, r30
    2f7c:	08 95       	ret

00002f7e <__cmpdi2_s8>:
    2f7e:	00 24       	eor	r0, r0
    2f80:	a7 fd       	sbrc	r26, 7
    2f82:	00 94       	com	r0
    2f84:	2a 17       	cp	r18, r26
    2f86:	30 05       	cpc	r19, r0
    2f88:	40 05       	cpc	r20, r0
    2f8a:	50 05       	cpc	r21, r0
    2f8c:	60 05       	cpc	r22, r0
    2f8e:	70 05       	cpc	r23, r0
    2f90:	80 05       	cpc	r24, r0
    2f92:	90 05       	cpc	r25, r0
    2f94:	08 95       	ret

00002f96 <__umulhisi3>:
    2f96:	a2 9f       	mul	r26, r18
    2f98:	b0 01       	movw	r22, r0
    2f9a:	b3 9f       	mul	r27, r19
    2f9c:	c0 01       	movw	r24, r0
    2f9e:	a3 9f       	mul	r26, r19
    2fa0:	01 d0       	rcall	.+2      	; 0x2fa4 <__umulhisi3+0xe>
    2fa2:	b2 9f       	mul	r27, r18
    2fa4:	70 0d       	add	r23, r0
    2fa6:	81 1d       	adc	r24, r1
    2fa8:	11 24       	eor	r1, r1
    2faa:	91 1d       	adc	r25, r1
    2fac:	08 95       	ret

00002fae <abort>:
    2fae:	81 e0       	ldi	r24, 0x01	; 1
    2fb0:	90 e0       	ldi	r25, 0x00	; 0
    2fb2:	f8 94       	cli
    2fb4:	0c 94 a4 1a 	jmp	0x3548	; 0x3548 <_exit>

00002fb8 <memcpy>:
    2fb8:	fb 01       	movw	r30, r22
    2fba:	dc 01       	movw	r26, r24
    2fbc:	02 c0       	rjmp	.+4      	; 0x2fc2 <memcpy+0xa>
    2fbe:	01 90       	ld	r0, Z+
    2fc0:	0d 92       	st	X+, r0
    2fc2:	41 50       	subi	r20, 0x01	; 1
    2fc4:	50 40       	sbci	r21, 0x00	; 0
    2fc6:	d8 f7       	brcc	.-10     	; 0x2fbe <memcpy+0x6>
    2fc8:	08 95       	ret

00002fca <memset>:
    2fca:	dc 01       	movw	r26, r24
    2fcc:	01 c0       	rjmp	.+2      	; 0x2fd0 <memset+0x6>
    2fce:	6d 93       	st	X+, r22
    2fd0:	41 50       	subi	r20, 0x01	; 1
    2fd2:	50 40       	sbci	r21, 0x00	; 0
    2fd4:	e0 f7       	brcc	.-8      	; 0x2fce <memset+0x4>
    2fd6:	08 95       	ret

00002fd8 <printf>:
    2fd8:	cf 93       	push	r28
    2fda:	df 93       	push	r29
    2fdc:	1f 92       	push	r1
    2fde:	1f 92       	push	r1
    2fe0:	cd b7       	in	r28, 0x3d	; 61
    2fe2:	de b7       	in	r29, 0x3e	; 62
    2fe4:	fe 01       	movw	r30, r28
    2fe6:	38 96       	adiw	r30, 0x08	; 8
    2fe8:	61 91       	ld	r22, Z+
    2fea:	71 91       	ld	r23, Z+
    2fec:	e9 83       	std	Y+1, r30	; 0x01
    2fee:	fa 83       	std	Y+2, r31	; 0x02
    2ff0:	af 01       	movw	r20, r30
    2ff2:	80 91 a3 25 	lds	r24, 0x25A3
    2ff6:	90 91 a4 25 	lds	r25, 0x25A4
    2ffa:	0e 94 04 18 	call	0x3008	; 0x3008 <vfprintf>
    2ffe:	0f 90       	pop	r0
    3000:	0f 90       	pop	r0
    3002:	df 91       	pop	r29
    3004:	cf 91       	pop	r28
    3006:	08 95       	ret

00003008 <vfprintf>:
    3008:	2f 92       	push	r2
    300a:	3f 92       	push	r3
    300c:	4f 92       	push	r4
    300e:	5f 92       	push	r5
    3010:	6f 92       	push	r6
    3012:	7f 92       	push	r7
    3014:	8f 92       	push	r8
    3016:	9f 92       	push	r9
    3018:	af 92       	push	r10
    301a:	bf 92       	push	r11
    301c:	cf 92       	push	r12
    301e:	df 92       	push	r13
    3020:	ef 92       	push	r14
    3022:	ff 92       	push	r15
    3024:	0f 93       	push	r16
    3026:	1f 93       	push	r17
    3028:	cf 93       	push	r28
    302a:	df 93       	push	r29
    302c:	cd b7       	in	r28, 0x3d	; 61
    302e:	de b7       	in	r29, 0x3e	; 62
    3030:	2c 97       	sbiw	r28, 0x0c	; 12
    3032:	cd bf       	out	0x3d, r28	; 61
    3034:	de bf       	out	0x3e, r29	; 62
    3036:	7c 01       	movw	r14, r24
    3038:	6b 01       	movw	r12, r22
    303a:	8a 01       	movw	r16, r20
    303c:	fc 01       	movw	r30, r24
    303e:	16 82       	std	Z+6, r1	; 0x06
    3040:	17 82       	std	Z+7, r1	; 0x07
    3042:	83 81       	ldd	r24, Z+3	; 0x03
    3044:	81 ff       	sbrs	r24, 1
    3046:	c7 c1       	rjmp	.+910    	; 0x33d6 <vfprintf+0x3ce>
    3048:	88 24       	eor	r8, r8
    304a:	83 94       	inc	r8
    304c:	91 2c       	mov	r9, r1
    304e:	8c 0e       	add	r8, r28
    3050:	9d 1e       	adc	r9, r29
    3052:	f7 01       	movw	r30, r14
    3054:	93 81       	ldd	r25, Z+3	; 0x03
    3056:	f6 01       	movw	r30, r12
    3058:	93 fd       	sbrc	r25, 3
    305a:	85 91       	lpm	r24, Z+
    305c:	93 ff       	sbrs	r25, 3
    305e:	81 91       	ld	r24, Z+
    3060:	6f 01       	movw	r12, r30
    3062:	88 23       	and	r24, r24
    3064:	09 f4       	brne	.+2      	; 0x3068 <vfprintf+0x60>
    3066:	b3 c1       	rjmp	.+870    	; 0x33ce <vfprintf+0x3c6>
    3068:	85 32       	cpi	r24, 0x25	; 37
    306a:	39 f4       	brne	.+14     	; 0x307a <vfprintf+0x72>
    306c:	93 fd       	sbrc	r25, 3
    306e:	85 91       	lpm	r24, Z+
    3070:	93 ff       	sbrs	r25, 3
    3072:	81 91       	ld	r24, Z+
    3074:	6f 01       	movw	r12, r30
    3076:	85 32       	cpi	r24, 0x25	; 37
    3078:	29 f4       	brne	.+10     	; 0x3084 <vfprintf+0x7c>
    307a:	b7 01       	movw	r22, r14
    307c:	90 e0       	ldi	r25, 0x00	; 0
    307e:	0e 94 1a 1a 	call	0x3434	; 0x3434 <fputc>
    3082:	e7 cf       	rjmp	.-50     	; 0x3052 <vfprintf+0x4a>
    3084:	71 2c       	mov	r7, r1
    3086:	31 2c       	mov	r3, r1
    3088:	20 e0       	ldi	r18, 0x00	; 0
    308a:	20 32       	cpi	r18, 0x20	; 32
    308c:	a8 f4       	brcc	.+42     	; 0x30b8 <vfprintf+0xb0>
    308e:	8b 32       	cpi	r24, 0x2B	; 43
    3090:	61 f0       	breq	.+24     	; 0x30aa <vfprintf+0xa2>
    3092:	28 f4       	brcc	.+10     	; 0x309e <vfprintf+0x96>
    3094:	80 32       	cpi	r24, 0x20	; 32
    3096:	51 f0       	breq	.+20     	; 0x30ac <vfprintf+0xa4>
    3098:	83 32       	cpi	r24, 0x23	; 35
    309a:	71 f4       	brne	.+28     	; 0x30b8 <vfprintf+0xb0>
    309c:	0b c0       	rjmp	.+22     	; 0x30b4 <vfprintf+0xac>
    309e:	8d 32       	cpi	r24, 0x2D	; 45
    30a0:	39 f0       	breq	.+14     	; 0x30b0 <vfprintf+0xa8>
    30a2:	80 33       	cpi	r24, 0x30	; 48
    30a4:	49 f4       	brne	.+18     	; 0x30b8 <vfprintf+0xb0>
    30a6:	21 60       	ori	r18, 0x01	; 1
    30a8:	28 c0       	rjmp	.+80     	; 0x30fa <vfprintf+0xf2>
    30aa:	22 60       	ori	r18, 0x02	; 2
    30ac:	24 60       	ori	r18, 0x04	; 4
    30ae:	25 c0       	rjmp	.+74     	; 0x30fa <vfprintf+0xf2>
    30b0:	28 60       	ori	r18, 0x08	; 8
    30b2:	23 c0       	rjmp	.+70     	; 0x30fa <vfprintf+0xf2>
    30b4:	20 61       	ori	r18, 0x10	; 16
    30b6:	21 c0       	rjmp	.+66     	; 0x30fa <vfprintf+0xf2>
    30b8:	27 fd       	sbrc	r18, 7
    30ba:	27 c0       	rjmp	.+78     	; 0x310a <vfprintf+0x102>
    30bc:	38 2f       	mov	r19, r24
    30be:	30 53       	subi	r19, 0x30	; 48
    30c0:	3a 30       	cpi	r19, 0x0A	; 10
    30c2:	78 f4       	brcc	.+30     	; 0x30e2 <vfprintf+0xda>
    30c4:	26 ff       	sbrs	r18, 6
    30c6:	06 c0       	rjmp	.+12     	; 0x30d4 <vfprintf+0xcc>
    30c8:	fa e0       	ldi	r31, 0x0A	; 10
    30ca:	7f 9e       	mul	r7, r31
    30cc:	30 0d       	add	r19, r0
    30ce:	11 24       	eor	r1, r1
    30d0:	73 2e       	mov	r7, r19
    30d2:	13 c0       	rjmp	.+38     	; 0x30fa <vfprintf+0xf2>
    30d4:	8a e0       	ldi	r24, 0x0A	; 10
    30d6:	38 9e       	mul	r3, r24
    30d8:	30 0d       	add	r19, r0
    30da:	11 24       	eor	r1, r1
    30dc:	33 2e       	mov	r3, r19
    30de:	20 62       	ori	r18, 0x20	; 32
    30e0:	0c c0       	rjmp	.+24     	; 0x30fa <vfprintf+0xf2>
    30e2:	8e 32       	cpi	r24, 0x2E	; 46
    30e4:	21 f4       	brne	.+8      	; 0x30ee <vfprintf+0xe6>
    30e6:	26 fd       	sbrc	r18, 6
    30e8:	72 c1       	rjmp	.+740    	; 0x33ce <vfprintf+0x3c6>
    30ea:	20 64       	ori	r18, 0x40	; 64
    30ec:	06 c0       	rjmp	.+12     	; 0x30fa <vfprintf+0xf2>
    30ee:	8c 36       	cpi	r24, 0x6C	; 108
    30f0:	11 f4       	brne	.+4      	; 0x30f6 <vfprintf+0xee>
    30f2:	20 68       	ori	r18, 0x80	; 128
    30f4:	02 c0       	rjmp	.+4      	; 0x30fa <vfprintf+0xf2>
    30f6:	88 36       	cpi	r24, 0x68	; 104
    30f8:	41 f4       	brne	.+16     	; 0x310a <vfprintf+0x102>
    30fa:	f6 01       	movw	r30, r12
    30fc:	93 fd       	sbrc	r25, 3
    30fe:	85 91       	lpm	r24, Z+
    3100:	93 ff       	sbrs	r25, 3
    3102:	81 91       	ld	r24, Z+
    3104:	6f 01       	movw	r12, r30
    3106:	81 11       	cpse	r24, r1
    3108:	c0 cf       	rjmp	.-128    	; 0x308a <vfprintf+0x82>
    310a:	98 2f       	mov	r25, r24
    310c:	95 54       	subi	r25, 0x45	; 69
    310e:	93 30       	cpi	r25, 0x03	; 3
    3110:	18 f0       	brcs	.+6      	; 0x3118 <vfprintf+0x110>
    3112:	90 52       	subi	r25, 0x20	; 32
    3114:	93 30       	cpi	r25, 0x03	; 3
    3116:	28 f4       	brcc	.+10     	; 0x3122 <vfprintf+0x11a>
    3118:	0c 5f       	subi	r16, 0xFC	; 252
    311a:	1f 4f       	sbci	r17, 0xFF	; 255
    311c:	ff e3       	ldi	r31, 0x3F	; 63
    311e:	f9 83       	std	Y+1, r31	; 0x01
    3120:	0d c0       	rjmp	.+26     	; 0x313c <vfprintf+0x134>
    3122:	83 36       	cpi	r24, 0x63	; 99
    3124:	31 f0       	breq	.+12     	; 0x3132 <vfprintf+0x12a>
    3126:	83 37       	cpi	r24, 0x73	; 115
    3128:	71 f0       	breq	.+28     	; 0x3146 <vfprintf+0x13e>
    312a:	83 35       	cpi	r24, 0x53	; 83
    312c:	09 f0       	breq	.+2      	; 0x3130 <vfprintf+0x128>
    312e:	5e c0       	rjmp	.+188    	; 0x31ec <vfprintf+0x1e4>
    3130:	23 c0       	rjmp	.+70     	; 0x3178 <vfprintf+0x170>
    3132:	f8 01       	movw	r30, r16
    3134:	80 81       	ld	r24, Z
    3136:	89 83       	std	Y+1, r24	; 0x01
    3138:	0e 5f       	subi	r16, 0xFE	; 254
    313a:	1f 4f       	sbci	r17, 0xFF	; 255
    313c:	66 24       	eor	r6, r6
    313e:	63 94       	inc	r6
    3140:	71 2c       	mov	r7, r1
    3142:	54 01       	movw	r10, r8
    3144:	15 c0       	rjmp	.+42     	; 0x3170 <vfprintf+0x168>
    3146:	28 01       	movw	r4, r16
    3148:	f2 e0       	ldi	r31, 0x02	; 2
    314a:	4f 0e       	add	r4, r31
    314c:	51 1c       	adc	r5, r1
    314e:	f8 01       	movw	r30, r16
    3150:	a0 80       	ld	r10, Z
    3152:	b1 80       	ldd	r11, Z+1	; 0x01
    3154:	26 ff       	sbrs	r18, 6
    3156:	03 c0       	rjmp	.+6      	; 0x315e <vfprintf+0x156>
    3158:	67 2d       	mov	r22, r7
    315a:	70 e0       	ldi	r23, 0x00	; 0
    315c:	02 c0       	rjmp	.+4      	; 0x3162 <vfprintf+0x15a>
    315e:	6f ef       	ldi	r22, 0xFF	; 255
    3160:	7f ef       	ldi	r23, 0xFF	; 255
    3162:	c5 01       	movw	r24, r10
    3164:	2c 87       	std	Y+12, r18	; 0x0c
    3166:	0e 94 0f 1a 	call	0x341e	; 0x341e <strnlen>
    316a:	3c 01       	movw	r6, r24
    316c:	82 01       	movw	r16, r4
    316e:	2c 85       	ldd	r18, Y+12	; 0x0c
    3170:	6f e7       	ldi	r22, 0x7F	; 127
    3172:	26 2e       	mov	r2, r22
    3174:	22 22       	and	r2, r18
    3176:	18 c0       	rjmp	.+48     	; 0x31a8 <vfprintf+0x1a0>
    3178:	28 01       	movw	r4, r16
    317a:	f2 e0       	ldi	r31, 0x02	; 2
    317c:	4f 0e       	add	r4, r31
    317e:	51 1c       	adc	r5, r1
    3180:	f8 01       	movw	r30, r16
    3182:	a0 80       	ld	r10, Z
    3184:	b1 80       	ldd	r11, Z+1	; 0x01
    3186:	26 ff       	sbrs	r18, 6
    3188:	03 c0       	rjmp	.+6      	; 0x3190 <vfprintf+0x188>
    318a:	67 2d       	mov	r22, r7
    318c:	70 e0       	ldi	r23, 0x00	; 0
    318e:	02 c0       	rjmp	.+4      	; 0x3194 <vfprintf+0x18c>
    3190:	6f ef       	ldi	r22, 0xFF	; 255
    3192:	7f ef       	ldi	r23, 0xFF	; 255
    3194:	c5 01       	movw	r24, r10
    3196:	2c 87       	std	Y+12, r18	; 0x0c
    3198:	0e 94 04 1a 	call	0x3408	; 0x3408 <strnlen_P>
    319c:	3c 01       	movw	r6, r24
    319e:	2c 85       	ldd	r18, Y+12	; 0x0c
    31a0:	50 e8       	ldi	r21, 0x80	; 128
    31a2:	25 2e       	mov	r2, r21
    31a4:	22 2a       	or	r2, r18
    31a6:	82 01       	movw	r16, r4
    31a8:	23 fc       	sbrc	r2, 3
    31aa:	1c c0       	rjmp	.+56     	; 0x31e4 <vfprintf+0x1dc>
    31ac:	06 c0       	rjmp	.+12     	; 0x31ba <vfprintf+0x1b2>
    31ae:	b7 01       	movw	r22, r14
    31b0:	80 e2       	ldi	r24, 0x20	; 32
    31b2:	90 e0       	ldi	r25, 0x00	; 0
    31b4:	0e 94 1a 1a 	call	0x3434	; 0x3434 <fputc>
    31b8:	3a 94       	dec	r3
    31ba:	83 2d       	mov	r24, r3
    31bc:	90 e0       	ldi	r25, 0x00	; 0
    31be:	68 16       	cp	r6, r24
    31c0:	79 06       	cpc	r7, r25
    31c2:	a8 f3       	brcs	.-22     	; 0x31ae <vfprintf+0x1a6>
    31c4:	0f c0       	rjmp	.+30     	; 0x31e4 <vfprintf+0x1dc>
    31c6:	f5 01       	movw	r30, r10
    31c8:	27 fc       	sbrc	r2, 7
    31ca:	85 91       	lpm	r24, Z+
    31cc:	27 fe       	sbrs	r2, 7
    31ce:	81 91       	ld	r24, Z+
    31d0:	5f 01       	movw	r10, r30
    31d2:	b7 01       	movw	r22, r14
    31d4:	90 e0       	ldi	r25, 0x00	; 0
    31d6:	0e 94 1a 1a 	call	0x3434	; 0x3434 <fputc>
    31da:	31 10       	cpse	r3, r1
    31dc:	3a 94       	dec	r3
    31de:	f1 e0       	ldi	r31, 0x01	; 1
    31e0:	6f 1a       	sub	r6, r31
    31e2:	71 08       	sbc	r7, r1
    31e4:	61 14       	cp	r6, r1
    31e6:	71 04       	cpc	r7, r1
    31e8:	71 f7       	brne	.-36     	; 0x31c6 <vfprintf+0x1be>
    31ea:	ee c0       	rjmp	.+476    	; 0x33c8 <vfprintf+0x3c0>
    31ec:	84 36       	cpi	r24, 0x64	; 100
    31ee:	11 f0       	breq	.+4      	; 0x31f4 <vfprintf+0x1ec>
    31f0:	89 36       	cpi	r24, 0x69	; 105
    31f2:	41 f5       	brne	.+80     	; 0x3244 <vfprintf+0x23c>
    31f4:	f8 01       	movw	r30, r16
    31f6:	27 ff       	sbrs	r18, 7
    31f8:	07 c0       	rjmp	.+14     	; 0x3208 <vfprintf+0x200>
    31fa:	60 81       	ld	r22, Z
    31fc:	71 81       	ldd	r23, Z+1	; 0x01
    31fe:	82 81       	ldd	r24, Z+2	; 0x02
    3200:	93 81       	ldd	r25, Z+3	; 0x03
    3202:	0c 5f       	subi	r16, 0xFC	; 252
    3204:	1f 4f       	sbci	r17, 0xFF	; 255
    3206:	08 c0       	rjmp	.+16     	; 0x3218 <vfprintf+0x210>
    3208:	60 81       	ld	r22, Z
    320a:	71 81       	ldd	r23, Z+1	; 0x01
    320c:	88 27       	eor	r24, r24
    320e:	77 fd       	sbrc	r23, 7
    3210:	80 95       	com	r24
    3212:	98 2f       	mov	r25, r24
    3214:	0e 5f       	subi	r16, 0xFE	; 254
    3216:	1f 4f       	sbci	r17, 0xFF	; 255
    3218:	4f e6       	ldi	r20, 0x6F	; 111
    321a:	64 2e       	mov	r6, r20
    321c:	62 22       	and	r6, r18
    321e:	97 ff       	sbrs	r25, 7
    3220:	09 c0       	rjmp	.+18     	; 0x3234 <vfprintf+0x22c>
    3222:	90 95       	com	r25
    3224:	80 95       	com	r24
    3226:	70 95       	com	r23
    3228:	61 95       	neg	r22
    322a:	7f 4f       	sbci	r23, 0xFF	; 255
    322c:	8f 4f       	sbci	r24, 0xFF	; 255
    322e:	9f 4f       	sbci	r25, 0xFF	; 255
    3230:	f0 e8       	ldi	r31, 0x80	; 128
    3232:	6f 2a       	or	r6, r31
    3234:	2a e0       	ldi	r18, 0x0A	; 10
    3236:	30 e0       	ldi	r19, 0x00	; 0
    3238:	a4 01       	movw	r20, r8
    323a:	0e 94 46 1a 	call	0x348c	; 0x348c <__ultoa_invert>
    323e:	a8 2e       	mov	r10, r24
    3240:	a8 18       	sub	r10, r8
    3242:	44 c0       	rjmp	.+136    	; 0x32cc <vfprintf+0x2c4>
    3244:	85 37       	cpi	r24, 0x75	; 117
    3246:	31 f4       	brne	.+12     	; 0x3254 <vfprintf+0x24c>
    3248:	3f ee       	ldi	r19, 0xEF	; 239
    324a:	b3 2e       	mov	r11, r19
    324c:	b2 22       	and	r11, r18
    324e:	2a e0       	ldi	r18, 0x0A	; 10
    3250:	30 e0       	ldi	r19, 0x00	; 0
    3252:	24 c0       	rjmp	.+72     	; 0x329c <vfprintf+0x294>
    3254:	99 ef       	ldi	r25, 0xF9	; 249
    3256:	b9 2e       	mov	r11, r25
    3258:	b2 22       	and	r11, r18
    325a:	8f 36       	cpi	r24, 0x6F	; 111
    325c:	b9 f0       	breq	.+46     	; 0x328c <vfprintf+0x284>
    325e:	20 f4       	brcc	.+8      	; 0x3268 <vfprintf+0x260>
    3260:	88 35       	cpi	r24, 0x58	; 88
    3262:	09 f0       	breq	.+2      	; 0x3266 <vfprintf+0x25e>
    3264:	b4 c0       	rjmp	.+360    	; 0x33ce <vfprintf+0x3c6>
    3266:	0d c0       	rjmp	.+26     	; 0x3282 <vfprintf+0x27a>
    3268:	80 37       	cpi	r24, 0x70	; 112
    326a:	21 f0       	breq	.+8      	; 0x3274 <vfprintf+0x26c>
    326c:	88 37       	cpi	r24, 0x78	; 120
    326e:	09 f0       	breq	.+2      	; 0x3272 <vfprintf+0x26a>
    3270:	ae c0       	rjmp	.+348    	; 0x33ce <vfprintf+0x3c6>
    3272:	02 c0       	rjmp	.+4      	; 0x3278 <vfprintf+0x270>
    3274:	20 e1       	ldi	r18, 0x10	; 16
    3276:	b2 2a       	or	r11, r18
    3278:	b4 fe       	sbrs	r11, 4
    327a:	0b c0       	rjmp	.+22     	; 0x3292 <vfprintf+0x28a>
    327c:	84 e0       	ldi	r24, 0x04	; 4
    327e:	b8 2a       	or	r11, r24
    3280:	08 c0       	rjmp	.+16     	; 0x3292 <vfprintf+0x28a>
    3282:	24 ff       	sbrs	r18, 4
    3284:	09 c0       	rjmp	.+18     	; 0x3298 <vfprintf+0x290>
    3286:	e6 e0       	ldi	r30, 0x06	; 6
    3288:	be 2a       	or	r11, r30
    328a:	06 c0       	rjmp	.+12     	; 0x3298 <vfprintf+0x290>
    328c:	28 e0       	ldi	r18, 0x08	; 8
    328e:	30 e0       	ldi	r19, 0x00	; 0
    3290:	05 c0       	rjmp	.+10     	; 0x329c <vfprintf+0x294>
    3292:	20 e1       	ldi	r18, 0x10	; 16
    3294:	30 e0       	ldi	r19, 0x00	; 0
    3296:	02 c0       	rjmp	.+4      	; 0x329c <vfprintf+0x294>
    3298:	20 e1       	ldi	r18, 0x10	; 16
    329a:	32 e0       	ldi	r19, 0x02	; 2
    329c:	f8 01       	movw	r30, r16
    329e:	b7 fe       	sbrs	r11, 7
    32a0:	07 c0       	rjmp	.+14     	; 0x32b0 <vfprintf+0x2a8>
    32a2:	60 81       	ld	r22, Z
    32a4:	71 81       	ldd	r23, Z+1	; 0x01
    32a6:	82 81       	ldd	r24, Z+2	; 0x02
    32a8:	93 81       	ldd	r25, Z+3	; 0x03
    32aa:	0c 5f       	subi	r16, 0xFC	; 252
    32ac:	1f 4f       	sbci	r17, 0xFF	; 255
    32ae:	06 c0       	rjmp	.+12     	; 0x32bc <vfprintf+0x2b4>
    32b0:	60 81       	ld	r22, Z
    32b2:	71 81       	ldd	r23, Z+1	; 0x01
    32b4:	80 e0       	ldi	r24, 0x00	; 0
    32b6:	90 e0       	ldi	r25, 0x00	; 0
    32b8:	0e 5f       	subi	r16, 0xFE	; 254
    32ba:	1f 4f       	sbci	r17, 0xFF	; 255
    32bc:	a4 01       	movw	r20, r8
    32be:	0e 94 46 1a 	call	0x348c	; 0x348c <__ultoa_invert>
    32c2:	a8 2e       	mov	r10, r24
    32c4:	a8 18       	sub	r10, r8
    32c6:	8f e7       	ldi	r24, 0x7F	; 127
    32c8:	68 2e       	mov	r6, r24
    32ca:	6b 20       	and	r6, r11
    32cc:	66 fe       	sbrs	r6, 6
    32ce:	0b c0       	rjmp	.+22     	; 0x32e6 <vfprintf+0x2de>
    32d0:	36 2d       	mov	r19, r6
    32d2:	3e 7f       	andi	r19, 0xFE	; 254
    32d4:	a7 14       	cp	r10, r7
    32d6:	50 f4       	brcc	.+20     	; 0x32ec <vfprintf+0x2e4>
    32d8:	64 fe       	sbrs	r6, 4
    32da:	0a c0       	rjmp	.+20     	; 0x32f0 <vfprintf+0x2e8>
    32dc:	62 fc       	sbrc	r6, 2
    32de:	08 c0       	rjmp	.+16     	; 0x32f0 <vfprintf+0x2e8>
    32e0:	36 2d       	mov	r19, r6
    32e2:	3e 7e       	andi	r19, 0xEE	; 238
    32e4:	05 c0       	rjmp	.+10     	; 0x32f0 <vfprintf+0x2e8>
    32e6:	ba 2c       	mov	r11, r10
    32e8:	36 2d       	mov	r19, r6
    32ea:	03 c0       	rjmp	.+6      	; 0x32f2 <vfprintf+0x2ea>
    32ec:	ba 2c       	mov	r11, r10
    32ee:	01 c0       	rjmp	.+2      	; 0x32f2 <vfprintf+0x2ea>
    32f0:	b7 2c       	mov	r11, r7
    32f2:	34 ff       	sbrs	r19, 4
    32f4:	0d c0       	rjmp	.+26     	; 0x3310 <vfprintf+0x308>
    32f6:	fe 01       	movw	r30, r28
    32f8:	ea 0d       	add	r30, r10
    32fa:	f1 1d       	adc	r31, r1
    32fc:	80 81       	ld	r24, Z
    32fe:	80 33       	cpi	r24, 0x30	; 48
    3300:	11 f4       	brne	.+4      	; 0x3306 <vfprintf+0x2fe>
    3302:	39 7e       	andi	r19, 0xE9	; 233
    3304:	09 c0       	rjmp	.+18     	; 0x3318 <vfprintf+0x310>
    3306:	32 ff       	sbrs	r19, 2
    3308:	06 c0       	rjmp	.+12     	; 0x3316 <vfprintf+0x30e>
    330a:	b3 94       	inc	r11
    330c:	b3 94       	inc	r11
    330e:	04 c0       	rjmp	.+8      	; 0x3318 <vfprintf+0x310>
    3310:	83 2f       	mov	r24, r19
    3312:	86 78       	andi	r24, 0x86	; 134
    3314:	09 f0       	breq	.+2      	; 0x3318 <vfprintf+0x310>
    3316:	b3 94       	inc	r11
    3318:	33 fd       	sbrc	r19, 3
    331a:	14 c0       	rjmp	.+40     	; 0x3344 <vfprintf+0x33c>
    331c:	30 ff       	sbrs	r19, 0
    331e:	0f c0       	rjmp	.+30     	; 0x333e <vfprintf+0x336>
    3320:	7a 2c       	mov	r7, r10
    3322:	b3 14       	cp	r11, r3
    3324:	60 f4       	brcc	.+24     	; 0x333e <vfprintf+0x336>
    3326:	73 0c       	add	r7, r3
    3328:	7b 18       	sub	r7, r11
    332a:	b3 2c       	mov	r11, r3
    332c:	08 c0       	rjmp	.+16     	; 0x333e <vfprintf+0x336>
    332e:	b7 01       	movw	r22, r14
    3330:	80 e2       	ldi	r24, 0x20	; 32
    3332:	90 e0       	ldi	r25, 0x00	; 0
    3334:	3c 87       	std	Y+12, r19	; 0x0c
    3336:	0e 94 1a 1a 	call	0x3434	; 0x3434 <fputc>
    333a:	b3 94       	inc	r11
    333c:	3c 85       	ldd	r19, Y+12	; 0x0c
    333e:	b3 14       	cp	r11, r3
    3340:	b0 f3       	brcs	.-20     	; 0x332e <vfprintf+0x326>
    3342:	04 c0       	rjmp	.+8      	; 0x334c <vfprintf+0x344>
    3344:	b3 14       	cp	r11, r3
    3346:	10 f4       	brcc	.+4      	; 0x334c <vfprintf+0x344>
    3348:	3b 18       	sub	r3, r11
    334a:	01 c0       	rjmp	.+2      	; 0x334e <vfprintf+0x346>
    334c:	31 2c       	mov	r3, r1
    334e:	34 ff       	sbrs	r19, 4
    3350:	12 c0       	rjmp	.+36     	; 0x3376 <vfprintf+0x36e>
    3352:	b7 01       	movw	r22, r14
    3354:	80 e3       	ldi	r24, 0x30	; 48
    3356:	90 e0       	ldi	r25, 0x00	; 0
    3358:	3c 87       	std	Y+12, r19	; 0x0c
    335a:	0e 94 1a 1a 	call	0x3434	; 0x3434 <fputc>
    335e:	3c 85       	ldd	r19, Y+12	; 0x0c
    3360:	32 ff       	sbrs	r19, 2
    3362:	1e c0       	rjmp	.+60     	; 0x33a0 <vfprintf+0x398>
    3364:	31 ff       	sbrs	r19, 1
    3366:	03 c0       	rjmp	.+6      	; 0x336e <vfprintf+0x366>
    3368:	88 e5       	ldi	r24, 0x58	; 88
    336a:	90 e0       	ldi	r25, 0x00	; 0
    336c:	02 c0       	rjmp	.+4      	; 0x3372 <vfprintf+0x36a>
    336e:	88 e7       	ldi	r24, 0x78	; 120
    3370:	90 e0       	ldi	r25, 0x00	; 0
    3372:	b7 01       	movw	r22, r14
    3374:	0c c0       	rjmp	.+24     	; 0x338e <vfprintf+0x386>
    3376:	83 2f       	mov	r24, r19
    3378:	86 78       	andi	r24, 0x86	; 134
    337a:	91 f0       	breq	.+36     	; 0x33a0 <vfprintf+0x398>
    337c:	31 fd       	sbrc	r19, 1
    337e:	02 c0       	rjmp	.+4      	; 0x3384 <vfprintf+0x37c>
    3380:	80 e2       	ldi	r24, 0x20	; 32
    3382:	01 c0       	rjmp	.+2      	; 0x3386 <vfprintf+0x37e>
    3384:	8b e2       	ldi	r24, 0x2B	; 43
    3386:	37 fd       	sbrc	r19, 7
    3388:	8d e2       	ldi	r24, 0x2D	; 45
    338a:	b7 01       	movw	r22, r14
    338c:	90 e0       	ldi	r25, 0x00	; 0
    338e:	0e 94 1a 1a 	call	0x3434	; 0x3434 <fputc>
    3392:	06 c0       	rjmp	.+12     	; 0x33a0 <vfprintf+0x398>
    3394:	b7 01       	movw	r22, r14
    3396:	80 e3       	ldi	r24, 0x30	; 48
    3398:	90 e0       	ldi	r25, 0x00	; 0
    339a:	0e 94 1a 1a 	call	0x3434	; 0x3434 <fputc>
    339e:	7a 94       	dec	r7
    33a0:	a7 14       	cp	r10, r7
    33a2:	c0 f3       	brcs	.-16     	; 0x3394 <vfprintf+0x38c>
    33a4:	aa 94       	dec	r10
    33a6:	f4 01       	movw	r30, r8
    33a8:	ea 0d       	add	r30, r10
    33aa:	f1 1d       	adc	r31, r1
    33ac:	b7 01       	movw	r22, r14
    33ae:	80 81       	ld	r24, Z
    33b0:	90 e0       	ldi	r25, 0x00	; 0
    33b2:	0e 94 1a 1a 	call	0x3434	; 0x3434 <fputc>
    33b6:	a1 10       	cpse	r10, r1
    33b8:	f5 cf       	rjmp	.-22     	; 0x33a4 <vfprintf+0x39c>
    33ba:	06 c0       	rjmp	.+12     	; 0x33c8 <vfprintf+0x3c0>
    33bc:	b7 01       	movw	r22, r14
    33be:	80 e2       	ldi	r24, 0x20	; 32
    33c0:	90 e0       	ldi	r25, 0x00	; 0
    33c2:	0e 94 1a 1a 	call	0x3434	; 0x3434 <fputc>
    33c6:	3a 94       	dec	r3
    33c8:	31 10       	cpse	r3, r1
    33ca:	f8 cf       	rjmp	.-16     	; 0x33bc <vfprintf+0x3b4>
    33cc:	42 ce       	rjmp	.-892    	; 0x3052 <vfprintf+0x4a>
    33ce:	f7 01       	movw	r30, r14
    33d0:	26 81       	ldd	r18, Z+6	; 0x06
    33d2:	37 81       	ldd	r19, Z+7	; 0x07
    33d4:	02 c0       	rjmp	.+4      	; 0x33da <vfprintf+0x3d2>
    33d6:	2f ef       	ldi	r18, 0xFF	; 255
    33d8:	3f ef       	ldi	r19, 0xFF	; 255
    33da:	c9 01       	movw	r24, r18
    33dc:	2c 96       	adiw	r28, 0x0c	; 12
    33de:	cd bf       	out	0x3d, r28	; 61
    33e0:	de bf       	out	0x3e, r29	; 62
    33e2:	df 91       	pop	r29
    33e4:	cf 91       	pop	r28
    33e6:	1f 91       	pop	r17
    33e8:	0f 91       	pop	r16
    33ea:	ff 90       	pop	r15
    33ec:	ef 90       	pop	r14
    33ee:	df 90       	pop	r13
    33f0:	cf 90       	pop	r12
    33f2:	bf 90       	pop	r11
    33f4:	af 90       	pop	r10
    33f6:	9f 90       	pop	r9
    33f8:	8f 90       	pop	r8
    33fa:	7f 90       	pop	r7
    33fc:	6f 90       	pop	r6
    33fe:	5f 90       	pop	r5
    3400:	4f 90       	pop	r4
    3402:	3f 90       	pop	r3
    3404:	2f 90       	pop	r2
    3406:	08 95       	ret

00003408 <strnlen_P>:
    3408:	fc 01       	movw	r30, r24
    340a:	05 90       	lpm	r0, Z+
    340c:	61 50       	subi	r22, 0x01	; 1
    340e:	70 40       	sbci	r23, 0x00	; 0
    3410:	01 10       	cpse	r0, r1
    3412:	d8 f7       	brcc	.-10     	; 0x340a <strnlen_P+0x2>
    3414:	80 95       	com	r24
    3416:	90 95       	com	r25
    3418:	8e 0f       	add	r24, r30
    341a:	9f 1f       	adc	r25, r31
    341c:	08 95       	ret

0000341e <strnlen>:
    341e:	fc 01       	movw	r30, r24
    3420:	61 50       	subi	r22, 0x01	; 1
    3422:	70 40       	sbci	r23, 0x00	; 0
    3424:	01 90       	ld	r0, Z+
    3426:	01 10       	cpse	r0, r1
    3428:	d8 f7       	brcc	.-10     	; 0x3420 <strnlen+0x2>
    342a:	80 95       	com	r24
    342c:	90 95       	com	r25
    342e:	8e 0f       	add	r24, r30
    3430:	9f 1f       	adc	r25, r31
    3432:	08 95       	ret

00003434 <fputc>:
    3434:	0f 93       	push	r16
    3436:	1f 93       	push	r17
    3438:	cf 93       	push	r28
    343a:	df 93       	push	r29
    343c:	8c 01       	movw	r16, r24
    343e:	eb 01       	movw	r28, r22
    3440:	8b 81       	ldd	r24, Y+3	; 0x03
    3442:	81 fd       	sbrc	r24, 1
    3444:	03 c0       	rjmp	.+6      	; 0x344c <fputc+0x18>
    3446:	0f ef       	ldi	r16, 0xFF	; 255
    3448:	1f ef       	ldi	r17, 0xFF	; 255
    344a:	1a c0       	rjmp	.+52     	; 0x3480 <fputc+0x4c>
    344c:	82 ff       	sbrs	r24, 2
    344e:	0d c0       	rjmp	.+26     	; 0x346a <fputc+0x36>
    3450:	2e 81       	ldd	r18, Y+6	; 0x06
    3452:	3f 81       	ldd	r19, Y+7	; 0x07
    3454:	8c 81       	ldd	r24, Y+4	; 0x04
    3456:	9d 81       	ldd	r25, Y+5	; 0x05
    3458:	28 17       	cp	r18, r24
    345a:	39 07       	cpc	r19, r25
    345c:	64 f4       	brge	.+24     	; 0x3476 <fputc+0x42>
    345e:	e8 81       	ld	r30, Y
    3460:	f9 81       	ldd	r31, Y+1	; 0x01
    3462:	01 93       	st	Z+, r16
    3464:	e8 83       	st	Y, r30
    3466:	f9 83       	std	Y+1, r31	; 0x01
    3468:	06 c0       	rjmp	.+12     	; 0x3476 <fputc+0x42>
    346a:	e8 85       	ldd	r30, Y+8	; 0x08
    346c:	f9 85       	ldd	r31, Y+9	; 0x09
    346e:	80 2f       	mov	r24, r16
    3470:	19 95       	eicall
    3472:	89 2b       	or	r24, r25
    3474:	41 f7       	brne	.-48     	; 0x3446 <fputc+0x12>
    3476:	8e 81       	ldd	r24, Y+6	; 0x06
    3478:	9f 81       	ldd	r25, Y+7	; 0x07
    347a:	01 96       	adiw	r24, 0x01	; 1
    347c:	8e 83       	std	Y+6, r24	; 0x06
    347e:	9f 83       	std	Y+7, r25	; 0x07
    3480:	c8 01       	movw	r24, r16
    3482:	df 91       	pop	r29
    3484:	cf 91       	pop	r28
    3486:	1f 91       	pop	r17
    3488:	0f 91       	pop	r16
    348a:	08 95       	ret

0000348c <__ultoa_invert>:
    348c:	fa 01       	movw	r30, r20
    348e:	aa 27       	eor	r26, r26
    3490:	28 30       	cpi	r18, 0x08	; 8
    3492:	51 f1       	breq	.+84     	; 0x34e8 <__ultoa_invert+0x5c>
    3494:	20 31       	cpi	r18, 0x10	; 16
    3496:	81 f1       	breq	.+96     	; 0x34f8 <__ultoa_invert+0x6c>
    3498:	e8 94       	clt
    349a:	6f 93       	push	r22
    349c:	6e 7f       	andi	r22, 0xFE	; 254
    349e:	6e 5f       	subi	r22, 0xFE	; 254
    34a0:	7f 4f       	sbci	r23, 0xFF	; 255
    34a2:	8f 4f       	sbci	r24, 0xFF	; 255
    34a4:	9f 4f       	sbci	r25, 0xFF	; 255
    34a6:	af 4f       	sbci	r26, 0xFF	; 255
    34a8:	b1 e0       	ldi	r27, 0x01	; 1
    34aa:	3e d0       	rcall	.+124    	; 0x3528 <__ultoa_invert+0x9c>
    34ac:	b4 e0       	ldi	r27, 0x04	; 4
    34ae:	3c d0       	rcall	.+120    	; 0x3528 <__ultoa_invert+0x9c>
    34b0:	67 0f       	add	r22, r23
    34b2:	78 1f       	adc	r23, r24
    34b4:	89 1f       	adc	r24, r25
    34b6:	9a 1f       	adc	r25, r26
    34b8:	a1 1d       	adc	r26, r1
    34ba:	68 0f       	add	r22, r24
    34bc:	79 1f       	adc	r23, r25
    34be:	8a 1f       	adc	r24, r26
    34c0:	91 1d       	adc	r25, r1
    34c2:	a1 1d       	adc	r26, r1
    34c4:	6a 0f       	add	r22, r26
    34c6:	71 1d       	adc	r23, r1
    34c8:	81 1d       	adc	r24, r1
    34ca:	91 1d       	adc	r25, r1
    34cc:	a1 1d       	adc	r26, r1
    34ce:	20 d0       	rcall	.+64     	; 0x3510 <__ultoa_invert+0x84>
    34d0:	09 f4       	brne	.+2      	; 0x34d4 <__ultoa_invert+0x48>
    34d2:	68 94       	set
    34d4:	3f 91       	pop	r19
    34d6:	2a e0       	ldi	r18, 0x0A	; 10
    34d8:	26 9f       	mul	r18, r22
    34da:	11 24       	eor	r1, r1
    34dc:	30 19       	sub	r19, r0
    34de:	30 5d       	subi	r19, 0xD0	; 208
    34e0:	31 93       	st	Z+, r19
    34e2:	de f6       	brtc	.-74     	; 0x349a <__ultoa_invert+0xe>
    34e4:	cf 01       	movw	r24, r30
    34e6:	08 95       	ret
    34e8:	46 2f       	mov	r20, r22
    34ea:	47 70       	andi	r20, 0x07	; 7
    34ec:	40 5d       	subi	r20, 0xD0	; 208
    34ee:	41 93       	st	Z+, r20
    34f0:	b3 e0       	ldi	r27, 0x03	; 3
    34f2:	0f d0       	rcall	.+30     	; 0x3512 <__ultoa_invert+0x86>
    34f4:	c9 f7       	brne	.-14     	; 0x34e8 <__ultoa_invert+0x5c>
    34f6:	f6 cf       	rjmp	.-20     	; 0x34e4 <__ultoa_invert+0x58>
    34f8:	46 2f       	mov	r20, r22
    34fa:	4f 70       	andi	r20, 0x0F	; 15
    34fc:	40 5d       	subi	r20, 0xD0	; 208
    34fe:	4a 33       	cpi	r20, 0x3A	; 58
    3500:	18 f0       	brcs	.+6      	; 0x3508 <__ultoa_invert+0x7c>
    3502:	49 5d       	subi	r20, 0xD9	; 217
    3504:	31 fd       	sbrc	r19, 1
    3506:	40 52       	subi	r20, 0x20	; 32
    3508:	41 93       	st	Z+, r20
    350a:	02 d0       	rcall	.+4      	; 0x3510 <__ultoa_invert+0x84>
    350c:	a9 f7       	brne	.-22     	; 0x34f8 <__ultoa_invert+0x6c>
    350e:	ea cf       	rjmp	.-44     	; 0x34e4 <__ultoa_invert+0x58>
    3510:	b4 e0       	ldi	r27, 0x04	; 4
    3512:	a6 95       	lsr	r26
    3514:	97 95       	ror	r25
    3516:	87 95       	ror	r24
    3518:	77 95       	ror	r23
    351a:	67 95       	ror	r22
    351c:	ba 95       	dec	r27
    351e:	c9 f7       	brne	.-14     	; 0x3512 <__ultoa_invert+0x86>
    3520:	00 97       	sbiw	r24, 0x00	; 0
    3522:	61 05       	cpc	r22, r1
    3524:	71 05       	cpc	r23, r1
    3526:	08 95       	ret
    3528:	9b 01       	movw	r18, r22
    352a:	ac 01       	movw	r20, r24
    352c:	0a 2e       	mov	r0, r26
    352e:	06 94       	lsr	r0
    3530:	57 95       	ror	r21
    3532:	47 95       	ror	r20
    3534:	37 95       	ror	r19
    3536:	27 95       	ror	r18
    3538:	ba 95       	dec	r27
    353a:	c9 f7       	brne	.-14     	; 0x352e <__ultoa_invert+0xa2>
    353c:	62 0f       	add	r22, r18
    353e:	73 1f       	adc	r23, r19
    3540:	84 1f       	adc	r24, r20
    3542:	95 1f       	adc	r25, r21
    3544:	a0 1d       	adc	r26, r0
    3546:	08 95       	ret

00003548 <_exit>:
    3548:	f8 94       	cli

0000354a <__stop_program>:
    354a:	ff cf       	rjmp	.-2      	; 0x354a <__stop_program>
