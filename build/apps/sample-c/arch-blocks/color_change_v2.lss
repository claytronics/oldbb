
arch-blocks/color_change_v2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004a88  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000030  00802000  00004a88  00004b3c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000005c0  00802030  00802030  00004b6c  2**0
                  ALLOC
  3 .eeprom       00000004  00810000  00810000  00004b6c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00004668  00000000  00000000  00004b70  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      0000115c  00000000  00000000  000091d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000022  00000000  00000000  0000a334  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000460  00000000  00000000  0000a356  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0000c739  00000000  00000000  0000a7b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00003907  00000000  00000000  00016eef  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00003389  00000000  00000000  0001a7f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00001ca0  00000000  00000000  0001db80  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00003190  00000000  00000000  0001f820  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00005d24  00000000  00000000  000229b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000148  00000000  00000000  000286d4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__ctors_end>
       4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
       8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
       c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      10:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      14:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      18:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      1c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      20:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      24:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      28:	0c 94 9f 1b 	jmp	0x373e	; 0x373e <__vector_10>
      2c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      30:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      34:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      38:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      3c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      40:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      44:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      48:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      4c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      50:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      54:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      58:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      5c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      60:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      64:	0c 94 a1 1a 	jmp	0x3542	; 0x3542 <__vector_25>
      68:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      6c:	0c 94 cd 1a 	jmp	0x359a	; 0x359a <__vector_27>
      70:	0c 94 8d 19 	jmp	0x331a	; 0x331a <__vector_28>
      74:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      78:	0c 94 b9 19 	jmp	0x3372	; 0x3372 <__vector_30>
      7c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      80:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      84:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      88:	0c 94 f2 13 	jmp	0x27e4	; 0x27e4 <__vector_34>
      8c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      90:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      94:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      98:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      9c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      a0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      a4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      a8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      ac:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      b0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      b4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      b8:	0c 94 31 14 	jmp	0x2862	; 0x2862 <__vector_46>
      bc:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      c0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      c4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      c8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      cc:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      d0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      d4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      d8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      dc:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      e0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      e4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      e8:	0c 94 45 1a 	jmp	0x348a	; 0x348a <__vector_58>
      ec:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      f0:	0c 94 71 1a 	jmp	0x34e2	; 0x34e2 <__vector_60>
      f4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      f8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      fc:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     100:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     104:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     108:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     10c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     110:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     114:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     118:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     11c:	0c 94 e6 1b 	jmp	0x37cc	; 0x37cc <__vector_71>
     120:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     124:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     128:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     12c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     130:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     134:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     138:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     13c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     140:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     144:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     148:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     14c:	0c 94 c2 1c 	jmp	0x3984	; 0x3984 <__vector_83>
     150:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     154:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     158:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     15c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     160:	0c 94 fd 1a 	jmp	0x35fa	; 0x35fa <__vector_88>
     164:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     168:	0c 94 29 1b 	jmp	0x3652	; 0x3652 <__vector_90>
     16c:	0c 94 31 19 	jmp	0x3262	; 0x3262 <__vector_91>
     170:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     174:	0c 94 5d 19 	jmp	0x32ba	; 0x32ba <__vector_93>
     178:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     17c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     180:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     184:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     188:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     18c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     190:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     194:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     198:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     19c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1a0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1a4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1a8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1ac:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1b0:	0c 94 90 14 	jmp	0x2920	; 0x2920 <__vector_108>
     1b4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1b8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1bc:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1c0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1c4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1c8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1cc:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1d0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1d4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1d8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1dc:	0c 94 e9 19 	jmp	0x33d2	; 0x33d2 <__vector_119>
     1e0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
     1e4:	0c 94 15 1a 	jmp	0x342a	; 0x342a <__vector_121>

000001e8 <__ctors_end>:
     1e8:	11 24       	eor	r1, r1
     1ea:	1f be       	out	0x3f, r1	; 63
     1ec:	cf ef       	ldi	r28, 0xFF	; 255
     1ee:	df e5       	ldi	r29, 0x5F	; 95
     1f0:	de bf       	out	0x3e, r29	; 62
     1f2:	cd bf       	out	0x3d, r28	; 61
     1f4:	00 e0       	ldi	r16, 0x00	; 0
     1f6:	0c bf       	out	0x3c, r16	; 60

000001f8 <__do_copy_data>:
     1f8:	10 e2       	ldi	r17, 0x20	; 32
     1fa:	a0 e0       	ldi	r26, 0x00	; 0
     1fc:	b0 e2       	ldi	r27, 0x20	; 32
     1fe:	e8 e8       	ldi	r30, 0x88	; 136
     200:	fa e4       	ldi	r31, 0x4A	; 74
     202:	00 e0       	ldi	r16, 0x00	; 0
     204:	0b bf       	out	0x3b, r16	; 59
     206:	02 c0       	rjmp	.+4      	; 0x20c <__do_copy_data+0x14>
     208:	07 90       	elpm	r0, Z+
     20a:	0d 92       	st	X+, r0
     20c:	a0 33       	cpi	r26, 0x30	; 48
     20e:	b1 07       	cpc	r27, r17
     210:	d9 f7       	brne	.-10     	; 0x208 <__do_copy_data+0x10>

00000212 <__do_clear_bss>:
     212:	15 e2       	ldi	r17, 0x25	; 37
     214:	a0 e3       	ldi	r26, 0x30	; 48
     216:	b0 e2       	ldi	r27, 0x20	; 32
     218:	01 c0       	rjmp	.+2      	; 0x21c <.do_clear_bss_start>

0000021a <.do_clear_bss_loop>:
     21a:	1d 92       	st	X+, r1

0000021c <.do_clear_bss_start>:
     21c:	a0 3f       	cpi	r26, 0xF0	; 240
     21e:	b1 07       	cpc	r27, r17
     220:	e1 f7       	brne	.-8      	; 0x21a <.do_clear_bss_loop>
     222:	0e 94 60 1e 	call	0x3cc0	; 0x3cc0 <main>
     226:	0c 94 42 25 	jmp	0x4a84	; 0x4a84 <_exit>

0000022a <__bad_interrupt>:
     22a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000022e <nextColor>:

// enum{RED, ORANGE, YELLOW, GREEN, AQUA, BLUE, WHITE, PURPLE, PINK, NUM_COLORS};	

Color nextColor() {
	Color c = 0;
	c = (getClock()/PERIOD)%NUM_COLORS;
     22e:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <getClock>
     232:	28 eb       	ldi	r18, 0xB8	; 184
     234:	3b e0       	ldi	r19, 0x0B	; 11
     236:	40 e0       	ldi	r20, 0x00	; 0
     238:	50 e0       	ldi	r21, 0x00	; 0
     23a:	0e 94 e4 20 	call	0x41c8	; 0x41c8 <__udivmodsi4>
     23e:	ca 01       	movw	r24, r20
     240:	b9 01       	movw	r22, r18
     242:	29 e0       	ldi	r18, 0x09	; 9
     244:	30 e0       	ldi	r19, 0x00	; 0
     246:	40 e0       	ldi	r20, 0x00	; 0
     248:	50 e0       	ldi	r21, 0x00	; 0
     24a:	0e 94 e4 20 	call	0x41c8	; 0x41c8 <__udivmodsi4>
     24e:	86 2f       	mov	r24, r22
	if ((c == AQUA) || (c == WHITE))
     250:	64 30       	cpi	r22, 0x04	; 4
     252:	11 f0       	breq	.+4      	; 0x258 <nextColor+0x2a>
     254:	66 30       	cpi	r22, 0x06	; 6
     256:	09 f4       	brne	.+2      	; 0x25a <nextColor+0x2c>
	{
		c = ORANGE;
     258:	81 e0       	ldi	r24, 0x01	; 1
	}
	return c;
}
     25a:	08 95       	ret

0000025c <myMain>:

void myMain(void)
{
	Time changeT = PERIOD;
	
	while(getNeighborCount() == 0)
     25c:	03 c0       	rjmp	.+6      	; 0x264 <myMain+0x8>
	{
		setColor(WHITE);
     25e:	86 e0       	ldi	r24, 0x06	; 6
     260:	0e 94 37 07 	call	0xe6e	; 0xe6e <setColor>

void myMain(void)
{
	Time changeT = PERIOD;
	
	while(getNeighborCount() == 0)
     264:	0e 94 06 04 	call	0x80c	; 0x80c <getNeighborCount>
     268:	88 23       	and	r24, r24
     26a:	c9 f3       	breq	.-14     	; 0x25e <myMain+0x2>
     26c:	07 c0       	rjmp	.+14     	; 0x27c <myMain+0x20>
		setColor(WHITE);
	}
	
	while (!isSynchronized())
	{
		setColor(AQUA);
     26e:	84 e0       	ldi	r24, 0x04	; 4
     270:	0e 94 37 07 	call	0xe6e	; 0xe6e <setColor>
		delayMS(6);
     274:	86 e0       	ldi	r24, 0x06	; 6
     276:	90 e0       	ldi	r25, 0x00	; 0
     278:	0e 94 92 08 	call	0x1124	; 0x1124 <delayMS>
	while(getNeighborCount() == 0)
	{
		setColor(WHITE);
	}
	
	while (!isSynchronized())
     27c:	0e 94 bc 0c 	call	0x1978	; 0x1978 <isSynchronized>
     280:	88 23       	and	r24, r24
     282:	a9 f3       	breq	.-22     	; 0x26e <myMain+0x12>
	{
		setColor(AQUA);
		delayMS(6);
	}
	
	setColor(nextColor());
     284:	0e 94 17 01 	call	0x22e	; 0x22e <nextColor>
     288:	0e 94 37 07 	call	0xe6e	; 0xe6e <setColor>
	changeT = (getClock()/PERIOD)*PERIOD + PERIOD;
     28c:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <getClock>
     290:	28 eb       	ldi	r18, 0xB8	; 184
     292:	3b e0       	ldi	r19, 0x0B	; 11
     294:	40 e0       	ldi	r20, 0x00	; 0
     296:	50 e0       	ldi	r21, 0x00	; 0
     298:	0e 94 e4 20 	call	0x41c8	; 0x41c8 <__udivmodsi4>
     29c:	2f 5f       	subi	r18, 0xFF	; 255
     29e:	3f 4f       	sbci	r19, 0xFF	; 255
     2a0:	4f 4f       	sbci	r20, 0xFF	; 255
     2a2:	5f 4f       	sbci	r21, 0xFF	; 255
     2a4:	a8 eb       	ldi	r26, 0xB8	; 184
     2a6:	bb e0       	ldi	r27, 0x0B	; 11
     2a8:	0e 94 b9 20 	call	0x4172	; 0x4172 <__muluhisi3>
     2ac:	6b 01       	movw	r12, r22
     2ae:	7c 01       	movw	r14, r24
			setColor(RED);
		} else {
			setColor(nextColor());
		}
		delayMS(1);
		changeT = (getClock()/PERIOD)*PERIOD + PERIOD;
     2b0:	88 eb       	ldi	r24, 0xB8	; 184
     2b2:	88 2e       	mov	r8, r24
     2b4:	8b e0       	ldi	r24, 0x0B	; 11
     2b6:	98 2e       	mov	r9, r24
     2b8:	a1 2c       	mov	r10, r1
     2ba:	b1 2c       	mov	r11, r1
     2bc:	04 c0       	rjmp	.+8      	; 0x2c6 <myMain+0x6a>
	changeT = (getClock()/PERIOD)*PERIOD + PERIOD;

	while (1) {
		while(getClock() < changeT)
		{
			delayMS(1);
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	90 e0       	ldi	r25, 0x00	; 0
     2c2:	0e 94 92 08 	call	0x1124	; 0x1124 <delayMS>
	
	setColor(nextColor());
	changeT = (getClock()/PERIOD)*PERIOD + PERIOD;

	while (1) {
		while(getClock() < changeT)
     2c6:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <getClock>
     2ca:	6c 15       	cp	r22, r12
     2cc:	7d 05       	cpc	r23, r13
     2ce:	8e 05       	cpc	r24, r14
     2d0:	9f 05       	cpc	r25, r15
     2d2:	a8 f3       	brcs	.-22     	; 0x2be <myMain+0x62>
			snprintf(s, 150*sizeof(char), "color change: t: %lu, c: %lu", getTime(), getClock());
			s[149] = '\0';
			printDebug(s);
		#endif*/
		//printf("clock %u\n", getClock());
		if (isTimeLeader()) {
     2d4:	0e 94 90 0c 	call	0x1920	; 0x1920 <isTimeLeader>
     2d8:	88 23       	and	r24, r24
     2da:	11 f0       	breq	.+4      	; 0x2e0 <myMain+0x84>
			setColor(RED);
     2dc:	80 e0       	ldi	r24, 0x00	; 0
     2de:	02 c0       	rjmp	.+4      	; 0x2e4 <myMain+0x88>
		} else {
			setColor(nextColor());
     2e0:	0e 94 17 01 	call	0x22e	; 0x22e <nextColor>
     2e4:	0e 94 37 07 	call	0xe6e	; 0xe6e <setColor>
		}
		delayMS(1);
     2e8:	81 e0       	ldi	r24, 0x01	; 1
     2ea:	90 e0       	ldi	r25, 0x00	; 0
     2ec:	0e 94 92 08 	call	0x1124	; 0x1124 <delayMS>
		changeT = (getClock()/PERIOD)*PERIOD + PERIOD;
     2f0:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <getClock>
     2f4:	a5 01       	movw	r20, r10
     2f6:	94 01       	movw	r18, r8
     2f8:	0e 94 e4 20 	call	0x41c8	; 0x41c8 <__udivmodsi4>
     2fc:	2f 5f       	subi	r18, 0xFF	; 255
     2fe:	3f 4f       	sbci	r19, 0xFF	; 255
     300:	4f 4f       	sbci	r20, 0xFF	; 255
     302:	5f 4f       	sbci	r21, 0xFF	; 255
     304:	a8 eb       	ldi	r26, 0xB8	; 184
     306:	bb e0       	ldi	r27, 0x0B	; 11
     308:	0e 94 b9 20 	call	0x4172	; 0x4172 <__muluhisi3>
     30c:	6b 01       	movw	r12, r22
     30e:	7c 01       	movw	r14, r24
		//changeT += PERIOD;
	}
     310:	da cf       	rjmp	.-76     	; 0x2c6 <myMain+0x6a>

00000312 <userRegistration>:
	
	while(1);
}
void userRegistration(void)
{
	registerHandler(SYSTEM_MAIN, (GenericHandler)&myMain);	
     312:	6e e2       	ldi	r22, 0x2E	; 46
     314:	71 e0       	ldi	r23, 0x01	; 1
     316:	81 e0       	ldi	r24, 0x01	; 1
     318:	0c 94 f4 06 	jmp	0xde8	; 0xde8 <registerHandler>

0000031c <getAccelData>:

threadvar AccelData _acc;

AccelData getAccelData()
{
	return _acc;
     31c:	60 91 4e 20 	lds	r22, 0x204E
     320:	70 91 4f 20 	lds	r23, 0x204F
}
     324:	80 91 50 20 	lds	r24, 0x2050
     328:	90 91 51 20 	lds	r25, 0x2051
     32c:	08 95       	ret

0000032e <newAccelData>:

int newAccelData()
{
	return newHWAccelData();
     32e:	0c 94 f5 12 	jmp	0x25ea	; 0x25ea <newHWAccelData>

00000332 <updateAccel>:
void updateAccel()
{
	//byte oldstatus = _acc.status & ACC_O_MASK;

	// this changes the _acc datastructure with new data, if available
	updateHWAccel();
     332:	0c 94 03 13 	jmp	0x2606	; 0x2606 <updateHWAccel>

00000336 <blockTick>:
//
// Polling-based hack to step through and update block state, as necessary.
//
// Much of this can probably be done via ISRs and other state change triggers and this function eliminated.
void blockTick()
{
     336:	cf 93       	push	r28
    // and never do anything again
    pauseForever();
  }
#endif
  //int input;
  blockTickRunning = 1;
     338:	81 e0       	ldi	r24, 0x01	; 1
     33a:	90 e0       	ldi	r25, 0x00	; 0
     33c:	80 93 32 20 	sts	0x2032, r24
     340:	90 93 33 20 	sts	0x2033, r25
  
  if(accelReady){
     344:	80 91 30 20 	lds	r24, 0x2030
     348:	90 91 31 20 	lds	r25, 0x2031
     34c:	89 2b       	or	r24, r25
     34e:	31 f0       	breq	.+12     	; 0x35c <blockTick+0x26>
    if(newAccelData()){
     350:	0e 94 97 01 	call	0x32e	; 0x32e <newAccelData>
     354:	89 2b       	or	r24, r25
     356:	11 f0       	breq	.+4      	; 0x35c <blockTick+0x26>
      updateAccel();
     358:	0e 94 99 01 	call	0x332	; 0x332 <updateAccel>
    }
  }
  
  checkTimeout();
     35c:	0e 94 b6 08 	call	0x116c	; 0x116c <checkTimeout>
  
  checkTimer();
     360:	0e 94 9d 09 	call	0x133a	; 0x133a <checkTimer>
  
  for(i = 0; i < NUM_PORTS; ++i)
     364:	c0 e0       	ldi	r28, 0x00	; 0
    {
      // read from serial
      processBuffer(i);
     366:	8c 2f       	mov	r24, r28
     368:	0e 94 db 15 	call	0x2bb6	; 0x2bb6 <processBuffer>
      
      // active messaging (handle at most one per port)
      handleOneMessage();
     36c:	0e 94 0b 03 	call	0x616	; 0x616 <handleOneMessage>
      
      //send packets/ACKS
      sendOnSerial(i);
     370:	8c 2f       	mov	r24, r28
     372:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <sendOnSerial>
  
  checkTimeout();
  
  checkTimer();
  
  for(i = 0; i < NUM_PORTS; ++i)
     376:	cf 5f       	subi	r28, 0xFF	; 255
     378:	c6 30       	cpi	r28, 0x06	; 6
     37a:	a9 f7       	brne	.-22     	; 0x366 <blockTick+0x30>
      
      //send packets/ACKS
      sendOnSerial(i);
    }
  
  executeHandlers();	
     37c:	0e 94 46 06 	call	0xc8c	; 0xc8c <executeHandlers>
  blockTickRunning = 0;
     380:	10 92 32 20 	sts	0x2032, r1
     384:	10 92 33 20 	sts	0x2033, r1
  
}
     388:	cf 91       	pop	r28
     38a:	08 95       	ret

0000038c <initBlock>:

// Ties all the horrifying subfunctions together into one simple function
void initBlock()
{
	//software initialization
	initHandlers();
     38c:	0e 94 2d 06 	call	0xc5a	; 0xc5a <initHandlers>

	//hardware related initialization
	initTime();
     390:	0e 94 2e 0a 	call	0x145c	; 0x145c <initTime>

	initializeMemory();
     394:	0e 94 61 07 	call	0xec2	; 0xec2 <initializeMemory>

	initPorts();
     398:	0e 94 66 08 	call	0x10cc	; 0x10cc <initPorts>
#ifdef DEBUG
	initDebug();
    	//printf("System Debug Enabled\r\n");
#endif

	initDataLink();	
     39c:	0e 94 42 03 	call	0x684	; 0x684 <initDataLink>

   	initHWLED();
     3a0:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <initHWLED>
	//initAudio();

	initSystemMessage();
     3a4:	0e 94 44 08 	call	0x1088	; 0x1088 <initSystemMessage>
	initEnsemble();
     3a8:	0e 94 08 06 	call	0xc10	; 0xc10 <initEnsemble>

	initBlockTick();		// HW INITIALIZATION ROUTINE
     3ac:	0e 94 83 14 	call	0x2906	; 0x2906 <initBlockTick>

	initHWAccel();
     3b0:	0e 94 56 13 	call	0x26ac	; 0x26ac <initHWAccel>
	accelReady=1;
     3b4:	81 e0       	ldi	r24, 0x01	; 1
     3b6:	90 e0       	ldi	r25, 0x00	; 0
     3b8:	80 93 30 20 	sts	0x2030, r24
     3bc:	90 93 31 20 	sts	0x2031, r25

#ifdef CLOCK_SYNC
	initClock();
     3c0:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <initClock>
#ifdef LOG_DEBUG
	initLogDebug();
#endif

#ifndef BBSIM
    initHWMic();
     3c4:	0c 94 c7 1b 	jmp	0x378e	; 0x378e <initHWMic>

000003c8 <setUID>:
threadextern blockConf conf;

// sets local copy of UID
void setUID(uint16_t newID)
{
    conf.UID = newID;
     3c8:	80 93 17 21 	sts	0x2117, r24
     3cc:	90 93 18 21 	sts	0x2118, r25
     3d0:	08 95       	ret

000003d2 <setAndStoreUID>:
}

// sets local copy of UID and stores in EEPROM
void setAndStoreUID(uint16_t newID)
{
    conf.UID = newID;
     3d2:	80 93 17 21 	sts	0x2117, r24
     3d6:	90 93 18 21 	sts	0x2118, r25
    store(&nv_conf, &conf, sizeof(blockConf));
     3da:	44 e0       	ldi	r20, 0x04	; 4
     3dc:	50 e0       	ldi	r21, 0x00	; 0
     3de:	67 e1       	ldi	r22, 0x17	; 23
     3e0:	71 e2       	ldi	r23, 0x21	; 33
     3e2:	80 e0       	ldi	r24, 0x00	; 0
     3e4:	90 e0       	ldi	r25, 0x00	; 0
     3e6:	0c 94 18 18 	jmp	0x3030	; 0x3030 <store>

000003ea <jumpToBootSection>:

// Jumps into the bootloader section.  This function never returns.
// Note that this function only works if the BOOTRST fuse is set to Boot Loader Reset
void jumpToBootSection()
{
	jumpToHWBootSection();
     3ea:	0c 94 bf 14 	jmp	0x297e	; 0x297e <jumpToHWBootSection>

000003ee <push>:
#ifndef BBSIM
#include "util/atomic.h"
#endif

void push(byte data, CircBuf * b)
{ 
     3ee:	fb 01       	movw	r30, r22
  #ifndef BBSIM
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     3f0:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     3f2:	f8 94       	cli
  {
  #endif

    b->buf[b->end++] = data;
     3f4:	97 8d       	ldd	r25, Z+31	; 0x1f
     3f6:	db 01       	movw	r26, r22
     3f8:	a9 0f       	add	r26, r25
     3fa:	b1 1d       	adc	r27, r1
     3fc:	8c 93       	st	X, r24
     3fe:	89 2f       	mov	r24, r25
     400:	8f 5f       	subi	r24, 0xFF	; 255

    if(b->end == CIRC_BUF_LEN)
     402:	8e 31       	cpi	r24, 0x1E	; 30
     404:	11 f0       	breq	.+4      	; 0x40a <push+0x1c>
  #ifndef BBSIM
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
  {
  #endif

    b->buf[b->end++] = data;
     406:	87 8f       	std	Z+31, r24	; 0x1f
     408:	01 c0       	rjmp	.+2      	; 0x40c <push+0x1e>

    if(b->end == CIRC_BUF_LEN)
    {
      b->end = 0;
     40a:	17 8e       	std	Z+31, r1	; 0x1f
    }

    if(b->end == b->start)
     40c:	87 8d       	ldd	r24, Z+31	; 0x1f
     40e:	96 8d       	ldd	r25, Z+30	; 0x1e
     410:	89 17       	cp	r24, r25
     412:	11 f0       	breq	.+4      	; 0x418 <push+0x2a>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     414:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
     416:	08 95       	ret
    {
      b->start++;
     418:	8f 5f       	subi	r24, 0xFF	; 255
     41a:	86 8f       	std	Z+30, r24	; 0x1e
	
      if(b->start == CIRC_BUF_LEN)
     41c:	8e 31       	cpi	r24, 0x1E	; 30
     41e:	d1 f7       	brne	.-12     	; 0x414 <push+0x26>
	  {
	    b->start = 0;
     420:	16 8e       	std	Z+30, r1	; 0x1e
     422:	f8 cf       	rjmp	.-16     	; 0x414 <push+0x26>

00000424 <pop>:
  }
  #endif
}

int pop(CircBuf * b)
{
     424:	fc 01       	movw	r30, r24
  return data;
}

byte isEmpty(CircBuf * b)
{
  if(b->start == b->end)
     426:	96 8d       	ldd	r25, Z+30	; 0x1e
     428:	87 8d       	ldd	r24, Z+31	; 0x1f
     42a:	98 13       	cpse	r25, r24
     42c:	08 c0       	rjmp	.+16     	; 0x43e <pop+0x1a>
     42e:	04 c0       	rjmp	.+8      	; 0x438 <pop+0x14>
  #endif
    data = b->buf[b->start++];
  
    if(b->start == CIRC_BUF_LEN)
    {
      b->start = 0;
     430:	16 8e       	std	Z+30, r1	; 0x1e
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     432:	9f bf       	out	0x3f, r25	; 63
    }
  #ifndef BBSIM
  }
  #endif
  
  return data;
     434:	30 e0       	ldi	r19, 0x00	; 0
     436:	0f c0       	rjmp	.+30     	; 0x456 <pop+0x32>
{
  uint8_t data;

  if( isEmpty(b) )
  {
	return -1;
     438:	2f ef       	ldi	r18, 0xFF	; 255
     43a:	3f ef       	ldi	r19, 0xFF	; 255
     43c:	0c c0       	rjmp	.+24     	; 0x456 <pop+0x32>
  }
  #ifndef BBSIM
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     43e:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     440:	f8 94       	cli
  {
  #endif
    data = b->buf[b->start++];
     442:	86 8d       	ldd	r24, Z+30	; 0x1e
     444:	df 01       	movw	r26, r30
     446:	a8 0f       	add	r26, r24
     448:	b1 1d       	adc	r27, r1
     44a:	2c 91       	ld	r18, X
     44c:	8f 5f       	subi	r24, 0xFF	; 255
  
    if(b->start == CIRC_BUF_LEN)
     44e:	8e 31       	cpi	r24, 0x1E	; 30
     450:	79 f3       	breq	.-34     	; 0x430 <pop+0xc>
  }
  #ifndef BBSIM
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
  {
  #endif
    data = b->buf[b->start++];
     452:	86 8f       	std	Z+30, r24	; 0x1e
     454:	ee cf       	rjmp	.-36     	; 0x432 <pop+0xe>
  #ifndef BBSIM
  }
  #endif
  
  return data;
}
     456:	c9 01       	movw	r24, r18
     458:	08 95       	ret

0000045a <isEmpty>:

byte isEmpty(CircBuf * b)
{
     45a:	fc 01       	movw	r30, r24
  if(b->start == b->end)
     45c:	81 e0       	ldi	r24, 0x01	; 1
     45e:	26 8d       	ldd	r18, Z+30	; 0x1e
     460:	97 8d       	ldd	r25, Z+31	; 0x1f
     462:	29 13       	cpse	r18, r25
     464:	80 e0       	ldi	r24, 0x00	; 0
  {
    return 1;
  }
  return 0;
}
     466:	08 95       	ret

00000468 <defaultMsgHandler>:
/////////////////// PROTECTED FUNCTIONS ///////////////////
// default message handler - does nothing
byte defaultMsgHandler(void)
{
    return 1;
}
     468:	81 e0       	ldi	r24, 0x01	; 1
     46a:	08 95       	ret

0000046c <reservedSystemHandler>:
//   using 0x0000 as message handler allows blocks 
//   running different programs to communicate at the system level.
byte reservedSystemHandler(void)
{
    // bogus
    if(thisChunk == NULL) {
     46c:	e0 91 57 20 	lds	r30, 0x2057
     470:	f0 91 58 20 	lds	r31, 0x2058
     474:	30 97       	sbiw	r30, 0x00	; 0
     476:	79 f0       	breq	.+30     	; 0x496 <reservedSystemHandler+0x2a>
        return 0;
    }
  
    // find msg type and check
    switch( thisChunk->data[0] )
     478:	80 81       	ld	r24, Z
     47a:	80 36       	cpi	r24, 0x60	; 96
     47c:	51 f0       	breq	.+20     	; 0x492 <reservedSystemHandler+0x26>
     47e:	8f 3f       	cpi	r24, 0xFF	; 255
     480:	19 f0       	breq	.+6      	; 0x488 <reservedSystemHandler+0x1c>
     482:	81 30       	cpi	r24, 0x01	; 1
     484:	41 f4       	brne	.+16     	; 0x496 <reservedSystemHandler+0x2a>
     486:	02 c0       	rjmp	.+4      	; 0x48c <reservedSystemHandler+0x20>
	                break;
	            }
	            i++;
	        }
	        // consistent
    	    jumpToBootSection();
     488:	0e 94 f5 01 	call	0x3ea	; 0x3ea <jumpToBootSection>
        }
        case NEIGHBOR_MSG:
            handleNeighborMessage();
     48c:	0e 94 80 04 	call	0x900	; 0x900 <handleNeighborMessage>
            break;
     490:	02 c0       	rjmp	.+4      	; 0x496 <reservedSystemHandler+0x2a>
			handleLogMessage();
			break;
#endif
#ifdef CLOCK_SYNC
		case CLOCK_SYNC_MSG:
			handleClockSyncMessage();
     492:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <handleClockSyncMessage>
        default:
            break;
    }
  
    return 0;
}
     496:	80 e0       	ldi	r24, 0x00	; 0
     498:	08 95       	ret

0000049a <removeFromSq>:
// inputs:  port
// output:  1-success, 0-failure
byte removeFromSq(PRef p, byte response)
{
    // empty or bad
    if( (p >= NUM_PORTS) || (port[p].sq.head == NULL) ) 
     49a:	86 30       	cpi	r24, 0x06	; 6
     49c:	08 f0       	brcs	.+2      	; 0x4a0 <removeFromSq+0x6>
     49e:	3f c0       	rjmp	.+126    	; 0x51e <removeFromSq+0x84>
     4a0:	98 e5       	ldi	r25, 0x58	; 88
     4a2:	89 9f       	mul	r24, r25
     4a4:	f0 01       	movw	r30, r0
     4a6:	11 24       	eor	r1, r1
     4a8:	e4 5a       	subi	r30, 0xA4	; 164
     4aa:	fc 4d       	sbci	r31, 0xDC	; 220
     4ac:	87 85       	ldd	r24, Z+15	; 0x0f
     4ae:	90 89       	ldd	r25, Z+16	; 0x10
     4b0:	89 2b       	or	r24, r25
     4b2:	a9 f1       	breq	.+106    	; 0x51e <removeFromSq+0x84>
    {
        return 0;
    }

    BB_LOCK(SQ_LOCK)
     4b4:	2f b7       	in	r18, 0x3f	; 63
     4b6:	f8 94       	cli

    // get the first Chunk
    thisChunk = port[p].sq.head;
     4b8:	a7 85       	ldd	r26, Z+15	; 0x0f
     4ba:	b0 89       	ldd	r27, Z+16	; 0x10

    // move the head of the queue
    port[p].sq.head = thisChunk->next;
     4bc:	52 96       	adiw	r26, 0x12	; 18
     4be:	8d 91       	ld	r24, X+
     4c0:	9c 91       	ld	r25, X
     4c2:	53 97       	sbiw	r26, 0x13	; 19
     4c4:	87 87       	std	Z+15, r24	; 0x0f
     4c6:	90 8b       	std	Z+16, r25	; 0x10

    // tail was pointing to head, remove tail as well
    if( port[p].sq.head == NULL ) 
     4c8:	89 2b       	or	r24, r25
     4ca:	a1 f0       	breq	.+40     	; 0x4f4 <removeFromSq+0x5a>
     4cc:	a0 93 57 20 	sts	0x2057, r26
     4d0:	b0 93 58 20 	sts	0x2058, r27
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     4d4:	2f bf       	out	0x3f, r18	; 63
    // otherwise, leave it to what it was pointing to

    BB_UNLOCK(SQ_LOCK)

    // remove thisChunk's references to queue
    thisChunk->next = NULL;
     4d6:	a0 91 57 20 	lds	r26, 0x2057
     4da:	b0 91 58 20 	lds	r27, 0x2058
     4de:	52 96       	adiw	r26, 0x12	; 18
     4e0:	1d 92       	st	X+, r1
     4e2:	1c 92       	st	X, r1
     4e4:	53 97       	sbiw	r26, 0x13	; 19

    if(thisChunk->callback != NULL)
     4e6:	56 96       	adiw	r26, 0x16	; 22
     4e8:	ed 91       	ld	r30, X+
     4ea:	fc 91       	ld	r31, X
     4ec:	57 97       	sbiw	r26, 0x17	; 23
     4ee:	30 97       	sbiw	r30, 0x00	; 0
     4f0:	39 f4       	brne	.+14     	; 0x500 <removeFromSq+0x66>
     4f2:	0f c0       	rjmp	.+30     	; 0x512 <removeFromSq+0x78>
    port[p].sq.head = thisChunk->next;

    // tail was pointing to head, remove tail as well
    if( port[p].sq.head == NULL ) 
    {
        port[p].sq.tail   = NULL;
     4f4:	11 8a       	std	Z+17, r1	; 0x11
     4f6:	12 8a       	std	Z+18, r1	; 0x12
        port[p].sq.flags &= ~CHUNK_READY;
     4f8:	86 85       	ldd	r24, Z+14	; 0x0e
     4fa:	8f 77       	andi	r24, 0x7F	; 127
     4fc:	86 87       	std	Z+14, r24	; 0x0e
     4fe:	e6 cf       	rjmp	.-52     	; 0x4cc <removeFromSq+0x32>
    thisChunk->next = NULL;

    if(thisChunk->callback != NULL)
    {
        // set response type for callback
        setChunkResponse(thisChunk, response);
     500:	68 71       	andi	r22, 0x18	; 24
     502:	51 96       	adiw	r26, 0x11	; 17
     504:	8c 91       	ld	r24, X
     506:	51 97       	sbiw	r26, 0x11	; 17
     508:	87 7e       	andi	r24, 0xE7	; 231
     50a:	68 2b       	or	r22, r24
     50c:	51 96       	adiw	r26, 0x11	; 17
     50e:	6c 93       	st	X, r22
	
        // execute callback to clear memory and other user actions
        (thisChunk->callback)();
     510:	19 95       	eicall
    }

    // we assume that the callback has freed memory
    thisChunk = NULL;
     512:	10 92 57 20 	sts	0x2057, r1
     516:	10 92 58 20 	sts	0x2058, r1
    return 1;
     51a:	81 e0       	ldi	r24, 0x01	; 1
     51c:	08 95       	ret
byte removeFromSq(PRef p, byte response)
{
    // empty or bad
    if( (p >= NUM_PORTS) || (port[p].sq.head == NULL) ) 
    {
        return 0;
     51e:	80 e0       	ldi	r24, 0x00	; 0
    }

    // we assume that the callback has freed memory
    thisChunk = NULL;
    return 1;
}
     520:	08 95       	ret

00000522 <flushSendQueue>:

// flush a send queue (used when retries fails)
void flushSendQueue(PRef p)
{
     522:	cf 93       	push	r28
     524:	c8 2f       	mov	r28, r24
	if (isHostPort(p)) {
		removeFromSq(p, MSG_RESP_NOREPLY); // ONLY ONE
		return;
	}
#endif
    if(p < NUM_PORTS)
     526:	86 30       	cpi	r24, 0x06	; 6
     528:	30 f4       	brcc	.+12     	; 0x536 <flushSendQueue+0x14>
    {
        // flush buffer (call all callbacks as if all messages failed)
        while( removeFromSq(p, MSG_RESP_NOREPLY) );
     52a:	68 e1       	ldi	r22, 0x18	; 24
     52c:	8c 2f       	mov	r24, r28
     52e:	0e 94 4d 02 	call	0x49a	; 0x49a <removeFromSq>
     532:	81 11       	cpse	r24, r1
     534:	fa cf       	rjmp	.-12     	; 0x52a <flushSendQueue+0x8>
    }
}
     536:	cf 91       	pop	r28
     538:	08 95       	ret

0000053a <setupChunk>:
//          mh - handler for this message
//          cb - callback on send failure
// outputs: 1 - chunk correctly formatted
//          0 - inputs contained error, format failed
byte setupChunk(Chunk* c, PRef p, byte * msg, byte length, MsgHandler mh, GenericHandler cb)
{
     53a:	ef 92       	push	r14
     53c:	ff 92       	push	r15
     53e:	0f 93       	push	r16
     540:	1f 93       	push	r17
     542:	cf 93       	push	r28
     544:	df 93       	push	r29
     546:	ec 01       	movw	r28, r24
     548:	ca 01       	movw	r24, r20
    // invalid Chunk, invalid port, message too long, or no message
    if( (c == NULL) || (p >= NUM_PORTS) || (length > DATA_SIZE) || (msg == NULL) )
     54a:	20 97       	sbiw	r28, 0x00	; 0
     54c:	51 f1       	breq	.+84     	; 0x5a2 <setupChunk+0x68>
     54e:	66 30       	cpi	r22, 0x06	; 6
     550:	40 f5       	brcc	.+80     	; 0x5a2 <setupChunk+0x68>
     552:	22 31       	cpi	r18, 0x12	; 18
     554:	30 f5       	brcc	.+76     	; 0x5a2 <setupChunk+0x68>
     556:	00 97       	sbiw	r24, 0x00	; 0
     558:	21 f1       	breq	.+72     	; 0x5a2 <setupChunk+0x68>
    {
        return 0;
    }

    // set the flags
    c->status = CHUNK_USED | CHUNK_FILLED | MSG_RESP_SENDING | port[p].pnum;
     55a:	38 e5       	ldi	r19, 0x58	; 88
     55c:	63 9f       	mul	r22, r19
     55e:	f0 01       	movw	r30, r0
     560:	11 24       	eor	r1, r1
     562:	e4 5a       	subi	r30, 0xA4	; 164
     564:	fc 4d       	sbci	r31, 0xDC	; 220
     566:	30 81       	ld	r19, Z
     568:	30 68       	ori	r19, 0x80	; 128
     56a:	39 8b       	std	Y+17, r19	; 0x11
    
    // clear out next pointer
    c->next = NULL;
     56c:	1a 8a       	std	Y+18, r1	; 0x12
     56e:	1b 8a       	std	Y+19, r1	; 0x13

    // set message handler
    *((MsgHandler*)(c->handler)) = mh;
     570:	0c 8b       	std	Y+20, r16	; 0x14
     572:	1d 8b       	std	Y+21, r17	; 0x15

    // setup callback
    c->callback = cb;
     574:	ee 8a       	std	Y+22, r14	; 0x16
     576:	ff 8a       	std	Y+23, r15	; 0x17

    // copy message
    memcpy(c->data, msg, length);
     578:	02 2f       	mov	r16, r18
     57a:	10 e0       	ldi	r17, 0x00	; 0
     57c:	42 2f       	mov	r20, r18
     57e:	50 e0       	ldi	r21, 0x00	; 0
     580:	bc 01       	movw	r22, r24
     582:	ce 01       	movw	r24, r28
     584:	0e 94 7a 22 	call	0x44f4	; 0x44f4 <memcpy>
    
    // 'zero' out extra bytes (use ff's)
    memset((c->data)+length, 0xFF, DATA_SIZE-length);
     588:	c0 0f       	add	r28, r16
     58a:	d1 1f       	adc	r29, r17
     58c:	41 e1       	ldi	r20, 0x11	; 17
     58e:	50 e0       	ldi	r21, 0x00	; 0
     590:	40 1b       	sub	r20, r16
     592:	51 0b       	sbc	r21, r17
     594:	6f ef       	ldi	r22, 0xFF	; 255
     596:	70 e0       	ldi	r23, 0x00	; 0
     598:	ce 01       	movw	r24, r28
     59a:	0e 94 83 22 	call	0x4506	; 0x4506 <memset>
    
    return 1;
     59e:	81 e0       	ldi	r24, 0x01	; 1
     5a0:	01 c0       	rjmp	.+2      	; 0x5a4 <setupChunk+0x6a>
byte setupChunk(Chunk* c, PRef p, byte * msg, byte length, MsgHandler mh, GenericHandler cb)
{
    // invalid Chunk, invalid port, message too long, or no message
    if( (c == NULL) || (p >= NUM_PORTS) || (length > DATA_SIZE) || (msg == NULL) )
    {
        return 0;
     5a2:	80 e0       	ldi	r24, 0x00	; 0
    
    // 'zero' out extra bytes (use ff's)
    memset((c->data)+length, 0xFF, DATA_SIZE-length);
    
    return 1;
}
     5a4:	df 91       	pop	r29
     5a6:	cf 91       	pop	r28
     5a8:	1f 91       	pop	r17
     5aa:	0f 91       	pop	r16
     5ac:	ff 90       	pop	r15
     5ae:	ef 90       	pop	r14
     5b0:	08 95       	ret

000005b2 <queueChunk>:
// outputs: 1 - chunk successfully queued
//          0 - error, chunk was not queued
byte queueChunk(Chunk* c)
{
    // null Chunk
    if(c == NULL)
     5b2:	00 97       	sbiw	r24, 0x00	; 0
     5b4:	71 f1       	breq	.+92     	; 0x612 <queueChunk+0x60>
    {
        return 0;    
    }
    
    byte p = faceNum(c);
     5b6:	dc 01       	movw	r26, r24
     5b8:	51 96       	adiw	r26, 0x11	; 17
     5ba:	ec 91       	ld	r30, X
     5bc:	e7 70       	andi	r30, 0x07	; 7
    
    if(p < NUM_PORTS)
     5be:	e6 30       	cpi	r30, 0x06	; 6
     5c0:	30 f5       	brcc	.+76     	; 0x60e <queueChunk+0x5c>
            freeChunk(c);
            return 0;
        }
#endif    
    
        BB_LOCK(SQ_LOCK)
     5c2:	6f b7       	in	r22, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     5c4:	f8 94       	cli

        // add to queue - queue empty
        if( port[p].sq.head == NULL ) 
     5c6:	2e 2f       	mov	r18, r30
     5c8:	30 e0       	ldi	r19, 0x00	; 0
     5ca:	b8 e5       	ldi	r27, 0x58	; 88
     5cc:	eb 9f       	mul	r30, r27
     5ce:	f0 01       	movw	r30, r0
     5d0:	11 24       	eor	r1, r1
     5d2:	e4 5a       	subi	r30, 0xA4	; 164
     5d4:	fc 4d       	sbci	r31, 0xDC	; 220
     5d6:	47 85       	ldd	r20, Z+15	; 0x0f
     5d8:	50 89       	ldd	r21, Z+16	; 0x10
     5da:	45 2b       	or	r20, r21
     5dc:	19 f4       	brne	.+6      	; 0x5e4 <queueChunk+0x32>
        {
            port[p].sq.head = c;
     5de:	87 87       	std	Z+15, r24	; 0x0f
     5e0:	90 8b       	std	Z+16, r25	; 0x10
     5e2:	05 c0       	rjmp	.+10     	; 0x5ee <queueChunk+0x3c>
        }
        // queue has stuff
        else 
        {
            port[p].sq.tail->next = c;
     5e4:	01 88       	ldd	r0, Z+17	; 0x11
     5e6:	f2 89       	ldd	r31, Z+18	; 0x12
     5e8:	e0 2d       	mov	r30, r0
     5ea:	82 8b       	std	Z+18, r24	; 0x12
     5ec:	93 8b       	std	Z+19, r25	; 0x13
        }
        // add to tail and update flags
        port[p].sq.tail   = c;
     5ee:	48 e5       	ldi	r20, 0x58	; 88
     5f0:	42 9f       	mul	r20, r18
     5f2:	f0 01       	movw	r30, r0
     5f4:	43 9f       	mul	r20, r19
     5f6:	f0 0d       	add	r31, r0
     5f8:	11 24       	eor	r1, r1
     5fa:	e4 5a       	subi	r30, 0xA4	; 164
     5fc:	fc 4d       	sbci	r31, 0xDC	; 220
     5fe:	81 8b       	std	Z+17, r24	; 0x11
     600:	92 8b       	std	Z+18, r25	; 0x12
        port[p].sq.flags |= CHUNK_READY;
     602:	86 85       	ldd	r24, Z+14	; 0x0e
     604:	80 68       	ori	r24, 0x80	; 128
     606:	86 87       	std	Z+14, r24	; 0x0e
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     608:	6f bf       	out	0x3f, r22	; 63

        BB_UNLOCK(SQ_LOCK)

        return 1;
     60a:	81 e0       	ldi	r24, 0x01	; 1
     60c:	08 95       	ret
    }
    else
    {
        freeChunk(c);
     60e:	0e 94 72 07 	call	0xee4	; 0xee4 <freeChunk>
byte queueChunk(Chunk* c)
{
    // null Chunk
    if(c == NULL)
    {
        return 0;    
     612:	80 e0       	ldi	r24, 0x00	; 0
    else
    {
        freeChunk(c);
        return 0;
    }
}
     614:	08 95       	ret

00000616 <handleOneMessage>:
// returns: 1 - message processed
//          0 - no new messages
byte handleOneMessage()
{
    // set the global chunk that needs to be processed by the handler
    thisChunk = nextPacket();
     616:	0e 94 f1 16 	call	0x2de2	; 0x2de2 <nextPacket>
     61a:	80 93 57 20 	sts	0x2057, r24
     61e:	90 93 58 20 	sts	0x2058, r25

    // no packet, no action
    if( thisChunk == NULL )
     622:	00 97       	sbiw	r24, 0x00	; 0
     624:	69 f1       	breq	.+90     	; 0x680 <handleOneMessage+0x6a>
    {
        return 0;
    }

    // call handler
    if( *((MsgHandler*)thisChunk->handler) == RES_SYS_HANDLER ) 
     626:	dc 01       	movw	r26, r24
     628:	54 96       	adiw	r26, 0x14	; 20
     62a:	ed 91       	ld	r30, X+
     62c:	fc 91       	ld	r31, X
     62e:	55 97       	sbiw	r26, 0x15	; 21
     630:	30 97       	sbiw	r30, 0x00	; 0
     632:	19 f4       	brne	.+6      	; 0x63a <handleOneMessage+0x24>
    {
	    reservedSystemHandler();
     634:	0e 94 36 02 	call	0x46c	; 0x46c <reservedSystemHandler>
     638:	01 c0       	rjmp	.+2      	; 0x63c <handleOneMessage+0x26>
    }
    else 
    {
	    (*((MsgHandler*)(thisChunk->handler)))();
     63a:	19 95       	eicall
    }

    // set flag to send ACK
    port[faceNum(thisChunk)].sq.flags |= setAck(thisChunk);
     63c:	80 91 57 20 	lds	r24, 0x2057
     640:	90 91 58 20 	lds	r25, 0x2058
     644:	fc 01       	movw	r30, r24
     646:	21 89       	ldd	r18, Z+17	; 0x11
     648:	e2 2f       	mov	r30, r18
     64a:	e7 70       	andi	r30, 0x07	; 7
     64c:	38 e5       	ldi	r19, 0x58	; 88
     64e:	e3 9f       	mul	r30, r19
     650:	f0 01       	movw	r30, r0
     652:	11 24       	eor	r1, r1
     654:	e4 5a       	subi	r30, 0xA4	; 164
     656:	fc 4d       	sbci	r31, 0xDC	; 220
     658:	25 fb       	bst	r18, 5
     65a:	44 27       	eor	r20, r20
     65c:	40 f9       	bld	r20, 0
     65e:	21 e0       	ldi	r18, 0x01	; 1
     660:	30 e0       	ldi	r19, 0x00	; 0
     662:	01 c0       	rjmp	.+2      	; 0x666 <handleOneMessage+0x50>
     664:	22 0f       	add	r18, r18
     666:	4a 95       	dec	r20
     668:	ea f7       	brpl	.-6      	; 0x664 <handleOneMessage+0x4e>
     66a:	36 85       	ldd	r19, Z+14	; 0x0e
     66c:	32 2b       	or	r19, r18
     66e:	36 87       	std	Z+14, r19	; 0x0e

    // free the rx chunk
    freeChunk(thisChunk);
     670:	0e 94 72 07 	call	0xee4	; 0xee4 <freeChunk>

    // reset the global chunk since memory is no longer valid
    thisChunk = NULL;
     674:	10 92 57 20 	sts	0x2057, r1
     678:	10 92 58 20 	sts	0x2058, r1

    return 1;
     67c:	81 e0       	ldi	r24, 0x01	; 1
     67e:	08 95       	ret
    thisChunk = nextPacket();

    // no packet, no action
    if( thisChunk == NULL )
    {
        return 0;
     680:	80 e0       	ldi	r24, 0x00	; 0

    // reset the global chunk since memory is no longer valid
    thisChunk = NULL;

    return 1;
}
     682:	08 95       	ret

00000684 <initDataLink>:

// initialization
void initDataLink()
{
    initHWDataLink();
     684:	0e 94 bf 17 	call	0x2f7e	; 0x2f7e <initHWDataLink>

    globalRq.head  = NULL;
     688:	10 92 52 20 	sts	0x2052, r1
     68c:	10 92 53 20 	sts	0x2053, r1
    globalRq.tail  = NULL;
     690:	10 92 54 20 	sts	0x2054, r1
     694:	10 92 55 20 	sts	0x2055, r1
    globalRq.flags = 0;
     698:	10 92 56 20 	sts	0x2056, r1
     69c:	08 95       	ret

0000069e <initDebug>:
#include "debug.bbh"
#include "../hw-api/hwDebug.h"

void initDebug() 
{
  initHWDebug();
     69e:	0c 94 5f 1e 	jmp	0x3cbe	; 0x3cbe <initHWDebug>

000006a2 <neighborKeepalive>:
    freeChunk(thisChunk);
}

// this is called periodically to verify neighbor is still there and in the right state
void neighborKeepalive(void)
{
     6a2:	0f 93       	push	r16
     6a4:	1f 93       	push	r17
     6a6:	cf 93       	push	r28
     6a8:	df 93       	push	r29
     6aa:	00 d0       	rcall	.+0      	; 0x6ac <neighborKeepalive+0xa>
     6ac:	00 d0       	rcall	.+0      	; 0x6ae <neighborKeepalive+0xc>
     6ae:	cd b7       	in	r28, 0x3d	; 61
     6b0:	de b7       	in	r29, 0x3e	; 62
  // craft and send a keeplive message of the form:
  // [header] [myGUID][yourGUID]
  byte buf[6];
  buf[0] = NEIGHBOR_MSG;
     6b2:	81 e0       	ldi	r24, 0x01	; 1
     6b4:	89 83       	std	Y+1, r24	; 0x01
  buf[1] = MSG_NEIGHBOR_KEEPALIVE;
     6b6:	83 e0       	ldi	r24, 0x03	; 3
     6b8:	8a 83       	std	Y+2, r24	; 0x02
  GUIDIntoChar(getGUID(), &(buf[2]));
     6ba:	0e 94 74 18 	call	0x30e8	; 0x30e8 <getGUID>
threadvar Timer ttNeighbor[6];

// converts a UID into a passed in character stream.  Assumes 2-byte GUIDs.
void GUIDIntoChar(Uid id, byte * c)
{
    c[0] = (id >> 8) & 0x00FF;
     6be:	9b 83       	std	Y+3, r25	; 0x03
    c[1] = (id & 0x00FF); 
     6c0:	8c 83       	std	Y+4, r24	; 0x04
  // [header] [myGUID][yourGUID]
  byte buf[6];
  buf[0] = NEIGHBOR_MSG;
  buf[1] = MSG_NEIGHBOR_KEEPALIVE;
  GUIDIntoChar(getGUID(), &(buf[2]));
  GUIDIntoChar(thisNeighborhood.n[thisTimeout->arg], &(buf[4]));
     6c2:	a0 91 6c 25 	lds	r26, 0x256C
     6c6:	b0 91 6d 25 	lds	r27, 0x256D
     6ca:	19 96       	adiw	r26, 0x09	; 9
     6cc:	8c 91       	ld	r24, X
     6ce:	19 97       	sbiw	r26, 0x09	; 9
     6d0:	90 e0       	ldi	r25, 0x00	; 0
     6d2:	fc 01       	movw	r30, r24
     6d4:	ee 0f       	add	r30, r30
     6d6:	ff 1f       	adc	r31, r31
     6d8:	e7 5a       	subi	r30, 0xA7	; 167
     6da:	ff 4d       	sbci	r31, 0xDF	; 223
     6dc:	20 81       	ld	r18, Z
     6de:	31 81       	ldd	r19, Z+1	; 0x01
threadvar Timer ttNeighbor[6];

// converts a UID into a passed in character stream.  Assumes 2-byte GUIDs.
void GUIDIntoChar(Uid id, byte * c)
{
    c[0] = (id >> 8) & 0x00FF;
     6e0:	3d 83       	std	Y+5, r19	; 0x05
    c[1] = (id & 0x00FF); 
     6e2:	2e 83       	std	Y+6, r18	; 0x06
  buf[1] = MSG_NEIGHBOR_KEEPALIVE;
  GUIDIntoChar(getGUID(), &(buf[2]));
  GUIDIntoChar(thisNeighborhood.n[thisTimeout->arg], &(buf[4]));

  // prevent timer from calling this again, message callback will reenable as necessary
  disableTimer(ttNeighbor[thisTimeout->arg]);
     6e4:	21 e1       	ldi	r18, 0x11	; 17
     6e6:	28 9f       	mul	r18, r24
     6e8:	f0 01       	movw	r30, r0
     6ea:	29 9f       	mul	r18, r25
     6ec:	f0 0d       	add	r31, r0
     6ee:	11 24       	eor	r1, r1
     6f0:	eb 59       	subi	r30, 0x9B	; 155
     6f2:	ff 4d       	sbci	r31, 0xDF	; 223
     6f4:	10 8a       	std	Z+16, r1	; 0x10

  // send message - CB will either re-add timer, or restart scanning for neighbors
  sendSystemMessage(thisTimeout->arg, buf, 6, RES_SYS_HANDLER, (GenericHandler)&neighborKeepaliveCB);
     6f6:	0d ee       	ldi	r16, 0xED	; 237
     6f8:	15 e0       	ldi	r17, 0x05	; 5
     6fa:	20 e0       	ldi	r18, 0x00	; 0
     6fc:	30 e0       	ldi	r19, 0x00	; 0
     6fe:	46 e0       	ldi	r20, 0x06	; 6
     700:	be 01       	movw	r22, r28
     702:	6f 5f       	subi	r22, 0xFF	; 255
     704:	7f 4f       	sbci	r23, 0xFF	; 255
     706:	19 96       	adiw	r26, 0x09	; 9
     708:	8c 91       	ld	r24, X
     70a:	0e 94 e7 07 	call	0xfce	; 0xfce <sendSystemMessage>
}
     70e:	26 96       	adiw	r28, 0x06	; 6
     710:	cd bf       	out	0x3d, r28	; 61
     712:	de bf       	out	0x3e, r29	; 62
     714:	df 91       	pop	r29
     716:	cf 91       	pop	r28
     718:	1f 91       	pop	r17
     71a:	0f 91       	pop	r16
     71c:	08 95       	ret

0000071e <neighborScan>:
  freeChunk(thisChunk);
}

// send a start handshake message to a vacant port
void neighborScan(void)
{
     71e:	ff 92       	push	r15
     720:	0f 93       	push	r16
     722:	1f 93       	push	r17
     724:	cf 93       	push	r28
     726:	df 93       	push	r29
     728:	00 d0       	rcall	.+0      	; 0x72a <neighborScan+0xc>
     72a:	1f 92       	push	r1
     72c:	cd b7       	in	r28, 0x3d	; 61
     72e:	de b7       	in	r29, 0x3e	; 62
  byte buf[4];
  PRef p = thisTimeout->arg;
     730:	e0 91 6c 25 	lds	r30, 0x256C
     734:	f0 91 6d 25 	lds	r31, 0x256D
     738:	f1 84       	ldd	r15, Z+9	; 0x09
      return;
  }
  #endif

  // prepare message
  buf[0] = NEIGHBOR_MSG;
     73a:	81 e0       	ldi	r24, 0x01	; 1
     73c:	89 83       	std	Y+1, r24	; 0x01
  buf[1] = MSG_NEIGHBOR_START;
     73e:	8a 83       	std	Y+2, r24	; 0x02
  GUIDIntoChar(getGUID(), &(buf[2]));
     740:	0e 94 74 18 	call	0x30e8	; 0x30e8 <getGUID>
threadvar Timer ttNeighbor[6];

// converts a UID into a passed in character stream.  Assumes 2-byte GUIDs.
void GUIDIntoChar(Uid id, byte * c)
{
    c[0] = (id >> 8) & 0x00FF;
     744:	9b 83       	std	Y+3, r25	; 0x03
    c[1] = (id & 0x00FF); 
     746:	8c 83       	std	Y+4, r24	; 0x04
  buf[0] = NEIGHBOR_MSG;
  buf[1] = MSG_NEIGHBOR_START;
  GUIDIntoChar(getGUID(), &(buf[2]));
  
  // disable timer so no extra time-based calls are executed until sent message callback
  disableTimer(ttNeighbor[p]);
     748:	81 e1       	ldi	r24, 0x11	; 17
     74a:	f8 9e       	mul	r15, r24
     74c:	90 01       	movw	r18, r0
     74e:	11 24       	eor	r1, r1
     750:	f9 01       	movw	r30, r18
     752:	eb 59       	subi	r30, 0x9B	; 155
     754:	ff 4d       	sbci	r31, 0xDF	; 223
     756:	10 8a       	std	Z+16, r1	; 0x10
  if(ttNeighbor[p].t.state != INACTIVE)
     758:	82 85       	ldd	r24, Z+10	; 0x0a
     75a:	88 23       	and	r24, r24
     75c:	29 f0       	breq	.+10     	; 0x768 <neighborScan+0x4a>
    {
      deregisterTimeout(&(ttNeighbor[p].t));
     75e:	c9 01       	movw	r24, r18
     760:	89 59       	subi	r24, 0x99	; 153
     762:	9f 4d       	sbci	r25, 0xDF	; 223
     764:	0e 94 47 09 	call	0x128e	; 0x128e <deregisterTimeout>
    }

  // enqueue message
  sendSystemMessage(p, buf, 4, RES_SYS_HANDLER, (GenericHandler)&neighborScanCB);
     768:	08 ec       	ldi	r16, 0xC8	; 200
     76a:	13 e0       	ldi	r17, 0x03	; 3
     76c:	20 e0       	ldi	r18, 0x00	; 0
     76e:	30 e0       	ldi	r19, 0x00	; 0
     770:	44 e0       	ldi	r20, 0x04	; 4
     772:	be 01       	movw	r22, r28
     774:	6f 5f       	subi	r22, 0xFF	; 255
     776:	7f 4f       	sbci	r23, 0xFF	; 255
     778:	8f 2d       	mov	r24, r15
     77a:	0e 94 e7 07 	call	0xfce	; 0xfce <sendSystemMessage>
}
     77e:	24 96       	adiw	r28, 0x04	; 4
     780:	cd bf       	out	0x3d, r28	; 61
     782:	de bf       	out	0x3e, r29	; 62
     784:	df 91       	pop	r29
     786:	cf 91       	pop	r28
     788:	1f 91       	pop	r17
     78a:	0f 91       	pop	r16
     78c:	ff 90       	pop	r15
     78e:	08 95       	ret

00000790 <neighborScanCB>:
      return;
  }
#endif

  // message was received.  wait for handshake to return, but allow for timeout to restart scan
  if(chunkResponseType(thisChunk) == MSG_RESP_ACK)
     790:	80 91 57 20 	lds	r24, 0x2057
     794:	90 91 58 20 	lds	r25, 0x2058
     798:	dc 01       	movw	r26, r24
     79a:	51 96       	adiw	r26, 0x11	; 17
     79c:	ec 91       	ld	r30, X
     79e:	2e 2f       	mov	r18, r30
     7a0:	28 71       	andi	r18, 0x18	; 24
     7a2:	ae 2f       	mov	r26, r30
     7a4:	a7 70       	andi	r26, 0x07	; 7
     7a6:	28 30       	cpi	r18, 0x08	; 8
     7a8:	59 f4       	brne	.+22     	; 0x7c0 <neighborScanCB+0x30>
    {
      (ttNeighbor[faceNum(thisChunk)]).period = NEIGHBOR_HANDSHAKE_TIMEOUT_PERIOD;
     7aa:	21 e1       	ldi	r18, 0x11	; 17
     7ac:	a2 9f       	mul	r26, r18
     7ae:	d0 01       	movw	r26, r0
     7b0:	11 24       	eor	r1, r1
     7b2:	ab 59       	subi	r26, 0x9B	; 155
     7b4:	bf 4d       	sbci	r27, 0xDF	; 223
     7b6:	44 e6       	ldi	r20, 0x64	; 100
     7b8:	50 e0       	ldi	r21, 0x00	; 0
     7ba:	60 e0       	ldi	r22, 0x00	; 0
     7bc:	70 e0       	ldi	r23, 0x00	; 0
     7be:	0a c0       	rjmp	.+20     	; 0x7d4 <neighborScanCB+0x44>
    }
  // else failure
  else
    {
      (ttNeighbor[faceNum(thisChunk)]).period = NEIGHBOR_SCAN_PERIOD;
     7c0:	21 e1       	ldi	r18, 0x11	; 17
     7c2:	a2 9f       	mul	r26, r18
     7c4:	d0 01       	movw	r26, r0
     7c6:	11 24       	eor	r1, r1
     7c8:	ab 59       	subi	r26, 0x9B	; 155
     7ca:	bf 4d       	sbci	r27, 0xDF	; 223
     7cc:	42 e3       	ldi	r20, 0x32	; 50
     7ce:	50 e0       	ldi	r21, 0x00	; 0
     7d0:	60 e0       	ldi	r22, 0x00	; 0
     7d2:	70 e0       	ldi	r23, 0x00	; 0
     7d4:	1c 96       	adiw	r26, 0x0c	; 12
     7d6:	4d 93       	st	X+, r20
     7d8:	5d 93       	st	X+, r21
     7da:	6d 93       	st	X+, r22
     7dc:	7c 93       	st	X, r23
     7de:	1f 97       	sbiw	r26, 0x0f	; 15
    }

  // re-enable timer with potentially new period
  enableTimer(ttNeighbor[faceNum(thisChunk)]);
     7e0:	e7 70       	andi	r30, 0x07	; 7
     7e2:	a1 e1       	ldi	r26, 0x11	; 17
     7e4:	ea 9f       	mul	r30, r26
     7e6:	f0 01       	movw	r30, r0
     7e8:	11 24       	eor	r1, r1
     7ea:	eb 59       	subi	r30, 0x9B	; 155
     7ec:	ff 4d       	sbci	r31, 0xDF	; 223
     7ee:	21 e0       	ldi	r18, 0x01	; 1
     7f0:	20 8b       	std	Z+16, r18	; 0x10
 
  freeChunk(thisChunk);
     7f2:	0c 94 72 07 	jmp	0xee4	; 0xee4 <freeChunk>

000007f6 <GUIDIntoChar>:
threadvar Timer ttNeighbor[6];

// converts a UID into a passed in character stream.  Assumes 2-byte GUIDs.
void GUIDIntoChar(Uid id, byte * c)
{
    c[0] = (id >> 8) & 0x00FF;
     7f6:	fb 01       	movw	r30, r22
     7f8:	90 83       	st	Z, r25
    c[1] = (id & 0x00FF); 
     7fa:	81 83       	std	Z+1, r24	; 0x01
     7fc:	08 95       	ret

000007fe <charToGUID>:
// takes a passed in character array and returns a UID representing the array.  Assumes 2-byte GUIDs.
Uid charToGUID(byte * c)
{
    Uid tmp;

    tmp = (Uid)(c[0]) << 8;
     7fe:	fc 01       	movw	r30, r24
     800:	30 81       	ld	r19, Z
     802:	20 e0       	ldi	r18, 0x00	; 0
    tmp |= c[1];
     804:	81 81       	ldd	r24, Z+1	; 0x01
     806:	28 2b       	or	r18, r24

    return tmp;
}
     808:	c9 01       	movw	r24, r18
     80a:	08 95       	ret

0000080c <getNeighborCount>:

// returns number of neighbors that are not VACANT.
byte getNeighborCount()
{
     80c:	e9 e5       	ldi	r30, 0x59	; 89
     80e:	f0 e2       	ldi	r31, 0x20	; 32
	uint8_t count, i;
	
	for(count = 0, i = 0; i < NUM_PORTS; ++i)
     810:	80 e0       	ldi	r24, 0x00	; 0
	{
		if(thisNeighborhood.n[i] != VACANT)
     812:	21 91       	ld	r18, Z+
     814:	31 91       	ld	r19, Z+
     816:	23 2b       	or	r18, r19
     818:	09 f0       	breq	.+2      	; 0x81c <getNeighborCount+0x10>
		{
			count++;
     81a:	8f 5f       	subi	r24, 0xFF	; 255
// returns number of neighbors that are not VACANT.
byte getNeighborCount()
{
	uint8_t count, i;
	
	for(count = 0, i = 0; i < NUM_PORTS; ++i)
     81c:	90 e2       	ldi	r25, 0x20	; 32
     81e:	e5 36       	cpi	r30, 0x65	; 101
     820:	f9 07       	cpc	r31, r25
     822:	b9 f7       	brne	.-18     	; 0x812 <getNeighborCount+0x6>
	}

//	if(count>0)
//	  printf("NEIGHBORCOUNT = %d\r\n", count);
	return count;
}
     824:	08 95       	ret

00000826 <down>:

// simple functions to access geographic neighbors
Uid down(void) { return thisNeighborhood.n[DOWN]; }
     826:	e9 e5       	ldi	r30, 0x59	; 89
     828:	f0 e2       	ldi	r31, 0x20	; 32
     82a:	80 81       	ld	r24, Z
     82c:	91 81       	ldd	r25, Z+1	; 0x01
     82e:	08 95       	ret

00000830 <up>:
Uid up(void) { return thisNeighborhood.n[UP]; }
     830:	e3 e6       	ldi	r30, 0x63	; 99
     832:	f0 e2       	ldi	r31, 0x20	; 32
     834:	80 81       	ld	r24, Z
     836:	91 81       	ldd	r25, Z+1	; 0x01
     838:	08 95       	ret

0000083a <north>:
Uid north(void) { return thisNeighborhood.n[NORTH]; }
     83a:	eb e5       	ldi	r30, 0x5B	; 91
     83c:	f0 e2       	ldi	r31, 0x20	; 32
     83e:	80 81       	ld	r24, Z
     840:	91 81       	ldd	r25, Z+1	; 0x01
     842:	08 95       	ret

00000844 <south>:
Uid south(void) { return thisNeighborhood.n[SOUTH]; }
     844:	e1 e6       	ldi	r30, 0x61	; 97
     846:	f0 e2       	ldi	r31, 0x20	; 32
     848:	80 81       	ld	r24, Z
     84a:	91 81       	ldd	r25, Z+1	; 0x01
     84c:	08 95       	ret

0000084e <east>:
Uid east(void) { return thisNeighborhood.n[EAST]; }
     84e:	ed e5       	ldi	r30, 0x5D	; 93
     850:	f0 e2       	ldi	r31, 0x20	; 32
     852:	80 81       	ld	r24, Z
     854:	91 81       	ldd	r25, Z+1	; 0x01
     856:	08 95       	ret

00000858 <west>:
Uid west(void) { return thisNeighborhood.n[WEST]; }
     858:	ef e5       	ldi	r30, 0x5F	; 95
     85a:	f0 e2       	ldi	r31, 0x20	; 32
     85c:	80 81       	ld	r24, Z
     85e:	91 81       	ldd	r25, Z+1	; 0x01
     860:	08 95       	ret

00000862 <updateNeighbor>:

// called to set the GUID of a neighbor.
// if the neighbor is the same as before, do nothing.
// if the neighbor has a different GUID (or VACANT), trigger a neighbor change event.
void	updateNeighbor(PRef p, Uid b)
{
     862:	cf 93       	push	r28
     864:	c8 2f       	mov	r28, r24
  if(isHostPort(p)) {
      return;
  }
#endif

	if(p < NUM_PORTS)
     866:	86 30       	cpi	r24, 0x06	; 6
     868:	a0 f4       	brcc	.+40     	; 0x892 <updateNeighbor+0x30>
	{
		// is the state changing?  Trigger handler
	    if(thisNeighborhood.n[p] != b)
     86a:	e8 2f       	mov	r30, r24
     86c:	f0 e0       	ldi	r31, 0x00	; 0
     86e:	ee 0f       	add	r30, r30
     870:	ff 1f       	adc	r31, r31
     872:	e7 5a       	subi	r30, 0xA7	; 167
     874:	ff 4d       	sbci	r31, 0xDF	; 223
     876:	20 81       	ld	r18, Z
     878:	31 81       	ldd	r19, Z+1	; 0x01
     87a:	26 17       	cp	r18, r22
     87c:	37 07       	cpc	r19, r23
     87e:	49 f0       	breq	.+18     	; 0x892 <updateNeighbor+0x30>
	    {
	        thisNeighborhood.n[p] = b;
     880:	60 83       	st	Z, r22
     882:	71 83       	std	Z+1, r23	; 0x01
	        triggerHandler(EVENT_NEIGHBOR_CHANGE);
     884:	83 e1       	ldi	r24, 0x13	; 19
     886:	0e 94 bd 06 	call	0xd7a	; 0xd7a <triggerHandler>
#ifdef CLOCK_SYNC
			handleNeighborChange(p);
     88a:	8c 2f       	mov	r24, r28
	    }
	  
	}
	
	//	printf("Block %d now has %d neighbors \n",getGUID(),getNeighborCount());
}
     88c:	cf 91       	pop	r28
	    if(thisNeighborhood.n[p] != b)
	    {
	        thisNeighborhood.n[p] = b;
	        triggerHandler(EVENT_NEIGHBOR_CHANGE);
#ifdef CLOCK_SYNC
			handleNeighborChange(p);
     88e:	0c 94 0e 0d 	jmp	0x1a1c	; 0x1a1c <handleNeighborChange>
	    }
	  
	}
	
	//	printf("Block %d now has %d neighbors \n",getGUID(),getNeighborCount());
}
     892:	cf 91       	pop	r28
     894:	08 95       	ret

00000896 <restartScan>:
    return 1;
}

// sets neighbor to VACANT, and starts a timer/timeout to send handshake initialization messages
void restartScan(PRef i)
{
     896:	1f 93       	push	r17
     898:	cf 93       	push	r28
     89a:	df 93       	push	r29
     89c:	18 2f       	mov	r17, r24
  updateNeighbor(i, VACANT);
     89e:	60 e0       	ldi	r22, 0x00	; 0
     8a0:	70 e0       	ldi	r23, 0x00	; 0
     8a2:	0e 94 31 04 	call	0x862	; 0x862 <updateNeighbor>

  // deregister timer and deregister timeouts if they are already in the lists
  disableTimer(ttNeighbor[i]);
     8a6:	c1 2f       	mov	r28, r17
     8a8:	d0 e0       	ldi	r29, 0x00	; 0
     8aa:	81 e1       	ldi	r24, 0x11	; 17
     8ac:	18 9f       	mul	r17, r24
     8ae:	90 01       	movw	r18, r0
     8b0:	11 24       	eor	r1, r1
     8b2:	f9 01       	movw	r30, r18
     8b4:	eb 59       	subi	r30, 0x9B	; 155
     8b6:	ff 4d       	sbci	r31, 0xDF	; 223
     8b8:	10 8a       	std	Z+16, r1	; 0x10
  if(ttNeighbor[i].t.state != INACTIVE)
     8ba:	82 85       	ldd	r24, Z+10	; 0x0a
     8bc:	88 23       	and	r24, r24
     8be:	29 f0       	breq	.+10     	; 0x8ca <restartScan+0x34>
    {
      deregisterTimeout(&(ttNeighbor[i].t));
     8c0:	c9 01       	movw	r24, r18
     8c2:	89 59       	subi	r24, 0x99	; 153
     8c4:	9f 4d       	sbci	r25, 0xDF	; 223
     8c6:	0e 94 47 09 	call	0x128e	; 0x128e <deregisterTimeout>
    }

  // set up timer to call neighbor scan
  (ttNeighbor[i]).t.arg = i;
     8ca:	81 e1       	ldi	r24, 0x11	; 17
     8cc:	8c 9f       	mul	r24, r28
     8ce:	f0 01       	movw	r30, r0
     8d0:	8d 9f       	mul	r24, r29
     8d2:	f0 0d       	add	r31, r0
     8d4:	11 24       	eor	r1, r1
     8d6:	eb 59       	subi	r30, 0x9B	; 155
     8d8:	ff 4d       	sbci	r31, 0xDF	; 223
     8da:	13 87       	std	Z+11, r17	; 0x0b
  (ttNeighbor[i]).t.callback = (GenericHandler)&neighborScan;
     8dc:	8f e8       	ldi	r24, 0x8F	; 143
     8de:	93 e0       	ldi	r25, 0x03	; 3
     8e0:	80 87       	std	Z+8, r24	; 0x08
     8e2:	91 87       	std	Z+9, r25	; 0x09
  (ttNeighbor[i]).period = NEIGHBOR_SCAN_PERIOD;
     8e4:	82 e3       	ldi	r24, 0x32	; 50
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	a0 e0       	ldi	r26, 0x00	; 0
     8ea:	b0 e0       	ldi	r27, 0x00	; 0
     8ec:	84 87       	std	Z+12, r24	; 0x0c
     8ee:	95 87       	std	Z+13, r25	; 0x0d
     8f0:	a6 87       	std	Z+14, r26	; 0x0e
     8f2:	b7 87       	std	Z+15, r27	; 0x0f
  enableTimer(ttNeighbor[i]);
     8f4:	81 e0       	ldi	r24, 0x01	; 1
     8f6:	80 8b       	std	Z+16, r24	; 0x10
}
     8f8:	df 91       	pop	r29
     8fa:	cf 91       	pop	r28
     8fc:	1f 91       	pop	r17
     8fe:	08 95       	ret

00000900 <handleNeighborMessage>:
  freeChunk(thisChunk);
}

// called for all NEIGHBOR_MSG type reserved system handlers
byte handleNeighborMessage(void)
{
     900:	df 92       	push	r13
     902:	ef 92       	push	r14
     904:	ff 92       	push	r15
     906:	0f 93       	push	r16
     908:	1f 93       	push	r17
     90a:	cf 93       	push	r28
     90c:	df 93       	push	r29
     90e:	00 d0       	rcall	.+0      	; 0x910 <handleNeighborMessage+0x10>
     910:	00 d0       	rcall	.+0      	; 0x912 <handleNeighborMessage+0x12>
     912:	cd b7       	in	r28, 0x3d	; 61
     914:	de b7       	in	r29, 0x3e	; 62
    if( thisChunk == NULL ) 
     916:	e0 91 57 20 	lds	r30, 0x2057
     91a:	f0 91 58 20 	lds	r31, 0x2058
     91e:	30 97       	sbiw	r30, 0x00	; 0
     920:	09 f4       	brne	.+2      	; 0x924 <handleNeighborMessage+0x24>
     922:	00 c1       	rjmp	.+512    	; 0xb24 <handleNeighborMessage+0x224>
    {
      return 0;
    }
  
    switch(thisChunk->data[1])
     924:	91 81       	ldd	r25, Z+1	; 0x01
     926:	92 30       	cpi	r25, 0x02	; 2
     928:	09 f4       	brne	.+2      	; 0x92c <handleNeighborMessage+0x2c>
     92a:	5c c0       	rjmp	.+184    	; 0x9e4 <handleNeighborMessage+0xe4>
     92c:	93 30       	cpi	r25, 0x03	; 3
     92e:	09 f4       	brne	.+2      	; 0x932 <handleNeighborMessage+0x32>
     930:	be c0       	rjmp	.+380    	; 0xaae <handleNeighborMessage+0x1ae>
     932:	91 30       	cpi	r25, 0x01	; 1
     934:	09 f0       	breq	.+2      	; 0x938 <handleNeighborMessage+0x38>
     936:	f8 c0       	rjmp	.+496    	; 0xb28 <handleNeighborMessage+0x228>
    {
      // a neighbor wants to initiate a response with us, craft a response
      case MSG_NEIGHBOR_START:
      {
	    // have we already received an ACK to our own NEIGHBOR_MSG?  If not, respond
	    if((ttNeighbor[faceNum(thisChunk)]).period != NEIGHBOR_HANDSHAKE_TIMEOUT_PERIOD)
     938:	e1 89       	ldd	r30, Z+17	; 0x11
     93a:	e7 70       	andi	r30, 0x07	; 7
     93c:	11 e1       	ldi	r17, 0x11	; 17
     93e:	1e 9f       	mul	r17, r30
     940:	f0 01       	movw	r30, r0
     942:	11 24       	eor	r1, r1
     944:	eb 59       	subi	r30, 0x9B	; 155
     946:	ff 4d       	sbci	r31, 0xDF	; 223
     948:	44 85       	ldd	r20, Z+12	; 0x0c
     94a:	55 85       	ldd	r21, Z+13	; 0x0d
     94c:	66 85       	ldd	r22, Z+14	; 0x0e
     94e:	77 85       	ldd	r23, Z+15	; 0x0f
     950:	44 36       	cpi	r20, 0x64	; 100
     952:	51 05       	cpc	r21, r1
     954:	61 05       	cpc	r22, r1
     956:	71 05       	cpc	r23, r1
     958:	09 f4       	brne	.+2      	; 0x95c <handleNeighborMessage+0x5c>
     95a:	e6 c0       	rjmp	.+460    	; 0xb28 <handleNeighborMessage+0x228>
	    {
	      // build a neighbor handshake packet
	      // of the form:
	      // [handshake header] [my guid] [your guid]
	      byte buf[6];
	      buf[0] = NEIGHBOR_MSG;
     95c:	99 83       	std	Y+1, r25	; 0x01
	      buf[1] = MSG_NEIGHBOR_RESPONSE;
     95e:	82 e0       	ldi	r24, 0x02	; 2
     960:	8a 83       	std	Y+2, r24	; 0x02
	      GUIDIntoChar(getGUID(), &(buf[2]));
     962:	0e 94 74 18 	call	0x30e8	; 0x30e8 <getGUID>
threadvar Timer ttNeighbor[6];

// converts a UID into a passed in character stream.  Assumes 2-byte GUIDs.
void GUIDIntoChar(Uid id, byte * c)
{
    c[0] = (id >> 8) & 0x00FF;
     966:	9b 83       	std	Y+3, r25	; 0x03
    c[1] = (id & 0x00FF); 
     968:	8c 83       	std	Y+4, r24	; 0x04
	      // [handshake header] [my guid] [your guid]
	      byte buf[6];
	      buf[0] = NEIGHBOR_MSG;
	      buf[1] = MSG_NEIGHBOR_RESPONSE;
	      GUIDIntoChar(getGUID(), &(buf[2]));
	      buf[4] = thisChunk->data[2];
     96a:	e0 91 57 20 	lds	r30, 0x2057
     96e:	f0 91 58 20 	lds	r31, 0x2058
     972:	82 81       	ldd	r24, Z+2	; 0x02
     974:	8d 83       	std	Y+5, r24	; 0x05
	      buf[5] = thisChunk->data[3];
     976:	83 81       	ldd	r24, Z+3	; 0x03
     978:	8e 83       	std	Y+6, r24	; 0x06
	
	      // if our neighbor is already vacant, nothing happens.
	      // if this guid == old guid, they got reset somehow, so drop neighbor so user can re-add gracefully
	      // if this guid != old guid, then we got a new block, so drop neighbor so user can re-add gracefully
	      updateNeighbor(faceNum(thisChunk), VACANT);
     97a:	81 89       	ldd	r24, Z+17	; 0x11
     97c:	60 e0       	ldi	r22, 0x00	; 0
     97e:	70 e0       	ldi	r23, 0x00	; 0
     980:	87 70       	andi	r24, 0x07	; 7
     982:	0e 94 31 04 	call	0x862	; 0x862 <updateNeighbor>
	    
	      // stop any imminent timeouts such as neighborscanning
	      disableTimer(ttNeighbor[faceNum(thisChunk)]);
     986:	a0 91 57 20 	lds	r26, 0x2057
     98a:	b0 91 58 20 	lds	r27, 0x2058
     98e:	51 96       	adiw	r26, 0x11	; 17
     990:	ec 91       	ld	r30, X
     992:	51 97       	sbiw	r26, 0x11	; 17
     994:	e7 70       	andi	r30, 0x07	; 7
     996:	1e 9f       	mul	r17, r30
     998:	f0 01       	movw	r30, r0
     99a:	11 24       	eor	r1, r1
     99c:	eb 59       	subi	r30, 0x9B	; 155
     99e:	ff 4d       	sbci	r31, 0xDF	; 223
     9a0:	10 8a       	std	Z+16, r1	; 0x10
	      if(ttNeighbor[faceNum(thisChunk)].t.state != INACTIVE)
     9a2:	51 96       	adiw	r26, 0x11	; 17
     9a4:	8c 91       	ld	r24, X
     9a6:	87 70       	andi	r24, 0x07	; 7
     9a8:	18 9f       	mul	r17, r24
     9aa:	c0 01       	movw	r24, r0
     9ac:	11 24       	eor	r1, r1
     9ae:	fc 01       	movw	r30, r24
     9b0:	eb 59       	subi	r30, 0x9B	; 155
     9b2:	ff 4d       	sbci	r31, 0xDF	; 223
     9b4:	22 85       	ldd	r18, Z+10	; 0x0a
     9b6:	22 23       	and	r18, r18
     9b8:	21 f0       	breq	.+8      	; 0x9c2 <handleNeighborMessage+0xc2>
		{
		  deregisterTimeout(&(ttNeighbor[faceNum(thisChunk)].t));
     9ba:	89 59       	subi	r24, 0x99	; 153
     9bc:	9f 4d       	sbci	r25, 0xDF	; 223
     9be:	0e 94 47 09 	call	0x128e	; 0x128e <deregisterTimeout>
		}

	      // callback will add neighbor or restart scanning, as necessary
	      sendSystemMessage(faceNum(thisChunk), buf, 6, RES_SYS_HANDLER, (GenericHandler)&neighborHandshakeCB);
     9c2:	e0 91 57 20 	lds	r30, 0x2057
     9c6:	f0 91 58 20 	lds	r31, 0x2058
     9ca:	81 89       	ldd	r24, Z+17	; 0x11
     9cc:	00 ea       	ldi	r16, 0xA0	; 160
     9ce:	15 e0       	ldi	r17, 0x05	; 5
     9d0:	20 e0       	ldi	r18, 0x00	; 0
     9d2:	30 e0       	ldi	r19, 0x00	; 0
     9d4:	46 e0       	ldi	r20, 0x06	; 6
     9d6:	be 01       	movw	r22, r28
     9d8:	6f 5f       	subi	r22, 0xFF	; 255
     9da:	7f 4f       	sbci	r23, 0xFF	; 255
     9dc:	87 70       	andi	r24, 0x07	; 7
     9de:	0e 94 e7 07 	call	0xfce	; 0xfce <sendSystemMessage>
     9e2:	a2 c0       	rjmp	.+324    	; 0xb28 <handleNeighborMessage+0x228>
      }
      // got a response to our request for a neighbor handshake
      case MSG_NEIGHBOR_RESPONSE:
      {
	    // are we waiting for a handshake?  well, here it is!
	    if((ttNeighbor[faceNum(thisChunk)]).period == NEIGHBOR_HANDSHAKE_TIMEOUT_PERIOD)
     9e4:	a1 89       	ldd	r26, Z+17	; 0x11
     9e6:	a7 70       	andi	r26, 0x07	; 7
     9e8:	51 e1       	ldi	r21, 0x11	; 17
     9ea:	d5 2e       	mov	r13, r21
     9ec:	da 9e       	mul	r13, r26
     9ee:	d0 01       	movw	r26, r0
     9f0:	11 24       	eor	r1, r1
     9f2:	ab 59       	subi	r26, 0x9B	; 155
     9f4:	bf 4d       	sbci	r27, 0xDF	; 223
     9f6:	1c 96       	adiw	r26, 0x0c	; 12
     9f8:	4d 91       	ld	r20, X+
     9fa:	5d 91       	ld	r21, X+
     9fc:	6d 91       	ld	r22, X+
     9fe:	7c 91       	ld	r23, X
     a00:	1f 97       	sbiw	r26, 0x0f	; 15
     a02:	44 36       	cpi	r20, 0x64	; 100
     a04:	51 05       	cpc	r21, r1
     a06:	61 05       	cpc	r22, r1
     a08:	71 05       	cpc	r23, r1
     a0a:	09 f0       	breq	.+2      	; 0xa0e <handleNeighborMessage+0x10e>
     a0c:	8d c0       	rjmp	.+282    	; 0xb28 <handleNeighborMessage+0x228>
// takes a passed in character array and returns a UID representing the array.  Assumes 2-byte GUIDs.
Uid charToGUID(byte * c)
{
    Uid tmp;

    tmp = (Uid)(c[0]) << 8;
     a0e:	02 81       	ldd	r16, Z+2	; 0x02
    tmp |= c[1];
     a10:	13 81       	ldd	r17, Z+3	; 0x03
// takes a passed in character array and returns a UID representing the array.  Assumes 2-byte GUIDs.
Uid charToGUID(byte * c)
{
    Uid tmp;

    tmp = (Uid)(c[0]) << 8;
     a12:	34 81       	ldd	r19, Z+4	; 0x04
     a14:	20 e0       	ldi	r18, 0x00	; 0
    tmp |= c[1];
     a16:	85 81       	ldd	r24, Z+5	; 0x05
     a18:	79 01       	movw	r14, r18
     a1a:	e8 2a       	or	r14, r24
	        // pull [your guid][my guid] from the handshake packet - reversed from how it was sent
	        neighbor = charToGUID(&(thisChunk->data[2]));
	        me = charToGUID(&(thisChunk->data[4]));
	    
	        // got a sensible response
	        if(me == getGUID())
     a1c:	0e 94 74 18 	call	0x30e8	; 0x30e8 <getGUID>
     a20:	e8 16       	cp	r14, r24
     a22:	f9 06       	cpc	r15, r25
     a24:	09 f0       	breq	.+2      	; 0xa28 <handleNeighborMessage+0x128>
     a26:	80 c0       	rjmp	.+256    	; 0xb28 <handleNeighborMessage+0x228>
	        {
		        // stop any imminent rescans
		        disableTimer(ttNeighbor[faceNum(thisChunk)]);
     a28:	a0 91 57 20 	lds	r26, 0x2057
     a2c:	b0 91 58 20 	lds	r27, 0x2058
     a30:	51 96       	adiw	r26, 0x11	; 17
     a32:	ec 91       	ld	r30, X
     a34:	51 97       	sbiw	r26, 0x11	; 17
     a36:	e7 70       	andi	r30, 0x07	; 7
     a38:	de 9e       	mul	r13, r30
     a3a:	f0 01       	movw	r30, r0
     a3c:	11 24       	eor	r1, r1
     a3e:	eb 59       	subi	r30, 0x9B	; 155
     a40:	ff 4d       	sbci	r31, 0xDF	; 223
     a42:	10 8a       	std	Z+16, r1	; 0x10
			if(ttNeighbor[faceNum(thisChunk)].t.state != INACTIVE)
     a44:	51 96       	adiw	r26, 0x11	; 17
     a46:	8c 91       	ld	r24, X
     a48:	87 70       	andi	r24, 0x07	; 7
     a4a:	d8 9e       	mul	r13, r24
     a4c:	c0 01       	movw	r24, r0
     a4e:	11 24       	eor	r1, r1
     a50:	fc 01       	movw	r30, r24
     a52:	eb 59       	subi	r30, 0x9B	; 155
     a54:	ff 4d       	sbci	r31, 0xDF	; 223
     a56:	22 85       	ldd	r18, Z+10	; 0x0a
     a58:	22 23       	and	r18, r18
     a5a:	21 f0       	breq	.+8      	; 0xa64 <handleNeighborMessage+0x164>
			  {
			    deregisterTimeout(&(ttNeighbor[faceNum(thisChunk)].t));
     a5c:	89 59       	subi	r24, 0x99	; 153
     a5e:	9f 4d       	sbci	r25, 0xDF	; 223
     a60:	0e 94 47 09 	call	0x128e	; 0x128e <deregisterTimeout>
			  }
		
		        // re-add timer, but now for keepalive purposes
		        ttNeighbor[faceNum(thisChunk)].period = NEIGHBOR_KEEPALIVE_PERIOD;
     a64:	20 91 57 20 	lds	r18, 0x2057
     a68:	30 91 58 20 	lds	r19, 0x2058
     a6c:	d9 01       	movw	r26, r18
     a6e:	51 96       	adiw	r26, 0x11	; 17
     a70:	ec 91       	ld	r30, X
     a72:	e7 70       	andi	r30, 0x07	; 7
     a74:	b1 e1       	ldi	r27, 0x11	; 17
     a76:	eb 9f       	mul	r30, r27
     a78:	f0 01       	movw	r30, r0
     a7a:	11 24       	eor	r1, r1
     a7c:	eb 59       	subi	r30, 0x9B	; 155
     a7e:	ff 4d       	sbci	r31, 0xDF	; 223
     a80:	84 ef       	ldi	r24, 0xF4	; 244
     a82:	91 e0       	ldi	r25, 0x01	; 1
     a84:	a0 e0       	ldi	r26, 0x00	; 0
     a86:	b0 e0       	ldi	r27, 0x00	; 0
     a88:	84 87       	std	Z+12, r24	; 0x0c
     a8a:	95 87       	std	Z+13, r25	; 0x0d
     a8c:	a6 87       	std	Z+14, r26	; 0x0e
     a8e:	b7 87       	std	Z+15, r27	; 0x0f
		        ttNeighbor[faceNum(thisChunk)].t.callback = (GenericHandler)&neighborKeepalive;
     a90:	81 e5       	ldi	r24, 0x51	; 81
     a92:	93 e0       	ldi	r25, 0x03	; 3
     a94:	80 87       	std	Z+8, r24	; 0x08
     a96:	91 87       	std	Z+9, r25	; 0x09
        		enableTimer(ttNeighbor[faceNum(thisChunk)]);
     a98:	81 e0       	ldi	r24, 0x01	; 1
     a9a:	80 8b       	std	Z+16, r24	; 0x10
// takes a passed in character array and returns a UID representing the array.  Assumes 2-byte GUIDs.
Uid charToGUID(byte * c)
{
    Uid tmp;

    tmp = (Uid)(c[0]) << 8;
     a9c:	70 2f       	mov	r23, r16
     a9e:	60 e0       	ldi	r22, 0x00	; 0
    tmp |= c[1];
     aa0:	61 2b       	or	r22, r17
		        ttNeighbor[faceNum(thisChunk)].period = NEIGHBOR_KEEPALIVE_PERIOD;
		        ttNeighbor[faceNum(thisChunk)].t.callback = (GenericHandler)&neighborKeepalive;
        		enableTimer(ttNeighbor[faceNum(thisChunk)]);
		
		        // add new neighbor to neighborhood
        		updateNeighbor(faceNum(thisChunk), neighbor);
     aa2:	f9 01       	movw	r30, r18
     aa4:	81 89       	ldd	r24, Z+17	; 0x11
     aa6:	87 70       	andi	r24, 0x07	; 7
     aa8:	0e 94 31 04 	call	0x862	; 0x862 <updateNeighbor>
     aac:	3d c0       	rjmp	.+122    	; 0xb28 <handleNeighborMessage+0x228>
	    break;
      }
      case MSG_NEIGHBOR_KEEPALIVE:
      {
	    // are we currently looking for keepalives?  if yes, here it is!
	    if((ttNeighbor[faceNum(thisChunk)]).period == NEIGHBOR_KEEPALIVE_PERIOD)
     aae:	a1 89       	ldd	r26, Z+17	; 0x11
     ab0:	a7 70       	andi	r26, 0x07	; 7
     ab2:	21 e1       	ldi	r18, 0x11	; 17
     ab4:	a2 9f       	mul	r26, r18
     ab6:	d0 01       	movw	r26, r0
     ab8:	11 24       	eor	r1, r1
     aba:	ab 59       	subi	r26, 0x9B	; 155
     abc:	bf 4d       	sbci	r27, 0xDF	; 223
     abe:	1c 96       	adiw	r26, 0x0c	; 12
     ac0:	8d 91       	ld	r24, X+
     ac2:	9d 91       	ld	r25, X+
     ac4:	0d 90       	ld	r0, X+
     ac6:	bc 91       	ld	r27, X
     ac8:	a0 2d       	mov	r26, r0
     aca:	84 3f       	cpi	r24, 0xF4	; 244
     acc:	91 40       	sbci	r25, 0x01	; 1
     ace:	a1 05       	cpc	r26, r1
     ad0:	b1 05       	cpc	r27, r1
     ad2:	51 f5       	brne	.+84     	; 0xb28 <handleNeighborMessage+0x228>
// takes a passed in character array and returns a UID representing the array.  Assumes 2-byte GUIDs.
Uid charToGUID(byte * c)
{
    Uid tmp;

    tmp = (Uid)(c[0]) << 8;
     ad4:	e2 80       	ldd	r14, Z+2	; 0x02
    tmp |= c[1];
     ad6:	f3 80       	ldd	r15, Z+3	; 0x03
// takes a passed in character array and returns a UID representing the array.  Assumes 2-byte GUIDs.
Uid charToGUID(byte * c)
{
    Uid tmp;

    tmp = (Uid)(c[0]) << 8;
     ad8:	94 81       	ldd	r25, Z+4	; 0x04
     ada:	80 e0       	ldi	r24, 0x00	; 0
    tmp |= c[1];
     adc:	25 81       	ldd	r18, Z+5	; 0x05
     ade:	8c 01       	movw	r16, r24
     ae0:	02 2b       	or	r16, r18

	        neighbor = charToGUID(&(thisChunk->data[2]));
	        me = charToGUID(&(thisChunk->data[4]));

	        // got a bad or unexpected response - clear neighbor and restart scan
	        if(me != getGUID() || neighbor != thisNeighborhood.n[faceNum(thisChunk)])
     ae2:	0e 94 74 18 	call	0x30e8	; 0x30e8 <getGUID>
     ae6:	08 17       	cp	r16, r24
     ae8:	19 07       	cpc	r17, r25
     aea:	99 f4       	brne	.+38     	; 0xb12 <handleNeighborMessage+0x212>
// takes a passed in character array and returns a UID representing the array.  Assumes 2-byte GUIDs.
Uid charToGUID(byte * c)
{
    Uid tmp;

    tmp = (Uid)(c[0]) << 8;
     aec:	9e 2d       	mov	r25, r14
     aee:	80 e0       	ldi	r24, 0x00	; 0
    tmp |= c[1];
     af0:	8f 29       	or	r24, r15

	        neighbor = charToGUID(&(thisChunk->data[2]));
	        me = charToGUID(&(thisChunk->data[4]));

	        // got a bad or unexpected response - clear neighbor and restart scan
	        if(me != getGUID() || neighbor != thisNeighborhood.n[faceNum(thisChunk)])
     af2:	e0 91 57 20 	lds	r30, 0x2057
     af6:	f0 91 58 20 	lds	r31, 0x2058
     afa:	e1 89       	ldd	r30, Z+17	; 0x11
     afc:	e7 70       	andi	r30, 0x07	; 7
     afe:	f0 e0       	ldi	r31, 0x00	; 0
     b00:	ee 0f       	add	r30, r30
     b02:	ff 1f       	adc	r31, r31
     b04:	e7 5a       	subi	r30, 0xA7	; 167
     b06:	ff 4d       	sbci	r31, 0xDF	; 223
     b08:	20 81       	ld	r18, Z
     b0a:	31 81       	ldd	r19, Z+1	; 0x01
     b0c:	82 17       	cp	r24, r18
     b0e:	93 07       	cpc	r25, r19
     b10:	59 f0       	breq	.+22     	; 0xb28 <handleNeighborMessage+0x228>
	        {
		        restartScan(faceNum(thisChunk));
     b12:	e0 91 57 20 	lds	r30, 0x2057
     b16:	f0 91 58 20 	lds	r31, 0x2058
     b1a:	81 89       	ldd	r24, Z+17	; 0x11
     b1c:	87 70       	andi	r24, 0x07	; 7
     b1e:	0e 94 4b 04 	call	0x896	; 0x896 <restartScan>
     b22:	02 c0       	rjmp	.+4      	; 0xb28 <handleNeighborMessage+0x228>
// called for all NEIGHBOR_MSG type reserved system handlers
byte handleNeighborMessage(void)
{
    if( thisChunk == NULL ) 
    {
      return 0;
     b24:	80 e0       	ldi	r24, 0x00	; 0
     b26:	01 c0       	rjmp	.+2      	; 0xb2a <handleNeighborMessage+0x22a>
        break;
      }
      default: 
        break;  
    }
    return 1;
     b28:	81 e0       	ldi	r24, 0x01	; 1
}
     b2a:	26 96       	adiw	r28, 0x06	; 6
     b2c:	cd bf       	out	0x3d, r28	; 61
     b2e:	de bf       	out	0x3e, r29	; 62
     b30:	df 91       	pop	r29
     b32:	cf 91       	pop	r28
     b34:	1f 91       	pop	r17
     b36:	0f 91       	pop	r16
     b38:	ff 90       	pop	r15
     b3a:	ef 90       	pop	r14
     b3c:	df 90       	pop	r13
     b3e:	08 95       	ret

00000b40 <neighborHandshakeCB>:
  sendSystemMessage(thisTimeout->arg, buf, 6, RES_SYS_HANDLER, (GenericHandler)&neighborKeepaliveCB);
}

// callback for neighbor_response packet
void neighborHandshakeCB(void)
{
     b40:	cf 93       	push	r28
     b42:	df 93       	push	r29
    // message was received.  add neighbor to neighborhood and initiate keepalives
    if(chunkResponseType(thisChunk) == MSG_RESP_ACK)
     b44:	e0 91 57 20 	lds	r30, 0x2057
     b48:	f0 91 58 20 	lds	r31, 0x2058
     b4c:	81 89       	ldd	r24, Z+17	; 0x11
     b4e:	98 2f       	mov	r25, r24
     b50:	98 71       	andi	r25, 0x18	; 24
     b52:	98 30       	cpi	r25, 0x08	; 8
     b54:	b9 f5       	brne	.+110    	; 0xbc4 <neighborHandshakeCB+0x84>
// takes a passed in character array and returns a UID representing the array.  Assumes 2-byte GUIDs.
Uid charToGUID(byte * c)
{
    Uid tmp;

    tmp = (Uid)(c[0]) << 8;
     b56:	74 81       	ldd	r23, Z+4	; 0x04
     b58:	60 e0       	ldi	r22, 0x00	; 0
    tmp |= c[1];
     b5a:	95 81       	ldd	r25, Z+5	; 0x05
     b5c:	eb 01       	movw	r28, r22
     b5e:	c9 2b       	or	r28, r25
    {
      // pull neighbor from packet, same position as how we initially sent it
      Uid neighbor = charToGUID(&(thisChunk->data[4]));
      
      // re-add timer for keepalive purposes
      ttNeighbor[faceNum(thisChunk)].period = NEIGHBOR_KEEPALIVE_PERIOD;
     b60:	87 70       	andi	r24, 0x07	; 7
     b62:	21 e1       	ldi	r18, 0x11	; 17
     b64:	82 9f       	mul	r24, r18
     b66:	c0 01       	movw	r24, r0
     b68:	11 24       	eor	r1, r1
     b6a:	fc 01       	movw	r30, r24
     b6c:	eb 59       	subi	r30, 0x9B	; 155
     b6e:	ff 4d       	sbci	r31, 0xDF	; 223
     b70:	44 ef       	ldi	r20, 0xF4	; 244
     b72:	51 e0       	ldi	r21, 0x01	; 1
     b74:	60 e0       	ldi	r22, 0x00	; 0
     b76:	70 e0       	ldi	r23, 0x00	; 0
     b78:	44 87       	std	Z+12, r20	; 0x0c
     b7a:	55 87       	std	Z+13, r21	; 0x0d
     b7c:	66 87       	std	Z+14, r22	; 0x0e
     b7e:	77 87       	std	Z+15, r23	; 0x0f
      if(ttNeighbor[faceNum(thisChunk)].t.state != INACTIVE)
     b80:	22 85       	ldd	r18, Z+10	; 0x0a
     b82:	22 23       	and	r18, r18
     b84:	21 f0       	breq	.+8      	; 0xb8e <neighborHandshakeCB+0x4e>
	{
	  deregisterTimeout(&(ttNeighbor[faceNum(thisChunk)].t));
     b86:	89 59       	subi	r24, 0x99	; 153
     b88:	9f 4d       	sbci	r25, 0xDF	; 223
     b8a:	0e 94 47 09 	call	0x128e	; 0x128e <deregisterTimeout>
	}
      ttNeighbor[faceNum(thisChunk)].t.callback = (GenericHandler)&neighborKeepalive;
     b8e:	a0 91 57 20 	lds	r26, 0x2057
     b92:	b0 91 58 20 	lds	r27, 0x2058
     b96:	51 96       	adiw	r26, 0x11	; 17
     b98:	ec 91       	ld	r30, X
     b9a:	51 97       	sbiw	r26, 0x11	; 17
     b9c:	e7 70       	andi	r30, 0x07	; 7
     b9e:	81 e1       	ldi	r24, 0x11	; 17
     ba0:	e8 9f       	mul	r30, r24
     ba2:	f0 01       	movw	r30, r0
     ba4:	11 24       	eor	r1, r1
     ba6:	eb 59       	subi	r30, 0x9B	; 155
     ba8:	ff 4d       	sbci	r31, 0xDF	; 223
     baa:	81 e5       	ldi	r24, 0x51	; 81
     bac:	93 e0       	ldi	r25, 0x03	; 3
     bae:	80 87       	std	Z+8, r24	; 0x08
     bb0:	91 87       	std	Z+9, r25	; 0x09
      enableTimer(ttNeighbor[faceNum(thisChunk)]);
     bb2:	81 e0       	ldi	r24, 0x01	; 1
     bb4:	80 8b       	std	Z+16, r24	; 0x10
      
      // add new neighbor to neighborhood
      updateNeighbor(faceNum(thisChunk), neighbor);
     bb6:	51 96       	adiw	r26, 0x11	; 17
     bb8:	8c 91       	ld	r24, X
     bba:	be 01       	movw	r22, r28
     bbc:	87 70       	andi	r24, 0x07	; 7
     bbe:	0e 94 31 04 	call	0x862	; 0x862 <updateNeighbor>
     bc2:	03 c0       	rjmp	.+6      	; 0xbca <neighborHandshakeCB+0x8a>

    }
    else // no neighbor ACK!  begin rescanning
    {
      restartScan(faceNum(thisChunk));
     bc4:	87 70       	andi	r24, 0x07	; 7
     bc6:	0e 94 4b 04 	call	0x896	; 0x896 <restartScan>
    }
  
  freeChunk(thisChunk);
     bca:	80 91 57 20 	lds	r24, 0x2057
     bce:	90 91 58 20 	lds	r25, 0x2058
}
     bd2:	df 91       	pop	r29
     bd4:	cf 91       	pop	r28
    else // no neighbor ACK!  begin rescanning
    {
      restartScan(faceNum(thisChunk));
    }
  
  freeChunk(thisChunk);
     bd6:	0c 94 72 07 	jmp	0xee4	; 0xee4 <freeChunk>

00000bda <neighborKeepaliveCB>:
void neighborKeepaliveCB(void)
{
    // message was received.  re-enable timer and continue as normal
    // note that since we always ACK a received message, this will happen even if the other block 
    // does not understand why the keepalive was sent.  however, the other block will restart a handshake.
    if(chunkResponseType(thisChunk) == MSG_RESP_ACK)
     bda:	e0 91 57 20 	lds	r30, 0x2057
     bde:	f0 91 58 20 	lds	r31, 0x2058
     be2:	81 89       	ldd	r24, Z+17	; 0x11
     be4:	98 2f       	mov	r25, r24
     be6:	98 71       	andi	r25, 0x18	; 24
     be8:	87 70       	andi	r24, 0x07	; 7
     bea:	98 30       	cpi	r25, 0x08	; 8
     bec:	49 f4       	brne	.+18     	; 0xc00 <neighborKeepaliveCB+0x26>
    {
        enableTimer(ttNeighbor[faceNum(thisChunk)]);
     bee:	91 e1       	ldi	r25, 0x11	; 17
     bf0:	89 9f       	mul	r24, r25
     bf2:	f0 01       	movw	r30, r0
     bf4:	11 24       	eor	r1, r1
     bf6:	eb 59       	subi	r30, 0x9B	; 155
     bf8:	ff 4d       	sbci	r31, 0xDF	; 223
     bfa:	81 e0       	ldi	r24, 0x01	; 1
     bfc:	80 8b       	std	Z+16, r24	; 0x10
     bfe:	02 c0       	rjmp	.+4      	; 0xc04 <neighborKeepaliveCB+0x2a>
    }
    else // neighbor lost!  begin rescanning
    {
        restartScan(faceNum(thisChunk));
     c00:	0e 94 4b 04 	call	0x896	; 0x896 <restartScan>
    }

    freeChunk(thisChunk);
     c04:	80 91 57 20 	lds	r24, 0x2057
     c08:	90 91 58 20 	lds	r25, 0x2058
     c0c:	0c 94 72 07 	jmp	0xee4	; 0xee4 <freeChunk>

00000c10 <initEnsemble>:
  (ttNeighbor[i]).period = NEIGHBOR_SCAN_PERIOD;
  enableTimer(ttNeighbor[i]);
}

void initEnsemble(void)
{
     c10:	ff 92       	push	r15
     c12:	0f 93       	push	r16
     c14:	1f 93       	push	r17
     c16:	cf 93       	push	r28
     c18:	df 93       	push	r29
     c1a:	05 e7       	ldi	r16, 0x75	; 117
     c1c:	10 e2       	ldi	r17, 0x20	; 32
    int i;
  
    // restart scanning for neighbors on all ports
    for( i=0; i<NUM_PORTS; ++i)
     c1e:	c0 e0       	ldi	r28, 0x00	; 0
     c20:	d0 e0       	ldi	r29, 0x00	; 0
        if(i == DEBUGPORT) {
            continue;
        }
        #endif

	registerTimer(&(ttNeighbor[i]));
     c22:	61 e1       	ldi	r22, 0x11	; 17
     c24:	f6 2e       	mov	r15, r22
     c26:	fc 9e       	mul	r15, r28
     c28:	c0 01       	movw	r24, r0
     c2a:	fd 9e       	mul	r15, r29
     c2c:	90 0d       	add	r25, r0
     c2e:	11 24       	eor	r1, r1
     c30:	8b 59       	subi	r24, 0x9B	; 155
     c32:	9f 4d       	sbci	r25, 0xDF	; 223
     c34:	0e 94 c8 09 	call	0x1390	; 0x1390 <registerTimer>
	disableTimer(ttNeighbor[i]);
     c38:	f8 01       	movw	r30, r16
     c3a:	10 82       	st	Z, r1
        restartScan(i);
     c3c:	8c 2f       	mov	r24, r28
     c3e:	0e 94 4b 04 	call	0x896	; 0x896 <restartScan>
void initEnsemble(void)
{
    int i;
  
    // restart scanning for neighbors on all ports
    for( i=0; i<NUM_PORTS; ++i)
     c42:	21 96       	adiw	r28, 0x01	; 1
     c44:	0f 5e       	subi	r16, 0xEF	; 239
     c46:	1f 4f       	sbci	r17, 0xFF	; 255
     c48:	c6 30       	cpi	r28, 0x06	; 6
     c4a:	d1 05       	cpc	r29, r1
     c4c:	61 f7       	brne	.-40     	; 0xc26 <initEnsemble+0x16>

	registerTimer(&(ttNeighbor[i]));
	disableTimer(ttNeighbor[i]);
        restartScan(i);
    }
}
     c4e:	df 91       	pop	r29
     c50:	cf 91       	pop	r28
     c52:	1f 91       	pop	r17
     c54:	0f 91       	pop	r16
     c56:	ff 90       	pop	r15
     c58:	08 95       	ret

00000c5a <initHandlers>:
threadvar SystemHandler system;


void initHandlers(void){
  int i;
  system.HandlerMask=0;
     c5a:	10 92 cb 20 	sts	0x20CB, r1
     c5e:	10 92 cc 20 	sts	0x20CC, r1
     c62:	10 92 cd 20 	sts	0x20CD, r1
     c66:	10 92 ce 20 	sts	0x20CE, r1
     c6a:	10 92 cf 20 	sts	0x20CF, r1
     c6e:	10 92 d0 20 	sts	0x20D0, r1
     c72:	10 92 d1 20 	sts	0x20D1, r1
     c76:	10 92 d2 20 	sts	0x20D2, r1
     c7a:	e3 ed       	ldi	r30, 0xD3	; 211
     c7c:	f0 e2       	ldi	r31, 0x20	; 32
  for( i=0; i<NUM_HANDLERS; i++){
    system.HandlerTable[i]=NULL;
     c7e:	11 92       	st	Z+, r1
     c80:	11 92       	st	Z+, r1


void initHandlers(void){
  int i;
  system.HandlerMask=0;
  for( i=0; i<NUM_HANDLERS; i++){
     c82:	81 e2       	ldi	r24, 0x21	; 33
     c84:	e3 31       	cpi	r30, 0x13	; 19
     c86:	f8 07       	cpc	r31, r24
     c88:	d1 f7       	brne	.-12     	; 0xc7e <initHandlers+0x24>
    system.HandlerTable[i]=NULL;
  }
}
     c8a:	08 95       	ret

00000c8c <executeHandlers>:
//
//  if any mask is set, will scan through and execute handlers in ascending numerical order.
//  it is technically possible to trigger handlers during earlier handlers, or even the same handler repeatedly.
//  triggering an earlier handler will cause it to execute during the next iteration.
void executeHandlers(void)
{
     c8c:	8f 92       	push	r8
     c8e:	9f 92       	push	r9
     c90:	af 92       	push	r10
     c92:	bf 92       	push	r11
     c94:	cf 92       	push	r12
     c96:	df 92       	push	r13
     c98:	ef 92       	push	r14
     c9a:	ff 92       	push	r15
     c9c:	0f 93       	push	r16
     c9e:	1f 93       	push	r17
     ca0:	cf 93       	push	r28
     ca2:	df 93       	push	r29
	if(system.HandlerMask)
     ca4:	20 91 cb 20 	lds	r18, 0x20CB
     ca8:	30 91 cc 20 	lds	r19, 0x20CC
     cac:	40 91 cd 20 	lds	r20, 0x20CD
     cb0:	50 91 ce 20 	lds	r21, 0x20CE
     cb4:	60 91 cf 20 	lds	r22, 0x20CF
     cb8:	70 91 d0 20 	lds	r23, 0x20D0
     cbc:	80 91 d1 20 	lds	r24, 0x20D1
     cc0:	90 91 d2 20 	lds	r25, 0x20D2
     cc4:	a0 e0       	ldi	r26, 0x00	; 0
     cc6:	0e 94 06 21 	call	0x420c	; 0x420c <__cmpdi2_s8>
     cca:	09 f4       	brne	.+2      	; 0xcce <executeHandlers+0x42>
     ccc:	49 c0       	rjmp	.+146    	; 0xd60 <executeHandlers+0xd4>
     cce:	03 ed       	ldi	r16, 0xD3	; 211
     cd0:	10 e2       	ldi	r17, 0x20	; 32
//  ExecuteHandlers
//
//  if any mask is set, will scan through and execute handlers in ascending numerical order.
//  it is technically possible to trigger handlers during earlier handlers, or even the same handler repeatedly.
//  triggering an earlier handler will cause it to execute during the next iteration.
void executeHandlers(void)
     cd2:	c1 2c       	mov	r12, r1
     cd4:	d1 2c       	mov	r13, r1
     cd6:	76 01       	movw	r14, r12
     cd8:	c3 94       	inc	r12
		Event i = 0;
		uint32_t j = 0x00000001;
	
		while(i < NUM_HANDLERS)
		{
			if(system.HandlerMask & j)
     cda:	80 90 cb 20 	lds	r8, 0x20CB
     cde:	90 90 cc 20 	lds	r9, 0x20CC
     ce2:	a0 90 cd 20 	lds	r10, 0x20CD
     ce6:	b0 90 ce 20 	lds	r11, 0x20CE
     cea:	d7 01       	movw	r26, r14
     cec:	c6 01       	movw	r24, r12
     cee:	2c 2d       	mov	r18, r12
     cf0:	28 21       	and	r18, r8
     cf2:	39 2f       	mov	r19, r25
     cf4:	39 21       	and	r19, r9
     cf6:	4a 2f       	mov	r20, r26
     cf8:	4a 21       	and	r20, r10
     cfa:	5b 2f       	mov	r21, r27
     cfc:	5b 21       	and	r21, r11
     cfe:	60 e0       	ldi	r22, 0x00	; 0
     d00:	70 e0       	ldi	r23, 0x00	; 0
     d02:	80 e0       	ldi	r24, 0x00	; 0
     d04:	90 e0       	ldi	r25, 0x00	; 0
     d06:	a0 e0       	ldi	r26, 0x00	; 0
     d08:	0e 94 06 21 	call	0x420c	; 0x420c <__cmpdi2_s8>
     d0c:	f1 f0       	breq	.+60     	; 0xd4a <executeHandlers+0xbe>
			{
				// clear mask bit1
				system.HandlerMask &= ~j;
     d0e:	d7 01       	movw	r26, r14
     d10:	c6 01       	movw	r24, r12
     d12:	80 95       	com	r24
     d14:	90 95       	com	r25
     d16:	a0 95       	com	r26
     d18:	b0 95       	com	r27
     d1a:	88 22       	and	r8, r24
     d1c:	99 22       	and	r9, r25
     d1e:	aa 22       	and	r10, r26
     d20:	bb 22       	and	r11, r27
     d22:	80 92 cb 20 	sts	0x20CB, r8
     d26:	90 92 cc 20 	sts	0x20CC, r9
     d2a:	a0 92 cd 20 	sts	0x20CD, r10
     d2e:	b0 92 ce 20 	sts	0x20CE, r11
     d32:	10 92 cf 20 	sts	0x20CF, r1
     d36:	10 92 d0 20 	sts	0x20D0, r1
     d3a:	10 92 d1 20 	sts	0x20D1, r1
     d3e:	10 92 d2 20 	sts	0x20D2, r1
				
				// execute callback
				(*(system.HandlerTable[i]))();
     d42:	d8 01       	movw	r26, r16
     d44:	ed 91       	ld	r30, X+
     d46:	fc 91       	ld	r31, X
     d48:	19 95       	eicall
			}

			i++;
			j <<= 1;
     d4a:	cc 0c       	add	r12, r12
     d4c:	dd 1c       	adc	r13, r13
     d4e:	ee 1c       	adc	r14, r14
     d50:	ff 1c       	adc	r15, r15
     d52:	0e 5f       	subi	r16, 0xFE	; 254
     d54:	1f 4f       	sbci	r17, 0xFF	; 255
	if(system.HandlerMask)
	{
		Event i = 0;
		uint32_t j = 0x00000001;
	
		while(i < NUM_HANDLERS)
     d56:	b1 e2       	ldi	r27, 0x21	; 33
     d58:	03 31       	cpi	r16, 0x13	; 19
     d5a:	1b 07       	cpc	r17, r27
     d5c:	09 f0       	breq	.+2      	; 0xd60 <executeHandlers+0xd4>
     d5e:	bd cf       	rjmp	.-134    	; 0xcda <executeHandlers+0x4e>

			i++;
			j <<= 1;
		}
	}
}
     d60:	df 91       	pop	r29
     d62:	cf 91       	pop	r28
     d64:	1f 91       	pop	r17
     d66:	0f 91       	pop	r16
     d68:	ff 90       	pop	r15
     d6a:	ef 90       	pop	r14
     d6c:	df 90       	pop	r13
     d6e:	cf 90       	pop	r12
     d70:	bf 90       	pop	r11
     d72:	af 90       	pop	r10
     d74:	9f 90       	pop	r9
     d76:	8f 90       	pop	r8
     d78:	08 95       	ret

00000d7a <triggerHandler>:
//TriggerHandler
//	will trigger a callback for a valid event and valid handler
//  execution will occur during the CURRENT or NEXT handler scan
// 	returns 1 on success, 0 on failure
int triggerHandler(Event e)
{
     d7a:	cf 93       	push	r28
     d7c:	df 93       	push	r29
     d7e:	48 2f       	mov	r20, r24
	if(e < NUM_HANDLERS)
     d80:	80 32       	cpi	r24, 0x20	; 32
     d82:	60 f5       	brcc	.+88     	; 0xddc <triggerHandler+0x62>
	{
		if(system.HandlerTable[e] == NULL)
     d84:	e8 2f       	mov	r30, r24
     d86:	f0 e0       	ldi	r31, 0x00	; 0
     d88:	ee 0f       	add	r30, r30
     d8a:	ff 1f       	adc	r31, r31
     d8c:	ed 52       	subi	r30, 0x2D	; 45
     d8e:	ff 4d       	sbci	r31, 0xDF	; 223
     d90:	20 81       	ld	r18, Z
     d92:	31 81       	ldd	r19, Z+1	; 0x01
     d94:	23 2b       	or	r18, r19
     d96:	11 f1       	breq	.+68     	; 0xddc <triggerHandler+0x62>
		{
			return 0;
		}
		
		system.HandlerMask |= (uint32_t)1 << e;
     d98:	81 e0       	ldi	r24, 0x01	; 1
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	a0 e0       	ldi	r26, 0x00	; 0
     d9e:	b0 e0       	ldi	r27, 0x00	; 0
     da0:	04 c0       	rjmp	.+8      	; 0xdaa <triggerHandler+0x30>
     da2:	88 0f       	add	r24, r24
     da4:	99 1f       	adc	r25, r25
     da6:	aa 1f       	adc	r26, r26
     da8:	bb 1f       	adc	r27, r27
     daa:	4a 95       	dec	r20
     dac:	d2 f7       	brpl	.-12     	; 0xda2 <triggerHandler+0x28>
     dae:	50 91 cb 20 	lds	r21, 0x20CB
     db2:	58 2b       	or	r21, r24
     db4:	40 91 cc 20 	lds	r20, 0x20CC
     db8:	49 2b       	or	r20, r25
     dba:	30 91 cd 20 	lds	r19, 0x20CD
     dbe:	3a 2b       	or	r19, r26
     dc0:	20 91 ce 20 	lds	r18, 0x20CE
     dc4:	2b 2b       	or	r18, r27
     dc6:	50 93 cb 20 	sts	0x20CB, r21
     dca:	40 93 cc 20 	sts	0x20CC, r20
     dce:	30 93 cd 20 	sts	0x20CD, r19
     dd2:	20 93 ce 20 	sts	0x20CE, r18
		return 1;
     dd6:	21 e0       	ldi	r18, 0x01	; 1
     dd8:	30 e0       	ldi	r19, 0x00	; 0
     dda:	02 c0       	rjmp	.+4      	; 0xde0 <triggerHandler+0x66>
	}
	
	return 0;	
     ddc:	20 e0       	ldi	r18, 0x00	; 0
     dde:	30 e0       	ldi	r19, 0x00	; 0
}
     de0:	c9 01       	movw	r24, r18
     de2:	df 91       	pop	r29
     de4:	cf 91       	pop	r28
     de6:	08 95       	ret

00000de8 <registerHandler>:
// will register a callback for a valid event with currently NULL callback.
// must unregister a valid handler before re-registering.
// returns 1 on success, 0 on failure.
int registerHandler(Event e, GenericHandler callback)
{
	if(e < NUM_HANDLERS)
     de8:	80 32       	cpi	r24, 0x20	; 32
     dea:	78 f4       	brcc	.+30     	; 0xe0a <registerHandler+0x22>
	{
		if(system.HandlerTable[e] == NULL)
     dec:	e8 2f       	mov	r30, r24
     dee:	f0 e0       	ldi	r31, 0x00	; 0
     df0:	ee 0f       	add	r30, r30
     df2:	ff 1f       	adc	r31, r31
     df4:	ed 52       	subi	r30, 0x2D	; 45
     df6:	ff 4d       	sbci	r31, 0xDF	; 223
     df8:	80 81       	ld	r24, Z
     dfa:	91 81       	ldd	r25, Z+1	; 0x01
     dfc:	89 2b       	or	r24, r25
     dfe:	29 f4       	brne	.+10     	; 0xe0a <registerHandler+0x22>
		{
			system.HandlerTable[e] = callback;
     e00:	60 83       	st	Z, r22
     e02:	71 83       	std	Z+1, r23	; 0x01
			return 1;
     e04:	21 e0       	ldi	r18, 0x01	; 1
     e06:	30 e0       	ldi	r19, 0x00	; 0
     e08:	02 c0       	rjmp	.+4      	; 0xe0e <registerHandler+0x26>
		}
		
		return 0;
	}
	
	return 0;
     e0a:	20 e0       	ldi	r18, 0x00	; 0
     e0c:	30 e0       	ldi	r19, 0x00	; 0
}
     e0e:	c9 01       	movw	r24, r18
     e10:	08 95       	ret

00000e12 <unregisterHandler>:
// will unregister a valid callback for a valid event, setting it to NULL.
// must unregister a valid handler before re-registering.
// returns 1 on success, 0 on failure.
int unregisterHandler(Event e)
{
	if(e < NUM_HANDLERS)
     e12:	80 32       	cpi	r24, 0x20	; 32
     e14:	78 f4       	brcc	.+30     	; 0xe34 <unregisterHandler+0x22>
	{
		if(system.HandlerTable[e] == NULL)
     e16:	e8 2f       	mov	r30, r24
     e18:	f0 e0       	ldi	r31, 0x00	; 0
     e1a:	ee 0f       	add	r30, r30
     e1c:	ff 1f       	adc	r31, r31
     e1e:	ed 52       	subi	r30, 0x2D	; 45
     e20:	ff 4d       	sbci	r31, 0xDF	; 223
     e22:	80 81       	ld	r24, Z
     e24:	91 81       	ldd	r25, Z+1	; 0x01
     e26:	89 2b       	or	r24, r25
     e28:	29 f0       	breq	.+10     	; 0xe34 <unregisterHandler+0x22>
		{
			return 0;
		}
		
		system.HandlerTable[e] = NULL;
     e2a:	10 82       	st	Z, r1
     e2c:	11 82       	std	Z+1, r1	; 0x01
		return 1;
     e2e:	21 e0       	ldi	r18, 0x01	; 1
     e30:	30 e0       	ldi	r19, 0x00	; 0
     e32:	02 c0       	rjmp	.+4      	; 0xe38 <unregisterHandler+0x26>
	}
	
	return 0;
     e34:	20 e0       	ldi	r18, 0x00	; 0
     e36:	30 e0       	ldi	r19, 0x00	; 0
}
     e38:	c9 01       	movw	r24, r18
     e3a:	08 95       	ret

00000e3c <callHandler>:

void callHandler(Event e)
{
	if(e < NUM_HANDLERS)
     e3c:	80 32       	cpi	r24, 0x20	; 32
     e3e:	60 f4       	brcc	.+24     	; 0xe58 <callHandler+0x1c>
	{
		if(system.HandlerTable[e] != NULL)
     e40:	e8 2f       	mov	r30, r24
     e42:	f0 e0       	ldi	r31, 0x00	; 0
     e44:	ee 0f       	add	r30, r30
     e46:	ff 1f       	adc	r31, r31
     e48:	ed 52       	subi	r30, 0x2D	; 45
     e4a:	ff 4d       	sbci	r31, 0xDF	; 223
     e4c:	01 90       	ld	r0, Z+
     e4e:	f0 81       	ld	r31, Z
     e50:	e0 2d       	mov	r30, r0
     e52:	30 97       	sbiw	r30, 0x00	; 0
     e54:	09 f0       	breq	.+2      	; 0xe58 <callHandler+0x1c>
		{
			(system.HandlerTable[e])();
     e56:	19 94       	eijmp
     e58:	08 95       	ret

00000e5a <getColor>:
threadvar Intensity 	currentIntensity = INTENSITY_MAX;

Color getColor()
{
	return currentColor;
}
     e5a:	80 91 16 21 	lds	r24, 0x2116
     e5e:	08 95       	ret

00000e60 <getNextColor>:

Color getNextColor()
{
	Color tmp = currentColor;
     e60:	80 91 16 21 	lds	r24, 0x2116
	
	tmp++;
     e64:	8f 5f       	subi	r24, 0xFF	; 255
	
	if(tmp >= NUM_COLORS)
     e66:	89 30       	cpi	r24, 0x09	; 9
     e68:	08 f0       	brcs	.+2      	; 0xe6c <getNextColor+0xc>
	{
		tmp = 0;
     e6a:	80 e0       	ldi	r24, 0x00	; 0
	}

	return tmp;
}
     e6c:	08 95       	ret

00000e6e <setColor>:

void setColor(Color c)
{
	currentColor = c;
     e6e:	80 93 16 21 	sts	0x2116, r24

	setLED(colors[c][0], colors[c][1], colors[c][2], currentIntensity);
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	fc 01       	movw	r30, r24
     e76:	ee 0f       	add	r30, r30
     e78:	ff 1f       	adc	r31, r31
     e7a:	e8 0f       	add	r30, r24
     e7c:	f9 1f       	adc	r31, r25
     e7e:	ef 5f       	subi	r30, 0xFF	; 255
     e80:	ff 4d       	sbci	r31, 0xDF	; 223
	return currentColor;
}

void setLED(byte r, byte g, byte b, Intensity i)
{
	setHWLED(r,g,b,i);
     e82:	20 91 00 20 	lds	r18, 0x2000
     e86:	42 81       	ldd	r20, Z+2	; 0x02
     e88:	61 81       	ldd	r22, Z+1	; 0x01
     e8a:	80 81       	ld	r24, Z
     e8c:	0c 94 c0 17 	jmp	0x2f80	; 0x2f80 <setHWLED>

00000e90 <setNextColor>:
	setLED(colors[c][0], colors[c][1], colors[c][2], currentIntensity);
}

Color setNextColor()
{
	Color tmp = getNextColor();
     e90:	0e 94 30 07 	call	0xe60	; 0xe60 <getNextColor>

	setColor(tmp);
     e94:	0e 94 37 07 	call	0xe6e	; 0xe6e <setColor>
	
	return currentColor;
}
     e98:	80 91 16 21 	lds	r24, 0x2116
     e9c:	08 95       	ret

00000e9e <setLED>:

void setLED(byte r, byte g, byte b, Intensity i)
{
	setHWLED(r,g,b,i);
     e9e:	0c 94 c0 17 	jmp	0x2f80	; 0x2f80 <setHWLED>

00000ea2 <setIntensity>:
}

void setIntensity(Intensity i)
{
	currentIntensity = i;
     ea2:	80 93 00 20 	sts	0x2000, r24
	return currentColor;
}

void setLED(byte r, byte g, byte b, Intensity i)
{
	setHWLED(r,g,b,i);
     ea6:	28 2f       	mov	r18, r24
     ea8:	40 91 15 21 	lds	r20, 0x2115
     eac:	60 91 14 21 	lds	r22, 0x2114
     eb0:	80 91 13 21 	lds	r24, 0x2113
     eb4:	0c 94 c0 17 	jmp	0x2f80	; 0x2f80 <setHWLED>

00000eb8 <getIntensity>:
}

Intensity getIntensity()
{
	return currentIntensity;
}
     eb8:	80 91 00 20 	lds	r24, 0x2000
     ebc:	08 95       	ret

00000ebe <initLED>:

void initLED()
{
	initHWLED();
     ebe:	0c 94 e8 17 	jmp	0x2fd0	; 0x2fd0 <initHWLED>

00000ec2 <initializeMemory>:
threadvar blockConf conf;

//////////////////// PUBLIC FUNCTIONS /////////////////////
// set-up memory
void initializeMemory(void)
{
     ec2:	ec e4       	ldi	r30, 0x4C	; 76
     ec4:	f2 e2       	ldi	r31, 0x22	; 34
    uint8_t i;

    // clear all status bits for receive chunks
    for( i=0; i<NUM_RXCHUNKS; i++ )
    {
        rxChunks[i].status = CHUNK_FREE;
     ec6:	10 82       	st	Z, r1
     ec8:	78 96       	adiw	r30, 0x18	; 24
void initializeMemory(void)
{
    uint8_t i;

    // clear all status bits for receive chunks
    for( i=0; i<NUM_RXCHUNKS; i++ )
     eca:	83 e2       	ldi	r24, 0x23	; 35
     ecc:	ec 36       	cpi	r30, 0x6C	; 108
     ece:	f8 07       	cpc	r31, r24
     ed0:	d1 f7       	brne	.-12     	; 0xec6 <initializeMemory+0x4>
     ed2:	ec e2       	ldi	r30, 0x2C	; 44
     ed4:	f1 e2       	ldi	r31, 0x21	; 33
    }
    
    // clear all status bits for receive chunks
    for( i=0; i<NUM_TXCHUNKS; i++ )
    {
        txChunks[i].status = CHUNK_FREE;
     ed6:	10 82       	st	Z, r1
     ed8:	78 96       	adiw	r30, 0x18	; 24
    {
        rxChunks[i].status = CHUNK_FREE;
    }
    
    // clear all status bits for receive chunks
    for( i=0; i<NUM_TXCHUNKS; i++ )
     eda:	82 e2       	ldi	r24, 0x22	; 34
     edc:	ec 34       	cpi	r30, 0x4C	; 76
     ede:	f8 07       	cpc	r31, r24
     ee0:	d1 f7       	brne	.-12     	; 0xed6 <initializeMemory+0x14>
    }

    // load config data
    //TODO: re-enable
    //restore(&conf, &nv_conf, sizeof(blockConf));
}
     ee2:	08 95       	ret

00000ee4 <freeChunk>:

// this loops through and frees all connected Chunks in the list.
void freeChunk(Chunk * c)
{
     ee4:	fc 01       	movw	r30, r24
  Chunk * tmp;	

  while(c != NULL)
     ee6:	09 c0       	rjmp	.+18     	; 0xefa <freeChunk+0x16>
    {
      if(chunkInUse(c))
     ee8:	81 89       	ldd	r24, Z+17	; 0x11
     eea:	87 fd       	sbrc	r24, 7
        {
	  c->status = CHUNK_FREE;
     eec:	11 8a       	std	Z+17, r1	; 0x11
        }
      tmp = c->next;
     eee:	92 89       	ldd	r25, Z+18	; 0x12
     ef0:	83 89       	ldd	r24, Z+19	; 0x13
      c->next = NULL;
     ef2:	12 8a       	std	Z+18, r1	; 0x12
     ef4:	13 8a       	std	Z+19, r1	; 0x13
      c = tmp;
     ef6:	e9 2f       	mov	r30, r25
     ef8:	f8 2f       	mov	r31, r24
// this loops through and frees all connected Chunks in the list.
void freeChunk(Chunk * c)
{
  Chunk * tmp;	

  while(c != NULL)
     efa:	30 97       	sbiw	r30, 0x00	; 0
     efc:	a9 f7       	brne	.-22     	; 0xee8 <freeChunk+0x4>
        }
      tmp = c->next;
      c->next = NULL;
      c = tmp;
    }
}
     efe:	08 95       	ret

00000f00 <getSystemChunk>:
Chunk* getSystemChunk(byte which)
{
    int8_t i;
    Chunk*  current;

    if(which == RXCHUNK)
     f00:	81 11       	cpse	r24, r1
     f02:	03 c0       	rjmp	.+6      	; 0xf0a <getSystemChunk+0xa>
      {
	current = rxChunks;
     f04:	8b e3       	ldi	r24, 0x3B	; 59
     f06:	92 e2       	ldi	r25, 0x22	; 34
     f08:	02 c0       	rjmp	.+4      	; 0xf0e <getSystemChunk+0xe>

	i = NUM_RXCHUNKS-1;
      }
    else
      {
	current = txChunks;
     f0a:	8b e1       	ldi	r24, 0x1B	; 27
     f0c:	91 e2       	ldi	r25, 0x21	; 33
    int8_t i;
    Chunk*  current;

    if(which == RXCHUNK)
      {
	current = rxChunks;
     f0e:	2c e0       	ldi	r18, 0x0C	; 12
      c->next = NULL;
      c = tmp;
    }
}

Chunk* getSystemChunk(byte which)
     f10:	fc 01       	movw	r30, r24
     f12:	e8 5f       	subi	r30, 0xF8	; 248
     f14:	fe 4f       	sbci	r31, 0xFE	; 254
     f16:	dc 01       	movw	r26, r24
     f18:	a7 5e       	subi	r26, 0xE7	; 231
     f1a:	be 4f       	sbci	r27, 0xFE	; 254

    // look for unused Chunk
    for(; i>=0; i--)
    {
        // check top bit to indicate usage
      if( !chunkInUse((&(current[i]))) )
     f1c:	3c 91       	ld	r19, X
     f1e:	37 fd       	sbrc	r19, 7
     f20:	05 c0       	rjmp	.+10     	; 0xf2c <getSystemChunk+0x2c>
        {
            // indicate in use
	  (current[i]).status = CHUNK_USED;
     f22:	80 e8       	ldi	r24, 0x80	; 128
     f24:	81 8b       	std	Z+17, r24	; 0x11
          
	  // clear old next ptr in case non-NULL
	  (current[i]).next = NULL;
     f26:	12 8a       	std	Z+18, r1	; 0x12
     f28:	13 8a       	std	Z+19, r1	; 0x13
	  return &(current[i]);
     f2a:	06 c0       	rjmp	.+12     	; 0xf38 <getSystemChunk+0x38>
     f2c:	21 50       	subi	r18, 0x01	; 1
     f2e:	48 97       	sbiw	r24, 0x18	; 24

	i = NUM_TXCHUNKS-1;
      }

    // look for unused Chunk
    for(; i>=0; i--)
     f30:	21 11       	cpse	r18, r1
     f32:	ee cf       	rjmp	.-36     	; 0xf10 <getSystemChunk+0x10>
	  return &(current[i]);
        }
        // else, in use (supposedly)
    }
    // none free!
    return NULL;  
     f34:	e0 e0       	ldi	r30, 0x00	; 0
     f36:	f0 e0       	ldi	r31, 0x00	; 0
}
     f38:	cf 01       	movw	r24, r30
     f3a:	08 95       	ret

00000f3c <getSystemRXChunk>:

// return pointer to free memory Chunk
Chunk* getSystemRXChunk()
{
  return getSystemChunk(RXCHUNK);
     f3c:	80 e0       	ldi	r24, 0x00	; 0
     f3e:	0c 94 80 07 	jmp	0xf00	; 0xf00 <getSystemChunk>

00000f42 <getSystemTXChunk>:
}

Chunk* getSystemTXChunk()
{
  return getSystemChunk(TXCHUNK);
     f42:	81 e0       	ldi	r24, 0x01	; 1
     f44:	0c 94 80 07 	jmp	0xf00	; 0xf00 <getSystemChunk>

00000f48 <sendMessageToUid>:
#include "led.bbh"



byte sendMessageToUid(Chunk* c, Uid dest, byte * msg, byte length, MsgHandler mh, GenericHandler cb)
{
     f48:	ef 92       	push	r14
     f4a:	ff 92       	push	r15
     f4c:	0f 93       	push	r16
     f4e:	1f 93       	push	r17
     f50:	cf 93       	push	r28
     f52:	df 93       	push	r29
     f54:	ec 01       	movw	r28, r24
     f56:	cb 01       	movw	r24, r22
     f58:	e9 e5       	ldi	r30, 0x59	; 89
     f5a:	f0 e2       	ldi	r31, 0x20	; 32
    byte i;

    for(i = 0; i < NUM_PORTS; ++i)
     f5c:	60 e0       	ldi	r22, 0x00	; 0
    {
        if(thisNeighborhood.n[i] == dest)
     f5e:	a1 91       	ld	r26, Z+
     f60:	b1 91       	ld	r27, Z+
     f62:	a8 17       	cp	r26, r24
     f64:	b9 07       	cpc	r27, r25
     f66:	61 f4       	brne	.+24     	; 0xf80 <sendMessageToUid+0x38>
        {
            if(setupChunk(c,i, msg, length, mh, cb) == 0)
     f68:	ce 01       	movw	r24, r28
     f6a:	0e 94 9d 02 	call	0x53a	; 0x53a <setupChunk>
     f6e:	81 11       	cpse	r24, r1
     f70:	02 c0       	rjmp	.+4      	; 0xf76 <sendMessageToUid+0x2e>
            {
                return 0;
     f72:	80 e0       	ldi	r24, 0x00	; 0
     f74:	09 c0       	rjmp	.+18     	; 0xf88 <sendMessageToUid+0x40>
            }
            queueChunk(c);
     f76:	ce 01       	movw	r24, r28
     f78:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <queueChunk>
            return 1;
     f7c:	81 e0       	ldi	r24, 0x01	; 1
     f7e:	04 c0       	rjmp	.+8      	; 0xf88 <sendMessageToUid+0x40>

byte sendMessageToUid(Chunk* c, Uid dest, byte * msg, byte length, MsgHandler mh, GenericHandler cb)
{
    byte i;

    for(i = 0; i < NUM_PORTS; ++i)
     f80:	6f 5f       	subi	r22, 0xFF	; 255
     f82:	66 30       	cpi	r22, 0x06	; 6
     f84:	61 f7       	brne	.-40     	; 0xf5e <sendMessageToUid+0x16>
     f86:	f5 cf       	rjmp	.-22     	; 0xf72 <sendMessageToUid+0x2a>
            return 1;
        }
    }

    return 0;
}
     f88:	df 91       	pop	r29
     f8a:	cf 91       	pop	r28
     f8c:	1f 91       	pop	r17
     f8e:	0f 91       	pop	r16
     f90:	ff 90       	pop	r15
     f92:	ef 90       	pop	r14
     f94:	08 95       	ret

00000f96 <sendMessageToPort>:

byte sendMessageToPort(Chunk* c, PRef dest, byte * msg, byte length, MsgHandler mh, GenericHandler cb)
{
     f96:	ef 92       	push	r14
     f98:	ff 92       	push	r15
     f9a:	0f 93       	push	r16
     f9c:	1f 93       	push	r17
     f9e:	cf 93       	push	r28
     fa0:	df 93       	push	r29
     fa2:	ec 01       	movw	r28, r24
    // NOTE: Can no longer support BROADCAST since requires 6 memory chunks passed in
    if(dest == BROADCAST)
     fa4:	6f 3f       	cpi	r22, 0xFF	; 255
     fa6:	11 f4       	brne	.+4      	; 0xfac <sendMessageToPort+0x16>
    {
        return 0;
     fa8:	80 e0       	ldi	r24, 0x00	; 0
     faa:	0a c0       	rjmp	.+20     	; 0xfc0 <sendMessageToPort+0x2a>
    }
    else
    {
        if(dest < NUM_PORTS)
     fac:	66 30       	cpi	r22, 0x06	; 6
     fae:	e0 f7       	brcc	.-8      	; 0xfa8 <sendMessageToPort+0x12>
        {
            if(setupChunk(c,dest, msg, length, mh, cb) == 0)
     fb0:	0e 94 9d 02 	call	0x53a	; 0x53a <setupChunk>
     fb4:	88 23       	and	r24, r24
     fb6:	c1 f3       	breq	.-16     	; 0xfa8 <sendMessageToPort+0x12>
            {
                return 0;
            }
            queueChunk(c);
     fb8:	ce 01       	movw	r24, r28
     fba:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <queueChunk>
            return 1;
     fbe:	81 e0       	ldi	r24, 0x01	; 1
        }
    }
    
    return 0;
}
     fc0:	df 91       	pop	r29
     fc2:	cf 91       	pop	r28
     fc4:	1f 91       	pop	r17
     fc6:	0f 91       	pop	r16
     fc8:	ff 90       	pop	r15
     fca:	ef 90       	pop	r14
     fcc:	08 95       	ret

00000fce <sendSystemMessage>:

// ----------- SEND SYSTEM MESSAGE to PORT
//
// Probably shouldn't be used by a user, but needed by various sytem routines.
byte sendSystemMessage(PRef dest, byte * msg, byte length, MsgHandler mh, GenericHandler cb)
{
     fce:	6f 92       	push	r6
     fd0:	7f 92       	push	r7
     fd2:	8f 92       	push	r8
     fd4:	9f 92       	push	r9
     fd6:	af 92       	push	r10
     fd8:	bf 92       	push	r11
     fda:	cf 92       	push	r12
     fdc:	df 92       	push	r13
     fde:	ef 92       	push	r14
     fe0:	ff 92       	push	r15
     fe2:	0f 93       	push	r16
     fe4:	1f 93       	push	r17
     fe6:	cf 93       	push	r28
     fe8:	df 93       	push	r29
     fea:	78 2e       	mov	r7, r24
     fec:	6b 01       	movw	r12, r22
     fee:	64 2e       	mov	r6, r20
     ff0:	59 01       	movw	r10, r18
     ff2:	48 01       	movw	r8, r16
    Chunk* c;

    if(dest == BROADCAST)
     ff4:	8f ef       	ldi	r24, 0xFF	; 255
     ff6:	78 12       	cpse	r7, r24
     ff8:	1b c0       	rjmp	.+54     	; 0x1030 <sendSystemMessage+0x62>
     ffa:	71 2c       	mov	r7, r1
        byte i;
        
        for(i = 0; i < NUM_PORTS; ++i)
        {
            // set it to appropriate chunk
            c = getSystemTXChunk();
     ffc:	0e 94 a1 07 	call	0xf42	; 0xf42 <getSystemTXChunk>
    1000:	ec 01       	movw	r28, r24
            
            // in use - can't send
            if( c == NULL ) 
    1002:	00 97       	sbiw	r24, 0x00	; 0
    1004:	81 f0       	breq	.+32     	; 0x1026 <sendSystemMessage+0x58>
            {
                continue;
            }
            
            if(setupChunk(c,i, msg, length, mh, cb) == 0)
    1006:	74 01       	movw	r14, r8
    1008:	85 01       	movw	r16, r10
    100a:	26 2d       	mov	r18, r6
    100c:	a6 01       	movw	r20, r12
    100e:	67 2d       	mov	r22, r7
    1010:	0e 94 9d 02 	call	0x53a	; 0x53a <setupChunk>
    1014:	81 11       	cpse	r24, r1
    1016:	04 c0       	rjmp	.+8      	; 0x1020 <sendSystemMessage+0x52>
            {
                freeChunk(c);
    1018:	ce 01       	movw	r24, r28
    101a:	0e 94 72 07 	call	0xee4	; 0xee4 <freeChunk>
                continue;
    101e:	03 c0       	rjmp	.+6      	; 0x1026 <sendSystemMessage+0x58>
            }
            queueChunk(c);
    1020:	ce 01       	movw	r24, r28
    1022:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <queueChunk>

    if(dest == BROADCAST)
    {
        byte i;
        
        for(i = 0; i < NUM_PORTS; ++i)
    1026:	73 94       	inc	r7
    1028:	86 e0       	ldi	r24, 0x06	; 6
    102a:	78 12       	cpse	r7, r24
    102c:	e7 cf       	rjmp	.-50     	; 0xffc <sendSystemMessage+0x2e>
    102e:	1c c0       	rjmp	.+56     	; 0x1068 <sendSystemMessage+0x9a>
        
        return i;
    }
    else
    {
        if(dest < NUM_PORTS)
    1030:	85 e0       	ldi	r24, 0x05	; 5
    1032:	87 15       	cp	r24, r7
    1034:	08 f4       	brcc	.+2      	; 0x1038 <sendSystemMessage+0x6a>
    1036:	11 c0       	rjmp	.+34     	; 0x105a <sendSystemMessage+0x8c>
        {
            // set it to appropriate chunk
            c = getSystemTXChunk();
    1038:	0e 94 a1 07 	call	0xf42	; 0xf42 <getSystemTXChunk>
    103c:	ec 01       	movw	r28, r24
            
            // in use - can't send
            if( c == NULL ) 
    103e:	00 97       	sbiw	r24, 0x00	; 0
    1040:	61 f0       	breq	.+24     	; 0x105a <sendSystemMessage+0x8c>
            {
                return 0;
            }
            
            if(setupChunk(c,dest, msg, length, mh, cb) == 0)
    1042:	78 01       	movw	r14, r16
    1044:	85 01       	movw	r16, r10
    1046:	26 2d       	mov	r18, r6
    1048:	a6 01       	movw	r20, r12
    104a:	67 2d       	mov	r22, r7
    104c:	0e 94 9d 02 	call	0x53a	; 0x53a <setupChunk>
    1050:	81 11       	cpse	r24, r1
    1052:	05 c0       	rjmp	.+10     	; 0x105e <sendSystemMessage+0x90>
            {
                freeChunk(c);
    1054:	ce 01       	movw	r24, r28
    1056:	0e 94 72 07 	call	0xee4	; 0xee4 <freeChunk>
                return 0;
    105a:	71 2c       	mov	r7, r1
    105c:	05 c0       	rjmp	.+10     	; 0x1068 <sendSystemMessage+0x9a>
            }
            queueChunk(c);
    105e:	ce 01       	movw	r24, r28
    1060:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <queueChunk>
            return 1;
    1064:	77 24       	eor	r7, r7
    1066:	73 94       	inc	r7
        }
    }
    
    return 0;
}
    1068:	87 2d       	mov	r24, r7
    106a:	df 91       	pop	r29
    106c:	cf 91       	pop	r28
    106e:	1f 91       	pop	r17
    1070:	0f 91       	pop	r16
    1072:	ff 90       	pop	r15
    1074:	ef 90       	pop	r14
    1076:	df 90       	pop	r13
    1078:	cf 90       	pop	r12
    107a:	bf 90       	pop	r11
    107c:	af 90       	pop	r10
    107e:	9f 90       	pop	r9
    1080:	8f 90       	pop	r8
    1082:	7f 90       	pop	r7
    1084:	6f 90       	pop	r6
    1086:	08 95       	ret

00001088 <initSystemMessage>:


void initSystemMessage()
{
    1088:	08 95       	ret

0000108a <retrySend>:

#include "queues.bbh"

void retrySend(void)
{
    SendChunkQueue* currSq = ((SQTimeout *)thisTimeout)->sq;
    108a:	e0 91 6c 25 	lds	r30, 0x256C
    108e:	f0 91 6d 25 	lds	r31, 0x256D
    1092:	02 84       	ldd	r0, Z+10	; 0x0a
    1094:	f3 85       	ldd	r31, Z+11	; 0x0b
    1096:	e0 2d       	mov	r30, r0
    
    //Try to resend
    currSq->flags |= CLEAR_TO_SEND;
    1098:	85 85       	ldd	r24, Z+13	; 0x0d
    109a:	80 64       	ori	r24, 0x40	; 64
    109c:	85 87       	std	Z+13, r24	; 0x0d
    109e:	08 95       	ret

000010a0 <initPortQueues>:
#include "../hw-api/hwSerial.h"

threadvar Port port[NUM_PORTS];

void initPortQueues(Port* p)
{
    10a0:	fc 01       	movw	r30, r24
    // reset send queue status
    p->sq.retry         = 0;
    10a2:	15 86       	std	Z+13, r1	; 0x0d
    p->sq.flags         = CLEAR_TO_SEND;
    10a4:	80 e4       	ldi	r24, 0x40	; 64
    10a6:	86 87       	std	Z+14, r24	; 0x0e
	
	// send queue timers
	p->sq.qtout.sq = &(p->sq);
    10a8:	cf 01       	movw	r24, r30
    10aa:	01 96       	adiw	r24, 0x01	; 1
    10ac:	83 87       	std	Z+11, r24	; 0x0b
    10ae:	94 87       	std	Z+12, r25	; 0x0c
	p->sq.qtout.tout.callback = (GenericHandler)&retrySend;
    10b0:	85 e4       	ldi	r24, 0x45	; 69
    10b2:	98 e0       	ldi	r25, 0x08	; 8
    10b4:	87 83       	std	Z+7, r24	; 0x07
    10b6:	90 87       	std	Z+8, r25	; 0x08


	
	// empty the send queue
	//freeChunk(p->sq.head);
    p->sq.head = NULL;
    10b8:	17 86       	std	Z+15, r1	; 0x0f
    10ba:	10 8a       	std	Z+16, r1	; 0x10
    //freeChunk(p->sq.tail);
    p->sq.tail = NULL;
    10bc:	11 8a       	std	Z+17, r1	; 0x11
    10be:	12 8a       	std	Z+18, r1	; 0x12
	
	// reset receive queue status
    p->rq.index         = 0;
    10c0:	13 8a       	std	Z+19, r1	; 0x13
	p->rq.checksum      = 0;
    10c2:	14 8a       	std	Z+20, r1	; 0x14
    p->rq.flags         = NO_CHUNK_READY;
    10c4:	15 8a       	std	Z+21, r1	; 0x15

	// empty receive queues
    //freeReceiveChunk(p->rq.curr);
	p->rq.curr = NULL;
    10c6:	16 8a       	std	Z+22, r1	; 0x16
    10c8:	17 8a       	std	Z+23, r1	; 0x17
    10ca:	08 95       	ret

000010cc <initPorts>:
}

void initPorts()
{
    10cc:	ff 92       	push	r15
    10ce:	0f 93       	push	r16
    10d0:	1f 93       	push	r17
    10d2:	cf 93       	push	r28
    10d4:	df 93       	push	r29
    10d6:	0c e5       	ldi	r16, 0x5C	; 92
    10d8:	13 e2       	ldi	r17, 0x23	; 35
    10da:	c0 e0       	ldi	r28, 0x00	; 0
    10dc:	d0 e0       	ldi	r29, 0x00	; 0
	PRef i;
	for(i = 0; i < NUM_PORTS; i++)
	{
		port[i].pnum  = i;
		initPortQueues(&port[i]);
    10de:	88 e5       	ldi	r24, 0x58	; 88
    10e0:	f8 2e       	mov	r15, r24
void initPorts()
{
	PRef i;
	for(i = 0; i < NUM_PORTS; i++)
	{
		port[i].pnum  = i;
    10e2:	f8 01       	movw	r30, r16
    10e4:	c0 83       	st	Z, r28
		initPortQueues(&port[i]);
    10e6:	fc 9e       	mul	r15, r28
    10e8:	c0 01       	movw	r24, r0
    10ea:	fd 9e       	mul	r15, r29
    10ec:	90 0d       	add	r25, r0
    10ee:	11 24       	eor	r1, r1
    10f0:	84 5a       	subi	r24, 0xA4	; 164
    10f2:	9c 4d       	sbci	r25, 0xDC	; 220
    10f4:	0e 94 50 08 	call	0x10a0	; 0x10a0 <initPortQueues>
    10f8:	21 96       	adiw	r28, 0x01	; 1
    10fa:	08 5a       	subi	r16, 0xA8	; 168
    10fc:	1f 4f       	sbci	r17, 0xFF	; 255
}

void initPorts()
{
	PRef i;
	for(i = 0; i < NUM_PORTS; i++)
    10fe:	c6 30       	cpi	r28, 0x06	; 6
    1100:	d1 05       	cpc	r29, r1
    1102:	79 f7       	brne	.-34     	; 0x10e2 <initPorts+0x16>
	{
		port[i].pnum  = i;
		initPortQueues(&port[i]);
	}
	initHWPorts();
}
    1104:	df 91       	pop	r29
    1106:	cf 91       	pop	r28
    1108:	1f 91       	pop	r17
    110a:	0f 91       	pop	r16
    110c:	ff 90       	pop	r15
	for(i = 0; i < NUM_PORTS; i++)
	{
		port[i].pnum  = i;
		initPortQueues(&port[i]);
	}
	initHWPorts();
    110e:	0c 94 d7 18 	jmp	0x31ae	; 0x31ae <initHWPorts>

00001112 <blockProgram>:
#include "led.bbh"

int blockProgram(void)
{

    initBlock();
    1112:	0e 94 c6 01 	call	0x38c	; 0x38c <initBlock>

    
    // low-level robot initialization routine
    
    // handler registration / load control structure
    userRegistration();
    1116:	0e 94 89 01 	call	0x312	; 0x312 <userRegistration>
    
    // Call user-based system_init function, if registered
    // A good idea to separate from UserRegistration?
    callHandler(SYSTEM_INIT);    
    111a:	80 e0       	ldi	r24, 0x00	; 0
    111c:	0e 94 1e 07 	call	0xe3c	; 0xe3c <callHandler>

        // step through triggered handler functions
	//printf("%d\r\n",count++);
	    
        // Run user system_main function, if registered
	callHandler(SYSTEM_MAIN);
    1120:	81 e0       	ldi	r24, 0x01	; 1
    1122:	fc cf       	rjmp	.-8      	; 0x111c <blockProgram+0xa>

00001124 <delayMS>:
#ifdef BBSIM
extern void yieldTil(Time x);
#endif

void delayMS(int ms) 
{
    1124:	cf 92       	push	r12
    1126:	df 92       	push	r13
    1128:	ef 92       	push	r14
    112a:	ff 92       	push	r15
    112c:	cf 93       	push	r28
    112e:	df 93       	push	r29
    1130:	ec 01       	movw	r28, r24
  }
}

Time getTime()
{
	return getHWTime();
    1132:	0e 94 59 1b 	call	0x36b2	; 0x36b2 <getHWTime>
    1136:	6b 01       	movw	r12, r22
    1138:	7c 01       	movw	r14, r24
extern void yieldTil(Time x);
#endif

void delayMS(int ms) 
{
  Time until = getTime() + ms;
    113a:	ce 01       	movw	r24, r28
    113c:	aa 27       	eor	r26, r26
    113e:	97 fd       	sbrc	r25, 7
    1140:	a0 95       	com	r26
    1142:	ba 2f       	mov	r27, r26
    1144:	c8 0e       	add	r12, r24
    1146:	d9 1e       	adc	r13, r25
    1148:	ea 1e       	adc	r14, r26
    114a:	fb 1e       	adc	r15, r27
  }
}

Time getTime()
{
	return getHWTime();
    114c:	0e 94 59 1b 	call	0x36b2	; 0x36b2 <getHWTime>

void delayMS(int ms) 
{
  Time until = getTime() + ms;
	
  while(getTime() < until) {
    1150:	6c 15       	cp	r22, r12
    1152:	7d 05       	cpc	r23, r13
    1154:	8e 05       	cpc	r24, r14
    1156:	9f 05       	cpc	r25, r15
    1158:	c8 f3       	brcs	.-14     	; 0x114c <delayMS+0x28>
#ifdef BBSIM
    yieldTil(until);
#endif
  }
}
    115a:	df 91       	pop	r29
    115c:	cf 91       	pop	r28
    115e:	ff 90       	pop	r15
    1160:	ef 90       	pop	r14
    1162:	df 90       	pop	r13
    1164:	cf 90       	pop	r12
    1166:	08 95       	ret

00001168 <getTime>:

Time getTime()
{
	return getHWTime();
    1168:	0c 94 59 1b 	jmp	0x36b2	; 0x36b2 <getHWTime>

0000116c <checkTimeout>:
}

void checkTimeout()
{
    116c:	0f 93       	push	r16
    116e:	1f 93       	push	r17
    1170:	cf 93       	push	r28
    1172:	df 93       	push	r29
    1174:	00 d0       	rcall	.+0      	; 0x1176 <checkTimeout+0xa>
    1176:	1f 92       	push	r1
    1178:	cd b7       	in	r28, 0x3d	; 61
    117a:	de b7       	in	r29, 0x3e	; 62
	if(timeoutList != NULL)
    117c:	80 91 70 25 	lds	r24, 0x2570
    1180:	90 91 71 25 	lds	r25, 0x2571
    1184:	89 2b       	or	r24, r25
    1186:	99 f1       	breq	.+102    	; 0x11ee <checkTimeout+0x82>
  }
}

Time getTime()
{
	return getHWTime();
    1188:	0e 94 59 1b 	call	0x36b2	; 0x36b2 <getHWTime>
		Time now = getTime();
		
		do
		{
			// check list, remove timer and call function
			if(now >= timeoutList->calltime)
    118c:	e0 91 70 25 	lds	r30, 0x2570
    1190:	f0 91 71 25 	lds	r31, 0x2571
    1194:	02 81       	ldd	r16, Z+2	; 0x02
    1196:	13 81       	ldd	r17, Z+3	; 0x03
    1198:	24 81       	ldd	r18, Z+4	; 0x04
    119a:	35 81       	ldd	r19, Z+5	; 0x05
    119c:	60 17       	cp	r22, r16
    119e:	71 07       	cpc	r23, r17
    11a0:	82 07       	cpc	r24, r18
    11a2:	93 07       	cpc	r25, r19
    11a4:	20 f1       	brcs	.+72     	; 0x11ee <checkTimeout+0x82>
			{
				// set reference variable, remove timeout from list
				thisTimeout = timeoutList;
    11a6:	e0 93 6c 25 	sts	0x256C, r30
    11aa:	f0 93 6d 25 	sts	0x256D, r31
				timeoutList = timeoutList->next;
    11ae:	20 81       	ld	r18, Z
    11b0:	31 81       	ldd	r19, Z+1	; 0x01
    11b2:	20 93 70 25 	sts	0x2570, r18
    11b6:	30 93 71 25 	sts	0x2571, r19

				// if timeout was not pre-emptively disable, execute callback();
				if(thisTimeout->state != INACTIVE)
    11ba:	20 85       	ldd	r18, Z+8	; 0x08
    11bc:	22 23       	and	r18, r18
    11be:	61 f0       	breq	.+24     	; 0x11d8 <checkTimeout+0x6c>
				  {
				    (thisTimeout->callback)();	
    11c0:	06 80       	ldd	r0, Z+6	; 0x06
    11c2:	f7 81       	ldd	r31, Z+7	; 0x07
    11c4:	e0 2d       	mov	r30, r0
    11c6:	69 83       	std	Y+1, r22	; 0x01
    11c8:	7a 83       	std	Y+2, r23	; 0x02
    11ca:	8b 83       	std	Y+3, r24	; 0x03
    11cc:	9c 83       	std	Y+4, r25	; 0x04
    11ce:	19 95       	eicall
    11d0:	9c 81       	ldd	r25, Y+4	; 0x04
    11d2:	8b 81       	ldd	r24, Y+3	; 0x03
    11d4:	7a 81       	ldd	r23, Y+2	; 0x02
    11d6:	69 81       	ldd	r22, Y+1	; 0x01
				  }

				// disable callback until reactivated/reinserted into list.
				thisTimeout->state = INACTIVE;
    11d8:	e0 91 6c 25 	lds	r30, 0x256C
    11dc:	f0 91 6d 25 	lds	r31, 0x256D
    11e0:	10 86       	std	Z+8, r1	; 0x08
			{
				// stop searching list
				break;
			}
			
		} while (timeoutList != NULL);
    11e2:	20 91 70 25 	lds	r18, 0x2570
    11e6:	30 91 71 25 	lds	r19, 0x2571
    11ea:	23 2b       	or	r18, r19
    11ec:	79 f6       	brne	.-98     	; 0x118c <checkTimeout+0x20>
	}
}
    11ee:	24 96       	adiw	r28, 0x04	; 4
    11f0:	cd bf       	out	0x3d, r28	; 61
    11f2:	de bf       	out	0x3e, r29	; 62
    11f4:	df 91       	pop	r29
    11f6:	cf 91       	pop	r28
    11f8:	1f 91       	pop	r17
    11fa:	0f 91       	pop	r16
    11fc:	08 95       	ret

000011fe <registerTimeout>:

int registerTimeout(Timeout * t)
{
    11fe:	0f 93       	push	r16
    1200:	1f 93       	push	r17
    1202:	cf 93       	push	r28
    1204:	df 93       	push	r29
    1206:	fc 01       	movw	r30, r24
	t->next = NULL;
    1208:	10 82       	st	Z, r1
    120a:	11 82       	std	Z+1, r1	; 0x01

	if(timeoutList == NULL)
    120c:	a0 91 70 25 	lds	r26, 0x2570
    1210:	b0 91 71 25 	lds	r27, 0x2571
    1214:	10 97       	sbiw	r26, 0x00	; 0
    1216:	29 f4       	brne	.+10     	; 0x1222 <registerTimeout+0x24>
	{
		timeoutList = t;
    1218:	80 93 70 25 	sts	0x2570, r24
    121c:	90 93 71 25 	sts	0x2571, r25
    1220:	2d c0       	rjmp	.+90     	; 0x127c <registerTimeout+0x7e>
		Timeout * prev = NULL;
		Timeout * cur;
		
		cur = timeoutList;
		
		while((cur->calltime < t->calltime) && (cur->next != NULL))
    1222:	42 81       	ldd	r20, Z+2	; 0x02
    1224:	53 81       	ldd	r21, Z+3	; 0x03
    1226:	64 81       	ldd	r22, Z+4	; 0x04
    1228:	75 81       	ldd	r23, Z+5	; 0x05
    122a:	c0 e0       	ldi	r28, 0x00	; 0
    122c:	d0 e0       	ldi	r29, 0x00	; 0
    122e:	03 c0       	rjmp	.+6      	; 0x1236 <registerTimeout+0x38>
		{
			prev = cur;
			cur = cur->next;
    1230:	dc 01       	movw	r26, r24
		Timeout * prev = NULL;
		Timeout * cur;
		
		cur = timeoutList;
		
		while((cur->calltime < t->calltime) && (cur->next != NULL))
    1232:	c3 2f       	mov	r28, r19
    1234:	d2 2f       	mov	r29, r18
    1236:	12 96       	adiw	r26, 0x02	; 2
    1238:	0d 91       	ld	r16, X+
    123a:	1d 91       	ld	r17, X+
    123c:	2d 91       	ld	r18, X+
    123e:	3c 91       	ld	r19, X
    1240:	15 97       	sbiw	r26, 0x05	; 5
    1242:	04 17       	cp	r16, r20
    1244:	15 07       	cpc	r17, r21
    1246:	26 07       	cpc	r18, r22
    1248:	37 07       	cpc	r19, r23
    124a:	18 f0       	brcs	.+6      	; 0x1252 <registerTimeout+0x54>
			cur = cur->next;
		}		
		
		if(cur->calltime >= t->calltime)
		{
			if(prev == NULL)
    124c:	20 97       	sbiw	r28, 0x00	; 0
    124e:	91 f4       	brne	.+36     	; 0x1274 <registerTimeout+0x76>
    1250:	0c c0       	rjmp	.+24     	; 0x126a <registerTimeout+0x6c>
		Timeout * prev = NULL;
		Timeout * cur;
		
		cur = timeoutList;
		
		while((cur->calltime < t->calltime) && (cur->next != NULL))
    1252:	8d 91       	ld	r24, X+
    1254:	9c 91       	ld	r25, X
    1256:	11 97       	sbiw	r26, 0x01	; 1
    1258:	3a 2f       	mov	r19, r26
    125a:	2b 2f       	mov	r18, r27
    125c:	00 97       	sbiw	r24, 0x00	; 0
    125e:	41 f7       	brne	.-48     	; 0x1230 <registerTimeout+0x32>
			
			t->next = cur;
		}
		else
		{
			cur->next = t;
    1260:	ed 93       	st	X+, r30
    1262:	fc 93       	st	X, r31
			t->next = NULL;
    1264:	10 82       	st	Z, r1
    1266:	11 82       	std	Z+1, r1	; 0x01
    1268:	09 c0       	rjmp	.+18     	; 0x127c <registerTimeout+0x7e>
		
		if(cur->calltime >= t->calltime)
		{
			if(prev == NULL)
			{
				timeoutList = t;
    126a:	e0 93 70 25 	sts	0x2570, r30
    126e:	f0 93 71 25 	sts	0x2571, r31
    1272:	02 c0       	rjmp	.+4      	; 0x1278 <registerTimeout+0x7a>
			}
			else
			{
				prev->next = t;
    1274:	e8 83       	st	Y, r30
    1276:	f9 83       	std	Y+1, r31	; 0x01
			}
			
			t->next = cur;
    1278:	a0 83       	st	Z, r26
    127a:	b1 83       	std	Z+1, r27	; 0x01
			cur->next = t;
			t->next = NULL;
		}
	}
	
	t->state = ACTIVE;
    127c:	81 e0       	ldi	r24, 0x01	; 1
    127e:	80 87       	std	Z+8, r24	; 0x08
	
	return 1;	
}
    1280:	81 e0       	ldi	r24, 0x01	; 1
    1282:	90 e0       	ldi	r25, 0x00	; 0
    1284:	df 91       	pop	r29
    1286:	cf 91       	pop	r28
    1288:	1f 91       	pop	r17
    128a:	0f 91       	pop	r16
    128c:	08 95       	ret

0000128e <deregisterTimeout>:

int deregisterTimeout(Timeout * t)
{
	if(timeoutList == NULL)
    128e:	e0 91 70 25 	lds	r30, 0x2570
    1292:	f0 91 71 25 	lds	r31, 0x2571
    1296:	30 97       	sbiw	r30, 0x00	; 0
    1298:	d1 f0       	breq	.+52     	; 0x12ce <deregisterTimeout+0x40>
    129a:	a0 e0       	ldi	r26, 0x00	; 0
    129c:	b0 e0       	ldi	r27, 0x00	; 0
    129e:	07 c0       	rjmp	.+14     	; 0x12ae <deregisterTimeout+0x20>
		

		while((cur != NULL) && (t != cur)) //(cur->callback != t->callback) && (cur->calltime != t->calltime))
		{
			prev = cur;
			cur = cur->next;
    12a0:	20 81       	ld	r18, Z
    12a2:	31 81       	ldd	r19, Z+1	; 0x01
    12a4:	df 01       	movw	r26, r30
		Timeout * cur;

		cur = timeoutList;
		

		while((cur != NULL) && (t != cur)) //(cur->callback != t->callback) && (cur->calltime != t->calltime))
    12a6:	21 15       	cp	r18, r1
    12a8:	31 05       	cpc	r19, r1
    12aa:	89 f0       	breq	.+34     	; 0x12ce <deregisterTimeout+0x40>
		{
			prev = cur;
			cur = cur->next;
    12ac:	f9 01       	movw	r30, r18
		Timeout * cur;

		cur = timeoutList;
		

		while((cur != NULL) && (t != cur)) //(cur->callback != t->callback) && (cur->calltime != t->calltime))
    12ae:	8e 17       	cp	r24, r30
    12b0:	9f 07       	cpc	r25, r31
    12b2:	b1 f7       	brne	.-20     	; 0x12a0 <deregisterTimeout+0x12>
    12b4:	0f c0       	rjmp	.+30     	; 0x12d4 <deregisterTimeout+0x46>
		}
		else
		{
			if(prev == NULL)
			{
				timeoutList = cur->next;
    12b6:	20 93 70 25 	sts	0x2570, r18
    12ba:	30 93 71 25 	sts	0x2571, r19
    12be:	02 c0       	rjmp	.+4      	; 0x12c4 <deregisterTimeout+0x36>
			}
			else
			{
				prev->next = cur->next;
    12c0:	2d 93       	st	X+, r18
    12c2:	3c 93       	st	X, r19
			}
			
			t->state = INACTIVE;
    12c4:	fc 01       	movw	r30, r24
    12c6:	10 86       	std	Z+8, r1	; 0x08
			
			return 1;
    12c8:	21 e0       	ldi	r18, 0x01	; 1
    12ca:	30 e0       	ldi	r19, 0x00	; 0
    12cc:	09 c0       	rjmp	.+18     	; 0x12e0 <deregisterTimeout+0x52>

int deregisterTimeout(Timeout * t)
{
	if(timeoutList == NULL)
	{		
		return 0;
    12ce:	20 e0       	ldi	r18, 0x00	; 0
    12d0:	30 e0       	ldi	r19, 0x00	; 0
    12d2:	06 c0       	rjmp	.+12     	; 0x12e0 <deregisterTimeout+0x52>
    12d4:	fc 01       	movw	r30, r24
    12d6:	20 81       	ld	r18, Z
    12d8:	31 81       	ldd	r19, Z+1	; 0x01
		{
			return 0;
		}
		else
		{
			if(prev == NULL)
    12da:	10 97       	sbiw	r26, 0x00	; 0
    12dc:	89 f7       	brne	.-30     	; 0x12c0 <deregisterTimeout+0x32>
    12de:	eb cf       	rjmp	.-42     	; 0x12b6 <deregisterTimeout+0x28>
			t->state = INACTIVE;
			
			return 1;
		}
	}
}
    12e0:	c9 01       	movw	r24, r18
    12e2:	08 95       	ret

000012e4 <deregisterTimeoutByHandler>:

int deregisterTimeoutByHandler(GenericHandler h)
{
	if(timeoutList == NULL)
    12e4:	e0 91 70 25 	lds	r30, 0x2570
    12e8:	f0 91 71 25 	lds	r31, 0x2571
    12ec:	30 97       	sbiw	r30, 0x00	; 0
    12ee:	d9 f0       	breq	.+54     	; 0x1326 <deregisterTimeoutByHandler+0x42>
    12f0:	a0 e0       	ldi	r26, 0x00	; 0
    12f2:	b0 e0       	ldi	r27, 0x00	; 0
    12f4:	07 c0       	rjmp	.+14     	; 0x1304 <deregisterTimeoutByHandler+0x20>
		cur = timeoutList;
		
		while((cur != NULL) && (cur->callback != h))
		{
			prev = cur;
			cur = cur->next;
    12f6:	20 81       	ld	r18, Z
    12f8:	31 81       	ldd	r19, Z+1	; 0x01
    12fa:	df 01       	movw	r26, r30
		Timeout * prev = NULL;
		Timeout * cur;

		cur = timeoutList;
		
		while((cur != NULL) && (cur->callback != h))
    12fc:	21 15       	cp	r18, r1
    12fe:	31 05       	cpc	r19, r1
    1300:	91 f0       	breq	.+36     	; 0x1326 <deregisterTimeoutByHandler+0x42>
		{
			prev = cur;
			cur = cur->next;
    1302:	f9 01       	movw	r30, r18
		Timeout * prev = NULL;
		Timeout * cur;

		cur = timeoutList;
		
		while((cur != NULL) && (cur->callback != h))
    1304:	26 81       	ldd	r18, Z+6	; 0x06
    1306:	37 81       	ldd	r19, Z+7	; 0x07
    1308:	28 17       	cp	r18, r24
    130a:	39 07       	cpc	r19, r25
    130c:	a1 f7       	brne	.-24     	; 0x12f6 <deregisterTimeoutByHandler+0x12>
    130e:	0e c0       	rjmp	.+28     	; 0x132c <deregisterTimeoutByHandler+0x48>
		}
		else
		{
			if(prev == NULL)
			{
				timeoutList = cur->next;
    1310:	80 93 70 25 	sts	0x2570, r24
    1314:	90 93 71 25 	sts	0x2571, r25
    1318:	02 c0       	rjmp	.+4      	; 0x131e <deregisterTimeoutByHandler+0x3a>
			}
			else
			{
				prev->next = cur->next;
    131a:	8d 93       	st	X+, r24
    131c:	9c 93       	st	X, r25
			}
			
			cur->state = INACTIVE;
    131e:	10 86       	std	Z+8, r1	; 0x08
			
			return 1;
    1320:	21 e0       	ldi	r18, 0x01	; 1
    1322:	30 e0       	ldi	r19, 0x00	; 0
    1324:	08 c0       	rjmp	.+16     	; 0x1336 <deregisterTimeoutByHandler+0x52>

int deregisterTimeoutByHandler(GenericHandler h)
{
	if(timeoutList == NULL)
	{		
		return 0;
    1326:	20 e0       	ldi	r18, 0x00	; 0
    1328:	30 e0       	ldi	r19, 0x00	; 0
    132a:	05 c0       	rjmp	.+10     	; 0x1336 <deregisterTimeoutByHandler+0x52>
    132c:	80 81       	ld	r24, Z
    132e:	91 81       	ldd	r25, Z+1	; 0x01
		{
			return 0;
		}
		else
		{
			if(prev == NULL)
    1330:	10 97       	sbiw	r26, 0x00	; 0
    1332:	99 f7       	brne	.-26     	; 0x131a <deregisterTimeoutByHandler+0x36>
    1334:	ed cf       	rjmp	.-38     	; 0x1310 <deregisterTimeoutByHandler+0x2c>
			
			return 1;
		}
	}

}
    1336:	c9 01       	movw	r24, r18
    1338:	08 95       	ret

0000133a <checkTimer>:

void checkTimer()
{
    133a:	0f 93       	push	r16
    133c:	1f 93       	push	r17
    133e:	cf 93       	push	r28
    1340:	df 93       	push	r29
	Timer * tt = timerList;
    1342:	c0 91 6e 25 	lds	r28, 0x256E
    1346:	d0 91 6f 25 	lds	r29, 0x256F
	
	while(tt != NULL)
    134a:	1b c0       	rjmp	.+54     	; 0x1382 <checkTimer+0x48>
	{
		if(tt->state == ACTIVE)
    134c:	88 89       	ldd	r24, Y+16	; 0x10
    134e:	81 30       	cpi	r24, 0x01	; 1
    1350:	a9 f4       	brne	.+42     	; 0x137c <checkTimer+0x42>
		{
			if((tt->t).state == INACTIVE)
    1352:	8a 85       	ldd	r24, Y+10	; 0x0a
    1354:	81 11       	cpse	r24, r1
    1356:	12 c0       	rjmp	.+36     	; 0x137c <checkTimer+0x42>
  }
}

Time getTime()
{
	return getHWTime();
    1358:	0e 94 59 1b 	call	0x36b2	; 0x36b2 <getHWTime>
	{
		if(tt->state == ACTIVE)
		{
			if((tt->t).state == INACTIVE)
			{
				(tt->t).calltime = getTime() + tt->period;
    135c:	0c 85       	ldd	r16, Y+12	; 0x0c
    135e:	1d 85       	ldd	r17, Y+13	; 0x0d
    1360:	2e 85       	ldd	r18, Y+14	; 0x0e
    1362:	3f 85       	ldd	r19, Y+15	; 0x0f
    1364:	60 0f       	add	r22, r16
    1366:	71 1f       	adc	r23, r17
    1368:	82 1f       	adc	r24, r18
    136a:	93 1f       	adc	r25, r19
    136c:	6c 83       	std	Y+4, r22	; 0x04
    136e:	7d 83       	std	Y+5, r23	; 0x05
    1370:	8e 83       	std	Y+6, r24	; 0x06
    1372:	9f 83       	std	Y+7, r25	; 0x07
				registerTimeout(&(tt->t));
    1374:	ce 01       	movw	r24, r28
    1376:	02 96       	adiw	r24, 0x02	; 2
    1378:	0e 94 ff 08 	call	0x11fe	; 0x11fe <registerTimeout>
				
			}
		}
	
		tt = tt->next;
    137c:	09 90       	ld	r0, Y+
    137e:	d8 81       	ld	r29, Y
    1380:	c0 2d       	mov	r28, r0

void checkTimer()
{
	Timer * tt = timerList;
	
	while(tt != NULL)
    1382:	20 97       	sbiw	r28, 0x00	; 0
    1384:	19 f7       	brne	.-58     	; 0x134c <checkTimer+0x12>
			}
		}
	
		tt = tt->next;
	}
}
    1386:	df 91       	pop	r29
    1388:	cf 91       	pop	r28
    138a:	1f 91       	pop	r17
    138c:	0f 91       	pop	r16
    138e:	08 95       	ret

00001390 <registerTimer>:

int registerTimer(Timer * tt)
{
  tt->next = NULL;
    1390:	fc 01       	movw	r30, r24
    1392:	10 82       	st	Z, r1
    1394:	11 82       	std	Z+1, r1	; 0x01

	if(timerList == NULL)
    1396:	e0 91 6e 25 	lds	r30, 0x256E
    139a:	f0 91 6f 25 	lds	r31, 0x256F
    139e:	30 97       	sbiw	r30, 0x00	; 0
    13a0:	59 f4       	brne	.+22     	; 0x13b8 <registerTimer+0x28>
	{
		timerList = tt;
    13a2:	80 93 6e 25 	sts	0x256E, r24
    13a6:	90 93 6f 25 	sts	0x256F, r25
    13aa:	10 c0       	rjmp	.+32     	; 0x13cc <registerTimer+0x3c>
		Timer * cur = timerList;
		
		
		while(cur->next != NULL)
		{
		  assert(tt != cur);
    13ac:	8e 17       	cp	r24, r30
    13ae:	9f 07       	cpc	r25, r31
    13b0:	11 f4       	brne	.+4      	; 0x13b6 <registerTimer+0x26>
    13b2:	0e 94 75 22 	call	0x44ea	; 0x44ea <abort>
			cur = cur->next;
    13b6:	f9 01       	movw	r30, r18
	else
	{
		Timer * cur = timerList;
		
		
		while(cur->next != NULL)
    13b8:	20 81       	ld	r18, Z
    13ba:	31 81       	ldd	r19, Z+1	; 0x01
    13bc:	21 15       	cp	r18, r1
    13be:	31 05       	cpc	r19, r1
    13c0:	a9 f7       	brne	.-22     	; 0x13ac <registerTimer+0x1c>
		{
		  assert(tt != cur);
			cur = cur->next;
		}
		assert(tt != cur);
    13c2:	8e 17       	cp	r24, r30
    13c4:	9f 07       	cpc	r25, r31
    13c6:	a9 f3       	breq	.-22     	; 0x13b2 <registerTimer+0x22>
		
		cur->next = tt;
    13c8:	80 83       	st	Z, r24
    13ca:	91 83       	std	Z+1, r25	; 0x01
	}
	
	tt->state = ACTIVE;	
    13cc:	21 e0       	ldi	r18, 0x01	; 1
    13ce:	fc 01       	movw	r30, r24
    13d0:	20 8b       	std	Z+16, r18	; 0x10
	
	return 1;
}
    13d2:	81 e0       	ldi	r24, 0x01	; 1
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	08 95       	ret

000013d8 <deregisterTimer>:

int deregisterTimer(Timer * tt)
{
	if(timerList == NULL)
    13d8:	e0 91 6e 25 	lds	r30, 0x256E
    13dc:	f0 91 6f 25 	lds	r31, 0x256F
    13e0:	30 97       	sbiw	r30, 0x00	; 0
    13e2:	d9 f0       	breq	.+54     	; 0x141a <deregisterTimer+0x42>
    13e4:	a0 e0       	ldi	r26, 0x00	; 0
    13e6:	b0 e0       	ldi	r27, 0x00	; 0
    13e8:	07 c0       	rjmp	.+14     	; 0x13f8 <deregisterTimer+0x20>
		Timer * cur = timerList;
	
		while(cur != NULL && cur != tt)
		{
			prev = cur;
			cur = cur->next;
    13ea:	20 81       	ld	r18, Z
    13ec:	31 81       	ldd	r19, Z+1	; 0x01
    13ee:	df 01       	movw	r26, r30
	else
	{
		Timer * prev = NULL;
		Timer * cur = timerList;
	
		while(cur != NULL && cur != tt)
    13f0:	21 15       	cp	r18, r1
    13f2:	31 05       	cpc	r19, r1
    13f4:	91 f0       	breq	.+36     	; 0x141a <deregisterTimer+0x42>
		{
			prev = cur;
			cur = cur->next;
    13f6:	f9 01       	movw	r30, r18
	else
	{
		Timer * prev = NULL;
		Timer * cur = timerList;
	
		while(cur != NULL && cur != tt)
    13f8:	e8 17       	cp	r30, r24
    13fa:	f9 07       	cpc	r31, r25
    13fc:	b1 f7       	brne	.-20     	; 0x13ea <deregisterTimer+0x12>
    13fe:	10 c0       	rjmp	.+32     	; 0x1420 <deregisterTimer+0x48>
		}
		else
		{
			if(prev == NULL)
			{
				timerList = cur->next;
    1400:	80 93 6e 25 	sts	0x256E, r24
    1404:	90 93 6f 25 	sts	0x256F, r25
    1408:	02 c0       	rjmp	.+4      	; 0x140e <deregisterTimer+0x36>
			}
			else
			{
				prev->next = cur->next;
    140a:	8d 93       	st	X+, r24
    140c:	9c 93       	st	X, r25
			}
			cur->next = NULL;
    140e:	10 82       	st	Z, r1
    1410:	11 82       	std	Z+1, r1	; 0x01
			cur->state = INACTIVE;
    1412:	10 8a       	std	Z+16, r1	; 0x10
			
			return 1;
    1414:	21 e0       	ldi	r18, 0x01	; 1
    1416:	30 e0       	ldi	r19, 0x00	; 0
    1418:	08 c0       	rjmp	.+16     	; 0x142a <deregisterTimer+0x52>

int deregisterTimer(Timer * tt)
{
	if(timerList == NULL)
	{
		return 0;
    141a:	20 e0       	ldi	r18, 0x00	; 0
    141c:	30 e0       	ldi	r19, 0x00	; 0
    141e:	05 c0       	rjmp	.+10     	; 0x142a <deregisterTimer+0x52>
    1420:	80 81       	ld	r24, Z
    1422:	91 81       	ldd	r25, Z+1	; 0x01
		{
			return 0;
		}
		else
		{
			if(prev == NULL)
    1424:	10 97       	sbiw	r26, 0x00	; 0
    1426:	89 f7       	brne	.-30     	; 0x140a <deregisterTimer+0x32>
    1428:	eb cf       	rjmp	.-42     	; 0x1400 <deregisterTimer+0x28>
			cur->state = INACTIVE;
			
			return 1;
		}
	}
}
    142a:	c9 01       	movw	r24, r18
    142c:	08 95       	ret

0000142e <clearTimer>:

// attempts to deregister the timer and its timeout from both queues.
// returns the sum of the component deregistrations.
int clearTimer(Timer * tt)
{
    142e:	0f 93       	push	r16
    1430:	1f 93       	push	r17
    1432:	cf 93       	push	r28
    1434:	df 93       	push	r29
    1436:	8c 01       	movw	r16, r24

  int ret = deregisterTimer(tt);
    1438:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <deregisterTimer>
    143c:	ec 01       	movw	r28, r24


  if(tt != NULL)
    143e:	01 15       	cp	r16, r1
    1440:	11 05       	cpc	r17, r1
    1442:	31 f0       	breq	.+12     	; 0x1450 <clearTimer+0x22>
    {
      ret += deregisterTimeout(&(tt->t));
    1444:	c8 01       	movw	r24, r16
    1446:	02 96       	adiw	r24, 0x02	; 2
    1448:	0e 94 47 09 	call	0x128e	; 0x128e <deregisterTimeout>
    144c:	c8 0f       	add	r28, r24
    144e:	d9 1f       	adc	r29, r25
    }

  return ret;
}
    1450:	ce 01       	movw	r24, r28
    1452:	df 91       	pop	r29
    1454:	cf 91       	pop	r28
    1456:	1f 91       	pop	r17
    1458:	0f 91       	pop	r16
    145a:	08 95       	ret

0000145c <initTime>:

void initTime()
{
	timeoutList = NULL;
    145c:	10 92 70 25 	sts	0x2570, r1
    1460:	10 92 71 25 	sts	0x2571, r1
	thisTimeout = NULL;
    1464:	10 92 6c 25 	sts	0x256C, r1
    1468:	10 92 6d 25 	sts	0x256D, r1
	timerList = NULL;
    146c:	10 92 6e 25 	sts	0x256E, r1
    1470:	10 92 6f 25 	sts	0x256F, r1
	
	initHWTime();
    1474:	0c 94 9b 1b 	jmp	0x3736	; 0x3736 <initHWTime>

00001478 <getMicData>:
threadvar MicData _mic;

MicData getMicData()
{
    return _mic;
}
    1478:	80 91 72 25 	lds	r24, 0x2572
    147c:	90 91 73 25 	lds	r25, 0x2573
    1480:	08 95       	ret

00001482 <freeLogChunk>:
		// try again
		sendLogChunk(faceNum(thisChunk), thisChunk->data, DATA_SIZE);
		free(thisChunk);
	}
#else
	free(thisChunk);
    1482:	80 91 57 20 	lds	r24, 0x2057
    1486:	90 91 58 20 	lds	r25, 0x2058
    148a:	0c 94 d7 21 	jmp	0x43ae	; 0x43ae <free>

0000148e <isHostPort>:
#endif
}

byte isHostPort(PRef p)
{
	return ((p == toHost) && (PCConnection == 1));
    148e:	90 91 1c 20 	lds	r25, 0x201C
    1492:	89 13       	cpse	r24, r25
    1494:	06 c0       	rjmp	.+12     	; 0x14a2 <isHostPort+0x14>
    1496:	81 e0       	ldi	r24, 0x01	; 1
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	20 91 34 20 	lds	r18, 0x2034
    149e:	21 30       	cpi	r18, 0x01	; 1
    14a0:	11 f0       	breq	.+4      	; 0x14a6 <isHostPort+0x18>
    14a2:	80 e0       	ldi	r24, 0x00	; 0
    14a4:	90 e0       	ldi	r25, 0x00	; 0
}
    14a6:	08 95       	ret

000014a8 <sendLogChunk>:

byte sendLogChunk(PRef p, byte *d, byte s)
{
    14a8:	8f 92       	push	r8
    14aa:	9f 92       	push	r9
    14ac:	bf 92       	push	r11
    14ae:	cf 92       	push	r12
    14b0:	df 92       	push	r13
    14b2:	ef 92       	push	r14
    14b4:	ff 92       	push	r15
    14b6:	0f 93       	push	r16
    14b8:	1f 93       	push	r17
    14ba:	cf 93       	push	r28
    14bc:	df 93       	push	r29
    14be:	1f 92       	push	r1
    14c0:	cd b7       	in	r28, 0x3d	; 61
    14c2:	de b7       	in	r29, 0x3e	; 62
    14c4:	b8 2e       	mov	r11, r24
    14c6:	6b 01       	movw	r12, r22
	Chunk *c=calloc(sizeof(Chunk), 1);
    14c8:	61 e0       	ldi	r22, 0x01	; 1
    14ca:	70 e0       	ldi	r23, 0x00	; 0
    14cc:	88 e1       	ldi	r24, 0x18	; 24
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	49 83       	std	Y+1, r20	; 0x01
    14d2:	0e 94 1e 21 	call	0x423c	; 0x423c <calloc>
    14d6:	4c 01       	movw	r8, r24
		c=calloc(sizeof(Chunk), 1);
	}
	while (sendMessageToPort(c, p, d, s, (MsgHandler)RES_SYS_HANDLER, (GenericHandler)&freeLogChunk) == 0);
	return 1;
#else
	if (c == NULL)
    14d8:	29 81       	ldd	r18, Y+1	; 0x01
    14da:	00 97       	sbiw	r24, 0x00	; 0
    14dc:	81 f0       	breq	.+32     	; 0x14fe <sendLogChunk+0x56>
	{
		return 0;
	}
	if (sendMessageToPort(c, p, d, s, (MsgHandler)RES_SYS_HANDLER, (GenericHandler)&freeLogChunk) == 0)
    14de:	81 e4       	ldi	r24, 0x41	; 65
    14e0:	e8 2e       	mov	r14, r24
    14e2:	8a e0       	ldi	r24, 0x0A	; 10
    14e4:	f8 2e       	mov	r15, r24
    14e6:	00 e0       	ldi	r16, 0x00	; 0
    14e8:	10 e0       	ldi	r17, 0x00	; 0
    14ea:	a6 01       	movw	r20, r12
    14ec:	6b 2d       	mov	r22, r11
    14ee:	c4 01       	movw	r24, r8
    14f0:	0e 94 cb 07 	call	0xf96	; 0xf96 <sendMessageToPort>
    14f4:	81 11       	cpse	r24, r1
    14f6:	05 c0       	rjmp	.+10     	; 0x1502 <sendLogChunk+0x5a>
	{
		free(c);
    14f8:	c4 01       	movw	r24, r8
    14fa:	0e 94 d7 21 	call	0x43ae	; 0x43ae <free>
	while (sendMessageToPort(c, p, d, s, (MsgHandler)RES_SYS_HANDLER, (GenericHandler)&freeLogChunk) == 0);
	return 1;
#else
	if (c == NULL)
	{
		return 0;
    14fe:	80 e0       	ldi	r24, 0x00	; 0
    1500:	01 c0       	rjmp	.+2      	; 0x1504 <sendLogChunk+0x5c>
	if (sendMessageToPort(c, p, d, s, (MsgHandler)RES_SYS_HANDLER, (GenericHandler)&freeLogChunk) == 0)
	{
		free(c);
		return 0;
	}
	return 1;
    1502:	81 e0       	ldi	r24, 0x01	; 1
#endif

}
    1504:	0f 90       	pop	r0
    1506:	df 91       	pop	r29
    1508:	cf 91       	pop	r28
    150a:	1f 91       	pop	r17
    150c:	0f 91       	pop	r16
    150e:	ff 90       	pop	r15
    1510:	ef 90       	pop	r14
    1512:	df 90       	pop	r13
    1514:	cf 90       	pop	r12
    1516:	bf 90       	pop	r11
    1518:	9f 90       	pop	r9
    151a:	8f 90       	pop	r8
    151c:	08 95       	ret

0000151e <sendPathToHost>:


void sendPathToHost(PRef p)
{
    151e:	cf 93       	push	r28
    1520:	df 93       	push	r29
    1522:	1f 92       	push	r1
    1524:	1f 92       	push	r1
    1526:	cd b7       	in	r28, 0x3d	; 61
    1528:	de b7       	in	r29, 0x3e	; 62
	byte buf[2];
	
	buf[0] = LOG_MSG;
    152a:	90 e5       	ldi	r25, 0x50	; 80
    152c:	99 83       	std	Y+1, r25	; 0x01
	buf[1] = LOG_PATH_TO_HOST;
    152e:	92 e0       	ldi	r25, 0x02	; 2
    1530:	9a 83       	std	Y+2, r25	; 0x02
	sendLogChunk(p, buf, 2);
    1532:	42 e0       	ldi	r20, 0x02	; 2
    1534:	be 01       	movw	r22, r28
    1536:	6f 5f       	subi	r22, 0xFF	; 255
    1538:	7f 4f       	sbci	r23, 0xFF	; 255
    153a:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <sendLogChunk>
	
}
    153e:	0f 90       	pop	r0
    1540:	0f 90       	pop	r0
    1542:	df 91       	pop	r29
    1544:	cf 91       	pop	r28
    1546:	08 95       	ret

00001548 <spreadPathToHost>:

void spreadPathToHost(PRef excluded)
{
    1548:	0f 93       	push	r16
    154a:	1f 93       	push	r17
    154c:	cf 93       	push	r28
    154e:	df 93       	push	r29
    1550:	08 2f       	mov	r16, r24
    1552:	c9 e5       	ldi	r28, 0x59	; 89
    1554:	d0 e2       	ldi	r29, 0x20	; 32
	byte p;

	for( p = 0; p < NUM_PORTS; p++)
    1556:	10 e0       	ldi	r17, 0x00	; 0
	{
		if ((p == excluded) || (thisNeighborhood.n[p] == VACANT))
    1558:	10 17       	cp	r17, r16
    155a:	39 f0       	breq	.+14     	; 0x156a <spreadPathToHost+0x22>
    155c:	28 81       	ld	r18, Y
    155e:	39 81       	ldd	r19, Y+1	; 0x01
    1560:	23 2b       	or	r18, r19
    1562:	19 f0       	breq	.+6      	; 0x156a <spreadPathToHost+0x22>
		{
			continue;
		}
		sendPathToHost(p);
    1564:	81 2f       	mov	r24, r17
    1566:	0e 94 8f 0a 	call	0x151e	; 0x151e <sendPathToHost>

void spreadPathToHost(PRef excluded)
{
	byte p;

	for( p = 0; p < NUM_PORTS; p++)
    156a:	1f 5f       	subi	r17, 0xFF	; 255
    156c:	22 96       	adiw	r28, 0x02	; 2
    156e:	16 30       	cpi	r17, 0x06	; 6
    1570:	99 f7       	brne	.-26     	; 0x1558 <spreadPathToHost+0x10>
		{
			continue;
		}
		sendPathToHost(p);
	}
}
    1572:	df 91       	pop	r29
    1574:	cf 91       	pop	r28
    1576:	1f 91       	pop	r17
    1578:	0f 91       	pop	r16
    157a:	08 95       	ret

0000157c <forwardToHost>:

void forwardToHost(Chunk *c)
{
    157c:	bc 01       	movw	r22, r24
	if(toHost != UNDEFINED_HOST) {
    157e:	80 91 1c 20 	lds	r24, 0x201C
    1582:	88 3c       	cpi	r24, 0xC8	; 200
    1584:	19 f0       	breq	.+6      	; 0x158c <forwardToHost+0x10>
		sendLogChunk(toHost, c->data, DATA_SIZE);
    1586:	41 e1       	ldi	r20, 0x11	; 17
    1588:	0c 94 54 0a 	jmp	0x14a8	; 0x14a8 <sendLogChunk>
    158c:	08 95       	ret

0000158e <initLogDebug>:
	}
}

void initLogDebug(void)
{
    158e:	ff 92       	push	r15
    1590:	0f 93       	push	r16
    1592:	1f 93       	push	r17
    1594:	cf 93       	push	r28
    1596:	df 93       	push	r29
    1598:	1f 92       	push	r1
    159a:	1f 92       	push	r1
    159c:	cd b7       	in	r28, 0x3d	; 61
    159e:	de b7       	in	r29, 0x3e	; 62
	byte buf[2];
	
	toHost = UNDEFINED_HOST;
    15a0:	88 ec       	ldi	r24, 0xC8	; 200
    15a2:	80 93 1c 20 	sts	0x201C, r24
	PCConnection = 0;
    15a6:	10 92 34 20 	sts	0x2034, r1
	
	buf[0] = LOG_MSG;
    15aa:	80 e5       	ldi	r24, 0x50	; 80
    15ac:	89 83       	std	Y+1, r24	; 0x01
	buf[1] = LOG_NEED_PATH_TO_HOST;
    15ae:	83 e0       	ldi	r24, 0x03	; 3
    15b0:	8a 83       	std	Y+2, r24	; 0x02
	byte p;
	
	setColor(ORANGE); // to remember to the user that the block is waiting
    15b2:	81 e0       	ldi	r24, 0x01	; 1
    15b4:	0e 94 37 07 	call	0xe6e	; 0xe6e <setColor>
	while(toHost == UNDEFINED_HOST)
    15b8:	15 c0       	rjmp	.+42     	; 0x15e4 <initLogDebug+0x56>
	{
		for( p = 0; p < NUM_PORTS; p++)
		{
			if ((thisNeighborhood.n[p] == VACANT))
    15ba:	f8 01       	movw	r30, r16
    15bc:	21 91       	ld	r18, Z+
    15be:	31 91       	ld	r19, Z+
    15c0:	8f 01       	movw	r16, r30
    15c2:	23 2b       	or	r18, r19
    15c4:	39 f0       	breq	.+14     	; 0x15d4 <initLogDebug+0x46>
			{
				continue;
			}
			sendLogChunk(p, buf, 2);
    15c6:	42 e0       	ldi	r20, 0x02	; 2
    15c8:	be 01       	movw	r22, r28
    15ca:	6f 5f       	subi	r22, 0xFF	; 255
    15cc:	7f 4f       	sbci	r23, 0xFF	; 255
    15ce:	8f 2d       	mov	r24, r15
    15d0:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <sendLogChunk>
	byte p;
	
	setColor(ORANGE); // to remember to the user that the block is waiting
	while(toHost == UNDEFINED_HOST)
	{
		for( p = 0; p < NUM_PORTS; p++)
    15d4:	f3 94       	inc	r15
    15d6:	f6 e0       	ldi	r31, 0x06	; 6
    15d8:	ff 12       	cpse	r15, r31
    15da:	ef cf       	rjmp	.-34     	; 0x15ba <initLogDebug+0x2c>
			{
				continue;
			}
			sendLogChunk(p, buf, 2);
		}
		delayMS(6);
    15dc:	86 e0       	ldi	r24, 0x06	; 6
    15de:	90 e0       	ldi	r25, 0x00	; 0
    15e0:	0e 94 92 08 	call	0x1124	; 0x1124 <delayMS>
	buf[0] = LOG_MSG;
	buf[1] = LOG_NEED_PATH_TO_HOST;
	byte p;
	
	setColor(ORANGE); // to remember to the user that the block is waiting
	while(toHost == UNDEFINED_HOST)
    15e4:	80 91 1c 20 	lds	r24, 0x201C
    15e8:	88 3c       	cpi	r24, 0xC8	; 200
    15ea:	21 f4       	brne	.+8      	; 0x15f4 <initLogDebug+0x66>
    15ec:	09 e5       	ldi	r16, 0x59	; 89
    15ee:	10 e2       	ldi	r17, 0x20	; 32
    15f0:	f1 2c       	mov	r15, r1
    15f2:	e3 cf       	rjmp	.-58     	; 0x15ba <initLogDebug+0x2c>
			}
			sendLogChunk(p, buf, 2);
		}
		delayMS(6);
	}
}
    15f4:	0f 90       	pop	r0
    15f6:	0f 90       	pop	r0
    15f8:	df 91       	pop	r29
    15fa:	cf 91       	pop	r28
    15fc:	1f 91       	pop	r17
    15fe:	0f 91       	pop	r16
    1600:	ff 90       	pop	r15
    1602:	08 95       	ret

00001604 <handleLogMessage>:

byte handleLogMessage(void)
{
	
	if( thisChunk == NULL ) 
    1604:	e0 91 57 20 	lds	r30, 0x2057
    1608:	f0 91 58 20 	lds	r31, 0x2058
    160c:	30 97       	sbiw	r30, 0x00	; 0
    160e:	89 f1       	breq	.+98     	; 0x1672 <handleLogMessage+0x6e>
	{
		return 0;
	}
	switch(thisChunk->data[1])
    1610:	91 81       	ldd	r25, Z+1	; 0x01
    1612:	92 30       	cpi	r25, 0x02	; 2
    1614:	81 f0       	breq	.+32     	; 0x1636 <handleLogMessage+0x32>
    1616:	18 f4       	brcc	.+6      	; 0x161e <handleLogMessage+0x1a>
    1618:	91 30       	cpi	r25, 0x01	; 1
    161a:	69 f5       	brne	.+90     	; 0x1676 <handleLogMessage+0x72>
    161c:	05 c0       	rjmp	.+10     	; 0x1628 <handleLogMessage+0x24>
    161e:	93 30       	cpi	r25, 0x03	; 3
    1620:	b9 f0       	breq	.+46     	; 0x1650 <handleLogMessage+0x4c>
    1622:	94 30       	cpi	r25, 0x04	; 4
    1624:	41 f5       	brne	.+80     	; 0x1676 <handleLogMessage+0x72>
    1626:	1d c0       	rjmp	.+58     	; 0x1662 <handleLogMessage+0x5e>
	{
		case LOG_I_AM_HOST:
			toHost = faceNum(thisChunk);			
    1628:	81 89       	ldd	r24, Z+17	; 0x11
    162a:	87 70       	andi	r24, 0x07	; 7
    162c:	80 93 1c 20 	sts	0x201C, r24
			PCConnection = 1;
    1630:	90 93 34 20 	sts	0x2034, r25
    1634:	0a c0       	rjmp	.+20     	; 0x164a <handleLogMessage+0x46>
			spreadPathToHost(faceNum(thisChunk));
		break;
		case LOG_PATH_TO_HOST:
			if (toHost == UNDEFINED_HOST) {
    1636:	80 91 1c 20 	lds	r24, 0x201C
    163a:	88 3c       	cpi	r24, 0xC8	; 200
    163c:	e1 f4       	brne	.+56     	; 0x1676 <handleLogMessage+0x72>
				toHost = faceNum(thisChunk);
    163e:	81 89       	ldd	r24, Z+17	; 0x11
    1640:	87 70       	andi	r24, 0x07	; 7
    1642:	80 93 1c 20 	sts	0x201C, r24
				PCConnection = 0;
    1646:	10 92 34 20 	sts	0x2034, r1
				spreadPathToHost(faceNum(thisChunk));
    164a:	0e 94 a4 0a 	call	0x1548	; 0x1548 <spreadPathToHost>
    164e:	13 c0       	rjmp	.+38     	; 0x1676 <handleLogMessage+0x72>
			}
		break;
		case LOG_NEED_PATH_TO_HOST:
			if (toHost != UNDEFINED_HOST) {
    1650:	80 91 1c 20 	lds	r24, 0x201C
    1654:	88 3c       	cpi	r24, 0xC8	; 200
    1656:	79 f0       	breq	.+30     	; 0x1676 <handleLogMessage+0x72>
				sendPathToHost(faceNum(thisChunk));
    1658:	81 89       	ldd	r24, Z+17	; 0x11
    165a:	87 70       	andi	r24, 0x07	; 7
    165c:	0e 94 8f 0a 	call	0x151e	; 0x151e <sendPathToHost>
    1660:	0a c0       	rjmp	.+20     	; 0x1676 <handleLogMessage+0x72>
			}
		break;
		case LOG_DATA:
			if(toHost != UNDEFINED_HOST) {
    1662:	80 91 1c 20 	lds	r24, 0x201C
    1666:	88 3c       	cpi	r24, 0xC8	; 200
    1668:	31 f0       	breq	.+12     	; 0x1676 <handleLogMessage+0x72>
				forwardToHost(thisChunk);
    166a:	cf 01       	movw	r24, r30
    166c:	0e 94 be 0a 	call	0x157c	; 0x157c <forwardToHost>
    1670:	02 c0       	rjmp	.+4      	; 0x1676 <handleLogMessage+0x72>
byte handleLogMessage(void)
{
	
	if( thisChunk == NULL ) 
	{
		return 0;
    1672:	80 e0       	ldi	r24, 0x00	; 0
    1674:	08 95       	ret
				forwardToHost(thisChunk);
			}
		break;
	}
	
	return 1;
    1676:	81 e0       	ldi	r24, 0x01	; 1
}
    1678:	08 95       	ret

0000167a <getSize>:

byte getSize(char* str) {
	byte sizeCar = 0;
	byte sizeChunk = 1;
	
	if (str == NULL) {
    167a:	00 97       	sbiw	r24, 0x00	; 0
    167c:	a1 f0       	breq	.+40     	; 0x16a6 <getSize+0x2c>
        return 0;
    }
	
	sizeCar = strlen(str) + 1;
    167e:	dc 01       	movw	r26, r24
    1680:	0d 90       	ld	r0, X+
    1682:	00 20       	and	r0, r0
    1684:	e9 f7       	brne	.-6      	; 0x1680 <getSize+0x6>
    1686:	11 97       	sbiw	r26, 0x01	; 1
    1688:	a8 1b       	sub	r26, r24
    168a:	8a 2f       	mov	r24, r26
    168c:	8f 5f       	subi	r24, 0xFF	; 255

    if (sizeCar < 11) {
    168e:	8b 30       	cpi	r24, 0x0B	; 11
    1690:	60 f0       	brcs	.+24     	; 0x16aa <getSize+0x30>
        return 1;
    }
    
    sizeCar -= 10;
    1692:	8a 50       	subi	r24, 0x0A	; 10
    sizeChunk += sizeCar / 11;
    1694:	6b e0       	ldi	r22, 0x0B	; 11
    1696:	0e 94 c4 20 	call	0x4188	; 0x4188 <__udivmodqi4>
	if ((sizeCar % 11) != 0) {
    169a:	91 11       	cpse	r25, r1
    169c:	02 c0       	rjmp	.+4      	; 0x16a2 <getSize+0x28>
    if (sizeCar < 11) {
        return 1;
    }
    
    sizeCar -= 10;
    sizeChunk += sizeCar / 11;
    169e:	8f 5f       	subi	r24, 0xFF	; 255
    16a0:	08 95       	ret
	if ((sizeCar % 11) != 0) {
		sizeChunk++;
    16a2:	8e 5f       	subi	r24, 0xFE	; 254
    16a4:	08 95       	ret
byte getSize(char* str) {
	byte sizeCar = 0;
	byte sizeChunk = 1;
	
	if (str == NULL) {
        return 0;
    16a6:	80 e0       	ldi	r24, 0x00	; 0
    16a8:	08 95       	ret
    }
	
	sizeCar = strlen(str) + 1;

    if (sizeCar < 11) {
        return 1;
    16aa:	81 e0       	ldi	r24, 0x01	; 1
    sizeChunk += sizeCar / 11;
	if ((sizeCar % 11) != 0) {
		sizeChunk++;
	}
	return sizeChunk;
}
    16ac:	08 95       	ret

000016ae <printDebug>:

// format: <LOG_MSG> <LOG_DATA> <block id (2 bytes) > <message # (1 byte)> < fragment # (1 byte)> < if fragment # = 1, number of fragments. Otherwise data> < log data: 17 - 7 = 10>.
byte printDebug(char* str) {
    16ae:	8f 92       	push	r8
    16b0:	9f 92       	push	r9
    16b2:	af 92       	push	r10
    16b4:	bf 92       	push	r11
    16b6:	cf 92       	push	r12
    16b8:	df 92       	push	r13
    16ba:	ef 92       	push	r14
    16bc:	ff 92       	push	r15
    16be:	0f 93       	push	r16
    16c0:	1f 93       	push	r17
    16c2:	cf 93       	push	r28
    16c4:	df 93       	push	r29
    16c6:	cd b7       	in	r28, 0x3d	; 61
    16c8:	de b7       	in	r29, 0x3e	; 62
    16ca:	61 97       	sbiw	r28, 0x11	; 17
    16cc:	cd bf       	out	0x3d, r28	; 61
    16ce:	de bf       	out	0x3e, r29	; 62
    16d0:	8c 01       	movw	r16, r24
	byte size = getSize(str);
    16d2:	0e 94 3d 0b 	call	0x167a	; 0x167a <getSize>
    16d6:	b8 2e       	mov	r11, r24
	byte buf[DATA_SIZE];
	byte s = 0;	
	byte fId = 0;
	byte off = 6;
	
	if (toHost == UNDEFINED_HOST)
    16d8:	80 91 1c 20 	lds	r24, 0x201C
    16dc:	88 3c       	cpi	r24, 0xC8	; 200
    16de:	09 f4       	brne	.+2      	; 0x16e2 <printDebug+0x34>
    16e0:	7a c0       	rjmp	.+244    	; 0x17d6 <printDebug+0x128>
	{
		return 0;
	}
	
	buf[0] = LOG_MSG;
    16e2:	80 e5       	ldi	r24, 0x50	; 80
    16e4:	89 83       	std	Y+1, r24	; 0x01
	buf[1] = LOG_DATA;
    16e6:	84 e0       	ldi	r24, 0x04	; 4
    16e8:	8a 83       	std	Y+2, r24	; 0x02
	GUIDIntoChar(getGUID(), &(buf[2]));
    16ea:	0e 94 74 18 	call	0x30e8	; 0x30e8 <getGUID>
    16ee:	be 01       	movw	r22, r28
    16f0:	6d 5f       	subi	r22, 0xFD	; 253
    16f2:	7f 4f       	sbci	r23, 0xFF	; 255
    16f4:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <GUIDIntoChar>
	buf[4] = mId;
    16f8:	80 91 35 20 	lds	r24, 0x2035
    16fc:	8d 83       	std	Y+5, r24	; 0x05
	
	if (size == 1) 
    16fe:	81 e0       	ldi	r24, 0x01	; 1
    1700:	b8 12       	cpse	r11, r24
    1702:	56 c0       	rjmp	.+172    	; 0x17b0 <printDebug+0x102>
	{
		off = 7;
		s = strlen(str)+1;
    1704:	d8 01       	movw	r26, r16
    1706:	0d 90       	ld	r0, X+
    1708:	00 20       	and	r0, r0
    170a:	e9 f7       	brne	.-6      	; 0x1706 <printDebug+0x58>
    170c:	11 97       	sbiw	r26, 0x01	; 1
    170e:	fa 2e       	mov	r15, r26
    1710:	f0 1a       	sub	r15, r16
		memcpy(buf+off, str, s);
    1712:	9e 01       	movw	r18, r28
    1714:	28 5f       	subi	r18, 0xF8	; 248
    1716:	3f 4f       	sbci	r19, 0xFF	; 255
	buf[4] = mId;
	
	if (size == 1) 
	{
		off = 7;
		s = strlen(str)+1;
    1718:	4f 2d       	mov	r20, r15
    171a:	4f 5f       	subi	r20, 0xFF	; 255
		memcpy(buf+off, str, s);
    171c:	50 e0       	ldi	r21, 0x00	; 0
    171e:	b8 01       	movw	r22, r16
    1720:	c9 01       	movw	r24, r18
    1722:	0e 94 7a 22 	call	0x44f4	; 0x44f4 <memcpy>
		buf[5] = 0;	
    1726:	1e 82       	std	Y+6, r1	; 0x06
		buf[6] = size;
    1728:	bf 82       	std	Y+7, r11	; 0x07
		sendLogChunk(toHost, buf, s+off);
    172a:	4f 2d       	mov	r20, r15
    172c:	48 5f       	subi	r20, 0xF8	; 248
    172e:	be 01       	movw	r22, r28
    1730:	6f 5f       	subi	r22, 0xFF	; 255
    1732:	7f 4f       	sbci	r23, 0xFF	; 255
    1734:	80 91 1c 20 	lds	r24, 0x201C
    1738:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <sendLogChunk>
    173c:	45 c0       	rjmp	.+138    	; 0x17c8 <printDebug+0x11a>
	} 
	else
	{	
		for (fId = 0; fId < size; fId++)
		{
			buf[5] = fId;
    173e:	ee 82       	std	Y+6, r14	; 0x06
			if (fId == 0)
    1740:	81 11       	cpse	r24, r1
    1742:	06 c0       	rjmp	.+12     	; 0x1750 <printDebug+0xa2>
			{
				buf[6] = size;
    1744:	bf 82       	std	Y+7, r11	; 0x07
				off = 7;
    1746:	47 e0       	ldi	r20, 0x07	; 7
    1748:	84 2e       	mov	r8, r20
				s = 10;
    174a:	5a e0       	ldi	r21, 0x0A	; 10
    174c:	a5 2e       	mov	r10, r21
    174e:	13 c0       	rjmp	.+38     	; 0x1776 <printDebug+0xc8>
			}
			else if (fId == (size -1))
    1750:	ec 14       	cp	r14, r12
    1752:	fd 04       	cpc	r15, r13
    1754:	61 f4       	brne	.+24     	; 0x176e <printDebug+0xc0>
			{
				s = strlen(str+index)+1 ;
    1756:	f8 01       	movw	r30, r16
    1758:	e9 0d       	add	r30, r9
    175a:	f1 1d       	adc	r31, r1
    175c:	df 01       	movw	r26, r30
    175e:	0d 90       	ld	r0, X+
    1760:	00 20       	and	r0, r0
    1762:	e9 f7       	brne	.-6      	; 0x175e <printDebug+0xb0>
    1764:	aa 2e       	mov	r10, r26
    1766:	ae 1a       	sub	r10, r30
    1768:	36 e0       	ldi	r19, 0x06	; 6
    176a:	83 2e       	mov	r8, r19
    176c:	04 c0       	rjmp	.+8      	; 0x1776 <printDebug+0xc8>
			{
				buf[6] = size;
				off = 7;
				s = 10;
			}
			else if (fId == (size -1))
    176e:	96 e0       	ldi	r25, 0x06	; 6
    1770:	89 2e       	mov	r8, r25
			{
				s = strlen(str+index)+1 ;
			} 
			else
			{
				s = 11;
    1772:	2b e0       	ldi	r18, 0x0B	; 11
    1774:	a2 2e       	mov	r10, r18
			}
			memcpy(buf+off, str+index, s);
    1776:	21 e0       	ldi	r18, 0x01	; 1
    1778:	30 e0       	ldi	r19, 0x00	; 0
    177a:	2c 0f       	add	r18, r28
    177c:	3d 1f       	adc	r19, r29
    177e:	28 0d       	add	r18, r8
    1780:	31 1d       	adc	r19, r1
    1782:	f8 01       	movw	r30, r16
    1784:	e9 0d       	add	r30, r9
    1786:	f1 1d       	adc	r31, r1
    1788:	4a 2d       	mov	r20, r10
    178a:	50 e0       	ldi	r21, 0x00	; 0
    178c:	bf 01       	movw	r22, r30
    178e:	c9 01       	movw	r24, r18
    1790:	0e 94 7a 22 	call	0x44f4	; 0x44f4 <memcpy>
			index += s;
    1794:	9a 0c       	add	r9, r10
			sendLogChunk(toHost, buf, s+off);
    1796:	48 2d       	mov	r20, r8
    1798:	4a 0d       	add	r20, r10
    179a:	be 01       	movw	r22, r28
    179c:	6f 5f       	subi	r22, 0xFF	; 255
    179e:	7f 4f       	sbci	r23, 0xFF	; 255
    17a0:	80 91 1c 20 	lds	r24, 0x201C
    17a4:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <sendLogChunk>
    17a8:	8f ef       	ldi	r24, 0xFF	; 255
    17aa:	e8 1a       	sub	r14, r24
    17ac:	f8 0a       	sbc	r15, r24
    17ae:	08 c0       	rjmp	.+16     	; 0x17c0 <printDebug+0x112>
	buf[0] = LOG_MSG;
	buf[1] = LOG_DATA;
	GUIDIntoChar(getGUID(), &(buf[2]));
	buf[4] = mId;
	
	if (size == 1) 
    17b0:	e1 2c       	mov	r14, r1
    17b2:	f1 2c       	mov	r15, r1
    17b4:	91 2c       	mov	r9, r1
			{
				buf[6] = size;
				off = 7;
				s = 10;
			}
			else if (fId == (size -1))
    17b6:	cb 2c       	mov	r12, r11
    17b8:	d1 2c       	mov	r13, r1
    17ba:	81 e0       	ldi	r24, 0x01	; 1
    17bc:	c8 1a       	sub	r12, r24
    17be:	d1 08       	sbc	r13, r1
    17c0:	8e 2d       	mov	r24, r14
		buf[6] = size;
		sendLogChunk(toHost, buf, s+off);
	} 
	else
	{	
		for (fId = 0; fId < size; fId++)
    17c2:	eb 14       	cp	r14, r11
    17c4:	08 f4       	brcc	.+2      	; 0x17c8 <printDebug+0x11a>
    17c6:	bb cf       	rjmp	.-138    	; 0x173e <printDebug+0x90>
			index += s;
			sendLogChunk(toHost, buf, s+off);
			off = 6;
		}
	}
	mId++;
    17c8:	80 91 35 20 	lds	r24, 0x2035
    17cc:	8f 5f       	subi	r24, 0xFF	; 255
    17ce:	80 93 35 20 	sts	0x2035, r24
	return 1;
    17d2:	81 e0       	ldi	r24, 0x01	; 1
    17d4:	01 c0       	rjmp	.+2      	; 0x17d8 <printDebug+0x12a>
	byte fId = 0;
	byte off = 6;
	
	if (toHost == UNDEFINED_HOST)
	{
		return 0;
    17d6:	80 e0       	ldi	r24, 0x00	; 0
			off = 6;
		}
	}
	mId++;
	return 1;
}
    17d8:	61 96       	adiw	r28, 0x11	; 17
    17da:	cd bf       	out	0x3d, r28	; 61
    17dc:	de bf       	out	0x3e, r29	; 62
    17de:	df 91       	pop	r29
    17e0:	cf 91       	pop	r28
    17e2:	1f 91       	pop	r17
    17e4:	0f 91       	pop	r16
    17e6:	ff 90       	pop	r15
    17e8:	ef 90       	pop	r14
    17ea:	df 90       	pop	r13
    17ec:	cf 90       	pop	r12
    17ee:	bf 90       	pop	r11
    17f0:	af 90       	pop	r10
    17f2:	9f 90       	pop	r9
    17f4:	8f 90       	pop	r8
    17f6:	08 95       	ret

000017f8 <blockingPrintDebug>:

byte blockingPrintDebug(char *s)
{
    17f8:	cf 93       	push	r28
    17fa:	df 93       	push	r29
    17fc:	ec 01       	movw	r28, r24
	while(toHost == UNDEFINED_HOST)
    17fe:	04 c0       	rjmp	.+8      	; 0x1808 <blockingPrintDebug+0x10>
	{
		delayMS(1);
    1800:	81 e0       	ldi	r24, 0x01	; 1
    1802:	90 e0       	ldi	r25, 0x00	; 0
    1804:	0e 94 92 08 	call	0x1124	; 0x1124 <delayMS>
	return 1;
}

byte blockingPrintDebug(char *s)
{
	while(toHost == UNDEFINED_HOST)
    1808:	80 91 1c 20 	lds	r24, 0x201C
    180c:	88 3c       	cpi	r24, 0xC8	; 200
    180e:	c1 f3       	breq	.-16     	; 0x1800 <blockingPrintDebug+0x8>
	{
		delayMS(1);
	}
	return printDebug(s);
    1810:	ce 01       	movw	r24, r28
}
    1812:	df 91       	pop	r29
    1814:	cf 91       	pop	r28
{
	while(toHost == UNDEFINED_HOST)
	{
		delayMS(1);
	}
	return printDebug(s);
    1816:	0c 94 57 0b 	jmp	0x16ae	; 0x16ae <printDebug>

0000181a <freeClockChunk>:
 * Chunk Management Functions
 *****************************************************/

void freeClockChunk(void)
{
	free(thisChunk);
    181a:	80 91 57 20 	lds	r24, 0x2057
    181e:	90 91 58 20 	lds	r25, 0x2058
    1822:	0c 94 d7 21 	jmp	0x43ae	; 0x43ae <free>

00001826 <printSlope>:
	}
#endif */
}

void printSlope(void)
{
    1826:	08 95       	ret

00001828 <getClockForTime>:
	printDebug(s);
#endif*/
}

Time getClockForTime(Time t)
{
    1828:	cf 92       	push	r12
    182a:	df 92       	push	r13
    182c:	ef 92       	push	r14
    182e:	ff 92       	push	r15
#ifdef LINEAR_CORRECTION
	return ((double)t*speedAvg) + offset;
    1830:	0e 94 60 1f 	call	0x3ec0	; 0x3ec0 <__floatunsisf>
    1834:	20 91 48 20 	lds	r18, 0x2048
    1838:	30 91 49 20 	lds	r19, 0x2049
    183c:	40 91 4a 20 	lds	r20, 0x204A
    1840:	50 91 4b 20 	lds	r21, 0x204B
    1844:	0e 94 0d 20 	call	0x401a	; 0x401a <__mulsf3>
    1848:	6b 01       	movw	r12, r22
    184a:	7c 01       	movw	r14, r24
    184c:	60 91 3e 20 	lds	r22, 0x203E
    1850:	70 91 3f 20 	lds	r23, 0x203F
    1854:	80 91 40 20 	lds	r24, 0x2040
    1858:	90 91 41 20 	lds	r25, 0x2041
    185c:	0e 94 62 1f 	call	0x3ec4	; 0x3ec4 <__floatsisf>
    1860:	9b 01       	movw	r18, r22
    1862:	ac 01       	movw	r20, r24
    1864:	c7 01       	movw	r24, r14
    1866:	b6 01       	movw	r22, r12
    1868:	0e 94 63 1e 	call	0x3cc6	; 0x3cc6 <__addsf3>
    186c:	0e 94 34 1f 	call	0x3e68	; 0x3e68 <__fixunssfsi>
#else
	return t + offset;
#endif
}
    1870:	ff 90       	pop	r15
    1872:	ef 90       	pop	r14
    1874:	df 90       	pop	r13
    1876:	cf 90       	pop	r12
    1878:	08 95       	ret

0000187a <getEstimatedGlobalClock>:

Time getEstimatedGlobalClock(void)
{
    187a:	cf 92       	push	r12
    187c:	df 92       	push	r13
    187e:	ef 92       	push	r14
    1880:	ff 92       	push	r15
#ifdef LINEAR_CORRECTION
	return ((double)getTime()*speedAvg) + offset;
    1882:	0e 94 b4 08 	call	0x1168	; 0x1168 <getTime>
    1886:	0e 94 60 1f 	call	0x3ec0	; 0x3ec0 <__floatunsisf>
    188a:	20 91 48 20 	lds	r18, 0x2048
    188e:	30 91 49 20 	lds	r19, 0x2049
    1892:	40 91 4a 20 	lds	r20, 0x204A
    1896:	50 91 4b 20 	lds	r21, 0x204B
    189a:	0e 94 0d 20 	call	0x401a	; 0x401a <__mulsf3>
    189e:	6b 01       	movw	r12, r22
    18a0:	7c 01       	movw	r14, r24
    18a2:	60 91 3e 20 	lds	r22, 0x203E
    18a6:	70 91 3f 20 	lds	r23, 0x203F
    18aa:	80 91 40 20 	lds	r24, 0x2040
    18ae:	90 91 41 20 	lds	r25, 0x2041
    18b2:	0e 94 62 1f 	call	0x3ec4	; 0x3ec4 <__floatsisf>
    18b6:	9b 01       	movw	r18, r22
    18b8:	ac 01       	movw	r20, r24
    18ba:	c7 01       	movw	r24, r14
    18bc:	b6 01       	movw	r22, r12
    18be:	0e 94 63 1e 	call	0x3cc6	; 0x3cc6 <__addsf3>
    18c2:	0e 94 34 1f 	call	0x3e68	; 0x3e68 <__fixunssfsi>
#else
	return getTime() + offset;
#endif
}
    18c6:	ff 90       	pop	r15
    18c8:	ef 90       	pop	r14
    18ca:	df 90       	pop	r13
    18cc:	cf 90       	pop	r12
    18ce:	08 95       	ret

000018d0 <getClock>:

Time getClock(void) {
    18d0:	cf 93       	push	r28
    18d2:	df 93       	push	r29
    18d4:	00 d0       	rcall	.+0      	; 0x18d6 <getClock+0x6>
    18d6:	1f 92       	push	r1
    18d8:	cd b7       	in	r28, 0x3d	; 61
    18da:	de b7       	in	r29, 0x3e	; 62
	return fmax(getEstimatedGlobalClock(), localClockMaxReach);
    18dc:	60 91 36 20 	lds	r22, 0x2036
    18e0:	70 91 37 20 	lds	r23, 0x2037
    18e4:	80 91 38 20 	lds	r24, 0x2038
    18e8:	90 91 39 20 	lds	r25, 0x2039
    18ec:	0e 94 60 1f 	call	0x3ec0	; 0x3ec0 <__floatunsisf>
    18f0:	9b 01       	movw	r18, r22
    18f2:	ac 01       	movw	r20, r24
    18f4:	69 83       	std	Y+1, r22	; 0x01
    18f6:	3a 83       	std	Y+2, r19	; 0x02
    18f8:	4b 83       	std	Y+3, r20	; 0x03
    18fa:	5c 83       	std	Y+4, r21	; 0x04
    18fc:	0e 94 3d 0c 	call	0x187a	; 0x187a <getEstimatedGlobalClock>
    1900:	0e 94 60 1f 	call	0x3ec0	; 0x3ec0 <__floatunsisf>
    1904:	29 81       	ldd	r18, Y+1	; 0x01
    1906:	3a 81       	ldd	r19, Y+2	; 0x02
    1908:	4b 81       	ldd	r20, Y+3	; 0x03
    190a:	5c 81       	ldd	r21, Y+4	; 0x04
    190c:	0e 94 9d 1f 	call	0x3f3a	; 0x3f3a <fmax>
    1910:	0e 94 34 1f 	call	0x3e68	; 0x3e68 <__fixunssfsi>
}
    1914:	24 96       	adiw	r28, 0x04	; 4
    1916:	cd bf       	out	0x3d, r28	; 61
    1918:	de bf       	out	0x3e, r29	; 62
    191a:	df 91       	pop	r29
    191c:	cf 91       	pop	r28
    191e:	08 95       	ret

00001920 <isTimeLeader>:
#ifdef STATIC_TIME_LEADER
	return (getGUID() == TIME_LEADER_ID);
#elif defined MIN_ID_TIME_LEADER
	return isLeader;
#endif
}
    1920:	80 91 4d 20 	lds	r24, 0x204D
    1924:	08 95       	ret

00001926 <isElecting>:
#ifdef MIN_ID_TIME_LEADER
	return electing;
#else
	return 0;
#endif
}
    1926:	80 91 4c 20 	lds	r24, 0x204C
    192a:	08 95       	ret

0000192c <isAClockSyncMessage>:
#endif
	return 0;
}

byte isAClockSyncMessage(Chunk *c)
{	
    192c:	fc 01       	movw	r30, r24
	if ((*((MsgHandler*)c->handler) == RES_SYS_HANDLER) && (c->data[0] == CLOCK_SYNC_MSG) && (c->data[1] == CLOCK_INFO))
    192e:	84 89       	ldd	r24, Z+20	; 0x14
    1930:	95 89       	ldd	r25, Z+21	; 0x15
    1932:	89 2b       	or	r24, r25
    1934:	39 f4       	brne	.+14     	; 0x1944 <isAClockSyncMessage+0x18>
    1936:	80 81       	ld	r24, Z
    1938:	80 36       	cpi	r24, 0x60	; 96
    193a:	21 f4       	brne	.+8      	; 0x1944 <isAClockSyncMessage+0x18>
    193c:	81 e0       	ldi	r24, 0x01	; 1
    193e:	91 81       	ldd	r25, Z+1	; 0x01
    1940:	93 30       	cpi	r25, 0x03	; 3
    1942:	09 f0       	breq	.+2      	; 0x1946 <isAClockSyncMessage+0x1a>
	{
		return 1;
	}
	return 0;
    1944:	80 e0       	ldi	r24, 0x00	; 0
}
    1946:	08 95       	ret

00001948 <insertReceiveTime>:
/******************************************************
 * Clock (Time) Synchronization Functions
 *****************************************************/

void insertReceiveTime(Chunk *c)
{
    1948:	cf 93       	push	r28
    194a:	df 93       	push	r29
    194c:	ec 01       	movw	r28, r24
	Time t = getTime();
    194e:	0e 94 b4 08 	call	0x1168	; 0x1168 <getTime>
	
	//PRINT_BBSIM("insert receive time: %u\n", t);
	c->data[RECEIVE_TIME_INDEX+3] = (byte) (t & 0xFF);
    1952:	69 87       	std	Y+9, r22	; 0x09
	c->data[RECEIVE_TIME_INDEX+2] = (byte) ((t >>  8) & 0xFF);
    1954:	78 87       	std	Y+8, r23	; 0x08
	c->data[RECEIVE_TIME_INDEX+1] = (byte) ((t >> 16) & 0xFF);
    1956:	8f 83       	std	Y+7, r24	; 0x07
	c->data[RECEIVE_TIME_INDEX] = (byte) ((t >> 24) & 0xFF);
    1958:	9e 83       	std	Y+6, r25	; 0x06
}
    195a:	df 91       	pop	r29
    195c:	cf 91       	pop	r28
    195e:	08 95       	ret

00001960 <insertSendTime>:

void insertSendTime(Chunk *c)
{
    1960:	cf 93       	push	r28
    1962:	df 93       	push	r29
    1964:	ec 01       	movw	r28, r24
	Time t = getEstimatedGlobalClock(); // Global Clock
    1966:	0e 94 3d 0c 	call	0x187a	; 0x187a <getEstimatedGlobalClock>
	
	//PRINT_BBSIM("insert send time: %u\n", t);
	c->data[SEND_TIME_INDEX+3] = (byte) (t & 0xFF);
    196a:	6d 83       	std	Y+5, r22	; 0x05
	c->data[SEND_TIME_INDEX+2] = (byte) ((t >>  8) & 0xFF);
    196c:	7c 83       	std	Y+4, r23	; 0x04
	c->data[SEND_TIME_INDEX+1] = (byte) ((t >> 16) & 0xFF);
    196e:	8b 83       	std	Y+3, r24	; 0x03
	c->data[SEND_TIME_INDEX] = (byte) ((t >> 24) & 0xFF);
    1970:	9a 83       	std	Y+2, r25	; 0x02
}
    1972:	df 91       	pop	r29
    1974:	cf 91       	pop	r28
    1976:	08 95       	ret

00001978 <isSynchronized>:
	return n;
}

byte isSynchronized(void)
{
	return (isTimeLeader() || (firstCalibRec > 0));
    1978:	80 91 4d 20 	lds	r24, 0x204D
    197c:	81 11       	cpse	r24, r1
    197e:	11 c0       	rjmp	.+34     	; 0x19a2 <isSynchronized+0x2a>
    1980:	81 e0       	ldi	r24, 0x01	; 1
    1982:	90 e0       	ldi	r25, 0x00	; 0
    1984:	40 91 3a 20 	lds	r20, 0x203A
    1988:	50 91 3b 20 	lds	r21, 0x203B
    198c:	60 91 3c 20 	lds	r22, 0x203C
    1990:	70 91 3d 20 	lds	r23, 0x203D
    1994:	45 2b       	or	r20, r21
    1996:	46 2b       	or	r20, r22
    1998:	47 2b       	or	r20, r23
    199a:	29 f4       	brne	.+10     	; 0x19a6 <isSynchronized+0x2e>
    199c:	80 e0       	ldi	r24, 0x00	; 0
    199e:	90 e0       	ldi	r25, 0x00	; 0
    19a0:	08 95       	ret
    19a2:	81 e0       	ldi	r24, 0x01	; 1
    19a4:	90 e0       	ldi	r25, 0x00	; 0
	//return (isTimeLeader() || ( (firstCalibRec != 0) && ((getEstimatedLocalClock() - firstCalibRec) < CLOCK_VALIDITY_PERIOD )));
}
    19a6:	08 95       	ret

000019a8 <initSTChildren>:
{
	byte p;
	
	for (p = 0; p < NUM_PORTS; p++)
	{
		syncChildren[p] = 0;
    19a8:	10 92 93 25 	sts	0x2593, r1
    19ac:	10 92 94 25 	sts	0x2594, r1
    19b0:	10 92 95 25 	sts	0x2595, r1
    19b4:	10 92 96 25 	sts	0x2596, r1
    19b8:	10 92 97 25 	sts	0x2597, r1
    19bc:	10 92 98 25 	sts	0x2598, r1
    19c0:	08 95       	ret

000019c2 <setSlave>:
}

void setSlave(void) {
	//PRINT_BBSIM("block %u: de-elected!\n", getGUID());
#ifdef MIN_ID_TIME_LEADER
	isLeader = 0;
    19c2:	10 92 4d 20 	sts	0x204D, r1
#endif
	disableTimer(syncTimer);
    19c6:	10 92 85 25 	sts	0x2585, r1
	deregisterTimer(&syncTimer);
    19ca:	85 e7       	ldi	r24, 0x75	; 117
    19cc:	95 e2       	ldi	r25, 0x25	; 37
    19ce:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <deregisterTimer>
	deregisterTimeout(&(syncTimer.t));
    19d2:	87 e7       	ldi	r24, 0x77	; 119
    19d4:	95 e2       	ldi	r25, 0x25	; 37
    19d6:	0c 94 47 09 	jmp	0x128e	; 0x128e <deregisterTimeout>

000019da <scheduleLeaderElection>:
	return broadcastClockChunk(p, data, 4);
}

void scheduleLeaderElection(void)
{
	if (!electing)
    19da:	80 91 4c 20 	lds	r24, 0x204C
    19de:	81 11       	cpse	r24, r1
    19e0:	1c c0       	rjmp	.+56     	; 0x1a1a <scheduleLeaderElection+0x40>
	{
		deregisterTimeout(&leaderElectionTimeOut);
    19e2:	88 e8       	ldi	r24, 0x88	; 136
    19e4:	95 e2       	ldi	r25, 0x25	; 37
    19e6:	0e 94 47 09 	call	0x128e	; 0x128e <deregisterTimeout>
		leaderElectionTimeOut.calltime = getTime() + LEADER_ELECTION_TIMEOUT;
    19ea:	0e 94 b4 08 	call	0x1168	; 0x1168 <getTime>
    19ee:	6c 50       	subi	r22, 0x0C	; 12
    19f0:	7e 4f       	sbci	r23, 0xFE	; 254
    19f2:	8f 4f       	sbci	r24, 0xFF	; 255
    19f4:	9f 4f       	sbci	r25, 0xFF	; 255
    19f6:	60 93 8a 25 	sts	0x258A, r22
    19fa:	70 93 8b 25 	sts	0x258B, r23
    19fe:	80 93 8c 25 	sts	0x258C, r24
    1a02:	90 93 8d 25 	sts	0x258D, r25
		leaderElectionTimeOut.callback = (GenericHandler)(&startLeaderElection);
    1a06:	86 e9       	ldi	r24, 0x96	; 150
    1a08:	9e e0       	ldi	r25, 0x0E	; 14
    1a0a:	80 93 8e 25 	sts	0x258E, r24
    1a0e:	90 93 8f 25 	sts	0x258F, r25
		registerTimeout(&leaderElectionTimeOut);
    1a12:	88 e8       	ldi	r24, 0x88	; 136
    1a14:	95 e2       	ldi	r25, 0x25	; 37
    1a16:	0c 94 ff 08 	jmp	0x11fe	; 0x11fe <registerTimeout>
    1a1a:	08 95       	ret

00001a1c <handleNeighborChange>:

byte handleNeighborChange(PRef p)
{
	PRINT_BBSIM("Neighbor change at Time %u\n", getTime());
#ifdef MIN_ID_TIME_LEADER
	electing = 0;
    1a1c:	10 92 4c 20 	sts	0x204C, r1
	if (!electing)
	{
		scheduleLeaderElection();
    1a20:	0e 94 ed 0c 	call	0x19da	; 0x19da <scheduleLeaderElection>
			requestSync(p);
		}
	}
#endif
	return 0;
}
    1a24:	80 e0       	ldi	r24, 0x00	; 0
    1a26:	08 95       	ret

00001a28 <initClock>:
byte sendClockChunk(PRef p, byte *d, byte s);
byte requestSync(PRef p);

void initClock(void)
{
	offset = 0;
    1a28:	10 92 3e 20 	sts	0x203E, r1
    1a2c:	10 92 3f 20 	sts	0x203F, r1
    1a30:	10 92 40 20 	sts	0x2040, r1
    1a34:	10 92 41 20 	sts	0x2041, r1
	firstCalibRec = 0;
    1a38:	10 92 3a 20 	sts	0x203A, r1
    1a3c:	10 92 3b 20 	sts	0x203B, r1
    1a40:	10 92 3c 20 	sts	0x203C, r1
    1a44:	10 92 3d 20 	sts	0x203D, r1
	localClockMaxReach = 0;
    1a48:	10 92 36 20 	sts	0x2036, r1
    1a4c:	10 92 37 20 	sts	0x2037, r1
    1a50:	10 92 38 20 	sts	0x2038, r1
    1a54:	10 92 39 20 	sts	0x2039, r1

#ifdef LINEAR_CORRECTION
	speedAvg = 1.0;
    1a58:	80 e0       	ldi	r24, 0x00	; 0
    1a5a:	90 e0       	ldi	r25, 0x00	; 0
    1a5c:	a0 e8       	ldi	r26, 0x80	; 128
    1a5e:	bf e3       	ldi	r27, 0x3F	; 63
    1a60:	80 93 48 20 	sts	0x2048, r24
    1a64:	90 93 49 20 	sts	0x2049, r25
    1a68:	a0 93 4a 20 	sts	0x204A, r26
    1a6c:	b0 93 4b 20 	sts	0x204B, r27
	firstCalibSend = 0;
    1a70:	10 92 44 20 	sts	0x2044, r1
    1a74:	10 92 45 20 	sts	0x2045, r1
    1a78:	10 92 46 20 	sts	0x2046, r1
    1a7c:	10 92 47 20 	sts	0x2047, r1
	nbSync = 0;
    1a80:	10 92 42 20 	sts	0x2042, r1
    1a84:	10 92 43 20 	sts	0x2043, r1

#ifdef WAVE
	lastWaveId = 0;
	syncBy = NUM_PORTS;
#elif defined SPANNING_TREE
	initSTChildren();
    1a88:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <initSTChildren>
#ifdef STATIC_TIME_LEADER
	if (isTimeLeader()) {
		setLeader();
	}
#elif defined MIN_ID_TIME_LEADER
	minIdSender = 255;
    1a8c:	8f ef       	ldi	r24, 0xFF	; 255
    1a8e:	80 93 92 25 	sts	0x2592, r24
	minId = getGUID();
    1a92:	0e 94 74 18 	call	0x30e8	; 0x30e8 <getGUID>
    1a96:	80 93 86 25 	sts	0x2586, r24
    1a9a:	90 93 87 25 	sts	0x2587, r25
	electing = 0;
    1a9e:	10 92 4c 20 	sts	0x204C, r1
	setSlave();
    1aa2:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <setSlave>
	scheduleLeaderElection();
    1aa6:	0c 94 ed 0c 	jmp	0x19da	; 0x19da <scheduleLeaderElection>

00001aaa <sendClockChunk>:
{
	free(thisChunk);
}

byte sendClockChunk(PRef p, byte *d, byte s)
{
    1aaa:	8f 92       	push	r8
    1aac:	9f 92       	push	r9
    1aae:	bf 92       	push	r11
    1ab0:	cf 92       	push	r12
    1ab2:	df 92       	push	r13
    1ab4:	ef 92       	push	r14
    1ab6:	ff 92       	push	r15
    1ab8:	0f 93       	push	r16
    1aba:	1f 93       	push	r17
    1abc:	cf 93       	push	r28
    1abe:	df 93       	push	r29
    1ac0:	1f 92       	push	r1
    1ac2:	cd b7       	in	r28, 0x3d	; 61
    1ac4:	de b7       	in	r29, 0x3e	; 62
    1ac6:	b8 2e       	mov	r11, r24
    1ac8:	6b 01       	movw	r12, r22
	Chunk *c=calloc(sizeof(Chunk), 1);
    1aca:	61 e0       	ldi	r22, 0x01	; 1
    1acc:	70 e0       	ldi	r23, 0x00	; 0
    1ace:	88 e1       	ldi	r24, 0x18	; 24
    1ad0:	90 e0       	ldi	r25, 0x00	; 0
    1ad2:	49 83       	std	Y+1, r20	; 0x01
    1ad4:	0e 94 1e 21 	call	0x423c	; 0x423c <calloc>
    1ad8:	4c 01       	movw	r8, r24
	if (c == NULL)
    1ada:	29 81       	ldd	r18, Y+1	; 0x01
    1adc:	00 97       	sbiw	r24, 0x00	; 0
    1ade:	81 f0       	breq	.+32     	; 0x1b00 <sendClockChunk+0x56>
	{
		return 0;
	}
	if (sendMessageToPort(c, p, d, s, (MsgHandler)RES_SYS_HANDLER, (GenericHandler)&freeClockChunk) == 0)
    1ae0:	8d e0       	ldi	r24, 0x0D	; 13
    1ae2:	e8 2e       	mov	r14, r24
    1ae4:	8c e0       	ldi	r24, 0x0C	; 12
    1ae6:	f8 2e       	mov	r15, r24
    1ae8:	00 e0       	ldi	r16, 0x00	; 0
    1aea:	10 e0       	ldi	r17, 0x00	; 0
    1aec:	a6 01       	movw	r20, r12
    1aee:	6b 2d       	mov	r22, r11
    1af0:	c4 01       	movw	r24, r8
    1af2:	0e 94 cb 07 	call	0xf96	; 0xf96 <sendMessageToPort>
    1af6:	81 11       	cpse	r24, r1
    1af8:	05 c0       	rjmp	.+10     	; 0x1b04 <sendClockChunk+0x5a>
	{
		free(c);
    1afa:	c4 01       	movw	r24, r8
    1afc:	0e 94 d7 21 	call	0x43ae	; 0x43ae <free>
byte sendClockChunk(PRef p, byte *d, byte s)
{
	Chunk *c=calloc(sizeof(Chunk), 1);
	if (c == NULL)
	{
		return 0;
    1b00:	80 e0       	ldi	r24, 0x00	; 0
    1b02:	01 c0       	rjmp	.+2      	; 0x1b06 <sendClockChunk+0x5c>
	if (sendMessageToPort(c, p, d, s, (MsgHandler)RES_SYS_HANDLER, (GenericHandler)&freeClockChunk) == 0)
	{
		free(c);
		return 0;
	}
	return 1;
    1b04:	81 e0       	ldi	r24, 0x01	; 1
}
    1b06:	0f 90       	pop	r0
    1b08:	df 91       	pop	r29
    1b0a:	cf 91       	pop	r28
    1b0c:	1f 91       	pop	r17
    1b0e:	0f 91       	pop	r16
    1b10:	ff 90       	pop	r15
    1b12:	ef 90       	pop	r14
    1b14:	df 90       	pop	r13
    1b16:	cf 90       	pop	r12
    1b18:	bf 90       	pop	r11
    1b1a:	9f 90       	pop	r9
    1b1c:	8f 90       	pop	r8
    1b1e:	08 95       	ret

00001b20 <sendGoMsg>:
	
	return sendClockChunk(p, data, 5);
}

byte sendGoMsg(PRef p, uint16_t id)
{
    1b20:	1f 93       	push	r17
    1b22:	cf 93       	push	r28
    1b24:	df 93       	push	r29
    1b26:	00 d0       	rcall	.+0      	; 0x1b28 <sendGoMsg+0x8>
    1b28:	1f 92       	push	r1
    1b2a:	cd b7       	in	r28, 0x3d	; 61
    1b2c:	de b7       	in	r29, 0x3e	; 62
    1b2e:	18 2f       	mov	r17, r24
    1b30:	9b 01       	movw	r18, r22
	byte data[4];
	
	data[0] = CLOCK_SYNC_MSG;
    1b32:	80 e6       	ldi	r24, 0x60	; 96
    1b34:	89 83       	std	Y+1, r24	; 0x01
	data[1] = MIN_ID_TIME_LEADER_ELECTION_GO_MSG;
    1b36:	81 e0       	ldi	r24, 0x01	; 1
    1b38:	8a 83       	std	Y+2, r24	; 0x02
	GUIDIntoChar(id, &(data[2]));
    1b3a:	be 01       	movw	r22, r28
    1b3c:	6d 5f       	subi	r22, 0xFD	; 253
    1b3e:	7f 4f       	sbci	r23, 0xFF	; 255
    1b40:	c9 01       	movw	r24, r18
    1b42:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <GUIDIntoChar>
	
	return sendClockChunk(p, data, 4);
    1b46:	44 e0       	ldi	r20, 0x04	; 4
    1b48:	be 01       	movw	r22, r28
    1b4a:	6f 5f       	subi	r22, 0xFF	; 255
    1b4c:	7f 4f       	sbci	r23, 0xFF	; 255
    1b4e:	81 2f       	mov	r24, r17
    1b50:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <sendClockChunk>
}
    1b54:	24 96       	adiw	r28, 0x04	; 4
    1b56:	cd bf       	out	0x3d, r28	; 61
    1b58:	de bf       	out	0x3e, r29	; 62
    1b5a:	df 91       	pop	r29
    1b5c:	cf 91       	pop	r28
    1b5e:	1f 91       	pop	r17
    1b60:	08 95       	ret

00001b62 <sendBackMsg>:
	deregisterTimeout(&(syncTimer.t));
}

#ifdef MIN_ID_TIME_LEADER
byte sendBackMsg(PRef p, byte a)
{
    1b62:	0f 93       	push	r16
    1b64:	1f 93       	push	r17
    1b66:	cf 93       	push	r28
    1b68:	df 93       	push	r29
    1b6a:	cd b7       	in	r28, 0x3d	; 61
    1b6c:	de b7       	in	r29, 0x3e	; 62
    1b6e:	25 97       	sbiw	r28, 0x05	; 5
    1b70:	cd bf       	out	0x3d, r28	; 61
    1b72:	de bf       	out	0x3e, r29	; 62
    1b74:	18 2f       	mov	r17, r24
    1b76:	06 2f       	mov	r16, r22
	byte data[5];
	
	data[0] = CLOCK_SYNC_MSG;
    1b78:	80 e6       	ldi	r24, 0x60	; 96
    1b7a:	89 83       	std	Y+1, r24	; 0x01
	data[1] = MIN_ID_TIME_LEADER_ELECTION_BACK_MSG;
    1b7c:	82 e0       	ldi	r24, 0x02	; 2
    1b7e:	8a 83       	std	Y+2, r24	; 0x02
	GUIDIntoChar(minId, &(data[2]));
    1b80:	be 01       	movw	r22, r28
    1b82:	6d 5f       	subi	r22, 0xFD	; 253
    1b84:	7f 4f       	sbci	r23, 0xFF	; 255
    1b86:	80 91 86 25 	lds	r24, 0x2586
    1b8a:	90 91 87 25 	lds	r25, 0x2587
    1b8e:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <GUIDIntoChar>
	data[4] = a;
    1b92:	0d 83       	std	Y+5, r16	; 0x05
	
	return sendClockChunk(p, data, 5);
    1b94:	45 e0       	ldi	r20, 0x05	; 5
    1b96:	be 01       	movw	r22, r28
    1b98:	6f 5f       	subi	r22, 0xFF	; 255
    1b9a:	7f 4f       	sbci	r23, 0xFF	; 255
    1b9c:	81 2f       	mov	r24, r17
    1b9e:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <sendClockChunk>
}
    1ba2:	25 96       	adiw	r28, 0x05	; 5
    1ba4:	cd bf       	out	0x3d, r28	; 61
    1ba6:	de bf       	out	0x3e, r29	; 62
    1ba8:	df 91       	pop	r29
    1baa:	cf 91       	pop	r28
    1bac:	1f 91       	pop	r17
    1bae:	0f 91       	pop	r16
    1bb0:	08 95       	ret

00001bb2 <synchronizeNeighbor>:
	//return 1;
	return sendClockChunk(p, data, 2);
}

byte synchronizeNeighbor(PRef p)
{
    1bb2:	cf 93       	push	r28
    1bb4:	df 93       	push	r29
    1bb6:	00 d0       	rcall	.+0      	; 0x1bb8 <synchronizeNeighbor+0x6>
    1bb8:	1f 92       	push	r1
    1bba:	cd b7       	in	r28, 0x3d	; 61
    1bbc:	de b7       	in	r29, 0x3e	; 62
	byte data[4];
	
	data[0] = CLOCK_SYNC_MSG;
    1bbe:	90 e6       	ldi	r25, 0x60	; 96
    1bc0:	99 83       	std	Y+1, r25	; 0x01
	data[1] = CLOCK_INFO;
    1bc2:	93 e0       	ldi	r25, 0x03	; 3
    1bc4:	9a 83       	std	Y+2, r25	; 0x02
#ifdef WAVE
	data[WAVE_ID_INDEX+1] = (byte) (lastWaveId & 0xFF);
	data[WAVE_ID_INDEX] = (byte) ((lastWaveId >>  8) & 0xFF);
	return sendClockChunk(p, data, 4);
#elif defined SPANNING_TREE
	return sendClockChunk(p, data, 2);
    1bc6:	42 e0       	ldi	r20, 0x02	; 2
    1bc8:	be 01       	movw	r22, r28
    1bca:	6f 5f       	subi	r22, 0xFF	; 255
    1bcc:	7f 4f       	sbci	r23, 0xFF	; 255
    1bce:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <sendClockChunk>
#endif
}
    1bd2:	24 96       	adiw	r28, 0x04	; 4
    1bd4:	cd bf       	out	0x3d, r28	; 61
    1bd6:	de bf       	out	0x3e, r29	; 62
    1bd8:	df 91       	pop	r29
    1bda:	cf 91       	pop	r28
    1bdc:	08 95       	ret

00001bde <synchronizeNeighbors>:

byte synchronizeNeighbors(void)
{
    1bde:	ef 92       	push	r14
    1be0:	ff 92       	push	r15
    1be2:	0f 93       	push	r16
    1be4:	1f 93       	push	r17
    1be6:	cf 93       	push	r28
    1be8:	df 93       	push	r29
    1bea:	03 e9       	ldi	r16, 0x93	; 147
    1bec:	15 e2       	ldi	r17, 0x25	; 37
    1bee:	c9 e5       	ldi	r28, 0x59	; 89
    1bf0:	d0 e2       	ldi	r29, 0x20	; 32
	byte p;
	byte n = 0;
    1bf2:	e1 2c       	mov	r14, r1
		}
		synchronizeNeighbor(p);
		n++;
	}
#else
	for( p = 0; p < NUM_PORTS; p++)
    1bf4:	f1 2c       	mov	r15, r1
	{
		if ((syncChildren[p] == 0) || (thisNeighborhood.n[p] == VACANT))
    1bf6:	f8 01       	movw	r30, r16
    1bf8:	81 91       	ld	r24, Z+
    1bfa:	8f 01       	movw	r16, r30
    1bfc:	88 23       	and	r24, r24
    1bfe:	41 f0       	breq	.+16     	; 0x1c10 <synchronizeNeighbors+0x32>
    1c00:	28 81       	ld	r18, Y
    1c02:	39 81       	ldd	r19, Y+1	; 0x01
    1c04:	23 2b       	or	r18, r19
    1c06:	21 f0       	breq	.+8      	; 0x1c10 <synchronizeNeighbors+0x32>
		{
			continue;
		}
		synchronizeNeighbor(p);
    1c08:	8f 2d       	mov	r24, r15
    1c0a:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <synchronizeNeighbor>
		n++;
    1c0e:	e3 94       	inc	r14
		}
		synchronizeNeighbor(p);
		n++;
	}
#else
	for( p = 0; p < NUM_PORTS; p++)
    1c10:	f3 94       	inc	r15
    1c12:	22 96       	adiw	r28, 0x02	; 2
    1c14:	f6 e0       	ldi	r31, 0x06	; 6
    1c16:	ff 12       	cpse	r15, r31
    1c18:	ee cf       	rjmp	.-36     	; 0x1bf6 <synchronizeNeighbors+0x18>
		synchronizeNeighbor(p);
		n++;
	}
#endif
	return n;
}
    1c1a:	8e 2d       	mov	r24, r14
    1c1c:	df 91       	pop	r29
    1c1e:	cf 91       	pop	r28
    1c20:	1f 91       	pop	r17
    1c22:	0f 91       	pop	r16
    1c24:	ff 90       	pop	r15
    1c26:	ef 90       	pop	r14
    1c28:	08 95       	ret

00001c2a <setLeader>:

/******************************************************
 * Time Leader Election Functions
 *****************************************************/

void setLeader(void) {
    1c2a:	cf 93       	push	r28

	PRINT_BBSIM2("block %u: leader!\n", getGUID());
#ifdef MIN_ID_TIME_LEADER
	isLeader = 1;
    1c2c:	c1 e0       	ldi	r28, 0x01	; 1
    1c2e:	c0 93 4d 20 	sts	0x204D, r28
#endif
	syncTimer.period = SYNC_PERIOD;
    1c32:	88 eb       	ldi	r24, 0xB8	; 184
    1c34:	9b e0       	ldi	r25, 0x0B	; 11
    1c36:	a0 e0       	ldi	r26, 0x00	; 0
    1c38:	b0 e0       	ldi	r27, 0x00	; 0
    1c3a:	80 93 81 25 	sts	0x2581, r24
    1c3e:	90 93 82 25 	sts	0x2582, r25
    1c42:	a0 93 83 25 	sts	0x2583, r26
    1c46:	b0 93 84 25 	sts	0x2584, r27
#ifdef WAVE
	syncTimer.t.callback = (GenericHandler)&launchSynchronizationWave;
	launchSynchronizationWave();
#elif defined SPANNING_TREE
	syncTimer.t.callback = (GenericHandler)&synchronizeNeighbors;
    1c4a:	8f ee       	ldi	r24, 0xEF	; 239
    1c4c:	9d e0       	ldi	r25, 0x0D	; 13
    1c4e:	80 93 7d 25 	sts	0x257D, r24
    1c52:	90 93 7e 25 	sts	0x257E, r25
	synchronizeNeighbors();
    1c56:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <synchronizeNeighbors>
#endif
	registerTimer(&(syncTimer));
    1c5a:	85 e7       	ldi	r24, 0x75	; 117
    1c5c:	95 e2       	ldi	r25, 0x25	; 37
    1c5e:	0e 94 c8 09 	call	0x1390	; 0x1390 <registerTimer>
	enableTimer(syncTimer);
    1c62:	c0 93 85 25 	sts	0x2585, r28
}
    1c66:	cf 91       	pop	r28
    1c68:	08 95       	ret

00001c6a <requestSync>:
	c->data[SEND_TIME_INDEX+1] = (byte) ((t >> 16) & 0xFF);
	c->data[SEND_TIME_INDEX] = (byte) ((t >> 24) & 0xFF);
}

byte requestSync(PRef p)
{
    1c6a:	cf 93       	push	r28
    1c6c:	df 93       	push	r29
    1c6e:	1f 92       	push	r1
    1c70:	1f 92       	push	r1
    1c72:	cd b7       	in	r28, 0x3d	; 61
    1c74:	de b7       	in	r29, 0x3e	; 62
	byte data[2];
	
	data[0] = CLOCK_SYNC_MSG;
    1c76:	90 e6       	ldi	r25, 0x60	; 96
    1c78:	99 83       	std	Y+1, r25	; 0x01
	data[1] = REQUEST_CLOCK_SYNC;
    1c7a:	94 e0       	ldi	r25, 0x04	; 4
    1c7c:	9a 83       	std	Y+2, r25	; 0x02
	
	//return 1;
	return sendClockChunk(p, data, 2);
    1c7e:	42 e0       	ldi	r20, 0x02	; 2
    1c80:	be 01       	movw	r22, r28
    1c82:	6f 5f       	subi	r22, 0xFF	; 255
    1c84:	7f 4f       	sbci	r23, 0xFF	; 255
    1c86:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <sendClockChunk>
}
    1c8a:	0f 90       	pop	r0
    1c8c:	0f 90       	pop	r0
    1c8e:	df 91       	pop	r29
    1c90:	cf 91       	pop	r28
    1c92:	08 95       	ret

00001c94 <broadcastClockChunk>:
	}
	return 1;
}

byte broadcastClockChunk(PRef excludedPort, byte *d, byte s)
{
    1c94:	cf 92       	push	r12
    1c96:	df 92       	push	r13
    1c98:	ef 92       	push	r14
    1c9a:	ff 92       	push	r15
    1c9c:	0f 93       	push	r16
    1c9e:	1f 93       	push	r17
    1ca0:	cf 93       	push	r28
    1ca2:	df 93       	push	r29
    1ca4:	d8 2e       	mov	r13, r24
    1ca6:	8b 01       	movw	r16, r22
    1ca8:	c4 2e       	mov	r12, r20
    1caa:	c9 e5       	ldi	r28, 0x59	; 89
    1cac:	d0 e2       	ldi	r29, 0x20	; 32
	byte p;
	byte sent = 0;
    1cae:	e1 2c       	mov	r14, r1
	
	for( p = 0; p < NUM_PORTS; p++)
    1cb0:	f1 2c       	mov	r15, r1
	{
		if ((p == excludedPort) || (thisNeighborhood.n[p] == VACANT))
    1cb2:	fd 14       	cp	r15, r13
    1cb4:	59 f0       	breq	.+22     	; 0x1ccc <broadcastClockChunk+0x38>
    1cb6:	28 81       	ld	r18, Y
    1cb8:	39 81       	ldd	r19, Y+1	; 0x01
    1cba:	23 2b       	or	r18, r19
    1cbc:	39 f0       	breq	.+14     	; 0x1ccc <broadcastClockChunk+0x38>
		{
			continue;
		}
		if(sendClockChunk(p, d, s)) {
    1cbe:	4c 2d       	mov	r20, r12
    1cc0:	b8 01       	movw	r22, r16
    1cc2:	8f 2d       	mov	r24, r15
    1cc4:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <sendClockChunk>
    1cc8:	81 11       	cpse	r24, r1
			sent++;
    1cca:	e3 94       	inc	r14
byte broadcastClockChunk(PRef excludedPort, byte *d, byte s)
{
	byte p;
	byte sent = 0;
	
	for( p = 0; p < NUM_PORTS; p++)
    1ccc:	f3 94       	inc	r15
    1cce:	22 96       	adiw	r28, 0x02	; 2
    1cd0:	86 e0       	ldi	r24, 0x06	; 6
    1cd2:	f8 12       	cpse	r15, r24
    1cd4:	ee cf       	rjmp	.-36     	; 0x1cb2 <broadcastClockChunk+0x1e>
		if(sendClockChunk(p, d, s)) {
			sent++;
		}
	}
	return sent;
}
    1cd6:	8e 2d       	mov	r24, r14
    1cd8:	df 91       	pop	r29
    1cda:	cf 91       	pop	r28
    1cdc:	1f 91       	pop	r17
    1cde:	0f 91       	pop	r16
    1ce0:	ff 90       	pop	r15
    1ce2:	ef 90       	pop	r14
    1ce4:	df 90       	pop	r13
    1ce6:	cf 90       	pop	r12
    1ce8:	08 95       	ret

00001cea <broadcastGoMsg>:
	
	return sendClockChunk(p, data, 4);
}

byte broadcastGoMsg(PRef p, uint16_t id)
{
    1cea:	1f 93       	push	r17
    1cec:	cf 93       	push	r28
    1cee:	df 93       	push	r29
    1cf0:	00 d0       	rcall	.+0      	; 0x1cf2 <broadcastGoMsg+0x8>
    1cf2:	1f 92       	push	r1
    1cf4:	cd b7       	in	r28, 0x3d	; 61
    1cf6:	de b7       	in	r29, 0x3e	; 62
    1cf8:	18 2f       	mov	r17, r24
    1cfa:	9b 01       	movw	r18, r22
	byte data[4];
	
	data[0] = CLOCK_SYNC_MSG;
    1cfc:	80 e6       	ldi	r24, 0x60	; 96
    1cfe:	89 83       	std	Y+1, r24	; 0x01
	data[1] = MIN_ID_TIME_LEADER_ELECTION_GO_MSG;
    1d00:	81 e0       	ldi	r24, 0x01	; 1
    1d02:	8a 83       	std	Y+2, r24	; 0x02
	GUIDIntoChar(id, &(data[2]));
    1d04:	be 01       	movw	r22, r28
    1d06:	6d 5f       	subi	r22, 0xFD	; 253
    1d08:	7f 4f       	sbci	r23, 0xFF	; 255
    1d0a:	c9 01       	movw	r24, r18
    1d0c:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <GUIDIntoChar>
	
	return broadcastClockChunk(p, data, 4);
    1d10:	44 e0       	ldi	r20, 0x04	; 4
    1d12:	be 01       	movw	r22, r28
    1d14:	6f 5f       	subi	r22, 0xFF	; 255
    1d16:	7f 4f       	sbci	r23, 0xFF	; 255
    1d18:	81 2f       	mov	r24, r17
    1d1a:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <broadcastClockChunk>
}
    1d1e:	24 96       	adiw	r28, 0x04	; 4
    1d20:	cd bf       	out	0x3d, r28	; 61
    1d22:	de bf       	out	0x3e, r29	; 62
    1d24:	df 91       	pop	r29
    1d26:	cf 91       	pop	r28
    1d28:	1f 91       	pop	r17
    1d2a:	08 95       	ret

00001d2c <startLeaderElection>:
		//printf("too late!\n");
	}
}

void startLeaderElection(void)
{
    1d2c:	cf 93       	push	r28
    1d2e:	df 93       	push	r29
	//static int i = 0;
	//i++;
	//printf("block %u: start election function at %u\n", getGUID(), getTime());
	//printf("%d election\n", i);
	if (!electing) {
    1d30:	80 91 4c 20 	lds	r24, 0x204C
    1d34:	81 11       	cpse	r24, r1
    1d36:	30 c0       	rjmp	.+96     	; 0x1d98 <startLeaderElection+0x6c>
	//	printf("block %u: start - election\n", getGUID()); 
		setSlave();
    1d38:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <setSlave>
		minId = getGUID();
    1d3c:	0e 94 74 18 	call	0x30e8	; 0x30e8 <getGUID>
    1d40:	80 93 86 25 	sts	0x2586, r24
    1d44:	90 93 87 25 	sts	0x2587, r25
		minIdSender = 255;
    1d48:	8f ef       	ldi	r24, 0xFF	; 255
    1d4a:	80 93 92 25 	sts	0x2592, r24
		electing = 1;
    1d4e:	81 e0       	ldi	r24, 0x01	; 1
    1d50:	80 93 4c 20 	sts	0x204C, r24
		initSTChildren();
    1d54:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <initSTChildren>
		nbNeededAnswers = broadcastGoMsg(255, getGUID());
    1d58:	0e 94 74 18 	call	0x30e8	; 0x30e8 <getGUID>
    1d5c:	bc 01       	movw	r22, r24
    1d5e:	8f ef       	ldi	r24, 0xFF	; 255
    1d60:	0e 94 75 0e 	call	0x1cea	; 0x1cea <broadcastGoMsg>
    1d64:	80 93 74 25 	sts	0x2574, r24
		if (nbNeededAnswers == 0) 
    1d68:	81 11       	cpse	r24, r1
    1d6a:	16 c0       	rjmp	.+44     	; 0x1d98 <startLeaderElection+0x6c>
		{
			electing = 0;
    1d6c:	10 92 4c 20 	sts	0x204C, r1
			if (minId == getGUID())
    1d70:	c0 91 86 25 	lds	r28, 0x2586
    1d74:	d0 91 87 25 	lds	r29, 0x2587
    1d78:	0e 94 74 18 	call	0x30e8	; 0x30e8 <getGUID>
    1d7c:	c8 17       	cp	r28, r24
    1d7e:	d9 07       	cpc	r29, r25
    1d80:	21 f4       	brne	.+8      	; 0x1d8a <startLeaderElection+0x5e>
			{
				sendBackMsg(minIdSender, 1);
			}
		}
	}
}
    1d82:	df 91       	pop	r29
    1d84:	cf 91       	pop	r28
		{
			electing = 0;
			if (minId == getGUID())
			{
				//printf("block %u: direct win\n", getGUID());
				setLeader();
    1d86:	0c 94 15 0e 	jmp	0x1c2a	; 0x1c2a <setLeader>
			}
			else 
			{
				sendBackMsg(minIdSender, 1);
    1d8a:	61 e0       	ldi	r22, 0x01	; 1
    1d8c:	80 91 92 25 	lds	r24, 0x2592
			}
		}
	}
}
    1d90:	df 91       	pop	r29
    1d92:	cf 91       	pop	r28
				//printf("block %u: direct win\n", getGUID());
				setLeader();
			}
			else 
			{
				sendBackMsg(minIdSender, 1);
    1d94:	0c 94 b1 0d 	jmp	0x1b62	; 0x1b62 <sendBackMsg>
			}
		}
	}
}
    1d98:	df 91       	pop	r29
    1d9a:	cf 91       	pop	r28
    1d9c:	08 95       	ret

00001d9e <handleClockSyncMessage>:
	return 0;
#endif
}

byte handleClockSyncMessage(void)
{
    1d9e:	2f 92       	push	r2
    1da0:	3f 92       	push	r3
    1da2:	4f 92       	push	r4
    1da4:	5f 92       	push	r5
    1da6:	6f 92       	push	r6
    1da8:	7f 92       	push	r7
    1daa:	8f 92       	push	r8
    1dac:	9f 92       	push	r9
    1dae:	af 92       	push	r10
    1db0:	bf 92       	push	r11
    1db2:	cf 92       	push	r12
    1db4:	df 92       	push	r13
    1db6:	ef 92       	push	r14
    1db8:	ff 92       	push	r15
    1dba:	0f 93       	push	r16
    1dbc:	1f 93       	push	r17
    1dbe:	cf 93       	push	r28
    1dc0:	df 93       	push	r29
    1dc2:	cd b7       	in	r28, 0x3d	; 61
    1dc4:	de b7       	in	r29, 0x3e	; 62
    1dc6:	28 97       	sbiw	r28, 0x08	; 8
    1dc8:	cd bf       	out	0x3d, r28	; 61
    1dca:	de bf       	out	0x3e, r29	; 62
	if (thisChunk == NULL) 
    1dcc:	00 91 57 20 	lds	r16, 0x2057
    1dd0:	10 91 58 20 	lds	r17, 0x2058
    1dd4:	01 15       	cp	r16, r1
    1dd6:	11 05       	cpc	r17, r1
    1dd8:	09 f4       	brne	.+2      	; 0x1ddc <handleClockSyncMessage+0x3e>
    1dda:	8c c1       	rjmp	.+792    	; 0x20f4 <handleClockSyncMessage+0x356>
	{
		return 0;
	}
    
	switch(thisChunk->data[1])
    1ddc:	f8 01       	movw	r30, r16
    1dde:	81 81       	ldd	r24, Z+1	; 0x01
    1de0:	82 30       	cpi	r24, 0x02	; 2
    1de2:	09 f4       	brne	.+2      	; 0x1de6 <handleClockSyncMessage+0x48>
    1de4:	59 c1       	rjmp	.+690    	; 0x2098 <handleClockSyncMessage+0x2fa>
    1de6:	20 f4       	brcc	.+8      	; 0x1df0 <handleClockSyncMessage+0x52>
    1de8:	81 30       	cpi	r24, 0x01	; 1
    1dea:	09 f0       	breq	.+2      	; 0x1dee <handleClockSyncMessage+0x50>
    1dec:	85 c1       	rjmp	.+778    	; 0x20f8 <handleClockSyncMessage+0x35a>
    1dee:	fc c0       	rjmp	.+504    	; 0x1fe8 <handleClockSyncMessage+0x24a>
    1df0:	83 30       	cpi	r24, 0x03	; 3
    1df2:	21 f0       	breq	.+8      	; 0x1dfc <handleClockSyncMessage+0x5e>
    1df4:	84 30       	cpi	r24, 0x04	; 4
    1df6:	09 f0       	breq	.+2      	; 0x1dfa <handleClockSyncMessage+0x5c>
    1df8:	7f c1       	rjmp	.+766    	; 0x20f8 <handleClockSyncMessage+0x35a>
    1dfa:	eb c0       	rjmp	.+470    	; 0x1fd2 <handleClockSyncMessage+0x234>
			}
			lastWaveId = waveId;
			syncBy = faceNum(thisChunk);
#endif		
			
			sendTime  = (Time)(thisChunk->data[SEND_TIME_INDEX+3]) & 0xFF;
    1dfc:	f8 01       	movw	r30, r16
    1dfe:	c5 80       	ldd	r12, Z+5	; 0x05
			sendTime |= ((Time)(thisChunk->data[SEND_TIME_INDEX+2]) << 8) & 0xFF00;
			sendTime |= ((Time)(thisChunk->data[SEND_TIME_INDEX+1]) << 16) & 0xFF0000;
			sendTime |= ((Time)(thisChunk->data[SEND_TIME_INDEX]) << 24)  & 0xFF000000;
    1e00:	82 81       	ldd	r24, Z+2	; 0x02
    1e02:	d1 2c       	mov	r13, r1
    1e04:	e1 2c       	mov	r14, r1
    1e06:	f1 2c       	mov	r15, r1
			lastWaveId = waveId;
			syncBy = faceNum(thisChunk);
#endif		
			
			sendTime  = (Time)(thisChunk->data[SEND_TIME_INDEX+3]) & 0xFF;
			sendTime |= ((Time)(thisChunk->data[SEND_TIME_INDEX+2]) << 8) & 0xFF00;
    1e08:	f8 2a       	or	r15, r24
    1e0a:	84 81       	ldd	r24, Z+4	; 0x04
			sendTime |= ((Time)(thisChunk->data[SEND_TIME_INDEX+1]) << 16) & 0xFF0000;
    1e0c:	d8 2a       	or	r13, r24
    1e0e:	83 81       	ldd	r24, Z+3	; 0x03
			sendTime |= ((Time)(thisChunk->data[SEND_TIME_INDEX]) << 24)  & 0xFF000000;
    1e10:	e8 2a       	or	r14, r24
	
			receiveTime  = (Time)(thisChunk->data[RECEIVE_TIME_INDEX+3]) & 0xFF;
    1e12:	81 84       	ldd	r8, Z+9	; 0x09
			receiveTime |= ((Time)(thisChunk->data[RECEIVE_TIME_INDEX+2]) << 8) & 0xFF00;
			receiveTime |= ((Time)(thisChunk->data[RECEIVE_TIME_INDEX+1]) << 16) & 0xFF0000;
			receiveTime |= ((Time)(thisChunk->data[RECEIVE_TIME_INDEX]) << 24)  & 0xFF000000;
    1e14:	86 81       	ldd	r24, Z+6	; 0x06
    1e16:	91 2c       	mov	r9, r1
    1e18:	a1 2c       	mov	r10, r1
    1e1a:	b1 2c       	mov	r11, r1
			sendTime |= ((Time)(thisChunk->data[SEND_TIME_INDEX+2]) << 8) & 0xFF00;
			sendTime |= ((Time)(thisChunk->data[SEND_TIME_INDEX+1]) << 16) & 0xFF0000;
			sendTime |= ((Time)(thisChunk->data[SEND_TIME_INDEX]) << 24)  & 0xFF000000;
	
			receiveTime  = (Time)(thisChunk->data[RECEIVE_TIME_INDEX+3]) & 0xFF;
			receiveTime |= ((Time)(thisChunk->data[RECEIVE_TIME_INDEX+2]) << 8) & 0xFF00;
    1e1c:	b8 2a       	or	r11, r24
    1e1e:	80 85       	ldd	r24, Z+8	; 0x08
			receiveTime |= ((Time)(thisChunk->data[RECEIVE_TIME_INDEX+1]) << 16) & 0xFF0000;
    1e20:	98 2a       	or	r9, r24
    1e22:	87 81       	ldd	r24, Z+7	; 0x07
			receiveTime |= ((Time)(thisChunk->data[RECEIVE_TIME_INDEX]) << 24)  & 0xFF000000;
    1e24:	a8 2a       	or	r10, r24
			
			localClockMaxReach = fmax(getClock(), localClockMaxReach);
    1e26:	60 91 36 20 	lds	r22, 0x2036
    1e2a:	70 91 37 20 	lds	r23, 0x2037
    1e2e:	80 91 38 20 	lds	r24, 0x2038
    1e32:	90 91 39 20 	lds	r25, 0x2039
    1e36:	0e 94 60 1f 	call	0x3ec0	; 0x3ec0 <__floatunsisf>
    1e3a:	9b 01       	movw	r18, r22
    1e3c:	ac 01       	movw	r20, r24
    1e3e:	6d 83       	std	Y+5, r22	; 0x05
    1e40:	3e 83       	std	Y+6, r19	; 0x06
    1e42:	4f 83       	std	Y+7, r20	; 0x07
    1e44:	58 87       	std	Y+8, r21	; 0x08
    1e46:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <getClock>
    1e4a:	0e 94 60 1f 	call	0x3ec0	; 0x3ec0 <__floatunsisf>
    1e4e:	2d 81       	ldd	r18, Y+5	; 0x05
    1e50:	3e 81       	ldd	r19, Y+6	; 0x06
    1e52:	4f 81       	ldd	r20, Y+7	; 0x07
    1e54:	58 85       	ldd	r21, Y+8	; 0x08
    1e56:	0e 94 9d 1f 	call	0x3f3a	; 0x3f3a <fmax>
    1e5a:	0e 94 34 1f 	call	0x3e68	; 0x3e68 <__fixunssfsi>
    1e5e:	60 93 36 20 	sts	0x2036, r22
    1e62:	70 93 37 20 	sts	0x2037, r23
    1e66:	80 93 38 20 	sts	0x2038, r24
    1e6a:	90 93 39 20 	sts	0x2039, r25
			estimatedGlobalTime = sendTime + ESTIMATED_TRANSMISSION_DELAY;
    1e6e:	f6 e0       	ldi	r31, 0x06	; 6
    1e70:	cf 0e       	add	r12, r31
    1e72:	d1 1c       	adc	r13, r1
    1e74:	e1 1c       	adc	r14, r1
    1e76:	f1 1c       	adc	r15, r1

#ifdef LINEAR_CORRECTION
	#ifdef TEST_LINEAR_CORRECTION
		if(nbSync < IGNORE_AFTER) {
	#endif
			nbSync++;
    1e78:	80 91 42 20 	lds	r24, 0x2042
    1e7c:	90 91 43 20 	lds	r25, 0x2043
    1e80:	01 96       	adiw	r24, 0x01	; 1
    1e82:	80 93 42 20 	sts	0x2042, r24
    1e86:	90 93 43 20 	sts	0x2043, r25
			if ((nbSync == 1) || ( (getTime() - firstCalibRec) < (SYNC_PERIOD/2))) {
    1e8a:	01 97       	sbiw	r24, 0x01	; 1
    1e8c:	79 f4       	brne	.+30     	; 0x1eac <handleClockSyncMessage+0x10e>
				offset = estimatedGlobalTime - receiveTime;
    1e8e:	d7 01       	movw	r26, r14
    1e90:	c6 01       	movw	r24, r12
    1e92:	88 19       	sub	r24, r8
    1e94:	99 09       	sbc	r25, r9
    1e96:	aa 09       	sbc	r26, r10
    1e98:	bb 09       	sbc	r27, r11
    1e9a:	80 93 3e 20 	sts	0x203E, r24
    1e9e:	90 93 3f 20 	sts	0x203F, r25
    1ea2:	a0 93 40 20 	sts	0x2040, r26
    1ea6:	b0 93 41 20 	sts	0x2041, r27
    1eaa:	80 c0       	rjmp	.+256    	; 0x1fac <handleClockSyncMessage+0x20e>
#ifdef LINEAR_CORRECTION
	#ifdef TEST_LINEAR_CORRECTION
		if(nbSync < IGNORE_AFTER) {
	#endif
			nbSync++;
			if ((nbSync == 1) || ( (getTime() - firstCalibRec) < (SYNC_PERIOD/2))) {
    1eac:	0e 94 b4 08 	call	0x1168	; 0x1168 <getTime>
    1eb0:	40 90 3a 20 	lds	r4, 0x203A
    1eb4:	50 90 3b 20 	lds	r5, 0x203B
    1eb8:	60 90 3c 20 	lds	r6, 0x203C
    1ebc:	70 90 3d 20 	lds	r7, 0x203D
    1ec0:	64 19       	sub	r22, r4
    1ec2:	75 09       	sbc	r23, r5
    1ec4:	86 09       	sbc	r24, r6
    1ec6:	97 09       	sbc	r25, r7
    1ec8:	6c 3d       	cpi	r22, 0xDC	; 220
    1eca:	75 40       	sbci	r23, 0x05	; 5
    1ecc:	81 05       	cpc	r24, r1
    1ece:	91 05       	cpc	r25, r1
    1ed0:	f0 f2       	brcs	.-68     	; 0x1e8e <handleClockSyncMessage+0xf0>
				firstCalibSend = estimatedGlobalTime;
				firstCalibRec = receiveTime;
			} else {
				//double n = (double) nbSync;
				//speedAvg = (speedAvg*(n-1) + observedSpeed) / n;
				speedAvg = ((double) (estimatedGlobalTime - firstCalibSend))/ ((double) (receiveTime - firstCalibRec));
    1ed2:	80 91 44 20 	lds	r24, 0x2044
    1ed6:	90 91 45 20 	lds	r25, 0x2045
    1eda:	a0 91 46 20 	lds	r26, 0x2046
    1ede:	b0 91 47 20 	lds	r27, 0x2047
    1ee2:	a7 01       	movw	r20, r14
    1ee4:	96 01       	movw	r18, r12
    1ee6:	28 1b       	sub	r18, r24
    1ee8:	39 0b       	sbc	r19, r25
    1eea:	4a 0b       	sbc	r20, r26
    1eec:	5b 0b       	sbc	r21, r27
    1eee:	ca 01       	movw	r24, r20
    1ef0:	b9 01       	movw	r22, r18
    1ef2:	0e 94 60 1f 	call	0x3ec0	; 0x3ec0 <__floatunsisf>
    1ef6:	69 83       	std	Y+1, r22	; 0x01
    1ef8:	7a 83       	std	Y+2, r23	; 0x02
    1efa:	8b 83       	std	Y+3, r24	; 0x03
    1efc:	9c 83       	std	Y+4, r25	; 0x04
    1efe:	c5 01       	movw	r24, r10
    1f00:	b4 01       	movw	r22, r8
    1f02:	64 19       	sub	r22, r4
    1f04:	75 09       	sbc	r23, r5
    1f06:	86 09       	sbc	r24, r6
    1f08:	97 09       	sbc	r25, r7
    1f0a:	0e 94 60 1f 	call	0x3ec0	; 0x3ec0 <__floatunsisf>
    1f0e:	9b 01       	movw	r18, r22
    1f10:	ac 01       	movw	r20, r24
    1f12:	69 81       	ldd	r22, Y+1	; 0x01
    1f14:	7a 81       	ldd	r23, Y+2	; 0x02
    1f16:	8b 81       	ldd	r24, Y+3	; 0x03
    1f18:	9c 81       	ldd	r25, Y+4	; 0x04
    1f1a:	0e 94 c7 1e 	call	0x3d8e	; 0x3d8e <__divsf3>
    1f1e:	1b 01       	movw	r2, r22
    1f20:	18 2f       	mov	r17, r24
    1f22:	09 2f       	mov	r16, r25
    1f24:	98 01       	movw	r18, r16
    1f26:	86 2f       	mov	r24, r22
    1f28:	93 2d       	mov	r25, r3
    1f2a:	a3 2f       	mov	r26, r19
    1f2c:	b2 2f       	mov	r27, r18
    1f2e:	80 93 48 20 	sts	0x2048, r24
    1f32:	90 93 49 20 	sts	0x2049, r25
    1f36:	a0 93 4a 20 	sts	0x204A, r26
    1f3a:	b0 93 4b 20 	sts	0x204B, r27
				offset = round(estimatedGlobalTime - (speedAvg*((double)getTime())));
    1f3e:	0e 94 b4 08 	call	0x1168	; 0x1168 <getTime>
    1f42:	69 83       	std	Y+1, r22	; 0x01
    1f44:	7a 83       	std	Y+2, r23	; 0x02
    1f46:	8b 83       	std	Y+3, r24	; 0x03
    1f48:	9c 83       	std	Y+4, r25	; 0x04
    1f4a:	c7 01       	movw	r24, r14
    1f4c:	b6 01       	movw	r22, r12
    1f4e:	0e 94 60 1f 	call	0x3ec0	; 0x3ec0 <__floatunsisf>
    1f52:	2b 01       	movw	r4, r22
    1f54:	3c 01       	movw	r6, r24
    1f56:	69 81       	ldd	r22, Y+1	; 0x01
    1f58:	7a 81       	ldd	r23, Y+2	; 0x02
    1f5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f5c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f5e:	0e 94 60 1f 	call	0x3ec0	; 0x3ec0 <__floatunsisf>
    1f62:	9b 01       	movw	r18, r22
    1f64:	ac 01       	movw	r20, r24
    1f66:	f8 01       	movw	r30, r16
    1f68:	62 2d       	mov	r22, r2
    1f6a:	73 2d       	mov	r23, r3
    1f6c:	8f 2f       	mov	r24, r31
    1f6e:	9e 2f       	mov	r25, r30
    1f70:	0e 94 0d 20 	call	0x401a	; 0x401a <__mulsf3>
    1f74:	9b 01       	movw	r18, r22
    1f76:	ac 01       	movw	r20, r24
    1f78:	c3 01       	movw	r24, r6
    1f7a:	b2 01       	movw	r22, r4
    1f7c:	0e 94 62 1e 	call	0x3cc4	; 0x3cc4 <__subsf3>
    1f80:	0e 94 70 20 	call	0x40e0	; 0x40e0 <round>
    1f84:	0e 94 2f 1f 	call	0x3e5e	; 0x3e5e <__fixsfsi>
    1f88:	60 93 3e 20 	sts	0x203E, r22
    1f8c:	70 93 3f 20 	sts	0x203F, r23
    1f90:	80 93 40 20 	sts	0x2040, r24
    1f94:	90 93 41 20 	sts	0x2041, r25
				#ifdef RESET_SLOPE_AFTER
				if ((nbSync % RESET_SLOPE_AFTER) == 0 ) 
    1f98:	80 91 42 20 	lds	r24, 0x2042
    1f9c:	90 91 43 20 	lds	r25, 0x2043
    1fa0:	65 e0       	ldi	r22, 0x05	; 5
    1fa2:	70 e0       	ldi	r23, 0x00	; 0
    1fa4:	0e 94 d0 20 	call	0x41a0	; 0x41a0 <__udivmodhi4>
    1fa8:	89 2b       	or	r24, r25
    1faa:	81 f4       	brne	.+32     	; 0x1fcc <handleClockSyncMessage+0x22e>
				{
					firstCalibSend = estimatedGlobalTime;
    1fac:	c0 92 44 20 	sts	0x2044, r12
    1fb0:	d0 92 45 20 	sts	0x2045, r13
    1fb4:	e0 92 46 20 	sts	0x2046, r14
    1fb8:	f0 92 47 20 	sts	0x2047, r15
					firstCalibRec = receiveTime;
    1fbc:	80 92 3a 20 	sts	0x203A, r8
    1fc0:	90 92 3b 20 	sts	0x203B, r9
    1fc4:	a0 92 3c 20 	sts	0x203C, r10
    1fc8:	b0 92 3d 20 	sts	0x203D, r11
			char s[150];
			snprintf(s, 150*sizeof(char), "s: %lu, r: %lu, o: %d, t: %lu, c: %lu", sendTime, receiveTime, offset, getTime(), getClock());
			s[149] = '\0';
			printDebug(s);
#endif*/
			synchronizeNeighbors();
    1fcc:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <synchronizeNeighbors>
    1fd0:	93 c0       	rjmp	.+294    	; 0x20f8 <handleClockSyncMessage+0x35a>
			break;
		}
		
		case REQUEST_CLOCK_SYNC :
		{	PRINT_BBSIM("block %u: sync request from %u\n", getGUID(), thisNeighborhood.n[faceNum(thisChunk)]);
			if(isSynchronized())
    1fd2:	0e 94 bc 0c 	call	0x1978	; 0x1978 <isSynchronized>
    1fd6:	81 11       	cpse	r24, r1
    1fd8:	01 c0       	rjmp	.+2      	; 0x1fdc <handleClockSyncMessage+0x23e>
    1fda:	8e c0       	rjmp	.+284    	; 0x20f8 <handleClockSyncMessage+0x35a>
			{
				synchronizeNeighbor(faceNum(thisChunk));
    1fdc:	f8 01       	movw	r30, r16
    1fde:	81 89       	ldd	r24, Z+17	; 0x11
    1fe0:	87 70       	andi	r24, 0x07	; 7
    1fe2:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <synchronizeNeighbor>
    1fe6:	88 c0       	rjmp	.+272    	; 0x20f8 <handleClockSyncMessage+0x35a>
			break;
		}
#ifdef MIN_ID_TIME_LEADER
		case MIN_ID_TIME_LEADER_ELECTION_GO_MSG :
		{
			uint16_t id = charToGUID(&(thisChunk->data[2]));
    1fe8:	c8 01       	movw	r24, r16
    1fea:	02 96       	adiw	r24, 0x02	; 2
    1fec:	0e 94 ff 03 	call	0x7fe	; 0x7fe <charToGUID>
    1ff0:	8c 01       	movw	r16, r24
			
			if (!electing)
    1ff2:	80 91 4c 20 	lds	r24, 0x204C
    1ff6:	81 11       	cpse	r24, r1
    1ff8:	06 c0       	rjmp	.+12     	; 0x2006 <handleClockSyncMessage+0x268>
			{
				PRINT_BBSIM("block %u: go msg - election\n", getGUID()); 
				deregisterTimeout(&leaderElectionTimeOut);
    1ffa:	88 e8       	ldi	r24, 0x88	; 136
    1ffc:	95 e2       	ldi	r25, 0x25	; 37
    1ffe:	0e 94 47 09 	call	0x128e	; 0x128e <deregisterTimeout>
				startLeaderElection();
    2002:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <startLeaderElection>
			}
			
			if (id == minId)
    2006:	80 91 86 25 	lds	r24, 0x2586
    200a:	90 91 87 25 	lds	r25, 0x2587
    200e:	08 17       	cp	r16, r24
    2010:	19 07       	cpc	r17, r25
    2012:	49 f4       	brne	.+18     	; 0x2026 <handleClockSyncMessage+0x288>
			{
				sendBackMsg(faceNum(thisChunk), 0);
    2014:	e0 91 57 20 	lds	r30, 0x2057
    2018:	f0 91 58 20 	lds	r31, 0x2058
    201c:	81 89       	ldd	r24, Z+17	; 0x11
    201e:	60 e0       	ldi	r22, 0x00	; 0
    2020:	87 70       	andi	r24, 0x07	; 7
    2022:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <sendBackMsg>
			}
			if (id < minId)
    2026:	80 91 86 25 	lds	r24, 0x2586
    202a:	90 91 87 25 	lds	r25, 0x2587
    202e:	08 17       	cp	r16, r24
    2030:	19 07       	cpc	r17, r25
    2032:	08 f0       	brcs	.+2      	; 0x2036 <handleClockSyncMessage+0x298>
    2034:	61 c0       	rjmp	.+194    	; 0x20f8 <handleClockSyncMessage+0x35a>
			{
				minId = id;
    2036:	00 93 86 25 	sts	0x2586, r16
    203a:	10 93 87 25 	sts	0x2587, r17
				minIdSender = faceNum(thisChunk);
    203e:	e0 91 57 20 	lds	r30, 0x2057
    2042:	f0 91 58 20 	lds	r31, 0x2058
    2046:	81 89       	ldd	r24, Z+17	; 0x11
    2048:	87 70       	andi	r24, 0x07	; 7
    204a:	80 93 92 25 	sts	0x2592, r24
				initSTChildren();
    204e:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <initSTChildren>
				nbNeededAnswers = broadcastGoMsg(faceNum(thisChunk), id);
    2052:	e0 91 57 20 	lds	r30, 0x2057
    2056:	f0 91 58 20 	lds	r31, 0x2058
    205a:	81 89       	ldd	r24, Z+17	; 0x11
    205c:	b8 01       	movw	r22, r16
    205e:	87 70       	andi	r24, 0x07	; 7
    2060:	0e 94 75 0e 	call	0x1cea	; 0x1cea <broadcastGoMsg>
    2064:	80 93 74 25 	sts	0x2574, r24
				
				if (nbNeededAnswers == 0) 
    2068:	81 11       	cpse	r24, r1
    206a:	46 c0       	rjmp	.+140    	; 0x20f8 <handleClockSyncMessage+0x35a>
				{
					electing = 0;
    206c:	10 92 4c 20 	sts	0x204C, r1
					if (minId == getGUID())
    2070:	00 91 86 25 	lds	r16, 0x2586
    2074:	10 91 87 25 	lds	r17, 0x2587
    2078:	0e 94 74 18 	call	0x30e8	; 0x30e8 <getGUID>
    207c:	08 17       	cp	r16, r24
    207e:	19 07       	cpc	r17, r25
    2080:	19 f4       	brne	.+6      	; 0x2088 <handleClockSyncMessage+0x2ea>
					{
						setLeader();
    2082:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <setLeader>
    2086:	38 c0       	rjmp	.+112    	; 0x20f8 <handleClockSyncMessage+0x35a>
					}
					else 
					{
						sendBackMsg(faceNum(thisChunk), 1);
    2088:	e0 91 57 20 	lds	r30, 0x2057
    208c:	f0 91 58 20 	lds	r31, 0x2058
    2090:	81 89       	ldd	r24, Z+17	; 0x11
    2092:	61 e0       	ldi	r22, 0x01	; 1
    2094:	87 70       	andi	r24, 0x07	; 7
    2096:	2b c0       	rjmp	.+86     	; 0x20ee <handleClockSyncMessage+0x350>
			}
			break;
		}
		case MIN_ID_TIME_LEADER_ELECTION_BACK_MSG :
		{
			uint16_t id = charToGUID(&(thisChunk->data[2]));
    2098:	c8 01       	movw	r24, r16
    209a:	02 96       	adiw	r24, 0x02	; 2
    209c:	0e 94 ff 03 	call	0x7fe	; 0x7fe <charToGUID>
    20a0:	8c 01       	movw	r16, r24
			
			if (id == minId)
    20a2:	80 91 86 25 	lds	r24, 0x2586
    20a6:	90 91 87 25 	lds	r25, 0x2587
    20aa:	08 17       	cp	r16, r24
    20ac:	19 07       	cpc	r17, r25
    20ae:	21 f5       	brne	.+72     	; 0x20f8 <handleClockSyncMessage+0x35a>
			{
				nbNeededAnswers--;
    20b0:	80 91 74 25 	lds	r24, 0x2574
    20b4:	81 50       	subi	r24, 0x01	; 1
    20b6:	80 93 74 25 	sts	0x2574, r24
				syncChildren[faceNum(thisChunk)] = thisChunk->data[4];
    20ba:	a0 91 57 20 	lds	r26, 0x2057
    20be:	b0 91 58 20 	lds	r27, 0x2058
    20c2:	51 96       	adiw	r26, 0x11	; 17
    20c4:	ec 91       	ld	r30, X
    20c6:	51 97       	sbiw	r26, 0x11	; 17
    20c8:	e7 70       	andi	r30, 0x07	; 7
    20ca:	f0 e0       	ldi	r31, 0x00	; 0
    20cc:	ed 56       	subi	r30, 0x6D	; 109
    20ce:	fa 4d       	sbci	r31, 0xDA	; 218
    20d0:	14 96       	adiw	r26, 0x04	; 4
    20d2:	9c 91       	ld	r25, X
    20d4:	90 83       	st	Z, r25
				if (nbNeededAnswers == 0)
    20d6:	81 11       	cpse	r24, r1
    20d8:	0f c0       	rjmp	.+30     	; 0x20f8 <handleClockSyncMessage+0x35a>
				{
					electing = 0;
    20da:	10 92 4c 20 	sts	0x204C, r1
					if (id == getGUID())
    20de:	0e 94 74 18 	call	0x30e8	; 0x30e8 <getGUID>
    20e2:	08 17       	cp	r16, r24
    20e4:	19 07       	cpc	r17, r25
    20e6:	69 f2       	breq	.-102    	; 0x2082 <handleClockSyncMessage+0x2e4>
					{
						setLeader();
					}
					else
					{
						sendBackMsg(minIdSender, 1);
    20e8:	61 e0       	ldi	r22, 0x01	; 1
    20ea:	80 91 92 25 	lds	r24, 0x2592
    20ee:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <sendBackMsg>
    20f2:	02 c0       	rjmp	.+4      	; 0x20f8 <handleClockSyncMessage+0x35a>

byte handleClockSyncMessage(void)
{
	if (thisChunk == NULL) 
	{
		return 0;
    20f4:	80 e0       	ldi	r24, 0x00	; 0
    20f6:	01 c0       	rjmp	.+2      	; 0x20fa <handleClockSyncMessage+0x35c>
			}
			break;
		}
#endif
	}
	return 1;
    20f8:	81 e0       	ldi	r24, 0x01	; 1
}
    20fa:	28 96       	adiw	r28, 0x08	; 8
    20fc:	cd bf       	out	0x3d, r28	; 61
    20fe:	de bf       	out	0x3e, r29	; 62
    2100:	df 91       	pop	r29
    2102:	cf 91       	pop	r28
    2104:	1f 91       	pop	r17
    2106:	0f 91       	pop	r16
    2108:	ff 90       	pop	r15
    210a:	ef 90       	pop	r14
    210c:	df 90       	pop	r13
    210e:	cf 90       	pop	r12
    2110:	bf 90       	pop	r11
    2112:	af 90       	pop	r10
    2114:	9f 90       	pop	r9
    2116:	8f 90       	pop	r8
    2118:	7f 90       	pop	r7
    211a:	6f 90       	pop	r6
    211c:	5f 90       	pop	r5
    211e:	4f 90       	pop	r4
    2120:	3f 90       	pop	r3
    2122:	2f 90       	pop	r2
    2124:	08 95       	ret

00002126 <EEPROM_WaitForNVM>:
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    2126:	80 91 cf 01 	lds	r24, 0x01CF
    212a:	87 fd       	sbrc	r24, 7
    212c:	fc cf       	rjmp	.-8      	; 0x2126 <EEPROM_WaitForNVM>
}
    212e:	08 95       	ret

00002130 <EEPROM_ReadByte>:
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGESIZE.
 *
 *  \return  Byte value read from EEPROM.
 */
uint8_t EEPROM_ReadByte( uint8_t pageAddr, uint8_t byteAddr )
{
    2130:	cf 93       	push	r28
    2132:	df 93       	push	r29
    2134:	1f 92       	push	r1
    2136:	1f 92       	push	r1
    2138:	cd b7       	in	r28, 0x3d	; 61
    213a:	de b7       	in	r29, 0x3e	; 62
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();
    213c:	6a 83       	std	Y+2, r22	; 0x02
    213e:	89 83       	std	Y+1, r24	; 0x01
    2140:	0e 94 93 10 	call	0x2126	; 0x2126 <EEPROM_WaitForNVM>

	/* Calculate address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE)
	                            |(byteAddr & (EEPROM_PAGESIZE-1));
    2144:	6a 81       	ldd	r22, Y+2	; 0x02
    2146:	6f 71       	andi	r22, 0x1F	; 31
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE)
    2148:	89 81       	ldd	r24, Y+1	; 0x01
    214a:	20 e2       	ldi	r18, 0x20	; 32
    214c:	82 9f       	mul	r24, r18
    214e:	c0 01       	movw	r24, r0
    2150:	11 24       	eor	r1, r1
    2152:	86 2b       	or	r24, r22
	                            |(byteAddr & (EEPROM_PAGESIZE-1));

	/* Set address to read from. */
	NVM.ADDR0 = address & 0xFF;
    2154:	e0 ec       	ldi	r30, 0xC0	; 192
    2156:	f1 e0       	ldi	r31, 0x01	; 1
    2158:	80 83       	st	Z, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    215a:	91 83       	std	Z+1, r25	; 0x01
	NVM.ADDR2 = 0x00;
    215c:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Read command. */
	NVM.CMD = NVM_CMD_READ_EEPROM_gc;
    215e:	86 e0       	ldi	r24, 0x06	; 6
    2160:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    2162:	ef 93       	push	r30
    2164:	ff 93       	push	r31
    2166:	0f 93       	push	r16
    2168:	2f 93       	push	r18
    216a:	eb ec       	ldi	r30, 0xCB	; 203
    216c:	f1 e0       	ldi	r31, 0x01	; 1
    216e:	08 ed       	ldi	r16, 0xD8	; 216
    2170:	21 e0       	ldi	r18, 0x01	; 1
    2172:	04 bf       	out	0x34, r16	; 52
    2174:	20 83       	st	Z, r18
    2176:	2f 91       	pop	r18
    2178:	0f 91       	pop	r16
    217a:	ff 91       	pop	r31
    217c:	ef 91       	pop	r30

	return NVM.DATA0;
    217e:	84 81       	ldd	r24, Z+4	; 0x04
}
    2180:	0f 90       	pop	r0
    2182:	0f 90       	pop	r0
    2184:	df 91       	pop	r29
    2186:	cf 91       	pop	r28
    2188:	08 95       	ret

0000218a <EEPROM_FlushBuffer>:
 *  \note The EEPROM write operations will automatically flush the buffer for you.
 */
void EEPROM_FlushBuffer( void )
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();
    218a:	0e 94 93 10 	call	0x2126	; 0x2126 <EEPROM_WaitForNVM>

	/* Flush EEPROM page buffer if necessary. */
	if ((NVM.STATUS & NVM_EELOAD_bm) != 0) {
    218e:	80 91 cf 01 	lds	r24, 0x01CF
    2192:	81 ff       	sbrs	r24, 1
    2194:	11 c0       	rjmp	.+34     	; 0x21b8 <EEPROM_FlushBuffer+0x2e>
		NVM.CMD = NVM_CMD_ERASE_EEPROM_BUFFER_gc;
    2196:	86 e3       	ldi	r24, 0x36	; 54
    2198:	80 93 ca 01 	sts	0x01CA, r24
		NVM_EXEC();
    219c:	ef 93       	push	r30
    219e:	ff 93       	push	r31
    21a0:	0f 93       	push	r16
    21a2:	2f 93       	push	r18
    21a4:	eb ec       	ldi	r30, 0xCB	; 203
    21a6:	f1 e0       	ldi	r31, 0x01	; 1
    21a8:	08 ed       	ldi	r16, 0xD8	; 216
    21aa:	21 e0       	ldi	r18, 0x01	; 1
    21ac:	04 bf       	out	0x34, r16	; 52
    21ae:	20 83       	st	Z, r18
    21b0:	2f 91       	pop	r18
    21b2:	0f 91       	pop	r16
    21b4:	ff 91       	pop	r31
    21b6:	ef 91       	pop	r30
    21b8:	08 95       	ret

000021ba <EEPROM_WriteByte>:
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGESIZE.
 *  \param  value     Byte value to write to EEPROM.
 */
void EEPROM_WriteByte( uint8_t pageAddr, uint8_t byteAddr, uint8_t value )
{
    21ba:	cf 93       	push	r28
    21bc:	df 93       	push	r29
    21be:	00 d0       	rcall	.+0      	; 0x21c0 <EEPROM_WriteByte+0x6>
    21c0:	cd b7       	in	r28, 0x3d	; 61
    21c2:	de b7       	in	r29, 0x3e	; 62
	/*  Flush buffer to make sure no unintetional data is written and load
	 *  the "Page Load" command into the command register.
	 */
	EEPROM_FlushBuffer();
    21c4:	4b 83       	std	Y+3, r20	; 0x03
    21c6:	6a 83       	std	Y+2, r22	; 0x02
    21c8:	89 83       	std	Y+1, r24	; 0x01
    21ca:	0e 94 c5 10 	call	0x218a	; 0x218a <EEPROM_FlushBuffer>
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    21ce:	e0 ec       	ldi	r30, 0xC0	; 192
    21d0:	f1 e0       	ldi	r31, 0x01	; 1
    21d2:	93 e3       	ldi	r25, 0x33	; 51
    21d4:	92 87       	std	Z+10, r25	; 0x0a

	/* Calculate address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE)
	                            |(byteAddr & (EEPROM_PAGESIZE-1));
    21d6:	6a 81       	ldd	r22, Y+2	; 0x02
    21d8:	6f 71       	andi	r22, 0x1F	; 31
	 */
	EEPROM_FlushBuffer();
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;

	/* Calculate address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE)
    21da:	89 81       	ldd	r24, Y+1	; 0x01
    21dc:	20 e2       	ldi	r18, 0x20	; 32
    21de:	82 9f       	mul	r24, r18
    21e0:	c0 01       	movw	r24, r0
    21e2:	11 24       	eor	r1, r1
    21e4:	86 2b       	or	r24, r22
	                            |(byteAddr & (EEPROM_PAGESIZE-1));

	/* Set address to write to. */
	NVM.ADDR0 = address & 0xFF;
    21e6:	80 83       	st	Z, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    21e8:	91 83       	std	Z+1, r25	; 0x01
	NVM.ADDR2 = 0x00;
    21ea:	12 82       	std	Z+2, r1	; 0x02

	/* Load data to write, which triggers the loading of EEPROM page buffer. */
	NVM.DATA0 = value;
    21ec:	4b 81       	ldd	r20, Y+3	; 0x03
    21ee:	44 83       	std	Z+4, r20	; 0x04

	/*  Issue EEPROM Atomic Write (Erase&Write) command. Load command, write
	 *  the protection signature and execute command.
	 */
	NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
    21f0:	85 e3       	ldi	r24, 0x35	; 53
    21f2:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    21f4:	ef 93       	push	r30
    21f6:	ff 93       	push	r31
    21f8:	0f 93       	push	r16
    21fa:	2f 93       	push	r18
    21fc:	eb ec       	ldi	r30, 0xCB	; 203
    21fe:	f1 e0       	ldi	r31, 0x01	; 1
    2200:	08 ed       	ldi	r16, 0xD8	; 216
    2202:	21 e0       	ldi	r18, 0x01	; 1
    2204:	04 bf       	out	0x34, r16	; 52
    2206:	20 83       	st	Z, r18
    2208:	2f 91       	pop	r18
    220a:	0f 91       	pop	r16
    220c:	ff 91       	pop	r31
    220e:	ef 91       	pop	r30
}
    2210:	23 96       	adiw	r28, 0x03	; 3
    2212:	cd bf       	out	0x3d, r28	; 61
    2214:	de bf       	out	0x3e, r29	; 62
    2216:	df 91       	pop	r29
    2218:	cf 91       	pop	r28
    221a:	08 95       	ret

0000221c <EEPROM_LoadByte>:
 *
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGESIZE.
 *  \param  value     Byte value to write to buffer.
 */
void EEPROM_LoadByte( uint8_t byteAddr, uint8_t value )
{
    221c:	cf 93       	push	r28
    221e:	df 93       	push	r29
    2220:	1f 92       	push	r1
    2222:	1f 92       	push	r1
    2224:	cd b7       	in	r28, 0x3d	; 61
    2226:	de b7       	in	r29, 0x3e	; 62
	/* Wait until NVM is not busy and prepare NVM command.*/
	EEPROM_WaitForNVM();
    2228:	6a 83       	std	Y+2, r22	; 0x02
    222a:	89 83       	std	Y+1, r24	; 0x01
    222c:	0e 94 93 10 	call	0x2126	; 0x2126 <EEPROM_WaitForNVM>
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    2230:	e0 ec       	ldi	r30, 0xC0	; 192
    2232:	f1 e0       	ldi	r31, 0x01	; 1
    2234:	93 e3       	ldi	r25, 0x33	; 51
    2236:	92 87       	std	Z+10, r25	; 0x0a

	/* Set address. */
	NVM.ADDR0 = byteAddr & 0xFF;
    2238:	89 81       	ldd	r24, Y+1	; 0x01
    223a:	80 83       	st	Z, r24
	NVM.ADDR1 = 0x00;
    223c:	11 82       	std	Z+1, r1	; 0x01
	NVM.ADDR2 = 0x00;
    223e:	12 82       	std	Z+2, r1	; 0x02

	/* Set data, which triggers loading of EEPROM page buffer. */
	NVM.DATA0 = value;
    2240:	6a 81       	ldd	r22, Y+2	; 0x02
    2242:	64 83       	std	Z+4, r22	; 0x04
}
    2244:	0f 90       	pop	r0
    2246:	0f 90       	pop	r0
    2248:	df 91       	pop	r29
    224a:	cf 91       	pop	r28
    224c:	08 95       	ret

0000224e <EEPROM_LoadPage>:
 *        EEPROM write page operation.
 *
 *  \param  values   Pointer to SRAM buffer containing an entire page.
 */
void EEPROM_LoadPage( const uint8_t * values )
{
    224e:	cf 93       	push	r28
    2250:	df 93       	push	r29
    2252:	ec 01       	movw	r28, r24
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();
    2254:	0e 94 93 10 	call	0x2126	; 0x2126 <EEPROM_WaitForNVM>
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    2258:	83 e3       	ldi	r24, 0x33	; 51
    225a:	80 93 ca 01 	sts	0x01CA, r24

	/*  Set address to zero, as only the lower bits matters. ADDR0 is
	 *  maintained inside the loop below.
	 */
	NVM.ADDR1 = 0x00;
    225e:	10 92 c1 01 	sts	0x01C1, r1
	NVM.ADDR2 = 0x00;
    2262:	10 92 c2 01 	sts	0x01C2, r1

	/* Load multible bytes into page buffer. */
	for (uint8_t i = 0; i < EEPROM_PAGESIZE; ++i) {
    2266:	80 e0       	ldi	r24, 0x00	; 0
		NVM.ADDR0 = i;
    2268:	80 93 c0 01 	sts	0x01C0, r24
		NVM.DATA0 = *values;
    226c:	99 91       	ld	r25, Y+
    226e:	90 93 c4 01 	sts	0x01C4, r25
	 */
	NVM.ADDR1 = 0x00;
	NVM.ADDR2 = 0x00;

	/* Load multible bytes into page buffer. */
	for (uint8_t i = 0; i < EEPROM_PAGESIZE; ++i) {
    2272:	8f 5f       	subi	r24, 0xFF	; 255
    2274:	80 32       	cpi	r24, 0x20	; 32
    2276:	c1 f7       	brne	.-16     	; 0x2268 <EEPROM_LoadPage+0x1a>
		NVM.ADDR0 = i;
		NVM.DATA0 = *values;
		++values;
	}
}
    2278:	df 91       	pop	r29
    227a:	cf 91       	pop	r28
    227c:	08 95       	ret

0000227e <EEPROM_LoadPartialPage>:
 *  \param  values   Pointer to SRAM buffer containing an entire page.
 *			offset   Offset address to begin from (0-EEPROM_PAGESIZE)
 *			length	 Number of values to write into EEPROM
 */
void EEPROM_LoadPartialPage(const uint8_t * values, uint8_t offset, uint8_t length)
{
    227e:	0f 93       	push	r16
    2280:	1f 93       	push	r17
    2282:	cf 93       	push	r28
    2284:	df 93       	push	r29
    2286:	1f 92       	push	r1
    2288:	1f 92       	push	r1
    228a:	cd b7       	in	r28, 0x3d	; 61
    228c:	de b7       	in	r29, 0x3e	; 62
    228e:	8c 01       	movw	r16, r24
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();
    2290:	4a 83       	std	Y+2, r20	; 0x02
    2292:	69 83       	std	Y+1, r22	; 0x01
    2294:	0e 94 93 10 	call	0x2126	; 0x2126 <EEPROM_WaitForNVM>
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    2298:	83 e3       	ldi	r24, 0x33	; 51
    229a:	80 93 ca 01 	sts	0x01CA, r24

	/*  Set address to zero, as only the lower bits matters. ADDR0 is
	 *  maintained inside the loop below.
	 */
	NVM.ADDR1 = 0x00;
    229e:	10 92 c1 01 	sts	0x01C1, r1
	NVM.ADDR2 = 0x00;
    22a2:	10 92 c2 01 	sts	0x01C2, r1
 *
 *  \param  values   Pointer to SRAM buffer containing an entire page.
 *			offset   Offset address to begin from (0-EEPROM_PAGESIZE)
 *			length	 Number of values to write into EEPROM
 */
void EEPROM_LoadPartialPage(const uint8_t * values, uint8_t offset, uint8_t length)
    22a6:	4a 81       	ldd	r20, Y+2	; 0x02
    22a8:	69 81       	ldd	r22, Y+1	; 0x01
    22aa:	46 0f       	add	r20, r22
	 */
	NVM.ADDR1 = 0x00;
	NVM.ADDR2 = 0x00;

	/* Load multible bytes into page buffer. */
	for (uint8_t i = offset; length != 0 && i < EEPROM_PAGESIZE; ++i,--length) {
    22ac:	08 c0       	rjmp	.+16     	; 0x22be <EEPROM_LoadPartialPage+0x40>
		NVM.ADDR0 = i;
    22ae:	60 93 c0 01 	sts	0x01C0, r22
		NVM.DATA0 = *values;
    22b2:	f8 01       	movw	r30, r16
    22b4:	81 91       	ld	r24, Z+
    22b6:	8f 01       	movw	r16, r30
    22b8:	80 93 c4 01 	sts	0x01C4, r24
	 */
	NVM.ADDR1 = 0x00;
	NVM.ADDR2 = 0x00;

	/* Load multible bytes into page buffer. */
	for (uint8_t i = offset; length != 0 && i < EEPROM_PAGESIZE; ++i,--length) {
    22bc:	6f 5f       	subi	r22, 0xFF	; 255
    22be:	64 17       	cp	r22, r20
    22c0:	11 f0       	breq	.+4      	; 0x22c6 <EEPROM_LoadPartialPage+0x48>
    22c2:	60 32       	cpi	r22, 0x20	; 32
    22c4:	a0 f3       	brcs	.-24     	; 0x22ae <EEPROM_LoadPartialPage+0x30>
		NVM.ADDR0 = i;
		NVM.DATA0 = *values;
		++values;
	}
}
    22c6:	0f 90       	pop	r0
    22c8:	0f 90       	pop	r0
    22ca:	df 91       	pop	r29
    22cc:	cf 91       	pop	r28
    22ce:	1f 91       	pop	r17
    22d0:	0f 91       	pop	r16
    22d2:	08 95       	ret

000022d4 <EEPROM_AtomicWritePage>:
 *  locations that have not been loaded will be left untouched in EEPROM.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 */
void EEPROM_AtomicWritePage( uint8_t pageAddr )
{
    22d4:	cf 93       	push	r28
    22d6:	df 93       	push	r29
    22d8:	1f 92       	push	r1
    22da:	cd b7       	in	r28, 0x3d	; 61
    22dc:	de b7       	in	r29, 0x3e	; 62
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();
    22de:	89 83       	std	Y+1, r24	; 0x01
    22e0:	0e 94 93 10 	call	0x2126	; 0x2126 <EEPROM_WaitForNVM>

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE);
    22e4:	89 81       	ldd	r24, Y+1	; 0x01
    22e6:	20 e2       	ldi	r18, 0x20	; 32
    22e8:	82 9f       	mul	r24, r18
    22ea:	c0 01       	movw	r24, r0
    22ec:	11 24       	eor	r1, r1

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    22ee:	e0 ec       	ldi	r30, 0xC0	; 192
    22f0:	f1 e0       	ldi	r31, 0x01	; 1
    22f2:	80 83       	st	Z, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    22f4:	91 83       	std	Z+1, r25	; 0x01
	NVM.ADDR2 = 0x00;
    22f6:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Atomic Write (Erase&Write) command. */
	NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
    22f8:	85 e3       	ldi	r24, 0x35	; 53
    22fa:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    22fc:	ef 93       	push	r30
    22fe:	ff 93       	push	r31
    2300:	0f 93       	push	r16
    2302:	2f 93       	push	r18
    2304:	eb ec       	ldi	r30, 0xCB	; 203
    2306:	f1 e0       	ldi	r31, 0x01	; 1
    2308:	08 ed       	ldi	r16, 0xD8	; 216
    230a:	21 e0       	ldi	r18, 0x01	; 1
    230c:	04 bf       	out	0x34, r16	; 52
    230e:	20 83       	st	Z, r18
    2310:	2f 91       	pop	r18
    2312:	0f 91       	pop	r16
    2314:	ff 91       	pop	r31
    2316:	ef 91       	pop	r30
}
    2318:	0f 90       	pop	r0
    231a:	df 91       	pop	r29
    231c:	cf 91       	pop	r28
    231e:	08 95       	ret

00002320 <EEPROM_ErasePage>:
 *  This function erases one EEPROM page, so that every location reads 0xFF.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 */
void EEPROM_ErasePage( uint8_t pageAddr )
{
    2320:	cf 93       	push	r28
    2322:	df 93       	push	r29
    2324:	1f 92       	push	r1
    2326:	cd b7       	in	r28, 0x3d	; 61
    2328:	de b7       	in	r29, 0x3e	; 62
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();
    232a:	89 83       	std	Y+1, r24	; 0x01
    232c:	0e 94 93 10 	call	0x2126	; 0x2126 <EEPROM_WaitForNVM>

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE);
    2330:	89 81       	ldd	r24, Y+1	; 0x01
    2332:	20 e2       	ldi	r18, 0x20	; 32
    2334:	82 9f       	mul	r24, r18
    2336:	c0 01       	movw	r24, r0
    2338:	11 24       	eor	r1, r1

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    233a:	e0 ec       	ldi	r30, 0xC0	; 192
    233c:	f1 e0       	ldi	r31, 0x01	; 1
    233e:	80 83       	st	Z, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    2340:	91 83       	std	Z+1, r25	; 0x01
	NVM.ADDR2 = 0x00;
    2342:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Erase command. */
	NVM.CMD = NVM_CMD_ERASE_EEPROM_PAGE_gc;
    2344:	82 e3       	ldi	r24, 0x32	; 50
    2346:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    2348:	ef 93       	push	r30
    234a:	ff 93       	push	r31
    234c:	0f 93       	push	r16
    234e:	2f 93       	push	r18
    2350:	eb ec       	ldi	r30, 0xCB	; 203
    2352:	f1 e0       	ldi	r31, 0x01	; 1
    2354:	08 ed       	ldi	r16, 0xD8	; 216
    2356:	21 e0       	ldi	r18, 0x01	; 1
    2358:	04 bf       	out	0x34, r16	; 52
    235a:	20 83       	st	Z, r18
    235c:	2f 91       	pop	r18
    235e:	0f 91       	pop	r16
    2360:	ff 91       	pop	r31
    2362:	ef 91       	pop	r30
}
    2364:	0f 90       	pop	r0
    2366:	df 91       	pop	r29
    2368:	cf 91       	pop	r28
    236a:	08 95       	ret

0000236c <EEPROM_SplitWritePage>:
 *  before writing.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 */
void EEPROM_SplitWritePage( uint8_t pageAddr )
{
    236c:	cf 93       	push	r28
    236e:	df 93       	push	r29
    2370:	1f 92       	push	r1
    2372:	cd b7       	in	r28, 0x3d	; 61
    2374:	de b7       	in	r29, 0x3e	; 62
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();
    2376:	89 83       	std	Y+1, r24	; 0x01
    2378:	0e 94 93 10 	call	0x2126	; 0x2126 <EEPROM_WaitForNVM>

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE);
    237c:	89 81       	ldd	r24, Y+1	; 0x01
    237e:	20 e2       	ldi	r18, 0x20	; 32
    2380:	82 9f       	mul	r24, r18
    2382:	c0 01       	movw	r24, r0
    2384:	11 24       	eor	r1, r1

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    2386:	e0 ec       	ldi	r30, 0xC0	; 192
    2388:	f1 e0       	ldi	r31, 0x01	; 1
    238a:	80 83       	st	Z, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    238c:	91 83       	std	Z+1, r25	; 0x01
	NVM.ADDR2 = 0x00;
    238e:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Split Write command. */
	NVM.CMD = NVM_CMD_WRITE_EEPROM_PAGE_gc;
    2390:	84 e3       	ldi	r24, 0x34	; 52
    2392:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    2394:	ef 93       	push	r30
    2396:	ff 93       	push	r31
    2398:	0f 93       	push	r16
    239a:	2f 93       	push	r18
    239c:	eb ec       	ldi	r30, 0xCB	; 203
    239e:	f1 e0       	ldi	r31, 0x01	; 1
    23a0:	08 ed       	ldi	r16, 0xD8	; 216
    23a2:	21 e0       	ldi	r18, 0x01	; 1
    23a4:	04 bf       	out	0x34, r16	; 52
    23a6:	20 83       	st	Z, r18
    23a8:	2f 91       	pop	r18
    23aa:	0f 91       	pop	r16
    23ac:	ff 91       	pop	r31
    23ae:	ef 91       	pop	r30
}
    23b0:	0f 90       	pop	r0
    23b2:	df 91       	pop	r29
    23b4:	cf 91       	pop	r28
    23b6:	08 95       	ret

000023b8 <EEPROM_EraseAll>:
 *  This function erases the entire EEPROM memory block to 0xFF.
 */
void EEPROM_EraseAll( void )
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();
    23b8:	0e 94 93 10 	call	0x2126	; 0x2126 <EEPROM_WaitForNVM>

	/* Issue EEPROM Erase All command. */
	NVM.CMD = NVM_CMD_ERASE_EEPROM_gc;
    23bc:	80 e3       	ldi	r24, 0x30	; 48
    23be:	e0 ec       	ldi	r30, 0xC0	; 192
    23c0:	f1 e0       	ldi	r31, 0x01	; 1
    23c2:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    23c4:	ef 93       	push	r30
    23c6:	ff 93       	push	r31
    23c8:	0f 93       	push	r16
    23ca:	2f 93       	push	r18
    23cc:	eb ec       	ldi	r30, 0xCB	; 203
    23ce:	f1 e0       	ldi	r31, 0x01	; 1
    23d0:	08 ed       	ldi	r16, 0xD8	; 216
    23d2:	21 e0       	ldi	r18, 0x01	; 1
    23d4:	04 bf       	out	0x34, r16	; 52
    23d6:	20 83       	st	Z, r18
    23d8:	2f 91       	pop	r18
    23da:	0f 91       	pop	r16
    23dc:	ff 91       	pop	r31
    23de:	ef 91       	pop	r30
    23e0:	08 95       	ret

000023e2 <spiTxRx>:
#include "ext_memory.h"
#include <avr/io.h>

uint8_t spiTxRx(uint8_t input)
{
	SPIE.DATA = input;
    23e2:	80 93 c3 0a 	sts	0x0AC3, r24
	
	while(!(SPIE.STATUS & SPI_IF_bm));
    23e6:	80 91 c2 0a 	lds	r24, 0x0AC2
    23ea:	87 ff       	sbrs	r24, 7
    23ec:	fc cf       	rjmp	.-8      	; 0x23e6 <spiTxRx+0x4>
	
	return SPIE.DATA;
    23ee:	80 91 c3 0a 	lds	r24, 0x0AC3
	
}
    23f2:	08 95       	ret

000023f4 <setSS>:

void setSS(int which, int level)
{
	if(which == SRAM)
    23f4:	01 97       	sbiw	r24, 0x01	; 1
    23f6:	49 f4       	brne	.+18     	; 0x240a <setSS+0x16>
	{
		if(level)
		{
			PORTF.OUTSET = PIN4_bm;
    23f8:	80 e1       	ldi	r24, 0x10	; 16

void setSS(int which, int level)
{
	if(which == SRAM)
	{
		if(level)
    23fa:	67 2b       	or	r22, r23
    23fc:	19 f0       	breq	.+6      	; 0x2404 <setSS+0x10>
		{
			PORTF.OUTSET = PIN4_bm;
    23fe:	80 93 a5 06 	sts	0x06A5, r24
    2402:	08 95       	ret
		}
		else
		{
			PORTF.OUTCLR = PIN4_bm;	
    2404:	80 93 a6 06 	sts	0x06A6, r24
    2408:	08 95       	ret
	}
	else
	{
		if(level)
		{
			PORTE.OUTSET = PIN4_bm;
    240a:	80 e1       	ldi	r24, 0x10	; 16
			PORTF.OUTCLR = PIN4_bm;	
		}
	}
	else
	{
		if(level)
    240c:	67 2b       	or	r22, r23
    240e:	19 f0       	breq	.+6      	; 0x2416 <setSS+0x22>
		{
			PORTE.OUTSET = PIN4_bm;
    2410:	80 93 85 06 	sts	0x0685, r24
    2414:	08 95       	ret
		}
		else
		{
			PORTE.OUTCLR = PIN4_bm;	
    2416:	80 93 86 06 	sts	0x0686, r24
    241a:	08 95       	ret

0000241c <readExtMem>:
	
	}
}

int readExtMem(int which, int start, char * buf, int length)
{
    241c:	ef 92       	push	r14
    241e:	ff 92       	push	r15
    2420:	0f 93       	push	r16
    2422:	1f 93       	push	r17
    2424:	cf 93       	push	r28
    2426:	df 93       	push	r29
    2428:	eb 01       	movw	r28, r22
    242a:	8a 01       	movw	r16, r20
    242c:	79 01       	movw	r14, r18
	if(which == SRAM)
    242e:	01 97       	sbiw	r24, 0x01	; 1
    2430:	f1 f4       	brne	.+60     	; 0x246e <readExtMem+0x52>
		{
			PORTF.OUTSET = PIN4_bm;
		}
		else
		{
			PORTF.OUTCLR = PIN4_bm;	
    2432:	80 e1       	ldi	r24, 0x10	; 16
    2434:	80 93 a6 06 	sts	0x06A6, r24
	{
		int i;
		
		setSS(SRAM, 0);
		
		spiTxRx(SRAM_READ);
    2438:	83 e0       	ldi	r24, 0x03	; 3
    243a:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <spiTxRx>
		spiTxRx((start >> 8) & 0x00FF);
    243e:	8d 2f       	mov	r24, r29
    2440:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <spiTxRx>
		spiTxRx(start & 0x00FF);
    2444:	8c 2f       	mov	r24, r28
    2446:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <spiTxRx>
    244a:	e8 01       	movw	r28, r16
		
		for(i = 0; i < length; ++i)
    244c:	06 c0       	rjmp	.+12     	; 0x245a <readExtMem+0x3e>
		{
			buf[i] = spiTxRx(0);
    244e:	80 e0       	ldi	r24, 0x00	; 0
    2450:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <spiTxRx>
    2454:	f8 01       	movw	r30, r16
    2456:	81 93       	st	Z+, r24
    2458:	8f 01       	movw	r16, r30
		}	
	
	}
}

int readExtMem(int which, int start, char * buf, int length)
    245a:	c8 01       	movw	r24, r16
    245c:	8c 1b       	sub	r24, r28
    245e:	9d 0b       	sbc	r25, r29
		
		spiTxRx(SRAM_READ);
		spiTxRx((start >> 8) & 0x00FF);
		spiTxRx(start & 0x00FF);
		
		for(i = 0; i < length; ++i)
    2460:	8e 15       	cp	r24, r14
    2462:	9f 05       	cpc	r25, r15
    2464:	a4 f3       	brlt	.-24     	; 0x244e <readExtMem+0x32>
{
	if(which == SRAM)
	{
		if(level)
		{
			PORTF.OUTSET = PIN4_bm;
    2466:	80 e1       	ldi	r24, 0x10	; 16
    2468:	80 93 a5 06 	sts	0x06A5, r24
    246c:	26 c0       	rjmp	.+76     	; 0x24ba <readExtMem+0x9e>
		{
			PORTE.OUTSET = PIN4_bm;
		}
		else
		{
			PORTE.OUTCLR = PIN4_bm;	
    246e:	80 e1       	ldi	r24, 0x10	; 16
    2470:	80 93 86 06 	sts	0x0686, r24
	{
		int i;
		
		setSS(FLASH, 0);
		
		spiTxRx(FLASH_BF1RD);
    2474:	84 ed       	ldi	r24, 0xD4	; 212
    2476:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <spiTxRx>
		spiTxRx(0x00);
    247a:	80 e0       	ldi	r24, 0x00	; 0
    247c:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <spiTxRx>
		spiTxRx((start & 0x0300) >> 8);
    2480:	ce 01       	movw	r24, r28
    2482:	88 27       	eor	r24, r24
    2484:	93 70       	andi	r25, 0x03	; 3
    2486:	89 2f       	mov	r24, r25
    2488:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <spiTxRx>
		spiTxRx(start & 0x00FF);
    248c:	8c 2f       	mov	r24, r28
    248e:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <spiTxRx>
		spiTxRx(0x00);
    2492:	80 e0       	ldi	r24, 0x00	; 0
    2494:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <spiTxRx>
    2498:	e8 01       	movw	r28, r16
		
		for(i = 0; i < length; ++i)
    249a:	06 c0       	rjmp	.+12     	; 0x24a8 <readExtMem+0x8c>
		{
			buf[i] = spiTxRx(0);
    249c:	80 e0       	ldi	r24, 0x00	; 0
    249e:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <spiTxRx>
    24a2:	f8 01       	movw	r30, r16
    24a4:	81 93       	st	Z+, r24
    24a6:	8f 01       	movw	r16, r30
		}	
	
	}
}

int readExtMem(int which, int start, char * buf, int length)
    24a8:	c8 01       	movw	r24, r16
    24aa:	8c 1b       	sub	r24, r28
    24ac:	9d 0b       	sbc	r25, r29
		spiTxRx(0x00);
		spiTxRx((start & 0x0300) >> 8);
		spiTxRx(start & 0x00FF);
		spiTxRx(0x00);
		
		for(i = 0; i < length; ++i)
    24ae:	8e 15       	cp	r24, r14
    24b0:	9f 05       	cpc	r25, r15
    24b2:	a4 f3       	brlt	.-24     	; 0x249c <readExtMem+0x80>
	}
	else
	{
		if(level)
		{
			PORTE.OUTSET = PIN4_bm;
    24b4:	80 e1       	ldi	r24, 0x10	; 16
    24b6:	80 93 85 06 	sts	0x0685, r24
		
		setSS(FLASH, 1);	
		
		return 1;
	}
}
    24ba:	81 e0       	ldi	r24, 0x01	; 1
    24bc:	90 e0       	ldi	r25, 0x00	; 0
    24be:	df 91       	pop	r29
    24c0:	cf 91       	pop	r28
    24c2:	1f 91       	pop	r17
    24c4:	0f 91       	pop	r16
    24c6:	ff 90       	pop	r15
    24c8:	ef 90       	pop	r14
    24ca:	08 95       	ret

000024cc <writeExtMem>:

int writeExtMem(int which, int start, char * buf, int length)
{
    24cc:	ef 92       	push	r14
    24ce:	ff 92       	push	r15
    24d0:	0f 93       	push	r16
    24d2:	1f 93       	push	r17
    24d4:	cf 93       	push	r28
    24d6:	df 93       	push	r29
    24d8:	eb 01       	movw	r28, r22
    24da:	8a 01       	movw	r16, r20
    24dc:	79 01       	movw	r14, r18
	if(which == SRAM)
    24de:	01 97       	sbiw	r24, 0x01	; 1
    24e0:	e9 f4       	brne	.+58     	; 0x251c <writeExtMem+0x50>
		{
			PORTF.OUTSET = PIN4_bm;
		}
		else
		{
			PORTF.OUTCLR = PIN4_bm;	
    24e2:	80 e1       	ldi	r24, 0x10	; 16
    24e4:	80 93 a6 06 	sts	0x06A6, r24
	{
		int i;
		
		setSS(SRAM, 0);
		
		spiTxRx(SRAM_WRITE);
    24e8:	82 e0       	ldi	r24, 0x02	; 2
    24ea:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <spiTxRx>
		spiTxRx((start >> 8) & 0x00FF);
    24ee:	8d 2f       	mov	r24, r29
    24f0:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <spiTxRx>
		spiTxRx(start & 0x00FF);
    24f4:	8c 2f       	mov	r24, r28
    24f6:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <spiTxRx>
    24fa:	e8 01       	movw	r28, r16
		
		for(i = 0; i < length; ++i)
    24fc:	05 c0       	rjmp	.+10     	; 0x2508 <writeExtMem+0x3c>
		{
			spiTxRx(buf[i]);
    24fe:	f8 01       	movw	r30, r16
    2500:	81 91       	ld	r24, Z+
    2502:	8f 01       	movw	r16, r30
    2504:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <spiTxRx>
		
		return 1;
	}
}

int writeExtMem(int which, int start, char * buf, int length)
    2508:	c8 01       	movw	r24, r16
    250a:	8c 1b       	sub	r24, r28
    250c:	9d 0b       	sbc	r25, r29
		
		spiTxRx(SRAM_WRITE);
		spiTxRx((start >> 8) & 0x00FF);
		spiTxRx(start & 0x00FF);
		
		for(i = 0; i < length; ++i)
    250e:	8e 15       	cp	r24, r14
    2510:	9f 05       	cpc	r25, r15
    2512:	ac f3       	brlt	.-22     	; 0x24fe <writeExtMem+0x32>
{
	if(which == SRAM)
	{
		if(level)
		{
			PORTF.OUTSET = PIN4_bm;
    2514:	80 e1       	ldi	r24, 0x10	; 16
    2516:	80 93 a5 06 	sts	0x06A5, r24
    251a:	22 c0       	rjmp	.+68     	; 0x2560 <writeExtMem+0x94>
		{
			PORTE.OUTSET = PIN4_bm;
		}
		else
		{
			PORTE.OUTCLR = PIN4_bm;	
    251c:	80 e1       	ldi	r24, 0x10	; 16
    251e:	80 93 86 06 	sts	0x0686, r24
	{
		int i;
		
		setSS(FLASH, 0);
		
		spiTxRx(FLASH_BF1WR);
    2522:	84 e8       	ldi	r24, 0x84	; 132
    2524:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <spiTxRx>
		spiTxRx(0x00);
    2528:	80 e0       	ldi	r24, 0x00	; 0
    252a:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <spiTxRx>
		spiTxRx((start & 0x0300) >> 8);
    252e:	ce 01       	movw	r24, r28
    2530:	88 27       	eor	r24, r24
    2532:	93 70       	andi	r25, 0x03	; 3
    2534:	89 2f       	mov	r24, r25
    2536:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <spiTxRx>
		spiTxRx(start & 0x00FF);
    253a:	8c 2f       	mov	r24, r28
    253c:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <spiTxRx>
    2540:	e8 01       	movw	r28, r16
		
		for(i = 0; i < length; ++i)
    2542:	05 c0       	rjmp	.+10     	; 0x254e <writeExtMem+0x82>
		{
			spiTxRx(buf[i]);
    2544:	f8 01       	movw	r30, r16
    2546:	81 91       	ld	r24, Z+
    2548:	8f 01       	movw	r16, r30
    254a:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <spiTxRx>
		
		return 1;
	}
}

int writeExtMem(int which, int start, char * buf, int length)
    254e:	c8 01       	movw	r24, r16
    2550:	8c 1b       	sub	r24, r28
    2552:	9d 0b       	sbc	r25, r29
		spiTxRx(FLASH_BF1WR);
		spiTxRx(0x00);
		spiTxRx((start & 0x0300) >> 8);
		spiTxRx(start & 0x00FF);
		
		for(i = 0; i < length; ++i)
    2554:	8e 15       	cp	r24, r14
    2556:	9f 05       	cpc	r25, r15
    2558:	ac f3       	brlt	.-22     	; 0x2544 <writeExtMem+0x78>
	}
	else
	{
		if(level)
		{
			PORTE.OUTSET = PIN4_bm;
    255a:	80 e1       	ldi	r24, 0x10	; 16
    255c:	80 93 85 06 	sts	0x0685, r24
		
		return 1;
	}


}
    2560:	81 e0       	ldi	r24, 0x01	; 1
    2562:	90 e0       	ldi	r25, 0x00	; 0
    2564:	df 91       	pop	r29
    2566:	cf 91       	pop	r28
    2568:	1f 91       	pop	r17
    256a:	0f 91       	pop	r16
    256c:	ff 90       	pop	r15
    256e:	ef 90       	pop	r14
    2570:	08 95       	ret

00002572 <initFlash>:



void initFlash()
{
    2572:	08 95       	ret

00002574 <initSRAM>:

}

void initSRAM()
{
    2574:	1f 93       	push	r17
    2576:	cf 93       	push	r28
    2578:	df 93       	push	r29
		{
			PORTF.OUTSET = PIN4_bm;
		}
		else
		{
			PORTF.OUTCLR = PIN4_bm;	
    257a:	c0 ea       	ldi	r28, 0xA0	; 160
    257c:	d6 e0       	ldi	r29, 0x06	; 6
    257e:	10 e1       	ldi	r17, 0x10	; 16
    2580:	1e 83       	std	Y+6, r17	; 0x06

void initSRAM()
{
		setSS(SRAM, 0);
		
		spiTxRx(SRAM_WRSR);
    2582:	81 e0       	ldi	r24, 0x01	; 1
    2584:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <spiTxRx>
		spiTxRx(0x41);	// set mode to sequential, disable HOLD feature
    2588:	81 e4       	ldi	r24, 0x41	; 65
    258a:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <spiTxRx>
{
	if(which == SRAM)
	{
		if(level)
		{
			PORTF.OUTSET = PIN4_bm;
    258e:	1d 83       	std	Y+5, r17	; 0x05
		}
		else
		{
			PORTF.OUTCLR = PIN4_bm;	
    2590:	1e 83       	std	Y+6, r17	; 0x06
	
	{
		uint8_t val;
		setSS(SRAM, 0);
		
		spiTxRx(SRAM_RDSR);
    2592:	85 e0       	ldi	r24, 0x05	; 5
    2594:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <spiTxRx>
		val = spiTxRx(0x0);	// set mode to sequential, disable HOLD feature
    2598:	80 e0       	ldi	r24, 0x00	; 0
    259a:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <spiTxRx>
{
	if(which == SRAM)
	{
		if(level)
		{
			PORTF.OUTSET = PIN4_bm;
    259e:	1d 83       	std	Y+5, r17	; 0x05
		spiTxRx(SRAM_RDSR);
		val = spiTxRx(0x0);	// set mode to sequential, disable HOLD feature
		
		setSS(SRAM, 1);			
		
		printf("SR is: %x\r\n",val);
    25a0:	1f 92       	push	r1
    25a2:	8f 93       	push	r24
    25a4:	83 e2       	ldi	r24, 0x23	; 35
    25a6:	90 e2       	ldi	r25, 0x20	; 32
    25a8:	9f 93       	push	r25
    25aa:	8f 93       	push	r24
    25ac:	0e 94 8a 22 	call	0x4514	; 0x4514 <printf>
    25b0:	0f 90       	pop	r0
    25b2:	0f 90       	pop	r0
    25b4:	0f 90       	pop	r0
    25b6:	0f 90       	pop	r0
	}
}
    25b8:	df 91       	pop	r29
    25ba:	cf 91       	pop	r28
    25bc:	1f 91       	pop	r17
    25be:	08 95       	ret

000025c0 <initExtMem>:

void initExtMem()
{
	PORTE.OUTSET = PIN4_bm;
    25c0:	e0 e8       	ldi	r30, 0x80	; 128
    25c2:	f6 e0       	ldi	r31, 0x06	; 6
    25c4:	80 e1       	ldi	r24, 0x10	; 16
    25c6:	85 83       	std	Z+5, r24	; 0x05
	PORTE.DIRSET = PIN4_bm;
    25c8:	81 83       	std	Z+1, r24	; 0x01

	// set !SS1 lhigh
	PORTF.OUTSET = PIN4_bm;
    25ca:	a0 ea       	ldi	r26, 0xA0	; 160
    25cc:	b6 e0       	ldi	r27, 0x06	; 6
    25ce:	15 96       	adiw	r26, 0x05	; 5
    25d0:	8c 93       	st	X, r24
    25d2:	15 97       	sbiw	r26, 0x05	; 5
	PORTF.DIRSET = PIN4_bm;
    25d4:	11 96       	adiw	r26, 0x01	; 1
    25d6:	8c 93       	st	X, r24


	PORTE.DIRSET = PIN5_bm | PIN7_bm;	// !ss/mosi/sck as output
    25d8:	80 ea       	ldi	r24, 0xA0	; 160
    25da:	81 83       	std	Z+1, r24	; 0x01
	PORTE.DIRCLR = PIN6_bm;				// miso as input
    25dc:	80 e4       	ldi	r24, 0x40	; 64
    25de:	82 83       	std	Z+2, r24	; 0x02

	SPIE.CTRL = SPI_ENABLE_bm | SPI_MASTER_bm;	//mode 0, clock/4
    25e0:	80 e5       	ldi	r24, 0x50	; 80
    25e2:	80 93 c0 0a 	sts	0x0AC0, r24

	initFlash();
	initSRAM();
    25e6:	0c 94 ba 12 	jmp	0x2574	; 0x2574 <initSRAM>

000025ea <newHWAccelData>:
TWI_Master_t twiMaster;
extern AccelData _acc;

int newHWAccelData()
{
	return (twiMaster.result == TWIM_RESULT_OK && twiMaster.status == TWIM_STATUS_READY);
    25ea:	80 91 a9 25 	lds	r24, 0x25A9
    25ee:	81 30       	cpi	r24, 0x01	; 1
    25f0:	31 f4       	brne	.+12     	; 0x25fe <newHWAccelData+0x14>
    25f2:	80 91 a8 25 	lds	r24, 0x25A8
    25f6:	21 e0       	ldi	r18, 0x01	; 1
    25f8:	30 e0       	ldi	r19, 0x00	; 0
    25fa:	88 23       	and	r24, r24
    25fc:	11 f0       	breq	.+4      	; 0x2602 <newHWAccelData+0x18>
    25fe:	20 e0       	ldi	r18, 0x00	; 0
    2600:	30 e0       	ldi	r19, 0x00	; 0
}
    2602:	c9 01       	movw	r24, r18
    2604:	08 95       	ret

00002606 <updateHWAccel>:

// this is currently non-blocking.
void updateHWAccel()
{
    2606:	cf 93       	push	r28
	if(twiMaster.result == TWIM_RESULT_OK && twiMaster.status == TWIM_STATUS_READY)
    2608:	80 91 a9 25 	lds	r24, 0x25A9
    260c:	81 30       	cpi	r24, 0x01	; 1
    260e:	09 f0       	breq	.+2      	; 0x2612 <updateHWAccel+0xc>
    2610:	4b c0       	rjmp	.+150    	; 0x26a8 <updateHWAccel+0xa2>
    2612:	80 91 a8 25 	lds	r24, 0x25A8
    2616:	81 11       	cpse	r24, r1
    2618:	47 c0       	rjmp	.+142    	; 0x26a8 <updateHWAccel+0xa2>
	{ 
		byte oldstatus = _acc.status & ACC_O_MASK;
    261a:	c0 91 51 20 	lds	r28, 0x2051
		
		// I2C reads in as unsigned - we need to convert back to 2s complement (+- 32)
		_acc.x = (Angle)(twiMaster.readData[0] << 2) >> 2;
    261e:	80 91 a0 25 	lds	r24, 0x25A0
    2622:	24 e0       	ldi	r18, 0x04	; 4
    2624:	82 9f       	mul	r24, r18
    2626:	c0 01       	movw	r24, r0
    2628:	11 24       	eor	r1, r1
    262a:	85 95       	asr	r24
    262c:	85 95       	asr	r24
    262e:	80 93 4e 20 	sts	0x204E, r24
		_acc.y = (Angle)(twiMaster.readData[1] << 2) >> 2;
    2632:	80 91 a1 25 	lds	r24, 0x25A1
    2636:	24 e0       	ldi	r18, 0x04	; 4
    2638:	82 9f       	mul	r24, r18
    263a:	c0 01       	movw	r24, r0
    263c:	11 24       	eor	r1, r1
    263e:	85 95       	asr	r24
    2640:	85 95       	asr	r24
    2642:	80 93 4f 20 	sts	0x204F, r24
		_acc.z = (Angle)(twiMaster.readData[2] << 2) >> 2;
    2646:	80 91 a2 25 	lds	r24, 0x25A2
    264a:	24 e0       	ldi	r18, 0x04	; 4
    264c:	82 9f       	mul	r24, r18
    264e:	c0 01       	movw	r24, r0
    2650:	11 24       	eor	r1, r1
    2652:	85 95       	asr	r24
    2654:	85 95       	asr	r24
    2656:	80 93 50 20 	sts	0x2050, r24
		_acc.status = twiMaster.readData[3];
    265a:	80 91 a3 25 	lds	r24, 0x25A3
    265e:	80 93 51 20 	sts	0x2051, r24
		
		twiMaster.result = TWIM_RESULT_UNKNOWN;
    2662:	10 92 a9 25 	sts	0x25A9, r1
		
		// if superceding event isn't registered, register sub-events, if necessary
		if(!triggerHandler(EVENT_ACCEL_CHANGE))
    2666:	8b e0       	ldi	r24, 0x0B	; 11
    2668:	0e 94 bd 06 	call	0xd7a	; 0xd7a <triggerHandler>
    266c:	89 2b       	or	r24, r25
    266e:	e1 f4       	brne	.+56     	; 0x26a8 <updateHWAccel+0xa2>
		{
			if(_acc.status & ACC_TAP)
    2670:	80 91 51 20 	lds	r24, 0x2051
    2674:	85 ff       	sbrs	r24, 5
    2676:	03 c0       	rjmp	.+6      	; 0x267e <updateHWAccel+0x78>
			{
				triggerHandler(EVENT_ACCEL_TAP);
    2678:	8c e0       	ldi	r24, 0x0C	; 12
    267a:	0e 94 bd 06 	call	0xd7a	; 0xd7a <triggerHandler>
			}	
			if(_acc.status & ACC_SHAKE)
    267e:	80 91 51 20 	lds	r24, 0x2051
    2682:	87 ff       	sbrs	r24, 7
    2684:	03 c0       	rjmp	.+6      	; 0x268c <updateHWAccel+0x86>
			{
				triggerHandler(EVENT_ACCEL_SHAKE);
    2686:	8d e0       	ldi	r24, 0x0D	; 13
    2688:	0e 94 bd 06 	call	0xd7a	; 0xd7a <triggerHandler>
// this is currently non-blocking.
void updateHWAccel()
{
	if(twiMaster.result == TWIM_RESULT_OK && twiMaster.status == TWIM_STATUS_READY)
	{ 
		byte oldstatus = _acc.status & ACC_O_MASK;
    268c:	cf 71       	andi	r28, 0x1F	; 31
			}	
			if(_acc.status & ACC_SHAKE)
			{
				triggerHandler(EVENT_ACCEL_SHAKE);
			}	
			if(oldstatus != (_acc.status & ACC_O_MASK))
    268e:	2c 2f       	mov	r18, r28
    2690:	30 e0       	ldi	r19, 0x00	; 0
    2692:	80 91 51 20 	lds	r24, 0x2051
    2696:	8f 71       	andi	r24, 0x1F	; 31
    2698:	90 e0       	ldi	r25, 0x00	; 0
    269a:	28 17       	cp	r18, r24
    269c:	39 07       	cpc	r19, r25
    269e:	21 f0       	breq	.+8      	; 0x26a8 <updateHWAccel+0xa2>
			{
				triggerHandler(EVENT_ACCEL_TAP);
    26a0:	8c e0       	ldi	r24, 0x0C	; 12
			}			
		}
	}
}
    26a2:	cf 91       	pop	r28
			{
				triggerHandler(EVENT_ACCEL_SHAKE);
			}	
			if(oldstatus != (_acc.status & ACC_O_MASK))
			{
				triggerHandler(EVENT_ACCEL_TAP);
    26a4:	0c 94 bd 06 	jmp	0xd7a	; 0xd7a <triggerHandler>
			}			
		}
	}
}
    26a8:	cf 91       	pop	r28
    26aa:	08 95       	ret

000026ac <initHWAccel>:

// Doesn't *really* need to be blocking, just checked for success
// TODO: should block? yes no?
void initHWAccel()
{
    26ac:	0f 93       	push	r16
    26ae:	cf 93       	push	r28
    26b0:	df 93       	push	r29
    26b2:	1f 92       	push	r1
    26b4:	1f 92       	push	r1
    26b6:	cd b7       	in	r28, 0x3d	; 61
    26b8:	de b7       	in	r29, 0x3e	; 62
	/* Initialize TWI master. */
	TWI_MasterInit(&twiMaster,
    26ba:	2b e9       	ldi	r18, 0x9B	; 155
    26bc:	40 e4       	ldi	r20, 0x40	; 64
    26be:	60 ea       	ldi	r22, 0xA0	; 160
    26c0:	74 e0       	ldi	r23, 0x04	; 4
    26c2:	89 e9       	ldi	r24, 0x99	; 153
    26c4:	95 e2       	ldi	r25, 0x25	; 37
    26c6:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <TWI_MasterInit>

	// prepare configuration data for the accelerometer
	byte buf[2];

	// set mode to STANDBY if it isn't already (can't update registers in ACTIVE mode!)
	buf[0] = 0x07;
    26ca:	87 e0       	ldi	r24, 0x07	; 7
    26cc:	89 83       	std	Y+1, r24	; 0x01
	buf[1] = 0x18;
    26ce:	88 e1       	ldi	r24, 0x18	; 24
    26d0:	8a 83       	std	Y+2, r24	; 0x02
	TWI_MasterWriteRead(&twiMaster, ACCEL_I2C_ADDR, buf, 2, 0);
    26d2:	00 e0       	ldi	r16, 0x00	; 0
    26d4:	22 e0       	ldi	r18, 0x02	; 2
    26d6:	ae 01       	movw	r20, r28
    26d8:	4f 5f       	subi	r20, 0xFF	; 255
    26da:	5f 4f       	sbci	r21, 0xFF	; 255
    26dc:	6c e4       	ldi	r22, 0x4C	; 76
    26de:	89 e9       	ldi	r24, 0x99	; 153
    26e0:	95 e2       	ldi	r25, 0x25	; 37
    26e2:	0e 94 87 1d 	call	0x3b0e	; 0x3b0e <TWI_MasterWriteRead>
	while (twiMaster.status != TWIM_STATUS_READY);
    26e6:	80 91 a8 25 	lds	r24, 0x25A8
    26ea:	81 11       	cpse	r24, r1
    26ec:	fc cf       	rjmp	.-8      	; 0x26e6 <initHWAccel+0x3a>

	// set sleep mode
	buf[0] = 0x05;
    26ee:	85 e0       	ldi	r24, 0x05	; 5
    26f0:	89 83       	std	Y+1, r24	; 0x01
	buf[1] = 0x00;	// no sleep
    26f2:	1a 82       	std	Y+2, r1	; 0x02
	TWI_MasterWriteRead(&twiMaster, ACCEL_I2C_ADDR, buf, 2, 0);
    26f4:	00 e0       	ldi	r16, 0x00	; 0
    26f6:	22 e0       	ldi	r18, 0x02	; 2
    26f8:	ae 01       	movw	r20, r28
    26fa:	4f 5f       	subi	r20, 0xFF	; 255
    26fc:	5f 4f       	sbci	r21, 0xFF	; 255
    26fe:	6c e4       	ldi	r22, 0x4C	; 76
    2700:	89 e9       	ldi	r24, 0x99	; 153
    2702:	95 e2       	ldi	r25, 0x25	; 37
    2704:	0e 94 87 1d 	call	0x3b0e	; 0x3b0e <TWI_MasterWriteRead>
	while (twiMaster.status != TWIM_STATUS_READY);
    2708:	80 91 a8 25 	lds	r24, 0x25A8
    270c:	81 11       	cpse	r24, r1
    270e:	fc cf       	rjmp	.-8      	; 0x2708 <initHWAccel+0x5c>

	// set interrupts
	buf[0] = 0x06;
    2710:	86 e0       	ldi	r24, 0x06	; 6
    2712:	89 83       	std	Y+1, r24	; 0x01
	buf[1] = 0x07;	// 0x06 Interrupt Setup Register -> PDINT | PLINT | FBINT
    2714:	87 e0       	ldi	r24, 0x07	; 7
    2716:	8a 83       	std	Y+2, r24	; 0x02
	TWI_MasterWriteRead(&twiMaster, ACCEL_I2C_ADDR, buf, 2, 0);
    2718:	00 e0       	ldi	r16, 0x00	; 0
    271a:	22 e0       	ldi	r18, 0x02	; 2
    271c:	ae 01       	movw	r20, r28
    271e:	4f 5f       	subi	r20, 0xFF	; 255
    2720:	5f 4f       	sbci	r21, 0xFF	; 255
    2722:	6c e4       	ldi	r22, 0x4C	; 76
    2724:	89 e9       	ldi	r24, 0x99	; 153
    2726:	95 e2       	ldi	r25, 0x25	; 37
    2728:	0e 94 87 1d 	call	0x3b0e	; 0x3b0e <TWI_MasterWriteRead>
	while (twiMaster.status != TWIM_STATUS_READY);
    272c:	80 91 a8 25 	lds	r24, 0x25A8
    2730:	81 11       	cpse	r24, r1
    2732:	fc cf       	rjmp	.-8      	; 0x272c <initHWAccel+0x80>

	// set filter rate
	buf[0] = 0x08;
    2734:	88 e0       	ldi	r24, 0x08	; 8
    2736:	89 83       	std	Y+1, r24	; 0x01
	buf[1] = 0xE0;	// 0x08 Sample Register -> Fil[0:2]
    2738:	80 ee       	ldi	r24, 0xE0	; 224
    273a:	8a 83       	std	Y+2, r24	; 0x02
	TWI_MasterWriteRead(&twiMaster, ACCEL_I2C_ADDR, buf, 2, 0);
    273c:	00 e0       	ldi	r16, 0x00	; 0
    273e:	22 e0       	ldi	r18, 0x02	; 2
    2740:	ae 01       	movw	r20, r28
    2742:	4f 5f       	subi	r20, 0xFF	; 255
    2744:	5f 4f       	sbci	r21, 0xFF	; 255
    2746:	6c e4       	ldi	r22, 0x4C	; 76
    2748:	89 e9       	ldi	r24, 0x99	; 153
    274a:	95 e2       	ldi	r25, 0x25	; 37
    274c:	0e 94 87 1d 	call	0x3b0e	; 0x3b0e <TWI_MasterWriteRead>
	while (twiMaster.status != TWIM_STATUS_READY);
    2750:	80 91 a8 25 	lds	r24, 0x25A8
    2754:	81 11       	cpse	r24, r1
    2756:	fc cf       	rjmp	.-8      	; 0x2750 <initHWAccel+0xa4>
	
	// set tap detection
	buf[0] = 0x09;
    2758:	89 e0       	ldi	r24, 0x09	; 9
    275a:	89 83       	std	Y+1, r24	; 0x01
	buf[1] = 0x10;	// 0x09	Pulse detection -> +- 4 counts
    275c:	80 e1       	ldi	r24, 0x10	; 16
    275e:	8a 83       	std	Y+2, r24	; 0x02
	TWI_MasterWriteRead(&twiMaster, ACCEL_I2C_ADDR, buf, 2, 0);
    2760:	00 e0       	ldi	r16, 0x00	; 0
    2762:	22 e0       	ldi	r18, 0x02	; 2
    2764:	ae 01       	movw	r20, r28
    2766:	4f 5f       	subi	r20, 0xFF	; 255
    2768:	5f 4f       	sbci	r21, 0xFF	; 255
    276a:	6c e4       	ldi	r22, 0x4C	; 76
    276c:	89 e9       	ldi	r24, 0x99	; 153
    276e:	95 e2       	ldi	r25, 0x25	; 37
    2770:	0e 94 87 1d 	call	0x3b0e	; 0x3b0e <TWI_MasterWriteRead>
	while (twiMaster.status != TWIM_STATUS_READY);
    2774:	80 91 a8 25 	lds	r24, 0x25A8
    2778:	81 11       	cpse	r24, r1
    277a:	fc cf       	rjmp	.-8      	; 0x2774 <initHWAccel+0xc8>

	// set tap debounce
	buf[0] = 0x0A;
    277c:	8a e0       	ldi	r24, 0x0A	; 10
    277e:	89 83       	std	Y+1, r24	; 0x01
	buf[1] = 0x10;	// 0x0A Tap debounce ->	4 detections
    2780:	80 e1       	ldi	r24, 0x10	; 16
    2782:	8a 83       	std	Y+2, r24	; 0x02
	TWI_MasterWriteRead(&twiMaster, ACCEL_I2C_ADDR, buf, 2, 0);
    2784:	00 e0       	ldi	r16, 0x00	; 0
    2786:	22 e0       	ldi	r18, 0x02	; 2
    2788:	ae 01       	movw	r20, r28
    278a:	4f 5f       	subi	r20, 0xFF	; 255
    278c:	5f 4f       	sbci	r21, 0xFF	; 255
    278e:	6c e4       	ldi	r22, 0x4C	; 76
    2790:	89 e9       	ldi	r24, 0x99	; 153
    2792:	95 e2       	ldi	r25, 0x25	; 37
    2794:	0e 94 87 1d 	call	0x3b0e	; 0x3b0e <TWI_MasterWriteRead>
	while (twiMaster.status != TWIM_STATUS_READY);	
    2798:	80 91 a8 25 	lds	r24, 0x25A8
    279c:	81 11       	cpse	r24, r1
    279e:	fc cf       	rjmp	.-8      	; 0x2798 <initHWAccel+0xec>
	
	// enable the accelerometer
	buf[0] = 0x07;
    27a0:	87 e0       	ldi	r24, 0x07	; 7
    27a2:	89 83       	std	Y+1, r24	; 0x01
	buf[1] = 0x19;
    27a4:	89 e1       	ldi	r24, 0x19	; 25
    27a6:	8a 83       	std	Y+2, r24	; 0x02
	TWI_MasterWriteRead(&twiMaster, ACCEL_I2C_ADDR, buf, 2, 0);
    27a8:	00 e0       	ldi	r16, 0x00	; 0
    27aa:	22 e0       	ldi	r18, 0x02	; 2
    27ac:	ae 01       	movw	r20, r28
    27ae:	4f 5f       	subi	r20, 0xFF	; 255
    27b0:	5f 4f       	sbci	r21, 0xFF	; 255
    27b2:	6c e4       	ldi	r22, 0x4C	; 76
    27b4:	89 e9       	ldi	r24, 0x99	; 153
    27b6:	95 e2       	ldi	r25, 0x25	; 37
    27b8:	0e 94 87 1d 	call	0x3b0e	; 0x3b0e <TWI_MasterWriteRead>
	while (twiMaster.status != TWIM_STATUS_READY);
    27bc:	80 91 a8 25 	lds	r24, 0x25A8
    27c0:	81 11       	cpse	r24, r1
    27c2:	fc cf       	rjmp	.-8      	; 0x27bc <initHWAccel+0x110>
	
	// set up input/interrupt to detect acceleromter IRQs
	PORTB.DIRCLR = PIN0_bm;					// set Pin0 as input
    27c4:	81 e0       	ldi	r24, 0x01	; 1
    27c6:	80 93 22 06 	sts	0x0622, r24
	PORTB.PIN0CTRL = PORT_OPC_PULLUP_gc | PORT_ISC_FALLING_gc;	// set pullup, trigger interrupt on falling edge
    27ca:	9a e1       	ldi	r25, 0x1A	; 26
    27cc:	90 93 30 06 	sts	0x0630, r25
	PORTB.INT0MASK = PIN0_bm;				// enable PIN0 to trigger INT0
    27d0:	80 93 2a 06 	sts	0x062A, r24
	PORTB.INTCTRL = PORT_INT0LVL_LO_gc;		// enable INT0 interrupt on LOW priority
    27d4:	80 93 29 06 	sts	0x0629, r24
}
    27d8:	0f 90       	pop	r0
    27da:	0f 90       	pop	r0
    27dc:	df 91       	pop	r29
    27de:	cf 91       	pop	r28
    27e0:	0f 91       	pop	r16
    27e2:	08 95       	ret

000027e4 <__vector_34>:

// Acceleromter status change detection interrupt
ISR(PORTB_INT0_vect)
{
    27e4:	1f 92       	push	r1
    27e6:	0f 92       	push	r0
    27e8:	0f b6       	in	r0, 0x3f	; 63
    27ea:	0f 92       	push	r0
    27ec:	11 24       	eor	r1, r1
    27ee:	0b b6       	in	r0, 0x3b	; 59
    27f0:	0f 92       	push	r0
    27f2:	0f 93       	push	r16
    27f4:	2f 93       	push	r18
    27f6:	3f 93       	push	r19
    27f8:	4f 93       	push	r20
    27fa:	5f 93       	push	r21
    27fc:	6f 93       	push	r22
    27fe:	7f 93       	push	r23
    2800:	8f 93       	push	r24
    2802:	9f 93       	push	r25
    2804:	af 93       	push	r26
    2806:	bf 93       	push	r27
    2808:	ef 93       	push	r30
    280a:	ff 93       	push	r31
    280c:	cf 93       	push	r28
    280e:	df 93       	push	r29
    2810:	1f 92       	push	r1
    2812:	cd b7       	in	r28, 0x3d	; 61
    2814:	de b7       	in	r29, 0x3e	; 62

	if(twiMaster.status == TWIM_STATUS_READY)
    2816:	80 91 a8 25 	lds	r24, 0x25A8
    281a:	81 11       	cpse	r24, r1
    281c:	0b c0       	rjmp	.+22     	; 0x2834 <__vector_34+0x50>
	{
		byte buf = 0x00;		// read 4 bytes, starting at 0x00 (x,y,z,status)
    281e:	19 82       	std	Y+1, r1	; 0x01
		TWI_MasterWriteRead(&twiMaster, ACCEL_I2C_ADDR, &buf, 1, 4);
    2820:	04 e0       	ldi	r16, 0x04	; 4
    2822:	21 e0       	ldi	r18, 0x01	; 1
    2824:	ae 01       	movw	r20, r28
    2826:	4f 5f       	subi	r20, 0xFF	; 255
    2828:	5f 4f       	sbci	r21, 0xFF	; 255
    282a:	6c e4       	ldi	r22, 0x4C	; 76
    282c:	89 e9       	ldi	r24, 0x99	; 153
    282e:	95 e2       	ldi	r25, 0x25	; 37
    2830:	0e 94 87 1d 	call	0x3b0e	; 0x3b0e <TWI_MasterWriteRead>
	}

}
    2834:	0f 90       	pop	r0
    2836:	df 91       	pop	r29
    2838:	cf 91       	pop	r28
    283a:	ff 91       	pop	r31
    283c:	ef 91       	pop	r30
    283e:	bf 91       	pop	r27
    2840:	af 91       	pop	r26
    2842:	9f 91       	pop	r25
    2844:	8f 91       	pop	r24
    2846:	7f 91       	pop	r23
    2848:	6f 91       	pop	r22
    284a:	5f 91       	pop	r21
    284c:	4f 91       	pop	r20
    284e:	3f 91       	pop	r19
    2850:	2f 91       	pop	r18
    2852:	0f 91       	pop	r16
    2854:	0f 90       	pop	r0
    2856:	0b be       	out	0x3b, r0	; 59
    2858:	0f 90       	pop	r0
    285a:	0f be       	out	0x3f, r0	; 63
    285c:	0f 90       	pop	r0
    285e:	1f 90       	pop	r1
    2860:	18 95       	reti

00002862 <__vector_46>:

/*! TWIE Master Interrupt vector. */
ISR(TWIE_TWIM_vect)
{
    2862:	1f 92       	push	r1
    2864:	0f 92       	push	r0
    2866:	0f b6       	in	r0, 0x3f	; 63
    2868:	0f 92       	push	r0
    286a:	11 24       	eor	r1, r1
    286c:	0b b6       	in	r0, 0x3b	; 59
    286e:	0f 92       	push	r0
    2870:	2f 93       	push	r18
    2872:	3f 93       	push	r19
    2874:	4f 93       	push	r20
    2876:	5f 93       	push	r21
    2878:	6f 93       	push	r22
    287a:	7f 93       	push	r23
    287c:	8f 93       	push	r24
    287e:	9f 93       	push	r25
    2880:	af 93       	push	r26
    2882:	bf 93       	push	r27
    2884:	ef 93       	push	r30
    2886:	ff 93       	push	r31

	TWI_MasterInterruptHandler(&twiMaster);
    2888:	89 e9       	ldi	r24, 0x99	; 153
    288a:	95 e2       	ldi	r25, 0x25	; 37
    288c:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <TWI_MasterInterruptHandler>
}
    2890:	ff 91       	pop	r31
    2892:	ef 91       	pop	r30
    2894:	bf 91       	pop	r27
    2896:	af 91       	pop	r26
    2898:	9f 91       	pop	r25
    289a:	8f 91       	pop	r24
    289c:	7f 91       	pop	r23
    289e:	6f 91       	pop	r22
    28a0:	5f 91       	pop	r21
    28a2:	4f 91       	pop	r20
    28a4:	3f 91       	pop	r19
    28a6:	2f 91       	pop	r18
    28a8:	0f 90       	pop	r0
    28aa:	0b be       	out	0x3b, r0	; 59
    28ac:	0f 90       	pop	r0
    28ae:	0f be       	out	0x3f, r0	; 63
    28b0:	0f 90       	pop	r0
    28b2:	1f 90       	pop	r1
    28b4:	18 95       	reti

000028b6 <setAccelRegister>:

// helper function to setup accelerometer registers
void setAccelRegister(byte one, byte two)
{
    28b6:	0f 93       	push	r16
    28b8:	cf 93       	push	r28
    28ba:	df 93       	push	r29
    28bc:	1f 92       	push	r1
    28be:	1f 92       	push	r1
    28c0:	cd b7       	in	r28, 0x3d	; 61
    28c2:	de b7       	in	r29, 0x3e	; 62
    byte buf[2];

    buf[0] = one;
    28c4:	89 83       	std	Y+1, r24	; 0x01
    buf[1] = two;
    28c6:	6a 83       	std	Y+2, r22	; 0x02
    
    TWI_MasterWriteRead(&twiMaster, ACCEL_I2C_ADDR, buf, 2, 0);
    28c8:	00 e0       	ldi	r16, 0x00	; 0
    28ca:	22 e0       	ldi	r18, 0x02	; 2
    28cc:	ae 01       	movw	r20, r28
    28ce:	4f 5f       	subi	r20, 0xFF	; 255
    28d0:	5f 4f       	sbci	r21, 0xFF	; 255
    28d2:	6c e4       	ldi	r22, 0x4C	; 76
    28d4:	89 e9       	ldi	r24, 0x99	; 153
    28d6:	95 e2       	ldi	r25, 0x25	; 37
    28d8:	0e 94 87 1d 	call	0x3b0e	; 0x3b0e <TWI_MasterWriteRead>
    while(twiMaster.status != TWIM_STATUS_READY);
    28dc:	80 91 a8 25 	lds	r24, 0x25A8
    28e0:	81 11       	cpse	r24, r1
    28e2:	fc cf       	rjmp	.-8      	; 0x28dc <setAccelRegister+0x26>
}
    28e4:	0f 90       	pop	r0
    28e6:	0f 90       	pop	r0
    28e8:	df 91       	pop	r29
    28ea:	cf 91       	pop	r28
    28ec:	0f 91       	pop	r16
    28ee:	08 95       	ret

000028f0 <scaryBlockTickHack>:

extern int blockTickRunning;

void scaryBlockTickHack(void)
{
	TCF0.CTRLA = TC_CLKSEL_DIV1_gc;
    28f0:	e0 e0       	ldi	r30, 0x00	; 0
    28f2:	fb e0       	ldi	r31, 0x0B	; 11
    28f4:	81 e0       	ldi	r24, 0x01	; 1
    28f6:	80 83       	st	Z, r24
	
	TCF0.PER = 16000;  // 2000hz blocktick
    28f8:	80 e8       	ldi	r24, 0x80	; 128
    28fa:	9e e3       	ldi	r25, 0x3E	; 62
    28fc:	86 a3       	std	Z+38, r24	; 0x26
    28fe:	97 a3       	std	Z+39, r25	; 0x27
	TCF0.INTCTRLA = TC_OVFINTLVL_MED_gc;
    2900:	82 e0       	ldi	r24, 0x02	; 2
    2902:	86 83       	std	Z+6, r24	; 0x06
    2904:	08 95       	ret

00002906 <initBlockTick>:


void initBlockTick()
{

	blockTickRunning=0;
    2906:	10 92 32 20 	sts	0x2032, r1
    290a:	10 92 33 20 	sts	0x2033, r1
     
	scaryBlockTickHack();
    290e:	0e 94 78 14 	call	0x28f0	; 0x28f0 <scaryBlockTickHack>

	/* Enable interrupt levels. */
	PMIC.CTRL |= PMIC_HILVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_LOLVLEN_bm;
    2912:	e0 ea       	ldi	r30, 0xA0	; 160
    2914:	f0 e0       	ldi	r31, 0x00	; 0
    2916:	82 81       	ldd	r24, Z+2	; 0x02
    2918:	87 60       	ori	r24, 0x07	; 7
    291a:	82 83       	std	Z+2, r24	; 0x02
	sei();
    291c:	78 94       	sei
    291e:	08 95       	ret

00002920 <__vector_108>:
}

// part of scary blocktick hack
// called every 38400 khz or so
ISR(TCF0_OVF_vect)
{
    2920:	1f 92       	push	r1
    2922:	0f 92       	push	r0
    2924:	0f b6       	in	r0, 0x3f	; 63
    2926:	0f 92       	push	r0
    2928:	11 24       	eor	r1, r1
    292a:	0b b6       	in	r0, 0x3b	; 59
    292c:	0f 92       	push	r0
    292e:	2f 93       	push	r18
    2930:	3f 93       	push	r19
    2932:	4f 93       	push	r20
    2934:	5f 93       	push	r21
    2936:	6f 93       	push	r22
    2938:	7f 93       	push	r23
    293a:	8f 93       	push	r24
    293c:	9f 93       	push	r25
    293e:	af 93       	push	r26
    2940:	bf 93       	push	r27
    2942:	ef 93       	push	r30
    2944:	ff 93       	push	r31
	if (!blockTickRunning)
    2946:	80 91 32 20 	lds	r24, 0x2032
    294a:	90 91 33 20 	lds	r25, 0x2033
    294e:	89 2b       	or	r24, r25
    2950:	19 f4       	brne	.+6      	; 0x2958 <__vector_108+0x38>
	  {
	    wdt_reset();
    2952:	a8 95       	wdr
	    blockTick();
    2954:	0e 94 9b 01 	call	0x336	; 0x336 <blockTick>
	  }
}
    2958:	ff 91       	pop	r31
    295a:	ef 91       	pop	r30
    295c:	bf 91       	pop	r27
    295e:	af 91       	pop	r26
    2960:	9f 91       	pop	r25
    2962:	8f 91       	pop	r24
    2964:	7f 91       	pop	r23
    2966:	6f 91       	pop	r22
    2968:	5f 91       	pop	r21
    296a:	4f 91       	pop	r20
    296c:	3f 91       	pop	r19
    296e:	2f 91       	pop	r18
    2970:	0f 90       	pop	r0
    2972:	0b be       	out	0x3b, r0	; 59
    2974:	0f 90       	pop	r0
    2976:	0f be       	out	0x3f, r0	; 63
    2978:	0f 90       	pop	r0
    297a:	1f 90       	pop	r1
    297c:	18 95       	reti

0000297e <jumpToHWBootSection>:
#include <avr/io.h>
#include "../hw-api/hwBoot.h"

void jumpToHWBootSection(){
	uint8_t temp = RST.CTRL | RST_SWRST_bm;
    297e:	e8 e7       	ldi	r30, 0x78	; 120
    2980:	f0 e0       	ldi	r31, 0x00	; 0
    2982:	81 81       	ldd	r24, Z+1	; 0x01
    2984:	81 60       	ori	r24, 0x01	; 1
	CCP = CCP_IOREG_gc; // grab permission to modify the reset reg
    2986:	98 ed       	ldi	r25, 0xD8	; 216
    2988:	94 bf       	out	0x34, r25	; 52
	RST.CTRL = temp; // set the reset reg to trigger a SW reset
    298a:	81 83       	std	Z+1, r24	; 0x01
    298c:	08 95       	ret

0000298e <crcCalc>:
byte crcCalc(byte currCrc, byte newVal)
{
    byte crc = currCrc;
	int i;
	
	crc ^= newVal;
    298e:	68 27       	eor	r22, r24
    2990:	28 e0       	ldi	r18, 0x08	; 8
    2992:	30 e0       	ldi	r19, 0x00	; 0
    for (i=0; i<8; i++)
	{
        if (0x80 & crc) {
    2994:	67 ff       	sbrs	r22, 7
    2996:	09 c0       	rjmp	.+18     	; 0x29aa <crcCalc+0x1c>
            crc = (crc << 1) ^ CRC_POLY;
    2998:	86 2f       	mov	r24, r22
    299a:	90 e0       	ldi	r25, 0x00	; 0
    299c:	88 0f       	add	r24, r24
    299e:	99 1f       	adc	r25, r25
    29a0:	46 ea       	ldi	r20, 0xA6	; 166
    29a2:	84 27       	eor	r24, r20
    29a4:	90 95       	com	r25
    29a6:	68 2f       	mov	r22, r24
    29a8:	01 c0       	rjmp	.+2      	; 0x29ac <crcCalc+0x1e>
        }
		else {
            crc = crc << 1;
    29aa:	66 0f       	add	r22, r22
    29ac:	21 50       	subi	r18, 0x01	; 1
    29ae:	31 09       	sbc	r19, r1
{
    byte crc = currCrc;
	int i;
	
	crc ^= newVal;
    for (i=0; i<8; i++)
    29b0:	89 f7       	brne	.-30     	; 0x2994 <crcCalc+0x6>
		else {
            crc = crc << 1;
        }
    }
	return crc;
} 
    29b2:	86 2f       	mov	r24, r22
    29b4:	08 95       	ret

000029b6 <ackHandler>:
// handles the ack byte and updates the packet queue
//    (parity, timer, CTS)
// inputs:  port received on
// returns: nothing
void ackHandler(PRef p)
{
    29b6:	0f 93       	push	r16
    29b8:	1f 93       	push	r17
    29ba:	cf 93       	push	r28
    29bc:	df 93       	push	r29
    byte currParity = sendParity(port[p].sq);
    29be:	98 e5       	ldi	r25, 0x58	; 88
    29c0:	89 9f       	mul	r24, r25
    29c2:	80 01       	movw	r16, r0
    29c4:	11 24       	eor	r1, r1
    29c6:	e8 01       	movw	r28, r16
    29c8:	c4 5a       	subi	r28, 0xA4	; 164
    29ca:	dc 4d       	sbci	r29, 0xDC	; 220
    29cc:	3e 85       	ldd	r19, Y+14	; 0x0e
    
    // check for double acks (shouldn't ever happen)
    if( !(gotOddAck(port[p].rq) ^ gotEvenAck(port[p].rq)) ) 
    29ce:	9d 89       	ldd	r25, Y+21	; 0x15
    29d0:	29 2f       	mov	r18, r25
    29d2:	26 95       	lsr	r18
    29d4:	42 2f       	mov	r20, r18
    29d6:	49 27       	eor	r20, r25
    29d8:	9c 7f       	andi	r25, 0xFC	; 252
    {
        clearReceivedAcks( port[p].rq );
    29da:	9d 8b       	std	Y+21, r25	; 0x15
void ackHandler(PRef p)
{
    byte currParity = sendParity(port[p].sq);
    
    // check for double acks (shouldn't ever happen)
    if( !(gotOddAck(port[p].rq) ^ gotEvenAck(port[p].rq)) ) 
    29dc:	40 ff       	sbrs	r20, 0
    {
        clearReceivedAcks( port[p].rq );
        return;
    29de:	18 c0       	rjmp	.+48     	; 0x2a10 <ackHandler+0x5a>
//    (parity, timer, CTS)
// inputs:  port received on
// returns: nothing
void ackHandler(PRef p)
{
    byte currParity = sendParity(port[p].sq);
    29e0:	32 fb       	bst	r19, 2
    29e2:	99 27       	eor	r25, r25
    29e4:	90 f9       	bld	r25, 0
    if( !(gotOddAck(port[p].rq) ^ gotEvenAck(port[p].rq)) ) 
    {
        clearReceivedAcks( port[p].rq );
        return;
    }
    byte recdParity = gotOddAck(port[p].rq);
    29e6:	21 70       	andi	r18, 0x01	; 1
    clearReceivedAcks( port[p].rq );
    
    // parity matches
    if(currParity == recdParity)
    29e8:	92 13       	cpse	r25, r18
    29ea:	12 c0       	rjmp	.+36     	; 0x2a10 <ackHandler+0x5a>
    {
        // remove the Chunk, call callback with successfull response
        removeFromSq(p, MSG_RESP_ACK);
    29ec:	68 e0       	ldi	r22, 0x08	; 8
    29ee:	0e 94 4d 02 	call	0x49a	; 0x49a <removeFromSq>
        
        // reset the flags
        port[p].sq.retry    = NUM_RETRIES;
    29f2:	94 e0       	ldi	r25, 0x04	; 4
    29f4:	9d 87       	std	Y+13, r25	; 0x0d
        flipParity(port[p].sq);
    29f6:	8e 85       	ldd	r24, Y+14	; 0x0e
    29f8:	89 27       	eor	r24, r25
        port[p].sq.flags   |= CLEAR_TO_SEND;
    29fa:	80 64       	ori	r24, 0x40	; 64
    29fc:	8e 87       	std	Y+14, r24	; 0x0e
        
        // reset the timer
        deregisterTimeout(&(port[p].sq.qtout.tout));
    29fe:	c8 01       	movw	r24, r16
    2a00:	83 5a       	subi	r24, 0xA3	; 163
    2a02:	9c 4d       	sbci	r25, 0xDC	; 220
    }
    // else, parity error - don't do anything
}
    2a04:	df 91       	pop	r29
    2a06:	cf 91       	pop	r28
    2a08:	1f 91       	pop	r17
    2a0a:	0f 91       	pop	r16
        port[p].sq.retry    = NUM_RETRIES;
        flipParity(port[p].sq);
        port[p].sq.flags   |= CLEAR_TO_SEND;
        
        // reset the timer
        deregisterTimeout(&(port[p].sq.qtout.tout));
    2a0c:	0c 94 47 09 	jmp	0x128e	; 0x128e <deregisterTimeout>
    }
    // else, parity error - don't do anything
}
    2a10:	df 91       	pop	r29
    2a12:	cf 91       	pop	r28
    2a14:	1f 91       	pop	r17
    2a16:	0f 91       	pop	r16
    2a18:	08 95       	ret

00002a1a <addToGlobalRq>:

// adds a Chunk to the global receive queue
void addToGlobalRq(Chunk* c)
{
    // nothing to add
    if( c == NULL ) 
    2a1a:	00 97       	sbiw	r24, 0x00	; 0
    2a1c:	d9 f0       	breq	.+54     	; 0x2a54 <addToGlobalRq+0x3a>
    {
        return;
    }
        
    // isolate Chunk
    c->next = NULL;
    2a1e:	fc 01       	movw	r30, r24
    2a20:	12 8a       	std	Z+18, r1	; 0x12
    2a22:	13 8a       	std	Z+19, r1	; 0x13
    
    // update pointers
    if( globalRq.head == NULL ) 
    2a24:	20 91 52 20 	lds	r18, 0x2052
    2a28:	30 91 53 20 	lds	r19, 0x2053
    2a2c:	23 2b       	or	r18, r19
    2a2e:	29 f4       	brne	.+10     	; 0x2a3a <addToGlobalRq+0x20>
    {
        globalRq.head = c;
    2a30:	80 93 52 20 	sts	0x2052, r24
    2a34:	90 93 53 20 	sts	0x2053, r25
    2a38:	06 c0       	rjmp	.+12     	; 0x2a46 <addToGlobalRq+0x2c>
    }
    else 
    {
        globalRq.tail->next = c;
    2a3a:	e0 91 54 20 	lds	r30, 0x2054
    2a3e:	f0 91 55 20 	lds	r31, 0x2055
    2a42:	82 8b       	std	Z+18, r24	; 0x12
    2a44:	93 8b       	std	Z+19, r25	; 0x13
    }
    
    // add/flag it
    globalRq.tail  = c;
    2a46:	80 93 54 20 	sts	0x2054, r24
    2a4a:	90 93 55 20 	sts	0x2055, r25
    globalRq.flags = PACKET_READY;
    2a4e:	80 e8       	ldi	r24, 0x80	; 128
    2a50:	80 93 56 20 	sts	0x2056, r24
    2a54:	08 95       	ret

00002a56 <isSpecial>:
}

// check to see if character is special
byte isSpecial(byte val)
{
    2a56:	28 2f       	mov	r18, r24
    if( ((val & ACK_MASK) == ACK   ) || ((val & ACK_MASK) == NACK  ) ||
    2a58:	98 2f       	mov	r25, r24
    2a5a:	9e 7f       	andi	r25, 0xFE	; 254
        ((val & FD_MASK)  == FD    ) || (val              == ESCAPE )   )
    {
        return 1;
    2a5c:	81 e0       	ldi	r24, 0x01	; 1
}

// check to see if character is special
byte isSpecial(byte val)
{
    if( ((val & ACK_MASK) == ACK   ) || ((val & ACK_MASK) == NACK  ) ||
    2a5e:	98 30       	cpi	r25, 0x08	; 8
    2a60:	41 f0       	breq	.+16     	; 0x2a72 <isSpecial+0x1c>
    2a62:	9a 30       	cpi	r25, 0x0A	; 10
    2a64:	31 f0       	breq	.+12     	; 0x2a72 <isSpecial+0x1c>
    2a66:	92 31       	cpi	r25, 0x12	; 18
    2a68:	29 f0       	breq	.+10     	; 0x2a74 <isSpecial+0x1e>
        ((val & FD_MASK)  == FD    ) || (val              == ESCAPE )   )
    2a6a:	2d 37       	cpi	r18, 0x7D	; 125
    2a6c:	19 f0       	breq	.+6      	; 0x2a74 <isSpecial+0x1e>
    2a6e:	80 e0       	ldi	r24, 0x00	; 0
    2a70:	08 95       	ret
    2a72:	08 95       	ret
    {
        return 1;
    }
        
    return 0;
}
    2a74:	08 95       	ret

00002a76 <sendToBuffer>:

// makes the Chunk into the correct send string
void sendToBuffer(PRef p, Chunk* c, byte parity)
{
    2a76:	9f 92       	push	r9
    2a78:	af 92       	push	r10
    2a7a:	bf 92       	push	r11
    2a7c:	cf 92       	push	r12
    2a7e:	df 92       	push	r13
    2a80:	ef 92       	push	r14
    2a82:	ff 92       	push	r15
    2a84:	0f 93       	push	r16
    2a86:	1f 93       	push	r17
    2a88:	cf 93       	push	r28
    2a8a:	df 93       	push	r29
    2a8c:	b8 2e       	mov	r11, r24
    2a8e:	7b 01       	movw	r14, r22
    byte checksum = 0;
    byte val;
    byte i;
    byte delim;
    
    if(c == NULL)
    2a90:	61 15       	cp	r22, r1
    2a92:	71 05       	cpc	r23, r1
    2a94:	09 f4       	brne	.+2      	; 0x2a98 <sendToBuffer+0x22>
    2a96:	83 c0       	rjmp	.+262    	; 0x2b9e <sendToBuffer+0x128>
    {
        return;
    }
	
    // send FD
    delim = (FD | parity);
    2a98:	62 e1       	ldi	r22, 0x12	; 18
    2a9a:	c6 2e       	mov	r12, r22
    2a9c:	c4 2a       	or	r12, r20
    2a9e:	00 e0       	ldi	r16, 0x00	; 0
    2aa0:	10 e0       	ldi	r17, 0x00	; 0
}

// makes the Chunk into the correct send string
void sendToBuffer(PRef p, Chunk* c, byte parity)
{
    byte checksum = 0;
    2aa2:	d1 2c       	mov	r13, r1
            push(val^ESCAPE_CHAR, &(port[p].tx));
        }
        // send regular
        else 
        {
            push(val, &(port[p].tx));
    2aa4:	88 e5       	ldi	r24, 0x58	; 88
    2aa6:	b8 9e       	mul	r11, r24
    2aa8:	e0 01       	movw	r28, r0
    2aaa:	11 24       	eor	r1, r1
    2aac:	cc 56       	subi	r28, 0x6C	; 108
    2aae:	dc 4d       	sbci	r29, 0xDC	; 220
        
        // escape it
        if( isSpecial(val) ) 
        {
            push(ESCAPE, &(port[p].tx));
            push(val^ESCAPE_CHAR, &(port[p].tx));
    2ab0:	70 e2       	ldi	r23, 0x20	; 32
    2ab2:	97 2e       	mov	r9, r23
        
    return 0;
}

// makes the Chunk into the correct send string
void sendToBuffer(PRef p, Chunk* c, byte parity)
    2ab4:	f7 01       	movw	r30, r14
    2ab6:	e0 0f       	add	r30, r16
    2ab8:	f1 1f       	adc	r31, r17
    delim = (FD | parity);

    // send messageHandler
    for(i=0; i<POINTER_SIZE; i++)
    {
        val = c->handler[i];
    2aba:	a4 88       	ldd	r10, Z+20	; 0x14
        checksum = crcCalc(checksum, val);
    2abc:	6a 2d       	mov	r22, r10
    2abe:	8d 2d       	mov	r24, r13
    2ac0:	0e 94 c7 14 	call	0x298e	; 0x298e <crcCalc>
    2ac4:	d8 2e       	mov	r13, r24
        
        // escape it
        if( isSpecial(val) ) 
    2ac6:	8a 2d       	mov	r24, r10
    2ac8:	0e 94 2b 15 	call	0x2a56	; 0x2a56 <isSpecial>
        {
            push(ESCAPE, &(port[p].tx));
    2acc:	be 01       	movw	r22, r28
    {
        val = c->handler[i];
        checksum = crcCalc(checksum, val);
        
        // escape it
        if( isSpecial(val) ) 
    2ace:	88 23       	and	r24, r24
    2ad0:	39 f0       	breq	.+14     	; 0x2ae0 <sendToBuffer+0x6a>
        {
            push(ESCAPE, &(port[p].tx));
    2ad2:	8d e7       	ldi	r24, 0x7D	; 125
    2ad4:	0e 94 f7 01 	call	0x3ee	; 0x3ee <push>
            push(val^ESCAPE_CHAR, &(port[p].tx));
    2ad8:	be 01       	movw	r22, r28
    2ada:	8a 2d       	mov	r24, r10
    2adc:	89 25       	eor	r24, r9
    2ade:	01 c0       	rjmp	.+2      	; 0x2ae2 <sendToBuffer+0x6c>
        }
        // send regular
        else 
        {
            push(val, &(port[p].tx));
    2ae0:	8a 2d       	mov	r24, r10
    2ae2:	0e 94 f7 01 	call	0x3ee	; 0x3ee <push>
    2ae6:	0f 5f       	subi	r16, 0xFF	; 255
    2ae8:	1f 4f       	sbci	r17, 0xFF	; 255
	
    // send FD
    delim = (FD | parity);

    // send messageHandler
    for(i=0; i<POINTER_SIZE; i++)
    2aea:	02 30       	cpi	r16, 0x02	; 2
    2aec:	11 05       	cpc	r17, r1
    2aee:	11 f7       	brne	.-60     	; 0x2ab4 <sendToBuffer+0x3e>
    2af0:	01 e1       	ldi	r16, 0x11	; 17
            push(val^ESCAPE_CHAR, &(port[p].tx));
        }
        // send regular
        else 
        {
            push(val, &(port[p].tx));
    2af2:	e8 e5       	ldi	r30, 0x58	; 88
    2af4:	be 9e       	mul	r11, r30
    2af6:	e0 01       	movw	r28, r0
    2af8:	11 24       	eor	r1, r1
    2afa:	cc 56       	subi	r28, 0x6C	; 108
    2afc:	dc 4d       	sbci	r29, 0xDC	; 220
        // escape it
        if( isSpecial(val) ) 
        {
            push(ESCAPE, &(port[p].tx));

            push(val^ESCAPE_CHAR, &(port[p].tx));
    2afe:	50 e2       	ldi	r21, 0x20	; 32
    2b00:	95 2e       	mov	r9, r21
    }
    
    // send data
    for(i=0; i<DATA_SIZE; i++)
    {
        val = c->data[i];
    2b02:	f7 01       	movw	r30, r14
    2b04:	11 91       	ld	r17, Z+
    2b06:	7f 01       	movw	r14, r30
        checksum = crcCalc(checksum, val);
    2b08:	61 2f       	mov	r22, r17
    2b0a:	8d 2d       	mov	r24, r13
    2b0c:	0e 94 c7 14 	call	0x298e	; 0x298e <crcCalc>
    2b10:	d8 2e       	mov	r13, r24
        
        // escape it
        if( isSpecial(val) ) 
    2b12:	81 2f       	mov	r24, r17
    2b14:	0e 94 2b 15 	call	0x2a56	; 0x2a56 <isSpecial>
    2b18:	a8 2e       	mov	r10, r24
        {
            push(ESCAPE, &(port[p].tx));
    2b1a:	be 01       	movw	r22, r28
    {
        val = c->data[i];
        checksum = crcCalc(checksum, val);
        
        // escape it
        if( isSpecial(val) ) 
    2b1c:	88 23       	and	r24, r24
    2b1e:	39 f0       	breq	.+14     	; 0x2b2e <sendToBuffer+0xb8>
        {
            push(ESCAPE, &(port[p].tx));
    2b20:	8d e7       	ldi	r24, 0x7D	; 125
    2b22:	0e 94 f7 01 	call	0x3ee	; 0x3ee <push>

            push(val^ESCAPE_CHAR, &(port[p].tx));
    2b26:	be 01       	movw	r22, r28
    2b28:	81 2f       	mov	r24, r17
    2b2a:	89 25       	eor	r24, r9
    2b2c:	01 c0       	rjmp	.+2      	; 0x2b30 <sendToBuffer+0xba>
        }
        // send regular
        else 
        {
            push(val, &(port[p].tx));
    2b2e:	81 2f       	mov	r24, r17
    2b30:	0e 94 f7 01 	call	0x3ee	; 0x3ee <push>
    2b34:	01 50       	subi	r16, 0x01	; 1
            push(val, &(port[p].tx));
        }
    }
    
    // send data
    for(i=0; i<DATA_SIZE; i++)
    2b36:	29 f7       	brne	.-54     	; 0x2b02 <sendToBuffer+0x8c>
    2b38:	2b 2d       	mov	r18, r11
    2b3a:	30 e0       	ldi	r19, 0x00	; 0

    // send checksum
	// escape it
    if( isSpecial(val) ) 
    {
        push(ESCAPE, &(port[p].tx));
    2b3c:	88 e5       	ldi	r24, 0x58	; 88
        }
    }

    // send checksum
	// escape it
    if( isSpecial(val) ) 
    2b3e:	aa 20       	and	r10, r10
    2b40:	79 f0       	breq	.+30     	; 0x2b60 <sendToBuffer+0xea>
    {
        push(ESCAPE, &(port[p].tx));
    2b42:	82 9f       	mul	r24, r18
    2b44:	e0 01       	movw	r28, r0
    2b46:	83 9f       	mul	r24, r19
    2b48:	d0 0d       	add	r29, r0
    2b4a:	11 24       	eor	r1, r1
    2b4c:	cc 56       	subi	r28, 0x6C	; 108
    2b4e:	dc 4d       	sbci	r29, 0xDC	; 220
    2b50:	be 01       	movw	r22, r28
    2b52:	8d e7       	ldi	r24, 0x7D	; 125
    2b54:	0e 94 f7 01 	call	0x3ee	; 0x3ee <push>
        push(checksum^ESCAPE_CHAR, &(port[p].tx));
    2b58:	be 01       	movw	r22, r28
    2b5a:	80 e2       	ldi	r24, 0x20	; 32
    2b5c:	8d 25       	eor	r24, r13
    2b5e:	08 c0       	rjmp	.+16     	; 0x2b70 <sendToBuffer+0xfa>
    }
    // send regular
    else 
    {
        push(checksum, &(port[p].tx));
    2b60:	82 9f       	mul	r24, r18
    2b62:	b0 01       	movw	r22, r0
    2b64:	83 9f       	mul	r24, r19
    2b66:	70 0d       	add	r23, r0
    2b68:	11 24       	eor	r1, r1
    2b6a:	6c 56       	subi	r22, 0x6C	; 108
    2b6c:	7c 4d       	sbci	r23, 0xDC	; 220
    2b6e:	8d 2d       	mov	r24, r13
    2b70:	0e 94 f7 01 	call	0x3ee	; 0x3ee <push>
    }
    
    // start the interrupt by sending a byte (FD)
    pPutChar(delim, port[p].pnum);
    2b74:	88 e5       	ldi	r24, 0x58	; 88
    2b76:	b8 9e       	mul	r11, r24
    2b78:	f0 01       	movw	r30, r0
    2b7a:	11 24       	eor	r1, r1
    2b7c:	e4 5a       	subi	r30, 0xA4	; 164
    2b7e:	fc 4d       	sbci	r31, 0xDC	; 220
    2b80:	60 81       	ld	r22, Z
    2b82:	8c 2d       	mov	r24, r12
}
    2b84:	df 91       	pop	r29
    2b86:	cf 91       	pop	r28
    2b88:	1f 91       	pop	r17
    2b8a:	0f 91       	pop	r16
    2b8c:	ff 90       	pop	r15
    2b8e:	ef 90       	pop	r14
    2b90:	df 90       	pop	r13
    2b92:	cf 90       	pop	r12
    2b94:	bf 90       	pop	r11
    2b96:	af 90       	pop	r10
    2b98:	9f 90       	pop	r9
    {
        push(checksum, &(port[p].tx));
    }
    
    // start the interrupt by sending a byte (FD)
    pPutChar(delim, port[p].pnum);
    2b9a:	0c 94 95 18 	jmp	0x312a	; 0x312a <pPutChar>
}
    2b9e:	df 91       	pop	r29
    2ba0:	cf 91       	pop	r28
    2ba2:	1f 91       	pop	r17
    2ba4:	0f 91       	pop	r16
    2ba6:	ff 90       	pop	r15
    2ba8:	ef 90       	pop	r14
    2baa:	df 90       	pop	r13
    2bac:	cf 90       	pop	r12
    2bae:	bf 90       	pop	r11
    2bb0:	af 90       	pop	r10
    2bb2:	9f 90       	pop	r9
    2bb4:	08 95       	ret

00002bb6 <processBuffer>:


// pulls bytes from the buffer and puts them into Chunks
// also handles ACKs appropriately
void processBuffer(PRef p)
{
    2bb6:	2f 92       	push	r2
    2bb8:	3f 92       	push	r3
    2bba:	4f 92       	push	r4
    2bbc:	5f 92       	push	r5
    2bbe:	6f 92       	push	r6
    2bc0:	7f 92       	push	r7
    2bc2:	8f 92       	push	r8
    2bc4:	9f 92       	push	r9
    2bc6:	af 92       	push	r10
    2bc8:	bf 92       	push	r11
    2bca:	cf 92       	push	r12
    2bcc:	df 92       	push	r13
    2bce:	ef 92       	push	r14
    2bd0:	ff 92       	push	r15
    2bd2:	0f 93       	push	r16
    2bd4:	1f 93       	push	r17
    2bd6:	cf 93       	push	r28
    2bd8:	df 93       	push	r29
    2bda:	38 2e       	mov	r3, r24
    byte   currByte;
    Chunk* currChunk = NULL;
    byte   wasEscape = wasEscapeStore[p];
    2bdc:	e8 2e       	mov	r14, r24
    2bde:	f1 2c       	mov	r15, r1
    2be0:	f7 01       	movw	r30, r14
    2be2:	e6 55       	subi	r30, 0x56	; 86
    2be4:	fa 4d       	sbci	r31, 0xDA	; 218
    2be6:	20 80       	ld	r2, Z


    // nothing to process
    if( isEmpty(&(port[p].rx)) )
    2be8:	88 e5       	ldi	r24, 0x58	; 88
    2bea:	8e 9d       	mul	r24, r14
    2bec:	e0 01       	movw	r28, r0
    2bee:	8f 9d       	mul	r24, r15
    2bf0:	d0 0d       	add	r29, r0
    2bf2:	11 24       	eor	r1, r1
    2bf4:	f4 e7       	ldi	r31, 0x74	; 116
    2bf6:	6f 2e       	mov	r6, r31
    2bf8:	f3 e2       	ldi	r31, 0x23	; 35
    2bfa:	7f 2e       	mov	r7, r31
    2bfc:	6c 0e       	add	r6, r28
    2bfe:	7d 1e       	adc	r7, r29
    2c00:	c3 01       	movw	r24, r6
    2c02:	0e 94 2d 02 	call	0x45a	; 0x45a <isEmpty>
    2c06:	81 11       	cpse	r24, r1
    2c08:	d9 c0       	rjmp	.+434    	; 0x2dbc <processBuffer+0x206>
    {
        return;
    }

    // continue filling unfinished Chunk
    if( (port[p].rq.curr != NULL) && chunkFilling(port[p].rq.curr) ) 
    2c0a:	fe 01       	movw	r30, r28
    2c0c:	e4 5a       	subi	r30, 0xA4	; 164
    2c0e:	fc 4d       	sbci	r31, 0xDC	; 220
    2c10:	46 88       	ldd	r4, Z+22	; 0x16
    2c12:	57 88       	ldd	r5, Z+23	; 0x17
    2c14:	41 14       	cp	r4, r1
    2c16:	51 04       	cpc	r5, r1
    2c18:	21 f0       	breq	.+8      	; 0x2c22 <processBuffer+0x6c>
    2c1a:	f2 01       	movw	r30, r4
    2c1c:	81 89       	ldd	r24, Z+17	; 0x11
    2c1e:	86 fd       	sbrc	r24, 6
    2c20:	ac c0       	rjmp	.+344    	; 0x2d7a <processBuffer+0x1c4>
    {
        currChunk = port[p].rq.curr;
    }
    else
    {
        port[p].rq.index    = 0;
    2c22:	88 e5       	ldi	r24, 0x58	; 88
    2c24:	8e 9d       	mul	r24, r14
    2c26:	f0 01       	movw	r30, r0
    2c28:	8f 9d       	mul	r24, r15
    2c2a:	f0 0d       	add	r31, r0
    2c2c:	11 24       	eor	r1, r1
    2c2e:	e4 5a       	subi	r30, 0xA4	; 164
    2c30:	fc 4d       	sbci	r31, 0xDC	; 220
    2c32:	13 8a       	std	Z+19, r1	; 0x13
        port[p].rq.checksum = 0;
    2c34:	14 8a       	std	Z+20, r1	; 0x14
        wasEscape           = 0;
    2c36:	21 2c       	mov	r2, r1
// pulls bytes from the buffer and puts them into Chunks
// also handles ACKs appropriately
void processBuffer(PRef p)
{
    byte   currByte;
    Chunk* currChunk = NULL;
    2c38:	41 2c       	mov	r4, r1
    2c3a:	51 2c       	mov	r5, r1
    2c3c:	9e c0       	rjmp	.+316    	; 0x2d7a <processBuffer+0x1c4>
        wasEscape           = 0;
    }
                
    while( !isEmpty(&(port[p].rx)) )
    {
        currByte = (byte)pop(&(port[p].rx));
    2c3e:	c3 01       	movw	r24, r6
    2c40:	0e 94 12 02 	call	0x424	; 0x424 <pop>
        
        // is ACK
        if( (currByte & ACK_MASK) == ACK )
    2c44:	bc 01       	movw	r22, r24
    2c46:	6e 7f       	andi	r22, 0xFE	; 254
    2c48:	77 27       	eor	r23, r23
    2c4a:	68 30       	cpi	r22, 0x08	; 8
    2c4c:	71 05       	cpc	r23, r1
    2c4e:	91 f4       	brne	.+36     	; 0x2c74 <processBuffer+0xbe>
        {
            // set ack parity
            port[p].rq.flags |= (1 << (currByte & 0x01));
    2c50:	81 70       	andi	r24, 0x01	; 1
    2c52:	99 27       	eor	r25, r25
    2c54:	21 e0       	ldi	r18, 0x01	; 1
    2c56:	30 e0       	ldi	r19, 0x00	; 0
    2c58:	02 c0       	rjmp	.+4      	; 0x2c5e <processBuffer+0xa8>
    2c5a:	22 0f       	add	r18, r18
    2c5c:	33 1f       	adc	r19, r19
    2c5e:	8a 95       	dec	r24
    2c60:	e2 f7       	brpl	.-8      	; 0x2c5a <processBuffer+0xa4>
    2c62:	c9 01       	movw	r24, r18
    2c64:	f8 01       	movw	r30, r16
    2c66:	90 81       	ld	r25, Z
    2c68:	98 2b       	or	r25, r24
    2c6a:	90 83       	st	Z, r25
        
            ackHandler(p);
    2c6c:	83 2d       	mov	r24, r3
    2c6e:	0e 94 db 14 	call	0x29b6	; 0x29b6 <ackHandler>
            continue;
    2c72:	9a c0       	rjmp	.+308    	; 0x2da8 <processBuffer+0x1f2>
	        nackHandler(p);
	        continue;
	        }*/
        
        // is FRAME_DELIMETER
        if( (currByte & FD_MASK) == FD )
    2c74:	62 31       	cpi	r22, 0x12	; 18
    2c76:	71 05       	cpc	r23, r1
    2c78:	01 f5       	brne	.+64     	; 0x2cba <processBuffer+0x104>
        {
            // determine parity
            byte parity = setParityFromByte(currByte);
    2c7a:	81 70       	andi	r24, 0x01	; 1
    2c7c:	99 27       	eor	r25, r25
    2c7e:	28 2e       	mov	r2, r24
    2c80:	22 94       	swap	r2
    2c82:	22 0c       	add	r2, r2
    2c84:	e0 ee       	ldi	r30, 0xE0	; 224
    2c86:	2e 22       	and	r2, r30
        
            // restart the fill
            port[p].rq.index    = 0;
    2c88:	f6 01       	movw	r30, r12
    2c8a:	10 82       	st	Z, r1
            port[p].rq.checksum = 0;
    2c8c:	f5 01       	movw	r30, r10
    2c8e:	10 82       	st	Z, r1
            wasEscape           = 0;
                
            // unfinished Chunk
            if(port[p].rq.curr != NULL)
    2c90:	f4 01       	movw	r30, r8
    2c92:	40 80       	ld	r4, Z
    2c94:	51 80       	ldd	r5, Z+1	; 0x01
    2c96:	41 14       	cp	r4, r1
    2c98:	51 04       	cpc	r5, r1
    2c9a:	49 f4       	brne	.+18     	; 0x2cae <processBuffer+0xf8>
                currChunk = port[p].rq.curr;
            }
            // need new Chunk
            else
            {
                currChunk = getSystemRXChunk();
    2c9c:	0e 94 9e 07 	call	0xf3c	; 0xf3c <getSystemRXChunk>
    2ca0:	2c 01       	movw	r4, r24
					// insert receive time
					//insertReceiveTime(currChunk);
				}*/
#endif
                // out of memory, can't fill
                if( currChunk == NULL )
    2ca2:	00 97       	sbiw	r24, 0x00	; 0
    2ca4:	09 f4       	brne	.+2      	; 0x2ca8 <processBuffer+0xf2>
    2ca6:	64 c0       	rjmp	.+200    	; 0x2d70 <processBuffer+0x1ba>
                    // discard bytes, hopefully will get resent
                    continue;
                }
                
                // add to the queue
                port[p].rq.curr = currChunk;
    2ca8:	f4 01       	movw	r30, r8
    2caa:	80 83       	st	Z, r24
    2cac:	91 83       	std	Z+1, r25	; 0x01
            }
            
            // reset the status of the Chunk, just in case
            currChunk->status = CHUNK_USED | CHUNK_FILLING | parity | port[p].pnum;
    2cae:	98 81       	ld	r25, Y
    2cb0:	90 6c       	ori	r25, 0xC0	; 192
    2cb2:	92 29       	or	r25, r2
    2cb4:	f2 01       	movw	r30, r4
    2cb6:	91 8b       	std	Z+17, r25	; 0x11
    2cb8:	5b c0       	rjmp	.+182    	; 0x2d70 <processBuffer+0x1ba>
            
            continue;
        }
        
        // no use processing if can't put anywhere
        if(currChunk == NULL)
    2cba:	41 14       	cp	r4, r1
    2cbc:	51 04       	cpc	r5, r1
    2cbe:	09 f4       	brne	.+2      	; 0x2cc2 <processBuffer+0x10c>
    2cc0:	73 c0       	rjmp	.+230    	; 0x2da8 <processBuffer+0x1f2>
        wasEscape           = 0;
    }
                
    while( !isEmpty(&(port[p].rx)) )
    {
        currByte = (byte)pop(&(port[p].rx));
    2cc2:	68 2f       	mov	r22, r24
        {
            continue;
        }
        
        // is an escape char        
        if( currByte == ESCAPE )
    2cc4:	8d 37       	cpi	r24, 0x7D	; 125
    2cc6:	09 f4       	brne	.+2      	; 0x2cca <processBuffer+0x114>
    2cc8:	55 c0       	rjmp	.+170    	; 0x2d74 <processBuffer+0x1be>
            continue;
        }

        // is a regular character
        // was escaped
        if( wasEscape )
    2cca:	22 20       	and	r2, r2
    2ccc:	19 f0       	breq	.+6      	; 0x2cd4 <processBuffer+0x11e>
        {
            currByte ^= ESCAPE_CHAR;
    2cce:	f0 e2       	ldi	r31, 0x20	; 32
    2cd0:	8f 27       	eor	r24, r31
    2cd2:	68 2f       	mov	r22, r24
            wasEscape = 0;
        }

        // is transmitted checksum
        if( port[p].rq.index >= (DATA_SIZE + POINTER_SIZE) )
    2cd4:	f6 01       	movw	r30, r12
    2cd6:	80 81       	ld	r24, Z
    2cd8:	83 31       	cpi	r24, 0x13	; 19
    2cda:	b0 f1       	brcs	.+108    	; 0x2d48 <processBuffer+0x192>
        {
            // checksum matches!
            if( currByte == port[p].rq.checksum )
    2cdc:	f5 01       	movw	r30, r10
    2cde:	80 81       	ld	r24, Z
    2ce0:	68 13       	cpse	r22, r24
    2ce2:	2a c0       	rjmp	.+84     	; 0x2d38 <processBuffer+0x182>
            {
                currChunk->status &= ~CHUNK_FILLING;
    2ce4:	f2 01       	movw	r30, r4
    2ce6:	81 89       	ldd	r24, Z+17	; 0x11
    2ce8:	8f 7b       	andi	r24, 0xBF	; 191
    2cea:	81 8b       	std	Z+17, r24	; 0x11
                port[p].rq.flags  |=  CHUNK_READY;
    2cec:	f8 01       	movw	r30, r16
    2cee:	80 81       	ld	r24, Z
    2cf0:	80 68       	ori	r24, 0x80	; 128
    2cf2:	80 83       	st	Z, r24
				
                // check for parity error
                byte parity = chunkParity(currChunk);
    2cf4:	f2 01       	movw	r30, r4
    2cf6:	91 89       	ldd	r25, Z+17	; 0x11
    2cf8:	95 fb       	bst	r25, 5
    2cfa:	99 27       	eor	r25, r25
    2cfc:	90 f9       	bld	r25, 0
                byte last   = parityLastChunk(port[p].rq);
    2cfe:	86 fb       	bst	r24, 6
    2d00:	88 27       	eor	r24, r24
    2d02:	80 f9       	bld	r24, 0
	      
                // not a duplicate packet		
                if(parity != last) {
    2d04:	98 17       	cp	r25, r24
    2d06:	91 f0       	breq	.+36     	; 0x2d2c <processBuffer+0x176>
                    // update neighborhood (fix for race condition)
                    //updateNeighbor(p, PRESENT);
#ifdef CLOCK_SYNC
					if (isAClockSyncMessage(currChunk) == 1)
    2d08:	c2 01       	movw	r24, r4
    2d0a:	0e 94 96 0c 	call	0x192c	; 0x192c <isAClockSyncMessage>
    2d0e:	81 30       	cpi	r24, 0x01	; 1
    2d10:	19 f4       	brne	.+6      	; 0x2d18 <processBuffer+0x162>
					{		
						// insert receive time
						insertReceiveTime(currChunk);
    2d12:	c2 01       	movw	r24, r4
    2d14:	0e 94 a4 0c 	call	0x1948	; 0x1948 <insertReceiveTime>
					}
#endif
                    // add to global receive queue
                    addToGlobalRq(currChunk);
    2d18:	c2 01       	movw	r24, r4
    2d1a:	0e 94 0d 15 	call	0x2a1a	; 0x2a1a <addToGlobalRq>
		
                    // flip the parity
                    flipParityLast(port[p].rq);
    2d1e:	f8 01       	movw	r30, r16
    2d20:	80 81       	ld	r24, Z
    2d22:	f0 e4       	ldi	r31, 0x40	; 64
    2d24:	8f 27       	eor	r24, r31
    2d26:	f8 01       	movw	r30, r16
    2d28:	80 83       	st	Z, r24
    2d2a:	03 c0       	rjmp	.+6      	; 0x2d32 <processBuffer+0x17c>
                }
                // free the chunk
                else 
                {
                    freeChunk(currChunk);
    2d2c:	c2 01       	movw	r24, r4
    2d2e:	0e 94 72 07 	call	0xee4	; 0xee4 <freeChunk>
                }
              
                // remove from the port rq
                port[p].rq.curr = NULL;
    2d32:	f4 01       	movw	r30, r8
    2d34:	10 82       	st	Z, r1
    2d36:	11 82       	std	Z+1, r1	; 0x01
            }
            
            // reset the data
            port[p].rq.index    = 0;
    2d38:	f6 01       	movw	r30, r12
    2d3a:	10 82       	st	Z, r1
            port[p].rq.checksum = 0;
    2d3c:	f5 01       	movw	r30, r10
    2d3e:	10 82       	st	Z, r1
            wasEscape           = 0;
    2d40:	21 2c       	mov	r2, r1
            currChunk           = NULL;
    2d42:	41 2c       	mov	r4, r1
    2d44:	51 2c       	mov	r5, r1
	    
            /// TODO: send NACK
            continue;
    2d46:	30 c0       	rjmp	.+96     	; 0x2da8 <processBuffer+0x1f2>
    2d48:	e8 2f       	mov	r30, r24
    2d4a:	f0 e0       	ldi	r31, 0x00	; 0
        }
		
        // message handler
        if( port[p].rq.index < POINTER_SIZE )
        {
            currChunk->handler[port[p].rq.index] = currByte;
    2d4c:	e4 0d       	add	r30, r4
    2d4e:	f5 1d       	adc	r31, r5
            /// TODO: send NACK
            continue;
        }
		
        // message handler
        if( port[p].rq.index < POINTER_SIZE )
    2d50:	82 30       	cpi	r24, 0x02	; 2
    2d52:	10 f4       	brcc	.+4      	; 0x2d58 <processBuffer+0x1a2>
        {
            currChunk->handler[port[p].rq.index] = currByte;
    2d54:	64 8b       	std	Z+20, r22	; 0x14
    2d56:	02 c0       	rjmp	.+4      	; 0x2d5c <processBuffer+0x1a6>
        }
        // regular byte
        else
        {
            currChunk->data[port[p].rq.index-POINTER_SIZE] = currByte;
    2d58:	32 97       	sbiw	r30, 0x02	; 2
    2d5a:	60 83       	st	Z, r22
        }

        port[p].rq.checksum = crcCalc(port[p].rq.checksum, currByte);
    2d5c:	f5 01       	movw	r30, r10
    2d5e:	80 81       	ld	r24, Z
    2d60:	0e 94 c7 14 	call	0x298e	; 0x298e <crcCalc>
    2d64:	f5 01       	movw	r30, r10
    2d66:	80 83       	st	Z, r24
        port[p].rq.index++;
    2d68:	f6 01       	movw	r30, r12
    2d6a:	80 81       	ld	r24, Z
    2d6c:	8f 5f       	subi	r24, 0xFF	; 255
    2d6e:	80 83       	st	Z, r24
            byte parity = setParityFromByte(currByte);
        
            // restart the fill
            port[p].rq.index    = 0;
            port[p].rq.checksum = 0;
            wasEscape           = 0;
    2d70:	21 2c       	mov	r2, r1
    2d72:	1a c0       	rjmp	.+52     	; 0x2da8 <processBuffer+0x1f2>
        }
        
        // is an escape char        
        if( currByte == ESCAPE )
        {
            wasEscape = 1;   
    2d74:	22 24       	eor	r2, r2
    2d76:	23 94       	inc	r2
    2d78:	17 c0       	rjmp	.+46     	; 0x2da8 <processBuffer+0x1f2>
            currByte ^= ESCAPE_CHAR;
            wasEscape = 0;
        }

        // is transmitted checksum
        if( port[p].rq.index >= (DATA_SIZE + POINTER_SIZE) )
    2d7a:	88 e5       	ldi	r24, 0x58	; 88
    2d7c:	8e 9d       	mul	r24, r14
    2d7e:	e0 01       	movw	r28, r0
    2d80:	8f 9d       	mul	r24, r15
    2d82:	d0 0d       	add	r29, r0
    2d84:	11 24       	eor	r1, r1
    2d86:	c4 5a       	subi	r28, 0xA4	; 164
    2d88:	dc 4d       	sbci	r29, 0xDC	; 220
    2d8a:	6e 01       	movw	r12, r28
    2d8c:	f3 e1       	ldi	r31, 0x13	; 19
    2d8e:	cf 0e       	add	r12, r31
    2d90:	d1 1c       	adc	r13, r1
        else
        {
            currChunk->data[port[p].rq.index-POINTER_SIZE] = currByte;
        }

        port[p].rq.checksum = crcCalc(port[p].rq.checksum, currByte);
    2d92:	5e 01       	movw	r10, r28
    2d94:	24 e1       	ldi	r18, 0x14	; 20
    2d96:	a2 0e       	add	r10, r18
    2d98:	b1 1c       	adc	r11, r1
        {
            // checksum matches!
            if( currByte == port[p].rq.checksum )
            {
                currChunk->status &= ~CHUNK_FILLING;
                port[p].rq.flags  |=  CHUNK_READY;
    2d9a:	8e 01       	movw	r16, r28
    2d9c:	0b 5e       	subi	r16, 0xEB	; 235
    2d9e:	1f 4f       	sbci	r17, 0xFF	; 255
                {
                    freeChunk(currChunk);
                }
              
                // remove from the port rq
                port[p].rq.curr = NULL;
    2da0:	4e 01       	movw	r8, r28
    2da2:	36 e1       	ldi	r19, 0x16	; 22
    2da4:	83 0e       	add	r8, r19
    2da6:	91 1c       	adc	r9, r1
        port[p].rq.index    = 0;
        port[p].rq.checksum = 0;
        wasEscape           = 0;
    }
                
    while( !isEmpty(&(port[p].rx)) )
    2da8:	c3 01       	movw	r24, r6
    2daa:	0e 94 2d 02 	call	0x45a	; 0x45a <isEmpty>
    2dae:	88 23       	and	r24, r24
    2db0:	09 f4       	brne	.+2      	; 0x2db4 <processBuffer+0x1fe>
    2db2:	45 cf       	rjmp	.-374    	; 0x2c3e <processBuffer+0x88>
        port[p].rq.checksum = crcCalc(port[p].rq.checksum, currByte);
        port[p].rq.index++;
    }
    
    // store wasEscape
    wasEscapeStore[p] = wasEscape;
    2db4:	f7 01       	movw	r30, r14
    2db6:	e6 55       	subi	r30, 0x56	; 86
    2db8:	fa 4d       	sbci	r31, 0xDA	; 218
    2dba:	20 82       	st	Z, r2
}
    2dbc:	df 91       	pop	r29
    2dbe:	cf 91       	pop	r28
    2dc0:	1f 91       	pop	r17
    2dc2:	0f 91       	pop	r16
    2dc4:	ff 90       	pop	r15
    2dc6:	ef 90       	pop	r14
    2dc8:	df 90       	pop	r13
    2dca:	cf 90       	pop	r12
    2dcc:	bf 90       	pop	r11
    2dce:	af 90       	pop	r10
    2dd0:	9f 90       	pop	r9
    2dd2:	8f 90       	pop	r8
    2dd4:	7f 90       	pop	r7
    2dd6:	6f 90       	pop	r6
    2dd8:	5f 90       	pop	r5
    2dda:	4f 90       	pop	r4
    2ddc:	3f 90       	pop	r3
    2dde:	2f 90       	pop	r2
    2de0:	08 95       	ret

00002de2 <nextPacket>:
Chunk* nextPacket(void)
{
    Chunk* c = NULL;

    // no packets
    if( globalRq.head == NULL )
    2de2:	e0 91 52 20 	lds	r30, 0x2052
    2de6:	f0 91 53 20 	lds	r31, 0x2053
    2dea:	30 97       	sbiw	r30, 0x00	; 0
    2dec:	51 f4       	brne	.+20     	; 0x2e02 <nextPacket+0x20>
    {
        globalRq.tail = NULL;
    2dee:	10 92 54 20 	sts	0x2054, r1
    2df2:	10 92 55 20 	sts	0x2055, r1
        globalRq.flags &= ~PACKET_READY;
    2df6:	80 91 56 20 	lds	r24, 0x2056
    2dfa:	8f 77       	andi	r24, 0x7F	; 127
    2dfc:	80 93 56 20 	sts	0x2056, r24
        return NULL;
    2e00:	13 c0       	rjmp	.+38     	; 0x2e28 <nextPacket+0x46>
    }

    // update pointers
    c = globalRq.head;
    
    globalRq.head = c->next;
    2e02:	82 89       	ldd	r24, Z+18	; 0x12
    2e04:	93 89       	ldd	r25, Z+19	; 0x13
    2e06:	80 93 52 20 	sts	0x2052, r24
    2e0a:	90 93 53 20 	sts	0x2053, r25
    if( globalRq.head == NULL )
    2e0e:	89 2b       	or	r24, r25
    2e10:	49 f4       	brne	.+18     	; 0x2e24 <nextPacket+0x42>
    {
        globalRq.flags &= ~PACKET_READY;
    2e12:	80 91 56 20 	lds	r24, 0x2056
    2e16:	8f 77       	andi	r24, 0x7F	; 127
    2e18:	80 93 56 20 	sts	0x2056, r24
        globalRq.tail = NULL;
    2e1c:	10 92 54 20 	sts	0x2054, r1
    2e20:	10 92 55 20 	sts	0x2055, r1
    }
    
    // isolate and return
    c->next = NULL;
    2e24:	12 8a       	std	Z+18, r1	; 0x12
    2e26:	13 8a       	std	Z+19, r1	; 0x13
    return c;
}
    2e28:	cf 01       	movw	r24, r30
    2e2a:	08 95       	ret

00002e2c <sendOnSerial>:

// try sending stuff if available and ready
void sendOnSerial(PRef p)
{
    2e2c:	df 92       	push	r13
    2e2e:	ef 92       	push	r14
    2e30:	ff 92       	push	r15
    2e32:	0f 93       	push	r16
    2e34:	1f 93       	push	r17
    2e36:	cf 93       	push	r28
    2e38:	df 93       	push	r29
    2e3a:	d8 2e       	mov	r13, r24
    // send acks
    if( shouldSendOddAck(port[p].sq) )
    2e3c:	08 2f       	mov	r16, r24
    2e3e:	10 e0       	ldi	r17, 0x00	; 0
    2e40:	28 e5       	ldi	r18, 0x58	; 88
    2e42:	82 9f       	mul	r24, r18
    2e44:	c0 01       	movw	r24, r0
    2e46:	11 24       	eor	r1, r1
    2e48:	ec 01       	movw	r28, r24
    2e4a:	c4 5a       	subi	r28, 0xA4	; 164
    2e4c:	dc 4d       	sbci	r29, 0xDC	; 220
    2e4e:	2e 85       	ldd	r18, Y+14	; 0x0e
    2e50:	21 ff       	sbrs	r18, 1
    2e52:	14 c0       	rjmp	.+40     	; 0x2e7c <sendOnSerial+0x50>
    {
        if( isEmpty(&(port[p].tx)) ) {
    2e54:	b4 e9       	ldi	r27, 0x94	; 148
    2e56:	eb 2e       	mov	r14, r27
    2e58:	b3 e2       	ldi	r27, 0x23	; 35
    2e5a:	fb 2e       	mov	r15, r27
    2e5c:	e8 0e       	add	r14, r24
    2e5e:	f9 1e       	adc	r15, r25
    2e60:	c7 01       	movw	r24, r14
    2e62:	0e 94 2d 02 	call	0x45a	; 0x45a <isEmpty>
    2e66:	88 23       	and	r24, r24
    2e68:	29 f0       	breq	.+10     	; 0x2e74 <sendOnSerial+0x48>
            pPutChar(ACK | ODD, port[p].pnum);
    2e6a:	68 81       	ld	r22, Y
    2e6c:	89 e0       	ldi	r24, 0x09	; 9
    2e6e:	0e 94 95 18 	call	0x312a	; 0x312a <pPutChar>
    2e72:	04 c0       	rjmp	.+8      	; 0x2e7c <sendOnSerial+0x50>
        }
        else {
            push(ACK | ODD, &(port[p].tx));
    2e74:	b7 01       	movw	r22, r14
    2e76:	89 e0       	ldi	r24, 0x09	; 9
    2e78:	0e 94 f7 01 	call	0x3ee	; 0x3ee <push>
        }
    }
    if( shouldSendEvenAck(port[p].sq) )
    2e7c:	88 e5       	ldi	r24, 0x58	; 88
    2e7e:	80 9f       	mul	r24, r16
    2e80:	e0 01       	movw	r28, r0
    2e82:	81 9f       	mul	r24, r17
    2e84:	d0 0d       	add	r29, r0
    2e86:	11 24       	eor	r1, r1
    2e88:	ac e5       	ldi	r26, 0x5C	; 92
    2e8a:	ea 2e       	mov	r14, r26
    2e8c:	a3 e2       	ldi	r26, 0x23	; 35
    2e8e:	fa 2e       	mov	r15, r26
    2e90:	ec 0e       	add	r14, r28
    2e92:	fd 1e       	adc	r15, r29
    2e94:	f7 01       	movw	r30, r14
    2e96:	86 85       	ldd	r24, Z+14	; 0x0e
    2e98:	80 ff       	sbrs	r24, 0
    2e9a:	11 c0       	rjmp	.+34     	; 0x2ebe <sendOnSerial+0x92>
    {
        if( isEmpty(&(port[p].tx)) ) {
    2e9c:	cc 56       	subi	r28, 0x6C	; 108
    2e9e:	dc 4d       	sbci	r29, 0xDC	; 220
    2ea0:	ce 01       	movw	r24, r28
    2ea2:	0e 94 2d 02 	call	0x45a	; 0x45a <isEmpty>
    2ea6:	88 23       	and	r24, r24
    2ea8:	31 f0       	breq	.+12     	; 0x2eb6 <sendOnSerial+0x8a>
            pPutChar(ACK | EVEN, port[p].pnum);
    2eaa:	f7 01       	movw	r30, r14
    2eac:	60 81       	ld	r22, Z
    2eae:	88 e0       	ldi	r24, 0x08	; 8
    2eb0:	0e 94 95 18 	call	0x312a	; 0x312a <pPutChar>
    2eb4:	04 c0       	rjmp	.+8      	; 0x2ebe <sendOnSerial+0x92>
        }
        else {
            push(ACK | EVEN, &(port[p].tx));
    2eb6:	be 01       	movw	r22, r28
    2eb8:	88 e0       	ldi	r24, 0x08	; 8
    2eba:	0e 94 f7 01 	call	0x3ee	; 0x3ee <push>
        }
    }
    clearSendAcks(port[p].sq);
    2ebe:	28 e5       	ldi	r18, 0x58	; 88
    2ec0:	20 9f       	mul	r18, r16
    2ec2:	c0 01       	movw	r24, r0
    2ec4:	21 9f       	mul	r18, r17
    2ec6:	90 0d       	add	r25, r0
    2ec8:	11 24       	eor	r1, r1
    2eca:	ec 01       	movw	r28, r24
    2ecc:	c4 5a       	subi	r28, 0xA4	; 164
    2ece:	dc 4d       	sbci	r29, 0xDC	; 220
    2ed0:	2e 85       	ldd	r18, Y+14	; 0x0e
    2ed2:	2c 7f       	andi	r18, 0xFC	; 252
    2ed4:	2e 87       	std	Y+14, r18	; 0x0e
    
    // send Chunk?
    if( chunkReady(port[p].sq) )
    2ed6:	27 ff       	sbrs	r18, 7
    2ed8:	4a c0       	rjmp	.+148    	; 0x2f6e <sendOnSerial+0x142>
    {
        if( clearToSend(port[p].sq) )
    2eda:	26 ff       	sbrs	r18, 6
    2edc:	48 c0       	rjmp	.+144    	; 0x2f6e <sendOnSerial+0x142>
        {
            // out of retries
            if( (port[p].sq.retry <= 0) || (port[p].sq.retry > NUM_RETRIES))
    2ede:	2d 85       	ldd	r18, Y+13	; 0x0d
    2ee0:	21 50       	subi	r18, 0x01	; 1
    2ee2:	24 30       	cpi	r18, 0x04	; 4
    2ee4:	70 f0       	brcs	.+28     	; 0x2f02 <sendOnSerial+0xd6>
            {
                // reset the timer
                deregisterTimeout(&(port[p].sq.qtout.tout));
    2ee6:	83 5a       	subi	r24, 0xA3	; 163
    2ee8:	9c 4d       	sbci	r25, 0xDC	; 220
    2eea:	0e 94 47 09 	call	0x128e	; 0x128e <deregisterTimeout>

                // flush the queue
                flushSendQueue(p);
    2eee:	8d 2d       	mov	r24, r13
    2ef0:	0e 94 91 02 	call	0x522	; 0x522 <flushSendQueue>
                        
                // reset the flags
                port[p].sq.retry    = NUM_RETRIES;
    2ef4:	94 e0       	ldi	r25, 0x04	; 4
    2ef6:	9d 87       	std	Y+13, r25	; 0x0d
                port[p].sq.flags   |= CLEAR_TO_SEND;
    2ef8:	8e 85       	ldd	r24, Y+14	; 0x0e
    2efa:	80 64       	ori	r24, 0x40	; 64
                flipParity(port[p].sq);
    2efc:	89 27       	eor	r24, r25
    2efe:	8e 87       	std	Y+14, r24	; 0x0e

                // ensemble level updates - remove neighbor, restart neighbor scanning
                //     These don't belong in data-link in my opinion
                //restartScan(p);

                return;
    2f00:	36 c0       	rjmp	.+108    	; 0x2f6e <sendOnSerial+0x142>
            }
            port[p].sq.retry--;
    2f02:	2d 87       	std	Y+13, r18	; 0x0d

#ifdef CLOCK_SYNC
			if (isAClockSyncMessage(port[p].sq.head) == 1)
    2f04:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f06:	98 89       	ldd	r25, Y+16	; 0x10
    2f08:	0e 94 96 0c 	call	0x192c	; 0x192c <isAClockSyncMessage>
    2f0c:	81 30       	cpi	r24, 0x01	; 1
    2f0e:	21 f4       	brne	.+8      	; 0x2f18 <sendOnSerial+0xec>
			{		
				// insert send time
				insertSendTime(port[p].sq.head);
    2f10:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f12:	98 89       	ldd	r25, Y+16	; 0x10
    2f14:	0e 94 b0 0c 	call	0x1960	; 0x1960 <insertSendTime>
			}
#endif
            sendToBuffer(p, port[p].sq.head, sendParity(port[p].sq) );
    2f18:	88 e5       	ldi	r24, 0x58	; 88
    2f1a:	80 9f       	mul	r24, r16
    2f1c:	70 01       	movw	r14, r0
    2f1e:	81 9f       	mul	r24, r17
    2f20:	f0 0c       	add	r15, r0
    2f22:	11 24       	eor	r1, r1
    2f24:	e7 01       	movw	r28, r14
    2f26:	c4 5a       	subi	r28, 0xA4	; 164
    2f28:	dc 4d       	sbci	r29, 0xDC	; 220
    2f2a:	4e 85       	ldd	r20, Y+14	; 0x0e
    2f2c:	42 fb       	bst	r20, 2
    2f2e:	44 27       	eor	r20, r20
    2f30:	40 f9       	bld	r20, 0
    2f32:	6f 85       	ldd	r22, Y+15	; 0x0f
    2f34:	78 89       	ldd	r23, Y+16	; 0x10
    2f36:	8d 2d       	mov	r24, r13
    2f38:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <sendToBuffer>
            port[p].sq.flags &= ~CLEAR_TO_SEND;
    2f3c:	8e 85       	ldd	r24, Y+14	; 0x0e
    2f3e:	8f 7b       	andi	r24, 0xBF	; 191
    2f40:	8e 87       	std	Y+14, r24	; 0x0e
            
            // start the timeout
            port[p].sq.qtout.tout.calltime = getTime() + DEFAULT_TIMEOUT;
    2f42:	0e 94 b4 08 	call	0x1168	; 0x1168 <getTime>
    2f46:	6e 5c       	subi	r22, 0xCE	; 206
    2f48:	7f 4f       	sbci	r23, 0xFF	; 255
    2f4a:	8f 4f       	sbci	r24, 0xFF	; 255
    2f4c:	9f 4f       	sbci	r25, 0xFF	; 255
    2f4e:	6b 83       	std	Y+3, r22	; 0x03
    2f50:	7c 83       	std	Y+4, r23	; 0x04
    2f52:	8d 83       	std	Y+5, r24	; 0x05
    2f54:	9e 83       	std	Y+6, r25	; 0x06
            registerTimeout(&(port[p].sq.qtout.tout));
    2f56:	c7 01       	movw	r24, r14
    2f58:	83 5a       	subi	r24, 0xA3	; 163
    2f5a:	9c 4d       	sbci	r25, 0xDC	; 220
        }
    }
}
    2f5c:	df 91       	pop	r29
    2f5e:	cf 91       	pop	r28
    2f60:	1f 91       	pop	r17
    2f62:	0f 91       	pop	r16
    2f64:	ff 90       	pop	r15
    2f66:	ef 90       	pop	r14
    2f68:	df 90       	pop	r13
            sendToBuffer(p, port[p].sq.head, sendParity(port[p].sq) );
            port[p].sq.flags &= ~CLEAR_TO_SEND;
            
            // start the timeout
            port[p].sq.qtout.tout.calltime = getTime() + DEFAULT_TIMEOUT;
            registerTimeout(&(port[p].sq.qtout.tout));
    2f6a:	0c 94 ff 08 	jmp	0x11fe	; 0x11fe <registerTimeout>
        }
    }
}
    2f6e:	df 91       	pop	r29
    2f70:	cf 91       	pop	r28
    2f72:	1f 91       	pop	r17
    2f74:	0f 91       	pop	r16
    2f76:	ff 90       	pop	r15
    2f78:	ef 90       	pop	r14
    2f7a:	df 90       	pop	r13
    2f7c:	08 95       	ret

00002f7e <initHWDataLink>:

// initialize
void initHWDataLink(){
    2f7e:	08 95       	ret

00002f80 <setHWLED>:
	
	//r = 255 - r;
	//g = 255 - g;
	//b = 255 - b;

	currentRGB[0] = r;
    2f80:	80 93 13 21 	sts	0x2113, r24
	currentRGB[1] = g;
    2f84:	60 93 14 21 	sts	0x2114, r22
	currentRGB[2] = b;
    2f88:	40 93 15 21 	sts	0x2115, r20

	rr = (uint16_t)i*(uint16_t)r;
    2f8c:	28 9f       	mul	r18, r24
    2f8e:	c0 01       	movw	r24, r0
    2f90:	11 24       	eor	r1, r1
	gg = (uint16_t)i*(uint16_t)g;
    2f92:	26 9f       	mul	r18, r22
    2f94:	b0 01       	movw	r22, r0
    2f96:	11 24       	eor	r1, r1
	bb = (uint16_t)i*(uint16_t)b;
    2f98:	24 9f       	mul	r18, r20
    2f9a:	a0 01       	movw	r20, r0
    2f9c:	11 24       	eor	r1, r1
	
	rr = 0xFFFF - rr;
    2f9e:	80 95       	com	r24
    2fa0:	90 95       	com	r25
	gg = 0xFFFF - gg;
    2fa2:	60 95       	com	r22
    2fa4:	70 95       	com	r23
	bb = 0xFFFF - bb;
    2fa6:	40 95       	com	r20
    2fa8:	50 95       	com	r21
	
	TCC0.CCABUF = rr;
    2faa:	e0 e0       	ldi	r30, 0x00	; 0
    2fac:	f8 e0       	ldi	r31, 0x08	; 8
    2fae:	80 af       	std	Z+56, r24	; 0x38
    2fb0:	91 af       	std	Z+57, r25	; 0x39
	TCC0.CCBBUF = rr;
    2fb2:	82 af       	std	Z+58, r24	; 0x3a
    2fb4:	93 af       	std	Z+59, r25	; 0x3b

	TCD0.CCABUF = gg;
    2fb6:	e0 e0       	ldi	r30, 0x00	; 0
    2fb8:	f9 e0       	ldi	r31, 0x09	; 9
    2fba:	60 af       	std	Z+56, r22	; 0x38
    2fbc:	71 af       	std	Z+57, r23	; 0x39
	TCD0.CCBBUF = bb;
    2fbe:	42 af       	std	Z+58, r20	; 0x3a
    2fc0:	53 af       	std	Z+59, r21	; 0x3b
	
	TCC1.CCABUF = gg;
    2fc2:	e0 e4       	ldi	r30, 0x40	; 64
    2fc4:	f8 e0       	ldi	r31, 0x08	; 8
    2fc6:	60 af       	std	Z+56, r22	; 0x38
    2fc8:	71 af       	std	Z+57, r23	; 0x39
	TCC1.CCBBUF = bb;
    2fca:	42 af       	std	Z+58, r20	; 0x3a
    2fcc:	53 af       	std	Z+59, r21	; 0x3b
    2fce:	08 95       	ret

00002fd0 <initHWLED>:


void initHWLED()
{
	// Initialize the RED
	TCC0.CTRLA |= TC_CLKSEL_DIV4_gc;	// RED clock source
    2fd0:	e0 e0       	ldi	r30, 0x00	; 0
    2fd2:	f8 e0       	ldi	r31, 0x08	; 8
    2fd4:	80 81       	ld	r24, Z
    2fd6:	83 60       	ori	r24, 0x03	; 3
    2fd8:	80 83       	st	Z, r24
	TCC0.CTRLB = TC0_CCAEN_bm | TC0_CCBEN_bm | TC_WGMODE_SS_gc;	// enable REDs, set WGM to SS PWM
    2fda:	33 e3       	ldi	r19, 0x33	; 51
    2fdc:	31 83       	std	Z+1, r19	; 0x01
	TCC0.PERBUF = 0xFFFF;		// set period to 8-bit for 8-bit resolution
    2fde:	8f ef       	ldi	r24, 0xFF	; 255
    2fe0:	9f ef       	ldi	r25, 0xFF	; 255
    2fe2:	86 ab       	std	Z+54, r24	; 0x36
    2fe4:	97 ab       	std	Z+55, r25	; 0x37
	TCC0.CCABUF = 0;		// set to off by default
    2fe6:	10 ae       	std	Z+56, r1	; 0x38
    2fe8:	11 ae       	std	Z+57, r1	; 0x39
	TCC0.CCBBUF = 0;		// set to off by default
    2fea:	12 ae       	std	Z+58, r1	; 0x3a
    2fec:	13 ae       	std	Z+59, r1	; 0x3b
	PORTC.DIRSET = PIN0_bm | PIN1_bm;  // set REDs to OUTPUT
    2fee:	a0 e4       	ldi	r26, 0x40	; 64
    2ff0:	b6 e0       	ldi	r27, 0x06	; 6
    2ff2:	23 e0       	ldi	r18, 0x03	; 3
    2ff4:	11 96       	adiw	r26, 0x01	; 1
    2ff6:	2c 93       	st	X, r18
    2ff8:	11 97       	sbiw	r26, 0x01	; 1

	TCC1.CTRLA = TC_CLKSEL_DIV4_gc;	// BLUE clock source
    2ffa:	e0 e4       	ldi	r30, 0x40	; 64
    2ffc:	f8 e0       	ldi	r31, 0x08	; 8
    2ffe:	20 83       	st	Z, r18
	TCC1.CTRLB = TC1_CCAEN_bm | TC1_CCBEN_bm | TC_WGMODE_SS_gc;	// enable BLUEs, set WGM to SS PWM
    3000:	31 83       	std	Z+1, r19	; 0x01
	TCC1.PERBUF = 0xFFFF;		// set period to 8-bit for 8-bit resolution
    3002:	86 ab       	std	Z+54, r24	; 0x36
    3004:	97 ab       	std	Z+55, r25	; 0x37
	TCC1.CCABUF = 0;		// set to off by default
    3006:	10 ae       	std	Z+56, r1	; 0x38
    3008:	11 ae       	std	Z+57, r1	; 0x39
	TCC1.CCBBUF = 0;		// set to off by default
    300a:	12 ae       	std	Z+58, r1	; 0x3a
    300c:	13 ae       	std	Z+59, r1	; 0x3b
	PORTC.DIRSET = PIN4_bm | PIN5_bm;  // set BLUEs to OUTPUT
    300e:	40 e3       	ldi	r20, 0x30	; 48
    3010:	11 96       	adiw	r26, 0x01	; 1
    3012:	4c 93       	st	X, r20

	TCD0.CTRLA = TC_CLKSEL_DIV4_gc;	// GREEN clock source
    3014:	e0 e0       	ldi	r30, 0x00	; 0
    3016:	f9 e0       	ldi	r31, 0x09	; 9
    3018:	20 83       	st	Z, r18
	TCD0.CTRLB = TC0_CCAEN_bm | TC0_CCBEN_bm | TC_WGMODE_SS_gc;	// enable REDs, set WGM to SS PWM
    301a:	31 83       	std	Z+1, r19	; 0x01
	TCD0.PERBUF = 0xFFFF;		// set period to 8-bit for 8-bit resolution
    301c:	86 ab       	std	Z+54, r24	; 0x36
    301e:	97 ab       	std	Z+55, r25	; 0x37
	TCD0.CCABUF = 0;		// set to off by default
    3020:	10 ae       	std	Z+56, r1	; 0x38
    3022:	11 ae       	std	Z+57, r1	; 0x39
	TCD0.CCBBUF = 0;		// set to off by default
    3024:	12 ae       	std	Z+58, r1	; 0x3a
    3026:	13 ae       	std	Z+59, r1	; 0x3b
	PORTD.DIRSET = PIN0_bm | PIN1_bm;  // set GREENs to OUTPUT	
    3028:	e0 e6       	ldi	r30, 0x60	; 96
    302a:	f6 e0       	ldi	r31, 0x06	; 6
    302c:	21 83       	std	Z+1, r18	; 0x01
    302e:	08 95       	ret

00003030 <store>:
//
//  nv_addr points to the desired EEMEM structure address (if you declared it using 'type EEMEM mydata', then '(char *)&mydata'
//  data points to the desired SRAM structure address
//  len    is sizeof(type)
void store(void * nv_addr, void * data, int len)
{
    3030:	cf 92       	push	r12
    3032:	df 92       	push	r13
    3034:	ef 92       	push	r14
    3036:	ff 92       	push	r15
    3038:	0f 93       	push	r16
    303a:	1f 93       	push	r17
    303c:	cf 93       	push	r28
    303e:	df 93       	push	r29
    3040:	8c 01       	movw	r16, r24
    3042:	7b 01       	movw	r14, r22
    3044:	ea 01       	movw	r28, r20
    while(len != 0)
    {
        // grab the page offset address from the current
        partial_offset = (uint16_t)nv_addr & (EEPROM_PAGESIZE - 1);
    
        partial_length = EEPROM_PAGESIZE - partial_offset;
    3046:	30 e2       	ldi	r19, 0x20	; 32
    3048:	c3 2e       	mov	r12, r19
//  len    is sizeof(type)
void store(void * nv_addr, void * data, int len)
{
    uint8_t partial_offset, partial_length;

    while(len != 0)
    304a:	1e c0       	rjmp	.+60     	; 0x3088 <store+0x58>
    {
        // grab the page offset address from the current
        partial_offset = (uint16_t)nv_addr & (EEPROM_PAGESIZE - 1);
    304c:	60 2f       	mov	r22, r16
    304e:	6f 71       	andi	r22, 0x1F	; 31
    
        partial_length = EEPROM_PAGESIZE - partial_offset;
    3050:	dc 2c       	mov	r13, r12
    3052:	d6 1a       	sub	r13, r22
        
        if(partial_length > len)
    3054:	8d 2d       	mov	r24, r13
    3056:	90 e0       	ldi	r25, 0x00	; 0
    3058:	c8 17       	cp	r28, r24
    305a:	d9 07       	cpc	r29, r25
    305c:	0c f4       	brge	.+2      	; 0x3060 <store+0x30>
        {
            partial_length = len;
    305e:	dc 2e       	mov	r13, r28
        }

        EEPROM_LoadPartialPage(data, partial_offset, partial_length);
    3060:	4d 2d       	mov	r20, r13
    3062:	c7 01       	movw	r24, r14
    3064:	0e 94 3f 11 	call	0x227e	; 0x227e <EEPROM_LoadPartialPage>
        EEPROM_AtomicWritePage((uint16_t)nv_addr / (EEPROM_PAGESIZE));
    3068:	c8 01       	movw	r24, r16
    306a:	25 e0       	ldi	r18, 0x05	; 5
    306c:	96 95       	lsr	r25
    306e:	87 95       	ror	r24
    3070:	2a 95       	dec	r18
    3072:	e1 f7       	brne	.-8      	; 0x306c <store+0x3c>
    3074:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <EEPROM_AtomicWritePage>

        len -= partial_length;
    3078:	4d 2d       	mov	r20, r13
    307a:	50 e0       	ldi	r21, 0x00	; 0
    307c:	c4 1b       	sub	r28, r20
    307e:	d5 0b       	sbc	r29, r21
        nv_addr += partial_length;
    3080:	04 0f       	add	r16, r20
    3082:	15 1f       	adc	r17, r21
        data += partial_length;
    3084:	e4 0e       	add	r14, r20
    3086:	f5 1e       	adc	r15, r21
//  len    is sizeof(type)
void store(void * nv_addr, void * data, int len)
{
    uint8_t partial_offset, partial_length;

    while(len != 0)
    3088:	20 97       	sbiw	r28, 0x00	; 0
    308a:	01 f7       	brne	.-64     	; 0x304c <store+0x1c>
        len -= partial_length;
        nv_addr += partial_length;
        data += partial_length;
    }
    
}
    308c:	df 91       	pop	r29
    308e:	cf 91       	pop	r28
    3090:	1f 91       	pop	r17
    3092:	0f 91       	pop	r16
    3094:	ff 90       	pop	r15
    3096:	ef 90       	pop	r14
    3098:	df 90       	pop	r13
    309a:	cf 90       	pop	r12
    309c:	08 95       	ret

0000309e <restore>:

// this could be done in pages but reads are pretty quick so it shouldn't matter
void restore(void * vaddr, void * vnv_addr, int len)
{    
    309e:	ef 92       	push	r14
    30a0:	ff 92       	push	r15
    30a2:	0f 93       	push	r16
    30a4:	1f 93       	push	r17
    30a6:	cf 93       	push	r28
    30a8:	df 93       	push	r29
    30aa:	7a 01       	movw	r14, r20
    }
    
}

// this could be done in pages but reads are pretty quick so it shouldn't matter
void restore(void * vaddr, void * vnv_addr, int len)
    30ac:	e6 0e       	add	r14, r22
    30ae:	f7 1e       	adc	r15, r23
{    
	byte *addr=(byte *)vaddr;
	byte *nv_addr=(byte *) vnv_addr;
    30b0:	eb 01       	movw	r28, r22
}

// this could be done in pages but reads are pretty quick so it shouldn't matter
void restore(void * vaddr, void * vnv_addr, int len)
{    
	byte *addr=(byte *)vaddr;
    30b2:	8c 01       	movw	r16, r24
	byte *nv_addr=(byte *) vnv_addr;
    while(len != 0)
    30b4:	0f c0       	rjmp	.+30     	; 0x30d4 <restore+0x36>
    {
        *addr = EEPROM_ReadByte(((uint16_t)(nv_addr) / (EEPROM_PAGESIZE)), (uint16_t)(nv_addr) & (EEPROM_PAGESIZE-1));
    30b6:	be 01       	movw	r22, r28
    30b8:	6f 71       	andi	r22, 0x1F	; 31
    30ba:	77 27       	eor	r23, r23
    30bc:	ce 01       	movw	r24, r28
    30be:	45 e0       	ldi	r20, 0x05	; 5
    30c0:	96 95       	lsr	r25
    30c2:	87 95       	ror	r24
    30c4:	4a 95       	dec	r20
    30c6:	e1 f7       	brne	.-8      	; 0x30c0 <restore+0x22>
    30c8:	0e 94 98 10 	call	0x2130	; 0x2130 <EEPROM_ReadByte>
    30cc:	f8 01       	movw	r30, r16
    30ce:	81 93       	st	Z+, r24
    30d0:	8f 01       	movw	r16, r30
        nv_addr++;
    30d2:	21 96       	adiw	r28, 0x01	; 1
// this could be done in pages but reads are pretty quick so it shouldn't matter
void restore(void * vaddr, void * vnv_addr, int len)
{    
	byte *addr=(byte *)vaddr;
	byte *nv_addr=(byte *) vnv_addr;
    while(len != 0)
    30d4:	ce 15       	cp	r28, r14
    30d6:	df 05       	cpc	r29, r15
    30d8:	71 f7       	brne	.-36     	; 0x30b6 <restore+0x18>
        *addr = EEPROM_ReadByte(((uint16_t)(nv_addr) / (EEPROM_PAGESIZE)), (uint16_t)(nv_addr) & (EEPROM_PAGESIZE-1));
        nv_addr++;
        addr++;
        len--;
    }
}
    30da:	df 91       	pop	r29
    30dc:	cf 91       	pop	r28
    30de:	1f 91       	pop	r17
    30e0:	0f 91       	pop	r16
    30e2:	ff 90       	pop	r15
    30e4:	ef 90       	pop	r14
    30e6:	08 95       	ret

000030e8 <getGUID>:
#define ID_BYTE_ADDR 0x00


/* TODO: This is WRONG. It should be Uid, but the build system is being stupid and now is not a good time to spend forever trying to fix it. */
//reads GUID from eeprom
uint16_t getGUID(){
    30e8:	cf 93       	push	r28
  //return 255;
	//TODO: read from eeprom
  return (((uint16_t)EEPROM_ReadByte(ID_PAGE_ADDR, ID_BYTE_ADDR))<<8) |
    30ea:	60 e0       	ldi	r22, 0x00	; 0
    30ec:	80 e0       	ldi	r24, 0x00	; 0
    30ee:	0e 94 98 10 	call	0x2130	; 0x2130 <EEPROM_ReadByte>
    30f2:	c8 2f       	mov	r28, r24
	  ((uint16_t)EEPROM_ReadByte(ID_PAGE_ADDR, ID_BYTE_ADDR+1));
    30f4:	61 e0       	ldi	r22, 0x01	; 1
    30f6:	80 e0       	ldi	r24, 0x00	; 0
    30f8:	0e 94 98 10 	call	0x2130	; 0x2130 <EEPROM_ReadByte>
/* TODO: This is WRONG. It should be Uid, but the build system is being stupid and now is not a good time to spend forever trying to fix it. */
//reads GUID from eeprom
uint16_t getGUID(){
  //return 255;
	//TODO: read from eeprom
  return (((uint16_t)EEPROM_ReadByte(ID_PAGE_ADDR, ID_BYTE_ADDR))<<8) |
    30fc:	3c 2f       	mov	r19, r28
    30fe:	20 e0       	ldi	r18, 0x00	; 0
    3100:	28 2b       	or	r18, r24
	  ((uint16_t)EEPROM_ReadByte(ID_PAGE_ADDR, ID_BYTE_ADDR+1));
}
    3102:	c9 01       	movw	r24, r18
    3104:	cf 91       	pop	r28
    3106:	08 95       	ret

00003108 <u_putchar>:
void initHWUart(USART_t * uart);


void u_putchar(char c, USART_t * uart)
{
	while(!(uart->STATUS & USART_DREIF_bm));
    3108:	fb 01       	movw	r30, r22
    310a:	91 81       	ldd	r25, Z+1	; 0x01
    310c:	95 ff       	sbrs	r25, 5
    310e:	fc cf       	rjmp	.-8      	; 0x3108 <u_putchar>
    //loop_until_bit_is_set(UCSR0A, UDRE0);
	// Load buffer with your character
    uart->DATA = c;
    3110:	80 83       	st	Z, r24
    3112:	08 95       	ret

00003114 <u_getchar>:
int	u_getchar(USART_t * uart)
{
	//char c;
	// Wait for the receive buffer to be filled
    //loop_until_bit_is_set(UCSR0A, RXC0);
	if((uart->STATUS & USART_RXCIF_bm))
    3114:	fc 01       	movw	r30, r24
    3116:	21 81       	ldd	r18, Z+1	; 0x01
    3118:	27 ff       	sbrs	r18, 7
    311a:	03 c0       	rjmp	.+6      	; 0x3122 <u_getchar+0xe>
	{
		// Read the receive buffer
		//c = uart->DATA;
		return uart->DATA;
    311c:	20 81       	ld	r18, Z
    311e:	30 e0       	ldi	r19, 0x00	; 0
    3120:	02 c0       	rjmp	.+4      	; 0x3126 <u_getchar+0x12>
	}
	else
	{
		return -1;
    3122:	2f ef       	ldi	r18, 0xFF	; 255
    3124:	3f ef       	ldi	r19, 0xFF	; 255
	}
}
    3126:	c9 01       	movw	r24, r18
    3128:	08 95       	ret

0000312a <pPutChar>:

void pPutChar(char c, PRef p)
{
	if(p >= 0 && p < NUM_PORTS)
    312a:	66 30       	cpi	r22, 0x06	; 6
    312c:	78 f4       	brcc	.+30     	; 0x314c <pPutChar+0x22>
	{
		if(hwPort[p].ptype == HARDWARE_UART)
    312e:	70 e0       	ldi	r23, 0x00	; 0
    3130:	fb 01       	movw	r30, r22
    3132:	ee 0f       	add	r30, r30
    3134:	ff 1f       	adc	r31, r31
    3136:	e6 0f       	add	r30, r22
    3138:	f7 1f       	adc	r31, r23
    313a:	e0 55       	subi	r30, 0x50	; 80
    313c:	fa 4d       	sbci	r31, 0xDA	; 218
    313e:	92 81       	ldd	r25, Z+2	; 0x02
    3140:	91 11       	cpse	r25, r1
    3142:	04 c0       	rjmp	.+8      	; 0x314c <pPutChar+0x22>
		{
			u_putchar(c, hwPort[p].uart.huart);
    3144:	60 81       	ld	r22, Z
    3146:	71 81       	ldd	r23, Z+1	; 0x01
    3148:	0c 94 84 18 	jmp	0x3108	; 0x3108 <u_putchar>
    314c:	08 95       	ret

0000314e <pGetChar>:
	}
}

int pGetChar(PRef p)
{
	if(p >= 0 && p < NUM_PORTS)
    314e:	86 30       	cpi	r24, 0x06	; 6
    3150:	a0 f4       	brcc	.+40     	; 0x317a <pGetChar+0x2c>
	{
		if(hwPort[p].ptype == HARDWARE_UART)
    3152:	90 e0       	ldi	r25, 0x00	; 0
    3154:	fc 01       	movw	r30, r24
    3156:	ee 0f       	add	r30, r30
    3158:	ff 1f       	adc	r31, r31
    315a:	e8 0f       	add	r30, r24
    315c:	f9 1f       	adc	r31, r25
    315e:	e0 55       	subi	r30, 0x50	; 80
    3160:	fa 4d       	sbci	r31, 0xDA	; 218
    3162:	82 81       	ldd	r24, Z+2	; 0x02
    3164:	81 11       	cpse	r24, r1
    3166:	09 c0       	rjmp	.+18     	; 0x317a <pGetChar+0x2c>
		{
			return u_getchar(hwPort[p].uart.huart);
    3168:	01 90       	ld	r0, Z+
    316a:	f0 81       	ld	r31, Z
    316c:	e0 2d       	mov	r30, r0
int	u_getchar(USART_t * uart)
{
	//char c;
	// Wait for the receive buffer to be filled
    //loop_until_bit_is_set(UCSR0A, RXC0);
	if((uart->STATUS & USART_RXCIF_bm))
    316e:	81 81       	ldd	r24, Z+1	; 0x01
    3170:	87 ff       	sbrs	r24, 7
    3172:	03 c0       	rjmp	.+6      	; 0x317a <pGetChar+0x2c>
	{
		// Read the receive buffer
		//c = uart->DATA;
		return uart->DATA;
    3174:	20 81       	ld	r18, Z
    3176:	30 e0       	ldi	r19, 0x00	; 0
    3178:	02 c0       	rjmp	.+4      	; 0x317e <pGetChar+0x30>
		{
			//return su_getchar(hwPort[p].uart.suart);
		}
	}

	return -1;
    317a:	2f ef       	ldi	r18, 0xFF	; 255
    317c:	3f ef       	ldi	r19, 0xFF	; 255
}
    317e:	c9 01       	movw	r24, r18
    3180:	08 95       	ret

00003182 <initHWUart>:
	PORTD.DIRSET = PIN3_bm;	
	initializeHWPort(&(hwPort[DOWN]), &USARTD0);
}

void initHWUart(USART_t * huart)
{
    3182:	fc 01       	movw	r30, r24
	huart->CTRLB = USART_RXEN_bm | USART_TXEN_bm;		// turn on RX/TX, somewhat helpful!
    3184:	88 e1       	ldi	r24, 0x18	; 24
    3186:	84 83       	std	Z+4, r24	; 0x04
	huart->CTRLC = USART_CHSIZE_8BIT_gc;				// use 8-bit data
    3188:	83 e0       	ldi	r24, 0x03	; 3
    318a:	85 83       	std	Z+5, r24	; 0x05

	huart->CTRLA = USART_RXCINTLVL_HI_gc | USART_TXCINTLVL_HI_gc;	// enable RX/TX interrupt support
    318c:	8c e3       	ldi	r24, 0x3C	; 60
    318e:	83 83       	std	Z+3, r24	; 0x03
	huart->BAUDCTRLA = 51;  // 38400 		// 57600   			//103;	//19200 	16; // 115200
    3190:	83 e3       	ldi	r24, 0x33	; 51
    3192:	86 83       	std	Z+6, r24	; 0x06
	huart->BAUDCTRLB = 0;				//0xB4;  // 57600, set to 0 for others
    3194:	17 82       	std	Z+7, r1	; 0x07
    3196:	08 95       	ret

00003198 <initializeHWPort>:
	return -1;
}

void initializeHWPort(HWPort *p, USART_t *huart)
{
	if(huart != NULL)
    3198:	61 15       	cp	r22, r1
    319a:	71 05       	cpc	r23, r1
    319c:	39 f0       	breq	.+14     	; 0x31ac <initializeHWPort+0x14>
	{
		(p->uart).huart = huart;
    319e:	fc 01       	movw	r30, r24
    31a0:	60 83       	st	Z, r22
    31a2:	71 83       	std	Z+1, r23	; 0x01
		p->ptype = HARDWARE_UART;
    31a4:	12 82       	std	Z+2, r1	; 0x02

		initHWUart(huart);
    31a6:	cb 01       	movw	r24, r22
    31a8:	0c 94 c1 18 	jmp	0x3182	; 0x3182 <initHWUart>
    31ac:	08 95       	ret

000031ae <initHWPorts>:
	}
}

void initHWPorts()
{
    31ae:	ff 92       	push	r15
    31b0:	0f 93       	push	r16
    31b2:	1f 93       	push	r17
    31b4:	cf 93       	push	r28
    31b6:	df 93       	push	r29
	// male headers
	PORTD.DIRSET = PIN7_bm;
    31b8:	c0 e6       	ldi	r28, 0x60	; 96
    31ba:	d6 e0       	ldi	r29, 0x06	; 6
    31bc:	30 e8       	ldi	r19, 0x80	; 128
    31be:	f3 2e       	mov	r15, r19
    31c0:	f9 82       	std	Y+1, r15	; 0x01

void initializeHWPort(HWPort *p, USART_t *huart)
{
	if(huart != NULL)
	{
		(p->uart).huart = huart;
    31c2:	80 eb       	ldi	r24, 0xB0	; 176
    31c4:	99 e0       	ldi	r25, 0x09	; 9
    31c6:	80 93 bf 25 	sts	0x25BF, r24
    31ca:	90 93 c0 25 	sts	0x25C0, r25
		p->ptype = HARDWARE_UART;
    31ce:	10 92 c1 25 	sts	0x25C1, r1

		initHWUart(huart);
    31d2:	0e 94 c1 18 	call	0x3182	; 0x3182 <initHWUart>
	// male headers
	PORTD.DIRSET = PIN7_bm;
	initializeHWPort(&(hwPort[UP]), &USARTD1);

	// near the double TVS diodes
	PORTC.DIRSET = PIN7_bm;
    31d6:	00 e4       	ldi	r16, 0x40	; 64
    31d8:	16 e0       	ldi	r17, 0x06	; 6
    31da:	f8 01       	movw	r30, r16
    31dc:	f1 82       	std	Z+1, r15	; 0x01

void initializeHWPort(HWPort *p, USART_t *huart)
{
	if(huart != NULL)
	{
		(p->uart).huart = huart;
    31de:	80 eb       	ldi	r24, 0xB0	; 176
    31e0:	98 e0       	ldi	r25, 0x08	; 8
    31e2:	80 93 b3 25 	sts	0x25B3, r24
    31e6:	90 93 b4 25 	sts	0x25B4, r25
		p->ptype = HARDWARE_UART;
    31ea:	10 92 b5 25 	sts	0x25B5, r1

		initHWUart(huart);
    31ee:	0e 94 c1 18 	call	0x3182	; 0x3182 <initHWUart>
	// near the double TVS diodes
	PORTC.DIRSET = PIN7_bm;
	initializeHWPort(&(hwPort[NORTH]), &USARTC1);
	
	// closest to audio amp
	PORTE.DIRSET = PIN3_bm;
    31f2:	48 e0       	ldi	r20, 0x08	; 8
    31f4:	f4 2e       	mov	r15, r20
    31f6:	e0 e8       	ldi	r30, 0x80	; 128
    31f8:	f6 e0       	ldi	r31, 0x06	; 6
    31fa:	f1 82       	std	Z+1, r15	; 0x01

void initializeHWPort(HWPort *p, USART_t *huart)
{
	if(huart != NULL)
	{
		(p->uart).huart = huart;
    31fc:	80 ea       	ldi	r24, 0xA0	; 160
    31fe:	9a e0       	ldi	r25, 0x0A	; 10
    3200:	80 93 bc 25 	sts	0x25BC, r24
    3204:	90 93 bd 25 	sts	0x25BD, r25
		p->ptype = HARDWARE_UART;
    3208:	10 92 be 25 	sts	0x25BE, r1

		initHWUart(huart);
    320c:	0e 94 c1 18 	call	0x3182	; 0x3182 <initHWUart>
	// closest to audio amp
	PORTE.DIRSET = PIN3_bm;
	initializeHWPort(&(hwPort[SOUTH]), &USARTE0);
	
	// closest to LEDs
	PORTF.DIRSET = PIN3_bm;	
    3210:	e0 ea       	ldi	r30, 0xA0	; 160
    3212:	f6 e0       	ldi	r31, 0x06	; 6
    3214:	f1 82       	std	Z+1, r15	; 0x01

void initializeHWPort(HWPort *p, USART_t *huart)
{
	if(huart != NULL)
	{
		(p->uart).huart = huart;
    3216:	80 ea       	ldi	r24, 0xA0	; 160
    3218:	9b e0       	ldi	r25, 0x0B	; 11
    321a:	80 93 b6 25 	sts	0x25B6, r24
    321e:	90 93 b7 25 	sts	0x25B7, r25
		p->ptype = HARDWARE_UART;
    3222:	10 92 b8 25 	sts	0x25B8, r1

		initHWUart(huart);
    3226:	0e 94 c1 18 	call	0x3182	; 0x3182 <initHWUart>
	// closest to LEDs
	PORTF.DIRSET = PIN3_bm;	
	initializeHWPort(&(hwPort[EAST]), &USARTF0);
	
	// closest to analog input dividers
	PORTC.DIRSET = PIN3_bm;	
    322a:	f8 01       	movw	r30, r16
    322c:	f1 82       	std	Z+1, r15	; 0x01

void initializeHWPort(HWPort *p, USART_t *huart)
{
	if(huart != NULL)
	{
		(p->uart).huart = huart;
    322e:	80 ea       	ldi	r24, 0xA0	; 160
    3230:	98 e0       	ldi	r25, 0x08	; 8
    3232:	80 93 b9 25 	sts	0x25B9, r24
    3236:	90 93 ba 25 	sts	0x25BA, r25
		p->ptype = HARDWARE_UART;
    323a:	10 92 bb 25 	sts	0x25BB, r1

		initHWUart(huart);
    323e:	0e 94 c1 18 	call	0x3182	; 0x3182 <initHWUart>
	
	// closest to analog input dividers
	PORTC.DIRSET = PIN3_bm;	
	initializeHWPort(&(hwPort[WEST]), &USARTC0);
	
	PORTD.DIRSET = PIN3_bm;	
    3242:	f9 82       	std	Y+1, r15	; 0x01

void initializeHWPort(HWPort *p, USART_t *huart)
{
	if(huart != NULL)
	{
		(p->uart).huart = huart;
    3244:	80 ea       	ldi	r24, 0xA0	; 160
    3246:	99 e0       	ldi	r25, 0x09	; 9
    3248:	80 93 b0 25 	sts	0x25B0, r24
    324c:	90 93 b1 25 	sts	0x25B1, r25
		p->ptype = HARDWARE_UART;
    3250:	10 92 b2 25 	sts	0x25B2, r1
	PORTC.DIRSET = PIN3_bm;	
	initializeHWPort(&(hwPort[WEST]), &USARTC0);
	
	PORTD.DIRSET = PIN3_bm;	
	initializeHWPort(&(hwPort[DOWN]), &USARTD0);
}
    3254:	df 91       	pop	r29
    3256:	cf 91       	pop	r28
    3258:	1f 91       	pop	r17
    325a:	0f 91       	pop	r16
    325c:	ff 90       	pop	r15
	if(huart != NULL)
	{
		(p->uart).huart = huart;
		p->ptype = HARDWARE_UART;

		initHWUart(huart);
    325e:	0c 94 c1 18 	jmp	0x3182	; 0x3182 <initHWUart>

00003262 <__vector_91>:
	huart->BAUDCTRLB = 0;				//0xB4;  // 57600, set to 0 for others
}


ISR(USARTD1_RXC_vect)
{
    3262:	1f 92       	push	r1
    3264:	0f 92       	push	r0
    3266:	0f b6       	in	r0, 0x3f	; 63
    3268:	0f 92       	push	r0
    326a:	11 24       	eor	r1, r1
    326c:	0b b6       	in	r0, 0x3b	; 59
    326e:	0f 92       	push	r0
    3270:	2f 93       	push	r18
    3272:	3f 93       	push	r19
    3274:	4f 93       	push	r20
    3276:	5f 93       	push	r21
    3278:	6f 93       	push	r22
    327a:	7f 93       	push	r23
    327c:	8f 93       	push	r24
    327e:	9f 93       	push	r25
    3280:	af 93       	push	r26
    3282:	bf 93       	push	r27
    3284:	ef 93       	push	r30
    3286:	ff 93       	push	r31
	uint8_t c;
	
	c = USARTD1.DATA;
    3288:	80 91 b0 09 	lds	r24, 0x09B0
	//printf("R:%x",c);	
	push(c, &(port[UP].rx));
    328c:	6c e2       	ldi	r22, 0x2C	; 44
    328e:	75 e2       	ldi	r23, 0x25	; 37
    3290:	0e 94 f7 01 	call	0x3ee	; 0x3ee <push>
}
    3294:	ff 91       	pop	r31
    3296:	ef 91       	pop	r30
    3298:	bf 91       	pop	r27
    329a:	af 91       	pop	r26
    329c:	9f 91       	pop	r25
    329e:	8f 91       	pop	r24
    32a0:	7f 91       	pop	r23
    32a2:	6f 91       	pop	r22
    32a4:	5f 91       	pop	r21
    32a6:	4f 91       	pop	r20
    32a8:	3f 91       	pop	r19
    32aa:	2f 91       	pop	r18
    32ac:	0f 90       	pop	r0
    32ae:	0b be       	out	0x3b, r0	; 59
    32b0:	0f 90       	pop	r0
    32b2:	0f be       	out	0x3f, r0	; 63
    32b4:	0f 90       	pop	r0
    32b6:	1f 90       	pop	r1
    32b8:	18 95       	reti

000032ba <__vector_93>:

ISR(USARTD1_TXC_vect)
{
    32ba:	1f 92       	push	r1
    32bc:	0f 92       	push	r0
    32be:	0f b6       	in	r0, 0x3f	; 63
    32c0:	0f 92       	push	r0
    32c2:	11 24       	eor	r1, r1
    32c4:	0b b6       	in	r0, 0x3b	; 59
    32c6:	0f 92       	push	r0
    32c8:	2f 93       	push	r18
    32ca:	3f 93       	push	r19
    32cc:	4f 93       	push	r20
    32ce:	5f 93       	push	r21
    32d0:	6f 93       	push	r22
    32d2:	7f 93       	push	r23
    32d4:	8f 93       	push	r24
    32d6:	9f 93       	push	r25
    32d8:	af 93       	push	r26
    32da:	bf 93       	push	r27
    32dc:	ef 93       	push	r30
    32de:	ff 93       	push	r31
	int16_t c;
	
	c  = pop(&(port[UP].tx));
    32e0:	8c e4       	ldi	r24, 0x4C	; 76
    32e2:	95 e2       	ldi	r25, 0x25	; 37
    32e4:	0e 94 12 02 	call	0x424	; 0x424 <pop>
	
	if(c != -1)
    32e8:	8f 3f       	cpi	r24, 0xFF	; 255
    32ea:	2f ef       	ldi	r18, 0xFF	; 255
    32ec:	92 07       	cpc	r25, r18
    32ee:	11 f0       	breq	.+4      	; 0x32f4 <__vector_93+0x3a>
	{
		USARTD1.DATA = c;
    32f0:	80 93 b0 09 	sts	0x09B0, r24
	}
	else
	{
		// should flag that we're waiting for an ACK now
	}
}
    32f4:	ff 91       	pop	r31
    32f6:	ef 91       	pop	r30
    32f8:	bf 91       	pop	r27
    32fa:	af 91       	pop	r26
    32fc:	9f 91       	pop	r25
    32fe:	8f 91       	pop	r24
    3300:	7f 91       	pop	r23
    3302:	6f 91       	pop	r22
    3304:	5f 91       	pop	r21
    3306:	4f 91       	pop	r20
    3308:	3f 91       	pop	r19
    330a:	2f 91       	pop	r18
    330c:	0f 90       	pop	r0
    330e:	0b be       	out	0x3b, r0	; 59
    3310:	0f 90       	pop	r0
    3312:	0f be       	out	0x3f, r0	; 63
    3314:	0f 90       	pop	r0
    3316:	1f 90       	pop	r1
    3318:	18 95       	reti

0000331a <__vector_28>:

ISR(USARTC1_RXC_vect)
{
    331a:	1f 92       	push	r1
    331c:	0f 92       	push	r0
    331e:	0f b6       	in	r0, 0x3f	; 63
    3320:	0f 92       	push	r0
    3322:	11 24       	eor	r1, r1
    3324:	0b b6       	in	r0, 0x3b	; 59
    3326:	0f 92       	push	r0
    3328:	2f 93       	push	r18
    332a:	3f 93       	push	r19
    332c:	4f 93       	push	r20
    332e:	5f 93       	push	r21
    3330:	6f 93       	push	r22
    3332:	7f 93       	push	r23
    3334:	8f 93       	push	r24
    3336:	9f 93       	push	r25
    3338:	af 93       	push	r26
    333a:	bf 93       	push	r27
    333c:	ef 93       	push	r30
    333e:	ff 93       	push	r31
	uint8_t c;
	
	c = USARTC1.DATA;
    3340:	80 91 b0 08 	lds	r24, 0x08B0
	//printf("R:%x",c);	
	push(c, &(port[NORTH].rx));
    3344:	6c ec       	ldi	r22, 0xCC	; 204
    3346:	73 e2       	ldi	r23, 0x23	; 35
    3348:	0e 94 f7 01 	call	0x3ee	; 0x3ee <push>
}
    334c:	ff 91       	pop	r31
    334e:	ef 91       	pop	r30
    3350:	bf 91       	pop	r27
    3352:	af 91       	pop	r26
    3354:	9f 91       	pop	r25
    3356:	8f 91       	pop	r24
    3358:	7f 91       	pop	r23
    335a:	6f 91       	pop	r22
    335c:	5f 91       	pop	r21
    335e:	4f 91       	pop	r20
    3360:	3f 91       	pop	r19
    3362:	2f 91       	pop	r18
    3364:	0f 90       	pop	r0
    3366:	0b be       	out	0x3b, r0	; 59
    3368:	0f 90       	pop	r0
    336a:	0f be       	out	0x3f, r0	; 63
    336c:	0f 90       	pop	r0
    336e:	1f 90       	pop	r1
    3370:	18 95       	reti

00003372 <__vector_30>:
ISR(USARTC1_TXC_vect)
{
    3372:	1f 92       	push	r1
    3374:	0f 92       	push	r0
    3376:	0f b6       	in	r0, 0x3f	; 63
    3378:	0f 92       	push	r0
    337a:	11 24       	eor	r1, r1
    337c:	0b b6       	in	r0, 0x3b	; 59
    337e:	0f 92       	push	r0
    3380:	2f 93       	push	r18
    3382:	3f 93       	push	r19
    3384:	4f 93       	push	r20
    3386:	5f 93       	push	r21
    3388:	6f 93       	push	r22
    338a:	7f 93       	push	r23
    338c:	8f 93       	push	r24
    338e:	9f 93       	push	r25
    3390:	af 93       	push	r26
    3392:	bf 93       	push	r27
    3394:	ef 93       	push	r30
    3396:	ff 93       	push	r31
	int16_t c;
	
	c  = pop(&(port[NORTH].tx));
    3398:	8c ee       	ldi	r24, 0xEC	; 236
    339a:	93 e2       	ldi	r25, 0x23	; 35
    339c:	0e 94 12 02 	call	0x424	; 0x424 <pop>
	
	if(c != -1)
    33a0:	8f 3f       	cpi	r24, 0xFF	; 255
    33a2:	2f ef       	ldi	r18, 0xFF	; 255
    33a4:	92 07       	cpc	r25, r18
    33a6:	11 f0       	breq	.+4      	; 0x33ac <__vector_30+0x3a>
	{
		USARTC1.DATA = c;
    33a8:	80 93 b0 08 	sts	0x08B0, r24
	}
}
    33ac:	ff 91       	pop	r31
    33ae:	ef 91       	pop	r30
    33b0:	bf 91       	pop	r27
    33b2:	af 91       	pop	r26
    33b4:	9f 91       	pop	r25
    33b6:	8f 91       	pop	r24
    33b8:	7f 91       	pop	r23
    33ba:	6f 91       	pop	r22
    33bc:	5f 91       	pop	r21
    33be:	4f 91       	pop	r20
    33c0:	3f 91       	pop	r19
    33c2:	2f 91       	pop	r18
    33c4:	0f 90       	pop	r0
    33c6:	0b be       	out	0x3b, r0	; 59
    33c8:	0f 90       	pop	r0
    33ca:	0f be       	out	0x3f, r0	; 63
    33cc:	0f 90       	pop	r0
    33ce:	1f 90       	pop	r1
    33d0:	18 95       	reti

000033d2 <__vector_119>:

ISR(USARTF0_RXC_vect)
{
    33d2:	1f 92       	push	r1
    33d4:	0f 92       	push	r0
    33d6:	0f b6       	in	r0, 0x3f	; 63
    33d8:	0f 92       	push	r0
    33da:	11 24       	eor	r1, r1
    33dc:	0b b6       	in	r0, 0x3b	; 59
    33de:	0f 92       	push	r0
    33e0:	2f 93       	push	r18
    33e2:	3f 93       	push	r19
    33e4:	4f 93       	push	r20
    33e6:	5f 93       	push	r21
    33e8:	6f 93       	push	r22
    33ea:	7f 93       	push	r23
    33ec:	8f 93       	push	r24
    33ee:	9f 93       	push	r25
    33f0:	af 93       	push	r26
    33f2:	bf 93       	push	r27
    33f4:	ef 93       	push	r30
    33f6:	ff 93       	push	r31
	uint8_t c;
	
	c = USARTF0.DATA;
    33f8:	80 91 a0 0b 	lds	r24, 0x0BA0
	//printf("R:%x",c);	
	push(c, &(port[EAST].rx));
    33fc:	64 e2       	ldi	r22, 0x24	; 36
    33fe:	74 e2       	ldi	r23, 0x24	; 36
    3400:	0e 94 f7 01 	call	0x3ee	; 0x3ee <push>
}
    3404:	ff 91       	pop	r31
    3406:	ef 91       	pop	r30
    3408:	bf 91       	pop	r27
    340a:	af 91       	pop	r26
    340c:	9f 91       	pop	r25
    340e:	8f 91       	pop	r24
    3410:	7f 91       	pop	r23
    3412:	6f 91       	pop	r22
    3414:	5f 91       	pop	r21
    3416:	4f 91       	pop	r20
    3418:	3f 91       	pop	r19
    341a:	2f 91       	pop	r18
    341c:	0f 90       	pop	r0
    341e:	0b be       	out	0x3b, r0	; 59
    3420:	0f 90       	pop	r0
    3422:	0f be       	out	0x3f, r0	; 63
    3424:	0f 90       	pop	r0
    3426:	1f 90       	pop	r1
    3428:	18 95       	reti

0000342a <__vector_121>:
ISR(USARTF0_TXC_vect)
{
    342a:	1f 92       	push	r1
    342c:	0f 92       	push	r0
    342e:	0f b6       	in	r0, 0x3f	; 63
    3430:	0f 92       	push	r0
    3432:	11 24       	eor	r1, r1
    3434:	0b b6       	in	r0, 0x3b	; 59
    3436:	0f 92       	push	r0
    3438:	2f 93       	push	r18
    343a:	3f 93       	push	r19
    343c:	4f 93       	push	r20
    343e:	5f 93       	push	r21
    3440:	6f 93       	push	r22
    3442:	7f 93       	push	r23
    3444:	8f 93       	push	r24
    3446:	9f 93       	push	r25
    3448:	af 93       	push	r26
    344a:	bf 93       	push	r27
    344c:	ef 93       	push	r30
    344e:	ff 93       	push	r31
	int16_t c;
	
	c  = pop(&(port[EAST].tx));
    3450:	84 e4       	ldi	r24, 0x44	; 68
    3452:	94 e2       	ldi	r25, 0x24	; 36
    3454:	0e 94 12 02 	call	0x424	; 0x424 <pop>
	
	if(c != -1)
    3458:	8f 3f       	cpi	r24, 0xFF	; 255
    345a:	2f ef       	ldi	r18, 0xFF	; 255
    345c:	92 07       	cpc	r25, r18
    345e:	11 f0       	breq	.+4      	; 0x3464 <__vector_121+0x3a>
	{
		USARTF0.DATA = c;
    3460:	80 93 a0 0b 	sts	0x0BA0, r24
	}
}
    3464:	ff 91       	pop	r31
    3466:	ef 91       	pop	r30
    3468:	bf 91       	pop	r27
    346a:	af 91       	pop	r26
    346c:	9f 91       	pop	r25
    346e:	8f 91       	pop	r24
    3470:	7f 91       	pop	r23
    3472:	6f 91       	pop	r22
    3474:	5f 91       	pop	r21
    3476:	4f 91       	pop	r20
    3478:	3f 91       	pop	r19
    347a:	2f 91       	pop	r18
    347c:	0f 90       	pop	r0
    347e:	0b be       	out	0x3b, r0	; 59
    3480:	0f 90       	pop	r0
    3482:	0f be       	out	0x3f, r0	; 63
    3484:	0f 90       	pop	r0
    3486:	1f 90       	pop	r1
    3488:	18 95       	reti

0000348a <__vector_58>:

ISR(USARTE0_RXC_vect)
{
    348a:	1f 92       	push	r1
    348c:	0f 92       	push	r0
    348e:	0f b6       	in	r0, 0x3f	; 63
    3490:	0f 92       	push	r0
    3492:	11 24       	eor	r1, r1
    3494:	0b b6       	in	r0, 0x3b	; 59
    3496:	0f 92       	push	r0
    3498:	2f 93       	push	r18
    349a:	3f 93       	push	r19
    349c:	4f 93       	push	r20
    349e:	5f 93       	push	r21
    34a0:	6f 93       	push	r22
    34a2:	7f 93       	push	r23
    34a4:	8f 93       	push	r24
    34a6:	9f 93       	push	r25
    34a8:	af 93       	push	r26
    34aa:	bf 93       	push	r27
    34ac:	ef 93       	push	r30
    34ae:	ff 93       	push	r31
	uint8_t c;
	
	c = USARTE0.DATA;
    34b0:	80 91 a0 0a 	lds	r24, 0x0AA0
	//printf("R:%x",c);	
	push(c, &(port[SOUTH].rx));
    34b4:	64 ed       	ldi	r22, 0xD4	; 212
    34b6:	74 e2       	ldi	r23, 0x24	; 36
    34b8:	0e 94 f7 01 	call	0x3ee	; 0x3ee <push>
}
    34bc:	ff 91       	pop	r31
    34be:	ef 91       	pop	r30
    34c0:	bf 91       	pop	r27
    34c2:	af 91       	pop	r26
    34c4:	9f 91       	pop	r25
    34c6:	8f 91       	pop	r24
    34c8:	7f 91       	pop	r23
    34ca:	6f 91       	pop	r22
    34cc:	5f 91       	pop	r21
    34ce:	4f 91       	pop	r20
    34d0:	3f 91       	pop	r19
    34d2:	2f 91       	pop	r18
    34d4:	0f 90       	pop	r0
    34d6:	0b be       	out	0x3b, r0	; 59
    34d8:	0f 90       	pop	r0
    34da:	0f be       	out	0x3f, r0	; 63
    34dc:	0f 90       	pop	r0
    34de:	1f 90       	pop	r1
    34e0:	18 95       	reti

000034e2 <__vector_60>:
ISR(USARTE0_TXC_vect)
{
    34e2:	1f 92       	push	r1
    34e4:	0f 92       	push	r0
    34e6:	0f b6       	in	r0, 0x3f	; 63
    34e8:	0f 92       	push	r0
    34ea:	11 24       	eor	r1, r1
    34ec:	0b b6       	in	r0, 0x3b	; 59
    34ee:	0f 92       	push	r0
    34f0:	2f 93       	push	r18
    34f2:	3f 93       	push	r19
    34f4:	4f 93       	push	r20
    34f6:	5f 93       	push	r21
    34f8:	6f 93       	push	r22
    34fa:	7f 93       	push	r23
    34fc:	8f 93       	push	r24
    34fe:	9f 93       	push	r25
    3500:	af 93       	push	r26
    3502:	bf 93       	push	r27
    3504:	ef 93       	push	r30
    3506:	ff 93       	push	r31
	int16_t c;
	
	c  = pop(&(port[SOUTH].tx));
    3508:	84 ef       	ldi	r24, 0xF4	; 244
    350a:	94 e2       	ldi	r25, 0x24	; 36
    350c:	0e 94 12 02 	call	0x424	; 0x424 <pop>
	
	if(c != -1)
    3510:	8f 3f       	cpi	r24, 0xFF	; 255
    3512:	2f ef       	ldi	r18, 0xFF	; 255
    3514:	92 07       	cpc	r25, r18
    3516:	11 f0       	breq	.+4      	; 0x351c <__vector_60+0x3a>
	{
		USARTE0.DATA = c;
    3518:	80 93 a0 0a 	sts	0x0AA0, r24
	}
}
    351c:	ff 91       	pop	r31
    351e:	ef 91       	pop	r30
    3520:	bf 91       	pop	r27
    3522:	af 91       	pop	r26
    3524:	9f 91       	pop	r25
    3526:	8f 91       	pop	r24
    3528:	7f 91       	pop	r23
    352a:	6f 91       	pop	r22
    352c:	5f 91       	pop	r21
    352e:	4f 91       	pop	r20
    3530:	3f 91       	pop	r19
    3532:	2f 91       	pop	r18
    3534:	0f 90       	pop	r0
    3536:	0b be       	out	0x3b, r0	; 59
    3538:	0f 90       	pop	r0
    353a:	0f be       	out	0x3f, r0	; 63
    353c:	0f 90       	pop	r0
    353e:	1f 90       	pop	r1
    3540:	18 95       	reti

00003542 <__vector_25>:

ISR(USARTC0_RXC_vect)
{
    3542:	1f 92       	push	r1
    3544:	0f 92       	push	r0
    3546:	0f b6       	in	r0, 0x3f	; 63
    3548:	0f 92       	push	r0
    354a:	11 24       	eor	r1, r1
    354c:	0b b6       	in	r0, 0x3b	; 59
    354e:	0f 92       	push	r0
    3550:	2f 93       	push	r18
    3552:	3f 93       	push	r19
    3554:	4f 93       	push	r20
    3556:	5f 93       	push	r21
    3558:	6f 93       	push	r22
    355a:	7f 93       	push	r23
    355c:	8f 93       	push	r24
    355e:	9f 93       	push	r25
    3560:	af 93       	push	r26
    3562:	bf 93       	push	r27
    3564:	ef 93       	push	r30
    3566:	ff 93       	push	r31
	uint8_t c;
	
	c = USARTC0.DATA;
    3568:	80 91 a0 08 	lds	r24, 0x08A0
	//printf("R:%x",c);	
	push(c, &(port[WEST].rx));
    356c:	6c e7       	ldi	r22, 0x7C	; 124
    356e:	74 e2       	ldi	r23, 0x24	; 36
    3570:	0e 94 f7 01 	call	0x3ee	; 0x3ee <push>
}
    3574:	ff 91       	pop	r31
    3576:	ef 91       	pop	r30
    3578:	bf 91       	pop	r27
    357a:	af 91       	pop	r26
    357c:	9f 91       	pop	r25
    357e:	8f 91       	pop	r24
    3580:	7f 91       	pop	r23
    3582:	6f 91       	pop	r22
    3584:	5f 91       	pop	r21
    3586:	4f 91       	pop	r20
    3588:	3f 91       	pop	r19
    358a:	2f 91       	pop	r18
    358c:	0f 90       	pop	r0
    358e:	0b be       	out	0x3b, r0	; 59
    3590:	0f 90       	pop	r0
    3592:	0f be       	out	0x3f, r0	; 63
    3594:	0f 90       	pop	r0
    3596:	1f 90       	pop	r1
    3598:	18 95       	reti

0000359a <__vector_27>:
ISR(USARTC0_TXC_vect)
{
    359a:	1f 92       	push	r1
    359c:	0f 92       	push	r0
    359e:	0f b6       	in	r0, 0x3f	; 63
    35a0:	0f 92       	push	r0
    35a2:	11 24       	eor	r1, r1
    35a4:	0b b6       	in	r0, 0x3b	; 59
    35a6:	0f 92       	push	r0
    35a8:	2f 93       	push	r18
    35aa:	3f 93       	push	r19
    35ac:	4f 93       	push	r20
    35ae:	5f 93       	push	r21
    35b0:	6f 93       	push	r22
    35b2:	7f 93       	push	r23
    35b4:	8f 93       	push	r24
    35b6:	9f 93       	push	r25
    35b8:	af 93       	push	r26
    35ba:	bf 93       	push	r27
    35bc:	ef 93       	push	r30
    35be:	ff 93       	push	r31
	int16_t c;
	
	c  = pop(&(port[WEST].tx));
    35c0:	8c e9       	ldi	r24, 0x9C	; 156
    35c2:	94 e2       	ldi	r25, 0x24	; 36
    35c4:	0e 94 12 02 	call	0x424	; 0x424 <pop>
	
	if(c != -1)
    35c8:	8f 3f       	cpi	r24, 0xFF	; 255
    35ca:	2f ef       	ldi	r18, 0xFF	; 255
    35cc:	92 07       	cpc	r25, r18
    35ce:	11 f0       	breq	.+4      	; 0x35d4 <__vector_27+0x3a>
	{
		USARTC0.DATA = c;
    35d0:	80 93 a0 08 	sts	0x08A0, r24
	}
}
    35d4:	ff 91       	pop	r31
    35d6:	ef 91       	pop	r30
    35d8:	bf 91       	pop	r27
    35da:	af 91       	pop	r26
    35dc:	9f 91       	pop	r25
    35de:	8f 91       	pop	r24
    35e0:	7f 91       	pop	r23
    35e2:	6f 91       	pop	r22
    35e4:	5f 91       	pop	r21
    35e6:	4f 91       	pop	r20
    35e8:	3f 91       	pop	r19
    35ea:	2f 91       	pop	r18
    35ec:	0f 90       	pop	r0
    35ee:	0b be       	out	0x3b, r0	; 59
    35f0:	0f 90       	pop	r0
    35f2:	0f be       	out	0x3f, r0	; 63
    35f4:	0f 90       	pop	r0
    35f6:	1f 90       	pop	r1
    35f8:	18 95       	reti

000035fa <__vector_88>:

ISR(USARTD0_RXC_vect)
{
    35fa:	1f 92       	push	r1
    35fc:	0f 92       	push	r0
    35fe:	0f b6       	in	r0, 0x3f	; 63
    3600:	0f 92       	push	r0
    3602:	11 24       	eor	r1, r1
    3604:	0b b6       	in	r0, 0x3b	; 59
    3606:	0f 92       	push	r0
    3608:	2f 93       	push	r18
    360a:	3f 93       	push	r19
    360c:	4f 93       	push	r20
    360e:	5f 93       	push	r21
    3610:	6f 93       	push	r22
    3612:	7f 93       	push	r23
    3614:	8f 93       	push	r24
    3616:	9f 93       	push	r25
    3618:	af 93       	push	r26
    361a:	bf 93       	push	r27
    361c:	ef 93       	push	r30
    361e:	ff 93       	push	r31
	uint8_t c;
	
	c = USARTD0.DATA;
    3620:	80 91 a0 09 	lds	r24, 0x09A0
	//printf("R:%x",c);
	push(c, &(port[DOWN].rx));
    3624:	64 e7       	ldi	r22, 0x74	; 116
    3626:	73 e2       	ldi	r23, 0x23	; 35
    3628:	0e 94 f7 01 	call	0x3ee	; 0x3ee <push>
}
    362c:	ff 91       	pop	r31
    362e:	ef 91       	pop	r30
    3630:	bf 91       	pop	r27
    3632:	af 91       	pop	r26
    3634:	9f 91       	pop	r25
    3636:	8f 91       	pop	r24
    3638:	7f 91       	pop	r23
    363a:	6f 91       	pop	r22
    363c:	5f 91       	pop	r21
    363e:	4f 91       	pop	r20
    3640:	3f 91       	pop	r19
    3642:	2f 91       	pop	r18
    3644:	0f 90       	pop	r0
    3646:	0b be       	out	0x3b, r0	; 59
    3648:	0f 90       	pop	r0
    364a:	0f be       	out	0x3f, r0	; 63
    364c:	0f 90       	pop	r0
    364e:	1f 90       	pop	r1
    3650:	18 95       	reti

00003652 <__vector_90>:
ISR(USARTD0_TXC_vect)
{
    3652:	1f 92       	push	r1
    3654:	0f 92       	push	r0
    3656:	0f b6       	in	r0, 0x3f	; 63
    3658:	0f 92       	push	r0
    365a:	11 24       	eor	r1, r1
    365c:	0b b6       	in	r0, 0x3b	; 59
    365e:	0f 92       	push	r0
    3660:	2f 93       	push	r18
    3662:	3f 93       	push	r19
    3664:	4f 93       	push	r20
    3666:	5f 93       	push	r21
    3668:	6f 93       	push	r22
    366a:	7f 93       	push	r23
    366c:	8f 93       	push	r24
    366e:	9f 93       	push	r25
    3670:	af 93       	push	r26
    3672:	bf 93       	push	r27
    3674:	ef 93       	push	r30
    3676:	ff 93       	push	r31
	int16_t c;
	
	c  = pop(&(port[DOWN].tx));
    3678:	84 e9       	ldi	r24, 0x94	; 148
    367a:	93 e2       	ldi	r25, 0x23	; 35
    367c:	0e 94 12 02 	call	0x424	; 0x424 <pop>
	
	if(c != -1)
    3680:	8f 3f       	cpi	r24, 0xFF	; 255
    3682:	2f ef       	ldi	r18, 0xFF	; 255
    3684:	92 07       	cpc	r25, r18
    3686:	11 f0       	breq	.+4      	; 0x368c <__vector_90+0x3a>
	{
		USARTD0.DATA = c;
    3688:	80 93 a0 09 	sts	0x09A0, r24
	}
}
    368c:	ff 91       	pop	r31
    368e:	ef 91       	pop	r30
    3690:	bf 91       	pop	r27
    3692:	af 91       	pop	r26
    3694:	9f 91       	pop	r25
    3696:	8f 91       	pop	r24
    3698:	7f 91       	pop	r23
    369a:	6f 91       	pop	r22
    369c:	5f 91       	pop	r21
    369e:	4f 91       	pop	r20
    36a0:	3f 91       	pop	r19
    36a2:	2f 91       	pop	r18
    36a4:	0f 90       	pop	r0
    36a6:	0b be       	out	0x3b, r0	; 59
    36a8:	0f 90       	pop	r0
    36aa:	0f be       	out	0x3f, r0	; 63
    36ac:	0f 90       	pop	r0
    36ae:	1f 90       	pop	r1
    36b0:	18 95       	reti

000036b2 <getHWTime>:

uint16_t timeHi;			// semi-private data, do not modify outside of this file

// Time in ms
Time getHWTime()
{
    36b2:	0f 93       	push	r16
    36b4:	1f 93       	push	r17
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    36b6:	f8 94       	cli
	Time tmp;
	// prevents ISRs from corrupting multibyte write
	ATOMIC_BLOCK(ATOMIC_FORCEON)
    {
		tmp = (((Time)timeHi) << 16) | RTC.CNT;
    36b8:	e0 e0       	ldi	r30, 0x00	; 0
    36ba:	f4 e0       	ldi	r31, 0x04	; 4
    36bc:	80 85       	ldd	r24, Z+8	; 0x08
    36be:	91 85       	ldd	r25, Z+9	; 0x09
    36c0:	00 91 c2 25 	lds	r16, 0x25C2
    36c4:	10 91 c3 25 	lds	r17, 0x25C3
    36c8:	20 e0       	ldi	r18, 0x00	; 0
    36ca:	30 e0       	ldi	r19, 0x00	; 0
    36cc:	98 01       	movw	r18, r16
    36ce:	11 27       	eor	r17, r17
    36d0:	00 27       	eor	r16, r16
    36d2:	a0 e0       	ldi	r26, 0x00	; 0
    36d4:	b0 e0       	ldi	r27, 0x00	; 0
    36d6:	08 2b       	or	r16, r24
    36d8:	19 2b       	or	r17, r25
    36da:	2a 2b       	or	r18, r26
    36dc:	3b 2b       	or	r19, r27
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
    36de:	78 94       	sei
	}
	
	return tmp;
}
    36e0:	b8 01       	movw	r22, r16
    36e2:	c9 01       	movw	r24, r18
    36e4:	1f 91       	pop	r17
    36e6:	0f 91       	pop	r16
    36e8:	08 95       	ret

000036ea <initHWClock>:

void initHWClock(void)
{
	OSC.CTRL |= _BV(OSC_RC32MEN_bp);			// turn on 32MHz internal RC oscillator
    36ea:	80 91 50 00 	lds	r24, 0x0050
    36ee:	82 60       	ori	r24, 0x02	; 2
    36f0:	80 93 50 00 	sts	0x0050, r24
	while(!(OSC.STATUS & OSC_RC32MRDY_bm));  	// wait for it to be ready
    36f4:	80 91 51 00 	lds	r24, 0x0051
    36f8:	81 ff       	sbrs	r24, 1
    36fa:	fc cf       	rjmp	.-8      	; 0x36f4 <initHWClock+0xa>

	CCP=0xD8;							// allow modification of protected register
    36fc:	88 ed       	ldi	r24, 0xD8	; 216
    36fe:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc;	// change from 2MHz to 32MHz
    3700:	81 e0       	ldi	r24, 0x01	; 1
    3702:	80 93 40 00 	sts	0x0040, r24
    3706:	08 95       	ret

00003708 <initHWRTC>:
}
#else
void initHWRTC(void)
{
	//OSC_RC32KCAL = 80;
	OSC.CTRL |= OSC_RC32KEN_bm;
    3708:	80 91 50 00 	lds	r24, 0x0050
    370c:	84 60       	ori	r24, 0x04	; 4
    370e:	80 93 50 00 	sts	0x0050, r24
	do {/* Wait for the 32kHz oscillator to stabilize. */} while ( ( OSC.STATUS & OSC_RC32KRDY_bm ) == 0); 
    3712:	80 91 51 00 	lds	r24, 0x0051
    3716:	82 ff       	sbrs	r24, 2
    3718:	fc cf       	rjmp	.-8      	; 0x3712 <initHWRTC+0xa>
	RTC.CTRL = RTC_PRESCALER_DIV1_gc;
    371a:	81 e0       	ldi	r24, 0x01	; 1
    371c:	80 93 00 04 	sts	0x0400, r24
	CLK.RTCCTRL = CLK_RTCSRC_RCOSC_gc | CLK_RTCEN_bm;
    3720:	85 e0       	ldi	r24, 0x05	; 5
    3722:	80 93 43 00 	sts	0x0043, r24
	//RTC.INTCTRL = RTC_OVFINTLVL_LO_gc;
	RTC.INTCTRL = RTC_OVFINTLVL_HI_gc;
    3726:	83 e0       	ldi	r24, 0x03	; 3
    3728:	80 93 02 04 	sts	0x0402, r24
	// initalise the RTC as zero
	RTC.CNT = 0;
    372c:	10 92 08 04 	sts	0x0408, r1
    3730:	10 92 09 04 	sts	0x0409, r1
    3734:	08 95       	ret

00003736 <initHWTime>:
} */


void initHWTime()
{
	initHWClock();
    3736:	0e 94 75 1b 	call	0x36ea	; 0x36ea <initHWClock>
	initHWRTC();
    373a:	0c 94 84 1b 	jmp	0x3708	; 0x3708 <initHWRTC>

0000373e <__vector_10>:
}

ISR(RTC_OVF_vect)
{
    373e:	1f 92       	push	r1
    3740:	0f 92       	push	r0
    3742:	0f b6       	in	r0, 0x3f	; 63
    3744:	0f 92       	push	r0
    3746:	11 24       	eor	r1, r1
    3748:	8f 93       	push	r24
    374a:	9f 93       	push	r25
	timeHi++;
    374c:	80 91 c2 25 	lds	r24, 0x25C2
    3750:	90 91 c3 25 	lds	r25, 0x25C3
    3754:	01 96       	adiw	r24, 0x01	; 1
    3756:	80 93 c2 25 	sts	0x25C2, r24
    375a:	90 93 c3 25 	sts	0x25C3, r25
}
    375e:	9f 91       	pop	r25
    3760:	8f 91       	pop	r24
    3762:	0f 90       	pop	r0
    3764:	0f be       	out	0x3f, r0	; 63
    3766:	0f 90       	pop	r0
    3768:	1f 90       	pop	r1
    376a:	18 95       	reti

0000376c <updateHWMic>:
extern MicData _mic;


void updateHWMic()
{
    BB_LOCK(ATOMIC_RESTORESTATE)
    376c:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    376e:	f8 94       	cli
    // read low, then high byte
    _mic = ADCA.CH0.RES;
    3770:	e0 e0       	ldi	r30, 0x00	; 0
    3772:	f2 e0       	ldi	r31, 0x02	; 2
    3774:	84 a1       	ldd	r24, Z+36	; 0x24
    3776:	95 a1       	ldd	r25, Z+37	; 0x25

    // sign extend to full 16 bits
    _mic = _mic >> 4;
    3778:	34 e0       	ldi	r19, 0x04	; 4
    377a:	95 95       	asr	r25
    377c:	87 95       	ror	r24
    377e:	3a 95       	dec	r19
    3780:	e1 f7       	brne	.-8      	; 0x377a <updateHWMic+0xe>
    3782:	80 93 72 25 	sts	0x2572, r24
    3786:	90 93 73 25 	sts	0x2573, r25
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    378a:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
    378c:	08 95       	ret

0000378e <initHWMic>:
}

void initHWMic(void)
{
    // set-up basic function
    ADCA.CTRLA = ADC_ENABLE_bm;                                 // disable combined DMA but enable ADC
    378e:	e0 e0       	ldi	r30, 0x00	; 0
    3790:	f2 e0       	ldi	r31, 0x02	; 2
    3792:	81 e0       	ldi	r24, 0x01	; 1
    3794:	80 83       	st	Z, r24
    ADCA.CTRLB = ADC_CONMODE_bm | ADC_RESOLUTION_LEFT12BIT_gc;  // use signed 12 bit left adjusted format
    3796:	96 e1       	ldi	r25, 0x16	; 22
    3798:	91 83       	std	Z+1, r25	; 0x01
    ADCA.REFCTRL = ADC_REFSEL_VCC_gc | ADC_BANDGAP_bm;          // disable combined DMA but enable ADC
    379a:	92 e1       	ldi	r25, 0x12	; 18
    379c:	92 83       	std	Z+2, r25	; 0x02
    ADCA.PRESCALER = ADC_PRESCALER_DIV512_gc;                   // DIV512 prescaler
    379e:	97 e0       	ldi	r25, 0x07	; 7
    37a0:	94 83       	std	Z+4, r25	; 0x04

    // set-up inputs (NOTE: define for ADC_CH_MUXNEG_PIN5_gv is incorrect)
    ADCA.CH0.MUXCTRL = ADC_CH_MUXPOS_PIN0_gc | ADC_CH_MUXNEG_PIN1_gc;   // take inputs from microphone (A0, A5)
    37a2:	81 a3       	std	Z+33, r24	; 0x21
    ADCA.CH0.CTRL = ADC_CH_GAIN_1X_gc | ADC_CH_INPUTMODE_DIFFWGAIN_gc;  // use differential gain (x1)
    37a4:	93 e0       	ldi	r25, 0x03	; 3
    37a6:	90 a3       	std	Z+32, r25	; 0x20

    // set-up interrupts
    ADCA.CH0.INTCTRL = ADC_CH_INTLVL1_bm;    // interrupts on conversion completion with MED priority
    37a8:	92 e0       	ldi	r25, 0x02	; 2
    37aa:	92 a3       	std	Z+34, r25	; 0x22

    // start conversion/clear interrupts
    ADCA.CH0.INTFLAGS = ADC_CH_CHIF_bm;
    37ac:	83 a3       	std	Z+35, r24	; 0x23
    ADCA.CH0.CTRL |= ADC_CH_START_bm;
    37ae:	80 a1       	ldd	r24, Z+32	; 0x20
    37b0:	80 68       	ori	r24, 0x80	; 128
    37b2:	80 a3       	std	Z+32, r24	; 0x20
    37b4:	08 95       	ret

000037b6 <rejuvenateHWMic>:
}

void rejuvenateHWMic(void)
{
    // set as outputs
    PORTA.DIRSET = PIN0_bm;
    37b6:	e0 e0       	ldi	r30, 0x00	; 0
    37b8:	f6 e0       	ldi	r31, 0x06	; 6
    37ba:	91 e0       	ldi	r25, 0x01	; 1
    37bc:	91 83       	std	Z+1, r25	; 0x01
    PORTA.DIRSET = PIN5_bm;
    37be:	80 e2       	ldi	r24, 0x20	; 32
    37c0:	81 83       	std	Z+1, r24	; 0x01

    // drive both back to zero
    PORTA.OUTCLR = PIN0_bm;
    37c2:	96 83       	std	Z+6, r25	; 0x06
    PORTA.OUTCLR = PIN5_bm;
    37c4:	86 83       	std	Z+6, r24	; 0x06

    // reset as inputs
    PORTA.DIRCLR = PIN0_bm;
    37c6:	92 83       	std	Z+2, r25	; 0x02
    PORTA.DIRCLR = PIN5_bm;
    37c8:	82 83       	std	Z+2, r24	; 0x02
    37ca:	08 95       	ret

000037cc <__vector_71>:

}

ISR(ADCA_CH0_vect)
{
    37cc:	1f 92       	push	r1
    37ce:	0f 92       	push	r0
    37d0:	0f b6       	in	r0, 0x3f	; 63
    37d2:	0f 92       	push	r0
    37d4:	11 24       	eor	r1, r1
    37d6:	0b b6       	in	r0, 0x3b	; 59
    37d8:	0f 92       	push	r0
    37da:	2f 93       	push	r18
    37dc:	3f 93       	push	r19
    37de:	4f 93       	push	r20
    37e0:	5f 93       	push	r21
    37e2:	6f 93       	push	r22
    37e4:	7f 93       	push	r23
    37e6:	8f 93       	push	r24
    37e8:	9f 93       	push	r25
    37ea:	af 93       	push	r26
    37ec:	bf 93       	push	r27
    37ee:	cf 93       	push	r28
    37f0:	df 93       	push	r29
    37f2:	ef 93       	push	r30
    37f4:	ff 93       	push	r31
    ADCA.CH0.INTFLAGS |= ADC_CH_CHIF_bm;
    37f6:	c0 e0       	ldi	r28, 0x00	; 0
    37f8:	d2 e0       	ldi	r29, 0x02	; 2
    37fa:	8b a1       	ldd	r24, Y+35	; 0x23
    37fc:	81 60       	ori	r24, 0x01	; 1
    37fe:	8b a3       	std	Y+35, r24	; 0x23
    
    // update the data
    updateHWMic();
    3800:	0e 94 b6 1b 	call	0x376c	; 0x376c <updateHWMic>

    // restart the conversion
    ADCA.CH0.CTRL |= ADC_CH_START_bm;
    3804:	88 a1       	ldd	r24, Y+32	; 0x20
    3806:	80 68       	ori	r24, 0x80	; 128
    3808:	88 a3       	std	Y+32, r24	; 0x20
}
    380a:	ff 91       	pop	r31
    380c:	ef 91       	pop	r30
    380e:	df 91       	pop	r29
    3810:	cf 91       	pop	r28
    3812:	bf 91       	pop	r27
    3814:	af 91       	pop	r26
    3816:	9f 91       	pop	r25
    3818:	8f 91       	pop	r24
    381a:	7f 91       	pop	r23
    381c:	6f 91       	pop	r22
    381e:	5f 91       	pop	r21
    3820:	4f 91       	pop	r20
    3822:	3f 91       	pop	r19
    3824:	2f 91       	pop	r18
    3826:	0f 90       	pop	r0
    3828:	0b be       	out	0x3b, r0	; 59
    382a:	0f 90       	pop	r0
    382c:	0f be       	out	0x3f, r0	; 63
    382e:	0f 90       	pop	r0
    3830:	1f 90       	pop	r1
    3832:	18 95       	reti

00003834 <timer_set>:
		}
	}
*/

void timer_set( uint32_t bps, TC0_t * tx_timer, TC1_t * rx_timer)
{
    3834:	6f 92       	push	r6
    3836:	7f 92       	push	r7
    3838:	8f 92       	push	r8
    383a:	9f 92       	push	r9
    383c:	af 92       	push	r10
    383e:	bf 92       	push	r11
    3840:	cf 92       	push	r12
    3842:	df 92       	push	r13
    3844:	ef 92       	push	r14
    3846:	ff 92       	push	r15
    3848:	0f 93       	push	r16
    384a:	1f 93       	push	r17
    384c:	cf 93       	push	r28
    384e:	df 93       	push	r29
    3850:	4b 01       	movw	r8, r22
    3852:	5c 01       	movw	r10, r24
    3854:	8a 01       	movw	r16, r20
    3856:	e9 01       	movw	r28, r18
	uint16_t per;
	
	per = ((uint32_t)F_CPU / (bps));
    3858:	c1 2c       	mov	r12, r1
    385a:	88 e4       	ldi	r24, 0x48	; 72
    385c:	d8 2e       	mov	r13, r24
    385e:	88 ee       	ldi	r24, 0xE8	; 232
    3860:	e8 2e       	mov	r14, r24
    3862:	ff 24       	eor	r15, r15
    3864:	f3 94       	inc	r15
    3866:	c7 01       	movw	r24, r14
    3868:	b6 01       	movw	r22, r12
    386a:	a5 01       	movw	r20, r10
    386c:	94 01       	movw	r18, r8
    386e:	0e 94 e4 20 	call	0x41c8	; 0x41c8 <__udivmodsi4>

	tx_timer->INTCTRLA = TC_OVFINTLVL_HI_gc;
    3872:	93 e0       	ldi	r25, 0x03	; 3
    3874:	69 2e       	mov	r6, r25
    3876:	f8 01       	movw	r30, r16
    3878:	66 82       	std	Z+6, r6	; 0x06
	tx_timer->PER = per;
    387a:	26 a3       	std	Z+38, r18	; 0x26
    387c:	37 a3       	std	Z+39, r19	; 0x27
	tx_timer->CTRLA = TC_CLKSEL_DIV1_gc;
    387e:	77 24       	eor	r7, r7
    3880:	73 94       	inc	r7
    3882:	70 82       	st	Z, r7
	
//	printf("TCE0 set to %x %x %x\r\n",tx_timer->INTCTRLA, tx_timer->PER, tx_timer->CTRLA);
	
	per = ((uint32_t)F_CPU / (bps*3));	
    3884:	a3 e0       	ldi	r26, 0x03	; 3
    3886:	b0 e0       	ldi	r27, 0x00	; 0
    3888:	a5 01       	movw	r20, r10
    388a:	94 01       	movw	r18, r8
    388c:	0e 94 b9 20 	call	0x4172	; 0x4172 <__muluhisi3>
    3890:	9b 01       	movw	r18, r22
    3892:	ac 01       	movw	r20, r24
    3894:	c7 01       	movw	r24, r14
    3896:	b6 01       	movw	r22, r12
    3898:	0e 94 e4 20 	call	0x41c8	; 0x41c8 <__udivmodsi4>
	//per = 31; // bps*9
	
	rx_timer->INTCTRLA = TC_OVFINTLVL_HI_gc;
    389c:	6e 82       	std	Y+6, r6	; 0x06
	rx_timer->PER = per;
    389e:	2e a3       	std	Y+38, r18	; 0x26
    38a0:	3f a3       	std	Y+39, r19	; 0x27
	rx_timer->CTRLA = TC_CLKSEL_DIV1_gc;	
    38a2:	78 82       	st	Y, r7
}
    38a4:	df 91       	pop	r29
    38a6:	cf 91       	pop	r28
    38a8:	1f 91       	pop	r17
    38aa:	0f 91       	pop	r16
    38ac:	ff 90       	pop	r15
    38ae:	ef 90       	pop	r14
    38b0:	df 90       	pop	r13
    38b2:	cf 90       	pop	r12
    38b4:	bf 90       	pop	r11
    38b6:	af 90       	pop	r10
    38b8:	9f 90       	pop	r9
    38ba:	8f 90       	pop	r8
    38bc:	7f 90       	pop	r7
    38be:	6f 90       	pop	r6
    38c0:	08 95       	ret

000038c2 <configure_soft_uart>:

void configure_soft_uart(soft_uart_t * uart, CircBuf * ctx, CircBuf * crx)
{
    38c2:	fc 01       	movw	r30, r24
	uart->rx = crx;
    38c4:	40 87       	std	Z+8, r20	; 0x08
    38c6:	51 87       	std	Z+9, r21	; 0x09
	uart->tx = ctx;
    38c8:	66 83       	std	Z+6, r22	; 0x06
    38ca:	77 83       	std	Z+7, r23	; 0x07
	uart->internal_rx_buffer =  0;
    38cc:	10 82       	st	Z, r1
	uart->internal_tx_buffer  = 0;
    38ce:	11 82       	std	Z+1, r1	; 0x01
    38d0:	12 82       	std	Z+2, r1	; 0x02
    38d2:	08 95       	ret

000038d4 <init_soft_uart>:
}

void init_soft_uart()
{
	PORTD.OUTSET = PIN5_bm | PIN6_bm; // set tx output high (idle)
    38d4:	e0 e6       	ldi	r30, 0x60	; 96
    38d6:	f6 e0       	ldi	r31, 0x06	; 6
    38d8:	80 e6       	ldi	r24, 0x60	; 96
    38da:	85 83       	std	Z+5, r24	; 0x05
	PORTD.DIRSET = PIN5_bm | PIN6_bm; // tx pins as output
    38dc:	81 83       	std	Z+1, r24	; 0x01
	PORTD.DIRCLR = PIN4_bm | PIN7_bm; // rx pins as input
    38de:	80 e9       	ldi	r24, 0x90	; 144
    38e0:	82 83       	std	Z+2, r24	; 0x02
	
	PORTD.PIN4CTRL |= PORT_OPC_PULLUP_gc;	// set pullups on rx lines to prevent floating noise
    38e2:	84 89       	ldd	r24, Z+20	; 0x14
    38e4:	88 61       	ori	r24, 0x18	; 24
    38e6:	84 8b       	std	Z+20, r24	; 0x14
	PORTD.PIN7CTRL |= PORT_OPC_PULLUP_gc;	
    38e8:	87 89       	ldd	r24, Z+23	; 0x17
    38ea:	88 61       	ori	r24, 0x18	; 24
    38ec:	87 8b       	std	Z+23, r24	; 0x17

	soft_uart[1].rx_state = SU_RX_IDLE;
    38ee:	10 92 d2 25 	sts	0x25D2, r1
{
	uint16_t per;
	
	per = ((uint32_t)F_CPU / (bps));

	tx_timer->INTCTRLA = TC_OVFINTLVL_HI_gc;
    38f2:	e0 e0       	ldi	r30, 0x00	; 0
    38f4:	fa e0       	ldi	r31, 0x0A	; 10
    38f6:	33 e0       	ldi	r19, 0x03	; 3
    38f8:	36 83       	std	Z+6, r19	; 0x06
	tx_timer->PER = per;
    38fa:	81 e4       	ldi	r24, 0x41	; 65
    38fc:	93 e0       	ldi	r25, 0x03	; 3
    38fe:	86 a3       	std	Z+38, r24	; 0x26
    3900:	97 a3       	std	Z+39, r25	; 0x27
	tx_timer->CTRLA = TC_CLKSEL_DIV1_gc;
    3902:	21 e0       	ldi	r18, 0x01	; 1
    3904:	20 83       	st	Z, r18
//	printf("TCE0 set to %x %x %x\r\n",tx_timer->INTCTRLA, tx_timer->PER, tx_timer->CTRLA);
	
	per = ((uint32_t)F_CPU / (bps*3));	
	//per = 31; // bps*9
	
	rx_timer->INTCTRLA = TC_OVFINTLVL_HI_gc;
    3906:	e0 e4       	ldi	r30, 0x40	; 64
    3908:	f9 e0       	ldi	r31, 0x09	; 9
    390a:	36 83       	std	Z+6, r19	; 0x06
	rx_timer->PER = per;
    390c:	85 e1       	ldi	r24, 0x15	; 21
    390e:	91 e0       	ldi	r25, 0x01	; 1
    3910:	86 a3       	std	Z+38, r24	; 0x26
    3912:	97 a3       	std	Z+39, r25	; 0x27
	rx_timer->CTRLA = TC_CLKSEL_DIV1_gc;	
    3914:	20 83       	st	Z, r18
    3916:	08 95       	ret

00003918 <su_getchar>:

	timer_set( BAUD_RATE, &TCE0, &TCD1);	
}

int su_getchar(soft_uart_t * uart)
{
    3918:	cf 93       	push	r28
    391a:	df 93       	push	r29
    391c:	ec 01       	movw	r28, r24
	char		ch;

	if(isEmpty((uart->rx)))
    391e:	88 85       	ldd	r24, Y+8	; 0x08
    3920:	99 85       	ldd	r25, Y+9	; 0x09
    3922:	0e 94 2d 02 	call	0x45a	; 0x45a <isEmpty>
    3926:	81 11       	cpse	r24, r1
    3928:	07 c0       	rjmp	.+14     	; 0x3938 <su_getchar+0x20>
	{
		return -1;
	}
	else
	{	
		ch = pop((uart->rx));
    392a:	88 85       	ldd	r24, Y+8	; 0x08
    392c:	99 85       	ldd	r25, Y+9	; 0x09
    392e:	0e 94 12 02 	call	0x424	; 0x424 <pop>
    3932:	9c 01       	movw	r18, r24
		return( ch );
    3934:	33 27       	eor	r19, r19
    3936:	02 c0       	rjmp	.+4      	; 0x393c <su_getchar+0x24>
{
	char		ch;

	if(isEmpty((uart->rx)))
	{
		return -1;
    3938:	2f ef       	ldi	r18, 0xFF	; 255
    393a:	3f ef       	ldi	r19, 0xFF	; 255
	else
	{	
		ch = pop((uart->rx));
		return( ch );
	}
}
    393c:	c9 01       	movw	r24, r18
    393e:	df 91       	pop	r29
    3940:	cf 91       	pop	r28
    3942:	08 95       	ret

00003944 <set_tx_char>:

void set_tx_char(int ch, soft_uart_t * uart)
{
	if(ch != -1)
    3944:	8f 3f       	cpi	r24, 0xFF	; 255
    3946:	2f ef       	ldi	r18, 0xFF	; 255
    3948:	92 07       	cpc	r25, r18
    394a:	31 f0       	breq	.+12     	; 0x3958 <set_tx_char+0x14>
	{
		uart->internal_tx_buffer = (ch << 1) | 0x200;
    394c:	88 0f       	add	r24, r24
    394e:	99 1f       	adc	r25, r25
    3950:	92 60       	ori	r25, 0x02	; 2
    3952:	fb 01       	movw	r30, r22
    3954:	81 83       	std	Z+1, r24	; 0x01
    3956:	92 83       	std	Z+2, r25	; 0x02
    3958:	08 95       	ret

0000395a <su_putchar>:
	}
}

void su_putchar( char ch, soft_uart_t * uart)
{	
	while ( uart->internal_tx_buffer != 0 );
    395a:	fb 01       	movw	r30, r22
    395c:	21 81       	ldd	r18, Z+1	; 0x01
    395e:	32 81       	ldd	r19, Z+2	; 0x02
    3960:	23 2b       	or	r18, r19
    3962:	d9 f7       	brne	.-10     	; 0x395a <su_putchar>
	
	set_tx_char(ch, uart);
    3964:	90 e0       	ldi	r25, 0x00	; 0
    3966:	0c 94 a2 1c 	jmp	0x3944	; 0x3944 <set_tx_char>

0000396a <kbhit>:

}

int kbhit( soft_uart_t * uart )
{
	return( !isEmpty(uart->rx));
    396a:	fc 01       	movw	r30, r24
    396c:	80 85       	ldd	r24, Z+8	; 0x08
    396e:	91 85       	ldd	r25, Z+9	; 0x09
    3970:	0e 94 2d 02 	call	0x45a	; 0x45a <isEmpty>
    3974:	21 e0       	ldi	r18, 0x01	; 1
    3976:	30 e0       	ldi	r19, 0x00	; 0
    3978:	88 23       	and	r24, r24
    397a:	11 f0       	breq	.+4      	; 0x3980 <kbhit+0x16>
    397c:	20 e0       	ldi	r18, 0x00	; 0
    397e:	30 e0       	ldi	r19, 0x00	; 0
}
    3980:	c9 01       	movw	r24, r18
    3982:	08 95       	ret

00003984 <__vector_83>:

// rx ISR
ISR(TCD1_OVF_vect)
{
    3984:	1f 92       	push	r1
    3986:	0f 92       	push	r0
    3988:	0f b6       	in	r0, 0x3f	; 63
    398a:	0f 92       	push	r0
    398c:	11 24       	eor	r1, r1
    398e:	0b b6       	in	r0, 0x3b	; 59
    3990:	0f 92       	push	r0
    3992:	2f 93       	push	r18
    3994:	3f 93       	push	r19
    3996:	4f 93       	push	r20
    3998:	5f 93       	push	r21
    399a:	6f 93       	push	r22
    399c:	7f 93       	push	r23
    399e:	8f 93       	push	r24
    39a0:	9f 93       	push	r25
    39a2:	af 93       	push	r26
    39a4:	bf 93       	push	r27
    39a6:	ef 93       	push	r30
    39a8:	ff 93       	push	r31
	if(!soft_uart[0].sample_time)
    39aa:	80 91 c9 25 	lds	r24, 0x25C9
    39ae:	81 11       	cpse	r24, r1
    39b0:	3b c0       	rjmp	.+118    	; 0x3a28 <__vector_83+0xa4>
	{
		if(soft_uart[0].rx_state == SU_RX_IDLE)
    39b2:	80 91 c8 25 	lds	r24, 0x25C8
    39b6:	81 11       	cpse	r24, r1
    39b8:	0b c0       	rjmp	.+22     	; 0x39d0 <__vector_83+0x4c>
		{
			if(!(PORTD.IN & PIN4_bm))
    39ba:	80 91 68 06 	lds	r24, 0x0668
    39be:	84 fd       	sbrc	r24, 4
    39c0:	36 c0       	rjmp	.+108    	; 0x3a2e <__vector_83+0xaa>
			{
				soft_uart[0].rx_state = SU_RX_BYTE;
    39c2:	81 e0       	ldi	r24, 0x01	; 1
    39c4:	80 93 c8 25 	sts	0x25C8, r24
				soft_uart[0].rx_mask = 0x01;
    39c8:	80 93 c7 25 	sts	0x25C7, r24
				soft_uart[0].sample_time = 3;	// begin sampling every third time
    39cc:	83 e0       	ldi	r24, 0x03	; 3
    39ce:	2d c0       	rjmp	.+90     	; 0x3a2a <__vector_83+0xa6>
			}
		}
		else if (soft_uart[0].rx_state == SU_RX_BYTE)
    39d0:	81 30       	cpi	r24, 0x01	; 1
    39d2:	b9 f4       	brne	.+46     	; 0x3a02 <__vector_83+0x7e>
		{
			if(PORTD.IN & PIN4_bm)
    39d4:	80 91 68 06 	lds	r24, 0x0668
    39d8:	84 ff       	sbrs	r24, 4
    39da:	07 c0       	rjmp	.+14     	; 0x39ea <__vector_83+0x66>
			{
				soft_uart[0].internal_rx_buffer |= soft_uart[0].rx_mask;
    39dc:	80 91 c4 25 	lds	r24, 0x25C4
    39e0:	90 91 c7 25 	lds	r25, 0x25C7
    39e4:	89 2b       	or	r24, r25
    39e6:	80 93 c4 25 	sts	0x25C4, r24
			}
			
			soft_uart[0].rx_mask <<= 1;
    39ea:	80 91 c7 25 	lds	r24, 0x25C7
    39ee:	88 0f       	add	r24, r24
    39f0:	80 93 c7 25 	sts	0x25C7, r24

			if(!soft_uart[0].rx_mask)
    39f4:	81 11       	cpse	r24, r1
    39f6:	03 c0       	rjmp	.+6      	; 0x39fe <__vector_83+0x7a>
			{
				soft_uart[0].rx_state = SU_RX_STOP;
    39f8:	82 e0       	ldi	r24, 0x02	; 2
    39fa:	80 93 c8 25 	sts	0x25C8, r24
			}
			
			soft_uart[0].sample_time = 2;	
    39fe:	82 e0       	ldi	r24, 0x02	; 2
    3a00:	14 c0       	rjmp	.+40     	; 0x3a2a <__vector_83+0xa6>
		}
		else if (soft_uart[0].rx_state == SU_RX_STOP)
    3a02:	82 30       	cpi	r24, 0x02	; 2
    3a04:	a1 f4       	brne	.+40     	; 0x3a2e <__vector_83+0xaa>
		{
			if(PORTD.IN & PIN4_bm)
    3a06:	80 91 68 06 	lds	r24, 0x0668
    3a0a:	84 ff       	sbrs	r24, 4
    3a0c:	0a c0       	rjmp	.+20     	; 0x3a22 <__vector_83+0x9e>
			{
				push(soft_uart[0].internal_rx_buffer, soft_uart[0].rx);
    3a0e:	80 91 c4 25 	lds	r24, 0x25C4
    3a12:	60 91 cc 25 	lds	r22, 0x25CC
    3a16:	70 91 cd 25 	lds	r23, 0x25CD
    3a1a:	0e 94 f7 01 	call	0x3ee	; 0x3ee <push>
				soft_uart[0].internal_rx_buffer = 0;
    3a1e:	10 92 c4 25 	sts	0x25C4, r1
			}
			
			soft_uart[0].rx_state = SU_RX_IDLE;		
    3a22:	10 92 c8 25 	sts	0x25C8, r1
    3a26:	03 c0       	rjmp	.+6      	; 0x3a2e <__vector_83+0xaa>
		}
	}
	else
	{
		soft_uart[0].sample_time--;
    3a28:	81 50       	subi	r24, 0x01	; 1
    3a2a:	80 93 c9 25 	sts	0x25C9, r24
	}

	if(!soft_uart[1].sample_time)
    3a2e:	80 91 d3 25 	lds	r24, 0x25D3
    3a32:	81 11       	cpse	r24, r1
    3a34:	3b c0       	rjmp	.+118    	; 0x3aac <__vector_83+0x128>
	{
		if(soft_uart[1].rx_state == SU_RX_IDLE)
    3a36:	80 91 d2 25 	lds	r24, 0x25D2
    3a3a:	81 11       	cpse	r24, r1
    3a3c:	0b c0       	rjmp	.+22     	; 0x3a54 <__vector_83+0xd0>
		{
			if(!(PORTD.IN & PIN7_bm))
    3a3e:	80 91 68 06 	lds	r24, 0x0668
    3a42:	87 fd       	sbrc	r24, 7
    3a44:	36 c0       	rjmp	.+108    	; 0x3ab2 <__vector_83+0x12e>
			{
				soft_uart[1].rx_state = SU_RX_BYTE;
    3a46:	81 e0       	ldi	r24, 0x01	; 1
    3a48:	80 93 d2 25 	sts	0x25D2, r24
				soft_uart[1].rx_mask = 0x01;
    3a4c:	80 93 d1 25 	sts	0x25D1, r24
				soft_uart[1].sample_time = 3;	// begin sampling every third time
    3a50:	83 e0       	ldi	r24, 0x03	; 3
    3a52:	2d c0       	rjmp	.+90     	; 0x3aae <__vector_83+0x12a>
			}
		}
		else if (soft_uart[1].rx_state == SU_RX_BYTE)
    3a54:	81 30       	cpi	r24, 0x01	; 1
    3a56:	b9 f4       	brne	.+46     	; 0x3a86 <__vector_83+0x102>
		{
			if(PORTD.IN & PIN7_bm)
    3a58:	80 91 68 06 	lds	r24, 0x0668
    3a5c:	87 ff       	sbrs	r24, 7
    3a5e:	07 c0       	rjmp	.+14     	; 0x3a6e <__vector_83+0xea>
			{
				soft_uart[1].internal_rx_buffer |= soft_uart[1].rx_mask;
    3a60:	80 91 ce 25 	lds	r24, 0x25CE
    3a64:	90 91 d1 25 	lds	r25, 0x25D1
    3a68:	89 2b       	or	r24, r25
    3a6a:	80 93 ce 25 	sts	0x25CE, r24
			}
			
			soft_uart[1].rx_mask <<= 1;
    3a6e:	80 91 d1 25 	lds	r24, 0x25D1
    3a72:	88 0f       	add	r24, r24
    3a74:	80 93 d1 25 	sts	0x25D1, r24

			if(!soft_uart[1].rx_mask)
    3a78:	81 11       	cpse	r24, r1
    3a7a:	03 c0       	rjmp	.+6      	; 0x3a82 <__vector_83+0xfe>
			{
				soft_uart[1].rx_state = SU_RX_STOP;
    3a7c:	82 e0       	ldi	r24, 0x02	; 2
    3a7e:	80 93 d2 25 	sts	0x25D2, r24
			}
			
			soft_uart[1].sample_time = 2;	
    3a82:	82 e0       	ldi	r24, 0x02	; 2
    3a84:	14 c0       	rjmp	.+40     	; 0x3aae <__vector_83+0x12a>
		}
		else if (soft_uart[1].rx_state == SU_RX_STOP)
    3a86:	82 30       	cpi	r24, 0x02	; 2
    3a88:	a1 f4       	brne	.+40     	; 0x3ab2 <__vector_83+0x12e>
		{
			if(PORTD.IN & PIN7_bm)
    3a8a:	80 91 68 06 	lds	r24, 0x0668
    3a8e:	87 ff       	sbrs	r24, 7
    3a90:	0a c0       	rjmp	.+20     	; 0x3aa6 <__vector_83+0x122>
			{
				push(soft_uart[1].internal_rx_buffer, soft_uart[1].rx);
    3a92:	80 91 ce 25 	lds	r24, 0x25CE
    3a96:	60 91 d6 25 	lds	r22, 0x25D6
    3a9a:	70 91 d7 25 	lds	r23, 0x25D7
    3a9e:	0e 94 f7 01 	call	0x3ee	; 0x3ee <push>
				soft_uart[1].internal_rx_buffer = 0;
    3aa2:	10 92 ce 25 	sts	0x25CE, r1
			}
			
			soft_uart[1].rx_state = SU_RX_IDLE;		
    3aa6:	10 92 d2 25 	sts	0x25D2, r1
    3aaa:	03 c0       	rjmp	.+6      	; 0x3ab2 <__vector_83+0x12e>
		}
	}
	else
	{
		soft_uart[1].sample_time--;
    3aac:	81 50       	subi	r24, 0x01	; 1
    3aae:	80 93 d3 25 	sts	0x25D3, r24
	}	
}
    3ab2:	ff 91       	pop	r31
    3ab4:	ef 91       	pop	r30
    3ab6:	bf 91       	pop	r27
    3ab8:	af 91       	pop	r26
    3aba:	9f 91       	pop	r25
    3abc:	8f 91       	pop	r24
    3abe:	7f 91       	pop	r23
    3ac0:	6f 91       	pop	r22
    3ac2:	5f 91       	pop	r21
    3ac4:	4f 91       	pop	r20
    3ac6:	3f 91       	pop	r19
    3ac8:	2f 91       	pop	r18
    3aca:	0f 90       	pop	r0
    3acc:	0b be       	out	0x3b, r0	; 59
    3ace:	0f 90       	pop	r0
    3ad0:	0f be       	out	0x3f, r0	; 63
    3ad2:	0f 90       	pop	r0
    3ad4:	1f 90       	pop	r1
    3ad6:	18 95       	reti

00003ad8 <TWI_MasterInit>:
 */
void TWI_MasterInit(TWI_Master_t *twi,
                    TWI_t *module,
                    TWI_MASTER_INTLVL_t intLevel,
                    uint8_t baudRateRegisterSetting)
{
    3ad8:	fc 01       	movw	r30, r24
	twi->interface = module;
    3ada:	60 83       	st	Z, r22
    3adc:	71 83       	std	Z+1, r23	; 0x01
	twi->interface->MASTER.CTRLA = intLevel |
    3ade:	48 63       	ori	r20, 0x38	; 56
    3ae0:	db 01       	movw	r26, r22
    3ae2:	11 96       	adiw	r26, 0x01	; 1
    3ae4:	4c 93       	st	X, r20
	                               TWI_MASTER_RIEN_bm |
	                               TWI_MASTER_WIEN_bm |
	                               TWI_MASTER_ENABLE_bm;
	twi->interface->MASTER.BAUD = baudRateRegisterSetting;
    3ae6:	a0 81       	ld	r26, Z
    3ae8:	b1 81       	ldd	r27, Z+1	; 0x01
    3aea:	15 96       	adiw	r26, 0x05	; 5
    3aec:	2c 93       	st	X, r18
	twi->interface->MASTER.STATUS = TWI_MASTER_BUSSTATE_IDLE_gc;
    3aee:	01 90       	ld	r0, Z+
    3af0:	f0 81       	ld	r31, Z
    3af2:	e0 2d       	mov	r30, r0
    3af4:	81 e0       	ldi	r24, 0x01	; 1
    3af6:	84 83       	std	Z+4, r24	; 0x04
    3af8:	08 95       	ret

00003afa <TWI_MasterState>:
 *  \retval TWI_MASTER_BUSSTATE_BUSY_gc    Bus state is busy.
 */
TWI_MASTER_BUSSTATE_t TWI_MasterState(TWI_Master_t *twi)
{
	TWI_MASTER_BUSSTATE_t twi_status;
	twi_status = (TWI_MASTER_BUSSTATE_t) (twi->interface->MASTER.STATUS &
    3afa:	dc 01       	movw	r26, r24
    3afc:	ed 91       	ld	r30, X+
    3afe:	fc 91       	ld	r31, X
    3b00:	84 81       	ldd	r24, Z+4	; 0x04
	                                      TWI_MASTER_BUSSTATE_gm);
	return twi_status;
}
    3b02:	83 70       	andi	r24, 0x03	; 3
    3b04:	08 95       	ret

00003b06 <TWI_MasterReady>:
 *  \retval true  If transaction could be started.
 *  \retval false If transaction could not be started.
 */
bool TWI_MasterReady(TWI_Master_t *twi)
{
	bool twi_status = (twi->status & TWIM_STATUS_READY);
    3b06:	fc 01       	movw	r30, r24
    3b08:	87 85       	ldd	r24, Z+15	; 0x0f
	return twi_status;
}
    3b0a:	80 e0       	ldi	r24, 0x00	; 0
    3b0c:	08 95       	ret

00003b0e <TWI_MasterWriteRead>:
bool TWI_MasterWriteRead(TWI_Master_t *twi,
                         uint8_t address,
                         uint8_t *writeData,
                         uint8_t bytesToWrite,
                         uint8_t bytesToRead)
{
    3b0e:	0f 93       	push	r16
    3b10:	cf 93       	push	r28
    3b12:	df 93       	push	r29
    3b14:	fc 01       	movw	r30, r24
	/*Parameter sanity check. */
	if (bytesToWrite > TWIM_WRITE_BUFFER_SIZE) {
    3b16:	25 30       	cpi	r18, 0x05	; 5
    3b18:	50 f5       	brcc	.+84     	; 0x3b6e <TWI_MasterWriteRead+0x60>
		return false;
	}
	if (bytesToRead > TWIM_READ_BUFFER_SIZE) {
    3b1a:	05 30       	cpi	r16, 0x05	; 5
    3b1c:	40 f5       	brcc	.+80     	; 0x3b6e <TWI_MasterWriteRead+0x60>
		return false;
	}

	/*Initiate transaction if bus is ready. */
	if (twi->status == TWIM_STATUS_READY) {
    3b1e:	87 85       	ldd	r24, Z+15	; 0x0f
    3b20:	81 11       	cpse	r24, r1
    3b22:	25 c0       	rjmp	.+74     	; 0x3b6e <TWI_MasterWriteRead+0x60>

		twi->status = TWIM_STATUS_BUSY;
    3b24:	81 e0       	ldi	r24, 0x01	; 1
    3b26:	87 87       	std	Z+15, r24	; 0x0f
		twi->result = TWIM_RESULT_UNKNOWN;
    3b28:	10 8a       	std	Z+16, r1	; 0x10

		twi->address = address<<1;
    3b2a:	66 0f       	add	r22, r22
    3b2c:	62 83       	std	Z+2, r22	; 0x02
    3b2e:	da 01       	movw	r26, r20

		/* Fill write data buffer. */
		for (uint8_t bufferIndex=0; bufferIndex < bytesToWrite; bufferIndex++) {
    3b30:	80 e0       	ldi	r24, 0x00	; 0
    3b32:	90 e0       	ldi	r25, 0x00	; 0
    3b34:	06 c0       	rjmp	.+12     	; 0x3b42 <TWI_MasterWriteRead+0x34>
			twi->writeData[bufferIndex] = writeData[bufferIndex];
    3b36:	3d 91       	ld	r19, X+
    3b38:	ef 01       	movw	r28, r30
    3b3a:	c8 0f       	add	r28, r24
    3b3c:	d9 1f       	adc	r29, r25
    3b3e:	3b 83       	std	Y+3, r19	; 0x03
    3b40:	01 96       	adiw	r24, 0x01	; 1
		twi->result = TWIM_RESULT_UNKNOWN;

		twi->address = address<<1;

		/* Fill write data buffer. */
		for (uint8_t bufferIndex=0; bufferIndex < bytesToWrite; bufferIndex++) {
    3b42:	82 17       	cp	r24, r18
    3b44:	c0 f3       	brcs	.-16     	; 0x3b36 <TWI_MasterWriteRead+0x28>
			twi->writeData[bufferIndex] = writeData[bufferIndex];
		}

		twi->bytesToWrite = bytesToWrite;
    3b46:	23 87       	std	Z+11, r18	; 0x0b
		twi->bytesToRead = bytesToRead;
    3b48:	04 87       	std	Z+12, r16	; 0x0c
		twi->bytesWritten = 0;
    3b4a:	15 86       	std	Z+13, r1	; 0x0d
		twi->bytesRead = 0;
    3b4c:	16 86       	std	Z+14, r1	; 0x0e

		/* If write command, send the START condition + Address +
		 * 'R/_W = 0'
		 */
		if (twi->bytesToWrite > 0) {
    3b4e:	83 85       	ldd	r24, Z+11	; 0x0b
    3b50:	88 23       	and	r24, r24
    3b52:	19 f0       	breq	.+6      	; 0x3b5a <TWI_MasterWriteRead+0x4c>
			uint8_t writeAddress = twi->address & ~0x01;
    3b54:	82 81       	ldd	r24, Z+2	; 0x02
    3b56:	8e 7f       	andi	r24, 0xFE	; 254
    3b58:	05 c0       	rjmp	.+10     	; 0x3b64 <TWI_MasterWriteRead+0x56>
		}

		/* If read command, send the START condition + Address +
		 * 'R/_W = 1'
		 */
		else if (twi->bytesToRead > 0) {
    3b5a:	84 85       	ldd	r24, Z+12	; 0x0c
    3b5c:	88 23       	and	r24, r24
    3b5e:	49 f0       	breq	.+18     	; 0x3b72 <TWI_MasterWriteRead+0x64>
			uint8_t readAddress = twi->address | 0x01;
    3b60:	82 81       	ldd	r24, Z+2	; 0x02
    3b62:	81 60       	ori	r24, 0x01	; 1
			twi->interface->MASTER.ADDR = readAddress;
    3b64:	01 90       	ld	r0, Z+
    3b66:	f0 81       	ld	r31, Z
    3b68:	e0 2d       	mov	r30, r0
    3b6a:	86 83       	std	Z+6, r24	; 0x06
    3b6c:	02 c0       	rjmp	.+4      	; 0x3b72 <TWI_MasterWriteRead+0x64>
                         uint8_t bytesToWrite,
                         uint8_t bytesToRead)
{
	/*Parameter sanity check. */
	if (bytesToWrite > TWIM_WRITE_BUFFER_SIZE) {
		return false;
    3b6e:	80 e0       	ldi	r24, 0x00	; 0
    3b70:	01 c0       	rjmp	.+2      	; 0x3b74 <TWI_MasterWriteRead+0x66>
		 */
		else if (twi->bytesToRead > 0) {
			uint8_t readAddress = twi->address | 0x01;
			twi->interface->MASTER.ADDR = readAddress;
		}
		return true;
    3b72:	81 e0       	ldi	r24, 0x01	; 1
	} else {
		return false;
	}
}
    3b74:	df 91       	pop	r29
    3b76:	cf 91       	pop	r28
    3b78:	0f 91       	pop	r16
    3b7a:	08 95       	ret

00003b7c <TWI_MasterRead>:
 *  \retval false If transaction could not be started.
 */
bool TWI_MasterRead(TWI_Master_t *twi,
                    uint8_t address,
                    uint8_t bytesToRead)
{
    3b7c:	0f 93       	push	r16
	bool twi_status = TWI_MasterWriteRead(twi, address, 0, 0, bytesToRead);
    3b7e:	04 2f       	mov	r16, r20
    3b80:	20 e0       	ldi	r18, 0x00	; 0
    3b82:	40 e0       	ldi	r20, 0x00	; 0
    3b84:	50 e0       	ldi	r21, 0x00	; 0
    3b86:	0e 94 87 1d 	call	0x3b0e	; 0x3b0e <TWI_MasterWriteRead>
	return twi_status;
}
    3b8a:	0f 91       	pop	r16
    3b8c:	08 95       	ret

00003b8e <TWI_MasterWrite>:
 */
bool TWI_MasterWrite(TWI_Master_t *twi,
                     uint8_t address,
                     uint8_t *writeData,
                     uint8_t bytesToWrite)
{
    3b8e:	0f 93       	push	r16
	bool twi_status = TWI_MasterWriteRead(twi, address, writeData, bytesToWrite, 0);
    3b90:	00 e0       	ldi	r16, 0x00	; 0
    3b92:	0e 94 87 1d 	call	0x3b0e	; 0x3b0e <TWI_MasterWriteRead>
	return twi_status;
}
    3b96:	0f 91       	pop	r16
    3b98:	08 95       	ret

00003b9a <TWI_MasterArbitrationLostBusErrorHandler>:
 *  Handles TWI responses to lost arbitration and bus error.
 *
 *  \param twi  The TWI_Master_t struct instance.
 */
void TWI_MasterArbitrationLostBusErrorHandler(TWI_Master_t *twi)
{
    3b9a:	fc 01       	movw	r30, r24
	uint8_t currentStatus = twi->interface->MASTER.STATUS;
    3b9c:	a0 81       	ld	r26, Z
    3b9e:	b1 81       	ldd	r27, Z+1	; 0x01
    3ba0:	14 96       	adiw	r26, 0x04	; 4
    3ba2:	8c 91       	ld	r24, X
    3ba4:	14 97       	sbiw	r26, 0x04	; 4

	/* If bus error. */
	if (currentStatus & TWI_MASTER_BUSERR_bm) {
    3ba6:	82 ff       	sbrs	r24, 2
    3ba8:	02 c0       	rjmp	.+4      	; 0x3bae <TWI_MasterArbitrationLostBusErrorHandler+0x14>
		twi->result = TWIM_RESULT_BUS_ERROR;
    3baa:	94 e0       	ldi	r25, 0x04	; 4
    3bac:	01 c0       	rjmp	.+2      	; 0x3bb0 <TWI_MasterArbitrationLostBusErrorHandler+0x16>
	}
	/* If arbitration lost. */
	else {
		twi->result = TWIM_RESULT_ARBITRATION_LOST;
    3bae:	93 e0       	ldi	r25, 0x03	; 3
    3bb0:	90 8b       	std	Z+16, r25	; 0x10
	}

	/* Clear interrupt flag. */
	twi->interface->MASTER.STATUS = currentStatus | TWI_MASTER_ARBLOST_bm;
    3bb2:	88 60       	ori	r24, 0x08	; 8
    3bb4:	14 96       	adiw	r26, 0x04	; 4
    3bb6:	8c 93       	st	X, r24

	twi->status = TWIM_STATUS_READY;
    3bb8:	17 86       	std	Z+15, r1	; 0x0f
    3bba:	08 95       	ret

00003bbc <TWI_MasterWriteHandler>:
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 *
 *  \param twi The TWI_Master_t struct instance.
 */
void TWI_MasterWriteHandler(TWI_Master_t *twi)
{
    3bbc:	cf 93       	push	r28
    3bbe:	df 93       	push	r29
    3bc0:	fc 01       	movw	r30, r24
	/* Local variables used in if tests to avoid compiler warning. */
	uint8_t bytesToWrite  = twi->bytesToWrite;
    3bc2:	93 85       	ldd	r25, Z+11	; 0x0b
	uint8_t bytesToRead   = twi->bytesToRead;
    3bc4:	84 85       	ldd	r24, Z+12	; 0x0c

	/* If NOT acknowledged (NACK) by slave cancel the transaction. */
	if (twi->interface->MASTER.STATUS & TWI_MASTER_RXACK_bm) {
    3bc6:	a0 81       	ld	r26, Z
    3bc8:	b1 81       	ldd	r27, Z+1	; 0x01
    3bca:	14 96       	adiw	r26, 0x04	; 4
    3bcc:	2c 91       	ld	r18, X
    3bce:	14 97       	sbiw	r26, 0x04	; 4
    3bd0:	24 ff       	sbrs	r18, 4
    3bd2:	05 c0       	rjmp	.+10     	; 0x3bde <TWI_MasterWriteHandler+0x22>
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    3bd4:	83 e0       	ldi	r24, 0x03	; 3
    3bd6:	13 96       	adiw	r26, 0x03	; 3
    3bd8:	8c 93       	st	X, r24
		twi->result = TWIM_RESULT_NACK_RECEIVED;
    3bda:	85 e0       	ldi	r24, 0x05	; 5
    3bdc:	1a c0       	rjmp	.+52     	; 0x3c12 <TWI_MasterWriteHandler+0x56>
		twi->status = TWIM_STATUS_READY;
	}

	/* If more bytes to write, send data. */
	else if (twi->bytesWritten < bytesToWrite) {
    3bde:	25 85       	ldd	r18, Z+13	; 0x0d
    3be0:	29 17       	cp	r18, r25
    3be2:	58 f4       	brcc	.+22     	; 0x3bfa <TWI_MasterWriteHandler+0x3e>
		uint8_t data = twi->writeData[twi->bytesWritten];
    3be4:	85 85       	ldd	r24, Z+13	; 0x0d
    3be6:	ef 01       	movw	r28, r30
    3be8:	c8 0f       	add	r28, r24
    3bea:	d1 1d       	adc	r29, r1
    3bec:	8b 81       	ldd	r24, Y+3	; 0x03
		twi->interface->MASTER.DATA = data;
    3bee:	17 96       	adiw	r26, 0x07	; 7
    3bf0:	8c 93       	st	X, r24
		++twi->bytesWritten;
    3bf2:	85 85       	ldd	r24, Z+13	; 0x0d
    3bf4:	8f 5f       	subi	r24, 0xFF	; 255
    3bf6:	85 87       	std	Z+13, r24	; 0x0d
    3bf8:	0e c0       	rjmp	.+28     	; 0x3c16 <TWI_MasterWriteHandler+0x5a>
	}

	/* If bytes to read, send repeated START condition + Address +
	 * 'R/_W = 1'
	 */
	else if (twi->bytesRead < bytesToRead) {
    3bfa:	96 85       	ldd	r25, Z+14	; 0x0e
    3bfc:	98 17       	cp	r25, r24
    3bfe:	28 f4       	brcc	.+10     	; 0x3c0a <TWI_MasterWriteHandler+0x4e>
		uint8_t readAddress = twi->address | 0x01;
    3c00:	82 81       	ldd	r24, Z+2	; 0x02
    3c02:	81 60       	ori	r24, 0x01	; 1
		twi->interface->MASTER.ADDR = readAddress;
    3c04:	16 96       	adiw	r26, 0x06	; 6
    3c06:	8c 93       	st	X, r24
    3c08:	06 c0       	rjmp	.+12     	; 0x3c16 <TWI_MasterWriteHandler+0x5a>
	}

	/* If transaction finished, send STOP condition and set RESULT OK. */
	else {
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    3c0a:	83 e0       	ldi	r24, 0x03	; 3
    3c0c:	13 96       	adiw	r26, 0x03	; 3
    3c0e:	8c 93       	st	X, r24
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result)
{
	twi->result = result;
    3c10:	81 e0       	ldi	r24, 0x01	; 1
    3c12:	80 8b       	std	Z+16, r24	; 0x10
	twi->status = TWIM_STATUS_READY;
    3c14:	17 86       	std	Z+15, r1	; 0x0f
	/* If transaction finished, send STOP condition and set RESULT OK. */
	else {
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		TWI_MasterTransactionFinished(twi, TWIM_RESULT_OK);
	}
}
    3c16:	df 91       	pop	r29
    3c18:	cf 91       	pop	r28
    3c1a:	08 95       	ret

00003c1c <TWI_MasterReadHandler>:
 *  reading bytes from the TWI slave.
 *
 *  \param twi The TWI_Master_t struct instance.
 */
void TWI_MasterReadHandler(TWI_Master_t *twi)
{
    3c1c:	fc 01       	movw	r30, r24
	/* Fetch data if bytes to be read. */
	if (twi->bytesRead < TWIM_READ_BUFFER_SIZE) {
    3c1e:	86 85       	ldd	r24, Z+14	; 0x0e
    3c20:	a0 81       	ld	r26, Z
    3c22:	b1 81       	ldd	r27, Z+1	; 0x01
    3c24:	84 30       	cpi	r24, 0x04	; 4
    3c26:	60 f4       	brcc	.+24     	; 0x3c40 <TWI_MasterReadHandler+0x24>
		uint8_t data = twi->interface->MASTER.DATA;
    3c28:	17 96       	adiw	r26, 0x07	; 7
    3c2a:	8c 91       	ld	r24, X
		twi->readData[twi->bytesRead] = data;
    3c2c:	96 85       	ldd	r25, Z+14	; 0x0e
    3c2e:	df 01       	movw	r26, r30
    3c30:	a9 0f       	add	r26, r25
    3c32:	b1 1d       	adc	r27, r1
    3c34:	17 96       	adiw	r26, 0x07	; 7
    3c36:	8c 93       	st	X, r24
		twi->bytesRead++;
    3c38:	86 85       	ldd	r24, Z+14	; 0x0e
    3c3a:	8f 5f       	subi	r24, 0xFF	; 255
    3c3c:	86 87       	std	Z+14, r24	; 0x0e
    3c3e:	06 c0       	rjmp	.+12     	; 0x3c4c <TWI_MasterReadHandler+0x30>
	}

	/* If buffer overflow, issue STOP and BUFFER_OVERFLOW condition. */
	else {
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    3c40:	83 e0       	ldi	r24, 0x03	; 3
    3c42:	13 96       	adiw	r26, 0x03	; 3
    3c44:	8c 93       	st	X, r24
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result)
{
	twi->result = result;
    3c46:	82 e0       	ldi	r24, 0x02	; 2
    3c48:	80 8b       	std	Z+16, r24	; 0x10
	twi->status = TWIM_STATUS_READY;
    3c4a:	17 86       	std	Z+15, r1	; 0x0f
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		TWI_MasterTransactionFinished(twi, TWIM_RESULT_BUFFER_OVERFLOW);
	}

	/* Local variable used in if test to avoid compiler warning. */
	uint8_t bytesToRead = twi->bytesToRead;
    3c4c:	84 85       	ldd	r24, Z+12	; 0x0c

	/* If more bytes to read, issue ACK and start a byte read. */
	if (twi->bytesRead < bytesToRead) {
    3c4e:	96 85       	ldd	r25, Z+14	; 0x0e
    3c50:	a0 81       	ld	r26, Z
    3c52:	b1 81       	ldd	r27, Z+1	; 0x01
    3c54:	98 17       	cp	r25, r24
    3c56:	20 f4       	brcc	.+8      	; 0x3c60 <TWI_MasterReadHandler+0x44>
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    3c58:	82 e0       	ldi	r24, 0x02	; 2
    3c5a:	13 96       	adiw	r26, 0x03	; 3
    3c5c:	8c 93       	st	X, r24
    3c5e:	08 95       	ret
	}

	/* If transaction finished, issue NACK and STOP condition. */
	else {
		twi->interface->MASTER.CTRLC = TWI_MASTER_ACKACT_bm |
    3c60:	87 e0       	ldi	r24, 0x07	; 7
    3c62:	13 96       	adiw	r26, 0x03	; 3
    3c64:	8c 93       	st	X, r24
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result)
{
	twi->result = result;
    3c66:	81 e0       	ldi	r24, 0x01	; 1
    3c68:	80 8b       	std	Z+16, r24	; 0x10
	twi->status = TWIM_STATUS_READY;
    3c6a:	17 86       	std	Z+15, r1	; 0x0f
    3c6c:	08 95       	ret

00003c6e <TWI_MasterInterruptHandler>:
 *
 *  \param twi  The TWI_Master_t struct instance.
 */
void TWI_MasterInterruptHandler(TWI_Master_t *twi)
{
	uint8_t currentStatus = twi->interface->MASTER.STATUS;
    3c6e:	dc 01       	movw	r26, r24
    3c70:	ed 91       	ld	r30, X+
    3c72:	fc 91       	ld	r31, X
    3c74:	24 81       	ldd	r18, Z+4	; 0x04
 *
 *  Check current status and calls the appropriate handler.
 *
 *  \param twi  The TWI_Master_t struct instance.
 */
void TWI_MasterInterruptHandler(TWI_Master_t *twi)
    3c76:	32 2f       	mov	r19, r18
    3c78:	3c 70       	andi	r19, 0x0C	; 12
{
	uint8_t currentStatus = twi->interface->MASTER.STATUS;

	/* If arbitration lost or bus error. */
	if ((currentStatus & TWI_MASTER_ARBLOST_bm) ||
    3c7a:	11 f0       	breq	.+4      	; 0x3c80 <TWI_MasterInterruptHandler+0x12>
	    (currentStatus & TWI_MASTER_BUSERR_bm)) {

		TWI_MasterArbitrationLostBusErrorHandler(twi);
    3c7c:	0c 94 cd 1d 	jmp	0x3b9a	; 0x3b9a <TWI_MasterArbitrationLostBusErrorHandler>
	}

	/* If master write interrupt. */
	else if (currentStatus & TWI_MASTER_WIF_bm) {
    3c80:	26 fd       	sbrc	r18, 6
		TWI_MasterWriteHandler(twi);
    3c82:	0c 94 de 1d 	jmp	0x3bbc	; 0x3bbc <TWI_MasterWriteHandler>
	}

	/* If master read interrupt. */
	else if (currentStatus & TWI_MASTER_RIF_bm) {
    3c86:	27 fd       	sbrc	r18, 7
		TWI_MasterReadHandler(twi);
    3c88:	0c 94 0e 1e 	jmp	0x3c1c	; 0x3c1c <TWI_MasterReadHandler>
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result)
{
	twi->result = result;
    3c8c:	26 e0       	ldi	r18, 0x06	; 6
    3c8e:	fc 01       	movw	r30, r24
    3c90:	20 8b       	std	Z+16, r18	; 0x10
	twi->status = TWIM_STATUS_READY;
    3c92:	17 86       	std	Z+15, r1	; 0x0f
    3c94:	08 95       	ret

00003c96 <TWI_MasterTransactionFinished>:
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result)
{
	twi->result = result;
    3c96:	fc 01       	movw	r30, r24
    3c98:	60 8b       	std	Z+16, r22	; 0x10
	twi->status = TWIM_STATUS_READY;
    3c9a:	17 86       	std	Z+15, r1	; 0x0f
    3c9c:	08 95       	ret

00003c9e <initDebugUart>:
#endif

FILE debug;

void initDebugUart(USART_t * uart)
{
    3c9e:	fc 01       	movw	r30, r24
	uart->CTRLA = 0;	// disable RX/TX interrupts
    3ca0:	13 82       	std	Z+3, r1	; 0x03
	uart->CTRLB = USART_RXEN_bm | USART_TXEN_bm;
    3ca2:	88 e1       	ldi	r24, 0x18	; 24
    3ca4:	84 83       	std	Z+4, r24	; 0x04
	uart->CTRLC = USART_CHSIZE_8BIT_gc;
    3ca6:	83 e0       	ldi	r24, 0x03	; 3
    3ca8:	85 83       	std	Z+5, r24	; 0x05
	uart->BAUDCTRLA = 16;  // 115200  103;	// 19200?!
    3caa:	80 e1       	ldi	r24, 0x10	; 16
    3cac:	86 83       	std	Z+6, r24	; 0x06
	uart->BAUDCTRLB = 0;
    3cae:	17 82       	std	Z+7, r1	; 0x07
    3cb0:	08 95       	ret

00003cb2 <debugPutChar>:
#ifdef DEBUG
    while(!(DEBUGUART.STATUS & USART_DREIF_bm));
    DEBUGUART.DATA = c;
#endif
    return 0;
}
    3cb2:	80 e0       	ldi	r24, 0x00	; 0
    3cb4:	90 e0       	ldi	r25, 0x00	; 0
    3cb6:	08 95       	ret

00003cb8 <debugGetChar>:
	    return -1;
	}
#else
	return -1;
#endif
}
    3cb8:	8f ef       	ldi	r24, 0xFF	; 255
    3cba:	9f ef       	ldi	r25, 0xFF	; 255
    3cbc:	08 95       	ret

00003cbe <initHWDebug>:


void initHWDebug() 
{
    3cbe:	08 95       	ret

00003cc0 <main>:
#include "system/system.h"

int main(void)
{
		return blockProgram();
    3cc0:	0c 94 89 08 	jmp	0x1112	; 0x1112 <blockProgram>

00003cc4 <__subsf3>:
    3cc4:	50 58       	subi	r21, 0x80	; 128

00003cc6 <__addsf3>:
    3cc6:	bb 27       	eor	r27, r27
    3cc8:	aa 27       	eor	r26, r26
    3cca:	0e d0       	rcall	.+28     	; 0x3ce8 <__addsf3x>
    3ccc:	6c c1       	rjmp	.+728    	; 0x3fa6 <__fp_round>
    3cce:	5d d1       	rcall	.+698    	; 0x3f8a <__fp_pscA>
    3cd0:	30 f0       	brcs	.+12     	; 0x3cde <__addsf3+0x18>
    3cd2:	62 d1       	rcall	.+708    	; 0x3f98 <__fp_pscB>
    3cd4:	20 f0       	brcs	.+8      	; 0x3cde <__addsf3+0x18>
    3cd6:	31 f4       	brne	.+12     	; 0x3ce4 <__addsf3+0x1e>
    3cd8:	9f 3f       	cpi	r25, 0xFF	; 255
    3cda:	11 f4       	brne	.+4      	; 0x3ce0 <__addsf3+0x1a>
    3cdc:	1e f4       	brtc	.+6      	; 0x3ce4 <__addsf3+0x1e>
    3cde:	52 c1       	rjmp	.+676    	; 0x3f84 <__fp_nan>
    3ce0:	0e f4       	brtc	.+2      	; 0x3ce4 <__addsf3+0x1e>
    3ce2:	e0 95       	com	r30
    3ce4:	e7 fb       	bst	r30, 7
    3ce6:	48 c1       	rjmp	.+656    	; 0x3f78 <__fp_inf>

00003ce8 <__addsf3x>:
    3ce8:	e9 2f       	mov	r30, r25
    3cea:	6e d1       	rcall	.+732    	; 0x3fc8 <__fp_split3>
    3cec:	80 f3       	brcs	.-32     	; 0x3cce <__addsf3+0x8>
    3cee:	ba 17       	cp	r27, r26
    3cf0:	62 07       	cpc	r22, r18
    3cf2:	73 07       	cpc	r23, r19
    3cf4:	84 07       	cpc	r24, r20
    3cf6:	95 07       	cpc	r25, r21
    3cf8:	18 f0       	brcs	.+6      	; 0x3d00 <__addsf3x+0x18>
    3cfa:	71 f4       	brne	.+28     	; 0x3d18 <__addsf3x+0x30>
    3cfc:	9e f5       	brtc	.+102    	; 0x3d64 <__addsf3x+0x7c>
    3cfe:	86 c1       	rjmp	.+780    	; 0x400c <__fp_zero>
    3d00:	0e f4       	brtc	.+2      	; 0x3d04 <__addsf3x+0x1c>
    3d02:	e0 95       	com	r30
    3d04:	0b 2e       	mov	r0, r27
    3d06:	ba 2f       	mov	r27, r26
    3d08:	a0 2d       	mov	r26, r0
    3d0a:	0b 01       	movw	r0, r22
    3d0c:	b9 01       	movw	r22, r18
    3d0e:	90 01       	movw	r18, r0
    3d10:	0c 01       	movw	r0, r24
    3d12:	ca 01       	movw	r24, r20
    3d14:	a0 01       	movw	r20, r0
    3d16:	11 24       	eor	r1, r1
    3d18:	ff 27       	eor	r31, r31
    3d1a:	59 1b       	sub	r21, r25
    3d1c:	99 f0       	breq	.+38     	; 0x3d44 <__addsf3x+0x5c>
    3d1e:	59 3f       	cpi	r21, 0xF9	; 249
    3d20:	50 f4       	brcc	.+20     	; 0x3d36 <__addsf3x+0x4e>
    3d22:	50 3e       	cpi	r21, 0xE0	; 224
    3d24:	68 f1       	brcs	.+90     	; 0x3d80 <__addsf3x+0x98>
    3d26:	1a 16       	cp	r1, r26
    3d28:	f0 40       	sbci	r31, 0x00	; 0
    3d2a:	a2 2f       	mov	r26, r18
    3d2c:	23 2f       	mov	r18, r19
    3d2e:	34 2f       	mov	r19, r20
    3d30:	44 27       	eor	r20, r20
    3d32:	58 5f       	subi	r21, 0xF8	; 248
    3d34:	f3 cf       	rjmp	.-26     	; 0x3d1c <__addsf3x+0x34>
    3d36:	46 95       	lsr	r20
    3d38:	37 95       	ror	r19
    3d3a:	27 95       	ror	r18
    3d3c:	a7 95       	ror	r26
    3d3e:	f0 40       	sbci	r31, 0x00	; 0
    3d40:	53 95       	inc	r21
    3d42:	c9 f7       	brne	.-14     	; 0x3d36 <__addsf3x+0x4e>
    3d44:	7e f4       	brtc	.+30     	; 0x3d64 <__addsf3x+0x7c>
    3d46:	1f 16       	cp	r1, r31
    3d48:	ba 0b       	sbc	r27, r26
    3d4a:	62 0b       	sbc	r22, r18
    3d4c:	73 0b       	sbc	r23, r19
    3d4e:	84 0b       	sbc	r24, r20
    3d50:	ba f0       	brmi	.+46     	; 0x3d80 <__addsf3x+0x98>
    3d52:	91 50       	subi	r25, 0x01	; 1
    3d54:	a1 f0       	breq	.+40     	; 0x3d7e <__addsf3x+0x96>
    3d56:	ff 0f       	add	r31, r31
    3d58:	bb 1f       	adc	r27, r27
    3d5a:	66 1f       	adc	r22, r22
    3d5c:	77 1f       	adc	r23, r23
    3d5e:	88 1f       	adc	r24, r24
    3d60:	c2 f7       	brpl	.-16     	; 0x3d52 <__addsf3x+0x6a>
    3d62:	0e c0       	rjmp	.+28     	; 0x3d80 <__addsf3x+0x98>
    3d64:	ba 0f       	add	r27, r26
    3d66:	62 1f       	adc	r22, r18
    3d68:	73 1f       	adc	r23, r19
    3d6a:	84 1f       	adc	r24, r20
    3d6c:	48 f4       	brcc	.+18     	; 0x3d80 <__addsf3x+0x98>
    3d6e:	87 95       	ror	r24
    3d70:	77 95       	ror	r23
    3d72:	67 95       	ror	r22
    3d74:	b7 95       	ror	r27
    3d76:	f7 95       	ror	r31
    3d78:	9e 3f       	cpi	r25, 0xFE	; 254
    3d7a:	08 f0       	brcs	.+2      	; 0x3d7e <__addsf3x+0x96>
    3d7c:	b3 cf       	rjmp	.-154    	; 0x3ce4 <__addsf3+0x1e>
    3d7e:	93 95       	inc	r25
    3d80:	88 0f       	add	r24, r24
    3d82:	08 f0       	brcs	.+2      	; 0x3d86 <__addsf3x+0x9e>
    3d84:	99 27       	eor	r25, r25
    3d86:	ee 0f       	add	r30, r30
    3d88:	97 95       	ror	r25
    3d8a:	87 95       	ror	r24
    3d8c:	08 95       	ret

00003d8e <__divsf3>:
    3d8e:	0c d0       	rcall	.+24     	; 0x3da8 <__divsf3x>
    3d90:	0a c1       	rjmp	.+532    	; 0x3fa6 <__fp_round>
    3d92:	02 d1       	rcall	.+516    	; 0x3f98 <__fp_pscB>
    3d94:	40 f0       	brcs	.+16     	; 0x3da6 <__divsf3+0x18>
    3d96:	f9 d0       	rcall	.+498    	; 0x3f8a <__fp_pscA>
    3d98:	30 f0       	brcs	.+12     	; 0x3da6 <__divsf3+0x18>
    3d9a:	21 f4       	brne	.+8      	; 0x3da4 <__divsf3+0x16>
    3d9c:	5f 3f       	cpi	r21, 0xFF	; 255
    3d9e:	19 f0       	breq	.+6      	; 0x3da6 <__divsf3+0x18>
    3da0:	eb c0       	rjmp	.+470    	; 0x3f78 <__fp_inf>
    3da2:	51 11       	cpse	r21, r1
    3da4:	34 c1       	rjmp	.+616    	; 0x400e <__fp_szero>
    3da6:	ee c0       	rjmp	.+476    	; 0x3f84 <__fp_nan>

00003da8 <__divsf3x>:
    3da8:	0f d1       	rcall	.+542    	; 0x3fc8 <__fp_split3>
    3daa:	98 f3       	brcs	.-26     	; 0x3d92 <__divsf3+0x4>

00003dac <__divsf3_pse>:
    3dac:	99 23       	and	r25, r25
    3dae:	c9 f3       	breq	.-14     	; 0x3da2 <__divsf3+0x14>
    3db0:	55 23       	and	r21, r21
    3db2:	b1 f3       	breq	.-20     	; 0x3da0 <__divsf3+0x12>
    3db4:	95 1b       	sub	r25, r21
    3db6:	55 0b       	sbc	r21, r21
    3db8:	bb 27       	eor	r27, r27
    3dba:	aa 27       	eor	r26, r26
    3dbc:	62 17       	cp	r22, r18
    3dbe:	73 07       	cpc	r23, r19
    3dc0:	84 07       	cpc	r24, r20
    3dc2:	38 f0       	brcs	.+14     	; 0x3dd2 <__divsf3_pse+0x26>
    3dc4:	9f 5f       	subi	r25, 0xFF	; 255
    3dc6:	5f 4f       	sbci	r21, 0xFF	; 255
    3dc8:	22 0f       	add	r18, r18
    3dca:	33 1f       	adc	r19, r19
    3dcc:	44 1f       	adc	r20, r20
    3dce:	aa 1f       	adc	r26, r26
    3dd0:	a9 f3       	breq	.-22     	; 0x3dbc <__divsf3_pse+0x10>
    3dd2:	33 d0       	rcall	.+102    	; 0x3e3a <__divsf3_pse+0x8e>
    3dd4:	0e 2e       	mov	r0, r30
    3dd6:	3a f0       	brmi	.+14     	; 0x3de6 <__divsf3_pse+0x3a>
    3dd8:	e0 e8       	ldi	r30, 0x80	; 128
    3dda:	30 d0       	rcall	.+96     	; 0x3e3c <__divsf3_pse+0x90>
    3ddc:	91 50       	subi	r25, 0x01	; 1
    3dde:	50 40       	sbci	r21, 0x00	; 0
    3de0:	e6 95       	lsr	r30
    3de2:	00 1c       	adc	r0, r0
    3de4:	ca f7       	brpl	.-14     	; 0x3dd8 <__divsf3_pse+0x2c>
    3de6:	29 d0       	rcall	.+82     	; 0x3e3a <__divsf3_pse+0x8e>
    3de8:	fe 2f       	mov	r31, r30
    3dea:	27 d0       	rcall	.+78     	; 0x3e3a <__divsf3_pse+0x8e>
    3dec:	66 0f       	add	r22, r22
    3dee:	77 1f       	adc	r23, r23
    3df0:	88 1f       	adc	r24, r24
    3df2:	bb 1f       	adc	r27, r27
    3df4:	26 17       	cp	r18, r22
    3df6:	37 07       	cpc	r19, r23
    3df8:	48 07       	cpc	r20, r24
    3dfa:	ab 07       	cpc	r26, r27
    3dfc:	b0 e8       	ldi	r27, 0x80	; 128
    3dfe:	09 f0       	breq	.+2      	; 0x3e02 <__divsf3_pse+0x56>
    3e00:	bb 0b       	sbc	r27, r27
    3e02:	80 2d       	mov	r24, r0
    3e04:	bf 01       	movw	r22, r30
    3e06:	ff 27       	eor	r31, r31
    3e08:	93 58       	subi	r25, 0x83	; 131
    3e0a:	5f 4f       	sbci	r21, 0xFF	; 255
    3e0c:	2a f0       	brmi	.+10     	; 0x3e18 <__divsf3_pse+0x6c>
    3e0e:	9e 3f       	cpi	r25, 0xFE	; 254
    3e10:	51 05       	cpc	r21, r1
    3e12:	68 f0       	brcs	.+26     	; 0x3e2e <__divsf3_pse+0x82>
    3e14:	b1 c0       	rjmp	.+354    	; 0x3f78 <__fp_inf>
    3e16:	fb c0       	rjmp	.+502    	; 0x400e <__fp_szero>
    3e18:	5f 3f       	cpi	r21, 0xFF	; 255
    3e1a:	ec f3       	brlt	.-6      	; 0x3e16 <__divsf3_pse+0x6a>
    3e1c:	98 3e       	cpi	r25, 0xE8	; 232
    3e1e:	dc f3       	brlt	.-10     	; 0x3e16 <__divsf3_pse+0x6a>
    3e20:	86 95       	lsr	r24
    3e22:	77 95       	ror	r23
    3e24:	67 95       	ror	r22
    3e26:	b7 95       	ror	r27
    3e28:	f7 95       	ror	r31
    3e2a:	9f 5f       	subi	r25, 0xFF	; 255
    3e2c:	c9 f7       	brne	.-14     	; 0x3e20 <__divsf3_pse+0x74>
    3e2e:	88 0f       	add	r24, r24
    3e30:	91 1d       	adc	r25, r1
    3e32:	96 95       	lsr	r25
    3e34:	87 95       	ror	r24
    3e36:	97 f9       	bld	r25, 7
    3e38:	08 95       	ret
    3e3a:	e1 e0       	ldi	r30, 0x01	; 1
    3e3c:	66 0f       	add	r22, r22
    3e3e:	77 1f       	adc	r23, r23
    3e40:	88 1f       	adc	r24, r24
    3e42:	bb 1f       	adc	r27, r27
    3e44:	62 17       	cp	r22, r18
    3e46:	73 07       	cpc	r23, r19
    3e48:	84 07       	cpc	r24, r20
    3e4a:	ba 07       	cpc	r27, r26
    3e4c:	20 f0       	brcs	.+8      	; 0x3e56 <__divsf3_pse+0xaa>
    3e4e:	62 1b       	sub	r22, r18
    3e50:	73 0b       	sbc	r23, r19
    3e52:	84 0b       	sbc	r24, r20
    3e54:	ba 0b       	sbc	r27, r26
    3e56:	ee 1f       	adc	r30, r30
    3e58:	88 f7       	brcc	.-30     	; 0x3e3c <__divsf3_pse+0x90>
    3e5a:	e0 95       	com	r30
    3e5c:	08 95       	ret

00003e5e <__fixsfsi>:
    3e5e:	04 d0       	rcall	.+8      	; 0x3e68 <__fixunssfsi>
    3e60:	68 94       	set
    3e62:	b1 11       	cpse	r27, r1
    3e64:	d4 c0       	rjmp	.+424    	; 0x400e <__fp_szero>
    3e66:	08 95       	ret

00003e68 <__fixunssfsi>:
    3e68:	b7 d0       	rcall	.+366    	; 0x3fd8 <__fp_splitA>
    3e6a:	88 f0       	brcs	.+34     	; 0x3e8e <__fixunssfsi+0x26>
    3e6c:	9f 57       	subi	r25, 0x7F	; 127
    3e6e:	90 f0       	brcs	.+36     	; 0x3e94 <__fixunssfsi+0x2c>
    3e70:	b9 2f       	mov	r27, r25
    3e72:	99 27       	eor	r25, r25
    3e74:	b7 51       	subi	r27, 0x17	; 23
    3e76:	a0 f0       	brcs	.+40     	; 0x3ea0 <__fixunssfsi+0x38>
    3e78:	d1 f0       	breq	.+52     	; 0x3eae <__fixunssfsi+0x46>
    3e7a:	66 0f       	add	r22, r22
    3e7c:	77 1f       	adc	r23, r23
    3e7e:	88 1f       	adc	r24, r24
    3e80:	99 1f       	adc	r25, r25
    3e82:	1a f0       	brmi	.+6      	; 0x3e8a <__fixunssfsi+0x22>
    3e84:	ba 95       	dec	r27
    3e86:	c9 f7       	brne	.-14     	; 0x3e7a <__fixunssfsi+0x12>
    3e88:	12 c0       	rjmp	.+36     	; 0x3eae <__fixunssfsi+0x46>
    3e8a:	b1 30       	cpi	r27, 0x01	; 1
    3e8c:	81 f0       	breq	.+32     	; 0x3eae <__fixunssfsi+0x46>
    3e8e:	be d0       	rcall	.+380    	; 0x400c <__fp_zero>
    3e90:	b1 e0       	ldi	r27, 0x01	; 1
    3e92:	08 95       	ret
    3e94:	bb c0       	rjmp	.+374    	; 0x400c <__fp_zero>
    3e96:	67 2f       	mov	r22, r23
    3e98:	78 2f       	mov	r23, r24
    3e9a:	88 27       	eor	r24, r24
    3e9c:	b8 5f       	subi	r27, 0xF8	; 248
    3e9e:	39 f0       	breq	.+14     	; 0x3eae <__fixunssfsi+0x46>
    3ea0:	b9 3f       	cpi	r27, 0xF9	; 249
    3ea2:	cc f3       	brlt	.-14     	; 0x3e96 <__fixunssfsi+0x2e>
    3ea4:	86 95       	lsr	r24
    3ea6:	77 95       	ror	r23
    3ea8:	67 95       	ror	r22
    3eaa:	b3 95       	inc	r27
    3eac:	d9 f7       	brne	.-10     	; 0x3ea4 <__fixunssfsi+0x3c>
    3eae:	3e f4       	brtc	.+14     	; 0x3ebe <__fixunssfsi+0x56>
    3eb0:	90 95       	com	r25
    3eb2:	80 95       	com	r24
    3eb4:	70 95       	com	r23
    3eb6:	61 95       	neg	r22
    3eb8:	7f 4f       	sbci	r23, 0xFF	; 255
    3eba:	8f 4f       	sbci	r24, 0xFF	; 255
    3ebc:	9f 4f       	sbci	r25, 0xFF	; 255
    3ebe:	08 95       	ret

00003ec0 <__floatunsisf>:
    3ec0:	e8 94       	clt
    3ec2:	09 c0       	rjmp	.+18     	; 0x3ed6 <__floatsisf+0x12>

00003ec4 <__floatsisf>:
    3ec4:	97 fb       	bst	r25, 7
    3ec6:	3e f4       	brtc	.+14     	; 0x3ed6 <__floatsisf+0x12>
    3ec8:	90 95       	com	r25
    3eca:	80 95       	com	r24
    3ecc:	70 95       	com	r23
    3ece:	61 95       	neg	r22
    3ed0:	7f 4f       	sbci	r23, 0xFF	; 255
    3ed2:	8f 4f       	sbci	r24, 0xFF	; 255
    3ed4:	9f 4f       	sbci	r25, 0xFF	; 255
    3ed6:	99 23       	and	r25, r25
    3ed8:	a9 f0       	breq	.+42     	; 0x3f04 <__floatsisf+0x40>
    3eda:	f9 2f       	mov	r31, r25
    3edc:	96 e9       	ldi	r25, 0x96	; 150
    3ede:	bb 27       	eor	r27, r27
    3ee0:	93 95       	inc	r25
    3ee2:	f6 95       	lsr	r31
    3ee4:	87 95       	ror	r24
    3ee6:	77 95       	ror	r23
    3ee8:	67 95       	ror	r22
    3eea:	b7 95       	ror	r27
    3eec:	f1 11       	cpse	r31, r1
    3eee:	f8 cf       	rjmp	.-16     	; 0x3ee0 <__floatsisf+0x1c>
    3ef0:	fa f4       	brpl	.+62     	; 0x3f30 <__floatsisf+0x6c>
    3ef2:	bb 0f       	add	r27, r27
    3ef4:	11 f4       	brne	.+4      	; 0x3efa <__floatsisf+0x36>
    3ef6:	60 ff       	sbrs	r22, 0
    3ef8:	1b c0       	rjmp	.+54     	; 0x3f30 <__floatsisf+0x6c>
    3efa:	6f 5f       	subi	r22, 0xFF	; 255
    3efc:	7f 4f       	sbci	r23, 0xFF	; 255
    3efe:	8f 4f       	sbci	r24, 0xFF	; 255
    3f00:	9f 4f       	sbci	r25, 0xFF	; 255
    3f02:	16 c0       	rjmp	.+44     	; 0x3f30 <__floatsisf+0x6c>
    3f04:	88 23       	and	r24, r24
    3f06:	11 f0       	breq	.+4      	; 0x3f0c <__floatsisf+0x48>
    3f08:	96 e9       	ldi	r25, 0x96	; 150
    3f0a:	11 c0       	rjmp	.+34     	; 0x3f2e <__floatsisf+0x6a>
    3f0c:	77 23       	and	r23, r23
    3f0e:	21 f0       	breq	.+8      	; 0x3f18 <__floatsisf+0x54>
    3f10:	9e e8       	ldi	r25, 0x8E	; 142
    3f12:	87 2f       	mov	r24, r23
    3f14:	76 2f       	mov	r23, r22
    3f16:	05 c0       	rjmp	.+10     	; 0x3f22 <__floatsisf+0x5e>
    3f18:	66 23       	and	r22, r22
    3f1a:	71 f0       	breq	.+28     	; 0x3f38 <__floatsisf+0x74>
    3f1c:	96 e8       	ldi	r25, 0x86	; 134
    3f1e:	86 2f       	mov	r24, r22
    3f20:	70 e0       	ldi	r23, 0x00	; 0
    3f22:	60 e0       	ldi	r22, 0x00	; 0
    3f24:	2a f0       	brmi	.+10     	; 0x3f30 <__floatsisf+0x6c>
    3f26:	9a 95       	dec	r25
    3f28:	66 0f       	add	r22, r22
    3f2a:	77 1f       	adc	r23, r23
    3f2c:	88 1f       	adc	r24, r24
    3f2e:	da f7       	brpl	.-10     	; 0x3f26 <__floatsisf+0x62>
    3f30:	88 0f       	add	r24, r24
    3f32:	96 95       	lsr	r25
    3f34:	87 95       	ror	r24
    3f36:	97 f9       	bld	r25, 7
    3f38:	08 95       	ret

00003f3a <fmax>:
    3f3a:	99 0f       	add	r25, r25
    3f3c:	bb 0b       	sbc	r27, r27
    3f3e:	55 0f       	add	r21, r21
    3f40:	aa 0b       	sbc	r26, r26
    3f42:	e0 e8       	ldi	r30, 0x80	; 128
    3f44:	fe ef       	ldi	r31, 0xFE	; 254
    3f46:	16 16       	cp	r1, r22
    3f48:	17 06       	cpc	r1, r23
    3f4a:	e8 07       	cpc	r30, r24
    3f4c:	f9 07       	cpc	r31, r25
    3f4e:	70 f0       	brcs	.+28     	; 0x3f6c <fmax+0x32>
    3f50:	12 16       	cp	r1, r18
    3f52:	13 06       	cpc	r1, r19
    3f54:	e4 07       	cpc	r30, r20
    3f56:	f5 07       	cpc	r31, r21
    3f58:	60 f0       	brcs	.+24     	; 0x3f72 <fmax+0x38>
    3f5a:	ba 17       	cp	r27, r26
    3f5c:	3c f0       	brlt	.+14     	; 0x3f6c <fmax+0x32>
    3f5e:	49 f4       	brne	.+18     	; 0x3f72 <fmax+0x38>
    3f60:	62 17       	cp	r22, r18
    3f62:	73 07       	cpc	r23, r19
    3f64:	84 07       	cpc	r24, r20
    3f66:	95 07       	cpc	r25, r21
    3f68:	a7 95       	ror	r26
    3f6a:	1b f4       	brvc	.+6      	; 0x3f72 <fmax+0x38>
    3f6c:	b9 01       	movw	r22, r18
    3f6e:	ca 01       	movw	r24, r20
    3f70:	ba 2f       	mov	r27, r26
    3f72:	b6 95       	lsr	r27
    3f74:	97 95       	ror	r25
    3f76:	08 95       	ret

00003f78 <__fp_inf>:
    3f78:	97 f9       	bld	r25, 7
    3f7a:	9f 67       	ori	r25, 0x7F	; 127
    3f7c:	80 e8       	ldi	r24, 0x80	; 128
    3f7e:	70 e0       	ldi	r23, 0x00	; 0
    3f80:	60 e0       	ldi	r22, 0x00	; 0
    3f82:	08 95       	ret

00003f84 <__fp_nan>:
    3f84:	9f ef       	ldi	r25, 0xFF	; 255
    3f86:	80 ec       	ldi	r24, 0xC0	; 192
    3f88:	08 95       	ret

00003f8a <__fp_pscA>:
    3f8a:	00 24       	eor	r0, r0
    3f8c:	0a 94       	dec	r0
    3f8e:	16 16       	cp	r1, r22
    3f90:	17 06       	cpc	r1, r23
    3f92:	18 06       	cpc	r1, r24
    3f94:	09 06       	cpc	r0, r25
    3f96:	08 95       	ret

00003f98 <__fp_pscB>:
    3f98:	00 24       	eor	r0, r0
    3f9a:	0a 94       	dec	r0
    3f9c:	12 16       	cp	r1, r18
    3f9e:	13 06       	cpc	r1, r19
    3fa0:	14 06       	cpc	r1, r20
    3fa2:	05 06       	cpc	r0, r21
    3fa4:	08 95       	ret

00003fa6 <__fp_round>:
    3fa6:	09 2e       	mov	r0, r25
    3fa8:	03 94       	inc	r0
    3faa:	00 0c       	add	r0, r0
    3fac:	11 f4       	brne	.+4      	; 0x3fb2 <__fp_round+0xc>
    3fae:	88 23       	and	r24, r24
    3fb0:	52 f0       	brmi	.+20     	; 0x3fc6 <__fp_round+0x20>
    3fb2:	bb 0f       	add	r27, r27
    3fb4:	40 f4       	brcc	.+16     	; 0x3fc6 <__fp_round+0x20>
    3fb6:	bf 2b       	or	r27, r31
    3fb8:	11 f4       	brne	.+4      	; 0x3fbe <__fp_round+0x18>
    3fba:	60 ff       	sbrs	r22, 0
    3fbc:	04 c0       	rjmp	.+8      	; 0x3fc6 <__fp_round+0x20>
    3fbe:	6f 5f       	subi	r22, 0xFF	; 255
    3fc0:	7f 4f       	sbci	r23, 0xFF	; 255
    3fc2:	8f 4f       	sbci	r24, 0xFF	; 255
    3fc4:	9f 4f       	sbci	r25, 0xFF	; 255
    3fc6:	08 95       	ret

00003fc8 <__fp_split3>:
    3fc8:	57 fd       	sbrc	r21, 7
    3fca:	90 58       	subi	r25, 0x80	; 128
    3fcc:	44 0f       	add	r20, r20
    3fce:	55 1f       	adc	r21, r21
    3fd0:	59 f0       	breq	.+22     	; 0x3fe8 <__fp_splitA+0x10>
    3fd2:	5f 3f       	cpi	r21, 0xFF	; 255
    3fd4:	71 f0       	breq	.+28     	; 0x3ff2 <__fp_splitA+0x1a>
    3fd6:	47 95       	ror	r20

00003fd8 <__fp_splitA>:
    3fd8:	88 0f       	add	r24, r24
    3fda:	97 fb       	bst	r25, 7
    3fdc:	99 1f       	adc	r25, r25
    3fde:	61 f0       	breq	.+24     	; 0x3ff8 <__fp_splitA+0x20>
    3fe0:	9f 3f       	cpi	r25, 0xFF	; 255
    3fe2:	79 f0       	breq	.+30     	; 0x4002 <__fp_splitA+0x2a>
    3fe4:	87 95       	ror	r24
    3fe6:	08 95       	ret
    3fe8:	12 16       	cp	r1, r18
    3fea:	13 06       	cpc	r1, r19
    3fec:	14 06       	cpc	r1, r20
    3fee:	55 1f       	adc	r21, r21
    3ff0:	f2 cf       	rjmp	.-28     	; 0x3fd6 <__fp_split3+0xe>
    3ff2:	46 95       	lsr	r20
    3ff4:	f1 df       	rcall	.-30     	; 0x3fd8 <__fp_splitA>
    3ff6:	08 c0       	rjmp	.+16     	; 0x4008 <__fp_splitA+0x30>
    3ff8:	16 16       	cp	r1, r22
    3ffa:	17 06       	cpc	r1, r23
    3ffc:	18 06       	cpc	r1, r24
    3ffe:	99 1f       	adc	r25, r25
    4000:	f1 cf       	rjmp	.-30     	; 0x3fe4 <__fp_splitA+0xc>
    4002:	86 95       	lsr	r24
    4004:	71 05       	cpc	r23, r1
    4006:	61 05       	cpc	r22, r1
    4008:	08 94       	sec
    400a:	08 95       	ret

0000400c <__fp_zero>:
    400c:	e8 94       	clt

0000400e <__fp_szero>:
    400e:	bb 27       	eor	r27, r27
    4010:	66 27       	eor	r22, r22
    4012:	77 27       	eor	r23, r23
    4014:	cb 01       	movw	r24, r22
    4016:	97 f9       	bld	r25, 7
    4018:	08 95       	ret

0000401a <__mulsf3>:
    401a:	0b d0       	rcall	.+22     	; 0x4032 <__mulsf3x>
    401c:	c4 cf       	rjmp	.-120    	; 0x3fa6 <__fp_round>
    401e:	b5 df       	rcall	.-150    	; 0x3f8a <__fp_pscA>
    4020:	28 f0       	brcs	.+10     	; 0x402c <__mulsf3+0x12>
    4022:	ba df       	rcall	.-140    	; 0x3f98 <__fp_pscB>
    4024:	18 f0       	brcs	.+6      	; 0x402c <__mulsf3+0x12>
    4026:	95 23       	and	r25, r21
    4028:	09 f0       	breq	.+2      	; 0x402c <__mulsf3+0x12>
    402a:	a6 cf       	rjmp	.-180    	; 0x3f78 <__fp_inf>
    402c:	ab cf       	rjmp	.-170    	; 0x3f84 <__fp_nan>
    402e:	11 24       	eor	r1, r1
    4030:	ee cf       	rjmp	.-36     	; 0x400e <__fp_szero>

00004032 <__mulsf3x>:
    4032:	ca df       	rcall	.-108    	; 0x3fc8 <__fp_split3>
    4034:	a0 f3       	brcs	.-24     	; 0x401e <__mulsf3+0x4>

00004036 <__mulsf3_pse>:
    4036:	95 9f       	mul	r25, r21
    4038:	d1 f3       	breq	.-12     	; 0x402e <__mulsf3+0x14>
    403a:	95 0f       	add	r25, r21
    403c:	50 e0       	ldi	r21, 0x00	; 0
    403e:	55 1f       	adc	r21, r21
    4040:	62 9f       	mul	r22, r18
    4042:	f0 01       	movw	r30, r0
    4044:	72 9f       	mul	r23, r18
    4046:	bb 27       	eor	r27, r27
    4048:	f0 0d       	add	r31, r0
    404a:	b1 1d       	adc	r27, r1
    404c:	63 9f       	mul	r22, r19
    404e:	aa 27       	eor	r26, r26
    4050:	f0 0d       	add	r31, r0
    4052:	b1 1d       	adc	r27, r1
    4054:	aa 1f       	adc	r26, r26
    4056:	64 9f       	mul	r22, r20
    4058:	66 27       	eor	r22, r22
    405a:	b0 0d       	add	r27, r0
    405c:	a1 1d       	adc	r26, r1
    405e:	66 1f       	adc	r22, r22
    4060:	82 9f       	mul	r24, r18
    4062:	22 27       	eor	r18, r18
    4064:	b0 0d       	add	r27, r0
    4066:	a1 1d       	adc	r26, r1
    4068:	62 1f       	adc	r22, r18
    406a:	73 9f       	mul	r23, r19
    406c:	b0 0d       	add	r27, r0
    406e:	a1 1d       	adc	r26, r1
    4070:	62 1f       	adc	r22, r18
    4072:	83 9f       	mul	r24, r19
    4074:	a0 0d       	add	r26, r0
    4076:	61 1d       	adc	r22, r1
    4078:	22 1f       	adc	r18, r18
    407a:	74 9f       	mul	r23, r20
    407c:	33 27       	eor	r19, r19
    407e:	a0 0d       	add	r26, r0
    4080:	61 1d       	adc	r22, r1
    4082:	23 1f       	adc	r18, r19
    4084:	84 9f       	mul	r24, r20
    4086:	60 0d       	add	r22, r0
    4088:	21 1d       	adc	r18, r1
    408a:	82 2f       	mov	r24, r18
    408c:	76 2f       	mov	r23, r22
    408e:	6a 2f       	mov	r22, r26
    4090:	11 24       	eor	r1, r1
    4092:	9f 57       	subi	r25, 0x7F	; 127
    4094:	50 40       	sbci	r21, 0x00	; 0
    4096:	8a f0       	brmi	.+34     	; 0x40ba <__mulsf3_pse+0x84>
    4098:	e1 f0       	breq	.+56     	; 0x40d2 <__mulsf3_pse+0x9c>
    409a:	88 23       	and	r24, r24
    409c:	4a f0       	brmi	.+18     	; 0x40b0 <__mulsf3_pse+0x7a>
    409e:	ee 0f       	add	r30, r30
    40a0:	ff 1f       	adc	r31, r31
    40a2:	bb 1f       	adc	r27, r27
    40a4:	66 1f       	adc	r22, r22
    40a6:	77 1f       	adc	r23, r23
    40a8:	88 1f       	adc	r24, r24
    40aa:	91 50       	subi	r25, 0x01	; 1
    40ac:	50 40       	sbci	r21, 0x00	; 0
    40ae:	a9 f7       	brne	.-22     	; 0x409a <__mulsf3_pse+0x64>
    40b0:	9e 3f       	cpi	r25, 0xFE	; 254
    40b2:	51 05       	cpc	r21, r1
    40b4:	70 f0       	brcs	.+28     	; 0x40d2 <__mulsf3_pse+0x9c>
    40b6:	60 cf       	rjmp	.-320    	; 0x3f78 <__fp_inf>
    40b8:	aa cf       	rjmp	.-172    	; 0x400e <__fp_szero>
    40ba:	5f 3f       	cpi	r21, 0xFF	; 255
    40bc:	ec f3       	brlt	.-6      	; 0x40b8 <__mulsf3_pse+0x82>
    40be:	98 3e       	cpi	r25, 0xE8	; 232
    40c0:	dc f3       	brlt	.-10     	; 0x40b8 <__mulsf3_pse+0x82>
    40c2:	86 95       	lsr	r24
    40c4:	77 95       	ror	r23
    40c6:	67 95       	ror	r22
    40c8:	b7 95       	ror	r27
    40ca:	f7 95       	ror	r31
    40cc:	e7 95       	ror	r30
    40ce:	9f 5f       	subi	r25, 0xFF	; 255
    40d0:	c1 f7       	brne	.-16     	; 0x40c2 <__mulsf3_pse+0x8c>
    40d2:	fe 2b       	or	r31, r30
    40d4:	88 0f       	add	r24, r24
    40d6:	91 1d       	adc	r25, r1
    40d8:	96 95       	lsr	r25
    40da:	87 95       	ror	r24
    40dc:	97 f9       	bld	r25, 7
    40de:	08 95       	ret

000040e0 <round>:
    40e0:	7b df       	rcall	.-266    	; 0x3fd8 <__fp_splitA>
    40e2:	e0 f0       	brcs	.+56     	; 0x411c <round+0x3c>
    40e4:	9e 37       	cpi	r25, 0x7E	; 126
    40e6:	d8 f0       	brcs	.+54     	; 0x411e <round+0x3e>
    40e8:	96 39       	cpi	r25, 0x96	; 150
    40ea:	b8 f4       	brcc	.+46     	; 0x411a <round+0x3a>
    40ec:	9e 38       	cpi	r25, 0x8E	; 142
    40ee:	48 f4       	brcc	.+18     	; 0x4102 <round+0x22>
    40f0:	67 2f       	mov	r22, r23
    40f2:	78 2f       	mov	r23, r24
    40f4:	88 27       	eor	r24, r24
    40f6:	98 5f       	subi	r25, 0xF8	; 248
    40f8:	f9 cf       	rjmp	.-14     	; 0x40ec <round+0xc>
    40fa:	86 95       	lsr	r24
    40fc:	77 95       	ror	r23
    40fe:	67 95       	ror	r22
    4100:	93 95       	inc	r25
    4102:	95 39       	cpi	r25, 0x95	; 149
    4104:	d0 f3       	brcs	.-12     	; 0x40fa <round+0x1a>
    4106:	b6 2f       	mov	r27, r22
    4108:	b1 70       	andi	r27, 0x01	; 1
    410a:	6b 0f       	add	r22, r27
    410c:	71 1d       	adc	r23, r1
    410e:	81 1d       	adc	r24, r1
    4110:	20 f4       	brcc	.+8      	; 0x411a <round+0x3a>
    4112:	87 95       	ror	r24
    4114:	77 95       	ror	r23
    4116:	67 95       	ror	r22
    4118:	93 95       	inc	r25
    411a:	02 c0       	rjmp	.+4      	; 0x4120 <__fp_mintl>
    411c:	1c c0       	rjmp	.+56     	; 0x4156 <__fp_mpack>
    411e:	77 cf       	rjmp	.-274    	; 0x400e <__fp_szero>

00004120 <__fp_mintl>:
    4120:	88 23       	and	r24, r24
    4122:	71 f4       	brne	.+28     	; 0x4140 <__fp_mintl+0x20>
    4124:	77 23       	and	r23, r23
    4126:	21 f0       	breq	.+8      	; 0x4130 <__fp_mintl+0x10>
    4128:	98 50       	subi	r25, 0x08	; 8
    412a:	87 2b       	or	r24, r23
    412c:	76 2f       	mov	r23, r22
    412e:	07 c0       	rjmp	.+14     	; 0x413e <__fp_mintl+0x1e>
    4130:	66 23       	and	r22, r22
    4132:	11 f4       	brne	.+4      	; 0x4138 <__fp_mintl+0x18>
    4134:	99 27       	eor	r25, r25
    4136:	0d c0       	rjmp	.+26     	; 0x4152 <__fp_mintl+0x32>
    4138:	90 51       	subi	r25, 0x10	; 16
    413a:	86 2b       	or	r24, r22
    413c:	70 e0       	ldi	r23, 0x00	; 0
    413e:	60 e0       	ldi	r22, 0x00	; 0
    4140:	2a f0       	brmi	.+10     	; 0x414c <__fp_mintl+0x2c>
    4142:	9a 95       	dec	r25
    4144:	66 0f       	add	r22, r22
    4146:	77 1f       	adc	r23, r23
    4148:	88 1f       	adc	r24, r24
    414a:	da f7       	brpl	.-10     	; 0x4142 <__fp_mintl+0x22>
    414c:	88 0f       	add	r24, r24
    414e:	96 95       	lsr	r25
    4150:	87 95       	ror	r24
    4152:	97 f9       	bld	r25, 7
    4154:	08 95       	ret

00004156 <__fp_mpack>:
    4156:	9f 3f       	cpi	r25, 0xFF	; 255
    4158:	31 f0       	breq	.+12     	; 0x4166 <__fp_mpack_finite+0xc>

0000415a <__fp_mpack_finite>:
    415a:	91 50       	subi	r25, 0x01	; 1
    415c:	20 f4       	brcc	.+8      	; 0x4166 <__fp_mpack_finite+0xc>
    415e:	87 95       	ror	r24
    4160:	77 95       	ror	r23
    4162:	67 95       	ror	r22
    4164:	b7 95       	ror	r27
    4166:	88 0f       	add	r24, r24
    4168:	91 1d       	adc	r25, r1
    416a:	96 95       	lsr	r25
    416c:	87 95       	ror	r24
    416e:	97 f9       	bld	r25, 7
    4170:	08 95       	ret

00004172 <__muluhisi3>:
    4172:	0e 94 12 21 	call	0x4224	; 0x4224 <__umulhisi3>
    4176:	a5 9f       	mul	r26, r21
    4178:	90 0d       	add	r25, r0
    417a:	b4 9f       	mul	r27, r20
    417c:	90 0d       	add	r25, r0
    417e:	a4 9f       	mul	r26, r20
    4180:	80 0d       	add	r24, r0
    4182:	91 1d       	adc	r25, r1
    4184:	11 24       	eor	r1, r1
    4186:	08 95       	ret

00004188 <__udivmodqi4>:
    4188:	99 1b       	sub	r25, r25
    418a:	79 e0       	ldi	r23, 0x09	; 9
    418c:	04 c0       	rjmp	.+8      	; 0x4196 <__udivmodqi4_ep>

0000418e <__udivmodqi4_loop>:
    418e:	99 1f       	adc	r25, r25
    4190:	96 17       	cp	r25, r22
    4192:	08 f0       	brcs	.+2      	; 0x4196 <__udivmodqi4_ep>
    4194:	96 1b       	sub	r25, r22

00004196 <__udivmodqi4_ep>:
    4196:	88 1f       	adc	r24, r24
    4198:	7a 95       	dec	r23
    419a:	c9 f7       	brne	.-14     	; 0x418e <__udivmodqi4_loop>
    419c:	80 95       	com	r24
    419e:	08 95       	ret

000041a0 <__udivmodhi4>:
    41a0:	aa 1b       	sub	r26, r26
    41a2:	bb 1b       	sub	r27, r27
    41a4:	51 e1       	ldi	r21, 0x11	; 17
    41a6:	07 c0       	rjmp	.+14     	; 0x41b6 <__udivmodhi4_ep>

000041a8 <__udivmodhi4_loop>:
    41a8:	aa 1f       	adc	r26, r26
    41aa:	bb 1f       	adc	r27, r27
    41ac:	a6 17       	cp	r26, r22
    41ae:	b7 07       	cpc	r27, r23
    41b0:	10 f0       	brcs	.+4      	; 0x41b6 <__udivmodhi4_ep>
    41b2:	a6 1b       	sub	r26, r22
    41b4:	b7 0b       	sbc	r27, r23

000041b6 <__udivmodhi4_ep>:
    41b6:	88 1f       	adc	r24, r24
    41b8:	99 1f       	adc	r25, r25
    41ba:	5a 95       	dec	r21
    41bc:	a9 f7       	brne	.-22     	; 0x41a8 <__udivmodhi4_loop>
    41be:	80 95       	com	r24
    41c0:	90 95       	com	r25
    41c2:	bc 01       	movw	r22, r24
    41c4:	cd 01       	movw	r24, r26
    41c6:	08 95       	ret

000041c8 <__udivmodsi4>:
    41c8:	a1 e2       	ldi	r26, 0x21	; 33
    41ca:	1a 2e       	mov	r1, r26
    41cc:	aa 1b       	sub	r26, r26
    41ce:	bb 1b       	sub	r27, r27
    41d0:	fd 01       	movw	r30, r26
    41d2:	0d c0       	rjmp	.+26     	; 0x41ee <__udivmodsi4_ep>

000041d4 <__udivmodsi4_loop>:
    41d4:	aa 1f       	adc	r26, r26
    41d6:	bb 1f       	adc	r27, r27
    41d8:	ee 1f       	adc	r30, r30
    41da:	ff 1f       	adc	r31, r31
    41dc:	a2 17       	cp	r26, r18
    41de:	b3 07       	cpc	r27, r19
    41e0:	e4 07       	cpc	r30, r20
    41e2:	f5 07       	cpc	r31, r21
    41e4:	20 f0       	brcs	.+8      	; 0x41ee <__udivmodsi4_ep>
    41e6:	a2 1b       	sub	r26, r18
    41e8:	b3 0b       	sbc	r27, r19
    41ea:	e4 0b       	sbc	r30, r20
    41ec:	f5 0b       	sbc	r31, r21

000041ee <__udivmodsi4_ep>:
    41ee:	66 1f       	adc	r22, r22
    41f0:	77 1f       	adc	r23, r23
    41f2:	88 1f       	adc	r24, r24
    41f4:	99 1f       	adc	r25, r25
    41f6:	1a 94       	dec	r1
    41f8:	69 f7       	brne	.-38     	; 0x41d4 <__udivmodsi4_loop>
    41fa:	60 95       	com	r22
    41fc:	70 95       	com	r23
    41fe:	80 95       	com	r24
    4200:	90 95       	com	r25
    4202:	9b 01       	movw	r18, r22
    4204:	ac 01       	movw	r20, r24
    4206:	bd 01       	movw	r22, r26
    4208:	cf 01       	movw	r24, r30
    420a:	08 95       	ret

0000420c <__cmpdi2_s8>:
    420c:	00 24       	eor	r0, r0
    420e:	a7 fd       	sbrc	r26, 7
    4210:	00 94       	com	r0
    4212:	2a 17       	cp	r18, r26
    4214:	30 05       	cpc	r19, r0
    4216:	40 05       	cpc	r20, r0
    4218:	50 05       	cpc	r21, r0
    421a:	60 05       	cpc	r22, r0
    421c:	70 05       	cpc	r23, r0
    421e:	80 05       	cpc	r24, r0
    4220:	90 05       	cpc	r25, r0
    4222:	08 95       	ret

00004224 <__umulhisi3>:
    4224:	a2 9f       	mul	r26, r18
    4226:	b0 01       	movw	r22, r0
    4228:	b3 9f       	mul	r27, r19
    422a:	c0 01       	movw	r24, r0
    422c:	a3 9f       	mul	r26, r19
    422e:	01 d0       	rcall	.+2      	; 0x4232 <__umulhisi3+0xe>
    4230:	b2 9f       	mul	r27, r18
    4232:	70 0d       	add	r23, r0
    4234:	81 1d       	adc	r24, r1
    4236:	11 24       	eor	r1, r1
    4238:	91 1d       	adc	r25, r1
    423a:	08 95       	ret

0000423c <calloc>:
    423c:	0f 93       	push	r16
    423e:	1f 93       	push	r17
    4240:	cf 93       	push	r28
    4242:	df 93       	push	r29
    4244:	68 9f       	mul	r22, r24
    4246:	80 01       	movw	r16, r0
    4248:	69 9f       	mul	r22, r25
    424a:	10 0d       	add	r17, r0
    424c:	78 9f       	mul	r23, r24
    424e:	10 0d       	add	r17, r0
    4250:	11 24       	eor	r1, r1
    4252:	c8 01       	movw	r24, r16
    4254:	0e 94 3c 21 	call	0x4278	; 0x4278 <malloc>
    4258:	c8 2f       	mov	r28, r24
    425a:	d9 2f       	mov	r29, r25
    425c:	20 97       	sbiw	r28, 0x00	; 0
    425e:	31 f0       	breq	.+12     	; 0x426c <calloc+0x30>
    4260:	a8 01       	movw	r20, r16
    4262:	60 e0       	ldi	r22, 0x00	; 0
    4264:	70 e0       	ldi	r23, 0x00	; 0
    4266:	8c 2f       	mov	r24, r28
    4268:	0e 94 83 22 	call	0x4506	; 0x4506 <memset>
    426c:	ce 01       	movw	r24, r28
    426e:	df 91       	pop	r29
    4270:	cf 91       	pop	r28
    4272:	1f 91       	pop	r17
    4274:	0f 91       	pop	r16
    4276:	08 95       	ret

00004278 <malloc>:
    4278:	0f 93       	push	r16
    427a:	1f 93       	push	r17
    427c:	cf 93       	push	r28
    427e:	df 93       	push	r29
    4280:	82 30       	cpi	r24, 0x02	; 2
    4282:	91 05       	cpc	r25, r1
    4284:	10 f4       	brcc	.+4      	; 0x428a <malloc+0x12>
    4286:	82 e0       	ldi	r24, 0x02	; 2
    4288:	90 e0       	ldi	r25, 0x00	; 0
    428a:	e0 91 e8 25 	lds	r30, 0x25E8
    428e:	f0 91 e9 25 	lds	r31, 0x25E9
    4292:	20 e0       	ldi	r18, 0x00	; 0
    4294:	30 e0       	ldi	r19, 0x00	; 0
    4296:	c0 e0       	ldi	r28, 0x00	; 0
    4298:	d0 e0       	ldi	r29, 0x00	; 0
    429a:	23 c0       	rjmp	.+70     	; 0x42e2 <malloc+0x6a>
    429c:	40 81       	ld	r20, Z
    429e:	51 81       	ldd	r21, Z+1	; 0x01
    42a0:	48 17       	cp	r20, r24
    42a2:	59 07       	cpc	r21, r25
    42a4:	a8 f0       	brcs	.+42     	; 0x42d0 <malloc+0x58>
    42a6:	48 17       	cp	r20, r24
    42a8:	59 07       	cpc	r21, r25
    42aa:	61 f4       	brne	.+24     	; 0x42c4 <malloc+0x4c>
    42ac:	82 81       	ldd	r24, Z+2	; 0x02
    42ae:	93 81       	ldd	r25, Z+3	; 0x03
    42b0:	20 97       	sbiw	r28, 0x00	; 0
    42b2:	19 f0       	breq	.+6      	; 0x42ba <malloc+0x42>
    42b4:	8a 83       	std	Y+2, r24	; 0x02
    42b6:	9b 83       	std	Y+3, r25	; 0x03
    42b8:	2e c0       	rjmp	.+92     	; 0x4316 <malloc+0x9e>
    42ba:	80 93 e8 25 	sts	0x25E8, r24
    42be:	90 93 e9 25 	sts	0x25E9, r25
    42c2:	29 c0       	rjmp	.+82     	; 0x4316 <malloc+0x9e>
    42c4:	21 15       	cp	r18, r1
    42c6:	31 05       	cpc	r19, r1
    42c8:	29 f0       	breq	.+10     	; 0x42d4 <malloc+0x5c>
    42ca:	42 17       	cp	r20, r18
    42cc:	53 07       	cpc	r21, r19
    42ce:	10 f0       	brcs	.+4      	; 0x42d4 <malloc+0x5c>
    42d0:	a9 01       	movw	r20, r18
    42d2:	02 c0       	rjmp	.+4      	; 0x42d8 <malloc+0x60>
    42d4:	be 01       	movw	r22, r28
    42d6:	df 01       	movw	r26, r30
    42d8:	02 81       	ldd	r16, Z+2	; 0x02
    42da:	13 81       	ldd	r17, Z+3	; 0x03
    42dc:	ef 01       	movw	r28, r30
    42de:	9a 01       	movw	r18, r20
    42e0:	f8 01       	movw	r30, r16
    42e2:	30 97       	sbiw	r30, 0x00	; 0
    42e4:	d9 f6       	brne	.-74     	; 0x429c <malloc+0x24>
    42e6:	21 15       	cp	r18, r1
    42e8:	31 05       	cpc	r19, r1
    42ea:	09 f1       	breq	.+66     	; 0x432e <malloc+0xb6>
    42ec:	28 1b       	sub	r18, r24
    42ee:	39 0b       	sbc	r19, r25
    42f0:	24 30       	cpi	r18, 0x04	; 4
    42f2:	31 05       	cpc	r19, r1
    42f4:	90 f4       	brcc	.+36     	; 0x431a <malloc+0xa2>
    42f6:	12 96       	adiw	r26, 0x02	; 2
    42f8:	8d 91       	ld	r24, X+
    42fa:	9c 91       	ld	r25, X
    42fc:	13 97       	sbiw	r26, 0x03	; 3
    42fe:	61 15       	cp	r22, r1
    4300:	71 05       	cpc	r23, r1
    4302:	21 f0       	breq	.+8      	; 0x430c <malloc+0x94>
    4304:	fb 01       	movw	r30, r22
    4306:	82 83       	std	Z+2, r24	; 0x02
    4308:	93 83       	std	Z+3, r25	; 0x03
    430a:	04 c0       	rjmp	.+8      	; 0x4314 <malloc+0x9c>
    430c:	80 93 e8 25 	sts	0x25E8, r24
    4310:	90 93 e9 25 	sts	0x25E9, r25
    4314:	fd 01       	movw	r30, r26
    4316:	32 96       	adiw	r30, 0x02	; 2
    4318:	44 c0       	rjmp	.+136    	; 0x43a2 <malloc+0x12a>
    431a:	fd 01       	movw	r30, r26
    431c:	e2 0f       	add	r30, r18
    431e:	f3 1f       	adc	r31, r19
    4320:	81 93       	st	Z+, r24
    4322:	91 93       	st	Z+, r25
    4324:	22 50       	subi	r18, 0x02	; 2
    4326:	31 09       	sbc	r19, r1
    4328:	2d 93       	st	X+, r18
    432a:	3c 93       	st	X, r19
    432c:	3a c0       	rjmp	.+116    	; 0x43a2 <malloc+0x12a>
    432e:	20 91 e6 25 	lds	r18, 0x25E6
    4332:	30 91 e7 25 	lds	r19, 0x25E7
    4336:	23 2b       	or	r18, r19
    4338:	41 f4       	brne	.+16     	; 0x434a <malloc+0xd2>
    433a:	20 91 1f 20 	lds	r18, 0x201F
    433e:	30 91 20 20 	lds	r19, 0x2020
    4342:	20 93 e6 25 	sts	0x25E6, r18
    4346:	30 93 e7 25 	sts	0x25E7, r19
    434a:	20 91 1d 20 	lds	r18, 0x201D
    434e:	30 91 1e 20 	lds	r19, 0x201E
    4352:	21 15       	cp	r18, r1
    4354:	31 05       	cpc	r19, r1
    4356:	41 f4       	brne	.+16     	; 0x4368 <malloc+0xf0>
    4358:	2d b7       	in	r18, 0x3d	; 61
    435a:	3e b7       	in	r19, 0x3e	; 62
    435c:	40 91 21 20 	lds	r20, 0x2021
    4360:	50 91 22 20 	lds	r21, 0x2022
    4364:	24 1b       	sub	r18, r20
    4366:	35 0b       	sbc	r19, r21
    4368:	e0 91 e6 25 	lds	r30, 0x25E6
    436c:	f0 91 e7 25 	lds	r31, 0x25E7
    4370:	e2 17       	cp	r30, r18
    4372:	f3 07       	cpc	r31, r19
    4374:	a0 f4       	brcc	.+40     	; 0x439e <malloc+0x126>
    4376:	2e 1b       	sub	r18, r30
    4378:	3f 0b       	sbc	r19, r31
    437a:	28 17       	cp	r18, r24
    437c:	39 07       	cpc	r19, r25
    437e:	78 f0       	brcs	.+30     	; 0x439e <malloc+0x126>
    4380:	ac 01       	movw	r20, r24
    4382:	4e 5f       	subi	r20, 0xFE	; 254
    4384:	5f 4f       	sbci	r21, 0xFF	; 255
    4386:	24 17       	cp	r18, r20
    4388:	35 07       	cpc	r19, r21
    438a:	48 f0       	brcs	.+18     	; 0x439e <malloc+0x126>
    438c:	4e 0f       	add	r20, r30
    438e:	5f 1f       	adc	r21, r31
    4390:	40 93 e6 25 	sts	0x25E6, r20
    4394:	50 93 e7 25 	sts	0x25E7, r21
    4398:	81 93       	st	Z+, r24
    439a:	91 93       	st	Z+, r25
    439c:	02 c0       	rjmp	.+4      	; 0x43a2 <malloc+0x12a>
    439e:	e0 e0       	ldi	r30, 0x00	; 0
    43a0:	f0 e0       	ldi	r31, 0x00	; 0
    43a2:	cf 01       	movw	r24, r30
    43a4:	df 91       	pop	r29
    43a6:	cf 91       	pop	r28
    43a8:	1f 91       	pop	r17
    43aa:	0f 91       	pop	r16
    43ac:	08 95       	ret

000043ae <free>:
    43ae:	ef 92       	push	r14
    43b0:	ff 92       	push	r15
    43b2:	0f 93       	push	r16
    43b4:	1f 93       	push	r17
    43b6:	cf 93       	push	r28
    43b8:	df 93       	push	r29
    43ba:	00 97       	sbiw	r24, 0x00	; 0
    43bc:	09 f4       	brne	.+2      	; 0x43c0 <free+0x12>
    43be:	8e c0       	rjmp	.+284    	; 0x44dc <free+0x12e>
    43c0:	dc 01       	movw	r26, r24
    43c2:	12 97       	sbiw	r26, 0x02	; 2
    43c4:	12 96       	adiw	r26, 0x02	; 2
    43c6:	1d 92       	st	X+, r1
    43c8:	1c 92       	st	X, r1
    43ca:	13 97       	sbiw	r26, 0x03	; 3
    43cc:	e0 90 e8 25 	lds	r14, 0x25E8
    43d0:	f0 90 e9 25 	lds	r15, 0x25E9
    43d4:	e1 14       	cp	r14, r1
    43d6:	f1 04       	cpc	r15, r1
    43d8:	89 f4       	brne	.+34     	; 0x43fc <free+0x4e>
    43da:	2d 91       	ld	r18, X+
    43dc:	3c 91       	ld	r19, X
    43de:	11 97       	sbiw	r26, 0x01	; 1
    43e0:	28 0f       	add	r18, r24
    43e2:	39 1f       	adc	r19, r25
    43e4:	80 91 e6 25 	lds	r24, 0x25E6
    43e8:	90 91 e7 25 	lds	r25, 0x25E7
    43ec:	82 17       	cp	r24, r18
    43ee:	93 07       	cpc	r25, r19
    43f0:	89 f5       	brne	.+98     	; 0x4454 <free+0xa6>
    43f2:	a0 93 e6 25 	sts	0x25E6, r26
    43f6:	b0 93 e7 25 	sts	0x25E7, r27
    43fa:	70 c0       	rjmp	.+224    	; 0x44dc <free+0x12e>
    43fc:	e7 01       	movw	r28, r14
    43fe:	20 e0       	ldi	r18, 0x00	; 0
    4400:	30 e0       	ldi	r19, 0x00	; 0
    4402:	01 c0       	rjmp	.+2      	; 0x4406 <free+0x58>
    4404:	ea 01       	movw	r28, r20
    4406:	ca 17       	cp	r28, r26
    4408:	db 07       	cpc	r29, r27
    440a:	38 f4       	brcc	.+14     	; 0x441a <free+0x6c>
    440c:	4a 81       	ldd	r20, Y+2	; 0x02
    440e:	5b 81       	ldd	r21, Y+3	; 0x03
    4410:	9e 01       	movw	r18, r28
    4412:	41 15       	cp	r20, r1
    4414:	51 05       	cpc	r21, r1
    4416:	b1 f7       	brne	.-20     	; 0x4404 <free+0x56>
    4418:	22 c0       	rjmp	.+68     	; 0x445e <free+0xb0>
    441a:	ac 01       	movw	r20, r24
    441c:	42 50       	subi	r20, 0x02	; 2
    441e:	51 09       	sbc	r21, r1
    4420:	fa 01       	movw	r30, r20
    4422:	c2 83       	std	Z+2, r28	; 0x02
    4424:	d3 83       	std	Z+3, r29	; 0x03
    4426:	00 81       	ld	r16, Z
    4428:	11 81       	ldd	r17, Z+1	; 0x01
    442a:	bc 01       	movw	r22, r24
    442c:	60 0f       	add	r22, r16
    442e:	71 1f       	adc	r23, r17
    4430:	6c 17       	cp	r22, r28
    4432:	7d 07       	cpc	r23, r29
    4434:	61 f4       	brne	.+24     	; 0x444e <free+0xa0>
    4436:	68 81       	ld	r22, Y
    4438:	79 81       	ldd	r23, Y+1	; 0x01
    443a:	60 0f       	add	r22, r16
    443c:	71 1f       	adc	r23, r17
    443e:	6e 5f       	subi	r22, 0xFE	; 254
    4440:	7f 4f       	sbci	r23, 0xFF	; 255
    4442:	60 83       	st	Z, r22
    4444:	71 83       	std	Z+1, r23	; 0x01
    4446:	6a 81       	ldd	r22, Y+2	; 0x02
    4448:	7b 81       	ldd	r23, Y+3	; 0x03
    444a:	62 83       	std	Z+2, r22	; 0x02
    444c:	73 83       	std	Z+3, r23	; 0x03
    444e:	21 15       	cp	r18, r1
    4450:	31 05       	cpc	r19, r1
    4452:	29 f4       	brne	.+10     	; 0x445e <free+0xb0>
    4454:	a0 93 e8 25 	sts	0x25E8, r26
    4458:	b0 93 e9 25 	sts	0x25E9, r27
    445c:	3f c0       	rjmp	.+126    	; 0x44dc <free+0x12e>
    445e:	f9 01       	movw	r30, r18
    4460:	a2 83       	std	Z+2, r26	; 0x02
    4462:	b3 83       	std	Z+3, r27	; 0x03
    4464:	e9 01       	movw	r28, r18
    4466:	49 91       	ld	r20, Y+
    4468:	59 91       	ld	r21, Y+
    446a:	c4 0f       	add	r28, r20
    446c:	d5 1f       	adc	r29, r21
    446e:	ac 17       	cp	r26, r28
    4470:	bd 07       	cpc	r27, r29
    4472:	71 f4       	brne	.+28     	; 0x4490 <free+0xe2>
    4474:	dc 01       	movw	r26, r24
    4476:	9e 91       	ld	r25, -X
    4478:	8e 91       	ld	r24, -X
    447a:	84 0f       	add	r24, r20
    447c:	95 1f       	adc	r25, r21
    447e:	02 96       	adiw	r24, 0x02	; 2
    4480:	80 83       	st	Z, r24
    4482:	91 83       	std	Z+1, r25	; 0x01
    4484:	12 96       	adiw	r26, 0x02	; 2
    4486:	8d 91       	ld	r24, X+
    4488:	9c 91       	ld	r25, X
    448a:	13 97       	sbiw	r26, 0x03	; 3
    448c:	82 83       	std	Z+2, r24	; 0x02
    448e:	93 83       	std	Z+3, r25	; 0x03
    4490:	a0 e0       	ldi	r26, 0x00	; 0
    4492:	b0 e0       	ldi	r27, 0x00	; 0
    4494:	02 c0       	rjmp	.+4      	; 0x449a <free+0xec>
    4496:	d7 01       	movw	r26, r14
    4498:	7c 01       	movw	r14, r24
    449a:	f7 01       	movw	r30, r14
    449c:	82 81       	ldd	r24, Z+2	; 0x02
    449e:	93 81       	ldd	r25, Z+3	; 0x03
    44a0:	00 97       	sbiw	r24, 0x00	; 0
    44a2:	c9 f7       	brne	.-14     	; 0x4496 <free+0xe8>
    44a4:	c7 01       	movw	r24, r14
    44a6:	02 96       	adiw	r24, 0x02	; 2
    44a8:	20 81       	ld	r18, Z
    44aa:	31 81       	ldd	r19, Z+1	; 0x01
    44ac:	82 0f       	add	r24, r18
    44ae:	93 1f       	adc	r25, r19
    44b0:	20 91 e6 25 	lds	r18, 0x25E6
    44b4:	30 91 e7 25 	lds	r19, 0x25E7
    44b8:	28 17       	cp	r18, r24
    44ba:	39 07       	cpc	r19, r25
    44bc:	79 f4       	brne	.+30     	; 0x44dc <free+0x12e>
    44be:	10 97       	sbiw	r26, 0x00	; 0
    44c0:	29 f4       	brne	.+10     	; 0x44cc <free+0x11e>
    44c2:	10 92 e8 25 	sts	0x25E8, r1
    44c6:	10 92 e9 25 	sts	0x25E9, r1
    44ca:	04 c0       	rjmp	.+8      	; 0x44d4 <free+0x126>
    44cc:	12 96       	adiw	r26, 0x02	; 2
    44ce:	1d 92       	st	X+, r1
    44d0:	1c 92       	st	X, r1
    44d2:	13 97       	sbiw	r26, 0x03	; 3
    44d4:	e0 92 e6 25 	sts	0x25E6, r14
    44d8:	f0 92 e7 25 	sts	0x25E7, r15
    44dc:	df 91       	pop	r29
    44de:	cf 91       	pop	r28
    44e0:	1f 91       	pop	r17
    44e2:	0f 91       	pop	r16
    44e4:	ff 90       	pop	r15
    44e6:	ef 90       	pop	r14
    44e8:	08 95       	ret

000044ea <abort>:
    44ea:	81 e0       	ldi	r24, 0x01	; 1
    44ec:	90 e0       	ldi	r25, 0x00	; 0
    44ee:	f8 94       	cli
    44f0:	0c 94 42 25 	jmp	0x4a84	; 0x4a84 <_exit>

000044f4 <memcpy>:
    44f4:	fb 01       	movw	r30, r22
    44f6:	dc 01       	movw	r26, r24
    44f8:	02 c0       	rjmp	.+4      	; 0x44fe <memcpy+0xa>
    44fa:	01 90       	ld	r0, Z+
    44fc:	0d 92       	st	X+, r0
    44fe:	41 50       	subi	r20, 0x01	; 1
    4500:	50 40       	sbci	r21, 0x00	; 0
    4502:	d8 f7       	brcc	.-10     	; 0x44fa <memcpy+0x6>
    4504:	08 95       	ret

00004506 <memset>:
    4506:	dc 01       	movw	r26, r24
    4508:	01 c0       	rjmp	.+2      	; 0x450c <memset+0x6>
    450a:	6d 93       	st	X+, r22
    450c:	41 50       	subi	r20, 0x01	; 1
    450e:	50 40       	sbci	r21, 0x00	; 0
    4510:	e0 f7       	brcc	.-8      	; 0x450a <memset+0x4>
    4512:	08 95       	ret

00004514 <printf>:
    4514:	cf 93       	push	r28
    4516:	df 93       	push	r29
    4518:	1f 92       	push	r1
    451a:	1f 92       	push	r1
    451c:	cd b7       	in	r28, 0x3d	; 61
    451e:	de b7       	in	r29, 0x3e	; 62
    4520:	fe 01       	movw	r30, r28
    4522:	38 96       	adiw	r30, 0x08	; 8
    4524:	61 91       	ld	r22, Z+
    4526:	71 91       	ld	r23, Z+
    4528:	e9 83       	std	Y+1, r30	; 0x01
    452a:	fa 83       	std	Y+2, r31	; 0x02
    452c:	af 01       	movw	r20, r30
    452e:	80 91 ec 25 	lds	r24, 0x25EC
    4532:	90 91 ed 25 	lds	r25, 0x25ED
    4536:	0e 94 a2 22 	call	0x4544	; 0x4544 <vfprintf>
    453a:	0f 90       	pop	r0
    453c:	0f 90       	pop	r0
    453e:	df 91       	pop	r29
    4540:	cf 91       	pop	r28
    4542:	08 95       	ret

00004544 <vfprintf>:
    4544:	2f 92       	push	r2
    4546:	3f 92       	push	r3
    4548:	4f 92       	push	r4
    454a:	5f 92       	push	r5
    454c:	6f 92       	push	r6
    454e:	7f 92       	push	r7
    4550:	8f 92       	push	r8
    4552:	9f 92       	push	r9
    4554:	af 92       	push	r10
    4556:	bf 92       	push	r11
    4558:	cf 92       	push	r12
    455a:	df 92       	push	r13
    455c:	ef 92       	push	r14
    455e:	ff 92       	push	r15
    4560:	0f 93       	push	r16
    4562:	1f 93       	push	r17
    4564:	cf 93       	push	r28
    4566:	df 93       	push	r29
    4568:	cd b7       	in	r28, 0x3d	; 61
    456a:	de b7       	in	r29, 0x3e	; 62
    456c:	2c 97       	sbiw	r28, 0x0c	; 12
    456e:	cd bf       	out	0x3d, r28	; 61
    4570:	de bf       	out	0x3e, r29	; 62
    4572:	7c 01       	movw	r14, r24
    4574:	6b 01       	movw	r12, r22
    4576:	8a 01       	movw	r16, r20
    4578:	fc 01       	movw	r30, r24
    457a:	16 82       	std	Z+6, r1	; 0x06
    457c:	17 82       	std	Z+7, r1	; 0x07
    457e:	83 81       	ldd	r24, Z+3	; 0x03
    4580:	81 ff       	sbrs	r24, 1
    4582:	c7 c1       	rjmp	.+910    	; 0x4912 <vfprintf+0x3ce>
    4584:	88 24       	eor	r8, r8
    4586:	83 94       	inc	r8
    4588:	91 2c       	mov	r9, r1
    458a:	8c 0e       	add	r8, r28
    458c:	9d 1e       	adc	r9, r29
    458e:	f7 01       	movw	r30, r14
    4590:	93 81       	ldd	r25, Z+3	; 0x03
    4592:	f6 01       	movw	r30, r12
    4594:	93 fd       	sbrc	r25, 3
    4596:	85 91       	lpm	r24, Z+
    4598:	93 ff       	sbrs	r25, 3
    459a:	81 91       	ld	r24, Z+
    459c:	6f 01       	movw	r12, r30
    459e:	88 23       	and	r24, r24
    45a0:	09 f4       	brne	.+2      	; 0x45a4 <vfprintf+0x60>
    45a2:	b3 c1       	rjmp	.+870    	; 0x490a <vfprintf+0x3c6>
    45a4:	85 32       	cpi	r24, 0x25	; 37
    45a6:	39 f4       	brne	.+14     	; 0x45b6 <vfprintf+0x72>
    45a8:	93 fd       	sbrc	r25, 3
    45aa:	85 91       	lpm	r24, Z+
    45ac:	93 ff       	sbrs	r25, 3
    45ae:	81 91       	ld	r24, Z+
    45b0:	6f 01       	movw	r12, r30
    45b2:	85 32       	cpi	r24, 0x25	; 37
    45b4:	29 f4       	brne	.+10     	; 0x45c0 <vfprintf+0x7c>
    45b6:	b7 01       	movw	r22, r14
    45b8:	90 e0       	ldi	r25, 0x00	; 0
    45ba:	0e 94 b8 24 	call	0x4970	; 0x4970 <fputc>
    45be:	e7 cf       	rjmp	.-50     	; 0x458e <vfprintf+0x4a>
    45c0:	71 2c       	mov	r7, r1
    45c2:	31 2c       	mov	r3, r1
    45c4:	20 e0       	ldi	r18, 0x00	; 0
    45c6:	20 32       	cpi	r18, 0x20	; 32
    45c8:	a8 f4       	brcc	.+42     	; 0x45f4 <vfprintf+0xb0>
    45ca:	8b 32       	cpi	r24, 0x2B	; 43
    45cc:	61 f0       	breq	.+24     	; 0x45e6 <vfprintf+0xa2>
    45ce:	28 f4       	brcc	.+10     	; 0x45da <vfprintf+0x96>
    45d0:	80 32       	cpi	r24, 0x20	; 32
    45d2:	51 f0       	breq	.+20     	; 0x45e8 <vfprintf+0xa4>
    45d4:	83 32       	cpi	r24, 0x23	; 35
    45d6:	71 f4       	brne	.+28     	; 0x45f4 <vfprintf+0xb0>
    45d8:	0b c0       	rjmp	.+22     	; 0x45f0 <vfprintf+0xac>
    45da:	8d 32       	cpi	r24, 0x2D	; 45
    45dc:	39 f0       	breq	.+14     	; 0x45ec <vfprintf+0xa8>
    45de:	80 33       	cpi	r24, 0x30	; 48
    45e0:	49 f4       	brne	.+18     	; 0x45f4 <vfprintf+0xb0>
    45e2:	21 60       	ori	r18, 0x01	; 1
    45e4:	28 c0       	rjmp	.+80     	; 0x4636 <vfprintf+0xf2>
    45e6:	22 60       	ori	r18, 0x02	; 2
    45e8:	24 60       	ori	r18, 0x04	; 4
    45ea:	25 c0       	rjmp	.+74     	; 0x4636 <vfprintf+0xf2>
    45ec:	28 60       	ori	r18, 0x08	; 8
    45ee:	23 c0       	rjmp	.+70     	; 0x4636 <vfprintf+0xf2>
    45f0:	20 61       	ori	r18, 0x10	; 16
    45f2:	21 c0       	rjmp	.+66     	; 0x4636 <vfprintf+0xf2>
    45f4:	27 fd       	sbrc	r18, 7
    45f6:	27 c0       	rjmp	.+78     	; 0x4646 <vfprintf+0x102>
    45f8:	38 2f       	mov	r19, r24
    45fa:	30 53       	subi	r19, 0x30	; 48
    45fc:	3a 30       	cpi	r19, 0x0A	; 10
    45fe:	78 f4       	brcc	.+30     	; 0x461e <vfprintf+0xda>
    4600:	26 ff       	sbrs	r18, 6
    4602:	06 c0       	rjmp	.+12     	; 0x4610 <vfprintf+0xcc>
    4604:	fa e0       	ldi	r31, 0x0A	; 10
    4606:	7f 9e       	mul	r7, r31
    4608:	30 0d       	add	r19, r0
    460a:	11 24       	eor	r1, r1
    460c:	73 2e       	mov	r7, r19
    460e:	13 c0       	rjmp	.+38     	; 0x4636 <vfprintf+0xf2>
    4610:	8a e0       	ldi	r24, 0x0A	; 10
    4612:	38 9e       	mul	r3, r24
    4614:	30 0d       	add	r19, r0
    4616:	11 24       	eor	r1, r1
    4618:	33 2e       	mov	r3, r19
    461a:	20 62       	ori	r18, 0x20	; 32
    461c:	0c c0       	rjmp	.+24     	; 0x4636 <vfprintf+0xf2>
    461e:	8e 32       	cpi	r24, 0x2E	; 46
    4620:	21 f4       	brne	.+8      	; 0x462a <vfprintf+0xe6>
    4622:	26 fd       	sbrc	r18, 6
    4624:	72 c1       	rjmp	.+740    	; 0x490a <vfprintf+0x3c6>
    4626:	20 64       	ori	r18, 0x40	; 64
    4628:	06 c0       	rjmp	.+12     	; 0x4636 <vfprintf+0xf2>
    462a:	8c 36       	cpi	r24, 0x6C	; 108
    462c:	11 f4       	brne	.+4      	; 0x4632 <vfprintf+0xee>
    462e:	20 68       	ori	r18, 0x80	; 128
    4630:	02 c0       	rjmp	.+4      	; 0x4636 <vfprintf+0xf2>
    4632:	88 36       	cpi	r24, 0x68	; 104
    4634:	41 f4       	brne	.+16     	; 0x4646 <vfprintf+0x102>
    4636:	f6 01       	movw	r30, r12
    4638:	93 fd       	sbrc	r25, 3
    463a:	85 91       	lpm	r24, Z+
    463c:	93 ff       	sbrs	r25, 3
    463e:	81 91       	ld	r24, Z+
    4640:	6f 01       	movw	r12, r30
    4642:	81 11       	cpse	r24, r1
    4644:	c0 cf       	rjmp	.-128    	; 0x45c6 <vfprintf+0x82>
    4646:	98 2f       	mov	r25, r24
    4648:	95 54       	subi	r25, 0x45	; 69
    464a:	93 30       	cpi	r25, 0x03	; 3
    464c:	18 f0       	brcs	.+6      	; 0x4654 <vfprintf+0x110>
    464e:	90 52       	subi	r25, 0x20	; 32
    4650:	93 30       	cpi	r25, 0x03	; 3
    4652:	28 f4       	brcc	.+10     	; 0x465e <vfprintf+0x11a>
    4654:	0c 5f       	subi	r16, 0xFC	; 252
    4656:	1f 4f       	sbci	r17, 0xFF	; 255
    4658:	ff e3       	ldi	r31, 0x3F	; 63
    465a:	f9 83       	std	Y+1, r31	; 0x01
    465c:	0d c0       	rjmp	.+26     	; 0x4678 <vfprintf+0x134>
    465e:	83 36       	cpi	r24, 0x63	; 99
    4660:	31 f0       	breq	.+12     	; 0x466e <vfprintf+0x12a>
    4662:	83 37       	cpi	r24, 0x73	; 115
    4664:	71 f0       	breq	.+28     	; 0x4682 <vfprintf+0x13e>
    4666:	83 35       	cpi	r24, 0x53	; 83
    4668:	09 f0       	breq	.+2      	; 0x466c <vfprintf+0x128>
    466a:	5e c0       	rjmp	.+188    	; 0x4728 <vfprintf+0x1e4>
    466c:	23 c0       	rjmp	.+70     	; 0x46b4 <vfprintf+0x170>
    466e:	f8 01       	movw	r30, r16
    4670:	80 81       	ld	r24, Z
    4672:	89 83       	std	Y+1, r24	; 0x01
    4674:	0e 5f       	subi	r16, 0xFE	; 254
    4676:	1f 4f       	sbci	r17, 0xFF	; 255
    4678:	66 24       	eor	r6, r6
    467a:	63 94       	inc	r6
    467c:	71 2c       	mov	r7, r1
    467e:	54 01       	movw	r10, r8
    4680:	15 c0       	rjmp	.+42     	; 0x46ac <vfprintf+0x168>
    4682:	28 01       	movw	r4, r16
    4684:	f2 e0       	ldi	r31, 0x02	; 2
    4686:	4f 0e       	add	r4, r31
    4688:	51 1c       	adc	r5, r1
    468a:	f8 01       	movw	r30, r16
    468c:	a0 80       	ld	r10, Z
    468e:	b1 80       	ldd	r11, Z+1	; 0x01
    4690:	26 ff       	sbrs	r18, 6
    4692:	03 c0       	rjmp	.+6      	; 0x469a <vfprintf+0x156>
    4694:	67 2d       	mov	r22, r7
    4696:	70 e0       	ldi	r23, 0x00	; 0
    4698:	02 c0       	rjmp	.+4      	; 0x469e <vfprintf+0x15a>
    469a:	6f ef       	ldi	r22, 0xFF	; 255
    469c:	7f ef       	ldi	r23, 0xFF	; 255
    469e:	c5 01       	movw	r24, r10
    46a0:	2c 87       	std	Y+12, r18	; 0x0c
    46a2:	0e 94 ad 24 	call	0x495a	; 0x495a <strnlen>
    46a6:	3c 01       	movw	r6, r24
    46a8:	82 01       	movw	r16, r4
    46aa:	2c 85       	ldd	r18, Y+12	; 0x0c
    46ac:	6f e7       	ldi	r22, 0x7F	; 127
    46ae:	26 2e       	mov	r2, r22
    46b0:	22 22       	and	r2, r18
    46b2:	18 c0       	rjmp	.+48     	; 0x46e4 <vfprintf+0x1a0>
    46b4:	28 01       	movw	r4, r16
    46b6:	f2 e0       	ldi	r31, 0x02	; 2
    46b8:	4f 0e       	add	r4, r31
    46ba:	51 1c       	adc	r5, r1
    46bc:	f8 01       	movw	r30, r16
    46be:	a0 80       	ld	r10, Z
    46c0:	b1 80       	ldd	r11, Z+1	; 0x01
    46c2:	26 ff       	sbrs	r18, 6
    46c4:	03 c0       	rjmp	.+6      	; 0x46cc <vfprintf+0x188>
    46c6:	67 2d       	mov	r22, r7
    46c8:	70 e0       	ldi	r23, 0x00	; 0
    46ca:	02 c0       	rjmp	.+4      	; 0x46d0 <vfprintf+0x18c>
    46cc:	6f ef       	ldi	r22, 0xFF	; 255
    46ce:	7f ef       	ldi	r23, 0xFF	; 255
    46d0:	c5 01       	movw	r24, r10
    46d2:	2c 87       	std	Y+12, r18	; 0x0c
    46d4:	0e 94 a2 24 	call	0x4944	; 0x4944 <strnlen_P>
    46d8:	3c 01       	movw	r6, r24
    46da:	2c 85       	ldd	r18, Y+12	; 0x0c
    46dc:	50 e8       	ldi	r21, 0x80	; 128
    46de:	25 2e       	mov	r2, r21
    46e0:	22 2a       	or	r2, r18
    46e2:	82 01       	movw	r16, r4
    46e4:	23 fc       	sbrc	r2, 3
    46e6:	1c c0       	rjmp	.+56     	; 0x4720 <vfprintf+0x1dc>
    46e8:	06 c0       	rjmp	.+12     	; 0x46f6 <vfprintf+0x1b2>
    46ea:	b7 01       	movw	r22, r14
    46ec:	80 e2       	ldi	r24, 0x20	; 32
    46ee:	90 e0       	ldi	r25, 0x00	; 0
    46f0:	0e 94 b8 24 	call	0x4970	; 0x4970 <fputc>
    46f4:	3a 94       	dec	r3
    46f6:	83 2d       	mov	r24, r3
    46f8:	90 e0       	ldi	r25, 0x00	; 0
    46fa:	68 16       	cp	r6, r24
    46fc:	79 06       	cpc	r7, r25
    46fe:	a8 f3       	brcs	.-22     	; 0x46ea <vfprintf+0x1a6>
    4700:	0f c0       	rjmp	.+30     	; 0x4720 <vfprintf+0x1dc>
    4702:	f5 01       	movw	r30, r10
    4704:	27 fc       	sbrc	r2, 7
    4706:	85 91       	lpm	r24, Z+
    4708:	27 fe       	sbrs	r2, 7
    470a:	81 91       	ld	r24, Z+
    470c:	5f 01       	movw	r10, r30
    470e:	b7 01       	movw	r22, r14
    4710:	90 e0       	ldi	r25, 0x00	; 0
    4712:	0e 94 b8 24 	call	0x4970	; 0x4970 <fputc>
    4716:	31 10       	cpse	r3, r1
    4718:	3a 94       	dec	r3
    471a:	f1 e0       	ldi	r31, 0x01	; 1
    471c:	6f 1a       	sub	r6, r31
    471e:	71 08       	sbc	r7, r1
    4720:	61 14       	cp	r6, r1
    4722:	71 04       	cpc	r7, r1
    4724:	71 f7       	brne	.-36     	; 0x4702 <vfprintf+0x1be>
    4726:	ee c0       	rjmp	.+476    	; 0x4904 <vfprintf+0x3c0>
    4728:	84 36       	cpi	r24, 0x64	; 100
    472a:	11 f0       	breq	.+4      	; 0x4730 <vfprintf+0x1ec>
    472c:	89 36       	cpi	r24, 0x69	; 105
    472e:	41 f5       	brne	.+80     	; 0x4780 <vfprintf+0x23c>
    4730:	f8 01       	movw	r30, r16
    4732:	27 ff       	sbrs	r18, 7
    4734:	07 c0       	rjmp	.+14     	; 0x4744 <vfprintf+0x200>
    4736:	60 81       	ld	r22, Z
    4738:	71 81       	ldd	r23, Z+1	; 0x01
    473a:	82 81       	ldd	r24, Z+2	; 0x02
    473c:	93 81       	ldd	r25, Z+3	; 0x03
    473e:	0c 5f       	subi	r16, 0xFC	; 252
    4740:	1f 4f       	sbci	r17, 0xFF	; 255
    4742:	08 c0       	rjmp	.+16     	; 0x4754 <vfprintf+0x210>
    4744:	60 81       	ld	r22, Z
    4746:	71 81       	ldd	r23, Z+1	; 0x01
    4748:	88 27       	eor	r24, r24
    474a:	77 fd       	sbrc	r23, 7
    474c:	80 95       	com	r24
    474e:	98 2f       	mov	r25, r24
    4750:	0e 5f       	subi	r16, 0xFE	; 254
    4752:	1f 4f       	sbci	r17, 0xFF	; 255
    4754:	4f e6       	ldi	r20, 0x6F	; 111
    4756:	64 2e       	mov	r6, r20
    4758:	62 22       	and	r6, r18
    475a:	97 ff       	sbrs	r25, 7
    475c:	09 c0       	rjmp	.+18     	; 0x4770 <vfprintf+0x22c>
    475e:	90 95       	com	r25
    4760:	80 95       	com	r24
    4762:	70 95       	com	r23
    4764:	61 95       	neg	r22
    4766:	7f 4f       	sbci	r23, 0xFF	; 255
    4768:	8f 4f       	sbci	r24, 0xFF	; 255
    476a:	9f 4f       	sbci	r25, 0xFF	; 255
    476c:	f0 e8       	ldi	r31, 0x80	; 128
    476e:	6f 2a       	or	r6, r31
    4770:	2a e0       	ldi	r18, 0x0A	; 10
    4772:	30 e0       	ldi	r19, 0x00	; 0
    4774:	a4 01       	movw	r20, r8
    4776:	0e 94 e4 24 	call	0x49c8	; 0x49c8 <__ultoa_invert>
    477a:	a8 2e       	mov	r10, r24
    477c:	a8 18       	sub	r10, r8
    477e:	44 c0       	rjmp	.+136    	; 0x4808 <vfprintf+0x2c4>
    4780:	85 37       	cpi	r24, 0x75	; 117
    4782:	31 f4       	brne	.+12     	; 0x4790 <vfprintf+0x24c>
    4784:	3f ee       	ldi	r19, 0xEF	; 239
    4786:	b3 2e       	mov	r11, r19
    4788:	b2 22       	and	r11, r18
    478a:	2a e0       	ldi	r18, 0x0A	; 10
    478c:	30 e0       	ldi	r19, 0x00	; 0
    478e:	24 c0       	rjmp	.+72     	; 0x47d8 <vfprintf+0x294>
    4790:	99 ef       	ldi	r25, 0xF9	; 249
    4792:	b9 2e       	mov	r11, r25
    4794:	b2 22       	and	r11, r18
    4796:	8f 36       	cpi	r24, 0x6F	; 111
    4798:	b9 f0       	breq	.+46     	; 0x47c8 <vfprintf+0x284>
    479a:	20 f4       	brcc	.+8      	; 0x47a4 <vfprintf+0x260>
    479c:	88 35       	cpi	r24, 0x58	; 88
    479e:	09 f0       	breq	.+2      	; 0x47a2 <vfprintf+0x25e>
    47a0:	b4 c0       	rjmp	.+360    	; 0x490a <vfprintf+0x3c6>
    47a2:	0d c0       	rjmp	.+26     	; 0x47be <vfprintf+0x27a>
    47a4:	80 37       	cpi	r24, 0x70	; 112
    47a6:	21 f0       	breq	.+8      	; 0x47b0 <vfprintf+0x26c>
    47a8:	88 37       	cpi	r24, 0x78	; 120
    47aa:	09 f0       	breq	.+2      	; 0x47ae <vfprintf+0x26a>
    47ac:	ae c0       	rjmp	.+348    	; 0x490a <vfprintf+0x3c6>
    47ae:	02 c0       	rjmp	.+4      	; 0x47b4 <vfprintf+0x270>
    47b0:	20 e1       	ldi	r18, 0x10	; 16
    47b2:	b2 2a       	or	r11, r18
    47b4:	b4 fe       	sbrs	r11, 4
    47b6:	0b c0       	rjmp	.+22     	; 0x47ce <vfprintf+0x28a>
    47b8:	84 e0       	ldi	r24, 0x04	; 4
    47ba:	b8 2a       	or	r11, r24
    47bc:	08 c0       	rjmp	.+16     	; 0x47ce <vfprintf+0x28a>
    47be:	24 ff       	sbrs	r18, 4
    47c0:	09 c0       	rjmp	.+18     	; 0x47d4 <vfprintf+0x290>
    47c2:	e6 e0       	ldi	r30, 0x06	; 6
    47c4:	be 2a       	or	r11, r30
    47c6:	06 c0       	rjmp	.+12     	; 0x47d4 <vfprintf+0x290>
    47c8:	28 e0       	ldi	r18, 0x08	; 8
    47ca:	30 e0       	ldi	r19, 0x00	; 0
    47cc:	05 c0       	rjmp	.+10     	; 0x47d8 <vfprintf+0x294>
    47ce:	20 e1       	ldi	r18, 0x10	; 16
    47d0:	30 e0       	ldi	r19, 0x00	; 0
    47d2:	02 c0       	rjmp	.+4      	; 0x47d8 <vfprintf+0x294>
    47d4:	20 e1       	ldi	r18, 0x10	; 16
    47d6:	32 e0       	ldi	r19, 0x02	; 2
    47d8:	f8 01       	movw	r30, r16
    47da:	b7 fe       	sbrs	r11, 7
    47dc:	07 c0       	rjmp	.+14     	; 0x47ec <vfprintf+0x2a8>
    47de:	60 81       	ld	r22, Z
    47e0:	71 81       	ldd	r23, Z+1	; 0x01
    47e2:	82 81       	ldd	r24, Z+2	; 0x02
    47e4:	93 81       	ldd	r25, Z+3	; 0x03
    47e6:	0c 5f       	subi	r16, 0xFC	; 252
    47e8:	1f 4f       	sbci	r17, 0xFF	; 255
    47ea:	06 c0       	rjmp	.+12     	; 0x47f8 <vfprintf+0x2b4>
    47ec:	60 81       	ld	r22, Z
    47ee:	71 81       	ldd	r23, Z+1	; 0x01
    47f0:	80 e0       	ldi	r24, 0x00	; 0
    47f2:	90 e0       	ldi	r25, 0x00	; 0
    47f4:	0e 5f       	subi	r16, 0xFE	; 254
    47f6:	1f 4f       	sbci	r17, 0xFF	; 255
    47f8:	a4 01       	movw	r20, r8
    47fa:	0e 94 e4 24 	call	0x49c8	; 0x49c8 <__ultoa_invert>
    47fe:	a8 2e       	mov	r10, r24
    4800:	a8 18       	sub	r10, r8
    4802:	8f e7       	ldi	r24, 0x7F	; 127
    4804:	68 2e       	mov	r6, r24
    4806:	6b 20       	and	r6, r11
    4808:	66 fe       	sbrs	r6, 6
    480a:	0b c0       	rjmp	.+22     	; 0x4822 <vfprintf+0x2de>
    480c:	36 2d       	mov	r19, r6
    480e:	3e 7f       	andi	r19, 0xFE	; 254
    4810:	a7 14       	cp	r10, r7
    4812:	50 f4       	brcc	.+20     	; 0x4828 <vfprintf+0x2e4>
    4814:	64 fe       	sbrs	r6, 4
    4816:	0a c0       	rjmp	.+20     	; 0x482c <vfprintf+0x2e8>
    4818:	62 fc       	sbrc	r6, 2
    481a:	08 c0       	rjmp	.+16     	; 0x482c <vfprintf+0x2e8>
    481c:	36 2d       	mov	r19, r6
    481e:	3e 7e       	andi	r19, 0xEE	; 238
    4820:	05 c0       	rjmp	.+10     	; 0x482c <vfprintf+0x2e8>
    4822:	ba 2c       	mov	r11, r10
    4824:	36 2d       	mov	r19, r6
    4826:	03 c0       	rjmp	.+6      	; 0x482e <vfprintf+0x2ea>
    4828:	ba 2c       	mov	r11, r10
    482a:	01 c0       	rjmp	.+2      	; 0x482e <vfprintf+0x2ea>
    482c:	b7 2c       	mov	r11, r7
    482e:	34 ff       	sbrs	r19, 4
    4830:	0d c0       	rjmp	.+26     	; 0x484c <vfprintf+0x308>
    4832:	fe 01       	movw	r30, r28
    4834:	ea 0d       	add	r30, r10
    4836:	f1 1d       	adc	r31, r1
    4838:	80 81       	ld	r24, Z
    483a:	80 33       	cpi	r24, 0x30	; 48
    483c:	11 f4       	brne	.+4      	; 0x4842 <vfprintf+0x2fe>
    483e:	39 7e       	andi	r19, 0xE9	; 233
    4840:	09 c0       	rjmp	.+18     	; 0x4854 <vfprintf+0x310>
    4842:	32 ff       	sbrs	r19, 2
    4844:	06 c0       	rjmp	.+12     	; 0x4852 <vfprintf+0x30e>
    4846:	b3 94       	inc	r11
    4848:	b3 94       	inc	r11
    484a:	04 c0       	rjmp	.+8      	; 0x4854 <vfprintf+0x310>
    484c:	83 2f       	mov	r24, r19
    484e:	86 78       	andi	r24, 0x86	; 134
    4850:	09 f0       	breq	.+2      	; 0x4854 <vfprintf+0x310>
    4852:	b3 94       	inc	r11
    4854:	33 fd       	sbrc	r19, 3
    4856:	14 c0       	rjmp	.+40     	; 0x4880 <vfprintf+0x33c>
    4858:	30 ff       	sbrs	r19, 0
    485a:	0f c0       	rjmp	.+30     	; 0x487a <vfprintf+0x336>
    485c:	7a 2c       	mov	r7, r10
    485e:	b3 14       	cp	r11, r3
    4860:	60 f4       	brcc	.+24     	; 0x487a <vfprintf+0x336>
    4862:	73 0c       	add	r7, r3
    4864:	7b 18       	sub	r7, r11
    4866:	b3 2c       	mov	r11, r3
    4868:	08 c0       	rjmp	.+16     	; 0x487a <vfprintf+0x336>
    486a:	b7 01       	movw	r22, r14
    486c:	80 e2       	ldi	r24, 0x20	; 32
    486e:	90 e0       	ldi	r25, 0x00	; 0
    4870:	3c 87       	std	Y+12, r19	; 0x0c
    4872:	0e 94 b8 24 	call	0x4970	; 0x4970 <fputc>
    4876:	b3 94       	inc	r11
    4878:	3c 85       	ldd	r19, Y+12	; 0x0c
    487a:	b3 14       	cp	r11, r3
    487c:	b0 f3       	brcs	.-20     	; 0x486a <vfprintf+0x326>
    487e:	04 c0       	rjmp	.+8      	; 0x4888 <vfprintf+0x344>
    4880:	b3 14       	cp	r11, r3
    4882:	10 f4       	brcc	.+4      	; 0x4888 <vfprintf+0x344>
    4884:	3b 18       	sub	r3, r11
    4886:	01 c0       	rjmp	.+2      	; 0x488a <vfprintf+0x346>
    4888:	31 2c       	mov	r3, r1
    488a:	34 ff       	sbrs	r19, 4
    488c:	12 c0       	rjmp	.+36     	; 0x48b2 <vfprintf+0x36e>
    488e:	b7 01       	movw	r22, r14
    4890:	80 e3       	ldi	r24, 0x30	; 48
    4892:	90 e0       	ldi	r25, 0x00	; 0
    4894:	3c 87       	std	Y+12, r19	; 0x0c
    4896:	0e 94 b8 24 	call	0x4970	; 0x4970 <fputc>
    489a:	3c 85       	ldd	r19, Y+12	; 0x0c
    489c:	32 ff       	sbrs	r19, 2
    489e:	1e c0       	rjmp	.+60     	; 0x48dc <vfprintf+0x398>
    48a0:	31 ff       	sbrs	r19, 1
    48a2:	03 c0       	rjmp	.+6      	; 0x48aa <vfprintf+0x366>
    48a4:	88 e5       	ldi	r24, 0x58	; 88
    48a6:	90 e0       	ldi	r25, 0x00	; 0
    48a8:	02 c0       	rjmp	.+4      	; 0x48ae <vfprintf+0x36a>
    48aa:	88 e7       	ldi	r24, 0x78	; 120
    48ac:	90 e0       	ldi	r25, 0x00	; 0
    48ae:	b7 01       	movw	r22, r14
    48b0:	0c c0       	rjmp	.+24     	; 0x48ca <vfprintf+0x386>
    48b2:	83 2f       	mov	r24, r19
    48b4:	86 78       	andi	r24, 0x86	; 134
    48b6:	91 f0       	breq	.+36     	; 0x48dc <vfprintf+0x398>
    48b8:	31 fd       	sbrc	r19, 1
    48ba:	02 c0       	rjmp	.+4      	; 0x48c0 <vfprintf+0x37c>
    48bc:	80 e2       	ldi	r24, 0x20	; 32
    48be:	01 c0       	rjmp	.+2      	; 0x48c2 <vfprintf+0x37e>
    48c0:	8b e2       	ldi	r24, 0x2B	; 43
    48c2:	37 fd       	sbrc	r19, 7
    48c4:	8d e2       	ldi	r24, 0x2D	; 45
    48c6:	b7 01       	movw	r22, r14
    48c8:	90 e0       	ldi	r25, 0x00	; 0
    48ca:	0e 94 b8 24 	call	0x4970	; 0x4970 <fputc>
    48ce:	06 c0       	rjmp	.+12     	; 0x48dc <vfprintf+0x398>
    48d0:	b7 01       	movw	r22, r14
    48d2:	80 e3       	ldi	r24, 0x30	; 48
    48d4:	90 e0       	ldi	r25, 0x00	; 0
    48d6:	0e 94 b8 24 	call	0x4970	; 0x4970 <fputc>
    48da:	7a 94       	dec	r7
    48dc:	a7 14       	cp	r10, r7
    48de:	c0 f3       	brcs	.-16     	; 0x48d0 <vfprintf+0x38c>
    48e0:	aa 94       	dec	r10
    48e2:	f4 01       	movw	r30, r8
    48e4:	ea 0d       	add	r30, r10
    48e6:	f1 1d       	adc	r31, r1
    48e8:	b7 01       	movw	r22, r14
    48ea:	80 81       	ld	r24, Z
    48ec:	90 e0       	ldi	r25, 0x00	; 0
    48ee:	0e 94 b8 24 	call	0x4970	; 0x4970 <fputc>
    48f2:	a1 10       	cpse	r10, r1
    48f4:	f5 cf       	rjmp	.-22     	; 0x48e0 <vfprintf+0x39c>
    48f6:	06 c0       	rjmp	.+12     	; 0x4904 <vfprintf+0x3c0>
    48f8:	b7 01       	movw	r22, r14
    48fa:	80 e2       	ldi	r24, 0x20	; 32
    48fc:	90 e0       	ldi	r25, 0x00	; 0
    48fe:	0e 94 b8 24 	call	0x4970	; 0x4970 <fputc>
    4902:	3a 94       	dec	r3
    4904:	31 10       	cpse	r3, r1
    4906:	f8 cf       	rjmp	.-16     	; 0x48f8 <vfprintf+0x3b4>
    4908:	42 ce       	rjmp	.-892    	; 0x458e <vfprintf+0x4a>
    490a:	f7 01       	movw	r30, r14
    490c:	26 81       	ldd	r18, Z+6	; 0x06
    490e:	37 81       	ldd	r19, Z+7	; 0x07
    4910:	02 c0       	rjmp	.+4      	; 0x4916 <vfprintf+0x3d2>
    4912:	2f ef       	ldi	r18, 0xFF	; 255
    4914:	3f ef       	ldi	r19, 0xFF	; 255
    4916:	c9 01       	movw	r24, r18
    4918:	2c 96       	adiw	r28, 0x0c	; 12
    491a:	cd bf       	out	0x3d, r28	; 61
    491c:	de bf       	out	0x3e, r29	; 62
    491e:	df 91       	pop	r29
    4920:	cf 91       	pop	r28
    4922:	1f 91       	pop	r17
    4924:	0f 91       	pop	r16
    4926:	ff 90       	pop	r15
    4928:	ef 90       	pop	r14
    492a:	df 90       	pop	r13
    492c:	cf 90       	pop	r12
    492e:	bf 90       	pop	r11
    4930:	af 90       	pop	r10
    4932:	9f 90       	pop	r9
    4934:	8f 90       	pop	r8
    4936:	7f 90       	pop	r7
    4938:	6f 90       	pop	r6
    493a:	5f 90       	pop	r5
    493c:	4f 90       	pop	r4
    493e:	3f 90       	pop	r3
    4940:	2f 90       	pop	r2
    4942:	08 95       	ret

00004944 <strnlen_P>:
    4944:	fc 01       	movw	r30, r24
    4946:	05 90       	lpm	r0, Z+
    4948:	61 50       	subi	r22, 0x01	; 1
    494a:	70 40       	sbci	r23, 0x00	; 0
    494c:	01 10       	cpse	r0, r1
    494e:	d8 f7       	brcc	.-10     	; 0x4946 <strnlen_P+0x2>
    4950:	80 95       	com	r24
    4952:	90 95       	com	r25
    4954:	8e 0f       	add	r24, r30
    4956:	9f 1f       	adc	r25, r31
    4958:	08 95       	ret

0000495a <strnlen>:
    495a:	fc 01       	movw	r30, r24
    495c:	61 50       	subi	r22, 0x01	; 1
    495e:	70 40       	sbci	r23, 0x00	; 0
    4960:	01 90       	ld	r0, Z+
    4962:	01 10       	cpse	r0, r1
    4964:	d8 f7       	brcc	.-10     	; 0x495c <strnlen+0x2>
    4966:	80 95       	com	r24
    4968:	90 95       	com	r25
    496a:	8e 0f       	add	r24, r30
    496c:	9f 1f       	adc	r25, r31
    496e:	08 95       	ret

00004970 <fputc>:
    4970:	0f 93       	push	r16
    4972:	1f 93       	push	r17
    4974:	cf 93       	push	r28
    4976:	df 93       	push	r29
    4978:	8c 01       	movw	r16, r24
    497a:	eb 01       	movw	r28, r22
    497c:	8b 81       	ldd	r24, Y+3	; 0x03
    497e:	81 fd       	sbrc	r24, 1
    4980:	03 c0       	rjmp	.+6      	; 0x4988 <fputc+0x18>
    4982:	0f ef       	ldi	r16, 0xFF	; 255
    4984:	1f ef       	ldi	r17, 0xFF	; 255
    4986:	1a c0       	rjmp	.+52     	; 0x49bc <fputc+0x4c>
    4988:	82 ff       	sbrs	r24, 2
    498a:	0d c0       	rjmp	.+26     	; 0x49a6 <fputc+0x36>
    498c:	2e 81       	ldd	r18, Y+6	; 0x06
    498e:	3f 81       	ldd	r19, Y+7	; 0x07
    4990:	8c 81       	ldd	r24, Y+4	; 0x04
    4992:	9d 81       	ldd	r25, Y+5	; 0x05
    4994:	28 17       	cp	r18, r24
    4996:	39 07       	cpc	r19, r25
    4998:	64 f4       	brge	.+24     	; 0x49b2 <fputc+0x42>
    499a:	e8 81       	ld	r30, Y
    499c:	f9 81       	ldd	r31, Y+1	; 0x01
    499e:	01 93       	st	Z+, r16
    49a0:	e8 83       	st	Y, r30
    49a2:	f9 83       	std	Y+1, r31	; 0x01
    49a4:	06 c0       	rjmp	.+12     	; 0x49b2 <fputc+0x42>
    49a6:	e8 85       	ldd	r30, Y+8	; 0x08
    49a8:	f9 85       	ldd	r31, Y+9	; 0x09
    49aa:	80 2f       	mov	r24, r16
    49ac:	19 95       	eicall
    49ae:	89 2b       	or	r24, r25
    49b0:	41 f7       	brne	.-48     	; 0x4982 <fputc+0x12>
    49b2:	8e 81       	ldd	r24, Y+6	; 0x06
    49b4:	9f 81       	ldd	r25, Y+7	; 0x07
    49b6:	01 96       	adiw	r24, 0x01	; 1
    49b8:	8e 83       	std	Y+6, r24	; 0x06
    49ba:	9f 83       	std	Y+7, r25	; 0x07
    49bc:	c8 01       	movw	r24, r16
    49be:	df 91       	pop	r29
    49c0:	cf 91       	pop	r28
    49c2:	1f 91       	pop	r17
    49c4:	0f 91       	pop	r16
    49c6:	08 95       	ret

000049c8 <__ultoa_invert>:
    49c8:	fa 01       	movw	r30, r20
    49ca:	aa 27       	eor	r26, r26
    49cc:	28 30       	cpi	r18, 0x08	; 8
    49ce:	51 f1       	breq	.+84     	; 0x4a24 <__ultoa_invert+0x5c>
    49d0:	20 31       	cpi	r18, 0x10	; 16
    49d2:	81 f1       	breq	.+96     	; 0x4a34 <__ultoa_invert+0x6c>
    49d4:	e8 94       	clt
    49d6:	6f 93       	push	r22
    49d8:	6e 7f       	andi	r22, 0xFE	; 254
    49da:	6e 5f       	subi	r22, 0xFE	; 254
    49dc:	7f 4f       	sbci	r23, 0xFF	; 255
    49de:	8f 4f       	sbci	r24, 0xFF	; 255
    49e0:	9f 4f       	sbci	r25, 0xFF	; 255
    49e2:	af 4f       	sbci	r26, 0xFF	; 255
    49e4:	b1 e0       	ldi	r27, 0x01	; 1
    49e6:	3e d0       	rcall	.+124    	; 0x4a64 <__ultoa_invert+0x9c>
    49e8:	b4 e0       	ldi	r27, 0x04	; 4
    49ea:	3c d0       	rcall	.+120    	; 0x4a64 <__ultoa_invert+0x9c>
    49ec:	67 0f       	add	r22, r23
    49ee:	78 1f       	adc	r23, r24
    49f0:	89 1f       	adc	r24, r25
    49f2:	9a 1f       	adc	r25, r26
    49f4:	a1 1d       	adc	r26, r1
    49f6:	68 0f       	add	r22, r24
    49f8:	79 1f       	adc	r23, r25
    49fa:	8a 1f       	adc	r24, r26
    49fc:	91 1d       	adc	r25, r1
    49fe:	a1 1d       	adc	r26, r1
    4a00:	6a 0f       	add	r22, r26
    4a02:	71 1d       	adc	r23, r1
    4a04:	81 1d       	adc	r24, r1
    4a06:	91 1d       	adc	r25, r1
    4a08:	a1 1d       	adc	r26, r1
    4a0a:	20 d0       	rcall	.+64     	; 0x4a4c <__ultoa_invert+0x84>
    4a0c:	09 f4       	brne	.+2      	; 0x4a10 <__ultoa_invert+0x48>
    4a0e:	68 94       	set
    4a10:	3f 91       	pop	r19
    4a12:	2a e0       	ldi	r18, 0x0A	; 10
    4a14:	26 9f       	mul	r18, r22
    4a16:	11 24       	eor	r1, r1
    4a18:	30 19       	sub	r19, r0
    4a1a:	30 5d       	subi	r19, 0xD0	; 208
    4a1c:	31 93       	st	Z+, r19
    4a1e:	de f6       	brtc	.-74     	; 0x49d6 <__ultoa_invert+0xe>
    4a20:	cf 01       	movw	r24, r30
    4a22:	08 95       	ret
    4a24:	46 2f       	mov	r20, r22
    4a26:	47 70       	andi	r20, 0x07	; 7
    4a28:	40 5d       	subi	r20, 0xD0	; 208
    4a2a:	41 93       	st	Z+, r20
    4a2c:	b3 e0       	ldi	r27, 0x03	; 3
    4a2e:	0f d0       	rcall	.+30     	; 0x4a4e <__ultoa_invert+0x86>
    4a30:	c9 f7       	brne	.-14     	; 0x4a24 <__ultoa_invert+0x5c>
    4a32:	f6 cf       	rjmp	.-20     	; 0x4a20 <__ultoa_invert+0x58>
    4a34:	46 2f       	mov	r20, r22
    4a36:	4f 70       	andi	r20, 0x0F	; 15
    4a38:	40 5d       	subi	r20, 0xD0	; 208
    4a3a:	4a 33       	cpi	r20, 0x3A	; 58
    4a3c:	18 f0       	brcs	.+6      	; 0x4a44 <__ultoa_invert+0x7c>
    4a3e:	49 5d       	subi	r20, 0xD9	; 217
    4a40:	31 fd       	sbrc	r19, 1
    4a42:	40 52       	subi	r20, 0x20	; 32
    4a44:	41 93       	st	Z+, r20
    4a46:	02 d0       	rcall	.+4      	; 0x4a4c <__ultoa_invert+0x84>
    4a48:	a9 f7       	brne	.-22     	; 0x4a34 <__ultoa_invert+0x6c>
    4a4a:	ea cf       	rjmp	.-44     	; 0x4a20 <__ultoa_invert+0x58>
    4a4c:	b4 e0       	ldi	r27, 0x04	; 4
    4a4e:	a6 95       	lsr	r26
    4a50:	97 95       	ror	r25
    4a52:	87 95       	ror	r24
    4a54:	77 95       	ror	r23
    4a56:	67 95       	ror	r22
    4a58:	ba 95       	dec	r27
    4a5a:	c9 f7       	brne	.-14     	; 0x4a4e <__ultoa_invert+0x86>
    4a5c:	00 97       	sbiw	r24, 0x00	; 0
    4a5e:	61 05       	cpc	r22, r1
    4a60:	71 05       	cpc	r23, r1
    4a62:	08 95       	ret
    4a64:	9b 01       	movw	r18, r22
    4a66:	ac 01       	movw	r20, r24
    4a68:	0a 2e       	mov	r0, r26
    4a6a:	06 94       	lsr	r0
    4a6c:	57 95       	ror	r21
    4a6e:	47 95       	ror	r20
    4a70:	37 95       	ror	r19
    4a72:	27 95       	ror	r18
    4a74:	ba 95       	dec	r27
    4a76:	c9 f7       	brne	.-14     	; 0x4a6a <__ultoa_invert+0xa2>
    4a78:	62 0f       	add	r22, r18
    4a7a:	73 1f       	adc	r23, r19
    4a7c:	84 1f       	adc	r24, r20
    4a7e:	95 1f       	adc	r25, r21
    4a80:	a0 1d       	adc	r26, r0
    4a82:	08 95       	ret

00004a84 <_exit>:
    4a84:	f8 94       	cli

00004a86 <__stop_program>:
    4a86:	ff cf       	rjmp	.-2      	; 0x4a86 <__stop_program>
