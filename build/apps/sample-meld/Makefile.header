# test to see if we have enough variables defined

ifeq ($(ARCH)x,x)
 $(error "You must define ARCH (try export ARCH=`uname -m`-`uname -s` replacing / with -"))
endif

ifeq ($(BBASE)x,x)
 $(error "You must define BBASE")
endif

# are we compiling for host/simulator (BB) or blocks (BLOCKS)?
ifeq ($(flavor BB),undefined)
$(info BB not defined, will make for simulator)
BB := SIM
endif

# file extension defines
ifeq ($(ARCH),i686-Cygwin)
 LIB_EXT := .a
 OBJ_EXT := .o
 EXE_EXT := .exe
else
ifeq ($(ARCH),i686-CYGWIN_NT-6.1-WOW64)
 LIB_EXT := .a
 OBJ_EXT := .o
 EXE_EXT := .exe
else
 LIB_EXT := .a
 OBJ_EXT := .o
 EXE_EXT :=
endif
endif

# define target architecure (TARCH) and host architecture (HARCH)
ifeq ($(BB),SIM)
TARCH := arch-$(ARCH)
HARCH := arch-$(ARCH)
BB2C_FLAGS :=
else
ifeq ($(BB),block)
TARCH := arch-blocks
HARCH := arch-$(ARCH)
BB2C_FLAGS := --blocks
else
$(error unknown BB target $(BB))
endif
endif

# make sure things are on the path that we need

YYY := $(BBASE)/bin/$(HARCH)
XXX := $(findstring $(YYY),$(PATH))
ifneq ($(XXX),$(YYY))
 $(info Setting your path to include $(BBASE)/bin/$(HARCH))
 XXXX := $(PATH):$(BBASE)/bin/$(HARCH):$(BBASE)/bin
 export PATH := $(XXXX)
endif

# see if meld or c
SRCEXT := $(suffix $(SOURCE))
ifeq ($(SRCEXT),.meld)
$(info Compiling Meld program $(SOURCE))
else
ifeq ($(SRCEXT),.bb)
$(info Compiling bb program $(SOURCE))
else
ifeq ($(SRCEXT),.c)
$(info Compiling straight c program $(SOURCE))
else
$(error I do not know how to handle $(SOURCE). Unknown extension, $(SRCEXT).)
endif
endif
endif

TARGET := $(notdir $(subst $(SRCEXT),,$(SOURCE)))

# file to produce
OUTPUT := arch-${ARCH}/${TARGET}$(EXE_EXT)

ifeq ($(BB),block)
############### from avr makefile
#----------------------------------------------------------------------------
# WinAVR Makefile Template written by Eric B. Weddington, JÃ¶rg Wunsch, et al.
#

# MCU name
MCU = atxmega256a3


# Processor frequency.
#     This will define a symbol, F_CPU, in all source code files equal to the
#     processor frequency. You can then use this symbol in your source code to
#     calculate timings. Do NOT tack on a 'UL' at the end, this will be done
#     automatically to create a 32-bit value in your source code.
F_CPU = 32000000


# Output format. (can be srec, ihex, binary)
FORMAT = ihex


# Target file name (without extension).
#TARGET = neighbor_sat


# List Assembler source files here.
#     Make them always end in a capital .S.  Files ending in a lowercase .s
#     will not be considered source files but generated files (assembler
#     output from the compiler), and will be deleted upon "make clean"!
#     Even though the DOS/Win* filesystem matches both .s and .S the same,
#     it will preserve the spelling of the filenames, and gcc itself does
#     care about how the name is spelled on its command-line.
ASRC =


# Optimization level, can be [0, 1, 2, 3, s].
#     0 = turn off optimization. s = optimize for size.
#     (Note: 3 is not always the best optimization level. See avr-libc FAQ.)
OPT = s


# Debugging format.
#     Native formats for AVR-GCC's -g are dwarf-2 [default] or stabs.
#     AVR Studio 4.10 requires dwarf-2.
#     AVR [Extended] COFF format requires stabs, plus an avr-objcopy run.
DEBUG = dwarf-2


# List any extra directories to look for include files here.
#     Each directory must be seperated by a space.
#     Use forward slashes for directory separators.
#     For a directory that has spaces, enclose it in quotes.
EXTRAINCDIRS =


# Compiler flag to set the C Standard level.
#     c89   = "ANSI" C
#     gnu89 = c89 plus GCC extensions
#     c99   = ISO C99 standard (not yet fully implemented)
#     gnu99 = c99 plus GCC extensions
CSTANDARD = -std=gnu99


# Place -D or -U options here
CDEFS = -DF_CPU=$(F_CPU)UL


# Place -I options here
CINCS =



#---------------- Compiler Options ----------------
#  -g*:          generate debugging information
#  -O*:          optimization level
#  -f...:        tuning, see GCC manual and avr-libc documentation
#  -Wall...:     warning level
#  -Wa,...:      tell GCC to pass this to the assembler.
#    -adhlns...: create assembler listing
CFLAGS = -g$(DEBUG)
CFLAGS += $(CDEFS) $(CINCS)
CFLAGS += -O$(OPT)
CFLAGS += -funsigned-char -funsigned-bitfields -fpack-struct -fshort-enums
#CFLAGS += -Wall -Wstrict-prototypes -Werror
CFLAGS += -Wall -Werror
CFLAGS += -Wa,-adhlns=$(<:.c=.lst)
CFLAGS += $(patsubst %,-I%,$(EXTRAINCDIRS))
CFLAGS += $(CSTANDARD)
#CFLAGS += -I../../../block/rev1c
#CFLAGS += -DDEBUG=1
#CFLAGS += -I$(TARCH)
#CFLAGS += -m32

#---------------- Assembler Options ----------------
#  -Wa,...:   tell GCC to pass this to the assembler.
#  -ahlms:    create listing
#  -gstabs:   have the assembler create line number information; note that
#             for use in COFF files, additional information about filenames
#             and function names needs to be present in the assembler source
#             files -- see avr-libc docs [FIXME: not yet described there]
ASFLAGS = -Wa,-adhlns=$(<:.S=.lst),-gstabs


#---------------- Library Options ----------------
# Minimalistic printf version
PRINTF_LIB_MIN = -Wl,-u,vfprintf -lprintf_min

# Floating point printf version (requires MATH_LIB = -lm below)
PRINTF_LIB_FLOAT = -Wl,-u,vfprintf -lprintf_flt

# If this is left blank, then it will use the Standard printf version.
PRINTF_LIB =
#PRINTF_LIB = $(PRINTF_LIB_MIN)
#PRINTF_LIB = $(PRINTF_LIB_FLOAT)


# Minimalistic scanf version
SCANF_LIB_MIN = -Wl,-u,vfscanf -lscanf_min

# Floating point + %[ scanf version (requires MATH_LIB = -lm below)
SCANF_LIB_FLOAT = -Wl,-u,vfscanf -lscanf_flt

# If this is left blank, then it will use the Standard scanf version.
SCANF_LIB =
#SCANF_LIB = $(SCANF_LIB_MIN)
#SCANF_LIB = $(SCANF_LIB_FLOAT)


MATH_LIB = -lm



#---------------- External Memory Options ----------------

# 64 KB of external RAM, starting after internal RAM (ATmega128!),
# used for variables (.data/.bss) and heap (malloc()).
#EXTMEMOPTS = -Wl,-Tdata=0x801100,--defsym=__heap_end=0x80ffff

# 64 KB of external RAM, starting after internal RAM (ATmega128!),
# only used for heap (malloc()).
#EXTMEMOPTS = -Wl,--defsym=__heap_start=0x801100,--defsym=__heap_end=0x80ffff

EXTMEMOPTS =



#---------------- Linker Options ----------------
#  -Wl,...:     tell GCC to pass this to linker.
#    -Map:      create map file
#    --cref:    add cross reference to  map file
LDFLAGS = -Wl,-Map=$(TARCH)/$(TARGET).map,--cref
LDFLAGS += $(EXTMEMOPTS)
LDFLAGS += $(PRINTF_LIB) $(SCANF_LIB) $(MATH_LIB)

#---------------- Programming Options (avrdude) ----------------

# Programming hardware: alf avr910 avrisp bascom bsd
# dt006 pavr picoweb pony-stk200 sp12 stk200 stk500
#
# Type: avrdude -c ?
# to get a full listing.
#
AVRDUDE_PROGRAMMER = avrispmkii

# com1 = serial port. Use lpt1 to connect to parallel port.
AVRDUDE_PORT = usb
#AVRDUDE_PORT = /dev/ttyUSB0
# programmer connected to serial device

AVRDUDE_WRITE_FLASH = -U flash:w:$(TARGET).hex
#AVRDUDE_WRITE_FLASH = -b 9600 -U flash:w:$(TARGET).hex
AVRDUDE_WRITE_EEPROM = -U eeprom:w:$(TARGET).eep


# Uncomment the following if you want avrdude's erase cycle counter.
# Note that this counter needs to be initialized first using -Yn,
# see avrdude manual.
#AVRDUDE_ERASE_COUNTER = -y

# Uncomment the following if you do /not/ wish a verification to be
# performed after programming the device.
#AVRDUDE_NO_VERIFY = -V

# Increase verbosity level.  Please use this when submitting bug
# reports about avrdude. See <http://savannah.nongnu.org/projects/avrdude>
# to submit bug reports.
#AVRDUDE_VERBOSE = -v -v

AVRDUDE_FLAGS = -p $(MCU) -P $(AVRDUDE_PORT) -c $(AVRDUDE_PROGRAMMER)
AVRDUDE_FLAGS += $(AVRDUDE_NO_VERIFY)
AVRDUDE_FLAGS += $(AVRDUDE_VERBOSE)
AVRDUDE_FLAGS += $(AVRDUDE_ERASE_COUNTER)



#---------------- Debugging Options ----------------

# For simulavr only - target MCU frequency.
DEBUG_MFREQ = $(F_CPU)

# Set the DEBUG_UI to either gdb or insight.
# DEBUG_UI = gdb
DEBUG_UI = insight

# Set the debugging back-end to either avarice, simulavr.
DEBUG_BACKEND = avarice
#DEBUG_BACKEND = simulavr

# GDB Init Filename.
GDBINIT_FILE = __avr_gdbinit

# When using avarice settings for the JTAG
JTAG_DEV = /dev/com1

# Debugging port used to communicate between GDB / avarice / simulavr.
DEBUG_PORT = 4242

# Debugging host used to communicate between GDB / avarice / simulavr, normally
#     just set to localhost unless doing some sort of crazy debugging when
#     avarice is running on a different computer.
DEBUG_HOST = localhost



#============================================================================


# Define programs and commands.
SHELL = sh
CC = avr-gcc
OBJCOPY = avr-objcopy
OBJDUMP = avr-objdump
SIZE = avr-size
NM = avr-nm
AVRDUDE = avrdude
REMOVE = rm -f
COPY = cp
WINSHELL = cmd


# Define Messages
# English
MSG_ERRORS_NONE = Errors: none
MSG_BEGIN = -------- begin --------
MSG_END = --------  end  --------
MSG_SIZE_BEFORE = Size before:
MSG_SIZE_AFTER = Size after:
MSG_COFF = Converting to AVR COFF:
MSG_EXTENDED_COFF = Converting to AVR Extended COFF:
MSG_FLASH = Creating load file for Flash:
MSG_EEPROM = Creating load file for EEPROM:
MSG_EXTENDED_LISTING = Creating Extended Listing:
MSG_SYMBOL_TABLE = Creating Symbol Table:
MSG_LINKING = Linking:
MSG_COMPILING = Compiling:
MSG_ASSEMBLING = Assembling:
MSG_CLEANING = Cleaning project:


# Define all listing files.
LST = $(OBJ:.lst=.o)


# Compiler flags to generate dependency files.
#GENDEPFLAGS = -MD -MP -MF .dep/$(@F).d
GENDEPFLAGS =

# Combine all necessary flags and optional flags.
# Add target processor to flags.
ALL_CFLAGS = -mmcu=$(MCU) -I. $(CFLAGS) $(GENDEPFLAGS)
ALL_ASFLAGS = -mmcu=$(MCU) -I. -x assembler-with-cpp $(ASFLAGS)

# generic top level targets for the blocks
BLOCKSTUFF += begin gccversion sizebefore build sizeafter end
#============================================================================

############### back to our stuff
else
CFLAGS := -g -O1 -Wall -DBBSIM
ALL_CFLAGS = $(CFLAGS)
CC     := gcc
BLOCKSTUFF :=
endif

ifeq ($(BB),SIM)
top:	$(OUTPUT)
else
top:	$(TARCH) .allbbobj begin gccversion sizebefore build sizeafter end
endif

# meld defines
MELD2BB := meldCompiler$(EXE_EXT)


# external sources
ALLBBINCLUDE :=
ALLBBSRC  :=
ALLCSRC   :=
ALLO :=

MELDBBINCLUDE :=
MELDBBSRC  :=
MELDCSRC   :=
MELDO :=


# bb 2 c defines
BB2C   := $(BBASE)/bin/compile_bb.pl
BBOUTPUTS :=  localvars.h localtypes.h
MSGFILE :=
ifeq ($(BB),SIM)
BBOUTPUTS +=  msghandlers.c msghandlers.h
MSGFILE := $(TARCH)/system/msghandlers.c
ALLO    += $(TARCH)/system/msghandlers.o
endif

ifeq ($(BB),SIM)
DIRS := hw-sim hw-api system sim meldinterp-runtime
else
DIRS := system hw-api hw-block meldinterp-runtime
endif

FULLDIRS := $(addprefix $(TARCH)/,$(DIRS))

$(FULLDIRS):
	mkdir -p $@

-include $(TARCH)/Makefile.externs
$(TARCH)/Makefile.externs:
	mkdir -p $(FULLDIRS)
	create-extern-makefile.sh $(TARCH)/Makefile.externs $(DIRS)

SIMLIB=-L. -lm -lglut -lGLU -lGL -lpthread

$(TARCH)/system/%.o:	$(BBASE)/src-bobby/system/%.c
	$(CC) -c $(ALL_CFLAGS)  -I$(dir $@) -Isim   -I$(TARCH) -I$(dir $<) -o $@ $<

$(TARCH)/sim/%.o:	$(BBASE)/src-bobby/sim/%.c
	$(CC) -c $(ALL_CFLAGS)  -I$(dir $@) -Isim   -I$(TARCH) -I$(dir $<) -o $@ $<

$(TARCH)/hw-api/%.o:	$(BBASE)/src-bobby/hw-api/%.c
	$(CC) -c $(ALL_CFLAGS)  -I$(dir $@) -Isim   -I$(TARCH) -I$(dir $<) -o $@ $<

$(TARCH)/hw-sim/%.o:	$(BBASE)/src-bobby/hw-sim/%.c
	$(CC) -c $(ALL_CFLAGS)  -I$(dir $@) -Isim   -I$(TARCH) -I$(dir $<) -o $@ $<

$(TARCH)/hw-block/%.o:	$(BBASE)/src-bobby/hw-block/%.c
	$(CC) -c $(ALL_CFLAGS)  -I$(dir $@) -Isim   -I$(TARCH) -I$(dir $<) -o $@ $<

$(TARCH)/meldinterp-runtime/%.o:	$(BBASE)/src-bobby/meldinterp-runtime/%.c
	$(CC) -c $(ALL_CFLAGS)  -I$(dir $@) -Isim   -I$(TARCH) -I$(dir $<) -o $@ $<

$(TARCH)/meldinterp-runtime/%.bb : %.meld
	mkdir -p $(TARCH)/meldinterp-runtime
	$(MELD2BB) -vm bb $< $@

ifeq ($(TARCH),arch-i386-Darwin)
	CFLAGS += -I/usr/X11/include
	LDFLAGS += -L/usr/X11/lib
endif

# translate sources to obj

ifeq ($(SRCEXT),.meld)
MELDBBSRC += $(patsubst %.meld,$(TARCH)/meldinterp-runtime/%.bb,$(SOURCE))
MELDCSRC += $(patsubst %.meld,$(TARCH)/meldinterp-runtime/%.c,$(SOURCE))
OBJ += $(patsubst %.meld,$(TARCH)/meldinterp-runtime/%.o,$(SOURCE))
endif
SRC    := $(SOURCE) $(LDPSRC) $(ALLCSRC) $(ALLBBSRC) $(MELDCSRC) $(MELDBBSRC) $(MSGFILE)
OBJ    += $(LDPO) $(ALLO) $(MELDO)

$(OUTPUT):	.allbbobj $(OBJ) $(BLOCKSTUFF)
	$(CC) $(LDFLAGS) -o $(OUTPUT) $(OBJ)  $(SIMLIB)

-include $(TARCH)/.tmp
$(TARCH)/.tmp:
	mkdir -p $(TARCH)
	touch $(TARCH)/.tmp

# including .allbbobj causes Make to restart once it is built. This is
# necessary for Make to be able to compile the .c files in the
# $(TARCH)/system for some reason I don't currently understand

-include .allbbobj
.allbbobj:	$(BBINCLUDE) $(ALLBBSRC) $(MELDBBSRC)
	$(BB2C) $(BB2C_FLAGS) -c "$(CFLAGS) -Isim -I$(TARCH)" --basePath $(BBASE)/src-bobby -d $(TARCH) --sethPath $(ALLBBSRC) $(MELDBBSRC)
	touch .allbbobj

%.o:	%.c
	$(CC) -c $(ALL_CFLAGS)  -Isim   -I$(dir $<) -I$(subst $(TARCH),$(BBASE)/src-bobby,$(dir $<)) -o $@ $<


.phony:	clean wipeout all begin finish end sizebefore sizeafter gccversion \
build elf hex eep lss sym coff extcoff \
clean clean_list program debug gdb-config

clean:
	/bin/rm -f $(BBOUTPUTS) *.o $(MELDBB) $(TARCH)/*/*.o

wipeout:
	/bin/rm -f $(BBOUTPUTS) *.o .allbbobj $(MELDBB)
	/bin/rm -rf $(TARCH)

build: elf hex eep lss sym

elf: $(TARCH)/$(TARGET).elf
hex: $(TARCH)/$(TARGET).hex
eep: $(TARCH)/$(TARGET).eep
lss: $(TARCH)/$(TARGET).lss
sym: $(TARCH)/$(TARGET).sym

#blinky blocks apis/system code



# Eye candy.
# AVR Studio 3.x does not check make's exit code but relies on
# the following magic strings to be generated by the compile job.
begin:
	@echo
	@echo $(MSG_BEGIN)

end:
	@echo $(MSG_END)
	@echo


# Display size of file.
HEXSIZE = $(SIZE) --target=$(FORMAT) $(TARCH)/$(TARGET).hex
ELFSIZE = $(SIZE) -C $(TARCH)/$(TARGET).elf
AVRMEM = avr-mem.sh $(TARCH)/$(TARGET).elf $(MCU)

sizebefore:
	@if test -f $(TARCH)/$(TARGET).elf; then echo; echo $(MSG_SIZE_BEFORE); $(ELFSIZE); \
	$(AVRMEM) 2>/dev/null; echo; fi

sizeafter:
	@if test -f $(TARCH)/$(TARGET).elf; then echo; echo $(MSG_SIZE_AFTER); $(ELFSIZE); \
	$(AVRMEM) 2>/dev/null; echo; fi



# Display compiler version information.
gccversion :
	@$(CC) --version



# Program the device.
program: $(TARGET).hex $(TARGET).eep
	$(AVRDUDE) $(AVRDUDE_FLAGS) $(AVRDUDE_WRITE_FLASH) $(AVRDUDE_WRITE_EEPROM)


# Generate avr-gdb config/init file which does the following:
#     define the reset signal, load the target file, connect to target, and set
#     a breakpoint at main().
gdb-config:
	@$(REMOVE) $(GDBINIT_FILE)
	@echo define reset >> $(GDBINIT_FILE)
	@echo SIGNAL SIGHUP >> $(GDBINIT_FILE)
	@echo end >> $(GDBINIT_FILE)
	@echo file $(TARCH)/$(TARGET).elf >> $(GDBINIT_FILE)
	@echo target remote $(DEBUG_HOST):$(DEBUG_PORT)  >> $(GDBINIT_FILE)
ifeq ($(DEBUG_BACKEND),simulavr)
	@echo load  >> $(GDBINIT_FILE)
endif
	@echo break main >> $(GDBINIT_FILE)

debug: gdb-config $(TARCH)/$(TARGET).elf
ifeq ($(DEBUG_BACKEND), avarice)
	@echo Starting AVaRICE - Press enter when "waiting to connect" message displays.
	@$(WINSHELL) /c start avarice --jtag $(JTAG_DEV) --erase --program --file \
	$(TARCH)/$(TARGET).elf $(DEBUG_HOST):$(DEBUG_PORT)
	@$(WINSHELL) /c pause
else
	@$(WINSHELL) /c start simulavr --gdbserver --device $(MCU) --clock-freq \
	$(DEBUG_MFREQ) --port $(DEBUG_PORT)
endif
	@$(WINSHELL) /c start avr-$(DEBUG_UI) --command=$(GDBINIT_FILE)




# Convert ELF to COFF for use in debugging / simulating in AVR Studio or VMLAB.
COFFCONVERT=$(OBJCOPY) --debugging \
--change-section-address .data-0x800000 \
--change-section-address .bss-0x800000 \
--change-section-address .noinit-0x800000 \
--change-section-address .eeprom-0x810000


coff: $(TARCH)/$(TARGET).elf
	@echo
	@echo $(MSG_COFF) $(TARCH)/$(TARGET).cof
	$(COFFCONVERT) -O coff-avr $< $(TARCH)/$(TARGET).cof


extcoff: $(TARCH)/$(TARGET).elf
	@echo
	@echo $(MSG_EXTENDED_COFF) $(TARCH)/$(TARGET).cof
	$(COFFCONVERT) -O coff-ext-avr $< $(TARCH)/$(TARGET).cof



# Create final output files (.hex, .eep) from ELF output file.
%.hex: %.elf
	@echo
	@echo $(MSG_FLASH) $@
	$(OBJCOPY) -O $(FORMAT) -R .eeprom $< $@

%.eep: %.elf
	@echo
	@echo $(MSG_EEPROM) $@
	-$(OBJCOPY) -j .eeprom --set-section-flags=.eeprom="alloc,load" \
	--change-section-lma .eeprom=0 -O $(FORMAT) $< $@

# Create extended listing file from ELF output file.
%.lss: %.elf
	@echo
	@echo $(MSG_EXTENDED_LISTING) $@
	$(OBJDUMP) -h -S $< > $@

# Create a symbol table from ELF output file.
%.sym: %.elf
	@echo
	@echo $(MSG_SYMBOL_TABLE) $@
	$(NM) -n $< > $@



# Link: create ELF output file from object files.
.SECONDARY : $(TARGET).elf
.PRECIOUS : $(OBJ)
$(TARCH)/$(TARGET).elf: $(TARCH) .allbbobj $(OBJ)
	@echo
	@echo $(MSG_LINKING) $@
	$(CC) $(ALL_CFLAGS) $(OBJ) --output $@ $(LDFLAGS)

clean_list :
	@echo
	@echo $(MSG_CLEANING)
	$(REMOVE) $(TARCH)/$(TARGET).hex
	$(REMOVE) $(TARCH)/$(TARGET).eep
	$(REMOVE) $(TARCH)/$(TARGET).cof
	$(REMOVE) $(TARCH)/$(TARGET).elf
	$(REMOVE) $(TARCH)/$(TARGET).map
	$(REMOVE) $(TARCH)/$(TARGET).sym
	$(REMOVE) $(TARCH)/$(TARGET).lss
	$(REMOVE) $(OBJ)
	$(REMOVE) $(LST)
	$(REMOVE) $(SRC:.c=.s)
	$(REMOVE) $(SRC:.c=.d)
	$(REMOVE) .dep/*
	/bin/rm -f $(BBOUTPUTS) *.o .allbbobj $(MELDBB) $(TARCH)/*/*.o
