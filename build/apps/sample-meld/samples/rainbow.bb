const unsigned char meld_prog[] = {
/* NUMBER OF PREDICATES */
0x13, 
/* NUMBER OF RULES */
0xb, 
/* OFFSETS TO PREDICATE DESCRIPTORS */
0x3e, 0, 
0x44, 0, 
0x4b, 0, 
0x54, 0, 
0x5c, 0, 
0x63, 0, 
0x6a, 0, 
0x70, 0, 
0x77, 0, 
0x7d, 0, 
0x84, 0, 
0x8a, 0, 
0x92, 0, 
0x99, 0, 
0xa0, 0, 
0xa7, 0, 
0xad, 0, 
0xb4, 0, 
0xbb, 0, 
/* OFFSETS TO RULE DESCRIPTORS */
0xc3, 0, 
0xc8, 0, 
0xcd, 0, 
0xd2, 0, 
0xd7, 0, 
0xdc, 0, 
0xe2, 0, 
0xe7, 0, 
0xed, 0, 
0xf3, 0, 
0xf9, 0, 
/* PREDICATE DESCRIPTORS */
0xfe, 0, 0x4, 0, 0, 0, 
0xff, 0, 0x4, 0, 0x1, 0x1, 0x1, 
0, 0x1, 0x4, 0, 0x1, 0x3, 0, 0, 0, 
0x1, 0x1, 0x4, 0, 0x1, 0x2, 0x2, 0x9, 
0x2, 0x1, 0x4, 0, 0x1, 0x1, 0x9, 
0x3, 0x1, 0x4, 0, 0x1, 0x1, 0x1, 
0x4, 0x1, 0x4, 0, 0x1, 0, 
0x5, 0x1, 0, 0, 0x1, 0x1, 0, 
0x6, 0x1, 0x4, 0, 0x1, 0, 
0x7, 0x1, 0, 0, 0x1, 0x1, 0, 
0x27, 0x1, 0x4, 0, 0x1, 0, 
0x28, 0x1, 0x20, 0, 0, 0x2, 0x2, 0, 
0xd7, 0x1, 0, 0, 0x1, 0x1, 0, 
0xd8, 0x1, 0x1, 0x20, 0x1, 0x1, 0, 
0x24, 0x2, 0x20, 0, 0, 0x1, 0x2, 
0x6a, 0x2, 0, 0, 0x1, 0, 
0x7d, 0x2, 0x20, 0, 0, 0x1, 0x2, 
0xb5, 0x2, 0x20, 0, 0, 0x1, 0x2, 
0xee, 0x2, 0, 0, 0x1, 0x2, 0x2, 0, 
/* RULE DESCRIPTORS */
0x95, 0x3, 0, 0x1, 0, 
0xbf, 0x3, 0x1, 0x1, 0xb, 
0xc0, 0x3, 0x1, 0x1, 0x9, 
0xc1, 0x3, 0x1, 0x1, 0xb, 
0xc2, 0x3, 0x1, 0x1, 0xb, 
0xc3, 0x3, 0x1, 0x2, 0xd, 0xb, 
0xc4, 0x3, 0x1, 0x1, 0xf, 
0xc5, 0x3, 0x1, 0x2, 0x11, 0x12, 
0xc6, 0x3, 0x1, 0x2, 0xe, 0x12, 
0xc7, 0x3, 0x1, 0x2, 0x12, 0x10, 
0xc8, 0x3, 0x1, 0x1, 0xd, 
/* PREDICATE BYTECODE */
/* Predicate 0: */0xd0, 
/* Predicate 1: */0, 
/* Predicate 2: */0, 
/* Predicate 3: */0, 
/* Predicate 4: */0, 
/* Predicate 5: */0, 
/* Predicate 6: */0, 
/* Predicate 7: */0, 
/* Predicate 8: */0, 
/* Predicate 9: */0x10, 0x2, 0, 0, 0, 0x22, 0, 0, 0x2, 0x1f, 0, 0, 0, 0, 0x3, 0x3b, 0x2, 0x3, 0x1, 0x60, 0x1, 0xc, 0, 0, 0, 0x11, 0x40, 0xf, 0x1, 0x78, 0x1, 0, 
/* Predicate 10: */0, 
/* Predicate 11: */0x10, 0x1, 0, 0, 0, 0x22, 0x1, 0, 0x2, 0x1f, 0, 0, 0, 0, 0x3, 0x3b, 0x2, 0x3, 0x1, 0x60, 0x1, 0x11, 0, 0, 0, 0x11, 0x40, 0xe, 0x1, 0x21, 0, 0, 0, 0x1, 0x78, 0x1, 0x10, 0x3, 0, 0, 0, 0x22, 0x1, 0, 0x2, 0x1f, 0x5, 0, 0, 0, 0x3, 0x3b, 0x2, 0x3, 0x1, 0x60, 0x1, 0x11, 0, 0, 0, 0x11, 0x40, 0x10, 0x1, 0x21, 0, 0, 0, 0x1, 0x78, 0x1, 0x10, 0x4, 0, 0, 0, 0x22, 0x1, 0, 0x1, 0x1f, 0, 0, 0, 0, 0x2, 0x3c, 0x1, 0x2, 0x1, 0x60, 0x1, 0x25, 0, 0, 0, 0x22, 0x1, 0, 0x1, 0x1f, 0x5, 0, 0, 0, 0x2, 0x3c, 0x1, 0x2, 0x1, 0x60, 0x1, 0x11, 0, 0, 0, 0x11, 0x40, 0x11, 0x1, 0x21, 0, 0, 0, 0x1, 0x78, 0x1, 0x10, 0x5, 0, 0, 0, 0x2, 0, 0, 0, 0, 0, 0, 0, 0, 0xd, 0x1, 0x1, 0x15, 0, 0, 0, 0x29, 0, 0, 0, 0, 0x11, 0x40, 0x12, 0x2, 0x28, 0, 0x2, 0x21, 0, 0x1, 0x1, 0x2, 0x22, 0, 0, 0x3, 0x8, 0x2, 0x3, 0x1, 0, 
/* Predicate 12: */0, 
/* Predicate 13: */0x10, 0x5, 0, 0, 0, 0x2, 0, 0, 0, 0, 0, 0, 0, 0, 0xb, 0x1, 0x1, 0x15, 0, 0, 0, 0x29, 0, 0, 0, 0, 0x11, 0x40, 0x12, 0x2, 0x28, 0, 0x2, 0x21, 0, 0, 0x1, 0x2, 0x22, 0, 0x1, 0x3, 0x8, 0x2, 0x3, 0x1, 0x10, 0xa, 0, 0, 0, 0x11, 0x40, 0x7, 0x1, 0x22, 0, 0, 0x2, 0x1f, 0x9, 0, 0, 0, 0x3, 0x7d, 0x2, 0x3, 0x2, 0x26, 0x2, 0, 0x1, 0x79, 0x1, 0, 
/* Predicate 14: */0x10, 0x8, 0, 0, 0, 0x2, 0, 0, 0, 0, 0, 0, 0, 0, 0x12, 0x1, 0x1, 0x15, 0, 0, 0, 0x40, 0, 0, 0, 0, 0x22, 0, 0, 0x2, 0x22, 0, 0x1, 0x3, 0x39, 0x2, 0x3, 0x2, 0x60, 0x2, 0x1e, 0, 0, 0, 0x11, 0x40, 0xd, 0x2, 0x22, 0x1, 0x1, 0x3, 0x1f, 0x1, 0, 0, 0, 0x4, 0x3d, 0x3, 0x4, 0x3, 0x26, 0x3, 0, 0x2, 0x78, 0x2, 0x1, 0, 
/* Predicate 15: */0x10, 0x6, 0, 0, 0, 0x11, 0x40, 0xd, 0, 0x1e, 0, 0, 0, 0, 0, 0, 0x78, 0, 0, 
/* Predicate 16: */0x10, 0x9, 0, 0, 0, 0x2, 0, 0, 0, 0, 0, 0, 0, 0, 0x12, 0x1, 0, 0x19, 0, 0, 0, 0x32, 0, 0, 0, 0x1, 0, 0x2, 0, 0, 0x11, 0x40, 0xd, 0x2, 0x22, 0x1, 0x1, 0x3, 0x1f, 0x1, 0, 0, 0, 0x4, 0x3a, 0x3, 0x4, 0x3, 0x26, 0x3, 0, 0x2, 0x78, 0x2, 0x1, 0, 
/* Predicate 17: */0x10, 0x7, 0, 0, 0, 0x2, 0, 0, 0, 0, 0, 0, 0, 0, 0x12, 0x1, 0x1, 0x15, 0, 0, 0, 0x33, 0, 0, 0, 0, 0x22, 0, 0, 0x2, 0x22, 0, 0x1, 0x3, 0x39, 0x2, 0x3, 0x2, 0x60, 0x2, 0x11, 0, 0, 0, 0x11, 0x40, 0xd, 0x2, 0x21, 0x1, 0x1, 0, 0x2, 0x78, 0x2, 0x1, 0, 
/* Predicate 18: */0x10, 0x7, 0, 0, 0, 0x2, 0, 0, 0, 0, 0, 0, 0, 0, 0x11, 0x1, 0, 0x19, 0, 0, 0, 0x25, 0, 0, 0, 0x1, 0, 0x2, 0, 0, 0x11, 0x40, 0xd, 0x2, 0x21, 0x1, 0, 0, 0x2, 0x78, 0x2, 0x1, 0x10, 0x8, 0, 0, 0, 0x2, 0, 0, 0, 0, 0, 0, 0, 0, 0xe, 0x1, 0, 0x19, 0, 0, 0, 0x32, 0, 0, 0, 0x1, 0, 0x2, 0, 0, 0x11, 0x40, 0xd, 0x2, 0x22, 0x1, 0, 0x3, 0x1f, 0x1, 0, 0, 0, 0x4, 0x3d, 0x3, 0x4, 0x3, 0x26, 0x3, 0, 0x2, 0x78, 0x2, 0x1, 0x10, 0x9, 0, 0, 0, 0x2, 0, 0, 0, 0, 0, 0, 0, 0, 0x10, 0x1, 0x1, 0x15, 0, 0, 0, 0x40, 0, 0, 0, 0, 0x22, 0, 0, 0x2, 0x22, 0, 0x1, 0x3, 0x39, 0x2, 0x3, 0x2, 0x60, 0x2, 0x1e, 0, 0, 0, 0x11, 0x40, 0xd, 0x2, 0x22, 0x1, 0, 0x3, 0x1f, 0x1, 0, 0, 0, 0x4, 0x3a, 0x3, 0x4, 0x3, 0x26, 0x3, 0, 0x2, 0x78, 0x2, 0x1, 0, 
/* RULE BYTECODE */
/* Rule 0: */0x10, 0, 0, 0, 0, 0x5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x1, 0x15, 0, 0, 0, 0x24, 0, 0, 0, 0, 0x11, 0x80, 0, 0x23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0xf0, 0x1, 0, 
/* Rule 1: */0, 
/* Rule 2: */0, 
/* Rule 3: */0, 
/* Rule 4: */0, 
/* Rule 5: */0, 
/* Rule 6: */0, 
/* Rule 7: */0, 
/* Rule 8: */0, 
/* Rule 9: */0, 
/* Rule 10: */0, };

char *tuple_names[] = {"_init", "set-priority", "setcolor", "setedgelabel", "write-string", "add-priority", "schedule-next", "setcolor2", "stop-program", "vacant", "tap", "neighbor", "neighborCount", "level", "bottomNeighbor", "noBottomNeighbor", "topNeighbor", "sideNeighbor", "neighbor-level", };

char *rule_names[] = {"init -o axioms", "!neighbor(X, MV2), MV2 = 0 -o !bottomNeighbor(X).", "!vacant(MV3), MV3 = 0 -o !noBottomNeighbor().", "!neighbor(X, MV4), MV4 = 5 -o !topNeighbor(X).", "!neighbor(X, P), P != 0, P != 5 -o !sideNeighbor(X).", "!neighbor(B, MV1), !level(H) -o !neighbor-level(host-id, H)@B.", "!noBottomNeighbor() -o !level(0).", "!neighbor-level(X, H), !sideNeighbor(MV5), MV5 = X -o !level(H).", "!neighbor-level(X, BH), !bottomNeighbor(MV6), MV6 = X -o !level(BH + 1).", "!topNeighbor(X), !neighbor-level(MV7, TH), MV7 = X -o !level(TH - 1).", "!level(Color) -o !setColor2(Color % 9).", };

#include "extern_functions.bbh"
Register (*extern_functs[])() = {};

int extern_functs_args[] = {};
