const unsigned char meld_prog[] = {0xB, 0xC, 0x17, 0x20, 0x29, 0x35, 0x3E, 0x49, 0x51, 0x5A, 0x64, 0x6E, 0x78, 0x0, 0x20, 0x0, 0x1, 0x4, 0x0, 0x2, 0x2, 0x0, 0x5, 0xA2, 0x0, 0x0, 0x0, 0x4, 0x2, 0x0, 0x2, 0x0, 0xA3, 0x0, 0x0, 0x0, 0x3, 0x2, 0x0, 0x2, 0x0, 0xC7, 0x0, 0x0, 0x0, 0x5, 0x5, 0x0, 0x2, 0x0, 0x0, 0x0, 0x0, 0xC8, 0x0, 0x0, 0x0, 0x7, 0x2, 0x0, 0x2, 0x0, 0xC9, 0x0, 0x20, 0x0, 0x2, 0x4, 0x0, 0x2, 0x2, 0x0, 0x5, 0x4E, 0x1, 0x4, 0x0, 0x6, 0x1, 0x0, 0x2, 0x4F, 0x1, 0x1, 0x21, 0x8, 0x2, 0x0, 0x2, 0x0, 0xEB, 0x1, 0x0, 0x0, 0x9, 0x3, 0x0, 0x2, 0x0, 0x0, 0x1B, 0x2, 0x0, 0x0, 0xA, 0x3, 0x0, 0x2, 0x0, 0x0, 0x48, 0x2, 0x0, 0x0, 0xB, 0x3, 0x0, 0x2, 0x0, 0x0, 0x37, 0xE0, 0x31, 0x21, 0x3, 0x0, 0x41, 0x62, 0x30, 0x82, 0x1, 0x0, 0x0, 0x2, 0x30, 0x82, 0x0, 0x0, 0x1, 0x2, 0x30, 0x82, 0x2, 0x0, 0x2, 0x2, 0x38, 0x42, 0x3, 0x2, 0x30, 0xA3, 0x3, 0x0, 0x8, 0x43, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x37, 0xE0, 0xC2, 0x4, 0x23, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x61, 0x18, 0x0, 0x41, 0xE2, 0x30, 0x82, 0x0, 0x0, 0x0, 0x2, 0x30, 0x82, 0x1, 0x0, 0x1, 0x2, 0x8, 0x42, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x37, 0xE0, 0xA0, 0x7, 0x2A, 0x0, 0x0, 0x42, 0x0, 0x0, 0x37, 0xE1, 0x42, 0x22, 0x30, 0x82, 0x1, 0x0, 0x0, 0x2, 0x30, 0x82, 0x2, 0x0, 0x1, 0x2, 0x30, 0x82, 0x1, 0x1, 0x2, 0x2, 0x30, 0xA3, 0x3, 0x0, 0x8, 0x43, 0x1, 0x0, 0x0, 0x0, 0x0, 0x1, 0x37, 0xE0, 0xA0, 0x7, 0x2A, 0x0, 0x0, 0x42, 0x0, 0x0, 0x37, 0xE1, 0x42, 0x62, 0x30, 0x82, 0x1, 0x0, 0x0, 0x2, 0x30, 0x82, 0x2, 0x0, 0x1, 0x2, 0x30, 0x82, 0x1, 0x1, 0x2, 0x2, 0x30, 0xA3, 0x3, 0x0, 0x8, 0x43, 0x1, 0x0, 0x0, 0x0, 0x0, 0x1, 0x37, 0xE0, 0xA0, 0x7, 0x2A, 0x0, 0x0, 0x42, 0x0, 0x0, 0x37, 0xE1, 0x42, 0xA2, 0x30, 0x82, 0x1, 0x0, 0x0, 0x2, 0x30, 0x82, 0x2, 0x0, 0x1, 0x2, 0x30, 0x82, 0x1, 0x1, 0x2, 0x2, 0x30, 0xA3, 0x3, 0x0, 0x8, 0x43, 0x1, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x37, 0xE0, 0xA0, 0x5, 0x2A, 0x0, 0x0, 0x42, 0x0, 0x0, 0x37, 0xE1, 0x42, 0x22, 0x30, 0x82, 0x1, 0x1, 0x0, 0x2, 0x30, 0x82, 0x2, 0x1, 0x1, 0x2, 0x30, 0x82, 0x1, 0x0, 0x2, 0x2, 0x30, 0xA3, 0x3, 0x1, 0x8, 0x43, 0x1, 0x0, 0x0, 0x0, 0x0, 0x1, 0x37, 0xE0, 0xA0, 0x5, 0x2A, 0x0, 0x0, 0x42, 0x0, 0x0, 0x37, 0xE1, 0x42, 0x62, 0x30, 0x82, 0x1, 0x1, 0x0, 0x2, 0x30, 0x82, 0x2, 0x1, 0x1, 0x2, 0x30, 0x82, 0x1, 0x0, 0x2, 0x2, 0x30, 0xA3, 0x3, 0x1, 0x8, 0x43, 0x1, 0x0, 0x0, 0x0, 0x0, 0x1, 0x37, 0xE0, 0xA0, 0x5, 0x2A, 0x0, 0x0, 0x42, 0x0, 0x0, 0x37, 0xE1, 0x42, 0xA2, 0x30, 0x82, 0x1, 0x1, 0x0, 0x2, 0x30, 0x82, 0x2, 0x1, 0x1, 0x2, 0x30, 0x82, 0x1, 0x0, 0x2, 0x2, 0x30, 0xA3, 0x3, 0x1, 0x8, 0x43, 0x1, 0x0, 0x0, 0x0, 0x0, 0x1, 0x37, 0xE0, 0x41, 0x21, 0x30, 0x82, 0x0, 0x0, 0x0, 0x1, 0x30, 0x82, 0x1, 0x0, 0x1, 0x1, 0x8, 0x21, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x37, 0xE0, 0xC2, 0x4, 0x21, 0x1, 0x0, 0x5, 0x0, 0x0, 0x0, 0x61, 0x24, 0x0, 0xC2, 0x4, 0x41, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x62, 0x18, 0x0, 0x41, 0xE3, 0x30, 0x82, 0x0, 0x0, 0x0, 0x3, 0x30, 0x82, 0x2, 0x0, 0x1, 0x3, 0x8, 0x63, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x37, 0xE0, 0xC2, 0x4, 0x2F, 0x2, 0x0, 0x1, 0x0, 0x0, 0x0, 0x38, 0x62, 0xC2, 0x4, 0x63, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x63, 0x16, 0x0, 0x41, 0xE4, 0x30, 0x82, 0x0, 0x0, 0x0, 0x4, 0x38, 0x82, 0x1, 0x4, 0x8, 0x84, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x37, 0xE0, 0xC2, 0x4, 0x31, 0x2, 0x0, 0x1, 0x0, 0x0, 0x0, 0x38, 0x62, 0xC2, 0x4, 0x63, 0x1, 0x0, 0x5, 0x0, 0x0, 0x0, 0x63, 0x16, 0x0, 0x41, 0xE4, 0x30, 0x82, 0x0, 0x0, 0x0, 0x4, 0x38, 0x82, 0x1, 0x4, 0x8, 0x84, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, };


char *tuple_names[] = {"neighbor", "neighborCount", "vacant", "setColor", "setColor2", "____robhgien", "tap", "level", "__fact1", "__fact2", "__fact3", };

#include "extern_functions.bbh"
Register (*extern_functs[])() = {};

int extern_functs_args[] = {};



/*
PROCESS neighbor:
MOVE tuple TO reg 0
MOVE reverse[0.3] TO reg 1
ALLOC ____robhgien TO reg 2
MOVE 0.1 TO 2.0
MOVE 0.0 TO 2.1
MOVE 0.2 TO 2.2
MOVE reg 1 TO 2.3
MOVE 0.3 TO reg 3
SEND reg 2 TO reg 3 IN 0ms
RETURN


PROCESS neighborCount:
RETURN


PROCESS vacant:
MOVE tuple TO reg 0
SET reg 1 TO 0.1 INT EQUAL 0
IF (1) THEN
ALLOC level TO reg 2
MOVE 0.0 TO 2.0
MOVE 0.1 TO 2.1
SEND reg 2 TO reg 2 IN 0ms
ENDIF
RETURN


PROCESS setColor:
RETURN


PROCESS setColor2:
RETURN


PROCESS ____robhgien:
MOVE tuple TO reg 0
ITERATE OVER level MATCHING 
  (match).0=0.0
MOVE tuple TO reg 1
ALLOC __fact1 TO reg 2
MOVE 0.1 TO 2.0
MOVE 0.2 TO 2.1
MOVE 1.1 TO 2.2
MOVE 0.3 TO reg 3
SEND reg 2 TO reg 3 IN 0ms
NEXT
MOVE tuple TO reg 0
ITERATE OVER level MATCHING 
  (match).0=0.0
MOVE tuple TO reg 1
ALLOC __fact2 TO reg 2
MOVE 0.1 TO 2.0
MOVE 0.2 TO 2.1
MOVE 1.1 TO 2.2
MOVE 0.3 TO reg 3
SEND reg 2 TO reg 3 IN 0ms
NEXT
MOVE tuple TO reg 0
ITERATE OVER level MATCHING 
  (match).0=0.0
MOVE tuple TO reg 1
ALLOC __fact3 TO reg 2
MOVE 0.1 TO 2.0
MOVE 0.2 TO 2.1
MOVE 1.1 TO 2.2
MOVE 0.3 TO reg 3
SEND reg 2 TO reg 3 IN 0ms
NEXT
RETURN


PROCESS tap:
RETURN


PROCESS level (max 1) :
MOVE tuple TO reg 0
ITERATE OVER ____robhgien MATCHING 
  (match).0=0.0
MOVE tuple TO reg 1
ALLOC __fact1 TO reg 2
MOVE 1.1 TO 2.0
MOVE 1.2 TO 2.1
MOVE 0.1 TO 2.2
MOVE 1.3 TO reg 3
SEND reg 2 TO reg 3 IN 0ms
NEXT
MOVE tuple TO reg 0
ITERATE OVER ____robhgien MATCHING 
  (match).0=0.0
MOVE tuple TO reg 1
ALLOC __fact2 TO reg 2
MOVE 1.1 TO 2.0
MOVE 1.2 TO 2.1
MOVE 0.1 TO 2.2
MOVE 1.3 TO reg 3
SEND reg 2 TO reg 3 IN 0ms
NEXT
MOVE tuple TO reg 0
ITERATE OVER ____robhgien MATCHING 
  (match).0=0.0
MOVE tuple TO reg 1
ALLOC __fact3 TO reg 2
MOVE 1.1 TO 2.0
MOVE 1.2 TO 2.1
MOVE 0.1 TO 2.2
MOVE 1.3 TO reg 3
SEND reg 2 TO reg 3 IN 0ms
NEXT
MOVE tuple TO reg 0
ALLOC setColor2 TO reg 1
MOVE 0.0 TO 1.0
MOVE 0.1 TO 1.1
SEND reg 1 TO reg 1 IN 0ms
RETURN


PROCESS __fact1:
MOVE tuple TO reg 0
SET reg 1 TO 0.1 INT NOT EQUAL 5
IF (1) THEN
SET reg 2 TO 0.1 INT NOT EQUAL 0
IF (2) THEN
ALLOC level TO reg 3
MOVE 0.0 TO 3.0
MOVE 0.2 TO 3.1
SEND reg 3 TO reg 3 IN 0ms
ENDIF
ENDIF
RETURN


PROCESS __fact2:
MOVE tuple TO reg 0
SET reg 1 TO 0.2 INT_PLUS 1
MOVE reg 1 TO reg 2
SET reg 3 TO 0.1 INT EQUAL 0
IF (3) THEN
ALLOC level TO reg 4
MOVE 0.0 TO 4.0
MOVE reg 2 TO 4.1
SEND reg 4 TO reg 4 IN 0ms
ENDIF
RETURN


PROCESS __fact3:
MOVE tuple TO reg 0
SET reg 1 TO 0.2 INT_MINUS 1
MOVE reg 1 TO reg 2
SET reg 3 TO 0.1 INT EQUAL 5
IF (3) THEN
ALLOC level TO reg 4
MOVE 0.0 TO 4.0
MOVE reg 2 TO 4.1
SEND reg 4 TO reg 4 IN 0ms
ENDIF
RETURN


*/

