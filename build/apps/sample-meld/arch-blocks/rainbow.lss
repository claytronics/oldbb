
arch-blocks/rainbow.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000082ea  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000932  00802000  000082ea  0000839e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000657  00802932  00802932  00008cd0  2**0
                  ALLOC
  3 .eeprom       00000004  00810000  00810000  00008cd0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         0000549c  00000000  00000000  00008cd4  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      0000139f  00000000  00000000  0000e170  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000022  00000000  00000000  0000f50f  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000004b8  00000000  00000000  0000f531  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   000110a3  00000000  00000000  0000f9e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000443e  00000000  00000000  00020a8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00003e5f  00000000  00000000  00024eca  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  0000252c  00000000  00000000  00028d2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00003ada  00000000  00000000  0002b258  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000a0b8  00000000  00000000  0002ed32  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000002d8  00000000  00000000  00038dea  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 0c 01 	jmp	0x218	; 0x218 <__ctors_end>
       4:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
       8:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
       c:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      10:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      14:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      18:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      1c:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      20:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      24:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      28:	0c 94 b1 14 	jmp	0x2962	; 0x2962 <__vector_10>
      2c:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      30:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      34:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      38:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      3c:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      40:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      44:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      48:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      4c:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      50:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      54:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      58:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      5c:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      60:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      64:	0c 94 bf 13 	jmp	0x277e	; 0x277e <__vector_25>
      68:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      6c:	0c 94 eb 13 	jmp	0x27d6	; 0x27d6 <__vector_27>
      70:	0c 94 ab 12 	jmp	0x2556	; 0x2556 <__vector_28>
      74:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      78:	0c 94 d7 12 	jmp	0x25ae	; 0x25ae <__vector_30>
      7c:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      80:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      84:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      88:	0c 94 32 0d 	jmp	0x1a64	; 0x1a64 <__vector_34>
      8c:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      90:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      94:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      98:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      9c:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      a0:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      a4:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      a8:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      ac:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      b0:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      b4:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      b8:	0c 94 71 0d 	jmp	0x1ae2	; 0x1ae2 <__vector_46>
      bc:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      c0:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      c4:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      c8:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      cc:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      d0:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      d4:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      d8:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      dc:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      e0:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      e4:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      e8:	0c 94 63 13 	jmp	0x26c6	; 0x26c6 <__vector_58>
      ec:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      f0:	0c 94 8f 13 	jmp	0x271e	; 0x271e <__vector_60>
      f4:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      f8:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      fc:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
     100:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
     104:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
     108:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
     10c:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
     110:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
     114:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
     118:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
     11c:	0c 94 f8 14 	jmp	0x29f0	; 0x29f0 <__vector_71>
     120:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
     124:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
     128:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
     12c:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
     130:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
     134:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
     138:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
     13c:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
     140:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
     144:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
     148:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
     14c:	0c 94 d4 15 	jmp	0x2ba8	; 0x2ba8 <__vector_83>
     150:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
     154:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
     158:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
     15c:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
     160:	0c 94 1b 14 	jmp	0x2836	; 0x2836 <__vector_88>
     164:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
     168:	0c 94 47 14 	jmp	0x288e	; 0x288e <__vector_90>
     16c:	0c 94 4f 12 	jmp	0x249e	; 0x249e <__vector_91>
     170:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
     174:	0c 94 7b 12 	jmp	0x24f6	; 0x24f6 <__vector_93>
     178:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
     17c:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
     180:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
     184:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
     188:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
     18c:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
     190:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
     194:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
     198:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
     19c:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
     1a0:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
     1a4:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
     1a8:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
     1ac:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
     1b0:	0c 94 d0 0d 	jmp	0x1ba0	; 0x1ba0 <__vector_108>
     1b4:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
     1b8:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
     1bc:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
     1c0:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
     1c4:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
     1c8:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
     1cc:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
     1d0:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
     1d4:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
     1d8:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
     1dc:	0c 94 07 13 	jmp	0x260e	; 0x260e <__vector_119>
     1e0:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
     1e4:	0c 94 33 13 	jmp	0x2666	; 0x2666 <__vector_121>
     1e8:	cb 25       	eor	r28, r11
     1ea:	fd 24       	eor	r15, r13
     1ec:	de 25       	eor	r29, r14
     1ee:	12 25       	eor	r17, r2
     1f0:	f2 25       	eor	r31, r2
     1f2:	27 25       	eor	r18, r7
     1f4:	05 26       	eor	r0, r21
     1f6:	3c 25       	eor	r19, r12
     1f8:	18 26       	eor	r1, r24
     1fa:	51 25       	eor	r21, r1
     1fc:	34 26       	eor	r3, r20
     1fe:	66 25       	eor	r22, r6
     200:	4f 26       	eor	r4, r31
     202:	7b 25       	eor	r23, r11
     204:	66 26       	eor	r6, r22
     206:	88 25       	eor	r24, r8
     208:	73 26       	eor	r7, r19
     20a:	97 25       	eor	r25, r7
     20c:	80 26       	eor	r8, r16
     20e:	a6 25       	eor	r26, r6
     210:	92 26       	eor	r9, r18
     212:	b9 25       	eor	r27, r9
     214:	a5 26       	eor	r10, r21
     216:	b3 26       	eor	r11, r19

00000218 <__ctors_end>:
     218:	11 24       	eor	r1, r1
     21a:	1f be       	out	0x3f, r1	; 63
     21c:	cf ef       	ldi	r28, 0xFF	; 255
     21e:	df e5       	ldi	r29, 0x5F	; 95
     220:	de bf       	out	0x3e, r29	; 62
     222:	cd bf       	out	0x3d, r28	; 61
     224:	00 e0       	ldi	r16, 0x00	; 0
     226:	0c bf       	out	0x3c, r16	; 60

00000228 <__do_copy_data>:
     228:	19 e2       	ldi	r17, 0x29	; 41
     22a:	a0 e0       	ldi	r26, 0x00	; 0
     22c:	b0 e2       	ldi	r27, 0x20	; 32
     22e:	ea ee       	ldi	r30, 0xEA	; 234
     230:	f2 e8       	ldi	r31, 0x82	; 130
     232:	00 e0       	ldi	r16, 0x00	; 0
     234:	0b bf       	out	0x3b, r16	; 59
     236:	02 c0       	rjmp	.+4      	; 0x23c <__do_copy_data+0x14>
     238:	07 90       	elpm	r0, Z+
     23a:	0d 92       	st	X+, r0
     23c:	a2 33       	cpi	r26, 0x32	; 50
     23e:	b1 07       	cpc	r27, r17
     240:	d9 f7       	brne	.-10     	; 0x238 <__do_copy_data+0x10>

00000242 <__do_clear_bss>:
     242:	1f e2       	ldi	r17, 0x2F	; 47
     244:	a2 e3       	ldi	r26, 0x32	; 50
     246:	b9 e2       	ldi	r27, 0x29	; 41
     248:	01 c0       	rjmp	.+2      	; 0x24c <.do_clear_bss_start>

0000024a <.do_clear_bss_loop>:
     24a:	1d 92       	st	X+, r1

0000024c <.do_clear_bss_start>:
     24c:	a9 38       	cpi	r26, 0x89	; 137
     24e:	b1 07       	cpc	r27, r17
     250:	e1 f7       	brne	.-8      	; 0x24a <.do_clear_bss_loop>
     252:	0e 94 c0 38 	call	0x7180	; 0x7180 <main>
     256:	0c 94 73 41 	jmp	0x82e6	; 0x82e6 <_exit>

0000025a <__bad_interrupt>:
     25a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000025e <getAccelData>:

threadvar AccelData _acc;

AccelData getAccelData()
{
	return _acc;
     25e:	60 91 64 29 	lds	r22, 0x2964
     262:	70 91 65 29 	lds	r23, 0x2965
}
     266:	80 91 66 29 	lds	r24, 0x2966
     26a:	90 91 67 29 	lds	r25, 0x2967
     26e:	08 95       	ret

00000270 <newAccelData>:

int newAccelData()
{
	return newHWAccelData();
     270:	0c 94 35 0c 	jmp	0x186a	; 0x186a <newHWAccelData>

00000274 <updateAccel>:
void updateAccel()
{
	//byte oldstatus = _acc.status & ACC_O_MASK;

	// this changes the _acc datastructure with new data, if available
	updateHWAccel();
     274:	0c 94 43 0c 	jmp	0x1886	; 0x1886 <updateHWAccel>

00000278 <blockTick>:
//
// Polling-based hack to step through and update block state, as necessary.
//
// Much of this can probably be done via ISRs and other state change triggers and this function eliminated.
void blockTick()
{
     278:	cf 93       	push	r28
    // and never do anything again
    pauseForever();
  }
#endif
  //int input;
  blockTickRunning = 1;
     27a:	81 e0       	ldi	r24, 0x01	; 1
     27c:	90 e0       	ldi	r25, 0x00	; 0
     27e:	80 93 36 29 	sts	0x2936, r24
     282:	90 93 37 29 	sts	0x2937, r25
  
  if(accelReady){
     286:	80 91 34 29 	lds	r24, 0x2934
     28a:	90 91 35 29 	lds	r25, 0x2935
     28e:	89 2b       	or	r24, r25
     290:	31 f0       	breq	.+12     	; 0x29e <blockTick+0x26>
    if(newAccelData()){
     292:	0e 94 38 01 	call	0x270	; 0x270 <newAccelData>
     296:	89 2b       	or	r24, r25
     298:	11 f0       	breq	.+4      	; 0x29e <blockTick+0x26>
      updateAccel();
     29a:	0e 94 3a 01 	call	0x274	; 0x274 <updateAccel>
    }
  }
  
  checkTimeout();
     29e:	0e 94 48 08 	call	0x1090	; 0x1090 <checkTimeout>
  
  checkTimer();
     2a2:	0e 94 2f 09 	call	0x125e	; 0x125e <checkTimer>
  
  for(i = 0; i < NUM_PORTS; ++i)
     2a6:	c0 e0       	ldi	r28, 0x00	; 0
    {
      // read from serial
      processBuffer(i);
     2a8:	8c 2f       	mov	r24, r28
     2aa:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <processBuffer>
      
      // active messaging (handle at most one per port)
      handleOneMessage();
     2ae:	0e 94 a4 02 	call	0x548	; 0x548 <handleOneMessage>
      
      //send packets/ACKS
      sendOnSerial(i);
     2b2:	8c 2f       	mov	r24, r28
     2b4:	0e 94 4e 10 	call	0x209c	; 0x209c <sendOnSerial>
  
  checkTimeout();
  
  checkTimer();
  
  for(i = 0; i < NUM_PORTS; ++i)
     2b8:	cf 5f       	subi	r28, 0xFF	; 255
     2ba:	c6 30       	cpi	r28, 0x06	; 6
     2bc:	a9 f7       	brne	.-22     	; 0x2a8 <blockTick+0x30>
      
      //send packets/ACKS
      sendOnSerial(i);
    }
  
  executeHandlers();	
     2be:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <executeHandlers>
  blockTickRunning = 0;
     2c2:	10 92 36 29 	sts	0x2936, r1
     2c6:	10 92 37 29 	sts	0x2937, r1
  
}
     2ca:	cf 91       	pop	r28
     2cc:	08 95       	ret

000002ce <initBlock>:

// Ties all the horrifying subfunctions together into one simple function
void initBlock()
{
	//software initialization
	initHandlers();
     2ce:	0e 94 bf 05 	call	0xb7e	; 0xb7e <initHandlers>

	//hardware related initialization
	initTime();
     2d2:	0e 94 c0 09 	call	0x1380	; 0x1380 <initTime>

	initializeMemory();
     2d6:	0e 94 f3 06 	call	0xde6	; 0xde6 <initializeMemory>

	initPorts();
     2da:	0e 94 f8 07 	call	0xff0	; 0xff0 <initPorts>
#ifdef DEBUG
	initDebug();
    	printf("System Debug Enabled\r\n");
#endif

	initDataLink();	
     2de:	0e 94 db 02 	call	0x5b6	; 0x5b6 <initDataLink>

   	initHWLED();
     2e2:	0e 94 06 11 	call	0x220c	; 0x220c <initHWLED>
	//initAudio();

	initSystemMessage();
     2e6:	0e 94 d6 07 	call	0xfac	; 0xfac <initSystemMessage>
	initEnsemble();
     2ea:	0e 94 9a 05 	call	0xb34	; 0xb34 <initEnsemble>

	initBlockTick();		// HW INITIALIZATION ROUTINE
     2ee:	0e 94 c3 0d 	call	0x1b86	; 0x1b86 <initBlockTick>

	initHWAccel();
     2f2:	0e 94 96 0c 	call	0x192c	; 0x192c <initHWAccel>
	accelReady=1;
     2f6:	81 e0       	ldi	r24, 0x01	; 1
     2f8:	90 e0       	ldi	r25, 0x00	; 0
     2fa:	80 93 34 29 	sts	0x2934, r24
     2fe:	90 93 35 29 	sts	0x2935, r25

#ifndef BBSIM
    initHWMic();
     302:	0c 94 d9 14 	jmp	0x29b2	; 0x29b2 <initHWMic>

00000306 <setUID>:
threadextern blockConf conf;

// sets local copy of UID
void setUID(uint16_t newID)
{
    conf.UID = newID;
     306:	80 93 2d 2a 	sts	0x2A2D, r24
     30a:	90 93 2e 2a 	sts	0x2A2E, r25
     30e:	08 95       	ret

00000310 <setAndStoreUID>:
}

// sets local copy of UID and stores in EEPROM
void setAndStoreUID(uint16_t newID)
{
    conf.UID = newID;
     310:	80 93 2d 2a 	sts	0x2A2D, r24
     314:	90 93 2e 2a 	sts	0x2A2E, r25
    store(&nv_conf, &conf, sizeof(blockConf));
     318:	44 e0       	ldi	r20, 0x04	; 4
     31a:	50 e0       	ldi	r21, 0x00	; 0
     31c:	6d e2       	ldi	r22, 0x2D	; 45
     31e:	7a e2       	ldi	r23, 0x2A	; 42
     320:	80 e0       	ldi	r24, 0x00	; 0
     322:	90 e0       	ldi	r25, 0x00	; 0
     324:	0c 94 36 11 	jmp	0x226c	; 0x226c <store>

00000328 <jumpToBootSection>:

// Jumps into the bootloader section.  This function never returns.
// Note that this function only works if the BOOTRST fuse is set to Boot Loader Reset
void jumpToBootSection()
{
	jumpToHWBootSection();
     328:	0c 94 ff 0d 	jmp	0x1bfe	; 0x1bfe <jumpToHWBootSection>

0000032c <push>:
#ifndef BBSIM
#include "util/atomic.h"
#endif

void push(byte data, CircBuf * b)
{ 
     32c:	fb 01       	movw	r30, r22
  #ifndef BBSIM
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     32e:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     330:	f8 94       	cli
  {
  #endif

    b->buf[b->end++] = data;
     332:	97 8d       	ldd	r25, Z+31	; 0x1f
     334:	db 01       	movw	r26, r22
     336:	a9 0f       	add	r26, r25
     338:	b1 1d       	adc	r27, r1
     33a:	8c 93       	st	X, r24
     33c:	89 2f       	mov	r24, r25
     33e:	8f 5f       	subi	r24, 0xFF	; 255

    if(b->end == CIRC_BUF_LEN)
     340:	8e 31       	cpi	r24, 0x1E	; 30
     342:	11 f0       	breq	.+4      	; 0x348 <push+0x1c>
  #ifndef BBSIM
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
  {
  #endif

    b->buf[b->end++] = data;
     344:	87 8f       	std	Z+31, r24	; 0x1f
     346:	01 c0       	rjmp	.+2      	; 0x34a <push+0x1e>

    if(b->end == CIRC_BUF_LEN)
    {
      b->end = 0;
     348:	17 8e       	std	Z+31, r1	; 0x1f
    }

    if(b->end == b->start)
     34a:	87 8d       	ldd	r24, Z+31	; 0x1f
     34c:	96 8d       	ldd	r25, Z+30	; 0x1e
     34e:	89 17       	cp	r24, r25
     350:	11 f0       	breq	.+4      	; 0x356 <push+0x2a>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     352:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
     354:	08 95       	ret
    {
      b->start++;
     356:	8f 5f       	subi	r24, 0xFF	; 255
     358:	86 8f       	std	Z+30, r24	; 0x1e
	
      if(b->start == CIRC_BUF_LEN)
     35a:	8e 31       	cpi	r24, 0x1E	; 30
     35c:	d1 f7       	brne	.-12     	; 0x352 <push+0x26>
	  {
	    b->start = 0;
     35e:	16 8e       	std	Z+30, r1	; 0x1e
     360:	f8 cf       	rjmp	.-16     	; 0x352 <push+0x26>

00000362 <pop>:
  }
  #endif
}

int pop(CircBuf * b)
{
     362:	fc 01       	movw	r30, r24
  return data;
}

byte isEmpty(CircBuf * b)
{
  if(b->start == b->end)
     364:	96 8d       	ldd	r25, Z+30	; 0x1e
     366:	87 8d       	ldd	r24, Z+31	; 0x1f
     368:	98 13       	cpse	r25, r24
     36a:	08 c0       	rjmp	.+16     	; 0x37c <pop+0x1a>
     36c:	04 c0       	rjmp	.+8      	; 0x376 <pop+0x14>
  #endif
    data = b->buf[b->start++];
  
    if(b->start == CIRC_BUF_LEN)
    {
      b->start = 0;
     36e:	16 8e       	std	Z+30, r1	; 0x1e
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     370:	9f bf       	out	0x3f, r25	; 63
    }
  #ifndef BBSIM
  }
  #endif
  
  return data;
     372:	30 e0       	ldi	r19, 0x00	; 0
     374:	0f c0       	rjmp	.+30     	; 0x394 <pop+0x32>
{
  uint8_t data;

  if( isEmpty(b) )
  {
	return -1;
     376:	2f ef       	ldi	r18, 0xFF	; 255
     378:	3f ef       	ldi	r19, 0xFF	; 255
     37a:	0c c0       	rjmp	.+24     	; 0x394 <pop+0x32>
  }
  #ifndef BBSIM
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     37c:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     37e:	f8 94       	cli
  {
  #endif
    data = b->buf[b->start++];
     380:	86 8d       	ldd	r24, Z+30	; 0x1e
     382:	df 01       	movw	r26, r30
     384:	a8 0f       	add	r26, r24
     386:	b1 1d       	adc	r27, r1
     388:	2c 91       	ld	r18, X
     38a:	8f 5f       	subi	r24, 0xFF	; 255
  
    if(b->start == CIRC_BUF_LEN)
     38c:	8e 31       	cpi	r24, 0x1E	; 30
     38e:	79 f3       	breq	.-34     	; 0x36e <pop+0xc>
  }
  #ifndef BBSIM
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
  {
  #endif
    data = b->buf[b->start++];
     390:	86 8f       	std	Z+30, r24	; 0x1e
     392:	ee cf       	rjmp	.-36     	; 0x370 <pop+0xe>
  #ifndef BBSIM
  }
  #endif
  
  return data;
}
     394:	c9 01       	movw	r24, r18
     396:	08 95       	ret

00000398 <isEmpty>:

byte isEmpty(CircBuf * b)
{
     398:	fc 01       	movw	r30, r24
  if(b->start == b->end)
     39a:	81 e0       	ldi	r24, 0x01	; 1
     39c:	26 8d       	ldd	r18, Z+30	; 0x1e
     39e:	97 8d       	ldd	r25, Z+31	; 0x1f
     3a0:	29 13       	cpse	r18, r25
     3a2:	80 e0       	ldi	r24, 0x00	; 0
  {
    return 1;
  }
  return 0;
}
     3a4:	08 95       	ret

000003a6 <defaultMsgHandler>:
/////////////////// PROTECTED FUNCTIONS ///////////////////
// default message handler - does nothing
byte defaultMsgHandler(void)
{
    return 1;
}
     3a6:	81 e0       	ldi	r24, 0x01	; 1
     3a8:	08 95       	ret

000003aa <reservedSystemHandler>:
//   using 0x0000 as message handler allows blocks 
//   running different programs to communicate at the system level.
byte reservedSystemHandler(void)
{
    // bogus
    if(thisChunk == NULL) {
     3aa:	e0 91 6d 29 	lds	r30, 0x296D
     3ae:	f0 91 6e 29 	lds	r31, 0x296E
     3b2:	30 97       	sbiw	r30, 0x00	; 0
     3b4:	49 f0       	breq	.+18     	; 0x3c8 <reservedSystemHandler+0x1e>
        return 0;
    }
  
    // find msg type and check
    switch( thisChunk->data[0] )
     3b6:	80 81       	ld	r24, Z
     3b8:	81 30       	cpi	r24, 0x01	; 1
     3ba:	21 f0       	breq	.+8      	; 0x3c4 <reservedSystemHandler+0x1a>
     3bc:	8f 3f       	cpi	r24, 0xFF	; 255
     3be:	21 f4       	brne	.+8      	; 0x3c8 <reservedSystemHandler+0x1e>
	                break;
	            }
	            i++;
	        }
	        // consistent
    	    jumpToBootSection();
     3c0:	0e 94 94 01 	call	0x328	; 0x328 <jumpToBootSection>
        }
        case NEIGHBOR_MSG:
            handleNeighborMessage();
     3c4:	0e 94 12 04 	call	0x824	; 0x824 <handleNeighborMessage>
        default:
            break;
    }
  
    return 0;
}
     3c8:	80 e0       	ldi	r24, 0x00	; 0
     3ca:	08 95       	ret

000003cc <removeFromSq>:
// inputs:  port
// output:  1-success, 0-failure
byte removeFromSq(PRef p, byte response)
{
    // empty or bad
    if( (p >= NUM_PORTS) || (port[p].sq.head == NULL) ) 
     3cc:	86 30       	cpi	r24, 0x06	; 6
     3ce:	08 f0       	brcs	.+2      	; 0x3d2 <removeFromSq+0x6>
     3d0:	3f c0       	rjmp	.+126    	; 0x450 <removeFromSq+0x84>
     3d2:	98 e5       	ldi	r25, 0x58	; 88
     3d4:	89 9f       	mul	r24, r25
     3d6:	f0 01       	movw	r30, r0
     3d8:	11 24       	eor	r1, r1
     3da:	ee 58       	subi	r30, 0x8E	; 142
     3dc:	f3 4d       	sbci	r31, 0xD3	; 211
     3de:	87 85       	ldd	r24, Z+15	; 0x0f
     3e0:	90 89       	ldd	r25, Z+16	; 0x10
     3e2:	89 2b       	or	r24, r25
     3e4:	a9 f1       	breq	.+106    	; 0x450 <removeFromSq+0x84>
    {
        return 0;
    }

    BB_LOCK(SQ_LOCK)
     3e6:	2f b7       	in	r18, 0x3f	; 63
     3e8:	f8 94       	cli

    // get the first Chunk
    thisChunk = port[p].sq.head;
     3ea:	a7 85       	ldd	r26, Z+15	; 0x0f
     3ec:	b0 89       	ldd	r27, Z+16	; 0x10

    // move the head of the queue
    port[p].sq.head = thisChunk->next;
     3ee:	52 96       	adiw	r26, 0x12	; 18
     3f0:	8d 91       	ld	r24, X+
     3f2:	9c 91       	ld	r25, X
     3f4:	53 97       	sbiw	r26, 0x13	; 19
     3f6:	87 87       	std	Z+15, r24	; 0x0f
     3f8:	90 8b       	std	Z+16, r25	; 0x10

    // tail was pointing to head, remove tail as well
    if( port[p].sq.head == NULL ) 
     3fa:	89 2b       	or	r24, r25
     3fc:	a1 f0       	breq	.+40     	; 0x426 <removeFromSq+0x5a>
     3fe:	a0 93 6d 29 	sts	0x296D, r26
     402:	b0 93 6e 29 	sts	0x296E, r27
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     406:	2f bf       	out	0x3f, r18	; 63
    // otherwise, leave it to what it was pointing to

    BB_UNLOCK(SQ_LOCK)

    // remove thisChunk's references to queue
    thisChunk->next = NULL;
     408:	a0 91 6d 29 	lds	r26, 0x296D
     40c:	b0 91 6e 29 	lds	r27, 0x296E
     410:	52 96       	adiw	r26, 0x12	; 18
     412:	1d 92       	st	X+, r1
     414:	1c 92       	st	X, r1
     416:	53 97       	sbiw	r26, 0x13	; 19

    if(thisChunk->callback != NULL)
     418:	56 96       	adiw	r26, 0x16	; 22
     41a:	ed 91       	ld	r30, X+
     41c:	fc 91       	ld	r31, X
     41e:	57 97       	sbiw	r26, 0x17	; 23
     420:	30 97       	sbiw	r30, 0x00	; 0
     422:	39 f4       	brne	.+14     	; 0x432 <removeFromSq+0x66>
     424:	0f c0       	rjmp	.+30     	; 0x444 <removeFromSq+0x78>
    port[p].sq.head = thisChunk->next;

    // tail was pointing to head, remove tail as well
    if( port[p].sq.head == NULL ) 
    {
        port[p].sq.tail   = NULL;
     426:	11 8a       	std	Z+17, r1	; 0x11
     428:	12 8a       	std	Z+18, r1	; 0x12
        port[p].sq.flags &= ~CHUNK_READY;
     42a:	86 85       	ldd	r24, Z+14	; 0x0e
     42c:	8f 77       	andi	r24, 0x7F	; 127
     42e:	86 87       	std	Z+14, r24	; 0x0e
     430:	e6 cf       	rjmp	.-52     	; 0x3fe <removeFromSq+0x32>
    thisChunk->next = NULL;

    if(thisChunk->callback != NULL)
    {
        // set response type for callback
        setChunkResponse(thisChunk, response);
     432:	68 71       	andi	r22, 0x18	; 24
     434:	51 96       	adiw	r26, 0x11	; 17
     436:	8c 91       	ld	r24, X
     438:	51 97       	sbiw	r26, 0x11	; 17
     43a:	87 7e       	andi	r24, 0xE7	; 231
     43c:	68 2b       	or	r22, r24
     43e:	51 96       	adiw	r26, 0x11	; 17
     440:	6c 93       	st	X, r22
	
        // execute callback to clear memory and other user actions
        (thisChunk->callback)();
     442:	19 95       	eicall
    }

    // we assume that the callback has freed memory
    thisChunk = NULL;
     444:	10 92 6d 29 	sts	0x296D, r1
     448:	10 92 6e 29 	sts	0x296E, r1
    return 1;
     44c:	81 e0       	ldi	r24, 0x01	; 1
     44e:	08 95       	ret
byte removeFromSq(PRef p, byte response)
{
    // empty or bad
    if( (p >= NUM_PORTS) || (port[p].sq.head == NULL) ) 
    {
        return 0;
     450:	80 e0       	ldi	r24, 0x00	; 0
    }

    // we assume that the callback has freed memory
    thisChunk = NULL;
    return 1;
}
     452:	08 95       	ret

00000454 <flushSendQueue>:

// flush a send queue (used when retries fails)
void flushSendQueue(PRef p)
{
     454:	cf 93       	push	r28
     456:	c8 2f       	mov	r28, r24
    if(p < NUM_PORTS)
     458:	86 30       	cpi	r24, 0x06	; 6
     45a:	30 f4       	brcc	.+12     	; 0x468 <flushSendQueue+0x14>
    {
        // flush buffer (call all callbacks as if all messages failed)
        while( removeFromSq(p, MSG_RESP_NOREPLY) );
     45c:	68 e1       	ldi	r22, 0x18	; 24
     45e:	8c 2f       	mov	r24, r28
     460:	0e 94 e6 01 	call	0x3cc	; 0x3cc <removeFromSq>
     464:	81 11       	cpse	r24, r1
     466:	fa cf       	rjmp	.-12     	; 0x45c <flushSendQueue+0x8>
    }
}
     468:	cf 91       	pop	r28
     46a:	08 95       	ret

0000046c <setupChunk>:
//          mh - handler for this message
//          cb - callback on send failure
// outputs: 1 - chunk correctly formatted
//          0 - inputs contained error, format failed
byte setupChunk(Chunk* c, PRef p, byte * msg, byte length, MsgHandler mh, GenericHandler cb)
{
     46c:	ef 92       	push	r14
     46e:	ff 92       	push	r15
     470:	0f 93       	push	r16
     472:	1f 93       	push	r17
     474:	cf 93       	push	r28
     476:	df 93       	push	r29
     478:	ec 01       	movw	r28, r24
     47a:	ca 01       	movw	r24, r20
    // invalid Chunk, invalid port, message too long, or no message
    if( (c == NULL) || (p >= NUM_PORTS) || (length > DATA_SIZE) || (msg == NULL) )
     47c:	20 97       	sbiw	r28, 0x00	; 0
     47e:	51 f1       	breq	.+84     	; 0x4d4 <setupChunk+0x68>
     480:	66 30       	cpi	r22, 0x06	; 6
     482:	40 f5       	brcc	.+80     	; 0x4d4 <setupChunk+0x68>
     484:	22 31       	cpi	r18, 0x12	; 18
     486:	30 f5       	brcc	.+76     	; 0x4d4 <setupChunk+0x68>
     488:	00 97       	sbiw	r24, 0x00	; 0
     48a:	21 f1       	breq	.+72     	; 0x4d4 <setupChunk+0x68>
    {
        return 0;
    }

    // set the flags
    c->status = CHUNK_USED | CHUNK_FILLED | MSG_RESP_SENDING | port[p].pnum;
     48c:	38 e5       	ldi	r19, 0x58	; 88
     48e:	63 9f       	mul	r22, r19
     490:	f0 01       	movw	r30, r0
     492:	11 24       	eor	r1, r1
     494:	ee 58       	subi	r30, 0x8E	; 142
     496:	f3 4d       	sbci	r31, 0xD3	; 211
     498:	30 81       	ld	r19, Z
     49a:	30 68       	ori	r19, 0x80	; 128
     49c:	39 8b       	std	Y+17, r19	; 0x11
    
    // clear out next pointer
    c->next = NULL;
     49e:	1a 8a       	std	Y+18, r1	; 0x12
     4a0:	1b 8a       	std	Y+19, r1	; 0x13

    // set message handler
    *((MsgHandler*)(c->handler)) = mh;
     4a2:	0c 8b       	std	Y+20, r16	; 0x14
     4a4:	1d 8b       	std	Y+21, r17	; 0x15

    // setup callback
    c->callback = cb;
     4a6:	ee 8a       	std	Y+22, r14	; 0x16
     4a8:	ff 8a       	std	Y+23, r15	; 0x17

    // copy message
    memcpy(c->data, msg, length);
     4aa:	02 2f       	mov	r16, r18
     4ac:	10 e0       	ldi	r17, 0x00	; 0
     4ae:	42 2f       	mov	r20, r18
     4b0:	50 e0       	ldi	r21, 0x00	; 0
     4b2:	bc 01       	movw	r22, r24
     4b4:	ce 01       	movw	r24, r28
     4b6:	0e 94 2c 3e 	call	0x7c58	; 0x7c58 <memcpy>
    
    // 'zero' out extra bytes (use ff's)
    memset((c->data)+length, 0xFF, DATA_SIZE-length);
     4ba:	c0 0f       	add	r28, r16
     4bc:	d1 1f       	adc	r29, r17
     4be:	41 e1       	ldi	r20, 0x11	; 17
     4c0:	50 e0       	ldi	r21, 0x00	; 0
     4c2:	40 1b       	sub	r20, r16
     4c4:	51 0b       	sbc	r21, r17
     4c6:	6f ef       	ldi	r22, 0xFF	; 255
     4c8:	70 e0       	ldi	r23, 0x00	; 0
     4ca:	ce 01       	movw	r24, r28
     4cc:	0e 94 35 3e 	call	0x7c6a	; 0x7c6a <memset>
    
    return 1;
     4d0:	81 e0       	ldi	r24, 0x01	; 1
     4d2:	01 c0       	rjmp	.+2      	; 0x4d6 <setupChunk+0x6a>
byte setupChunk(Chunk* c, PRef p, byte * msg, byte length, MsgHandler mh, GenericHandler cb)
{
    // invalid Chunk, invalid port, message too long, or no message
    if( (c == NULL) || (p >= NUM_PORTS) || (length > DATA_SIZE) || (msg == NULL) )
    {
        return 0;
     4d4:	80 e0       	ldi	r24, 0x00	; 0
    
    // 'zero' out extra bytes (use ff's)
    memset((c->data)+length, 0xFF, DATA_SIZE-length);
    
    return 1;
}
     4d6:	df 91       	pop	r29
     4d8:	cf 91       	pop	r28
     4da:	1f 91       	pop	r17
     4dc:	0f 91       	pop	r16
     4de:	ff 90       	pop	r15
     4e0:	ef 90       	pop	r14
     4e2:	08 95       	ret

000004e4 <queueChunk>:
// outputs: 1 - chunk successfully queued
//          0 - error, chunk was not queued
byte queueChunk(Chunk* c)
{
    // null Chunk
    if(c == NULL)
     4e4:	00 97       	sbiw	r24, 0x00	; 0
     4e6:	71 f1       	breq	.+92     	; 0x544 <queueChunk+0x60>
    {
        return 0;    
    }
    
    byte p = faceNum(c);
     4e8:	dc 01       	movw	r26, r24
     4ea:	51 96       	adiw	r26, 0x11	; 17
     4ec:	ec 91       	ld	r30, X
     4ee:	e7 70       	andi	r30, 0x07	; 7
    
    if(p < NUM_PORTS)
     4f0:	e6 30       	cpi	r30, 0x06	; 6
     4f2:	30 f5       	brcc	.+76     	; 0x540 <queueChunk+0x5c>
            freeChunk(c);
            return 0;
        }
#endif    
    
        BB_LOCK(SQ_LOCK)
     4f4:	6f b7       	in	r22, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     4f6:	f8 94       	cli

        // add to queue - queue empty
        if( port[p].sq.head == NULL ) 
     4f8:	2e 2f       	mov	r18, r30
     4fa:	30 e0       	ldi	r19, 0x00	; 0
     4fc:	b8 e5       	ldi	r27, 0x58	; 88
     4fe:	eb 9f       	mul	r30, r27
     500:	f0 01       	movw	r30, r0
     502:	11 24       	eor	r1, r1
     504:	ee 58       	subi	r30, 0x8E	; 142
     506:	f3 4d       	sbci	r31, 0xD3	; 211
     508:	47 85       	ldd	r20, Z+15	; 0x0f
     50a:	50 89       	ldd	r21, Z+16	; 0x10
     50c:	45 2b       	or	r20, r21
     50e:	19 f4       	brne	.+6      	; 0x516 <queueChunk+0x32>
        {
            port[p].sq.head = c;
     510:	87 87       	std	Z+15, r24	; 0x0f
     512:	90 8b       	std	Z+16, r25	; 0x10
     514:	05 c0       	rjmp	.+10     	; 0x520 <queueChunk+0x3c>
        }
        // queue has stuff
        else 
        {
            port[p].sq.tail->next = c;
     516:	01 88       	ldd	r0, Z+17	; 0x11
     518:	f2 89       	ldd	r31, Z+18	; 0x12
     51a:	e0 2d       	mov	r30, r0
     51c:	82 8b       	std	Z+18, r24	; 0x12
     51e:	93 8b       	std	Z+19, r25	; 0x13
        }
        // add to tail and update flags
        port[p].sq.tail   = c;
     520:	48 e5       	ldi	r20, 0x58	; 88
     522:	42 9f       	mul	r20, r18
     524:	f0 01       	movw	r30, r0
     526:	43 9f       	mul	r20, r19
     528:	f0 0d       	add	r31, r0
     52a:	11 24       	eor	r1, r1
     52c:	ee 58       	subi	r30, 0x8E	; 142
     52e:	f3 4d       	sbci	r31, 0xD3	; 211
     530:	81 8b       	std	Z+17, r24	; 0x11
     532:	92 8b       	std	Z+18, r25	; 0x12
        port[p].sq.flags |= CHUNK_READY;
     534:	86 85       	ldd	r24, Z+14	; 0x0e
     536:	80 68       	ori	r24, 0x80	; 128
     538:	86 87       	std	Z+14, r24	; 0x0e
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     53a:	6f bf       	out	0x3f, r22	; 63

        BB_UNLOCK(SQ_LOCK)

        return 1;
     53c:	81 e0       	ldi	r24, 0x01	; 1
     53e:	08 95       	ret
    }
    else
    {
        freeChunk(c);
     540:	0e 94 04 07 	call	0xe08	; 0xe08 <freeChunk>
byte queueChunk(Chunk* c)
{
    // null Chunk
    if(c == NULL)
    {
        return 0;    
     544:	80 e0       	ldi	r24, 0x00	; 0
    else
    {
        freeChunk(c);
        return 0;
    }
}
     546:	08 95       	ret

00000548 <handleOneMessage>:
// returns: 1 - message processed
//          0 - no new messages
byte handleOneMessage()
{
    // set the global chunk that needs to be processed by the handler
    thisChunk = nextPacket();
     548:	0e 94 29 10 	call	0x2052	; 0x2052 <nextPacket>
     54c:	80 93 6d 29 	sts	0x296D, r24
     550:	90 93 6e 29 	sts	0x296E, r25

    // no packet, no action
    if( thisChunk == NULL )
     554:	00 97       	sbiw	r24, 0x00	; 0
     556:	69 f1       	breq	.+90     	; 0x5b2 <handleOneMessage+0x6a>
    {
        return 0;
    }

    // call handler
    if( *((MsgHandler*)thisChunk->handler) == RES_SYS_HANDLER ) 
     558:	dc 01       	movw	r26, r24
     55a:	54 96       	adiw	r26, 0x14	; 20
     55c:	ed 91       	ld	r30, X+
     55e:	fc 91       	ld	r31, X
     560:	55 97       	sbiw	r26, 0x15	; 21
     562:	30 97       	sbiw	r30, 0x00	; 0
     564:	19 f4       	brne	.+6      	; 0x56c <handleOneMessage+0x24>
    {
	    reservedSystemHandler();
     566:	0e 94 d5 01 	call	0x3aa	; 0x3aa <reservedSystemHandler>
     56a:	01 c0       	rjmp	.+2      	; 0x56e <handleOneMessage+0x26>
    }
    else 
    {
	    (*((MsgHandler*)(thisChunk->handler)))();
     56c:	19 95       	eicall
    }

    // set flag to send ACK
    port[faceNum(thisChunk)].sq.flags |= setAck(thisChunk);
     56e:	80 91 6d 29 	lds	r24, 0x296D
     572:	90 91 6e 29 	lds	r25, 0x296E
     576:	fc 01       	movw	r30, r24
     578:	21 89       	ldd	r18, Z+17	; 0x11
     57a:	e2 2f       	mov	r30, r18
     57c:	e7 70       	andi	r30, 0x07	; 7
     57e:	38 e5       	ldi	r19, 0x58	; 88
     580:	e3 9f       	mul	r30, r19
     582:	f0 01       	movw	r30, r0
     584:	11 24       	eor	r1, r1
     586:	ee 58       	subi	r30, 0x8E	; 142
     588:	f3 4d       	sbci	r31, 0xD3	; 211
     58a:	25 fb       	bst	r18, 5
     58c:	44 27       	eor	r20, r20
     58e:	40 f9       	bld	r20, 0
     590:	21 e0       	ldi	r18, 0x01	; 1
     592:	30 e0       	ldi	r19, 0x00	; 0
     594:	01 c0       	rjmp	.+2      	; 0x598 <handleOneMessage+0x50>
     596:	22 0f       	add	r18, r18
     598:	4a 95       	dec	r20
     59a:	ea f7       	brpl	.-6      	; 0x596 <handleOneMessage+0x4e>
     59c:	36 85       	ldd	r19, Z+14	; 0x0e
     59e:	32 2b       	or	r19, r18
     5a0:	36 87       	std	Z+14, r19	; 0x0e

    // free the rx chunk
    freeChunk(thisChunk);
     5a2:	0e 94 04 07 	call	0xe08	; 0xe08 <freeChunk>

    // reset the global chunk since memory is no longer valid
    thisChunk = NULL;
     5a6:	10 92 6d 29 	sts	0x296D, r1
     5aa:	10 92 6e 29 	sts	0x296E, r1

    return 1;
     5ae:	81 e0       	ldi	r24, 0x01	; 1
     5b0:	08 95       	ret
    thisChunk = nextPacket();

    // no packet, no action
    if( thisChunk == NULL )
    {
        return 0;
     5b2:	80 e0       	ldi	r24, 0x00	; 0

    // reset the global chunk since memory is no longer valid
    thisChunk = NULL;

    return 1;
}
     5b4:	08 95       	ret

000005b6 <initDataLink>:

// initialization
void initDataLink()
{
    initHWDataLink();
     5b6:	0e 94 dd 10 	call	0x21ba	; 0x21ba <initHWDataLink>

    globalRq.head  = NULL;
     5ba:	10 92 68 29 	sts	0x2968, r1
     5be:	10 92 69 29 	sts	0x2969, r1
    globalRq.tail  = NULL;
     5c2:	10 92 6a 29 	sts	0x296A, r1
     5c6:	10 92 6b 29 	sts	0x296B, r1
    globalRq.flags = 0;
     5ca:	10 92 6c 29 	sts	0x296C, r1
     5ce:	08 95       	ret

000005d0 <initDebug>:
#include "debug.bbh"
#include "../hw-api/hwDebug.h"

void initDebug() 
{
  initHWDebug();
     5d0:	0c 94 71 17 	jmp	0x2ee2	; 0x2ee2 <initHWDebug>

000005d4 <neighborKeepalive>:
    freeChunk(thisChunk);
}

// this is called periodically to verify neighbor is still there and in the right state
void neighborKeepalive(void)
{
     5d4:	0f 93       	push	r16
     5d6:	1f 93       	push	r17
     5d8:	cf 93       	push	r28
     5da:	df 93       	push	r29
     5dc:	00 d0       	rcall	.+0      	; 0x5de <neighborKeepalive+0xa>
     5de:	00 d0       	rcall	.+0      	; 0x5e0 <neighborKeepalive+0xc>
     5e0:	cd b7       	in	r28, 0x3d	; 61
     5e2:	de b7       	in	r29, 0x3e	; 62
  // craft and send a keeplive message of the form:
  // [header] [myGUID][yourGUID]
  byte buf[6];
  buf[0] = NEIGHBOR_MSG;
     5e4:	81 e0       	ldi	r24, 0x01	; 1
     5e6:	89 83       	std	Y+1, r24	; 0x01
  buf[1] = MSG_NEIGHBOR_KEEPALIVE;
     5e8:	83 e0       	ldi	r24, 0x03	; 3
     5ea:	8a 83       	std	Y+2, r24	; 0x02
  GUIDIntoChar(getGUID(), &(buf[2]));
     5ec:	0e 94 92 11 	call	0x2324	; 0x2324 <getGUID>
threadvar Timer ttNeighbor[6];

// converts a UID into a passed in character stream.  Assumes 2-byte GUIDs.
void GUIDIntoChar(Uid id, byte * c)
{
    c[0] = (id >> 8) & 0x00FF;
     5f0:	9b 83       	std	Y+3, r25	; 0x03
    c[1] = (id & 0x00FF); 
     5f2:	8c 83       	std	Y+4, r24	; 0x04
  // [header] [myGUID][yourGUID]
  byte buf[6];
  buf[0] = NEIGHBOR_MSG;
  buf[1] = MSG_NEIGHBOR_KEEPALIVE;
  GUIDIntoChar(getGUID(), &(buf[2]));
  GUIDIntoChar(thisNeighborhood.n[thisTimeout->arg], &(buf[4]));
     5f4:	a0 91 82 2e 	lds	r26, 0x2E82
     5f8:	b0 91 83 2e 	lds	r27, 0x2E83
     5fc:	19 96       	adiw	r26, 0x09	; 9
     5fe:	8c 91       	ld	r24, X
     600:	19 97       	sbiw	r26, 0x09	; 9
     602:	90 e0       	ldi	r25, 0x00	; 0
     604:	fc 01       	movw	r30, r24
     606:	ee 0f       	add	r30, r30
     608:	ff 1f       	adc	r31, r31
     60a:	e1 59       	subi	r30, 0x91	; 145
     60c:	f6 4d       	sbci	r31, 0xD6	; 214
     60e:	20 81       	ld	r18, Z
     610:	31 81       	ldd	r19, Z+1	; 0x01
threadvar Timer ttNeighbor[6];

// converts a UID into a passed in character stream.  Assumes 2-byte GUIDs.
void GUIDIntoChar(Uid id, byte * c)
{
    c[0] = (id >> 8) & 0x00FF;
     612:	3d 83       	std	Y+5, r19	; 0x05
    c[1] = (id & 0x00FF); 
     614:	2e 83       	std	Y+6, r18	; 0x06
  buf[1] = MSG_NEIGHBOR_KEEPALIVE;
  GUIDIntoChar(getGUID(), &(buf[2]));
  GUIDIntoChar(thisNeighborhood.n[thisTimeout->arg], &(buf[4]));

  // prevent timer from calling this again, message callback will reenable as necessary
  disableTimer(ttNeighbor[thisTimeout->arg]);
     616:	21 e1       	ldi	r18, 0x11	; 17
     618:	28 9f       	mul	r18, r24
     61a:	f0 01       	movw	r30, r0
     61c:	29 9f       	mul	r18, r25
     61e:	f0 0d       	add	r31, r0
     620:	11 24       	eor	r1, r1
     622:	e5 58       	subi	r30, 0x85	; 133
     624:	f6 4d       	sbci	r31, 0xD6	; 214
     626:	10 8a       	std	Z+16, r1	; 0x10

  // send message - CB will either re-add timer, or restart scanning for neighbors
  sendSystemMessage(thisTimeout->arg, buf, 6, RES_SYS_HANDLER, (GenericHandler)&neighborKeepaliveCB);
     628:	0f e7       	ldi	r16, 0x7F	; 127
     62a:	15 e0       	ldi	r17, 0x05	; 5
     62c:	20 e0       	ldi	r18, 0x00	; 0
     62e:	30 e0       	ldi	r19, 0x00	; 0
     630:	46 e0       	ldi	r20, 0x06	; 6
     632:	be 01       	movw	r22, r28
     634:	6f 5f       	subi	r22, 0xFF	; 255
     636:	7f 4f       	sbci	r23, 0xFF	; 255
     638:	19 96       	adiw	r26, 0x09	; 9
     63a:	8c 91       	ld	r24, X
     63c:	0e 94 79 07 	call	0xef2	; 0xef2 <sendSystemMessage>
}
     640:	26 96       	adiw	r28, 0x06	; 6
     642:	cd bf       	out	0x3d, r28	; 61
     644:	de bf       	out	0x3e, r29	; 62
     646:	df 91       	pop	r29
     648:	cf 91       	pop	r28
     64a:	1f 91       	pop	r17
     64c:	0f 91       	pop	r16
     64e:	08 95       	ret

00000650 <neighborScan>:
  freeChunk(thisChunk);
}

// send a start handshake message to a vacant port
void neighborScan(void)
{
     650:	ff 92       	push	r15
     652:	0f 93       	push	r16
     654:	1f 93       	push	r17
     656:	cf 93       	push	r28
     658:	df 93       	push	r29
     65a:	00 d0       	rcall	.+0      	; 0x65c <neighborScan+0xc>
     65c:	1f 92       	push	r1
     65e:	cd b7       	in	r28, 0x3d	; 61
     660:	de b7       	in	r29, 0x3e	; 62
  byte buf[4];
  PRef p = thisTimeout->arg;
     662:	e0 91 82 2e 	lds	r30, 0x2E82
     666:	f0 91 83 2e 	lds	r31, 0x2E83
     66a:	f1 84       	ldd	r15, Z+9	; 0x09
      return;
  }
  #endif

  // prepare message
  buf[0] = NEIGHBOR_MSG;
     66c:	81 e0       	ldi	r24, 0x01	; 1
     66e:	89 83       	std	Y+1, r24	; 0x01
  buf[1] = MSG_NEIGHBOR_START;
     670:	8a 83       	std	Y+2, r24	; 0x02
  GUIDIntoChar(getGUID(), &(buf[2]));
     672:	0e 94 92 11 	call	0x2324	; 0x2324 <getGUID>
threadvar Timer ttNeighbor[6];

// converts a UID into a passed in character stream.  Assumes 2-byte GUIDs.
void GUIDIntoChar(Uid id, byte * c)
{
    c[0] = (id >> 8) & 0x00FF;
     676:	9b 83       	std	Y+3, r25	; 0x03
    c[1] = (id & 0x00FF); 
     678:	8c 83       	std	Y+4, r24	; 0x04
  buf[0] = NEIGHBOR_MSG;
  buf[1] = MSG_NEIGHBOR_START;
  GUIDIntoChar(getGUID(), &(buf[2]));
  
  // disable timer so no extra time-based calls are executed until sent message callback
  disableTimer(ttNeighbor[p]);
     67a:	81 e1       	ldi	r24, 0x11	; 17
     67c:	f8 9e       	mul	r15, r24
     67e:	90 01       	movw	r18, r0
     680:	11 24       	eor	r1, r1
     682:	f9 01       	movw	r30, r18
     684:	e5 58       	subi	r30, 0x85	; 133
     686:	f6 4d       	sbci	r31, 0xD6	; 214
     688:	10 8a       	std	Z+16, r1	; 0x10
  if(ttNeighbor[p].t.state != INACTIVE)
     68a:	82 85       	ldd	r24, Z+10	; 0x0a
     68c:	88 23       	and	r24, r24
     68e:	29 f0       	breq	.+10     	; 0x69a <neighborScan+0x4a>
    {
      deregisterTimeout(&(ttNeighbor[p].t));
     690:	c9 01       	movw	r24, r18
     692:	83 58       	subi	r24, 0x83	; 131
     694:	96 4d       	sbci	r25, 0xD6	; 214
     696:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <deregisterTimeout>
    }

  // enqueue message
  sendSystemMessage(p, buf, 4, RES_SYS_HANDLER, (GenericHandler)&neighborScanCB);
     69a:	01 e6       	ldi	r16, 0x61	; 97
     69c:	13 e0       	ldi	r17, 0x03	; 3
     69e:	20 e0       	ldi	r18, 0x00	; 0
     6a0:	30 e0       	ldi	r19, 0x00	; 0
     6a2:	44 e0       	ldi	r20, 0x04	; 4
     6a4:	be 01       	movw	r22, r28
     6a6:	6f 5f       	subi	r22, 0xFF	; 255
     6a8:	7f 4f       	sbci	r23, 0xFF	; 255
     6aa:	8f 2d       	mov	r24, r15
     6ac:	0e 94 79 07 	call	0xef2	; 0xef2 <sendSystemMessage>
}
     6b0:	24 96       	adiw	r28, 0x04	; 4
     6b2:	cd bf       	out	0x3d, r28	; 61
     6b4:	de bf       	out	0x3e, r29	; 62
     6b6:	df 91       	pop	r29
     6b8:	cf 91       	pop	r28
     6ba:	1f 91       	pop	r17
     6bc:	0f 91       	pop	r16
     6be:	ff 90       	pop	r15
     6c0:	08 95       	ret

000006c2 <neighborScanCB>:

// called when start handshake message is complete by success or failure
void neighborScanCB(void)
{
  // message was received.  wait for handshake to return, but allow for timeout to restart scan
  if(chunkResponseType(thisChunk) == MSG_RESP_ACK)
     6c2:	80 91 6d 29 	lds	r24, 0x296D
     6c6:	90 91 6e 29 	lds	r25, 0x296E
     6ca:	dc 01       	movw	r26, r24
     6cc:	51 96       	adiw	r26, 0x11	; 17
     6ce:	ec 91       	ld	r30, X
     6d0:	2e 2f       	mov	r18, r30
     6d2:	28 71       	andi	r18, 0x18	; 24
     6d4:	ae 2f       	mov	r26, r30
     6d6:	a7 70       	andi	r26, 0x07	; 7
     6d8:	28 30       	cpi	r18, 0x08	; 8
     6da:	59 f4       	brne	.+22     	; 0x6f2 <neighborScanCB+0x30>
    {
      (ttNeighbor[faceNum(thisChunk)]).period = NEIGHBOR_HANDSHAKE_TIMEOUT_PERIOD;
     6dc:	21 e1       	ldi	r18, 0x11	; 17
     6de:	a2 9f       	mul	r26, r18
     6e0:	d0 01       	movw	r26, r0
     6e2:	11 24       	eor	r1, r1
     6e4:	a5 58       	subi	r26, 0x85	; 133
     6e6:	b6 4d       	sbci	r27, 0xD6	; 214
     6e8:	44 e6       	ldi	r20, 0x64	; 100
     6ea:	50 e0       	ldi	r21, 0x00	; 0
     6ec:	60 e0       	ldi	r22, 0x00	; 0
     6ee:	70 e0       	ldi	r23, 0x00	; 0
     6f0:	0a c0       	rjmp	.+20     	; 0x706 <neighborScanCB+0x44>
    }
  // else failure
  else
    {
      (ttNeighbor[faceNum(thisChunk)]).period = NEIGHBOR_SCAN_PERIOD;
     6f2:	21 e1       	ldi	r18, 0x11	; 17
     6f4:	a2 9f       	mul	r26, r18
     6f6:	d0 01       	movw	r26, r0
     6f8:	11 24       	eor	r1, r1
     6fa:	a5 58       	subi	r26, 0x85	; 133
     6fc:	b6 4d       	sbci	r27, 0xD6	; 214
     6fe:	42 e3       	ldi	r20, 0x32	; 50
     700:	50 e0       	ldi	r21, 0x00	; 0
     702:	60 e0       	ldi	r22, 0x00	; 0
     704:	70 e0       	ldi	r23, 0x00	; 0
     706:	1c 96       	adiw	r26, 0x0c	; 12
     708:	4d 93       	st	X+, r20
     70a:	5d 93       	st	X+, r21
     70c:	6d 93       	st	X+, r22
     70e:	7c 93       	st	X, r23
     710:	1f 97       	sbiw	r26, 0x0f	; 15
    }

  // re-enable timer with potentially new period
  enableTimer(ttNeighbor[faceNum(thisChunk)]);
     712:	e7 70       	andi	r30, 0x07	; 7
     714:	a1 e1       	ldi	r26, 0x11	; 17
     716:	ea 9f       	mul	r30, r26
     718:	f0 01       	movw	r30, r0
     71a:	11 24       	eor	r1, r1
     71c:	e5 58       	subi	r30, 0x85	; 133
     71e:	f6 4d       	sbci	r31, 0xD6	; 214
     720:	21 e0       	ldi	r18, 0x01	; 1
     722:	20 8b       	std	Z+16, r18	; 0x10
 
  freeChunk(thisChunk);
     724:	0c 94 04 07 	jmp	0xe08	; 0xe08 <freeChunk>

00000728 <GUIDIntoChar>:
threadvar Timer ttNeighbor[6];

// converts a UID into a passed in character stream.  Assumes 2-byte GUIDs.
void GUIDIntoChar(Uid id, byte * c)
{
    c[0] = (id >> 8) & 0x00FF;
     728:	fb 01       	movw	r30, r22
     72a:	90 83       	st	Z, r25
    c[1] = (id & 0x00FF); 
     72c:	81 83       	std	Z+1, r24	; 0x01
     72e:	08 95       	ret

00000730 <charToGUID>:
// takes a passed in character array and returns a UID representing the array.  Assumes 2-byte GUIDs.
Uid charToGUID(byte * c)
{
    Uid tmp;

    tmp = (Uid)(c[0]) << 8;
     730:	fc 01       	movw	r30, r24
     732:	30 81       	ld	r19, Z
     734:	20 e0       	ldi	r18, 0x00	; 0
    tmp |= c[1];
     736:	81 81       	ldd	r24, Z+1	; 0x01
     738:	28 2b       	or	r18, r24

    return tmp;
}
     73a:	c9 01       	movw	r24, r18
     73c:	08 95       	ret

0000073e <getNeighborCount>:

// returns number of neighbors that are not VACANT.
byte getNeighborCount()
{
     73e:	ef e6       	ldi	r30, 0x6F	; 111
     740:	f9 e2       	ldi	r31, 0x29	; 41
	uint8_t count, i;
	
	for(count = 0, i = 0; i < NUM_PORTS; ++i)
     742:	80 e0       	ldi	r24, 0x00	; 0
	{
		if(thisNeighborhood.n[i] != VACANT)
     744:	21 91       	ld	r18, Z+
     746:	31 91       	ld	r19, Z+
     748:	23 2b       	or	r18, r19
     74a:	09 f0       	breq	.+2      	; 0x74e <getNeighborCount+0x10>
		{
			count++;
     74c:	8f 5f       	subi	r24, 0xFF	; 255
// returns number of neighbors that are not VACANT.
byte getNeighborCount()
{
	uint8_t count, i;
	
	for(count = 0, i = 0; i < NUM_PORTS; ++i)
     74e:	99 e2       	ldi	r25, 0x29	; 41
     750:	eb 37       	cpi	r30, 0x7B	; 123
     752:	f9 07       	cpc	r31, r25
     754:	b9 f7       	brne	.-18     	; 0x744 <getNeighborCount+0x6>
	}

//	if(count>0)
//	  printf("NEIGHBORCOUNT = %d\r\n", count);
	return count;
}
     756:	08 95       	ret

00000758 <down>:

// simple functions to access geographic neighbors
Uid down(void) { return thisNeighborhood.n[DOWN]; }
     758:	ef e6       	ldi	r30, 0x6F	; 111
     75a:	f9 e2       	ldi	r31, 0x29	; 41
     75c:	80 81       	ld	r24, Z
     75e:	91 81       	ldd	r25, Z+1	; 0x01
     760:	08 95       	ret

00000762 <up>:
Uid up(void) { return thisNeighborhood.n[UP]; }
     762:	e9 e7       	ldi	r30, 0x79	; 121
     764:	f9 e2       	ldi	r31, 0x29	; 41
     766:	80 81       	ld	r24, Z
     768:	91 81       	ldd	r25, Z+1	; 0x01
     76a:	08 95       	ret

0000076c <north>:
Uid north(void) { return thisNeighborhood.n[NORTH]; }
     76c:	e1 e7       	ldi	r30, 0x71	; 113
     76e:	f9 e2       	ldi	r31, 0x29	; 41
     770:	80 81       	ld	r24, Z
     772:	91 81       	ldd	r25, Z+1	; 0x01
     774:	08 95       	ret

00000776 <south>:
Uid south(void) { return thisNeighborhood.n[SOUTH]; }
     776:	e7 e7       	ldi	r30, 0x77	; 119
     778:	f9 e2       	ldi	r31, 0x29	; 41
     77a:	80 81       	ld	r24, Z
     77c:	91 81       	ldd	r25, Z+1	; 0x01
     77e:	08 95       	ret

00000780 <east>:
Uid east(void) { return thisNeighborhood.n[EAST]; }
     780:	e3 e7       	ldi	r30, 0x73	; 115
     782:	f9 e2       	ldi	r31, 0x29	; 41
     784:	80 81       	ld	r24, Z
     786:	91 81       	ldd	r25, Z+1	; 0x01
     788:	08 95       	ret

0000078a <west>:
Uid west(void) { return thisNeighborhood.n[WEST]; }
     78a:	e5 e7       	ldi	r30, 0x75	; 117
     78c:	f9 e2       	ldi	r31, 0x29	; 41
     78e:	80 81       	ld	r24, Z
     790:	91 81       	ldd	r25, Z+1	; 0x01
     792:	08 95       	ret

00000794 <updateNeighbor>:
		return;
	}

#endif

	if(p < NUM_PORTS)
     794:	86 30       	cpi	r24, 0x06	; 6
     796:	80 f4       	brcc	.+32     	; 0x7b8 <updateNeighbor+0x24>
	{
		// is the state changing?  Trigger handler
	    if(thisNeighborhood.n[p] != b)
     798:	e8 2f       	mov	r30, r24
     79a:	f0 e0       	ldi	r31, 0x00	; 0
     79c:	ee 0f       	add	r30, r30
     79e:	ff 1f       	adc	r31, r31
     7a0:	e1 59       	subi	r30, 0x91	; 145
     7a2:	f6 4d       	sbci	r31, 0xD6	; 214
     7a4:	80 81       	ld	r24, Z
     7a6:	91 81       	ldd	r25, Z+1	; 0x01
     7a8:	86 17       	cp	r24, r22
     7aa:	97 07       	cpc	r25, r23
     7ac:	29 f0       	breq	.+10     	; 0x7b8 <updateNeighbor+0x24>
	    {
	        thisNeighborhood.n[p] = b;
     7ae:	60 83       	st	Z, r22
     7b0:	71 83       	std	Z+1, r23	; 0x01
	        triggerHandler(EVENT_NEIGHBOR_CHANGE);
     7b2:	83 e1       	ldi	r24, 0x13	; 19
     7b4:	0c 94 4f 06 	jmp	0xc9e	; 0xc9e <triggerHandler>
     7b8:	08 95       	ret

000007ba <restartScan>:
    return 1;
}

// sets neighbor to VACANT, and starts a timer/timeout to send handshake initialization messages
void restartScan(PRef i)
{
     7ba:	1f 93       	push	r17
     7bc:	cf 93       	push	r28
     7be:	df 93       	push	r29
     7c0:	18 2f       	mov	r17, r24
  updateNeighbor(i, VACANT);
     7c2:	60 e0       	ldi	r22, 0x00	; 0
     7c4:	70 e0       	ldi	r23, 0x00	; 0
     7c6:	0e 94 ca 03 	call	0x794	; 0x794 <updateNeighbor>

  // deregister timer and deregister timeouts if they are already in the lists
  disableTimer(ttNeighbor[i]);
     7ca:	c1 2f       	mov	r28, r17
     7cc:	d0 e0       	ldi	r29, 0x00	; 0
     7ce:	81 e1       	ldi	r24, 0x11	; 17
     7d0:	18 9f       	mul	r17, r24
     7d2:	90 01       	movw	r18, r0
     7d4:	11 24       	eor	r1, r1
     7d6:	f9 01       	movw	r30, r18
     7d8:	e5 58       	subi	r30, 0x85	; 133
     7da:	f6 4d       	sbci	r31, 0xD6	; 214
     7dc:	10 8a       	std	Z+16, r1	; 0x10
  if(ttNeighbor[i].t.state != INACTIVE)
     7de:	82 85       	ldd	r24, Z+10	; 0x0a
     7e0:	88 23       	and	r24, r24
     7e2:	29 f0       	breq	.+10     	; 0x7ee <restartScan+0x34>
    {
      deregisterTimeout(&(ttNeighbor[i].t));
     7e4:	c9 01       	movw	r24, r18
     7e6:	83 58       	subi	r24, 0x83	; 131
     7e8:	96 4d       	sbci	r25, 0xD6	; 214
     7ea:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <deregisterTimeout>
    }

  // set up timer to call neighbor scan
  (ttNeighbor[i]).t.arg = i;
     7ee:	81 e1       	ldi	r24, 0x11	; 17
     7f0:	8c 9f       	mul	r24, r28
     7f2:	f0 01       	movw	r30, r0
     7f4:	8d 9f       	mul	r24, r29
     7f6:	f0 0d       	add	r31, r0
     7f8:	11 24       	eor	r1, r1
     7fa:	e5 58       	subi	r30, 0x85	; 133
     7fc:	f6 4d       	sbci	r31, 0xD6	; 214
     7fe:	13 87       	std	Z+11, r17	; 0x0b
  (ttNeighbor[i]).t.callback = (GenericHandler)&neighborScan;
     800:	88 e2       	ldi	r24, 0x28	; 40
     802:	93 e0       	ldi	r25, 0x03	; 3
     804:	80 87       	std	Z+8, r24	; 0x08
     806:	91 87       	std	Z+9, r25	; 0x09
  (ttNeighbor[i]).period = NEIGHBOR_SCAN_PERIOD;
     808:	82 e3       	ldi	r24, 0x32	; 50
     80a:	90 e0       	ldi	r25, 0x00	; 0
     80c:	a0 e0       	ldi	r26, 0x00	; 0
     80e:	b0 e0       	ldi	r27, 0x00	; 0
     810:	84 87       	std	Z+12, r24	; 0x0c
     812:	95 87       	std	Z+13, r25	; 0x0d
     814:	a6 87       	std	Z+14, r26	; 0x0e
     816:	b7 87       	std	Z+15, r27	; 0x0f
  enableTimer(ttNeighbor[i]);
     818:	81 e0       	ldi	r24, 0x01	; 1
     81a:	80 8b       	std	Z+16, r24	; 0x10
}
     81c:	df 91       	pop	r29
     81e:	cf 91       	pop	r28
     820:	1f 91       	pop	r17
     822:	08 95       	ret

00000824 <handleNeighborMessage>:
  freeChunk(thisChunk);
}

// called for all NEIGHBOR_MSG type reserved system handlers
byte handleNeighborMessage(void)
{
     824:	df 92       	push	r13
     826:	ef 92       	push	r14
     828:	ff 92       	push	r15
     82a:	0f 93       	push	r16
     82c:	1f 93       	push	r17
     82e:	cf 93       	push	r28
     830:	df 93       	push	r29
     832:	00 d0       	rcall	.+0      	; 0x834 <handleNeighborMessage+0x10>
     834:	00 d0       	rcall	.+0      	; 0x836 <handleNeighborMessage+0x12>
     836:	cd b7       	in	r28, 0x3d	; 61
     838:	de b7       	in	r29, 0x3e	; 62
    if( thisChunk == NULL ) 
     83a:	e0 91 6d 29 	lds	r30, 0x296D
     83e:	f0 91 6e 29 	lds	r31, 0x296E
     842:	30 97       	sbiw	r30, 0x00	; 0
     844:	09 f4       	brne	.+2      	; 0x848 <handleNeighborMessage+0x24>
     846:	00 c1       	rjmp	.+512    	; 0xa48 <handleNeighborMessage+0x224>
    {
      return 0;
    }
  
    switch(thisChunk->data[1])
     848:	91 81       	ldd	r25, Z+1	; 0x01
     84a:	92 30       	cpi	r25, 0x02	; 2
     84c:	09 f4       	brne	.+2      	; 0x850 <handleNeighborMessage+0x2c>
     84e:	5c c0       	rjmp	.+184    	; 0x908 <handleNeighborMessage+0xe4>
     850:	93 30       	cpi	r25, 0x03	; 3
     852:	09 f4       	brne	.+2      	; 0x856 <handleNeighborMessage+0x32>
     854:	be c0       	rjmp	.+380    	; 0x9d2 <handleNeighborMessage+0x1ae>
     856:	91 30       	cpi	r25, 0x01	; 1
     858:	09 f0       	breq	.+2      	; 0x85c <handleNeighborMessage+0x38>
     85a:	f8 c0       	rjmp	.+496    	; 0xa4c <handleNeighborMessage+0x228>
    {
      // a neighbor wants to initiate a response with us, craft a response
      case MSG_NEIGHBOR_START:
      {
	    // have we already received an ACK to our own NEIGHBOR_MSG?  If not, respond
	    if((ttNeighbor[faceNum(thisChunk)]).period != NEIGHBOR_HANDSHAKE_TIMEOUT_PERIOD)
     85c:	e1 89       	ldd	r30, Z+17	; 0x11
     85e:	e7 70       	andi	r30, 0x07	; 7
     860:	11 e1       	ldi	r17, 0x11	; 17
     862:	1e 9f       	mul	r17, r30
     864:	f0 01       	movw	r30, r0
     866:	11 24       	eor	r1, r1
     868:	e5 58       	subi	r30, 0x85	; 133
     86a:	f6 4d       	sbci	r31, 0xD6	; 214
     86c:	44 85       	ldd	r20, Z+12	; 0x0c
     86e:	55 85       	ldd	r21, Z+13	; 0x0d
     870:	66 85       	ldd	r22, Z+14	; 0x0e
     872:	77 85       	ldd	r23, Z+15	; 0x0f
     874:	44 36       	cpi	r20, 0x64	; 100
     876:	51 05       	cpc	r21, r1
     878:	61 05       	cpc	r22, r1
     87a:	71 05       	cpc	r23, r1
     87c:	09 f4       	brne	.+2      	; 0x880 <handleNeighborMessage+0x5c>
     87e:	e6 c0       	rjmp	.+460    	; 0xa4c <handleNeighborMessage+0x228>
	    {
	      // build a neighbor handshake packet
	      // of the form:
	      // [handshake header] [my guid] [your guid]
	      byte buf[6];
	      buf[0] = NEIGHBOR_MSG;
     880:	99 83       	std	Y+1, r25	; 0x01
	      buf[1] = MSG_NEIGHBOR_RESPONSE;
     882:	82 e0       	ldi	r24, 0x02	; 2
     884:	8a 83       	std	Y+2, r24	; 0x02
	      GUIDIntoChar(getGUID(), &(buf[2]));
     886:	0e 94 92 11 	call	0x2324	; 0x2324 <getGUID>
threadvar Timer ttNeighbor[6];

// converts a UID into a passed in character stream.  Assumes 2-byte GUIDs.
void GUIDIntoChar(Uid id, byte * c)
{
    c[0] = (id >> 8) & 0x00FF;
     88a:	9b 83       	std	Y+3, r25	; 0x03
    c[1] = (id & 0x00FF); 
     88c:	8c 83       	std	Y+4, r24	; 0x04
	      // [handshake header] [my guid] [your guid]
	      byte buf[6];
	      buf[0] = NEIGHBOR_MSG;
	      buf[1] = MSG_NEIGHBOR_RESPONSE;
	      GUIDIntoChar(getGUID(), &(buf[2]));
	      buf[4] = thisChunk->data[2];
     88e:	e0 91 6d 29 	lds	r30, 0x296D
     892:	f0 91 6e 29 	lds	r31, 0x296E
     896:	82 81       	ldd	r24, Z+2	; 0x02
     898:	8d 83       	std	Y+5, r24	; 0x05
	      buf[5] = thisChunk->data[3];
     89a:	83 81       	ldd	r24, Z+3	; 0x03
     89c:	8e 83       	std	Y+6, r24	; 0x06
	
	      // if our neighbor is already vacant, nothing happens.
	      // if this guid == old guid, they got reset somehow, so drop neighbor so user can re-add gracefully
	      // if this guid != old guid, then we got a new block, so drop neighbor so user can re-add gracefully
	      updateNeighbor(faceNum(thisChunk), VACANT);
     89e:	81 89       	ldd	r24, Z+17	; 0x11
     8a0:	60 e0       	ldi	r22, 0x00	; 0
     8a2:	70 e0       	ldi	r23, 0x00	; 0
     8a4:	87 70       	andi	r24, 0x07	; 7
     8a6:	0e 94 ca 03 	call	0x794	; 0x794 <updateNeighbor>
	    
	      // stop any imminent timeouts such as neighborscanning
	      disableTimer(ttNeighbor[faceNum(thisChunk)]);
     8aa:	a0 91 6d 29 	lds	r26, 0x296D
     8ae:	b0 91 6e 29 	lds	r27, 0x296E
     8b2:	51 96       	adiw	r26, 0x11	; 17
     8b4:	ec 91       	ld	r30, X
     8b6:	51 97       	sbiw	r26, 0x11	; 17
     8b8:	e7 70       	andi	r30, 0x07	; 7
     8ba:	1e 9f       	mul	r17, r30
     8bc:	f0 01       	movw	r30, r0
     8be:	11 24       	eor	r1, r1
     8c0:	e5 58       	subi	r30, 0x85	; 133
     8c2:	f6 4d       	sbci	r31, 0xD6	; 214
     8c4:	10 8a       	std	Z+16, r1	; 0x10
	      if(ttNeighbor[faceNum(thisChunk)].t.state != INACTIVE)
     8c6:	51 96       	adiw	r26, 0x11	; 17
     8c8:	8c 91       	ld	r24, X
     8ca:	87 70       	andi	r24, 0x07	; 7
     8cc:	18 9f       	mul	r17, r24
     8ce:	c0 01       	movw	r24, r0
     8d0:	11 24       	eor	r1, r1
     8d2:	fc 01       	movw	r30, r24
     8d4:	e5 58       	subi	r30, 0x85	; 133
     8d6:	f6 4d       	sbci	r31, 0xD6	; 214
     8d8:	22 85       	ldd	r18, Z+10	; 0x0a
     8da:	22 23       	and	r18, r18
     8dc:	21 f0       	breq	.+8      	; 0x8e6 <handleNeighborMessage+0xc2>
		{
		  deregisterTimeout(&(ttNeighbor[faceNum(thisChunk)].t));
     8de:	83 58       	subi	r24, 0x83	; 131
     8e0:	96 4d       	sbci	r25, 0xD6	; 214
     8e2:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <deregisterTimeout>
		}

	      // callback will add neighbor or restart scanning, as necessary
	      sendSystemMessage(faceNum(thisChunk), buf, 6, RES_SYS_HANDLER, (GenericHandler)&neighborHandshakeCB);
     8e6:	e0 91 6d 29 	lds	r30, 0x296D
     8ea:	f0 91 6e 29 	lds	r31, 0x296E
     8ee:	81 89       	ldd	r24, Z+17	; 0x11
     8f0:	02 e3       	ldi	r16, 0x32	; 50
     8f2:	15 e0       	ldi	r17, 0x05	; 5
     8f4:	20 e0       	ldi	r18, 0x00	; 0
     8f6:	30 e0       	ldi	r19, 0x00	; 0
     8f8:	46 e0       	ldi	r20, 0x06	; 6
     8fa:	be 01       	movw	r22, r28
     8fc:	6f 5f       	subi	r22, 0xFF	; 255
     8fe:	7f 4f       	sbci	r23, 0xFF	; 255
     900:	87 70       	andi	r24, 0x07	; 7
     902:	0e 94 79 07 	call	0xef2	; 0xef2 <sendSystemMessage>
     906:	a2 c0       	rjmp	.+324    	; 0xa4c <handleNeighborMessage+0x228>
      }
      // got a response to our request for a neighbor handshake
      case MSG_NEIGHBOR_RESPONSE:
      {
	    // are we waiting for a handshake?  well, here it is!
	    if((ttNeighbor[faceNum(thisChunk)]).period == NEIGHBOR_HANDSHAKE_TIMEOUT_PERIOD)
     908:	a1 89       	ldd	r26, Z+17	; 0x11
     90a:	a7 70       	andi	r26, 0x07	; 7
     90c:	51 e1       	ldi	r21, 0x11	; 17
     90e:	d5 2e       	mov	r13, r21
     910:	da 9e       	mul	r13, r26
     912:	d0 01       	movw	r26, r0
     914:	11 24       	eor	r1, r1
     916:	a5 58       	subi	r26, 0x85	; 133
     918:	b6 4d       	sbci	r27, 0xD6	; 214
     91a:	1c 96       	adiw	r26, 0x0c	; 12
     91c:	4d 91       	ld	r20, X+
     91e:	5d 91       	ld	r21, X+
     920:	6d 91       	ld	r22, X+
     922:	7c 91       	ld	r23, X
     924:	1f 97       	sbiw	r26, 0x0f	; 15
     926:	44 36       	cpi	r20, 0x64	; 100
     928:	51 05       	cpc	r21, r1
     92a:	61 05       	cpc	r22, r1
     92c:	71 05       	cpc	r23, r1
     92e:	09 f0       	breq	.+2      	; 0x932 <handleNeighborMessage+0x10e>
     930:	8d c0       	rjmp	.+282    	; 0xa4c <handleNeighborMessage+0x228>
// takes a passed in character array and returns a UID representing the array.  Assumes 2-byte GUIDs.
Uid charToGUID(byte * c)
{
    Uid tmp;

    tmp = (Uid)(c[0]) << 8;
     932:	02 81       	ldd	r16, Z+2	; 0x02
    tmp |= c[1];
     934:	13 81       	ldd	r17, Z+3	; 0x03
// takes a passed in character array and returns a UID representing the array.  Assumes 2-byte GUIDs.
Uid charToGUID(byte * c)
{
    Uid tmp;

    tmp = (Uid)(c[0]) << 8;
     936:	34 81       	ldd	r19, Z+4	; 0x04
     938:	20 e0       	ldi	r18, 0x00	; 0
    tmp |= c[1];
     93a:	85 81       	ldd	r24, Z+5	; 0x05
     93c:	79 01       	movw	r14, r18
     93e:	e8 2a       	or	r14, r24
	        // pull [your guid][my guid] from the handshake packet - reversed from how it was sent
	        neighbor = charToGUID(&(thisChunk->data[2]));
	        me = charToGUID(&(thisChunk->data[4]));
	    
	        // got a sensible response
	        if(me == getGUID())
     940:	0e 94 92 11 	call	0x2324	; 0x2324 <getGUID>
     944:	e8 16       	cp	r14, r24
     946:	f9 06       	cpc	r15, r25
     948:	09 f0       	breq	.+2      	; 0x94c <handleNeighborMessage+0x128>
     94a:	80 c0       	rjmp	.+256    	; 0xa4c <handleNeighborMessage+0x228>
	        {
		        // stop any imminent rescans
		        disableTimer(ttNeighbor[faceNum(thisChunk)]);
     94c:	a0 91 6d 29 	lds	r26, 0x296D
     950:	b0 91 6e 29 	lds	r27, 0x296E
     954:	51 96       	adiw	r26, 0x11	; 17
     956:	ec 91       	ld	r30, X
     958:	51 97       	sbiw	r26, 0x11	; 17
     95a:	e7 70       	andi	r30, 0x07	; 7
     95c:	de 9e       	mul	r13, r30
     95e:	f0 01       	movw	r30, r0
     960:	11 24       	eor	r1, r1
     962:	e5 58       	subi	r30, 0x85	; 133
     964:	f6 4d       	sbci	r31, 0xD6	; 214
     966:	10 8a       	std	Z+16, r1	; 0x10
			if(ttNeighbor[faceNum(thisChunk)].t.state != INACTIVE)
     968:	51 96       	adiw	r26, 0x11	; 17
     96a:	8c 91       	ld	r24, X
     96c:	87 70       	andi	r24, 0x07	; 7
     96e:	d8 9e       	mul	r13, r24
     970:	c0 01       	movw	r24, r0
     972:	11 24       	eor	r1, r1
     974:	fc 01       	movw	r30, r24
     976:	e5 58       	subi	r30, 0x85	; 133
     978:	f6 4d       	sbci	r31, 0xD6	; 214
     97a:	22 85       	ldd	r18, Z+10	; 0x0a
     97c:	22 23       	and	r18, r18
     97e:	21 f0       	breq	.+8      	; 0x988 <handleNeighborMessage+0x164>
			  {
			    deregisterTimeout(&(ttNeighbor[faceNum(thisChunk)].t));
     980:	83 58       	subi	r24, 0x83	; 131
     982:	96 4d       	sbci	r25, 0xD6	; 214
     984:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <deregisterTimeout>
			  }
		
		        // re-add timer, but now for keepalive purposes
		        ttNeighbor[faceNum(thisChunk)].period = NEIGHBOR_KEEPALIVE_PERIOD;
     988:	20 91 6d 29 	lds	r18, 0x296D
     98c:	30 91 6e 29 	lds	r19, 0x296E
     990:	d9 01       	movw	r26, r18
     992:	51 96       	adiw	r26, 0x11	; 17
     994:	ec 91       	ld	r30, X
     996:	e7 70       	andi	r30, 0x07	; 7
     998:	b1 e1       	ldi	r27, 0x11	; 17
     99a:	eb 9f       	mul	r30, r27
     99c:	f0 01       	movw	r30, r0
     99e:	11 24       	eor	r1, r1
     9a0:	e5 58       	subi	r30, 0x85	; 133
     9a2:	f6 4d       	sbci	r31, 0xD6	; 214
     9a4:	84 ef       	ldi	r24, 0xF4	; 244
     9a6:	91 e0       	ldi	r25, 0x01	; 1
     9a8:	a0 e0       	ldi	r26, 0x00	; 0
     9aa:	b0 e0       	ldi	r27, 0x00	; 0
     9ac:	84 87       	std	Z+12, r24	; 0x0c
     9ae:	95 87       	std	Z+13, r25	; 0x0d
     9b0:	a6 87       	std	Z+14, r26	; 0x0e
     9b2:	b7 87       	std	Z+15, r27	; 0x0f
		        ttNeighbor[faceNum(thisChunk)].t.callback = (GenericHandler)&neighborKeepalive;
     9b4:	8a ee       	ldi	r24, 0xEA	; 234
     9b6:	92 e0       	ldi	r25, 0x02	; 2
     9b8:	80 87       	std	Z+8, r24	; 0x08
     9ba:	91 87       	std	Z+9, r25	; 0x09
        		enableTimer(ttNeighbor[faceNum(thisChunk)]);
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	80 8b       	std	Z+16, r24	; 0x10
// takes a passed in character array and returns a UID representing the array.  Assumes 2-byte GUIDs.
Uid charToGUID(byte * c)
{
    Uid tmp;

    tmp = (Uid)(c[0]) << 8;
     9c0:	70 2f       	mov	r23, r16
     9c2:	60 e0       	ldi	r22, 0x00	; 0
    tmp |= c[1];
     9c4:	61 2b       	or	r22, r17
		        ttNeighbor[faceNum(thisChunk)].period = NEIGHBOR_KEEPALIVE_PERIOD;
		        ttNeighbor[faceNum(thisChunk)].t.callback = (GenericHandler)&neighborKeepalive;
        		enableTimer(ttNeighbor[faceNum(thisChunk)]);
		
		        // add new neighbor to neighborhood
        		updateNeighbor(faceNum(thisChunk), neighbor);
     9c6:	f9 01       	movw	r30, r18
     9c8:	81 89       	ldd	r24, Z+17	; 0x11
     9ca:	87 70       	andi	r24, 0x07	; 7
     9cc:	0e 94 ca 03 	call	0x794	; 0x794 <updateNeighbor>
     9d0:	3d c0       	rjmp	.+122    	; 0xa4c <handleNeighborMessage+0x228>
	    break;
      }
      case MSG_NEIGHBOR_KEEPALIVE:
      {
	    // are we currently looking for keepalives?  if yes, here it is!
	    if((ttNeighbor[faceNum(thisChunk)]).period == NEIGHBOR_KEEPALIVE_PERIOD)
     9d2:	a1 89       	ldd	r26, Z+17	; 0x11
     9d4:	a7 70       	andi	r26, 0x07	; 7
     9d6:	21 e1       	ldi	r18, 0x11	; 17
     9d8:	a2 9f       	mul	r26, r18
     9da:	d0 01       	movw	r26, r0
     9dc:	11 24       	eor	r1, r1
     9de:	a5 58       	subi	r26, 0x85	; 133
     9e0:	b6 4d       	sbci	r27, 0xD6	; 214
     9e2:	1c 96       	adiw	r26, 0x0c	; 12
     9e4:	8d 91       	ld	r24, X+
     9e6:	9d 91       	ld	r25, X+
     9e8:	0d 90       	ld	r0, X+
     9ea:	bc 91       	ld	r27, X
     9ec:	a0 2d       	mov	r26, r0
     9ee:	84 3f       	cpi	r24, 0xF4	; 244
     9f0:	91 40       	sbci	r25, 0x01	; 1
     9f2:	a1 05       	cpc	r26, r1
     9f4:	b1 05       	cpc	r27, r1
     9f6:	51 f5       	brne	.+84     	; 0xa4c <handleNeighborMessage+0x228>
// takes a passed in character array and returns a UID representing the array.  Assumes 2-byte GUIDs.
Uid charToGUID(byte * c)
{
    Uid tmp;

    tmp = (Uid)(c[0]) << 8;
     9f8:	e2 80       	ldd	r14, Z+2	; 0x02
    tmp |= c[1];
     9fa:	f3 80       	ldd	r15, Z+3	; 0x03
// takes a passed in character array and returns a UID representing the array.  Assumes 2-byte GUIDs.
Uid charToGUID(byte * c)
{
    Uid tmp;

    tmp = (Uid)(c[0]) << 8;
     9fc:	94 81       	ldd	r25, Z+4	; 0x04
     9fe:	80 e0       	ldi	r24, 0x00	; 0
    tmp |= c[1];
     a00:	25 81       	ldd	r18, Z+5	; 0x05
     a02:	8c 01       	movw	r16, r24
     a04:	02 2b       	or	r16, r18

	        neighbor = charToGUID(&(thisChunk->data[2]));
	        me = charToGUID(&(thisChunk->data[4]));

	        // got a bad or unexpected response - clear neighbor and restart scan
	        if(me != getGUID() || neighbor != thisNeighborhood.n[faceNum(thisChunk)])
     a06:	0e 94 92 11 	call	0x2324	; 0x2324 <getGUID>
     a0a:	08 17       	cp	r16, r24
     a0c:	19 07       	cpc	r17, r25
     a0e:	99 f4       	brne	.+38     	; 0xa36 <handleNeighborMessage+0x212>
// takes a passed in character array and returns a UID representing the array.  Assumes 2-byte GUIDs.
Uid charToGUID(byte * c)
{
    Uid tmp;

    tmp = (Uid)(c[0]) << 8;
     a10:	9e 2d       	mov	r25, r14
     a12:	80 e0       	ldi	r24, 0x00	; 0
    tmp |= c[1];
     a14:	8f 29       	or	r24, r15

	        neighbor = charToGUID(&(thisChunk->data[2]));
	        me = charToGUID(&(thisChunk->data[4]));

	        // got a bad or unexpected response - clear neighbor and restart scan
	        if(me != getGUID() || neighbor != thisNeighborhood.n[faceNum(thisChunk)])
     a16:	e0 91 6d 29 	lds	r30, 0x296D
     a1a:	f0 91 6e 29 	lds	r31, 0x296E
     a1e:	e1 89       	ldd	r30, Z+17	; 0x11
     a20:	e7 70       	andi	r30, 0x07	; 7
     a22:	f0 e0       	ldi	r31, 0x00	; 0
     a24:	ee 0f       	add	r30, r30
     a26:	ff 1f       	adc	r31, r31
     a28:	e1 59       	subi	r30, 0x91	; 145
     a2a:	f6 4d       	sbci	r31, 0xD6	; 214
     a2c:	20 81       	ld	r18, Z
     a2e:	31 81       	ldd	r19, Z+1	; 0x01
     a30:	82 17       	cp	r24, r18
     a32:	93 07       	cpc	r25, r19
     a34:	59 f0       	breq	.+22     	; 0xa4c <handleNeighborMessage+0x228>
	        {
		        restartScan(faceNum(thisChunk));
     a36:	e0 91 6d 29 	lds	r30, 0x296D
     a3a:	f0 91 6e 29 	lds	r31, 0x296E
     a3e:	81 89       	ldd	r24, Z+17	; 0x11
     a40:	87 70       	andi	r24, 0x07	; 7
     a42:	0e 94 dd 03 	call	0x7ba	; 0x7ba <restartScan>
     a46:	02 c0       	rjmp	.+4      	; 0xa4c <handleNeighborMessage+0x228>
// called for all NEIGHBOR_MSG type reserved system handlers
byte handleNeighborMessage(void)
{
    if( thisChunk == NULL ) 
    {
      return 0;
     a48:	80 e0       	ldi	r24, 0x00	; 0
     a4a:	01 c0       	rjmp	.+2      	; 0xa4e <handleNeighborMessage+0x22a>
        break;
      }
      default: 
        break;  
    }
    return 1;
     a4c:	81 e0       	ldi	r24, 0x01	; 1
}
     a4e:	26 96       	adiw	r28, 0x06	; 6
     a50:	cd bf       	out	0x3d, r28	; 61
     a52:	de bf       	out	0x3e, r29	; 62
     a54:	df 91       	pop	r29
     a56:	cf 91       	pop	r28
     a58:	1f 91       	pop	r17
     a5a:	0f 91       	pop	r16
     a5c:	ff 90       	pop	r15
     a5e:	ef 90       	pop	r14
     a60:	df 90       	pop	r13
     a62:	08 95       	ret

00000a64 <neighborHandshakeCB>:
  sendSystemMessage(thisTimeout->arg, buf, 6, RES_SYS_HANDLER, (GenericHandler)&neighborKeepaliveCB);
}

// callback for neighbor_response packet
void neighborHandshakeCB(void)
{
     a64:	cf 93       	push	r28
     a66:	df 93       	push	r29
    // message was received.  add neighbor to neighborhood and initiate keepalives
    if(chunkResponseType(thisChunk) == MSG_RESP_ACK)
     a68:	e0 91 6d 29 	lds	r30, 0x296D
     a6c:	f0 91 6e 29 	lds	r31, 0x296E
     a70:	81 89       	ldd	r24, Z+17	; 0x11
     a72:	98 2f       	mov	r25, r24
     a74:	98 71       	andi	r25, 0x18	; 24
     a76:	98 30       	cpi	r25, 0x08	; 8
     a78:	b9 f5       	brne	.+110    	; 0xae8 <neighborHandshakeCB+0x84>
// takes a passed in character array and returns a UID representing the array.  Assumes 2-byte GUIDs.
Uid charToGUID(byte * c)
{
    Uid tmp;

    tmp = (Uid)(c[0]) << 8;
     a7a:	74 81       	ldd	r23, Z+4	; 0x04
     a7c:	60 e0       	ldi	r22, 0x00	; 0
    tmp |= c[1];
     a7e:	95 81       	ldd	r25, Z+5	; 0x05
     a80:	eb 01       	movw	r28, r22
     a82:	c9 2b       	or	r28, r25
    {
      // pull neighbor from packet, same position as how we initially sent it
      Uid neighbor = charToGUID(&(thisChunk->data[4]));
      
      // re-add timer for keepalive purposes
      ttNeighbor[faceNum(thisChunk)].period = NEIGHBOR_KEEPALIVE_PERIOD;
     a84:	87 70       	andi	r24, 0x07	; 7
     a86:	21 e1       	ldi	r18, 0x11	; 17
     a88:	82 9f       	mul	r24, r18
     a8a:	c0 01       	movw	r24, r0
     a8c:	11 24       	eor	r1, r1
     a8e:	fc 01       	movw	r30, r24
     a90:	e5 58       	subi	r30, 0x85	; 133
     a92:	f6 4d       	sbci	r31, 0xD6	; 214
     a94:	44 ef       	ldi	r20, 0xF4	; 244
     a96:	51 e0       	ldi	r21, 0x01	; 1
     a98:	60 e0       	ldi	r22, 0x00	; 0
     a9a:	70 e0       	ldi	r23, 0x00	; 0
     a9c:	44 87       	std	Z+12, r20	; 0x0c
     a9e:	55 87       	std	Z+13, r21	; 0x0d
     aa0:	66 87       	std	Z+14, r22	; 0x0e
     aa2:	77 87       	std	Z+15, r23	; 0x0f
      if(ttNeighbor[faceNum(thisChunk)].t.state != INACTIVE)
     aa4:	22 85       	ldd	r18, Z+10	; 0x0a
     aa6:	22 23       	and	r18, r18
     aa8:	21 f0       	breq	.+8      	; 0xab2 <neighborHandshakeCB+0x4e>
	{
	  deregisterTimeout(&(ttNeighbor[faceNum(thisChunk)].t));
     aaa:	83 58       	subi	r24, 0x83	; 131
     aac:	96 4d       	sbci	r25, 0xD6	; 214
     aae:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <deregisterTimeout>
	}
      ttNeighbor[faceNum(thisChunk)].t.callback = (GenericHandler)&neighborKeepalive;
     ab2:	a0 91 6d 29 	lds	r26, 0x296D
     ab6:	b0 91 6e 29 	lds	r27, 0x296E
     aba:	51 96       	adiw	r26, 0x11	; 17
     abc:	ec 91       	ld	r30, X
     abe:	51 97       	sbiw	r26, 0x11	; 17
     ac0:	e7 70       	andi	r30, 0x07	; 7
     ac2:	81 e1       	ldi	r24, 0x11	; 17
     ac4:	e8 9f       	mul	r30, r24
     ac6:	f0 01       	movw	r30, r0
     ac8:	11 24       	eor	r1, r1
     aca:	e5 58       	subi	r30, 0x85	; 133
     acc:	f6 4d       	sbci	r31, 0xD6	; 214
     ace:	8a ee       	ldi	r24, 0xEA	; 234
     ad0:	92 e0       	ldi	r25, 0x02	; 2
     ad2:	80 87       	std	Z+8, r24	; 0x08
     ad4:	91 87       	std	Z+9, r25	; 0x09
      enableTimer(ttNeighbor[faceNum(thisChunk)]);
     ad6:	81 e0       	ldi	r24, 0x01	; 1
     ad8:	80 8b       	std	Z+16, r24	; 0x10
      
      // add new neighbor to neighborhood
      updateNeighbor(faceNum(thisChunk), neighbor);
     ada:	51 96       	adiw	r26, 0x11	; 17
     adc:	8c 91       	ld	r24, X
     ade:	be 01       	movw	r22, r28
     ae0:	87 70       	andi	r24, 0x07	; 7
     ae2:	0e 94 ca 03 	call	0x794	; 0x794 <updateNeighbor>
     ae6:	03 c0       	rjmp	.+6      	; 0xaee <neighborHandshakeCB+0x8a>

    }
    else // no neighbor ACK!  begin rescanning
    {
      restartScan(faceNum(thisChunk));
     ae8:	87 70       	andi	r24, 0x07	; 7
     aea:	0e 94 dd 03 	call	0x7ba	; 0x7ba <restartScan>
    }
  
  freeChunk(thisChunk);
     aee:	80 91 6d 29 	lds	r24, 0x296D
     af2:	90 91 6e 29 	lds	r25, 0x296E
}
     af6:	df 91       	pop	r29
     af8:	cf 91       	pop	r28
    else // no neighbor ACK!  begin rescanning
    {
      restartScan(faceNum(thisChunk));
    }
  
  freeChunk(thisChunk);
     afa:	0c 94 04 07 	jmp	0xe08	; 0xe08 <freeChunk>

00000afe <neighborKeepaliveCB>:
void neighborKeepaliveCB(void)
{
    // message was received.  re-enable timer and continue as normal
    // note that since we always ACK a received message, this will happen even if the other block 
    // does not understand why the keepalive was sent.  however, the other block will restart a handshake.
    if(chunkResponseType(thisChunk) == MSG_RESP_ACK)
     afe:	e0 91 6d 29 	lds	r30, 0x296D
     b02:	f0 91 6e 29 	lds	r31, 0x296E
     b06:	81 89       	ldd	r24, Z+17	; 0x11
     b08:	98 2f       	mov	r25, r24
     b0a:	98 71       	andi	r25, 0x18	; 24
     b0c:	87 70       	andi	r24, 0x07	; 7
     b0e:	98 30       	cpi	r25, 0x08	; 8
     b10:	49 f4       	brne	.+18     	; 0xb24 <neighborKeepaliveCB+0x26>
    {
        enableTimer(ttNeighbor[faceNum(thisChunk)]);
     b12:	91 e1       	ldi	r25, 0x11	; 17
     b14:	89 9f       	mul	r24, r25
     b16:	f0 01       	movw	r30, r0
     b18:	11 24       	eor	r1, r1
     b1a:	e5 58       	subi	r30, 0x85	; 133
     b1c:	f6 4d       	sbci	r31, 0xD6	; 214
     b1e:	81 e0       	ldi	r24, 0x01	; 1
     b20:	80 8b       	std	Z+16, r24	; 0x10
     b22:	02 c0       	rjmp	.+4      	; 0xb28 <neighborKeepaliveCB+0x2a>
    }
    else // neighbor lost!  begin rescanning
    {
        restartScan(faceNum(thisChunk));
     b24:	0e 94 dd 03 	call	0x7ba	; 0x7ba <restartScan>
    }

    freeChunk(thisChunk);
     b28:	80 91 6d 29 	lds	r24, 0x296D
     b2c:	90 91 6e 29 	lds	r25, 0x296E
     b30:	0c 94 04 07 	jmp	0xe08	; 0xe08 <freeChunk>

00000b34 <initEnsemble>:
  (ttNeighbor[i]).period = NEIGHBOR_SCAN_PERIOD;
  enableTimer(ttNeighbor[i]);
}

void initEnsemble(void)
{
     b34:	ff 92       	push	r15
     b36:	0f 93       	push	r16
     b38:	1f 93       	push	r17
     b3a:	cf 93       	push	r28
     b3c:	df 93       	push	r29
     b3e:	0b e8       	ldi	r16, 0x8B	; 139
     b40:	19 e2       	ldi	r17, 0x29	; 41
    int i;
  
    // restart scanning for neighbors on all ports
    for( i=0; i<NUM_PORTS; ++i)
     b42:	c0 e0       	ldi	r28, 0x00	; 0
     b44:	d0 e0       	ldi	r29, 0x00	; 0
        if(i == DEBUGPORT) {
            continue;
        }
        #endif

	registerTimer(&(ttNeighbor[i]));
     b46:	61 e1       	ldi	r22, 0x11	; 17
     b48:	f6 2e       	mov	r15, r22
     b4a:	fc 9e       	mul	r15, r28
     b4c:	c0 01       	movw	r24, r0
     b4e:	fd 9e       	mul	r15, r29
     b50:	90 0d       	add	r25, r0
     b52:	11 24       	eor	r1, r1
     b54:	85 58       	subi	r24, 0x85	; 133
     b56:	96 4d       	sbci	r25, 0xD6	; 214
     b58:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <registerTimer>
	disableTimer(ttNeighbor[i]);
     b5c:	f8 01       	movw	r30, r16
     b5e:	10 82       	st	Z, r1
        restartScan(i);
     b60:	8c 2f       	mov	r24, r28
     b62:	0e 94 dd 03 	call	0x7ba	; 0x7ba <restartScan>
void initEnsemble(void)
{
    int i;
  
    // restart scanning for neighbors on all ports
    for( i=0; i<NUM_PORTS; ++i)
     b66:	21 96       	adiw	r28, 0x01	; 1
     b68:	0f 5e       	subi	r16, 0xEF	; 239
     b6a:	1f 4f       	sbci	r17, 0xFF	; 255
     b6c:	c6 30       	cpi	r28, 0x06	; 6
     b6e:	d1 05       	cpc	r29, r1
     b70:	61 f7       	brne	.-40     	; 0xb4a <initEnsemble+0x16>

	registerTimer(&(ttNeighbor[i]));
	disableTimer(ttNeighbor[i]);
        restartScan(i);
    }
}
     b72:	df 91       	pop	r29
     b74:	cf 91       	pop	r28
     b76:	1f 91       	pop	r17
     b78:	0f 91       	pop	r16
     b7a:	ff 90       	pop	r15
     b7c:	08 95       	ret

00000b7e <initHandlers>:
threadvar SystemHandler system;


void initHandlers(void){
  int i;
  system.HandlerMask=0;
     b7e:	10 92 e1 29 	sts	0x29E1, r1
     b82:	10 92 e2 29 	sts	0x29E2, r1
     b86:	10 92 e3 29 	sts	0x29E3, r1
     b8a:	10 92 e4 29 	sts	0x29E4, r1
     b8e:	10 92 e5 29 	sts	0x29E5, r1
     b92:	10 92 e6 29 	sts	0x29E6, r1
     b96:	10 92 e7 29 	sts	0x29E7, r1
     b9a:	10 92 e8 29 	sts	0x29E8, r1
     b9e:	e9 ee       	ldi	r30, 0xE9	; 233
     ba0:	f9 e2       	ldi	r31, 0x29	; 41
  for( i=0; i<NUM_HANDLERS; i++){
    system.HandlerTable[i]=NULL;
     ba2:	11 92       	st	Z+, r1
     ba4:	11 92       	st	Z+, r1


void initHandlers(void){
  int i;
  system.HandlerMask=0;
  for( i=0; i<NUM_HANDLERS; i++){
     ba6:	8a e2       	ldi	r24, 0x2A	; 42
     ba8:	e9 32       	cpi	r30, 0x29	; 41
     baa:	f8 07       	cpc	r31, r24
     bac:	d1 f7       	brne	.-12     	; 0xba2 <initHandlers+0x24>
    system.HandlerTable[i]=NULL;
  }
}
     bae:	08 95       	ret

00000bb0 <executeHandlers>:
//
//  if any mask is set, will scan through and execute handlers in ascending numerical order.
//  it is technically possible to trigger handlers during earlier handlers, or even the same handler repeatedly.
//  triggering an earlier handler will cause it to execute during the next iteration.
void executeHandlers(void)
{
     bb0:	8f 92       	push	r8
     bb2:	9f 92       	push	r9
     bb4:	af 92       	push	r10
     bb6:	bf 92       	push	r11
     bb8:	cf 92       	push	r12
     bba:	df 92       	push	r13
     bbc:	ef 92       	push	r14
     bbe:	ff 92       	push	r15
     bc0:	0f 93       	push	r16
     bc2:	1f 93       	push	r17
     bc4:	cf 93       	push	r28
     bc6:	df 93       	push	r29
	if(system.HandlerMask)
     bc8:	20 91 e1 29 	lds	r18, 0x29E1
     bcc:	30 91 e2 29 	lds	r19, 0x29E2
     bd0:	40 91 e3 29 	lds	r20, 0x29E3
     bd4:	50 91 e4 29 	lds	r21, 0x29E4
     bd8:	60 91 e5 29 	lds	r22, 0x29E5
     bdc:	70 91 e6 29 	lds	r23, 0x29E6
     be0:	80 91 e7 29 	lds	r24, 0x29E7
     be4:	90 91 e8 29 	lds	r25, 0x29E8
     be8:	a0 e0       	ldi	r26, 0x00	; 0
     bea:	0e 94 6f 3b 	call	0x76de	; 0x76de <__cmpdi2_s8>
     bee:	09 f4       	brne	.+2      	; 0xbf2 <executeHandlers+0x42>
     bf0:	49 c0       	rjmp	.+146    	; 0xc84 <executeHandlers+0xd4>
     bf2:	09 ee       	ldi	r16, 0xE9	; 233
     bf4:	19 e2       	ldi	r17, 0x29	; 41
//  ExecuteHandlers
//
//  if any mask is set, will scan through and execute handlers in ascending numerical order.
//  it is technically possible to trigger handlers during earlier handlers, or even the same handler repeatedly.
//  triggering an earlier handler will cause it to execute during the next iteration.
void executeHandlers(void)
     bf6:	c1 2c       	mov	r12, r1
     bf8:	d1 2c       	mov	r13, r1
     bfa:	76 01       	movw	r14, r12
     bfc:	c3 94       	inc	r12
		Event i = 0;
		uint32_t j = 0x00000001;
	
		while(i < NUM_HANDLERS)
		{
			if(system.HandlerMask & j)
     bfe:	80 90 e1 29 	lds	r8, 0x29E1
     c02:	90 90 e2 29 	lds	r9, 0x29E2
     c06:	a0 90 e3 29 	lds	r10, 0x29E3
     c0a:	b0 90 e4 29 	lds	r11, 0x29E4
     c0e:	d7 01       	movw	r26, r14
     c10:	c6 01       	movw	r24, r12
     c12:	2c 2d       	mov	r18, r12
     c14:	28 21       	and	r18, r8
     c16:	39 2f       	mov	r19, r25
     c18:	39 21       	and	r19, r9
     c1a:	4a 2f       	mov	r20, r26
     c1c:	4a 21       	and	r20, r10
     c1e:	5b 2f       	mov	r21, r27
     c20:	5b 21       	and	r21, r11
     c22:	60 e0       	ldi	r22, 0x00	; 0
     c24:	70 e0       	ldi	r23, 0x00	; 0
     c26:	80 e0       	ldi	r24, 0x00	; 0
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	0e 94 6f 3b 	call	0x76de	; 0x76de <__cmpdi2_s8>
     c30:	f1 f0       	breq	.+60     	; 0xc6e <executeHandlers+0xbe>
			{
				// clear mask bit1
				system.HandlerMask &= ~j;
     c32:	d7 01       	movw	r26, r14
     c34:	c6 01       	movw	r24, r12
     c36:	80 95       	com	r24
     c38:	90 95       	com	r25
     c3a:	a0 95       	com	r26
     c3c:	b0 95       	com	r27
     c3e:	88 22       	and	r8, r24
     c40:	99 22       	and	r9, r25
     c42:	aa 22       	and	r10, r26
     c44:	bb 22       	and	r11, r27
     c46:	80 92 e1 29 	sts	0x29E1, r8
     c4a:	90 92 e2 29 	sts	0x29E2, r9
     c4e:	a0 92 e3 29 	sts	0x29E3, r10
     c52:	b0 92 e4 29 	sts	0x29E4, r11
     c56:	10 92 e5 29 	sts	0x29E5, r1
     c5a:	10 92 e6 29 	sts	0x29E6, r1
     c5e:	10 92 e7 29 	sts	0x29E7, r1
     c62:	10 92 e8 29 	sts	0x29E8, r1
				
				// execute callback
				(*(system.HandlerTable[i]))();
     c66:	d8 01       	movw	r26, r16
     c68:	ed 91       	ld	r30, X+
     c6a:	fc 91       	ld	r31, X
     c6c:	19 95       	eicall
			}

			i++;
			j <<= 1;
     c6e:	cc 0c       	add	r12, r12
     c70:	dd 1c       	adc	r13, r13
     c72:	ee 1c       	adc	r14, r14
     c74:	ff 1c       	adc	r15, r15
     c76:	0e 5f       	subi	r16, 0xFE	; 254
     c78:	1f 4f       	sbci	r17, 0xFF	; 255
	if(system.HandlerMask)
	{
		Event i = 0;
		uint32_t j = 0x00000001;
	
		while(i < NUM_HANDLERS)
     c7a:	ba e2       	ldi	r27, 0x2A	; 42
     c7c:	09 32       	cpi	r16, 0x29	; 41
     c7e:	1b 07       	cpc	r17, r27
     c80:	09 f0       	breq	.+2      	; 0xc84 <executeHandlers+0xd4>
     c82:	bd cf       	rjmp	.-134    	; 0xbfe <executeHandlers+0x4e>

			i++;
			j <<= 1;
		}
	}
}
     c84:	df 91       	pop	r29
     c86:	cf 91       	pop	r28
     c88:	1f 91       	pop	r17
     c8a:	0f 91       	pop	r16
     c8c:	ff 90       	pop	r15
     c8e:	ef 90       	pop	r14
     c90:	df 90       	pop	r13
     c92:	cf 90       	pop	r12
     c94:	bf 90       	pop	r11
     c96:	af 90       	pop	r10
     c98:	9f 90       	pop	r9
     c9a:	8f 90       	pop	r8
     c9c:	08 95       	ret

00000c9e <triggerHandler>:
//TriggerHandler
//	will trigger a callback for a valid event and valid handler
//  execution will occur during the CURRENT or NEXT handler scan
// 	returns 1 on success, 0 on failure
int triggerHandler(Event e)
{
     c9e:	cf 93       	push	r28
     ca0:	df 93       	push	r29
     ca2:	48 2f       	mov	r20, r24
	if(e < NUM_HANDLERS)
     ca4:	80 32       	cpi	r24, 0x20	; 32
     ca6:	60 f5       	brcc	.+88     	; 0xd00 <triggerHandler+0x62>
	{
		if(system.HandlerTable[e] == NULL)
     ca8:	e8 2f       	mov	r30, r24
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	ee 0f       	add	r30, r30
     cae:	ff 1f       	adc	r31, r31
     cb0:	e7 51       	subi	r30, 0x17	; 23
     cb2:	f6 4d       	sbci	r31, 0xD6	; 214
     cb4:	20 81       	ld	r18, Z
     cb6:	31 81       	ldd	r19, Z+1	; 0x01
     cb8:	23 2b       	or	r18, r19
     cba:	11 f1       	breq	.+68     	; 0xd00 <triggerHandler+0x62>
		{
			return 0;
		}
		
		system.HandlerMask |= (uint32_t)1 << e;
     cbc:	81 e0       	ldi	r24, 0x01	; 1
     cbe:	90 e0       	ldi	r25, 0x00	; 0
     cc0:	a0 e0       	ldi	r26, 0x00	; 0
     cc2:	b0 e0       	ldi	r27, 0x00	; 0
     cc4:	04 c0       	rjmp	.+8      	; 0xcce <triggerHandler+0x30>
     cc6:	88 0f       	add	r24, r24
     cc8:	99 1f       	adc	r25, r25
     cca:	aa 1f       	adc	r26, r26
     ccc:	bb 1f       	adc	r27, r27
     cce:	4a 95       	dec	r20
     cd0:	d2 f7       	brpl	.-12     	; 0xcc6 <triggerHandler+0x28>
     cd2:	50 91 e1 29 	lds	r21, 0x29E1
     cd6:	58 2b       	or	r21, r24
     cd8:	40 91 e2 29 	lds	r20, 0x29E2
     cdc:	49 2b       	or	r20, r25
     cde:	30 91 e3 29 	lds	r19, 0x29E3
     ce2:	3a 2b       	or	r19, r26
     ce4:	20 91 e4 29 	lds	r18, 0x29E4
     ce8:	2b 2b       	or	r18, r27
     cea:	50 93 e1 29 	sts	0x29E1, r21
     cee:	40 93 e2 29 	sts	0x29E2, r20
     cf2:	30 93 e3 29 	sts	0x29E3, r19
     cf6:	20 93 e4 29 	sts	0x29E4, r18
		return 1;
     cfa:	21 e0       	ldi	r18, 0x01	; 1
     cfc:	30 e0       	ldi	r19, 0x00	; 0
     cfe:	02 c0       	rjmp	.+4      	; 0xd04 <triggerHandler+0x66>
	}
	
	return 0;	
     d00:	20 e0       	ldi	r18, 0x00	; 0
     d02:	30 e0       	ldi	r19, 0x00	; 0
}
     d04:	c9 01       	movw	r24, r18
     d06:	df 91       	pop	r29
     d08:	cf 91       	pop	r28
     d0a:	08 95       	ret

00000d0c <registerHandler>:
// will register a callback for a valid event with currently NULL callback.
// must unregister a valid handler before re-registering.
// returns 1 on success, 0 on failure.
int registerHandler(Event e, GenericHandler callback)
{
	if(e < NUM_HANDLERS)
     d0c:	80 32       	cpi	r24, 0x20	; 32
     d0e:	78 f4       	brcc	.+30     	; 0xd2e <registerHandler+0x22>
	{
		if(system.HandlerTable[e] == NULL)
     d10:	e8 2f       	mov	r30, r24
     d12:	f0 e0       	ldi	r31, 0x00	; 0
     d14:	ee 0f       	add	r30, r30
     d16:	ff 1f       	adc	r31, r31
     d18:	e7 51       	subi	r30, 0x17	; 23
     d1a:	f6 4d       	sbci	r31, 0xD6	; 214
     d1c:	80 81       	ld	r24, Z
     d1e:	91 81       	ldd	r25, Z+1	; 0x01
     d20:	89 2b       	or	r24, r25
     d22:	29 f4       	brne	.+10     	; 0xd2e <registerHandler+0x22>
		{
			system.HandlerTable[e] = callback;
     d24:	60 83       	st	Z, r22
     d26:	71 83       	std	Z+1, r23	; 0x01
			return 1;
     d28:	21 e0       	ldi	r18, 0x01	; 1
     d2a:	30 e0       	ldi	r19, 0x00	; 0
     d2c:	02 c0       	rjmp	.+4      	; 0xd32 <registerHandler+0x26>
		}
		
		return 0;
	}
	
	return 0;
     d2e:	20 e0       	ldi	r18, 0x00	; 0
     d30:	30 e0       	ldi	r19, 0x00	; 0
}
     d32:	c9 01       	movw	r24, r18
     d34:	08 95       	ret

00000d36 <unregisterHandler>:
// will unregister a valid callback for a valid event, setting it to NULL.
// must unregister a valid handler before re-registering.
// returns 1 on success, 0 on failure.
int unregisterHandler(Event e)
{
	if(e < NUM_HANDLERS)
     d36:	80 32       	cpi	r24, 0x20	; 32
     d38:	78 f4       	brcc	.+30     	; 0xd58 <unregisterHandler+0x22>
	{
		if(system.HandlerTable[e] == NULL)
     d3a:	e8 2f       	mov	r30, r24
     d3c:	f0 e0       	ldi	r31, 0x00	; 0
     d3e:	ee 0f       	add	r30, r30
     d40:	ff 1f       	adc	r31, r31
     d42:	e7 51       	subi	r30, 0x17	; 23
     d44:	f6 4d       	sbci	r31, 0xD6	; 214
     d46:	80 81       	ld	r24, Z
     d48:	91 81       	ldd	r25, Z+1	; 0x01
     d4a:	89 2b       	or	r24, r25
     d4c:	29 f0       	breq	.+10     	; 0xd58 <unregisterHandler+0x22>
		{
			return 0;
		}
		
		system.HandlerTable[e] = NULL;
     d4e:	10 82       	st	Z, r1
     d50:	11 82       	std	Z+1, r1	; 0x01
		return 1;
     d52:	21 e0       	ldi	r18, 0x01	; 1
     d54:	30 e0       	ldi	r19, 0x00	; 0
     d56:	02 c0       	rjmp	.+4      	; 0xd5c <unregisterHandler+0x26>
	}
	
	return 0;
     d58:	20 e0       	ldi	r18, 0x00	; 0
     d5a:	30 e0       	ldi	r19, 0x00	; 0
}
     d5c:	c9 01       	movw	r24, r18
     d5e:	08 95       	ret

00000d60 <callHandler>:

void callHandler(Event e)
{
	if(e < NUM_HANDLERS)
     d60:	80 32       	cpi	r24, 0x20	; 32
     d62:	60 f4       	brcc	.+24     	; 0xd7c <callHandler+0x1c>
	{
		if(system.HandlerTable[e] != NULL)
     d64:	e8 2f       	mov	r30, r24
     d66:	f0 e0       	ldi	r31, 0x00	; 0
     d68:	ee 0f       	add	r30, r30
     d6a:	ff 1f       	adc	r31, r31
     d6c:	e7 51       	subi	r30, 0x17	; 23
     d6e:	f6 4d       	sbci	r31, 0xD6	; 214
     d70:	01 90       	ld	r0, Z+
     d72:	f0 81       	ld	r31, Z
     d74:	e0 2d       	mov	r30, r0
     d76:	30 97       	sbiw	r30, 0x00	; 0
     d78:	09 f0       	breq	.+2      	; 0xd7c <callHandler+0x1c>
		{
			(system.HandlerTable[e])();
     d7a:	19 94       	eijmp
     d7c:	08 95       	ret

00000d7e <getColor>:
threadvar Intensity 	currentIntensity = INTENSITY_MAX;

Color getColor()
{
	return currentColor;
}
     d7e:	80 91 2c 2a 	lds	r24, 0x2A2C
     d82:	08 95       	ret

00000d84 <getNextColor>:

Color getNextColor()
{
	Color tmp = currentColor;
     d84:	80 91 2c 2a 	lds	r24, 0x2A2C
	
	tmp++;
     d88:	8f 5f       	subi	r24, 0xFF	; 255
	
	if(tmp >= NUM_COLORS)
     d8a:	89 30       	cpi	r24, 0x09	; 9
     d8c:	08 f0       	brcs	.+2      	; 0xd90 <getNextColor+0xc>
	{
		tmp = 0;
     d8e:	80 e0       	ldi	r24, 0x00	; 0
	}

	return tmp;
}
     d90:	08 95       	ret

00000d92 <setColor>:

void setColor(Color c)
{
	currentColor = c;
     d92:	80 93 2c 2a 	sts	0x2A2C, r24

	setLED(colors[c][0], colors[c][1], colors[c][2], currentIntensity);
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	fc 01       	movw	r30, r24
     d9a:	ee 0f       	add	r30, r30
     d9c:	ff 1f       	adc	r31, r31
     d9e:	e8 0f       	add	r30, r24
     da0:	f9 1f       	adc	r31, r25
     da2:	eb 5d       	subi	r30, 0xDB	; 219
     da4:	ff 4d       	sbci	r31, 0xDF	; 223
	return currentColor;
}

void setLED(byte r, byte g, byte b, Intensity i)
{
	setHWLED(r,g,b,i);
     da6:	20 91 24 20 	lds	r18, 0x2024
     daa:	42 81       	ldd	r20, Z+2	; 0x02
     dac:	61 81       	ldd	r22, Z+1	; 0x01
     dae:	80 81       	ld	r24, Z
     db0:	0c 94 de 10 	jmp	0x21bc	; 0x21bc <setHWLED>

00000db4 <setNextColor>:
	setLED(colors[c][0], colors[c][1], colors[c][2], currentIntensity);
}

Color setNextColor()
{
	Color tmp = getNextColor();
     db4:	0e 94 c2 06 	call	0xd84	; 0xd84 <getNextColor>

	setColor(tmp);
     db8:	0e 94 c9 06 	call	0xd92	; 0xd92 <setColor>
	
	return currentColor;
}
     dbc:	80 91 2c 2a 	lds	r24, 0x2A2C
     dc0:	08 95       	ret

00000dc2 <setLED>:

void setLED(byte r, byte g, byte b, Intensity i)
{
	setHWLED(r,g,b,i);
     dc2:	0c 94 de 10 	jmp	0x21bc	; 0x21bc <setHWLED>

00000dc6 <setIntensity>:
}

void setIntensity(Intensity i)
{
	currentIntensity = i;
     dc6:	80 93 24 20 	sts	0x2024, r24
	return currentColor;
}

void setLED(byte r, byte g, byte b, Intensity i)
{
	setHWLED(r,g,b,i);
     dca:	28 2f       	mov	r18, r24
     dcc:	40 91 2b 2a 	lds	r20, 0x2A2B
     dd0:	60 91 2a 2a 	lds	r22, 0x2A2A
     dd4:	80 91 29 2a 	lds	r24, 0x2A29
     dd8:	0c 94 de 10 	jmp	0x21bc	; 0x21bc <setHWLED>

00000ddc <getIntensity>:
}

Intensity getIntensity()
{
	return currentIntensity;
}
     ddc:	80 91 24 20 	lds	r24, 0x2024
     de0:	08 95       	ret

00000de2 <initLED>:

void initLED()
{
	initHWLED();
     de2:	0c 94 06 11 	jmp	0x220c	; 0x220c <initHWLED>

00000de6 <initializeMemory>:
threadvar blockConf conf;

//////////////////// PUBLIC FUNCTIONS /////////////////////
// set-up memory
void initializeMemory(void)
{
     de6:	e2 e6       	ldi	r30, 0x62	; 98
     de8:	fb e2       	ldi	r31, 0x2B	; 43
    uint8_t i;

    // clear all status bits for receive chunks
    for( i=0; i<NUM_RXCHUNKS; i++ )
    {
        rxChunks[i].status = CHUNK_FREE;
     dea:	10 82       	st	Z, r1
     dec:	78 96       	adiw	r30, 0x18	; 24
void initializeMemory(void)
{
    uint8_t i;

    // clear all status bits for receive chunks
    for( i=0; i<NUM_RXCHUNKS; i++ )
     dee:	8c e2       	ldi	r24, 0x2C	; 44
     df0:	e2 38       	cpi	r30, 0x82	; 130
     df2:	f8 07       	cpc	r31, r24
     df4:	d1 f7       	brne	.-12     	; 0xdea <initializeMemory+0x4>
     df6:	e2 e4       	ldi	r30, 0x42	; 66
     df8:	fa e2       	ldi	r31, 0x2A	; 42
    }
    
    // clear all status bits for receive chunks
    for( i=0; i<NUM_TXCHUNKS; i++ )
    {
        txChunks[i].status = CHUNK_FREE;
     dfa:	10 82       	st	Z, r1
     dfc:	78 96       	adiw	r30, 0x18	; 24
    {
        rxChunks[i].status = CHUNK_FREE;
    }
    
    // clear all status bits for receive chunks
    for( i=0; i<NUM_TXCHUNKS; i++ )
     dfe:	8b e2       	ldi	r24, 0x2B	; 43
     e00:	e2 36       	cpi	r30, 0x62	; 98
     e02:	f8 07       	cpc	r31, r24
     e04:	d1 f7       	brne	.-12     	; 0xdfa <initializeMemory+0x14>
    }

    // load config data
    //TODO: re-enable
    //restore(&conf, &nv_conf, sizeof(blockConf));
}
     e06:	08 95       	ret

00000e08 <freeChunk>:

// this loops through and frees all connected Chunks in the list.
void freeChunk(Chunk * c)
{
     e08:	fc 01       	movw	r30, r24
  Chunk * tmp;	

  while(c != NULL)
     e0a:	09 c0       	rjmp	.+18     	; 0xe1e <freeChunk+0x16>
    {
      if(chunkInUse(c))
     e0c:	81 89       	ldd	r24, Z+17	; 0x11
     e0e:	87 fd       	sbrc	r24, 7
        {
	  c->status = CHUNK_FREE;
     e10:	11 8a       	std	Z+17, r1	; 0x11
        }
      tmp = c->next;
     e12:	92 89       	ldd	r25, Z+18	; 0x12
     e14:	83 89       	ldd	r24, Z+19	; 0x13
      c->next = NULL;
     e16:	12 8a       	std	Z+18, r1	; 0x12
     e18:	13 8a       	std	Z+19, r1	; 0x13
      c = tmp;
     e1a:	e9 2f       	mov	r30, r25
     e1c:	f8 2f       	mov	r31, r24
// this loops through and frees all connected Chunks in the list.
void freeChunk(Chunk * c)
{
  Chunk * tmp;	

  while(c != NULL)
     e1e:	30 97       	sbiw	r30, 0x00	; 0
     e20:	a9 f7       	brne	.-22     	; 0xe0c <freeChunk+0x4>
        }
      tmp = c->next;
      c->next = NULL;
      c = tmp;
    }
}
     e22:	08 95       	ret

00000e24 <getSystemChunk>:
Chunk* getSystemChunk(byte which)
{
    int8_t i;
    Chunk*  current;

    if(which == RXCHUNK)
     e24:	81 11       	cpse	r24, r1
     e26:	03 c0       	rjmp	.+6      	; 0xe2e <getSystemChunk+0xa>
      {
	current = rxChunks;
     e28:	81 e5       	ldi	r24, 0x51	; 81
     e2a:	9b e2       	ldi	r25, 0x2B	; 43
     e2c:	02 c0       	rjmp	.+4      	; 0xe32 <getSystemChunk+0xe>

	i = NUM_RXCHUNKS-1;
      }
    else
      {
	current = txChunks;
     e2e:	81 e3       	ldi	r24, 0x31	; 49
     e30:	9a e2       	ldi	r25, 0x2A	; 42
    int8_t i;
    Chunk*  current;

    if(which == RXCHUNK)
      {
	current = rxChunks;
     e32:	2c e0       	ldi	r18, 0x0C	; 12
      c->next = NULL;
      c = tmp;
    }
}

Chunk* getSystemChunk(byte which)
     e34:	fc 01       	movw	r30, r24
     e36:	e8 5f       	subi	r30, 0xF8	; 248
     e38:	fe 4f       	sbci	r31, 0xFE	; 254
     e3a:	dc 01       	movw	r26, r24
     e3c:	a7 5e       	subi	r26, 0xE7	; 231
     e3e:	be 4f       	sbci	r27, 0xFE	; 254

    // look for unused Chunk
    for(; i>=0; i--)
    {
        // check top bit to indicate usage
      if( !chunkInUse((&(current[i]))) )
     e40:	3c 91       	ld	r19, X
     e42:	37 fd       	sbrc	r19, 7
     e44:	05 c0       	rjmp	.+10     	; 0xe50 <getSystemChunk+0x2c>
        {
            // indicate in use
	  (current[i]).status = CHUNK_USED;
     e46:	80 e8       	ldi	r24, 0x80	; 128
     e48:	81 8b       	std	Z+17, r24	; 0x11
          
	  // clear old next ptr in case non-NULL
	  (current[i]).next = NULL;
     e4a:	12 8a       	std	Z+18, r1	; 0x12
     e4c:	13 8a       	std	Z+19, r1	; 0x13
	  return &(current[i]);
     e4e:	06 c0       	rjmp	.+12     	; 0xe5c <getSystemChunk+0x38>
     e50:	21 50       	subi	r18, 0x01	; 1
     e52:	48 97       	sbiw	r24, 0x18	; 24

	i = NUM_TXCHUNKS-1;
      }

    // look for unused Chunk
    for(; i>=0; i--)
     e54:	21 11       	cpse	r18, r1
     e56:	ee cf       	rjmp	.-36     	; 0xe34 <getSystemChunk+0x10>
	  return &(current[i]);
        }
        // else, in use (supposedly)
    }
    // none free!
    return NULL;  
     e58:	e0 e0       	ldi	r30, 0x00	; 0
     e5a:	f0 e0       	ldi	r31, 0x00	; 0
}
     e5c:	cf 01       	movw	r24, r30
     e5e:	08 95       	ret

00000e60 <getSystemRXChunk>:

// return pointer to free memory Chunk
Chunk* getSystemRXChunk()
{
  return getSystemChunk(RXCHUNK);
     e60:	80 e0       	ldi	r24, 0x00	; 0
     e62:	0c 94 12 07 	jmp	0xe24	; 0xe24 <getSystemChunk>

00000e66 <getSystemTXChunk>:
}

Chunk* getSystemTXChunk()
{
  return getSystemChunk(TXCHUNK);
     e66:	81 e0       	ldi	r24, 0x01	; 1
     e68:	0c 94 12 07 	jmp	0xe24	; 0xe24 <getSystemChunk>

00000e6c <sendMessageToUid>:
#include "led.bbh"



byte sendMessageToUid(Chunk* c, Uid dest, byte * msg, byte length, MsgHandler mh, GenericHandler cb)
{
     e6c:	ef 92       	push	r14
     e6e:	ff 92       	push	r15
     e70:	0f 93       	push	r16
     e72:	1f 93       	push	r17
     e74:	cf 93       	push	r28
     e76:	df 93       	push	r29
     e78:	ec 01       	movw	r28, r24
     e7a:	cb 01       	movw	r24, r22
     e7c:	ef e6       	ldi	r30, 0x6F	; 111
     e7e:	f9 e2       	ldi	r31, 0x29	; 41
    byte i;

    for(i = 0; i < NUM_PORTS; ++i)
     e80:	60 e0       	ldi	r22, 0x00	; 0
    {
        if(thisNeighborhood.n[i] == dest)
     e82:	a1 91       	ld	r26, Z+
     e84:	b1 91       	ld	r27, Z+
     e86:	a8 17       	cp	r26, r24
     e88:	b9 07       	cpc	r27, r25
     e8a:	61 f4       	brne	.+24     	; 0xea4 <sendMessageToUid+0x38>
        {
            if(setupChunk(c,i, msg, length, mh, cb) == 0)
     e8c:	ce 01       	movw	r24, r28
     e8e:	0e 94 36 02 	call	0x46c	; 0x46c <setupChunk>
     e92:	81 11       	cpse	r24, r1
     e94:	02 c0       	rjmp	.+4      	; 0xe9a <sendMessageToUid+0x2e>
            {
                return 0;
     e96:	80 e0       	ldi	r24, 0x00	; 0
     e98:	09 c0       	rjmp	.+18     	; 0xeac <sendMessageToUid+0x40>
            }
            queueChunk(c);
     e9a:	ce 01       	movw	r24, r28
     e9c:	0e 94 72 02 	call	0x4e4	; 0x4e4 <queueChunk>
            return 1;
     ea0:	81 e0       	ldi	r24, 0x01	; 1
     ea2:	04 c0       	rjmp	.+8      	; 0xeac <sendMessageToUid+0x40>

byte sendMessageToUid(Chunk* c, Uid dest, byte * msg, byte length, MsgHandler mh, GenericHandler cb)
{
    byte i;

    for(i = 0; i < NUM_PORTS; ++i)
     ea4:	6f 5f       	subi	r22, 0xFF	; 255
     ea6:	66 30       	cpi	r22, 0x06	; 6
     ea8:	61 f7       	brne	.-40     	; 0xe82 <sendMessageToUid+0x16>
     eaa:	f5 cf       	rjmp	.-22     	; 0xe96 <sendMessageToUid+0x2a>
            return 1;
        }
    }

    return 0;
}
     eac:	df 91       	pop	r29
     eae:	cf 91       	pop	r28
     eb0:	1f 91       	pop	r17
     eb2:	0f 91       	pop	r16
     eb4:	ff 90       	pop	r15
     eb6:	ef 90       	pop	r14
     eb8:	08 95       	ret

00000eba <sendMessageToPort>:

byte sendMessageToPort(Chunk* c, PRef dest, byte * msg, byte length, MsgHandler mh, GenericHandler cb)
{
     eba:	ef 92       	push	r14
     ebc:	ff 92       	push	r15
     ebe:	0f 93       	push	r16
     ec0:	1f 93       	push	r17
     ec2:	cf 93       	push	r28
     ec4:	df 93       	push	r29
     ec6:	ec 01       	movw	r28, r24
    // NOTE: Can no longer support BROADCAST since requires 6 memory chunks passed in
    if(dest == BROADCAST)
     ec8:	6f 3f       	cpi	r22, 0xFF	; 255
     eca:	11 f4       	brne	.+4      	; 0xed0 <sendMessageToPort+0x16>
    {
        return 0;
     ecc:	80 e0       	ldi	r24, 0x00	; 0
     ece:	0a c0       	rjmp	.+20     	; 0xee4 <sendMessageToPort+0x2a>
    }
    else
    {
        if(dest < NUM_PORTS)
     ed0:	66 30       	cpi	r22, 0x06	; 6
     ed2:	e0 f7       	brcc	.-8      	; 0xecc <sendMessageToPort+0x12>
        {
            if(setupChunk(c,dest, msg, length, mh, cb) == 0)
     ed4:	0e 94 36 02 	call	0x46c	; 0x46c <setupChunk>
     ed8:	88 23       	and	r24, r24
     eda:	c1 f3       	breq	.-16     	; 0xecc <sendMessageToPort+0x12>
            {
                return 0;
            }
            queueChunk(c);
     edc:	ce 01       	movw	r24, r28
     ede:	0e 94 72 02 	call	0x4e4	; 0x4e4 <queueChunk>
            return 1;
     ee2:	81 e0       	ldi	r24, 0x01	; 1
        }
    }
    
    return 0;
}
     ee4:	df 91       	pop	r29
     ee6:	cf 91       	pop	r28
     ee8:	1f 91       	pop	r17
     eea:	0f 91       	pop	r16
     eec:	ff 90       	pop	r15
     eee:	ef 90       	pop	r14
     ef0:	08 95       	ret

00000ef2 <sendSystemMessage>:

// ----------- SEND SYSTEM MESSAGE to PORT
//
// Probably shouldn't be used by a user, but needed by various sytem routines.
byte sendSystemMessage(PRef dest, byte * msg, byte length, MsgHandler mh, GenericHandler cb)
{
     ef2:	6f 92       	push	r6
     ef4:	7f 92       	push	r7
     ef6:	8f 92       	push	r8
     ef8:	9f 92       	push	r9
     efa:	af 92       	push	r10
     efc:	bf 92       	push	r11
     efe:	cf 92       	push	r12
     f00:	df 92       	push	r13
     f02:	ef 92       	push	r14
     f04:	ff 92       	push	r15
     f06:	0f 93       	push	r16
     f08:	1f 93       	push	r17
     f0a:	cf 93       	push	r28
     f0c:	df 93       	push	r29
     f0e:	78 2e       	mov	r7, r24
     f10:	6b 01       	movw	r12, r22
     f12:	64 2e       	mov	r6, r20
     f14:	59 01       	movw	r10, r18
     f16:	48 01       	movw	r8, r16
    Chunk* c;

    if(dest == BROADCAST)
     f18:	8f ef       	ldi	r24, 0xFF	; 255
     f1a:	78 12       	cpse	r7, r24
     f1c:	1b c0       	rjmp	.+54     	; 0xf54 <sendSystemMessage+0x62>
     f1e:	71 2c       	mov	r7, r1
        byte i;
        
        for(i = 0; i < NUM_PORTS; ++i)
        {
            // set it to appropriate chunk
            c = getSystemTXChunk();
     f20:	0e 94 33 07 	call	0xe66	; 0xe66 <getSystemTXChunk>
     f24:	ec 01       	movw	r28, r24
            
            // in use - can't send
            if( c == NULL ) 
     f26:	00 97       	sbiw	r24, 0x00	; 0
     f28:	81 f0       	breq	.+32     	; 0xf4a <sendSystemMessage+0x58>
            {
                continue;
            }
            
            if(setupChunk(c,i, msg, length, mh, cb) == 0)
     f2a:	74 01       	movw	r14, r8
     f2c:	85 01       	movw	r16, r10
     f2e:	26 2d       	mov	r18, r6
     f30:	a6 01       	movw	r20, r12
     f32:	67 2d       	mov	r22, r7
     f34:	0e 94 36 02 	call	0x46c	; 0x46c <setupChunk>
     f38:	81 11       	cpse	r24, r1
     f3a:	04 c0       	rjmp	.+8      	; 0xf44 <sendSystemMessage+0x52>
            {
                freeChunk(c);
     f3c:	ce 01       	movw	r24, r28
     f3e:	0e 94 04 07 	call	0xe08	; 0xe08 <freeChunk>
                continue;
     f42:	03 c0       	rjmp	.+6      	; 0xf4a <sendSystemMessage+0x58>
            }
            queueChunk(c);
     f44:	ce 01       	movw	r24, r28
     f46:	0e 94 72 02 	call	0x4e4	; 0x4e4 <queueChunk>

    if(dest == BROADCAST)
    {
        byte i;
        
        for(i = 0; i < NUM_PORTS; ++i)
     f4a:	73 94       	inc	r7
     f4c:	86 e0       	ldi	r24, 0x06	; 6
     f4e:	78 12       	cpse	r7, r24
     f50:	e7 cf       	rjmp	.-50     	; 0xf20 <sendSystemMessage+0x2e>
     f52:	1c c0       	rjmp	.+56     	; 0xf8c <sendSystemMessage+0x9a>
        
        return i;
    }
    else
    {
        if(dest < NUM_PORTS)
     f54:	85 e0       	ldi	r24, 0x05	; 5
     f56:	87 15       	cp	r24, r7
     f58:	08 f4       	brcc	.+2      	; 0xf5c <sendSystemMessage+0x6a>
     f5a:	11 c0       	rjmp	.+34     	; 0xf7e <sendSystemMessage+0x8c>
        {
            // set it to appropriate chunk
            c = getSystemTXChunk();
     f5c:	0e 94 33 07 	call	0xe66	; 0xe66 <getSystemTXChunk>
     f60:	ec 01       	movw	r28, r24
            
            // in use - can't send
            if( c == NULL ) 
     f62:	00 97       	sbiw	r24, 0x00	; 0
     f64:	61 f0       	breq	.+24     	; 0xf7e <sendSystemMessage+0x8c>
            {
                return 0;
            }
            
            if(setupChunk(c,dest, msg, length, mh, cb) == 0)
     f66:	78 01       	movw	r14, r16
     f68:	85 01       	movw	r16, r10
     f6a:	26 2d       	mov	r18, r6
     f6c:	a6 01       	movw	r20, r12
     f6e:	67 2d       	mov	r22, r7
     f70:	0e 94 36 02 	call	0x46c	; 0x46c <setupChunk>
     f74:	81 11       	cpse	r24, r1
     f76:	05 c0       	rjmp	.+10     	; 0xf82 <sendSystemMessage+0x90>
            {
                freeChunk(c);
     f78:	ce 01       	movw	r24, r28
     f7a:	0e 94 04 07 	call	0xe08	; 0xe08 <freeChunk>
                return 0;
     f7e:	71 2c       	mov	r7, r1
     f80:	05 c0       	rjmp	.+10     	; 0xf8c <sendSystemMessage+0x9a>
            }
            queueChunk(c);
     f82:	ce 01       	movw	r24, r28
     f84:	0e 94 72 02 	call	0x4e4	; 0x4e4 <queueChunk>
            return 1;
     f88:	77 24       	eor	r7, r7
     f8a:	73 94       	inc	r7
        }
    }
    
    return 0;
}
     f8c:	87 2d       	mov	r24, r7
     f8e:	df 91       	pop	r29
     f90:	cf 91       	pop	r28
     f92:	1f 91       	pop	r17
     f94:	0f 91       	pop	r16
     f96:	ff 90       	pop	r15
     f98:	ef 90       	pop	r14
     f9a:	df 90       	pop	r13
     f9c:	cf 90       	pop	r12
     f9e:	bf 90       	pop	r11
     fa0:	af 90       	pop	r10
     fa2:	9f 90       	pop	r9
     fa4:	8f 90       	pop	r8
     fa6:	7f 90       	pop	r7
     fa8:	6f 90       	pop	r6
     faa:	08 95       	ret

00000fac <initSystemMessage>:


void initSystemMessage()
{
     fac:	08 95       	ret

00000fae <retrySend>:

#include "queues.bbh"

void retrySend(void)
{
    SendChunkQueue* currSq = ((SQTimeout *)thisTimeout)->sq;
     fae:	e0 91 82 2e 	lds	r30, 0x2E82
     fb2:	f0 91 83 2e 	lds	r31, 0x2E83
     fb6:	02 84       	ldd	r0, Z+10	; 0x0a
     fb8:	f3 85       	ldd	r31, Z+11	; 0x0b
     fba:	e0 2d       	mov	r30, r0
    
    //Try to resend
    currSq->flags |= CLEAR_TO_SEND;
     fbc:	85 85       	ldd	r24, Z+13	; 0x0d
     fbe:	80 64       	ori	r24, 0x40	; 64
     fc0:	85 87       	std	Z+13, r24	; 0x0d
     fc2:	08 95       	ret

00000fc4 <initPortQueues>:
#include "../hw-api/hwSerial.h"

threadvar Port port[NUM_PORTS];

void initPortQueues(Port* p)
{
     fc4:	fc 01       	movw	r30, r24
    // reset send queue status
    p->sq.retry         = 0;
     fc6:	15 86       	std	Z+13, r1	; 0x0d
    p->sq.flags         = CLEAR_TO_SEND;
     fc8:	80 e4       	ldi	r24, 0x40	; 64
     fca:	86 87       	std	Z+14, r24	; 0x0e
	
	// send queue timers
	p->sq.qtout.sq = &(p->sq);
     fcc:	cf 01       	movw	r24, r30
     fce:	01 96       	adiw	r24, 0x01	; 1
     fd0:	83 87       	std	Z+11, r24	; 0x0b
     fd2:	94 87       	std	Z+12, r25	; 0x0c
	p->sq.qtout.tout.callback = (GenericHandler)&retrySend;
     fd4:	87 ed       	ldi	r24, 0xD7	; 215
     fd6:	97 e0       	ldi	r25, 0x07	; 7
     fd8:	87 83       	std	Z+7, r24	; 0x07
     fda:	90 87       	std	Z+8, r25	; 0x08


	
	// empty the send queue
	//freeChunk(p->sq.head);
    p->sq.head = NULL;
     fdc:	17 86       	std	Z+15, r1	; 0x0f
     fde:	10 8a       	std	Z+16, r1	; 0x10
    //freeChunk(p->sq.tail);
    p->sq.tail = NULL;
     fe0:	11 8a       	std	Z+17, r1	; 0x11
     fe2:	12 8a       	std	Z+18, r1	; 0x12
	
	// reset receive queue status
    p->rq.index         = 0;
     fe4:	13 8a       	std	Z+19, r1	; 0x13
	p->rq.checksum      = 0;
     fe6:	14 8a       	std	Z+20, r1	; 0x14
    p->rq.flags         = NO_CHUNK_READY;
     fe8:	15 8a       	std	Z+21, r1	; 0x15

	// empty receive queues
    //freeReceiveChunk(p->rq.curr);
	p->rq.curr = NULL;
     fea:	16 8a       	std	Z+22, r1	; 0x16
     fec:	17 8a       	std	Z+23, r1	; 0x17
     fee:	08 95       	ret

00000ff0 <initPorts>:
}

void initPorts()
{
     ff0:	ff 92       	push	r15
     ff2:	0f 93       	push	r16
     ff4:	1f 93       	push	r17
     ff6:	cf 93       	push	r28
     ff8:	df 93       	push	r29
     ffa:	02 e7       	ldi	r16, 0x72	; 114
     ffc:	1c e2       	ldi	r17, 0x2C	; 44
     ffe:	c0 e0       	ldi	r28, 0x00	; 0
    1000:	d0 e0       	ldi	r29, 0x00	; 0
	PRef i;
	for(i = 0; i < NUM_PORTS; i++)
	{
		port[i].pnum  = i;
		initPortQueues(&port[i]);
    1002:	88 e5       	ldi	r24, 0x58	; 88
    1004:	f8 2e       	mov	r15, r24
void initPorts()
{
	PRef i;
	for(i = 0; i < NUM_PORTS; i++)
	{
		port[i].pnum  = i;
    1006:	f8 01       	movw	r30, r16
    1008:	c0 83       	st	Z, r28
		initPortQueues(&port[i]);
    100a:	fc 9e       	mul	r15, r28
    100c:	c0 01       	movw	r24, r0
    100e:	fd 9e       	mul	r15, r29
    1010:	90 0d       	add	r25, r0
    1012:	11 24       	eor	r1, r1
    1014:	8e 58       	subi	r24, 0x8E	; 142
    1016:	93 4d       	sbci	r25, 0xD3	; 211
    1018:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <initPortQueues>
    101c:	21 96       	adiw	r28, 0x01	; 1
    101e:	08 5a       	subi	r16, 0xA8	; 168
    1020:	1f 4f       	sbci	r17, 0xFF	; 255
}

void initPorts()
{
	PRef i;
	for(i = 0; i < NUM_PORTS; i++)
    1022:	c6 30       	cpi	r28, 0x06	; 6
    1024:	d1 05       	cpc	r29, r1
    1026:	79 f7       	brne	.-34     	; 0x1006 <initPorts+0x16>
	{
		port[i].pnum  = i;
		initPortQueues(&port[i]);
	}
	initHWPorts();
}
    1028:	df 91       	pop	r29
    102a:	cf 91       	pop	r28
    102c:	1f 91       	pop	r17
    102e:	0f 91       	pop	r16
    1030:	ff 90       	pop	r15
	for(i = 0; i < NUM_PORTS; i++)
	{
		port[i].pnum  = i;
		initPortQueues(&port[i]);
	}
	initHWPorts();
    1032:	0c 94 f5 11 	jmp	0x23ea	; 0x23ea <initHWPorts>

00001036 <blockProgram>:
#include "led.bbh"

int blockProgram(void)
{

    initBlock();
    1036:	0e 94 67 01 	call	0x2ce	; 0x2ce <initBlock>

    
    // low-level robot initialization routine
    
    // handler registration / load control structure
    userRegistration();
    103a:	0e 94 3f 19 	call	0x327e	; 0x327e <userRegistration>
    
    // Call user-based system_init function, if registered
    // A good idea to separate from UserRegistration?
    callHandler(SYSTEM_INIT);    
    103e:	80 e0       	ldi	r24, 0x00	; 0
    1040:	0e 94 b0 06 	call	0xd60	; 0xd60 <callHandler>

        // step through triggered handler functions
	//printf("%d\r\n",count++);
	    
        // Run user system_main function, if registered
	callHandler(SYSTEM_MAIN);
    1044:	81 e0       	ldi	r24, 0x01	; 1
    1046:	fc cf       	rjmp	.-8      	; 0x1040 <blockProgram+0xa>

00001048 <delayMS>:
#ifdef BBSIM
extern void yieldTil(Time x);
#endif

void delayMS(int ms) 
{
    1048:	cf 92       	push	r12
    104a:	df 92       	push	r13
    104c:	ef 92       	push	r14
    104e:	ff 92       	push	r15
    1050:	cf 93       	push	r28
    1052:	df 93       	push	r29
    1054:	ec 01       	movw	r28, r24
  }
}

Time getTime()
{
	return getHWTime();
    1056:	0e 94 77 14 	call	0x28ee	; 0x28ee <getHWTime>
    105a:	6b 01       	movw	r12, r22
    105c:	7c 01       	movw	r14, r24
extern void yieldTil(Time x);
#endif

void delayMS(int ms) 
{
  Time until = getTime() + ms;
    105e:	ce 01       	movw	r24, r28
    1060:	aa 27       	eor	r26, r26
    1062:	97 fd       	sbrc	r25, 7
    1064:	a0 95       	com	r26
    1066:	ba 2f       	mov	r27, r26
    1068:	c8 0e       	add	r12, r24
    106a:	d9 1e       	adc	r13, r25
    106c:	ea 1e       	adc	r14, r26
    106e:	fb 1e       	adc	r15, r27
  }
}

Time getTime()
{
	return getHWTime();
    1070:	0e 94 77 14 	call	0x28ee	; 0x28ee <getHWTime>

void delayMS(int ms) 
{
  Time until = getTime() + ms;
	
  while(getTime() < until) {
    1074:	6c 15       	cp	r22, r12
    1076:	7d 05       	cpc	r23, r13
    1078:	8e 05       	cpc	r24, r14
    107a:	9f 05       	cpc	r25, r15
    107c:	c8 f3       	brcs	.-14     	; 0x1070 <delayMS+0x28>
#ifdef BBSIM
    yieldTil(until);
#endif
  }
}
    107e:	df 91       	pop	r29
    1080:	cf 91       	pop	r28
    1082:	ff 90       	pop	r15
    1084:	ef 90       	pop	r14
    1086:	df 90       	pop	r13
    1088:	cf 90       	pop	r12
    108a:	08 95       	ret

0000108c <getTime>:

Time getTime()
{
	return getHWTime();
    108c:	0c 94 77 14 	jmp	0x28ee	; 0x28ee <getHWTime>

00001090 <checkTimeout>:
}

void checkTimeout()
{
    1090:	0f 93       	push	r16
    1092:	1f 93       	push	r17
    1094:	cf 93       	push	r28
    1096:	df 93       	push	r29
    1098:	00 d0       	rcall	.+0      	; 0x109a <checkTimeout+0xa>
    109a:	1f 92       	push	r1
    109c:	cd b7       	in	r28, 0x3d	; 61
    109e:	de b7       	in	r29, 0x3e	; 62
	if(timeoutList != NULL)
    10a0:	80 91 86 2e 	lds	r24, 0x2E86
    10a4:	90 91 87 2e 	lds	r25, 0x2E87
    10a8:	89 2b       	or	r24, r25
    10aa:	99 f1       	breq	.+102    	; 0x1112 <checkTimeout+0x82>
  }
}

Time getTime()
{
	return getHWTime();
    10ac:	0e 94 77 14 	call	0x28ee	; 0x28ee <getHWTime>
		Time now = getTime();
		
		do
		{
			// check list, remove timer and call function
			if(now >= timeoutList->calltime)
    10b0:	e0 91 86 2e 	lds	r30, 0x2E86
    10b4:	f0 91 87 2e 	lds	r31, 0x2E87
    10b8:	02 81       	ldd	r16, Z+2	; 0x02
    10ba:	13 81       	ldd	r17, Z+3	; 0x03
    10bc:	24 81       	ldd	r18, Z+4	; 0x04
    10be:	35 81       	ldd	r19, Z+5	; 0x05
    10c0:	60 17       	cp	r22, r16
    10c2:	71 07       	cpc	r23, r17
    10c4:	82 07       	cpc	r24, r18
    10c6:	93 07       	cpc	r25, r19
    10c8:	20 f1       	brcs	.+72     	; 0x1112 <checkTimeout+0x82>
			{
				// set reference variable, remove timeout from list
				thisTimeout = timeoutList;
    10ca:	e0 93 82 2e 	sts	0x2E82, r30
    10ce:	f0 93 83 2e 	sts	0x2E83, r31
				timeoutList = timeoutList->next;
    10d2:	20 81       	ld	r18, Z
    10d4:	31 81       	ldd	r19, Z+1	; 0x01
    10d6:	20 93 86 2e 	sts	0x2E86, r18
    10da:	30 93 87 2e 	sts	0x2E87, r19

				// if timeout was not pre-emptively disable, execute callback();
				if(thisTimeout->state != INACTIVE)
    10de:	20 85       	ldd	r18, Z+8	; 0x08
    10e0:	22 23       	and	r18, r18
    10e2:	61 f0       	breq	.+24     	; 0x10fc <checkTimeout+0x6c>
				  {
				    (thisTimeout->callback)();	
    10e4:	06 80       	ldd	r0, Z+6	; 0x06
    10e6:	f7 81       	ldd	r31, Z+7	; 0x07
    10e8:	e0 2d       	mov	r30, r0
    10ea:	69 83       	std	Y+1, r22	; 0x01
    10ec:	7a 83       	std	Y+2, r23	; 0x02
    10ee:	8b 83       	std	Y+3, r24	; 0x03
    10f0:	9c 83       	std	Y+4, r25	; 0x04
    10f2:	19 95       	eicall
    10f4:	9c 81       	ldd	r25, Y+4	; 0x04
    10f6:	8b 81       	ldd	r24, Y+3	; 0x03
    10f8:	7a 81       	ldd	r23, Y+2	; 0x02
    10fa:	69 81       	ldd	r22, Y+1	; 0x01
				  }

				// disable callback until reactivated/reinserted into list.
				thisTimeout->state = INACTIVE;
    10fc:	e0 91 82 2e 	lds	r30, 0x2E82
    1100:	f0 91 83 2e 	lds	r31, 0x2E83
    1104:	10 86       	std	Z+8, r1	; 0x08
			{
				// stop searching list
				break;
			}
			
		} while (timeoutList != NULL);
    1106:	20 91 86 2e 	lds	r18, 0x2E86
    110a:	30 91 87 2e 	lds	r19, 0x2E87
    110e:	23 2b       	or	r18, r19
    1110:	79 f6       	brne	.-98     	; 0x10b0 <checkTimeout+0x20>
	}
}
    1112:	24 96       	adiw	r28, 0x04	; 4
    1114:	cd bf       	out	0x3d, r28	; 61
    1116:	de bf       	out	0x3e, r29	; 62
    1118:	df 91       	pop	r29
    111a:	cf 91       	pop	r28
    111c:	1f 91       	pop	r17
    111e:	0f 91       	pop	r16
    1120:	08 95       	ret

00001122 <registerTimeout>:

int registerTimeout(Timeout * t)
{
    1122:	0f 93       	push	r16
    1124:	1f 93       	push	r17
    1126:	cf 93       	push	r28
    1128:	df 93       	push	r29
    112a:	fc 01       	movw	r30, r24
	t->next = NULL;
    112c:	10 82       	st	Z, r1
    112e:	11 82       	std	Z+1, r1	; 0x01

	if(timeoutList == NULL)
    1130:	a0 91 86 2e 	lds	r26, 0x2E86
    1134:	b0 91 87 2e 	lds	r27, 0x2E87
    1138:	10 97       	sbiw	r26, 0x00	; 0
    113a:	29 f4       	brne	.+10     	; 0x1146 <registerTimeout+0x24>
	{
		timeoutList = t;
    113c:	80 93 86 2e 	sts	0x2E86, r24
    1140:	90 93 87 2e 	sts	0x2E87, r25
    1144:	2d c0       	rjmp	.+90     	; 0x11a0 <registerTimeout+0x7e>
		Timeout * prev = NULL;
		Timeout * cur;
		
		cur = timeoutList;
		
		while(cur->calltime < t->calltime && cur->next != NULL)
    1146:	42 81       	ldd	r20, Z+2	; 0x02
    1148:	53 81       	ldd	r21, Z+3	; 0x03
    114a:	64 81       	ldd	r22, Z+4	; 0x04
    114c:	75 81       	ldd	r23, Z+5	; 0x05
    114e:	c0 e0       	ldi	r28, 0x00	; 0
    1150:	d0 e0       	ldi	r29, 0x00	; 0
    1152:	03 c0       	rjmp	.+6      	; 0x115a <registerTimeout+0x38>
		{
			prev = cur;
			cur = cur->next;
    1154:	dc 01       	movw	r26, r24
		Timeout * prev = NULL;
		Timeout * cur;
		
		cur = timeoutList;
		
		while(cur->calltime < t->calltime && cur->next != NULL)
    1156:	c3 2f       	mov	r28, r19
    1158:	d2 2f       	mov	r29, r18
    115a:	12 96       	adiw	r26, 0x02	; 2
    115c:	0d 91       	ld	r16, X+
    115e:	1d 91       	ld	r17, X+
    1160:	2d 91       	ld	r18, X+
    1162:	3c 91       	ld	r19, X
    1164:	15 97       	sbiw	r26, 0x05	; 5
    1166:	04 17       	cp	r16, r20
    1168:	15 07       	cpc	r17, r21
    116a:	26 07       	cpc	r18, r22
    116c:	37 07       	cpc	r19, r23
    116e:	18 f0       	brcs	.+6      	; 0x1176 <registerTimeout+0x54>
			cur = cur->next;
		}		
		
		if(cur->calltime >= t->calltime)
		{
			if(prev == NULL)
    1170:	20 97       	sbiw	r28, 0x00	; 0
    1172:	91 f4       	brne	.+36     	; 0x1198 <registerTimeout+0x76>
    1174:	0c c0       	rjmp	.+24     	; 0x118e <registerTimeout+0x6c>
		Timeout * prev = NULL;
		Timeout * cur;
		
		cur = timeoutList;
		
		while(cur->calltime < t->calltime && cur->next != NULL)
    1176:	8d 91       	ld	r24, X+
    1178:	9c 91       	ld	r25, X
    117a:	11 97       	sbiw	r26, 0x01	; 1
    117c:	3a 2f       	mov	r19, r26
    117e:	2b 2f       	mov	r18, r27
    1180:	00 97       	sbiw	r24, 0x00	; 0
    1182:	41 f7       	brne	.-48     	; 0x1154 <registerTimeout+0x32>
			
			t->next = cur;
		}
		else
		{
			cur->next = t;
    1184:	ed 93       	st	X+, r30
    1186:	fc 93       	st	X, r31
			t->next = NULL;
    1188:	10 82       	st	Z, r1
    118a:	11 82       	std	Z+1, r1	; 0x01
    118c:	09 c0       	rjmp	.+18     	; 0x11a0 <registerTimeout+0x7e>
		
		if(cur->calltime >= t->calltime)
		{
			if(prev == NULL)
			{
				timeoutList = t;
    118e:	e0 93 86 2e 	sts	0x2E86, r30
    1192:	f0 93 87 2e 	sts	0x2E87, r31
    1196:	02 c0       	rjmp	.+4      	; 0x119c <registerTimeout+0x7a>
			}
			else
			{
				prev->next = t;
    1198:	e8 83       	st	Y, r30
    119a:	f9 83       	std	Y+1, r31	; 0x01
			}
			
			t->next = cur;
    119c:	a0 83       	st	Z, r26
    119e:	b1 83       	std	Z+1, r27	; 0x01
			cur->next = t;
			t->next = NULL;
		}
	}
	
	t->state = ACTIVE;
    11a0:	81 e0       	ldi	r24, 0x01	; 1
    11a2:	80 87       	std	Z+8, r24	; 0x08
	
	return 1;	
}
    11a4:	81 e0       	ldi	r24, 0x01	; 1
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	df 91       	pop	r29
    11aa:	cf 91       	pop	r28
    11ac:	1f 91       	pop	r17
    11ae:	0f 91       	pop	r16
    11b0:	08 95       	ret

000011b2 <deregisterTimeout>:

int deregisterTimeout(Timeout * t)
{
	if(timeoutList == NULL)
    11b2:	e0 91 86 2e 	lds	r30, 0x2E86
    11b6:	f0 91 87 2e 	lds	r31, 0x2E87
    11ba:	30 97       	sbiw	r30, 0x00	; 0
    11bc:	d1 f0       	breq	.+52     	; 0x11f2 <deregisterTimeout+0x40>
    11be:	a0 e0       	ldi	r26, 0x00	; 0
    11c0:	b0 e0       	ldi	r27, 0x00	; 0
    11c2:	07 c0       	rjmp	.+14     	; 0x11d2 <deregisterTimeout+0x20>
		

		while((cur != NULL) && (t != cur)) //(cur->callback != t->callback) && (cur->calltime != t->calltime))
		{
			prev = cur;
			cur = cur->next;
    11c4:	20 81       	ld	r18, Z
    11c6:	31 81       	ldd	r19, Z+1	; 0x01
    11c8:	df 01       	movw	r26, r30
		Timeout * cur;

		cur = timeoutList;
		

		while((cur != NULL) && (t != cur)) //(cur->callback != t->callback) && (cur->calltime != t->calltime))
    11ca:	21 15       	cp	r18, r1
    11cc:	31 05       	cpc	r19, r1
    11ce:	89 f0       	breq	.+34     	; 0x11f2 <deregisterTimeout+0x40>
		{
			prev = cur;
			cur = cur->next;
    11d0:	f9 01       	movw	r30, r18
		Timeout * cur;

		cur = timeoutList;
		

		while((cur != NULL) && (t != cur)) //(cur->callback != t->callback) && (cur->calltime != t->calltime))
    11d2:	8e 17       	cp	r24, r30
    11d4:	9f 07       	cpc	r25, r31
    11d6:	b1 f7       	brne	.-20     	; 0x11c4 <deregisterTimeout+0x12>
    11d8:	0f c0       	rjmp	.+30     	; 0x11f8 <deregisterTimeout+0x46>
		}
		else
		{
			if(prev == NULL)
			{
				timeoutList = cur->next;
    11da:	20 93 86 2e 	sts	0x2E86, r18
    11de:	30 93 87 2e 	sts	0x2E87, r19
    11e2:	02 c0       	rjmp	.+4      	; 0x11e8 <deregisterTimeout+0x36>
			}
			else
			{
				prev->next = cur->next;
    11e4:	2d 93       	st	X+, r18
    11e6:	3c 93       	st	X, r19
			}
			
			t->state = INACTIVE;
    11e8:	fc 01       	movw	r30, r24
    11ea:	10 86       	std	Z+8, r1	; 0x08
			
			return 1;
    11ec:	21 e0       	ldi	r18, 0x01	; 1
    11ee:	30 e0       	ldi	r19, 0x00	; 0
    11f0:	09 c0       	rjmp	.+18     	; 0x1204 <deregisterTimeout+0x52>

int deregisterTimeout(Timeout * t)
{
	if(timeoutList == NULL)
	{		
		return 0;
    11f2:	20 e0       	ldi	r18, 0x00	; 0
    11f4:	30 e0       	ldi	r19, 0x00	; 0
    11f6:	06 c0       	rjmp	.+12     	; 0x1204 <deregisterTimeout+0x52>
    11f8:	fc 01       	movw	r30, r24
    11fa:	20 81       	ld	r18, Z
    11fc:	31 81       	ldd	r19, Z+1	; 0x01
		{
			return 0;
		}
		else
		{
			if(prev == NULL)
    11fe:	10 97       	sbiw	r26, 0x00	; 0
    1200:	89 f7       	brne	.-30     	; 0x11e4 <deregisterTimeout+0x32>
    1202:	eb cf       	rjmp	.-42     	; 0x11da <deregisterTimeout+0x28>
			t->state = INACTIVE;
			
			return 1;
		}
	}
}
    1204:	c9 01       	movw	r24, r18
    1206:	08 95       	ret

00001208 <deregisterTimeoutByHandler>:

int deregisterTimeoutByHandler(GenericHandler h)
{
	if(timeoutList == NULL)
    1208:	e0 91 86 2e 	lds	r30, 0x2E86
    120c:	f0 91 87 2e 	lds	r31, 0x2E87
    1210:	30 97       	sbiw	r30, 0x00	; 0
    1212:	d9 f0       	breq	.+54     	; 0x124a <deregisterTimeoutByHandler+0x42>
    1214:	a0 e0       	ldi	r26, 0x00	; 0
    1216:	b0 e0       	ldi	r27, 0x00	; 0
    1218:	07 c0       	rjmp	.+14     	; 0x1228 <deregisterTimeoutByHandler+0x20>
		cur = timeoutList;
		
		while((cur != NULL) && (cur->callback != h))
		{
			prev = cur;
			cur = cur->next;
    121a:	20 81       	ld	r18, Z
    121c:	31 81       	ldd	r19, Z+1	; 0x01
    121e:	df 01       	movw	r26, r30
		Timeout * prev = NULL;
		Timeout * cur;

		cur = timeoutList;
		
		while((cur != NULL) && (cur->callback != h))
    1220:	21 15       	cp	r18, r1
    1222:	31 05       	cpc	r19, r1
    1224:	91 f0       	breq	.+36     	; 0x124a <deregisterTimeoutByHandler+0x42>
		{
			prev = cur;
			cur = cur->next;
    1226:	f9 01       	movw	r30, r18
		Timeout * prev = NULL;
		Timeout * cur;

		cur = timeoutList;
		
		while((cur != NULL) && (cur->callback != h))
    1228:	26 81       	ldd	r18, Z+6	; 0x06
    122a:	37 81       	ldd	r19, Z+7	; 0x07
    122c:	28 17       	cp	r18, r24
    122e:	39 07       	cpc	r19, r25
    1230:	a1 f7       	brne	.-24     	; 0x121a <deregisterTimeoutByHandler+0x12>
    1232:	0e c0       	rjmp	.+28     	; 0x1250 <deregisterTimeoutByHandler+0x48>
		}
		else
		{
			if(prev == NULL)
			{
				timeoutList = cur->next;
    1234:	80 93 86 2e 	sts	0x2E86, r24
    1238:	90 93 87 2e 	sts	0x2E87, r25
    123c:	02 c0       	rjmp	.+4      	; 0x1242 <deregisterTimeoutByHandler+0x3a>
			}
			else
			{
				prev->next = cur->next;
    123e:	8d 93       	st	X+, r24
    1240:	9c 93       	st	X, r25
			}
			
			cur->state = INACTIVE;
    1242:	10 86       	std	Z+8, r1	; 0x08
			
			return 1;
    1244:	21 e0       	ldi	r18, 0x01	; 1
    1246:	30 e0       	ldi	r19, 0x00	; 0
    1248:	08 c0       	rjmp	.+16     	; 0x125a <deregisterTimeoutByHandler+0x52>

int deregisterTimeoutByHandler(GenericHandler h)
{
	if(timeoutList == NULL)
	{		
		return 0;
    124a:	20 e0       	ldi	r18, 0x00	; 0
    124c:	30 e0       	ldi	r19, 0x00	; 0
    124e:	05 c0       	rjmp	.+10     	; 0x125a <deregisterTimeoutByHandler+0x52>
    1250:	80 81       	ld	r24, Z
    1252:	91 81       	ldd	r25, Z+1	; 0x01
		{
			return 0;
		}
		else
		{
			if(prev == NULL)
    1254:	10 97       	sbiw	r26, 0x00	; 0
    1256:	99 f7       	brne	.-26     	; 0x123e <deregisterTimeoutByHandler+0x36>
    1258:	ed cf       	rjmp	.-38     	; 0x1234 <deregisterTimeoutByHandler+0x2c>
			
			return 1;
		}
	}

}
    125a:	c9 01       	movw	r24, r18
    125c:	08 95       	ret

0000125e <checkTimer>:

void checkTimer()
{
    125e:	0f 93       	push	r16
    1260:	1f 93       	push	r17
    1262:	cf 93       	push	r28
    1264:	df 93       	push	r29
	Timer * tt = timerList;
    1266:	c0 91 84 2e 	lds	r28, 0x2E84
    126a:	d0 91 85 2e 	lds	r29, 0x2E85
	
	while(tt != NULL)
    126e:	1b c0       	rjmp	.+54     	; 0x12a6 <checkTimer+0x48>
	{
		if(tt->state == ACTIVE)
    1270:	88 89       	ldd	r24, Y+16	; 0x10
    1272:	81 30       	cpi	r24, 0x01	; 1
    1274:	a9 f4       	brne	.+42     	; 0x12a0 <checkTimer+0x42>
		{
			if((tt->t).state == INACTIVE)
    1276:	8a 85       	ldd	r24, Y+10	; 0x0a
    1278:	81 11       	cpse	r24, r1
    127a:	12 c0       	rjmp	.+36     	; 0x12a0 <checkTimer+0x42>
  }
}

Time getTime()
{
	return getHWTime();
    127c:	0e 94 77 14 	call	0x28ee	; 0x28ee <getHWTime>
	{
		if(tt->state == ACTIVE)
		{
			if((tt->t).state == INACTIVE)
			{
				(tt->t).calltime = getTime() + tt->period;
    1280:	0c 85       	ldd	r16, Y+12	; 0x0c
    1282:	1d 85       	ldd	r17, Y+13	; 0x0d
    1284:	2e 85       	ldd	r18, Y+14	; 0x0e
    1286:	3f 85       	ldd	r19, Y+15	; 0x0f
    1288:	60 0f       	add	r22, r16
    128a:	71 1f       	adc	r23, r17
    128c:	82 1f       	adc	r24, r18
    128e:	93 1f       	adc	r25, r19
    1290:	6c 83       	std	Y+4, r22	; 0x04
    1292:	7d 83       	std	Y+5, r23	; 0x05
    1294:	8e 83       	std	Y+6, r24	; 0x06
    1296:	9f 83       	std	Y+7, r25	; 0x07
				registerTimeout(&(tt->t));
    1298:	ce 01       	movw	r24, r28
    129a:	02 96       	adiw	r24, 0x02	; 2
    129c:	0e 94 91 08 	call	0x1122	; 0x1122 <registerTimeout>
				
			}
		}
	
		tt = tt->next;
    12a0:	09 90       	ld	r0, Y+
    12a2:	d8 81       	ld	r29, Y
    12a4:	c0 2d       	mov	r28, r0

void checkTimer()
{
	Timer * tt = timerList;
	
	while(tt != NULL)
    12a6:	20 97       	sbiw	r28, 0x00	; 0
    12a8:	19 f7       	brne	.-58     	; 0x1270 <checkTimer+0x12>
			}
		}
	
		tt = tt->next;
	}
}
    12aa:	df 91       	pop	r29
    12ac:	cf 91       	pop	r28
    12ae:	1f 91       	pop	r17
    12b0:	0f 91       	pop	r16
    12b2:	08 95       	ret

000012b4 <registerTimer>:

int registerTimer(Timer * tt)
{
  tt->next = NULL;
    12b4:	fc 01       	movw	r30, r24
    12b6:	10 82       	st	Z, r1
    12b8:	11 82       	std	Z+1, r1	; 0x01

	if(timerList == NULL)
    12ba:	e0 91 84 2e 	lds	r30, 0x2E84
    12be:	f0 91 85 2e 	lds	r31, 0x2E85
    12c2:	30 97       	sbiw	r30, 0x00	; 0
    12c4:	59 f4       	brne	.+22     	; 0x12dc <registerTimer+0x28>
	{
		timerList = tt;
    12c6:	80 93 84 2e 	sts	0x2E84, r24
    12ca:	90 93 85 2e 	sts	0x2E85, r25
    12ce:	10 c0       	rjmp	.+32     	; 0x12f0 <registerTimer+0x3c>
		Timer * cur = timerList;
		
		
		while(cur->next != NULL)
		{
		  assert(tt != cur);
    12d0:	8e 17       	cp	r24, r30
    12d2:	9f 07       	cpc	r25, r31
    12d4:	11 f4       	brne	.+4      	; 0x12da <registerTimer+0x26>
    12d6:	0e 94 1a 3e 	call	0x7c34	; 0x7c34 <abort>
			cur = cur->next;
    12da:	f9 01       	movw	r30, r18
	else
	{
		Timer * cur = timerList;
		
		
		while(cur->next != NULL)
    12dc:	20 81       	ld	r18, Z
    12de:	31 81       	ldd	r19, Z+1	; 0x01
    12e0:	21 15       	cp	r18, r1
    12e2:	31 05       	cpc	r19, r1
    12e4:	a9 f7       	brne	.-22     	; 0x12d0 <registerTimer+0x1c>
		{
		  assert(tt != cur);
			cur = cur->next;
		}
		assert(tt != cur);
    12e6:	8e 17       	cp	r24, r30
    12e8:	9f 07       	cpc	r25, r31
    12ea:	a9 f3       	breq	.-22     	; 0x12d6 <registerTimer+0x22>
		
		cur->next = tt;
    12ec:	80 83       	st	Z, r24
    12ee:	91 83       	std	Z+1, r25	; 0x01
	}
	
	tt->state = ACTIVE;	
    12f0:	21 e0       	ldi	r18, 0x01	; 1
    12f2:	fc 01       	movw	r30, r24
    12f4:	20 8b       	std	Z+16, r18	; 0x10
	
	return 1;
}
    12f6:	81 e0       	ldi	r24, 0x01	; 1
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	08 95       	ret

000012fc <deregisterTimer>:

int deregisterTimer(Timer * tt)
{
	if(timerList == NULL)
    12fc:	e0 91 84 2e 	lds	r30, 0x2E84
    1300:	f0 91 85 2e 	lds	r31, 0x2E85
    1304:	30 97       	sbiw	r30, 0x00	; 0
    1306:	d9 f0       	breq	.+54     	; 0x133e <deregisterTimer+0x42>
    1308:	a0 e0       	ldi	r26, 0x00	; 0
    130a:	b0 e0       	ldi	r27, 0x00	; 0
    130c:	07 c0       	rjmp	.+14     	; 0x131c <deregisterTimer+0x20>
		Timer * cur = timerList;
	
		while(cur != NULL && cur != tt)
		{
			prev = cur;
			cur = cur->next;
    130e:	20 81       	ld	r18, Z
    1310:	31 81       	ldd	r19, Z+1	; 0x01
    1312:	df 01       	movw	r26, r30
	else
	{
		Timer * prev = NULL;
		Timer * cur = timerList;
	
		while(cur != NULL && cur != tt)
    1314:	21 15       	cp	r18, r1
    1316:	31 05       	cpc	r19, r1
    1318:	91 f0       	breq	.+36     	; 0x133e <deregisterTimer+0x42>
		{
			prev = cur;
			cur = cur->next;
    131a:	f9 01       	movw	r30, r18
	else
	{
		Timer * prev = NULL;
		Timer * cur = timerList;
	
		while(cur != NULL && cur != tt)
    131c:	e8 17       	cp	r30, r24
    131e:	f9 07       	cpc	r31, r25
    1320:	b1 f7       	brne	.-20     	; 0x130e <deregisterTimer+0x12>
    1322:	10 c0       	rjmp	.+32     	; 0x1344 <deregisterTimer+0x48>
		}
		else
		{
			if(prev == NULL)
			{
				timerList = cur->next;
    1324:	80 93 84 2e 	sts	0x2E84, r24
    1328:	90 93 85 2e 	sts	0x2E85, r25
    132c:	02 c0       	rjmp	.+4      	; 0x1332 <deregisterTimer+0x36>
			}
			else
			{
				prev->next = cur->next;
    132e:	8d 93       	st	X+, r24
    1330:	9c 93       	st	X, r25
			}
			cur->next = NULL;
    1332:	10 82       	st	Z, r1
    1334:	11 82       	std	Z+1, r1	; 0x01
			cur->state = INACTIVE;
    1336:	10 8a       	std	Z+16, r1	; 0x10
			
			return 1;
    1338:	21 e0       	ldi	r18, 0x01	; 1
    133a:	30 e0       	ldi	r19, 0x00	; 0
    133c:	08 c0       	rjmp	.+16     	; 0x134e <deregisterTimer+0x52>

int deregisterTimer(Timer * tt)
{
	if(timerList == NULL)
	{
		return 0;
    133e:	20 e0       	ldi	r18, 0x00	; 0
    1340:	30 e0       	ldi	r19, 0x00	; 0
    1342:	05 c0       	rjmp	.+10     	; 0x134e <deregisterTimer+0x52>
    1344:	80 81       	ld	r24, Z
    1346:	91 81       	ldd	r25, Z+1	; 0x01
		{
			return 0;
		}
		else
		{
			if(prev == NULL)
    1348:	10 97       	sbiw	r26, 0x00	; 0
    134a:	89 f7       	brne	.-30     	; 0x132e <deregisterTimer+0x32>
    134c:	eb cf       	rjmp	.-42     	; 0x1324 <deregisterTimer+0x28>
			cur->state = INACTIVE;
			
			return 1;
		}
	}
}
    134e:	c9 01       	movw	r24, r18
    1350:	08 95       	ret

00001352 <clearTimer>:

// attempts to deregister the timer and its timeout from both queues.
// returns the sum of the component deregistrations.
int clearTimer(Timer * tt)
{
    1352:	0f 93       	push	r16
    1354:	1f 93       	push	r17
    1356:	cf 93       	push	r28
    1358:	df 93       	push	r29
    135a:	8c 01       	movw	r16, r24

  int ret = deregisterTimer(tt);
    135c:	0e 94 7e 09 	call	0x12fc	; 0x12fc <deregisterTimer>
    1360:	ec 01       	movw	r28, r24


  if(tt != NULL)
    1362:	01 15       	cp	r16, r1
    1364:	11 05       	cpc	r17, r1
    1366:	31 f0       	breq	.+12     	; 0x1374 <clearTimer+0x22>
    {
      ret += deregisterTimeout(&(tt->t));
    1368:	c8 01       	movw	r24, r16
    136a:	02 96       	adiw	r24, 0x02	; 2
    136c:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <deregisterTimeout>
    1370:	c8 0f       	add	r28, r24
    1372:	d9 1f       	adc	r29, r25
    }

  return ret;
}
    1374:	ce 01       	movw	r24, r28
    1376:	df 91       	pop	r29
    1378:	cf 91       	pop	r28
    137a:	1f 91       	pop	r17
    137c:	0f 91       	pop	r16
    137e:	08 95       	ret

00001380 <initTime>:

void initTime()
{
	timeoutList = NULL;
    1380:	10 92 86 2e 	sts	0x2E86, r1
    1384:	10 92 87 2e 	sts	0x2E87, r1
	thisTimeout = NULL;
    1388:	10 92 82 2e 	sts	0x2E82, r1
    138c:	10 92 83 2e 	sts	0x2E83, r1
	timerList = NULL;
    1390:	10 92 84 2e 	sts	0x2E84, r1
    1394:	10 92 85 2e 	sts	0x2E85, r1
	
	initHWTime();
    1398:	0c 94 ad 14 	jmp	0x295a	; 0x295a <initHWTime>

0000139c <getMicData>:
threadvar MicData _mic;

MicData getMicData()
{
    return _mic;
}
    139c:	80 91 88 2e 	lds	r24, 0x2E88
    13a0:	90 91 89 2e 	lds	r25, 0x2E89
    13a4:	08 95       	ret

000013a6 <EEPROM_WaitForNVM>:
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    13a6:	80 91 cf 01 	lds	r24, 0x01CF
    13aa:	87 fd       	sbrc	r24, 7
    13ac:	fc cf       	rjmp	.-8      	; 0x13a6 <EEPROM_WaitForNVM>
}
    13ae:	08 95       	ret

000013b0 <EEPROM_ReadByte>:
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGESIZE.
 *
 *  \return  Byte value read from EEPROM.
 */
uint8_t EEPROM_ReadByte( uint8_t pageAddr, uint8_t byteAddr )
{
    13b0:	cf 93       	push	r28
    13b2:	df 93       	push	r29
    13b4:	1f 92       	push	r1
    13b6:	1f 92       	push	r1
    13b8:	cd b7       	in	r28, 0x3d	; 61
    13ba:	de b7       	in	r29, 0x3e	; 62
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();
    13bc:	6a 83       	std	Y+2, r22	; 0x02
    13be:	89 83       	std	Y+1, r24	; 0x01
    13c0:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <EEPROM_WaitForNVM>

	/* Calculate address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE)
	                            |(byteAddr & (EEPROM_PAGESIZE-1));
    13c4:	6a 81       	ldd	r22, Y+2	; 0x02
    13c6:	6f 71       	andi	r22, 0x1F	; 31
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE)
    13c8:	89 81       	ldd	r24, Y+1	; 0x01
    13ca:	20 e2       	ldi	r18, 0x20	; 32
    13cc:	82 9f       	mul	r24, r18
    13ce:	c0 01       	movw	r24, r0
    13d0:	11 24       	eor	r1, r1
    13d2:	86 2b       	or	r24, r22
	                            |(byteAddr & (EEPROM_PAGESIZE-1));

	/* Set address to read from. */
	NVM.ADDR0 = address & 0xFF;
    13d4:	e0 ec       	ldi	r30, 0xC0	; 192
    13d6:	f1 e0       	ldi	r31, 0x01	; 1
    13d8:	80 83       	st	Z, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    13da:	91 83       	std	Z+1, r25	; 0x01
	NVM.ADDR2 = 0x00;
    13dc:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Read command. */
	NVM.CMD = NVM_CMD_READ_EEPROM_gc;
    13de:	86 e0       	ldi	r24, 0x06	; 6
    13e0:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    13e2:	ef 93       	push	r30
    13e4:	ff 93       	push	r31
    13e6:	0f 93       	push	r16
    13e8:	2f 93       	push	r18
    13ea:	eb ec       	ldi	r30, 0xCB	; 203
    13ec:	f1 e0       	ldi	r31, 0x01	; 1
    13ee:	08 ed       	ldi	r16, 0xD8	; 216
    13f0:	21 e0       	ldi	r18, 0x01	; 1
    13f2:	04 bf       	out	0x34, r16	; 52
    13f4:	20 83       	st	Z, r18
    13f6:	2f 91       	pop	r18
    13f8:	0f 91       	pop	r16
    13fa:	ff 91       	pop	r31
    13fc:	ef 91       	pop	r30

	return NVM.DATA0;
    13fe:	84 81       	ldd	r24, Z+4	; 0x04
}
    1400:	0f 90       	pop	r0
    1402:	0f 90       	pop	r0
    1404:	df 91       	pop	r29
    1406:	cf 91       	pop	r28
    1408:	08 95       	ret

0000140a <EEPROM_FlushBuffer>:
 *  \note The EEPROM write operations will automatically flush the buffer for you.
 */
void EEPROM_FlushBuffer( void )
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();
    140a:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <EEPROM_WaitForNVM>

	/* Flush EEPROM page buffer if necessary. */
	if ((NVM.STATUS & NVM_EELOAD_bm) != 0) {
    140e:	80 91 cf 01 	lds	r24, 0x01CF
    1412:	81 ff       	sbrs	r24, 1
    1414:	11 c0       	rjmp	.+34     	; 0x1438 <EEPROM_FlushBuffer+0x2e>
		NVM.CMD = NVM_CMD_ERASE_EEPROM_BUFFER_gc;
    1416:	86 e3       	ldi	r24, 0x36	; 54
    1418:	80 93 ca 01 	sts	0x01CA, r24
		NVM_EXEC();
    141c:	ef 93       	push	r30
    141e:	ff 93       	push	r31
    1420:	0f 93       	push	r16
    1422:	2f 93       	push	r18
    1424:	eb ec       	ldi	r30, 0xCB	; 203
    1426:	f1 e0       	ldi	r31, 0x01	; 1
    1428:	08 ed       	ldi	r16, 0xD8	; 216
    142a:	21 e0       	ldi	r18, 0x01	; 1
    142c:	04 bf       	out	0x34, r16	; 52
    142e:	20 83       	st	Z, r18
    1430:	2f 91       	pop	r18
    1432:	0f 91       	pop	r16
    1434:	ff 91       	pop	r31
    1436:	ef 91       	pop	r30
    1438:	08 95       	ret

0000143a <EEPROM_WriteByte>:
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGESIZE.
 *  \param  value     Byte value to write to EEPROM.
 */
void EEPROM_WriteByte( uint8_t pageAddr, uint8_t byteAddr, uint8_t value )
{
    143a:	cf 93       	push	r28
    143c:	df 93       	push	r29
    143e:	00 d0       	rcall	.+0      	; 0x1440 <EEPROM_WriteByte+0x6>
    1440:	cd b7       	in	r28, 0x3d	; 61
    1442:	de b7       	in	r29, 0x3e	; 62
	/*  Flush buffer to make sure no unintetional data is written and load
	 *  the "Page Load" command into the command register.
	 */
	EEPROM_FlushBuffer();
    1444:	4b 83       	std	Y+3, r20	; 0x03
    1446:	6a 83       	std	Y+2, r22	; 0x02
    1448:	89 83       	std	Y+1, r24	; 0x01
    144a:	0e 94 05 0a 	call	0x140a	; 0x140a <EEPROM_FlushBuffer>
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    144e:	e0 ec       	ldi	r30, 0xC0	; 192
    1450:	f1 e0       	ldi	r31, 0x01	; 1
    1452:	93 e3       	ldi	r25, 0x33	; 51
    1454:	92 87       	std	Z+10, r25	; 0x0a

	/* Calculate address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE)
	                            |(byteAddr & (EEPROM_PAGESIZE-1));
    1456:	6a 81       	ldd	r22, Y+2	; 0x02
    1458:	6f 71       	andi	r22, 0x1F	; 31
	 */
	EEPROM_FlushBuffer();
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;

	/* Calculate address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE)
    145a:	89 81       	ldd	r24, Y+1	; 0x01
    145c:	20 e2       	ldi	r18, 0x20	; 32
    145e:	82 9f       	mul	r24, r18
    1460:	c0 01       	movw	r24, r0
    1462:	11 24       	eor	r1, r1
    1464:	86 2b       	or	r24, r22
	                            |(byteAddr & (EEPROM_PAGESIZE-1));

	/* Set address to write to. */
	NVM.ADDR0 = address & 0xFF;
    1466:	80 83       	st	Z, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    1468:	91 83       	std	Z+1, r25	; 0x01
	NVM.ADDR2 = 0x00;
    146a:	12 82       	std	Z+2, r1	; 0x02

	/* Load data to write, which triggers the loading of EEPROM page buffer. */
	NVM.DATA0 = value;
    146c:	4b 81       	ldd	r20, Y+3	; 0x03
    146e:	44 83       	std	Z+4, r20	; 0x04

	/*  Issue EEPROM Atomic Write (Erase&Write) command. Load command, write
	 *  the protection signature and execute command.
	 */
	NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
    1470:	85 e3       	ldi	r24, 0x35	; 53
    1472:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    1474:	ef 93       	push	r30
    1476:	ff 93       	push	r31
    1478:	0f 93       	push	r16
    147a:	2f 93       	push	r18
    147c:	eb ec       	ldi	r30, 0xCB	; 203
    147e:	f1 e0       	ldi	r31, 0x01	; 1
    1480:	08 ed       	ldi	r16, 0xD8	; 216
    1482:	21 e0       	ldi	r18, 0x01	; 1
    1484:	04 bf       	out	0x34, r16	; 52
    1486:	20 83       	st	Z, r18
    1488:	2f 91       	pop	r18
    148a:	0f 91       	pop	r16
    148c:	ff 91       	pop	r31
    148e:	ef 91       	pop	r30
}
    1490:	23 96       	adiw	r28, 0x03	; 3
    1492:	cd bf       	out	0x3d, r28	; 61
    1494:	de bf       	out	0x3e, r29	; 62
    1496:	df 91       	pop	r29
    1498:	cf 91       	pop	r28
    149a:	08 95       	ret

0000149c <EEPROM_LoadByte>:
 *
 *  \param  byteAddr  EEPROM Byte address, between 0 and EEPROM_PAGESIZE.
 *  \param  value     Byte value to write to buffer.
 */
void EEPROM_LoadByte( uint8_t byteAddr, uint8_t value )
{
    149c:	cf 93       	push	r28
    149e:	df 93       	push	r29
    14a0:	1f 92       	push	r1
    14a2:	1f 92       	push	r1
    14a4:	cd b7       	in	r28, 0x3d	; 61
    14a6:	de b7       	in	r29, 0x3e	; 62
	/* Wait until NVM is not busy and prepare NVM command.*/
	EEPROM_WaitForNVM();
    14a8:	6a 83       	std	Y+2, r22	; 0x02
    14aa:	89 83       	std	Y+1, r24	; 0x01
    14ac:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <EEPROM_WaitForNVM>
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    14b0:	e0 ec       	ldi	r30, 0xC0	; 192
    14b2:	f1 e0       	ldi	r31, 0x01	; 1
    14b4:	93 e3       	ldi	r25, 0x33	; 51
    14b6:	92 87       	std	Z+10, r25	; 0x0a

	/* Set address. */
	NVM.ADDR0 = byteAddr & 0xFF;
    14b8:	89 81       	ldd	r24, Y+1	; 0x01
    14ba:	80 83       	st	Z, r24
	NVM.ADDR1 = 0x00;
    14bc:	11 82       	std	Z+1, r1	; 0x01
	NVM.ADDR2 = 0x00;
    14be:	12 82       	std	Z+2, r1	; 0x02

	/* Set data, which triggers loading of EEPROM page buffer. */
	NVM.DATA0 = value;
    14c0:	6a 81       	ldd	r22, Y+2	; 0x02
    14c2:	64 83       	std	Z+4, r22	; 0x04
}
    14c4:	0f 90       	pop	r0
    14c6:	0f 90       	pop	r0
    14c8:	df 91       	pop	r29
    14ca:	cf 91       	pop	r28
    14cc:	08 95       	ret

000014ce <EEPROM_LoadPage>:
 *        EEPROM write page operation.
 *
 *  \param  values   Pointer to SRAM buffer containing an entire page.
 */
void EEPROM_LoadPage( const uint8_t * values )
{
    14ce:	cf 93       	push	r28
    14d0:	df 93       	push	r29
    14d2:	ec 01       	movw	r28, r24
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();
    14d4:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <EEPROM_WaitForNVM>
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    14d8:	83 e3       	ldi	r24, 0x33	; 51
    14da:	80 93 ca 01 	sts	0x01CA, r24

	/*  Set address to zero, as only the lower bits matters. ADDR0 is
	 *  maintained inside the loop below.
	 */
	NVM.ADDR1 = 0x00;
    14de:	10 92 c1 01 	sts	0x01C1, r1
	NVM.ADDR2 = 0x00;
    14e2:	10 92 c2 01 	sts	0x01C2, r1

	/* Load multible bytes into page buffer. */
	for (uint8_t i = 0; i < EEPROM_PAGESIZE; ++i) {
    14e6:	80 e0       	ldi	r24, 0x00	; 0
		NVM.ADDR0 = i;
    14e8:	80 93 c0 01 	sts	0x01C0, r24
		NVM.DATA0 = *values;
    14ec:	99 91       	ld	r25, Y+
    14ee:	90 93 c4 01 	sts	0x01C4, r25
	 */
	NVM.ADDR1 = 0x00;
	NVM.ADDR2 = 0x00;

	/* Load multible bytes into page buffer. */
	for (uint8_t i = 0; i < EEPROM_PAGESIZE; ++i) {
    14f2:	8f 5f       	subi	r24, 0xFF	; 255
    14f4:	80 32       	cpi	r24, 0x20	; 32
    14f6:	c1 f7       	brne	.-16     	; 0x14e8 <EEPROM_LoadPage+0x1a>
		NVM.ADDR0 = i;
		NVM.DATA0 = *values;
		++values;
	}
}
    14f8:	df 91       	pop	r29
    14fa:	cf 91       	pop	r28
    14fc:	08 95       	ret

000014fe <EEPROM_LoadPartialPage>:
 *  \param  values   Pointer to SRAM buffer containing an entire page.
 *			offset   Offset address to begin from (0-EEPROM_PAGESIZE)
 *			length	 Number of values to write into EEPROM
 */
void EEPROM_LoadPartialPage(const uint8_t * values, uint8_t offset, uint8_t length)
{
    14fe:	0f 93       	push	r16
    1500:	1f 93       	push	r17
    1502:	cf 93       	push	r28
    1504:	df 93       	push	r29
    1506:	1f 92       	push	r1
    1508:	1f 92       	push	r1
    150a:	cd b7       	in	r28, 0x3d	; 61
    150c:	de b7       	in	r29, 0x3e	; 62
    150e:	8c 01       	movw	r16, r24
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();
    1510:	4a 83       	std	Y+2, r20	; 0x02
    1512:	69 83       	std	Y+1, r22	; 0x01
    1514:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <EEPROM_WaitForNVM>
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    1518:	83 e3       	ldi	r24, 0x33	; 51
    151a:	80 93 ca 01 	sts	0x01CA, r24

	/*  Set address to zero, as only the lower bits matters. ADDR0 is
	 *  maintained inside the loop below.
	 */
	NVM.ADDR1 = 0x00;
    151e:	10 92 c1 01 	sts	0x01C1, r1
	NVM.ADDR2 = 0x00;
    1522:	10 92 c2 01 	sts	0x01C2, r1
 *
 *  \param  values   Pointer to SRAM buffer containing an entire page.
 *			offset   Offset address to begin from (0-EEPROM_PAGESIZE)
 *			length	 Number of values to write into EEPROM
 */
void EEPROM_LoadPartialPage(const uint8_t * values, uint8_t offset, uint8_t length)
    1526:	4a 81       	ldd	r20, Y+2	; 0x02
    1528:	69 81       	ldd	r22, Y+1	; 0x01
    152a:	46 0f       	add	r20, r22
	 */
	NVM.ADDR1 = 0x00;
	NVM.ADDR2 = 0x00;

	/* Load multible bytes into page buffer. */
	for (uint8_t i = offset; length != 0 && i < EEPROM_PAGESIZE; ++i,--length) {
    152c:	08 c0       	rjmp	.+16     	; 0x153e <EEPROM_LoadPartialPage+0x40>
		NVM.ADDR0 = i;
    152e:	60 93 c0 01 	sts	0x01C0, r22
		NVM.DATA0 = *values;
    1532:	f8 01       	movw	r30, r16
    1534:	81 91       	ld	r24, Z+
    1536:	8f 01       	movw	r16, r30
    1538:	80 93 c4 01 	sts	0x01C4, r24
	 */
	NVM.ADDR1 = 0x00;
	NVM.ADDR2 = 0x00;

	/* Load multible bytes into page buffer. */
	for (uint8_t i = offset; length != 0 && i < EEPROM_PAGESIZE; ++i,--length) {
    153c:	6f 5f       	subi	r22, 0xFF	; 255
    153e:	64 17       	cp	r22, r20
    1540:	11 f0       	breq	.+4      	; 0x1546 <EEPROM_LoadPartialPage+0x48>
    1542:	60 32       	cpi	r22, 0x20	; 32
    1544:	a0 f3       	brcs	.-24     	; 0x152e <EEPROM_LoadPartialPage+0x30>
		NVM.ADDR0 = i;
		NVM.DATA0 = *values;
		++values;
	}
}
    1546:	0f 90       	pop	r0
    1548:	0f 90       	pop	r0
    154a:	df 91       	pop	r29
    154c:	cf 91       	pop	r28
    154e:	1f 91       	pop	r17
    1550:	0f 91       	pop	r16
    1552:	08 95       	ret

00001554 <EEPROM_AtomicWritePage>:
 *  locations that have not been loaded will be left untouched in EEPROM.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 */
void EEPROM_AtomicWritePage( uint8_t pageAddr )
{
    1554:	cf 93       	push	r28
    1556:	df 93       	push	r29
    1558:	1f 92       	push	r1
    155a:	cd b7       	in	r28, 0x3d	; 61
    155c:	de b7       	in	r29, 0x3e	; 62
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();
    155e:	89 83       	std	Y+1, r24	; 0x01
    1560:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <EEPROM_WaitForNVM>

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE);
    1564:	89 81       	ldd	r24, Y+1	; 0x01
    1566:	20 e2       	ldi	r18, 0x20	; 32
    1568:	82 9f       	mul	r24, r18
    156a:	c0 01       	movw	r24, r0
    156c:	11 24       	eor	r1, r1

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    156e:	e0 ec       	ldi	r30, 0xC0	; 192
    1570:	f1 e0       	ldi	r31, 0x01	; 1
    1572:	80 83       	st	Z, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    1574:	91 83       	std	Z+1, r25	; 0x01
	NVM.ADDR2 = 0x00;
    1576:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Atomic Write (Erase&Write) command. */
	NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
    1578:	85 e3       	ldi	r24, 0x35	; 53
    157a:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    157c:	ef 93       	push	r30
    157e:	ff 93       	push	r31
    1580:	0f 93       	push	r16
    1582:	2f 93       	push	r18
    1584:	eb ec       	ldi	r30, 0xCB	; 203
    1586:	f1 e0       	ldi	r31, 0x01	; 1
    1588:	08 ed       	ldi	r16, 0xD8	; 216
    158a:	21 e0       	ldi	r18, 0x01	; 1
    158c:	04 bf       	out	0x34, r16	; 52
    158e:	20 83       	st	Z, r18
    1590:	2f 91       	pop	r18
    1592:	0f 91       	pop	r16
    1594:	ff 91       	pop	r31
    1596:	ef 91       	pop	r30
}
    1598:	0f 90       	pop	r0
    159a:	df 91       	pop	r29
    159c:	cf 91       	pop	r28
    159e:	08 95       	ret

000015a0 <EEPROM_ErasePage>:
 *  This function erases one EEPROM page, so that every location reads 0xFF.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 */
void EEPROM_ErasePage( uint8_t pageAddr )
{
    15a0:	cf 93       	push	r28
    15a2:	df 93       	push	r29
    15a4:	1f 92       	push	r1
    15a6:	cd b7       	in	r28, 0x3d	; 61
    15a8:	de b7       	in	r29, 0x3e	; 62
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();
    15aa:	89 83       	std	Y+1, r24	; 0x01
    15ac:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <EEPROM_WaitForNVM>

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE);
    15b0:	89 81       	ldd	r24, Y+1	; 0x01
    15b2:	20 e2       	ldi	r18, 0x20	; 32
    15b4:	82 9f       	mul	r24, r18
    15b6:	c0 01       	movw	r24, r0
    15b8:	11 24       	eor	r1, r1

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    15ba:	e0 ec       	ldi	r30, 0xC0	; 192
    15bc:	f1 e0       	ldi	r31, 0x01	; 1
    15be:	80 83       	st	Z, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    15c0:	91 83       	std	Z+1, r25	; 0x01
	NVM.ADDR2 = 0x00;
    15c2:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Erase command. */
	NVM.CMD = NVM_CMD_ERASE_EEPROM_PAGE_gc;
    15c4:	82 e3       	ldi	r24, 0x32	; 50
    15c6:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    15c8:	ef 93       	push	r30
    15ca:	ff 93       	push	r31
    15cc:	0f 93       	push	r16
    15ce:	2f 93       	push	r18
    15d0:	eb ec       	ldi	r30, 0xCB	; 203
    15d2:	f1 e0       	ldi	r31, 0x01	; 1
    15d4:	08 ed       	ldi	r16, 0xD8	; 216
    15d6:	21 e0       	ldi	r18, 0x01	; 1
    15d8:	04 bf       	out	0x34, r16	; 52
    15da:	20 83       	st	Z, r18
    15dc:	2f 91       	pop	r18
    15de:	0f 91       	pop	r16
    15e0:	ff 91       	pop	r31
    15e2:	ef 91       	pop	r30
}
    15e4:	0f 90       	pop	r0
    15e6:	df 91       	pop	r29
    15e8:	cf 91       	pop	r28
    15ea:	08 95       	ret

000015ec <EEPROM_SplitWritePage>:
 *  before writing.
 *
 *  \param  pageAddr  EEPROM Page address, between 0 and EEPROM_SIZE/EEPROM_PAGESIZE
 */
void EEPROM_SplitWritePage( uint8_t pageAddr )
{
    15ec:	cf 93       	push	r28
    15ee:	df 93       	push	r29
    15f0:	1f 92       	push	r1
    15f2:	cd b7       	in	r28, 0x3d	; 61
    15f4:	de b7       	in	r29, 0x3e	; 62
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();
    15f6:	89 83       	std	Y+1, r24	; 0x01
    15f8:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <EEPROM_WaitForNVM>

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE);
    15fc:	89 81       	ldd	r24, Y+1	; 0x01
    15fe:	20 e2       	ldi	r18, 0x20	; 32
    1600:	82 9f       	mul	r24, r18
    1602:	c0 01       	movw	r24, r0
    1604:	11 24       	eor	r1, r1

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    1606:	e0 ec       	ldi	r30, 0xC0	; 192
    1608:	f1 e0       	ldi	r31, 0x01	; 1
    160a:	80 83       	st	Z, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    160c:	91 83       	std	Z+1, r25	; 0x01
	NVM.ADDR2 = 0x00;
    160e:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Split Write command. */
	NVM.CMD = NVM_CMD_WRITE_EEPROM_PAGE_gc;
    1610:	84 e3       	ldi	r24, 0x34	; 52
    1612:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    1614:	ef 93       	push	r30
    1616:	ff 93       	push	r31
    1618:	0f 93       	push	r16
    161a:	2f 93       	push	r18
    161c:	eb ec       	ldi	r30, 0xCB	; 203
    161e:	f1 e0       	ldi	r31, 0x01	; 1
    1620:	08 ed       	ldi	r16, 0xD8	; 216
    1622:	21 e0       	ldi	r18, 0x01	; 1
    1624:	04 bf       	out	0x34, r16	; 52
    1626:	20 83       	st	Z, r18
    1628:	2f 91       	pop	r18
    162a:	0f 91       	pop	r16
    162c:	ff 91       	pop	r31
    162e:	ef 91       	pop	r30
}
    1630:	0f 90       	pop	r0
    1632:	df 91       	pop	r29
    1634:	cf 91       	pop	r28
    1636:	08 95       	ret

00001638 <EEPROM_EraseAll>:
 *  This function erases the entire EEPROM memory block to 0xFF.
 */
void EEPROM_EraseAll( void )
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();
    1638:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <EEPROM_WaitForNVM>

	/* Issue EEPROM Erase All command. */
	NVM.CMD = NVM_CMD_ERASE_EEPROM_gc;
    163c:	80 e3       	ldi	r24, 0x30	; 48
    163e:	e0 ec       	ldi	r30, 0xC0	; 192
    1640:	f1 e0       	ldi	r31, 0x01	; 1
    1642:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    1644:	ef 93       	push	r30
    1646:	ff 93       	push	r31
    1648:	0f 93       	push	r16
    164a:	2f 93       	push	r18
    164c:	eb ec       	ldi	r30, 0xCB	; 203
    164e:	f1 e0       	ldi	r31, 0x01	; 1
    1650:	08 ed       	ldi	r16, 0xD8	; 216
    1652:	21 e0       	ldi	r18, 0x01	; 1
    1654:	04 bf       	out	0x34, r16	; 52
    1656:	20 83       	st	Z, r18
    1658:	2f 91       	pop	r18
    165a:	0f 91       	pop	r16
    165c:	ff 91       	pop	r31
    165e:	ef 91       	pop	r30
    1660:	08 95       	ret

00001662 <spiTxRx>:
#include "ext_memory.h"
#include <avr/io.h>

uint8_t spiTxRx(uint8_t input)
{
	SPIE.DATA = input;
    1662:	80 93 c3 0a 	sts	0x0AC3, r24
	
	while(!(SPIE.STATUS & SPI_IF_bm));
    1666:	80 91 c2 0a 	lds	r24, 0x0AC2
    166a:	87 ff       	sbrs	r24, 7
    166c:	fc cf       	rjmp	.-8      	; 0x1666 <spiTxRx+0x4>
	
	return SPIE.DATA;
    166e:	80 91 c3 0a 	lds	r24, 0x0AC3
	
}
    1672:	08 95       	ret

00001674 <setSS>:

void setSS(int which, int level)
{
	if(which == SRAM)
    1674:	01 97       	sbiw	r24, 0x01	; 1
    1676:	49 f4       	brne	.+18     	; 0x168a <setSS+0x16>
	{
		if(level)
		{
			PORTF.OUTSET = PIN4_bm;
    1678:	80 e1       	ldi	r24, 0x10	; 16

void setSS(int which, int level)
{
	if(which == SRAM)
	{
		if(level)
    167a:	67 2b       	or	r22, r23
    167c:	19 f0       	breq	.+6      	; 0x1684 <setSS+0x10>
		{
			PORTF.OUTSET = PIN4_bm;
    167e:	80 93 a5 06 	sts	0x06A5, r24
    1682:	08 95       	ret
		}
		else
		{
			PORTF.OUTCLR = PIN4_bm;	
    1684:	80 93 a6 06 	sts	0x06A6, r24
    1688:	08 95       	ret
	}
	else
	{
		if(level)
		{
			PORTE.OUTSET = PIN4_bm;
    168a:	80 e1       	ldi	r24, 0x10	; 16
			PORTF.OUTCLR = PIN4_bm;	
		}
	}
	else
	{
		if(level)
    168c:	67 2b       	or	r22, r23
    168e:	19 f0       	breq	.+6      	; 0x1696 <setSS+0x22>
		{
			PORTE.OUTSET = PIN4_bm;
    1690:	80 93 85 06 	sts	0x0685, r24
    1694:	08 95       	ret
		}
		else
		{
			PORTE.OUTCLR = PIN4_bm;	
    1696:	80 93 86 06 	sts	0x0686, r24
    169a:	08 95       	ret

0000169c <readExtMem>:
	
	}
}

int readExtMem(int which, int start, char * buf, int length)
{
    169c:	ef 92       	push	r14
    169e:	ff 92       	push	r15
    16a0:	0f 93       	push	r16
    16a2:	1f 93       	push	r17
    16a4:	cf 93       	push	r28
    16a6:	df 93       	push	r29
    16a8:	eb 01       	movw	r28, r22
    16aa:	8a 01       	movw	r16, r20
    16ac:	79 01       	movw	r14, r18
	if(which == SRAM)
    16ae:	01 97       	sbiw	r24, 0x01	; 1
    16b0:	f1 f4       	brne	.+60     	; 0x16ee <readExtMem+0x52>
		{
			PORTF.OUTSET = PIN4_bm;
		}
		else
		{
			PORTF.OUTCLR = PIN4_bm;	
    16b2:	80 e1       	ldi	r24, 0x10	; 16
    16b4:	80 93 a6 06 	sts	0x06A6, r24
	{
		int i;
		
		setSS(SRAM, 0);
		
		spiTxRx(SRAM_READ);
    16b8:	83 e0       	ldi	r24, 0x03	; 3
    16ba:	0e 94 31 0b 	call	0x1662	; 0x1662 <spiTxRx>
		spiTxRx((start >> 8) & 0x00FF);
    16be:	8d 2f       	mov	r24, r29
    16c0:	0e 94 31 0b 	call	0x1662	; 0x1662 <spiTxRx>
		spiTxRx(start & 0x00FF);
    16c4:	8c 2f       	mov	r24, r28
    16c6:	0e 94 31 0b 	call	0x1662	; 0x1662 <spiTxRx>
    16ca:	e8 01       	movw	r28, r16
		
		for(i = 0; i < length; ++i)
    16cc:	06 c0       	rjmp	.+12     	; 0x16da <readExtMem+0x3e>
		{
			buf[i] = spiTxRx(0);
    16ce:	80 e0       	ldi	r24, 0x00	; 0
    16d0:	0e 94 31 0b 	call	0x1662	; 0x1662 <spiTxRx>
    16d4:	f8 01       	movw	r30, r16
    16d6:	81 93       	st	Z+, r24
    16d8:	8f 01       	movw	r16, r30
		}	
	
	}
}

int readExtMem(int which, int start, char * buf, int length)
    16da:	c8 01       	movw	r24, r16
    16dc:	8c 1b       	sub	r24, r28
    16de:	9d 0b       	sbc	r25, r29
		
		spiTxRx(SRAM_READ);
		spiTxRx((start >> 8) & 0x00FF);
		spiTxRx(start & 0x00FF);
		
		for(i = 0; i < length; ++i)
    16e0:	8e 15       	cp	r24, r14
    16e2:	9f 05       	cpc	r25, r15
    16e4:	a4 f3       	brlt	.-24     	; 0x16ce <readExtMem+0x32>
{
	if(which == SRAM)
	{
		if(level)
		{
			PORTF.OUTSET = PIN4_bm;
    16e6:	80 e1       	ldi	r24, 0x10	; 16
    16e8:	80 93 a5 06 	sts	0x06A5, r24
    16ec:	26 c0       	rjmp	.+76     	; 0x173a <readExtMem+0x9e>
		{
			PORTE.OUTSET = PIN4_bm;
		}
		else
		{
			PORTE.OUTCLR = PIN4_bm;	
    16ee:	80 e1       	ldi	r24, 0x10	; 16
    16f0:	80 93 86 06 	sts	0x0686, r24
	{
		int i;
		
		setSS(FLASH, 0);
		
		spiTxRx(FLASH_BF1RD);
    16f4:	84 ed       	ldi	r24, 0xD4	; 212
    16f6:	0e 94 31 0b 	call	0x1662	; 0x1662 <spiTxRx>
		spiTxRx(0x00);
    16fa:	80 e0       	ldi	r24, 0x00	; 0
    16fc:	0e 94 31 0b 	call	0x1662	; 0x1662 <spiTxRx>
		spiTxRx((start & 0x0300) >> 8);
    1700:	ce 01       	movw	r24, r28
    1702:	88 27       	eor	r24, r24
    1704:	93 70       	andi	r25, 0x03	; 3
    1706:	89 2f       	mov	r24, r25
    1708:	0e 94 31 0b 	call	0x1662	; 0x1662 <spiTxRx>
		spiTxRx(start & 0x00FF);
    170c:	8c 2f       	mov	r24, r28
    170e:	0e 94 31 0b 	call	0x1662	; 0x1662 <spiTxRx>
		spiTxRx(0x00);
    1712:	80 e0       	ldi	r24, 0x00	; 0
    1714:	0e 94 31 0b 	call	0x1662	; 0x1662 <spiTxRx>
    1718:	e8 01       	movw	r28, r16
		
		for(i = 0; i < length; ++i)
    171a:	06 c0       	rjmp	.+12     	; 0x1728 <readExtMem+0x8c>
		{
			buf[i] = spiTxRx(0);
    171c:	80 e0       	ldi	r24, 0x00	; 0
    171e:	0e 94 31 0b 	call	0x1662	; 0x1662 <spiTxRx>
    1722:	f8 01       	movw	r30, r16
    1724:	81 93       	st	Z+, r24
    1726:	8f 01       	movw	r16, r30
		}	
	
	}
}

int readExtMem(int which, int start, char * buf, int length)
    1728:	c8 01       	movw	r24, r16
    172a:	8c 1b       	sub	r24, r28
    172c:	9d 0b       	sbc	r25, r29
		spiTxRx(0x00);
		spiTxRx((start & 0x0300) >> 8);
		spiTxRx(start & 0x00FF);
		spiTxRx(0x00);
		
		for(i = 0; i < length; ++i)
    172e:	8e 15       	cp	r24, r14
    1730:	9f 05       	cpc	r25, r15
    1732:	a4 f3       	brlt	.-24     	; 0x171c <readExtMem+0x80>
	}
	else
	{
		if(level)
		{
			PORTE.OUTSET = PIN4_bm;
    1734:	80 e1       	ldi	r24, 0x10	; 16
    1736:	80 93 85 06 	sts	0x0685, r24
		
		setSS(FLASH, 1);	
		
		return 1;
	}
}
    173a:	81 e0       	ldi	r24, 0x01	; 1
    173c:	90 e0       	ldi	r25, 0x00	; 0
    173e:	df 91       	pop	r29
    1740:	cf 91       	pop	r28
    1742:	1f 91       	pop	r17
    1744:	0f 91       	pop	r16
    1746:	ff 90       	pop	r15
    1748:	ef 90       	pop	r14
    174a:	08 95       	ret

0000174c <writeExtMem>:

int writeExtMem(int which, int start, char * buf, int length)
{
    174c:	ef 92       	push	r14
    174e:	ff 92       	push	r15
    1750:	0f 93       	push	r16
    1752:	1f 93       	push	r17
    1754:	cf 93       	push	r28
    1756:	df 93       	push	r29
    1758:	eb 01       	movw	r28, r22
    175a:	8a 01       	movw	r16, r20
    175c:	79 01       	movw	r14, r18
	if(which == SRAM)
    175e:	01 97       	sbiw	r24, 0x01	; 1
    1760:	e9 f4       	brne	.+58     	; 0x179c <writeExtMem+0x50>
		{
			PORTF.OUTSET = PIN4_bm;
		}
		else
		{
			PORTF.OUTCLR = PIN4_bm;	
    1762:	80 e1       	ldi	r24, 0x10	; 16
    1764:	80 93 a6 06 	sts	0x06A6, r24
	{
		int i;
		
		setSS(SRAM, 0);
		
		spiTxRx(SRAM_WRITE);
    1768:	82 e0       	ldi	r24, 0x02	; 2
    176a:	0e 94 31 0b 	call	0x1662	; 0x1662 <spiTxRx>
		spiTxRx((start >> 8) & 0x00FF);
    176e:	8d 2f       	mov	r24, r29
    1770:	0e 94 31 0b 	call	0x1662	; 0x1662 <spiTxRx>
		spiTxRx(start & 0x00FF);
    1774:	8c 2f       	mov	r24, r28
    1776:	0e 94 31 0b 	call	0x1662	; 0x1662 <spiTxRx>
    177a:	e8 01       	movw	r28, r16
		
		for(i = 0; i < length; ++i)
    177c:	05 c0       	rjmp	.+10     	; 0x1788 <writeExtMem+0x3c>
		{
			spiTxRx(buf[i]);
    177e:	f8 01       	movw	r30, r16
    1780:	81 91       	ld	r24, Z+
    1782:	8f 01       	movw	r16, r30
    1784:	0e 94 31 0b 	call	0x1662	; 0x1662 <spiTxRx>
		
		return 1;
	}
}

int writeExtMem(int which, int start, char * buf, int length)
    1788:	c8 01       	movw	r24, r16
    178a:	8c 1b       	sub	r24, r28
    178c:	9d 0b       	sbc	r25, r29
		
		spiTxRx(SRAM_WRITE);
		spiTxRx((start >> 8) & 0x00FF);
		spiTxRx(start & 0x00FF);
		
		for(i = 0; i < length; ++i)
    178e:	8e 15       	cp	r24, r14
    1790:	9f 05       	cpc	r25, r15
    1792:	ac f3       	brlt	.-22     	; 0x177e <writeExtMem+0x32>
{
	if(which == SRAM)
	{
		if(level)
		{
			PORTF.OUTSET = PIN4_bm;
    1794:	80 e1       	ldi	r24, 0x10	; 16
    1796:	80 93 a5 06 	sts	0x06A5, r24
    179a:	22 c0       	rjmp	.+68     	; 0x17e0 <writeExtMem+0x94>
		{
			PORTE.OUTSET = PIN4_bm;
		}
		else
		{
			PORTE.OUTCLR = PIN4_bm;	
    179c:	80 e1       	ldi	r24, 0x10	; 16
    179e:	80 93 86 06 	sts	0x0686, r24
	{
		int i;
		
		setSS(FLASH, 0);
		
		spiTxRx(FLASH_BF1WR);
    17a2:	84 e8       	ldi	r24, 0x84	; 132
    17a4:	0e 94 31 0b 	call	0x1662	; 0x1662 <spiTxRx>
		spiTxRx(0x00);
    17a8:	80 e0       	ldi	r24, 0x00	; 0
    17aa:	0e 94 31 0b 	call	0x1662	; 0x1662 <spiTxRx>
		spiTxRx((start & 0x0300) >> 8);
    17ae:	ce 01       	movw	r24, r28
    17b0:	88 27       	eor	r24, r24
    17b2:	93 70       	andi	r25, 0x03	; 3
    17b4:	89 2f       	mov	r24, r25
    17b6:	0e 94 31 0b 	call	0x1662	; 0x1662 <spiTxRx>
		spiTxRx(start & 0x00FF);
    17ba:	8c 2f       	mov	r24, r28
    17bc:	0e 94 31 0b 	call	0x1662	; 0x1662 <spiTxRx>
    17c0:	e8 01       	movw	r28, r16
		
		for(i = 0; i < length; ++i)
    17c2:	05 c0       	rjmp	.+10     	; 0x17ce <writeExtMem+0x82>
		{
			spiTxRx(buf[i]);
    17c4:	f8 01       	movw	r30, r16
    17c6:	81 91       	ld	r24, Z+
    17c8:	8f 01       	movw	r16, r30
    17ca:	0e 94 31 0b 	call	0x1662	; 0x1662 <spiTxRx>
		
		return 1;
	}
}

int writeExtMem(int which, int start, char * buf, int length)
    17ce:	c8 01       	movw	r24, r16
    17d0:	8c 1b       	sub	r24, r28
    17d2:	9d 0b       	sbc	r25, r29
		spiTxRx(FLASH_BF1WR);
		spiTxRx(0x00);
		spiTxRx((start & 0x0300) >> 8);
		spiTxRx(start & 0x00FF);
		
		for(i = 0; i < length; ++i)
    17d4:	8e 15       	cp	r24, r14
    17d6:	9f 05       	cpc	r25, r15
    17d8:	ac f3       	brlt	.-22     	; 0x17c4 <writeExtMem+0x78>
	}
	else
	{
		if(level)
		{
			PORTE.OUTSET = PIN4_bm;
    17da:	80 e1       	ldi	r24, 0x10	; 16
    17dc:	80 93 85 06 	sts	0x0685, r24
		
		return 1;
	}


}
    17e0:	81 e0       	ldi	r24, 0x01	; 1
    17e2:	90 e0       	ldi	r25, 0x00	; 0
    17e4:	df 91       	pop	r29
    17e6:	cf 91       	pop	r28
    17e8:	1f 91       	pop	r17
    17ea:	0f 91       	pop	r16
    17ec:	ff 90       	pop	r15
    17ee:	ef 90       	pop	r14
    17f0:	08 95       	ret

000017f2 <initFlash>:



void initFlash()
{
    17f2:	08 95       	ret

000017f4 <initSRAM>:

}

void initSRAM()
{
    17f4:	1f 93       	push	r17
    17f6:	cf 93       	push	r28
    17f8:	df 93       	push	r29
		{
			PORTF.OUTSET = PIN4_bm;
		}
		else
		{
			PORTF.OUTCLR = PIN4_bm;	
    17fa:	c0 ea       	ldi	r28, 0xA0	; 160
    17fc:	d6 e0       	ldi	r29, 0x06	; 6
    17fe:	10 e1       	ldi	r17, 0x10	; 16
    1800:	1e 83       	std	Y+6, r17	; 0x06

void initSRAM()
{
		setSS(SRAM, 0);
		
		spiTxRx(SRAM_WRSR);
    1802:	81 e0       	ldi	r24, 0x01	; 1
    1804:	0e 94 31 0b 	call	0x1662	; 0x1662 <spiTxRx>
		spiTxRx(0x41);	// set mode to sequential, disable HOLD feature
    1808:	81 e4       	ldi	r24, 0x41	; 65
    180a:	0e 94 31 0b 	call	0x1662	; 0x1662 <spiTxRx>
{
	if(which == SRAM)
	{
		if(level)
		{
			PORTF.OUTSET = PIN4_bm;
    180e:	1d 83       	std	Y+5, r17	; 0x05
		}
		else
		{
			PORTF.OUTCLR = PIN4_bm;	
    1810:	1e 83       	std	Y+6, r17	; 0x06
	
	{
		uint8_t val;
		setSS(SRAM, 0);
		
		spiTxRx(SRAM_RDSR);
    1812:	85 e0       	ldi	r24, 0x05	; 5
    1814:	0e 94 31 0b 	call	0x1662	; 0x1662 <spiTxRx>
		val = spiTxRx(0x0);	// set mode to sequential, disable HOLD feature
    1818:	80 e0       	ldi	r24, 0x00	; 0
    181a:	0e 94 31 0b 	call	0x1662	; 0x1662 <spiTxRx>
{
	if(which == SRAM)
	{
		if(level)
		{
			PORTF.OUTSET = PIN4_bm;
    181e:	1d 83       	std	Y+5, r17	; 0x05
		spiTxRx(SRAM_RDSR);
		val = spiTxRx(0x0);	// set mode to sequential, disable HOLD feature
		
		setSS(SRAM, 1);			
		
		printf("SR is: %x\r\n",val);
    1820:	1f 92       	push	r1
    1822:	8f 93       	push	r24
    1824:	86 e8       	ldi	r24, 0x86	; 134
    1826:	94 e2       	ldi	r25, 0x24	; 36
    1828:	9f 93       	push	r25
    182a:	8f 93       	push	r24
    182c:	0e 94 b2 3e 	call	0x7d64	; 0x7d64 <printf>
    1830:	0f 90       	pop	r0
    1832:	0f 90       	pop	r0
    1834:	0f 90       	pop	r0
    1836:	0f 90       	pop	r0
	}
}
    1838:	df 91       	pop	r29
    183a:	cf 91       	pop	r28
    183c:	1f 91       	pop	r17
    183e:	08 95       	ret

00001840 <initExtMem>:

void initExtMem()
{
	PORTE.OUTSET = PIN4_bm;
    1840:	e0 e8       	ldi	r30, 0x80	; 128
    1842:	f6 e0       	ldi	r31, 0x06	; 6
    1844:	80 e1       	ldi	r24, 0x10	; 16
    1846:	85 83       	std	Z+5, r24	; 0x05
	PORTE.DIRSET = PIN4_bm;
    1848:	81 83       	std	Z+1, r24	; 0x01

	// set !SS1 lhigh
	PORTF.OUTSET = PIN4_bm;
    184a:	a0 ea       	ldi	r26, 0xA0	; 160
    184c:	b6 e0       	ldi	r27, 0x06	; 6
    184e:	15 96       	adiw	r26, 0x05	; 5
    1850:	8c 93       	st	X, r24
    1852:	15 97       	sbiw	r26, 0x05	; 5
	PORTF.DIRSET = PIN4_bm;
    1854:	11 96       	adiw	r26, 0x01	; 1
    1856:	8c 93       	st	X, r24


	PORTE.DIRSET = PIN5_bm | PIN7_bm;	// !ss/mosi/sck as output
    1858:	80 ea       	ldi	r24, 0xA0	; 160
    185a:	81 83       	std	Z+1, r24	; 0x01
	PORTE.DIRCLR = PIN6_bm;				// miso as input
    185c:	80 e4       	ldi	r24, 0x40	; 64
    185e:	82 83       	std	Z+2, r24	; 0x02

	SPIE.CTRL = SPI_ENABLE_bm | SPI_MASTER_bm;	//mode 0, clock/4
    1860:	80 e5       	ldi	r24, 0x50	; 80
    1862:	80 93 c0 0a 	sts	0x0AC0, r24

	initFlash();
	initSRAM();
    1866:	0c 94 fa 0b 	jmp	0x17f4	; 0x17f4 <initSRAM>

0000186a <newHWAccelData>:
TWI_Master_t twiMaster;
extern AccelData _acc;

int newHWAccelData()
{
	return (twiMaster.result == TWIM_RESULT_OK && twiMaster.status == TWIM_STATUS_READY);
    186a:	80 91 9a 2e 	lds	r24, 0x2E9A
    186e:	81 30       	cpi	r24, 0x01	; 1
    1870:	31 f4       	brne	.+12     	; 0x187e <newHWAccelData+0x14>
    1872:	80 91 99 2e 	lds	r24, 0x2E99
    1876:	21 e0       	ldi	r18, 0x01	; 1
    1878:	30 e0       	ldi	r19, 0x00	; 0
    187a:	88 23       	and	r24, r24
    187c:	11 f0       	breq	.+4      	; 0x1882 <newHWAccelData+0x18>
    187e:	20 e0       	ldi	r18, 0x00	; 0
    1880:	30 e0       	ldi	r19, 0x00	; 0
}
    1882:	c9 01       	movw	r24, r18
    1884:	08 95       	ret

00001886 <updateHWAccel>:

// this is currently non-blocking.
void updateHWAccel()
{
    1886:	cf 93       	push	r28
	if(twiMaster.result == TWIM_RESULT_OK && twiMaster.status == TWIM_STATUS_READY)
    1888:	80 91 9a 2e 	lds	r24, 0x2E9A
    188c:	81 30       	cpi	r24, 0x01	; 1
    188e:	09 f0       	breq	.+2      	; 0x1892 <updateHWAccel+0xc>
    1890:	4b c0       	rjmp	.+150    	; 0x1928 <updateHWAccel+0xa2>
    1892:	80 91 99 2e 	lds	r24, 0x2E99
    1896:	81 11       	cpse	r24, r1
    1898:	47 c0       	rjmp	.+142    	; 0x1928 <updateHWAccel+0xa2>
	{ 
		byte oldstatus = _acc.status & ACC_O_MASK;
    189a:	c0 91 67 29 	lds	r28, 0x2967
		
		// I2C reads in as unsigned - we need to convert back to 2s complement (+- 32)
		_acc.x = (Angle)(twiMaster.readData[0] << 2) >> 2;
    189e:	80 91 91 2e 	lds	r24, 0x2E91
    18a2:	24 e0       	ldi	r18, 0x04	; 4
    18a4:	82 9f       	mul	r24, r18
    18a6:	c0 01       	movw	r24, r0
    18a8:	11 24       	eor	r1, r1
    18aa:	85 95       	asr	r24
    18ac:	85 95       	asr	r24
    18ae:	80 93 64 29 	sts	0x2964, r24
		_acc.y = (Angle)(twiMaster.readData[1] << 2) >> 2;
    18b2:	80 91 92 2e 	lds	r24, 0x2E92
    18b6:	24 e0       	ldi	r18, 0x04	; 4
    18b8:	82 9f       	mul	r24, r18
    18ba:	c0 01       	movw	r24, r0
    18bc:	11 24       	eor	r1, r1
    18be:	85 95       	asr	r24
    18c0:	85 95       	asr	r24
    18c2:	80 93 65 29 	sts	0x2965, r24
		_acc.z = (Angle)(twiMaster.readData[2] << 2) >> 2;
    18c6:	80 91 93 2e 	lds	r24, 0x2E93
    18ca:	24 e0       	ldi	r18, 0x04	; 4
    18cc:	82 9f       	mul	r24, r18
    18ce:	c0 01       	movw	r24, r0
    18d0:	11 24       	eor	r1, r1
    18d2:	85 95       	asr	r24
    18d4:	85 95       	asr	r24
    18d6:	80 93 66 29 	sts	0x2966, r24
		_acc.status = twiMaster.readData[3];
    18da:	80 91 94 2e 	lds	r24, 0x2E94
    18de:	80 93 67 29 	sts	0x2967, r24
		
		twiMaster.result = TWIM_RESULT_UNKNOWN;
    18e2:	10 92 9a 2e 	sts	0x2E9A, r1
		
		// if superceding event isn't registered, register sub-events, if necessary
		if(!triggerHandler(EVENT_ACCEL_CHANGE))
    18e6:	8b e0       	ldi	r24, 0x0B	; 11
    18e8:	0e 94 4f 06 	call	0xc9e	; 0xc9e <triggerHandler>
    18ec:	89 2b       	or	r24, r25
    18ee:	e1 f4       	brne	.+56     	; 0x1928 <updateHWAccel+0xa2>
		{
			if(_acc.status & ACC_TAP)
    18f0:	80 91 67 29 	lds	r24, 0x2967
    18f4:	85 ff       	sbrs	r24, 5
    18f6:	03 c0       	rjmp	.+6      	; 0x18fe <updateHWAccel+0x78>
			{
				triggerHandler(EVENT_ACCEL_TAP);
    18f8:	8c e0       	ldi	r24, 0x0C	; 12
    18fa:	0e 94 4f 06 	call	0xc9e	; 0xc9e <triggerHandler>
			}	
			if(_acc.status & ACC_SHAKE)
    18fe:	80 91 67 29 	lds	r24, 0x2967
    1902:	87 ff       	sbrs	r24, 7
    1904:	03 c0       	rjmp	.+6      	; 0x190c <updateHWAccel+0x86>
			{
				triggerHandler(EVENT_ACCEL_SHAKE);
    1906:	8d e0       	ldi	r24, 0x0D	; 13
    1908:	0e 94 4f 06 	call	0xc9e	; 0xc9e <triggerHandler>
// this is currently non-blocking.
void updateHWAccel()
{
	if(twiMaster.result == TWIM_RESULT_OK && twiMaster.status == TWIM_STATUS_READY)
	{ 
		byte oldstatus = _acc.status & ACC_O_MASK;
    190c:	cf 71       	andi	r28, 0x1F	; 31
			}	
			if(_acc.status & ACC_SHAKE)
			{
				triggerHandler(EVENT_ACCEL_SHAKE);
			}	
			if(oldstatus != (_acc.status & ACC_O_MASK))
    190e:	2c 2f       	mov	r18, r28
    1910:	30 e0       	ldi	r19, 0x00	; 0
    1912:	80 91 67 29 	lds	r24, 0x2967
    1916:	8f 71       	andi	r24, 0x1F	; 31
    1918:	90 e0       	ldi	r25, 0x00	; 0
    191a:	28 17       	cp	r18, r24
    191c:	39 07       	cpc	r19, r25
    191e:	21 f0       	breq	.+8      	; 0x1928 <updateHWAccel+0xa2>
			{
				triggerHandler(EVENT_ACCEL_TAP);
    1920:	8c e0       	ldi	r24, 0x0C	; 12
			}			
		}
	}
}
    1922:	cf 91       	pop	r28
			{
				triggerHandler(EVENT_ACCEL_SHAKE);
			}	
			if(oldstatus != (_acc.status & ACC_O_MASK))
			{
				triggerHandler(EVENT_ACCEL_TAP);
    1924:	0c 94 4f 06 	jmp	0xc9e	; 0xc9e <triggerHandler>
			}			
		}
	}
}
    1928:	cf 91       	pop	r28
    192a:	08 95       	ret

0000192c <initHWAccel>:

// Doesn't *really* need to be blocking, just checked for success
// TODO: should block? yes no?
void initHWAccel()
{
    192c:	0f 93       	push	r16
    192e:	cf 93       	push	r28
    1930:	df 93       	push	r29
    1932:	1f 92       	push	r1
    1934:	1f 92       	push	r1
    1936:	cd b7       	in	r28, 0x3d	; 61
    1938:	de b7       	in	r29, 0x3e	; 62
	/* Initialize TWI master. */
	TWI_MasterInit(&twiMaster,
    193a:	2b e9       	ldi	r18, 0x9B	; 155
    193c:	40 e4       	ldi	r20, 0x40	; 64
    193e:	60 ea       	ldi	r22, 0xA0	; 160
    1940:	74 e0       	ldi	r23, 0x04	; 4
    1942:	8a e8       	ldi	r24, 0x8A	; 138
    1944:	9e e2       	ldi	r25, 0x2E	; 46
    1946:	0e 94 7e 16 	call	0x2cfc	; 0x2cfc <TWI_MasterInit>

	// prepare configuration data for the accelerometer
	byte buf[2];

	// set mode to STANDBY if it isn't already (can't update registers in ACTIVE mode!)
	buf[0] = 0x07;
    194a:	87 e0       	ldi	r24, 0x07	; 7
    194c:	89 83       	std	Y+1, r24	; 0x01
	buf[1] = 0x18;
    194e:	88 e1       	ldi	r24, 0x18	; 24
    1950:	8a 83       	std	Y+2, r24	; 0x02
	TWI_MasterWriteRead(&twiMaster, ACCEL_I2C_ADDR, buf, 2, 0);
    1952:	00 e0       	ldi	r16, 0x00	; 0
    1954:	22 e0       	ldi	r18, 0x02	; 2
    1956:	ae 01       	movw	r20, r28
    1958:	4f 5f       	subi	r20, 0xFF	; 255
    195a:	5f 4f       	sbci	r21, 0xFF	; 255
    195c:	6c e4       	ldi	r22, 0x4C	; 76
    195e:	8a e8       	ldi	r24, 0x8A	; 138
    1960:	9e e2       	ldi	r25, 0x2E	; 46
    1962:	0e 94 99 16 	call	0x2d32	; 0x2d32 <TWI_MasterWriteRead>
	while (twiMaster.status != TWIM_STATUS_READY);
    1966:	80 91 99 2e 	lds	r24, 0x2E99
    196a:	81 11       	cpse	r24, r1
    196c:	fc cf       	rjmp	.-8      	; 0x1966 <initHWAccel+0x3a>

	// set sleep mode
	buf[0] = 0x05;
    196e:	85 e0       	ldi	r24, 0x05	; 5
    1970:	89 83       	std	Y+1, r24	; 0x01
	buf[1] = 0x00;	// no sleep
    1972:	1a 82       	std	Y+2, r1	; 0x02
	TWI_MasterWriteRead(&twiMaster, ACCEL_I2C_ADDR, buf, 2, 0);
    1974:	00 e0       	ldi	r16, 0x00	; 0
    1976:	22 e0       	ldi	r18, 0x02	; 2
    1978:	ae 01       	movw	r20, r28
    197a:	4f 5f       	subi	r20, 0xFF	; 255
    197c:	5f 4f       	sbci	r21, 0xFF	; 255
    197e:	6c e4       	ldi	r22, 0x4C	; 76
    1980:	8a e8       	ldi	r24, 0x8A	; 138
    1982:	9e e2       	ldi	r25, 0x2E	; 46
    1984:	0e 94 99 16 	call	0x2d32	; 0x2d32 <TWI_MasterWriteRead>
	while (twiMaster.status != TWIM_STATUS_READY);
    1988:	80 91 99 2e 	lds	r24, 0x2E99
    198c:	81 11       	cpse	r24, r1
    198e:	fc cf       	rjmp	.-8      	; 0x1988 <initHWAccel+0x5c>

	// set interrupts
	buf[0] = 0x06;
    1990:	86 e0       	ldi	r24, 0x06	; 6
    1992:	89 83       	std	Y+1, r24	; 0x01
	buf[1] = 0x07;	// 0x06 Interrupt Setup Register -> PDINT | PLINT | FBINT
    1994:	87 e0       	ldi	r24, 0x07	; 7
    1996:	8a 83       	std	Y+2, r24	; 0x02
	TWI_MasterWriteRead(&twiMaster, ACCEL_I2C_ADDR, buf, 2, 0);
    1998:	00 e0       	ldi	r16, 0x00	; 0
    199a:	22 e0       	ldi	r18, 0x02	; 2
    199c:	ae 01       	movw	r20, r28
    199e:	4f 5f       	subi	r20, 0xFF	; 255
    19a0:	5f 4f       	sbci	r21, 0xFF	; 255
    19a2:	6c e4       	ldi	r22, 0x4C	; 76
    19a4:	8a e8       	ldi	r24, 0x8A	; 138
    19a6:	9e e2       	ldi	r25, 0x2E	; 46
    19a8:	0e 94 99 16 	call	0x2d32	; 0x2d32 <TWI_MasterWriteRead>
	while (twiMaster.status != TWIM_STATUS_READY);
    19ac:	80 91 99 2e 	lds	r24, 0x2E99
    19b0:	81 11       	cpse	r24, r1
    19b2:	fc cf       	rjmp	.-8      	; 0x19ac <initHWAccel+0x80>

	// set filter rate
	buf[0] = 0x08;
    19b4:	88 e0       	ldi	r24, 0x08	; 8
    19b6:	89 83       	std	Y+1, r24	; 0x01
	buf[1] = 0xE0;	// 0x08 Sample Register -> Fil[0:2]
    19b8:	80 ee       	ldi	r24, 0xE0	; 224
    19ba:	8a 83       	std	Y+2, r24	; 0x02
	TWI_MasterWriteRead(&twiMaster, ACCEL_I2C_ADDR, buf, 2, 0);
    19bc:	00 e0       	ldi	r16, 0x00	; 0
    19be:	22 e0       	ldi	r18, 0x02	; 2
    19c0:	ae 01       	movw	r20, r28
    19c2:	4f 5f       	subi	r20, 0xFF	; 255
    19c4:	5f 4f       	sbci	r21, 0xFF	; 255
    19c6:	6c e4       	ldi	r22, 0x4C	; 76
    19c8:	8a e8       	ldi	r24, 0x8A	; 138
    19ca:	9e e2       	ldi	r25, 0x2E	; 46
    19cc:	0e 94 99 16 	call	0x2d32	; 0x2d32 <TWI_MasterWriteRead>
	while (twiMaster.status != TWIM_STATUS_READY);
    19d0:	80 91 99 2e 	lds	r24, 0x2E99
    19d4:	81 11       	cpse	r24, r1
    19d6:	fc cf       	rjmp	.-8      	; 0x19d0 <initHWAccel+0xa4>
	
	// set tap detection
	buf[0] = 0x09;
    19d8:	89 e0       	ldi	r24, 0x09	; 9
    19da:	89 83       	std	Y+1, r24	; 0x01
	buf[1] = 0x10;	// 0x09	Pulse detection -> +- 4 counts
    19dc:	80 e1       	ldi	r24, 0x10	; 16
    19de:	8a 83       	std	Y+2, r24	; 0x02
	TWI_MasterWriteRead(&twiMaster, ACCEL_I2C_ADDR, buf, 2, 0);
    19e0:	00 e0       	ldi	r16, 0x00	; 0
    19e2:	22 e0       	ldi	r18, 0x02	; 2
    19e4:	ae 01       	movw	r20, r28
    19e6:	4f 5f       	subi	r20, 0xFF	; 255
    19e8:	5f 4f       	sbci	r21, 0xFF	; 255
    19ea:	6c e4       	ldi	r22, 0x4C	; 76
    19ec:	8a e8       	ldi	r24, 0x8A	; 138
    19ee:	9e e2       	ldi	r25, 0x2E	; 46
    19f0:	0e 94 99 16 	call	0x2d32	; 0x2d32 <TWI_MasterWriteRead>
	while (twiMaster.status != TWIM_STATUS_READY);
    19f4:	80 91 99 2e 	lds	r24, 0x2E99
    19f8:	81 11       	cpse	r24, r1
    19fa:	fc cf       	rjmp	.-8      	; 0x19f4 <initHWAccel+0xc8>

	// set tap debounce
	buf[0] = 0x0A;
    19fc:	8a e0       	ldi	r24, 0x0A	; 10
    19fe:	89 83       	std	Y+1, r24	; 0x01
	buf[1] = 0x10;	// 0x0A Tap debounce ->	4 detections
    1a00:	80 e1       	ldi	r24, 0x10	; 16
    1a02:	8a 83       	std	Y+2, r24	; 0x02
	TWI_MasterWriteRead(&twiMaster, ACCEL_I2C_ADDR, buf, 2, 0);
    1a04:	00 e0       	ldi	r16, 0x00	; 0
    1a06:	22 e0       	ldi	r18, 0x02	; 2
    1a08:	ae 01       	movw	r20, r28
    1a0a:	4f 5f       	subi	r20, 0xFF	; 255
    1a0c:	5f 4f       	sbci	r21, 0xFF	; 255
    1a0e:	6c e4       	ldi	r22, 0x4C	; 76
    1a10:	8a e8       	ldi	r24, 0x8A	; 138
    1a12:	9e e2       	ldi	r25, 0x2E	; 46
    1a14:	0e 94 99 16 	call	0x2d32	; 0x2d32 <TWI_MasterWriteRead>
	while (twiMaster.status != TWIM_STATUS_READY);	
    1a18:	80 91 99 2e 	lds	r24, 0x2E99
    1a1c:	81 11       	cpse	r24, r1
    1a1e:	fc cf       	rjmp	.-8      	; 0x1a18 <initHWAccel+0xec>
	
	// enable the accelerometer
	buf[0] = 0x07;
    1a20:	87 e0       	ldi	r24, 0x07	; 7
    1a22:	89 83       	std	Y+1, r24	; 0x01
	buf[1] = 0x19;
    1a24:	89 e1       	ldi	r24, 0x19	; 25
    1a26:	8a 83       	std	Y+2, r24	; 0x02
	TWI_MasterWriteRead(&twiMaster, ACCEL_I2C_ADDR, buf, 2, 0);
    1a28:	00 e0       	ldi	r16, 0x00	; 0
    1a2a:	22 e0       	ldi	r18, 0x02	; 2
    1a2c:	ae 01       	movw	r20, r28
    1a2e:	4f 5f       	subi	r20, 0xFF	; 255
    1a30:	5f 4f       	sbci	r21, 0xFF	; 255
    1a32:	6c e4       	ldi	r22, 0x4C	; 76
    1a34:	8a e8       	ldi	r24, 0x8A	; 138
    1a36:	9e e2       	ldi	r25, 0x2E	; 46
    1a38:	0e 94 99 16 	call	0x2d32	; 0x2d32 <TWI_MasterWriteRead>
	while (twiMaster.status != TWIM_STATUS_READY);
    1a3c:	80 91 99 2e 	lds	r24, 0x2E99
    1a40:	81 11       	cpse	r24, r1
    1a42:	fc cf       	rjmp	.-8      	; 0x1a3c <initHWAccel+0x110>
	
	// set up input/interrupt to detect acceleromter IRQs
	PORTB.DIRCLR = PIN0_bm;					// set Pin0 as input
    1a44:	81 e0       	ldi	r24, 0x01	; 1
    1a46:	80 93 22 06 	sts	0x0622, r24
	PORTB.PIN0CTRL = PORT_OPC_PULLUP_gc | PORT_ISC_FALLING_gc;	// set pullup, trigger interrupt on falling edge
    1a4a:	9a e1       	ldi	r25, 0x1A	; 26
    1a4c:	90 93 30 06 	sts	0x0630, r25
	PORTB.INT0MASK = PIN0_bm;				// enable PIN0 to trigger INT0
    1a50:	80 93 2a 06 	sts	0x062A, r24
	PORTB.INTCTRL = PORT_INT0LVL_LO_gc;		// enable INT0 interrupt on LOW priority
    1a54:	80 93 29 06 	sts	0x0629, r24
}
    1a58:	0f 90       	pop	r0
    1a5a:	0f 90       	pop	r0
    1a5c:	df 91       	pop	r29
    1a5e:	cf 91       	pop	r28
    1a60:	0f 91       	pop	r16
    1a62:	08 95       	ret

00001a64 <__vector_34>:

// Acceleromter status change detection interrupt
ISR(PORTB_INT0_vect)
{
    1a64:	1f 92       	push	r1
    1a66:	0f 92       	push	r0
    1a68:	0f b6       	in	r0, 0x3f	; 63
    1a6a:	0f 92       	push	r0
    1a6c:	11 24       	eor	r1, r1
    1a6e:	0b b6       	in	r0, 0x3b	; 59
    1a70:	0f 92       	push	r0
    1a72:	0f 93       	push	r16
    1a74:	2f 93       	push	r18
    1a76:	3f 93       	push	r19
    1a78:	4f 93       	push	r20
    1a7a:	5f 93       	push	r21
    1a7c:	6f 93       	push	r22
    1a7e:	7f 93       	push	r23
    1a80:	8f 93       	push	r24
    1a82:	9f 93       	push	r25
    1a84:	af 93       	push	r26
    1a86:	bf 93       	push	r27
    1a88:	ef 93       	push	r30
    1a8a:	ff 93       	push	r31
    1a8c:	cf 93       	push	r28
    1a8e:	df 93       	push	r29
    1a90:	1f 92       	push	r1
    1a92:	cd b7       	in	r28, 0x3d	; 61
    1a94:	de b7       	in	r29, 0x3e	; 62

	if(twiMaster.status == TWIM_STATUS_READY)
    1a96:	80 91 99 2e 	lds	r24, 0x2E99
    1a9a:	81 11       	cpse	r24, r1
    1a9c:	0b c0       	rjmp	.+22     	; 0x1ab4 <__vector_34+0x50>
	{
		byte buf = 0x00;		// read 4 bytes, starting at 0x00 (x,y,z,status)
    1a9e:	19 82       	std	Y+1, r1	; 0x01
		TWI_MasterWriteRead(&twiMaster, ACCEL_I2C_ADDR, &buf, 1, 4);
    1aa0:	04 e0       	ldi	r16, 0x04	; 4
    1aa2:	21 e0       	ldi	r18, 0x01	; 1
    1aa4:	ae 01       	movw	r20, r28
    1aa6:	4f 5f       	subi	r20, 0xFF	; 255
    1aa8:	5f 4f       	sbci	r21, 0xFF	; 255
    1aaa:	6c e4       	ldi	r22, 0x4C	; 76
    1aac:	8a e8       	ldi	r24, 0x8A	; 138
    1aae:	9e e2       	ldi	r25, 0x2E	; 46
    1ab0:	0e 94 99 16 	call	0x2d32	; 0x2d32 <TWI_MasterWriteRead>
	}

}
    1ab4:	0f 90       	pop	r0
    1ab6:	df 91       	pop	r29
    1ab8:	cf 91       	pop	r28
    1aba:	ff 91       	pop	r31
    1abc:	ef 91       	pop	r30
    1abe:	bf 91       	pop	r27
    1ac0:	af 91       	pop	r26
    1ac2:	9f 91       	pop	r25
    1ac4:	8f 91       	pop	r24
    1ac6:	7f 91       	pop	r23
    1ac8:	6f 91       	pop	r22
    1aca:	5f 91       	pop	r21
    1acc:	4f 91       	pop	r20
    1ace:	3f 91       	pop	r19
    1ad0:	2f 91       	pop	r18
    1ad2:	0f 91       	pop	r16
    1ad4:	0f 90       	pop	r0
    1ad6:	0b be       	out	0x3b, r0	; 59
    1ad8:	0f 90       	pop	r0
    1ada:	0f be       	out	0x3f, r0	; 63
    1adc:	0f 90       	pop	r0
    1ade:	1f 90       	pop	r1
    1ae0:	18 95       	reti

00001ae2 <__vector_46>:

/*! TWIE Master Interrupt vector. */
ISR(TWIE_TWIM_vect)
{
    1ae2:	1f 92       	push	r1
    1ae4:	0f 92       	push	r0
    1ae6:	0f b6       	in	r0, 0x3f	; 63
    1ae8:	0f 92       	push	r0
    1aea:	11 24       	eor	r1, r1
    1aec:	0b b6       	in	r0, 0x3b	; 59
    1aee:	0f 92       	push	r0
    1af0:	2f 93       	push	r18
    1af2:	3f 93       	push	r19
    1af4:	4f 93       	push	r20
    1af6:	5f 93       	push	r21
    1af8:	6f 93       	push	r22
    1afa:	7f 93       	push	r23
    1afc:	8f 93       	push	r24
    1afe:	9f 93       	push	r25
    1b00:	af 93       	push	r26
    1b02:	bf 93       	push	r27
    1b04:	ef 93       	push	r30
    1b06:	ff 93       	push	r31

	TWI_MasterInterruptHandler(&twiMaster);
    1b08:	8a e8       	ldi	r24, 0x8A	; 138
    1b0a:	9e e2       	ldi	r25, 0x2E	; 46
    1b0c:	0e 94 49 17 	call	0x2e92	; 0x2e92 <TWI_MasterInterruptHandler>
}
    1b10:	ff 91       	pop	r31
    1b12:	ef 91       	pop	r30
    1b14:	bf 91       	pop	r27
    1b16:	af 91       	pop	r26
    1b18:	9f 91       	pop	r25
    1b1a:	8f 91       	pop	r24
    1b1c:	7f 91       	pop	r23
    1b1e:	6f 91       	pop	r22
    1b20:	5f 91       	pop	r21
    1b22:	4f 91       	pop	r20
    1b24:	3f 91       	pop	r19
    1b26:	2f 91       	pop	r18
    1b28:	0f 90       	pop	r0
    1b2a:	0b be       	out	0x3b, r0	; 59
    1b2c:	0f 90       	pop	r0
    1b2e:	0f be       	out	0x3f, r0	; 63
    1b30:	0f 90       	pop	r0
    1b32:	1f 90       	pop	r1
    1b34:	18 95       	reti

00001b36 <setAccelRegister>:

// helper function to setup accelerometer registers
void setAccelRegister(byte one, byte two)
{
    1b36:	0f 93       	push	r16
    1b38:	cf 93       	push	r28
    1b3a:	df 93       	push	r29
    1b3c:	1f 92       	push	r1
    1b3e:	1f 92       	push	r1
    1b40:	cd b7       	in	r28, 0x3d	; 61
    1b42:	de b7       	in	r29, 0x3e	; 62
    byte buf[2];

    buf[0] = one;
    1b44:	89 83       	std	Y+1, r24	; 0x01
    buf[1] = two;
    1b46:	6a 83       	std	Y+2, r22	; 0x02
    
    TWI_MasterWriteRead(&twiMaster, ACCEL_I2C_ADDR, buf, 2, 0);
    1b48:	00 e0       	ldi	r16, 0x00	; 0
    1b4a:	22 e0       	ldi	r18, 0x02	; 2
    1b4c:	ae 01       	movw	r20, r28
    1b4e:	4f 5f       	subi	r20, 0xFF	; 255
    1b50:	5f 4f       	sbci	r21, 0xFF	; 255
    1b52:	6c e4       	ldi	r22, 0x4C	; 76
    1b54:	8a e8       	ldi	r24, 0x8A	; 138
    1b56:	9e e2       	ldi	r25, 0x2E	; 46
    1b58:	0e 94 99 16 	call	0x2d32	; 0x2d32 <TWI_MasterWriteRead>
    while(twiMaster.status != TWIM_STATUS_READY);
    1b5c:	80 91 99 2e 	lds	r24, 0x2E99
    1b60:	81 11       	cpse	r24, r1
    1b62:	fc cf       	rjmp	.-8      	; 0x1b5c <setAccelRegister+0x26>
}
    1b64:	0f 90       	pop	r0
    1b66:	0f 90       	pop	r0
    1b68:	df 91       	pop	r29
    1b6a:	cf 91       	pop	r28
    1b6c:	0f 91       	pop	r16
    1b6e:	08 95       	ret

00001b70 <scaryBlockTickHack>:

extern int blockTickRunning;

void scaryBlockTickHack(void)
{
	TCF0.CTRLA = TC_CLKSEL_DIV1_gc;
    1b70:	e0 e0       	ldi	r30, 0x00	; 0
    1b72:	fb e0       	ldi	r31, 0x0B	; 11
    1b74:	81 e0       	ldi	r24, 0x01	; 1
    1b76:	80 83       	st	Z, r24
	
	TCF0.PER = 16000;  // 2000hz blocktick
    1b78:	80 e8       	ldi	r24, 0x80	; 128
    1b7a:	9e e3       	ldi	r25, 0x3E	; 62
    1b7c:	86 a3       	std	Z+38, r24	; 0x26
    1b7e:	97 a3       	std	Z+39, r25	; 0x27
	TCF0.INTCTRLA = TC_OVFINTLVL_MED_gc;
    1b80:	82 e0       	ldi	r24, 0x02	; 2
    1b82:	86 83       	std	Z+6, r24	; 0x06
    1b84:	08 95       	ret

00001b86 <initBlockTick>:


void initBlockTick()
{

	blockTickRunning=0;
    1b86:	10 92 36 29 	sts	0x2936, r1
    1b8a:	10 92 37 29 	sts	0x2937, r1
     
	scaryBlockTickHack();
    1b8e:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <scaryBlockTickHack>

	/* Enable interrupt levels. */
	PMIC.CTRL |= PMIC_HILVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_LOLVLEN_bm;
    1b92:	e0 ea       	ldi	r30, 0xA0	; 160
    1b94:	f0 e0       	ldi	r31, 0x00	; 0
    1b96:	82 81       	ldd	r24, Z+2	; 0x02
    1b98:	87 60       	ori	r24, 0x07	; 7
    1b9a:	82 83       	std	Z+2, r24	; 0x02
	sei();
    1b9c:	78 94       	sei
    1b9e:	08 95       	ret

00001ba0 <__vector_108>:
}

// part of scary blocktick hack
// called every 38400 khz or so
ISR(TCF0_OVF_vect)
{
    1ba0:	1f 92       	push	r1
    1ba2:	0f 92       	push	r0
    1ba4:	0f b6       	in	r0, 0x3f	; 63
    1ba6:	0f 92       	push	r0
    1ba8:	11 24       	eor	r1, r1
    1baa:	0b b6       	in	r0, 0x3b	; 59
    1bac:	0f 92       	push	r0
    1bae:	2f 93       	push	r18
    1bb0:	3f 93       	push	r19
    1bb2:	4f 93       	push	r20
    1bb4:	5f 93       	push	r21
    1bb6:	6f 93       	push	r22
    1bb8:	7f 93       	push	r23
    1bba:	8f 93       	push	r24
    1bbc:	9f 93       	push	r25
    1bbe:	af 93       	push	r26
    1bc0:	bf 93       	push	r27
    1bc2:	ef 93       	push	r30
    1bc4:	ff 93       	push	r31
	if (!blockTickRunning)
    1bc6:	80 91 36 29 	lds	r24, 0x2936
    1bca:	90 91 37 29 	lds	r25, 0x2937
    1bce:	89 2b       	or	r24, r25
    1bd0:	19 f4       	brne	.+6      	; 0x1bd8 <__vector_108+0x38>
	  {
	    wdt_reset();
    1bd2:	a8 95       	wdr
	    blockTick();
    1bd4:	0e 94 3c 01 	call	0x278	; 0x278 <blockTick>
	  }
}
    1bd8:	ff 91       	pop	r31
    1bda:	ef 91       	pop	r30
    1bdc:	bf 91       	pop	r27
    1bde:	af 91       	pop	r26
    1be0:	9f 91       	pop	r25
    1be2:	8f 91       	pop	r24
    1be4:	7f 91       	pop	r23
    1be6:	6f 91       	pop	r22
    1be8:	5f 91       	pop	r21
    1bea:	4f 91       	pop	r20
    1bec:	3f 91       	pop	r19
    1bee:	2f 91       	pop	r18
    1bf0:	0f 90       	pop	r0
    1bf2:	0b be       	out	0x3b, r0	; 59
    1bf4:	0f 90       	pop	r0
    1bf6:	0f be       	out	0x3f, r0	; 63
    1bf8:	0f 90       	pop	r0
    1bfa:	1f 90       	pop	r1
    1bfc:	18 95       	reti

00001bfe <jumpToHWBootSection>:
#include <avr/io.h>
#include "../hw-api/hwBoot.h"

void jumpToHWBootSection(){
	uint8_t temp = RST.CTRL | RST_SWRST_bm;
    1bfe:	e8 e7       	ldi	r30, 0x78	; 120
    1c00:	f0 e0       	ldi	r31, 0x00	; 0
    1c02:	81 81       	ldd	r24, Z+1	; 0x01
    1c04:	81 60       	ori	r24, 0x01	; 1
	CCP = CCP_IOREG_gc; // grab permission to modify the reset reg
    1c06:	98 ed       	ldi	r25, 0xD8	; 216
    1c08:	94 bf       	out	0x34, r25	; 52
	RST.CTRL = temp; // set the reset reg to trigger a SW reset
    1c0a:	81 83       	std	Z+1, r24	; 0x01
    1c0c:	08 95       	ret

00001c0e <crcCalc>:
byte crcCalc(byte currCrc, byte newVal)
{
    byte crc = currCrc;
	int i;
	
	crc ^= newVal;
    1c0e:	68 27       	eor	r22, r24
    1c10:	28 e0       	ldi	r18, 0x08	; 8
    1c12:	30 e0       	ldi	r19, 0x00	; 0
    for (i=0; i<8; i++)
	{
        if (0x80 & crc) {
    1c14:	67 ff       	sbrs	r22, 7
    1c16:	09 c0       	rjmp	.+18     	; 0x1c2a <crcCalc+0x1c>
            crc = (crc << 1) ^ CRC_POLY;
    1c18:	86 2f       	mov	r24, r22
    1c1a:	90 e0       	ldi	r25, 0x00	; 0
    1c1c:	88 0f       	add	r24, r24
    1c1e:	99 1f       	adc	r25, r25
    1c20:	46 ea       	ldi	r20, 0xA6	; 166
    1c22:	84 27       	eor	r24, r20
    1c24:	90 95       	com	r25
    1c26:	68 2f       	mov	r22, r24
    1c28:	01 c0       	rjmp	.+2      	; 0x1c2c <crcCalc+0x1e>
        }
		else {
            crc = crc << 1;
    1c2a:	66 0f       	add	r22, r22
    1c2c:	21 50       	subi	r18, 0x01	; 1
    1c2e:	31 09       	sbc	r19, r1
{
    byte crc = currCrc;
	int i;
	
	crc ^= newVal;
    for (i=0; i<8; i++)
    1c30:	89 f7       	brne	.-30     	; 0x1c14 <crcCalc+0x6>
		else {
            crc = crc << 1;
        }
    }
	return crc;
} 
    1c32:	86 2f       	mov	r24, r22
    1c34:	08 95       	ret

00001c36 <ackHandler>:
// handles the ack byte and updates the packet queue
//    (parity, timer, CTS)
// inputs:  port received on
// returns: nothing
void ackHandler(PRef p)
{
    1c36:	0f 93       	push	r16
    1c38:	1f 93       	push	r17
    1c3a:	cf 93       	push	r28
    1c3c:	df 93       	push	r29
    byte currParity = sendParity(port[p].sq);
    1c3e:	98 e5       	ldi	r25, 0x58	; 88
    1c40:	89 9f       	mul	r24, r25
    1c42:	80 01       	movw	r16, r0
    1c44:	11 24       	eor	r1, r1
    1c46:	e8 01       	movw	r28, r16
    1c48:	ce 58       	subi	r28, 0x8E	; 142
    1c4a:	d3 4d       	sbci	r29, 0xD3	; 211
    1c4c:	3e 85       	ldd	r19, Y+14	; 0x0e
    
    // check for double acks (shouldn't ever happen)
    if( !(gotOddAck(port[p].rq) ^ gotEvenAck(port[p].rq)) ) 
    1c4e:	9d 89       	ldd	r25, Y+21	; 0x15
    1c50:	29 2f       	mov	r18, r25
    1c52:	26 95       	lsr	r18
    1c54:	42 2f       	mov	r20, r18
    1c56:	49 27       	eor	r20, r25
    1c58:	9c 7f       	andi	r25, 0xFC	; 252
    {
        clearReceivedAcks( port[p].rq );
    1c5a:	9d 8b       	std	Y+21, r25	; 0x15
void ackHandler(PRef p)
{
    byte currParity = sendParity(port[p].sq);
    
    // check for double acks (shouldn't ever happen)
    if( !(gotOddAck(port[p].rq) ^ gotEvenAck(port[p].rq)) ) 
    1c5c:	40 ff       	sbrs	r20, 0
    {
        clearReceivedAcks( port[p].rq );
        return;
    1c5e:	18 c0       	rjmp	.+48     	; 0x1c90 <ackHandler+0x5a>
//    (parity, timer, CTS)
// inputs:  port received on
// returns: nothing
void ackHandler(PRef p)
{
    byte currParity = sendParity(port[p].sq);
    1c60:	32 fb       	bst	r19, 2
    1c62:	99 27       	eor	r25, r25
    1c64:	90 f9       	bld	r25, 0
    if( !(gotOddAck(port[p].rq) ^ gotEvenAck(port[p].rq)) ) 
    {
        clearReceivedAcks( port[p].rq );
        return;
    }
    byte recdParity = gotOddAck(port[p].rq);
    1c66:	21 70       	andi	r18, 0x01	; 1
    clearReceivedAcks( port[p].rq );
    
    // parity matches
    if(currParity == recdParity)
    1c68:	92 13       	cpse	r25, r18
    1c6a:	12 c0       	rjmp	.+36     	; 0x1c90 <ackHandler+0x5a>
    {
        // remove the Chunk, call callback with successfull response
        removeFromSq(p, MSG_RESP_ACK);
    1c6c:	68 e0       	ldi	r22, 0x08	; 8
    1c6e:	0e 94 e6 01 	call	0x3cc	; 0x3cc <removeFromSq>
        
        // reset the flags
        port[p].sq.retry    = NUM_RETRIES;
    1c72:	94 e0       	ldi	r25, 0x04	; 4
    1c74:	9d 87       	std	Y+13, r25	; 0x0d
        flipParity(port[p].sq);
    1c76:	8e 85       	ldd	r24, Y+14	; 0x0e
    1c78:	89 27       	eor	r24, r25
        port[p].sq.flags   |= CLEAR_TO_SEND;
    1c7a:	80 64       	ori	r24, 0x40	; 64
    1c7c:	8e 87       	std	Y+14, r24	; 0x0e
        
        // reset the timer
        deregisterTimeout(&(port[p].sq.qtout.tout));
    1c7e:	c8 01       	movw	r24, r16
    1c80:	8d 58       	subi	r24, 0x8D	; 141
    1c82:	93 4d       	sbci	r25, 0xD3	; 211
    }
    // else, parity error - don't do anything
}
    1c84:	df 91       	pop	r29
    1c86:	cf 91       	pop	r28
    1c88:	1f 91       	pop	r17
    1c8a:	0f 91       	pop	r16
        port[p].sq.retry    = NUM_RETRIES;
        flipParity(port[p].sq);
        port[p].sq.flags   |= CLEAR_TO_SEND;
        
        // reset the timer
        deregisterTimeout(&(port[p].sq.qtout.tout));
    1c8c:	0c 94 d9 08 	jmp	0x11b2	; 0x11b2 <deregisterTimeout>
    }
    // else, parity error - don't do anything
}
    1c90:	df 91       	pop	r29
    1c92:	cf 91       	pop	r28
    1c94:	1f 91       	pop	r17
    1c96:	0f 91       	pop	r16
    1c98:	08 95       	ret

00001c9a <addToGlobalRq>:

// adds a Chunk to the global receive queue
void addToGlobalRq(Chunk* c)
{
    // nothing to add
    if( c == NULL ) 
    1c9a:	00 97       	sbiw	r24, 0x00	; 0
    1c9c:	d9 f0       	breq	.+54     	; 0x1cd4 <addToGlobalRq+0x3a>
    {
        return;
    }
        
    // isolate Chunk
    c->next = NULL;
    1c9e:	fc 01       	movw	r30, r24
    1ca0:	12 8a       	std	Z+18, r1	; 0x12
    1ca2:	13 8a       	std	Z+19, r1	; 0x13
    
    // update pointers
    if( globalRq.head == NULL ) 
    1ca4:	20 91 68 29 	lds	r18, 0x2968
    1ca8:	30 91 69 29 	lds	r19, 0x2969
    1cac:	23 2b       	or	r18, r19
    1cae:	29 f4       	brne	.+10     	; 0x1cba <addToGlobalRq+0x20>
    {
        globalRq.head = c;
    1cb0:	80 93 68 29 	sts	0x2968, r24
    1cb4:	90 93 69 29 	sts	0x2969, r25
    1cb8:	06 c0       	rjmp	.+12     	; 0x1cc6 <addToGlobalRq+0x2c>
    }
    else 
    {
        globalRq.tail->next = c;
    1cba:	e0 91 6a 29 	lds	r30, 0x296A
    1cbe:	f0 91 6b 29 	lds	r31, 0x296B
    1cc2:	82 8b       	std	Z+18, r24	; 0x12
    1cc4:	93 8b       	std	Z+19, r25	; 0x13
    }
    
    // add/flag it
    globalRq.tail  = c;
    1cc6:	80 93 6a 29 	sts	0x296A, r24
    1cca:	90 93 6b 29 	sts	0x296B, r25
    globalRq.flags = PACKET_READY;
    1cce:	80 e8       	ldi	r24, 0x80	; 128
    1cd0:	80 93 6c 29 	sts	0x296C, r24
    1cd4:	08 95       	ret

00001cd6 <isSpecial>:
}

// check to see if character is special
byte isSpecial(byte val)
{
    1cd6:	28 2f       	mov	r18, r24
    if( ((val & ACK_MASK) == ACK   ) || ((val & ACK_MASK) == NACK  ) ||
    1cd8:	98 2f       	mov	r25, r24
    1cda:	9e 7f       	andi	r25, 0xFE	; 254
        ((val & FD_MASK)  == FD    ) || (val              == ESCAPE )   )
    {
        return 1;
    1cdc:	81 e0       	ldi	r24, 0x01	; 1
}

// check to see if character is special
byte isSpecial(byte val)
{
    if( ((val & ACK_MASK) == ACK   ) || ((val & ACK_MASK) == NACK  ) ||
    1cde:	98 30       	cpi	r25, 0x08	; 8
    1ce0:	41 f0       	breq	.+16     	; 0x1cf2 <isSpecial+0x1c>
    1ce2:	9a 30       	cpi	r25, 0x0A	; 10
    1ce4:	31 f0       	breq	.+12     	; 0x1cf2 <isSpecial+0x1c>
    1ce6:	92 31       	cpi	r25, 0x12	; 18
    1ce8:	29 f0       	breq	.+10     	; 0x1cf4 <isSpecial+0x1e>
        ((val & FD_MASK)  == FD    ) || (val              == ESCAPE )   )
    1cea:	2d 37       	cpi	r18, 0x7D	; 125
    1cec:	19 f0       	breq	.+6      	; 0x1cf4 <isSpecial+0x1e>
    1cee:	80 e0       	ldi	r24, 0x00	; 0
    1cf0:	08 95       	ret
    1cf2:	08 95       	ret
    {
        return 1;
    }
        
    return 0;
}
    1cf4:	08 95       	ret

00001cf6 <sendToBuffer>:

// makes the Chunk into the correct send string
void sendToBuffer(PRef p, Chunk* c, byte parity)
{
    1cf6:	9f 92       	push	r9
    1cf8:	af 92       	push	r10
    1cfa:	bf 92       	push	r11
    1cfc:	cf 92       	push	r12
    1cfe:	df 92       	push	r13
    1d00:	ef 92       	push	r14
    1d02:	ff 92       	push	r15
    1d04:	0f 93       	push	r16
    1d06:	1f 93       	push	r17
    1d08:	cf 93       	push	r28
    1d0a:	df 93       	push	r29
    1d0c:	b8 2e       	mov	r11, r24
    1d0e:	7b 01       	movw	r14, r22
    byte checksum = 0;
    byte val;
    byte i;
    byte delim;
    
    if(c == NULL)
    1d10:	61 15       	cp	r22, r1
    1d12:	71 05       	cpc	r23, r1
    1d14:	09 f4       	brne	.+2      	; 0x1d18 <sendToBuffer+0x22>
    1d16:	83 c0       	rjmp	.+262    	; 0x1e1e <sendToBuffer+0x128>
    {
        return;
    }
	
    // send FD
    delim = (FD | parity);
    1d18:	62 e1       	ldi	r22, 0x12	; 18
    1d1a:	c6 2e       	mov	r12, r22
    1d1c:	c4 2a       	or	r12, r20
    1d1e:	00 e0       	ldi	r16, 0x00	; 0
    1d20:	10 e0       	ldi	r17, 0x00	; 0
}

// makes the Chunk into the correct send string
void sendToBuffer(PRef p, Chunk* c, byte parity)
{
    byte checksum = 0;
    1d22:	d1 2c       	mov	r13, r1
            push(val^ESCAPE_CHAR, &(port[p].tx));
        }
        // send regular
        else 
        {
            push(val, &(port[p].tx));
    1d24:	88 e5       	ldi	r24, 0x58	; 88
    1d26:	b8 9e       	mul	r11, r24
    1d28:	e0 01       	movw	r28, r0
    1d2a:	11 24       	eor	r1, r1
    1d2c:	c6 55       	subi	r28, 0x56	; 86
    1d2e:	d3 4d       	sbci	r29, 0xD3	; 211
        
        // escape it
        if( isSpecial(val) ) 
        {
            push(ESCAPE, &(port[p].tx));
            push(val^ESCAPE_CHAR, &(port[p].tx));
    1d30:	70 e2       	ldi	r23, 0x20	; 32
    1d32:	97 2e       	mov	r9, r23
        
    return 0;
}

// makes the Chunk into the correct send string
void sendToBuffer(PRef p, Chunk* c, byte parity)
    1d34:	f7 01       	movw	r30, r14
    1d36:	e0 0f       	add	r30, r16
    1d38:	f1 1f       	adc	r31, r17
    delim = (FD | parity);

    // send messageHandler
    for(i=0; i<POINTER_SIZE; i++)
    {
        val = c->handler[i];
    1d3a:	a4 88       	ldd	r10, Z+20	; 0x14
        checksum = crcCalc(checksum, val);
    1d3c:	6a 2d       	mov	r22, r10
    1d3e:	8d 2d       	mov	r24, r13
    1d40:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <crcCalc>
    1d44:	d8 2e       	mov	r13, r24
        
        // escape it
        if( isSpecial(val) ) 
    1d46:	8a 2d       	mov	r24, r10
    1d48:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <isSpecial>
        {
            push(ESCAPE, &(port[p].tx));
    1d4c:	be 01       	movw	r22, r28
    {
        val = c->handler[i];
        checksum = crcCalc(checksum, val);
        
        // escape it
        if( isSpecial(val) ) 
    1d4e:	88 23       	and	r24, r24
    1d50:	39 f0       	breq	.+14     	; 0x1d60 <sendToBuffer+0x6a>
        {
            push(ESCAPE, &(port[p].tx));
    1d52:	8d e7       	ldi	r24, 0x7D	; 125
    1d54:	0e 94 96 01 	call	0x32c	; 0x32c <push>
            push(val^ESCAPE_CHAR, &(port[p].tx));
    1d58:	be 01       	movw	r22, r28
    1d5a:	8a 2d       	mov	r24, r10
    1d5c:	89 25       	eor	r24, r9
    1d5e:	01 c0       	rjmp	.+2      	; 0x1d62 <sendToBuffer+0x6c>
        }
        // send regular
        else 
        {
            push(val, &(port[p].tx));
    1d60:	8a 2d       	mov	r24, r10
    1d62:	0e 94 96 01 	call	0x32c	; 0x32c <push>
    1d66:	0f 5f       	subi	r16, 0xFF	; 255
    1d68:	1f 4f       	sbci	r17, 0xFF	; 255
	
    // send FD
    delim = (FD | parity);

    // send messageHandler
    for(i=0; i<POINTER_SIZE; i++)
    1d6a:	02 30       	cpi	r16, 0x02	; 2
    1d6c:	11 05       	cpc	r17, r1
    1d6e:	11 f7       	brne	.-60     	; 0x1d34 <sendToBuffer+0x3e>
    1d70:	01 e1       	ldi	r16, 0x11	; 17
            push(val^ESCAPE_CHAR, &(port[p].tx));
        }
        // send regular
        else 
        {
            push(val, &(port[p].tx));
    1d72:	e8 e5       	ldi	r30, 0x58	; 88
    1d74:	be 9e       	mul	r11, r30
    1d76:	e0 01       	movw	r28, r0
    1d78:	11 24       	eor	r1, r1
    1d7a:	c6 55       	subi	r28, 0x56	; 86
    1d7c:	d3 4d       	sbci	r29, 0xD3	; 211
        // escape it
        if( isSpecial(val) ) 
        {
            push(ESCAPE, &(port[p].tx));

            push(val^ESCAPE_CHAR, &(port[p].tx));
    1d7e:	50 e2       	ldi	r21, 0x20	; 32
    1d80:	95 2e       	mov	r9, r21
    }
    
    // send data
    for(i=0; i<DATA_SIZE; i++)
    {
        val = c->data[i];
    1d82:	f7 01       	movw	r30, r14
    1d84:	11 91       	ld	r17, Z+
    1d86:	7f 01       	movw	r14, r30
        checksum = crcCalc(checksum, val);
    1d88:	61 2f       	mov	r22, r17
    1d8a:	8d 2d       	mov	r24, r13
    1d8c:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <crcCalc>
    1d90:	d8 2e       	mov	r13, r24
        
        // escape it
        if( isSpecial(val) ) 
    1d92:	81 2f       	mov	r24, r17
    1d94:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <isSpecial>
    1d98:	a8 2e       	mov	r10, r24
        {
            push(ESCAPE, &(port[p].tx));
    1d9a:	be 01       	movw	r22, r28
    {
        val = c->data[i];
        checksum = crcCalc(checksum, val);
        
        // escape it
        if( isSpecial(val) ) 
    1d9c:	88 23       	and	r24, r24
    1d9e:	39 f0       	breq	.+14     	; 0x1dae <sendToBuffer+0xb8>
        {
            push(ESCAPE, &(port[p].tx));
    1da0:	8d e7       	ldi	r24, 0x7D	; 125
    1da2:	0e 94 96 01 	call	0x32c	; 0x32c <push>

            push(val^ESCAPE_CHAR, &(port[p].tx));
    1da6:	be 01       	movw	r22, r28
    1da8:	81 2f       	mov	r24, r17
    1daa:	89 25       	eor	r24, r9
    1dac:	01 c0       	rjmp	.+2      	; 0x1db0 <sendToBuffer+0xba>
        }
        // send regular
        else 
        {
            push(val, &(port[p].tx));
    1dae:	81 2f       	mov	r24, r17
    1db0:	0e 94 96 01 	call	0x32c	; 0x32c <push>
    1db4:	01 50       	subi	r16, 0x01	; 1
            push(val, &(port[p].tx));
        }
    }
    
    // send data
    for(i=0; i<DATA_SIZE; i++)
    1db6:	29 f7       	brne	.-54     	; 0x1d82 <sendToBuffer+0x8c>
    1db8:	2b 2d       	mov	r18, r11
    1dba:	30 e0       	ldi	r19, 0x00	; 0

    // send checksum
	// escape it
    if( isSpecial(val) ) 
    {
        push(ESCAPE, &(port[p].tx));
    1dbc:	88 e5       	ldi	r24, 0x58	; 88
        }
    }

    // send checksum
	// escape it
    if( isSpecial(val) ) 
    1dbe:	aa 20       	and	r10, r10
    1dc0:	79 f0       	breq	.+30     	; 0x1de0 <sendToBuffer+0xea>
    {
        push(ESCAPE, &(port[p].tx));
    1dc2:	82 9f       	mul	r24, r18
    1dc4:	e0 01       	movw	r28, r0
    1dc6:	83 9f       	mul	r24, r19
    1dc8:	d0 0d       	add	r29, r0
    1dca:	11 24       	eor	r1, r1
    1dcc:	c6 55       	subi	r28, 0x56	; 86
    1dce:	d3 4d       	sbci	r29, 0xD3	; 211
    1dd0:	be 01       	movw	r22, r28
    1dd2:	8d e7       	ldi	r24, 0x7D	; 125
    1dd4:	0e 94 96 01 	call	0x32c	; 0x32c <push>
        push(checksum^ESCAPE_CHAR, &(port[p].tx));
    1dd8:	be 01       	movw	r22, r28
    1dda:	80 e2       	ldi	r24, 0x20	; 32
    1ddc:	8d 25       	eor	r24, r13
    1dde:	08 c0       	rjmp	.+16     	; 0x1df0 <sendToBuffer+0xfa>
    }
    // send regular
    else 
    {
        push(checksum, &(port[p].tx));
    1de0:	82 9f       	mul	r24, r18
    1de2:	b0 01       	movw	r22, r0
    1de4:	83 9f       	mul	r24, r19
    1de6:	70 0d       	add	r23, r0
    1de8:	11 24       	eor	r1, r1
    1dea:	66 55       	subi	r22, 0x56	; 86
    1dec:	73 4d       	sbci	r23, 0xD3	; 211
    1dee:	8d 2d       	mov	r24, r13
    1df0:	0e 94 96 01 	call	0x32c	; 0x32c <push>
    }
    
    // start the interrupt by sending a byte (FD)
    pPutChar(delim, port[p].pnum);
    1df4:	88 e5       	ldi	r24, 0x58	; 88
    1df6:	b8 9e       	mul	r11, r24
    1df8:	f0 01       	movw	r30, r0
    1dfa:	11 24       	eor	r1, r1
    1dfc:	ee 58       	subi	r30, 0x8E	; 142
    1dfe:	f3 4d       	sbci	r31, 0xD3	; 211
    1e00:	60 81       	ld	r22, Z
    1e02:	8c 2d       	mov	r24, r12
}
    1e04:	df 91       	pop	r29
    1e06:	cf 91       	pop	r28
    1e08:	1f 91       	pop	r17
    1e0a:	0f 91       	pop	r16
    1e0c:	ff 90       	pop	r15
    1e0e:	ef 90       	pop	r14
    1e10:	df 90       	pop	r13
    1e12:	cf 90       	pop	r12
    1e14:	bf 90       	pop	r11
    1e16:	af 90       	pop	r10
    1e18:	9f 90       	pop	r9
    {
        push(checksum, &(port[p].tx));
    }
    
    // start the interrupt by sending a byte (FD)
    pPutChar(delim, port[p].pnum);
    1e1a:	0c 94 b3 11 	jmp	0x2366	; 0x2366 <pPutChar>
}
    1e1e:	df 91       	pop	r29
    1e20:	cf 91       	pop	r28
    1e22:	1f 91       	pop	r17
    1e24:	0f 91       	pop	r16
    1e26:	ff 90       	pop	r15
    1e28:	ef 90       	pop	r14
    1e2a:	df 90       	pop	r13
    1e2c:	cf 90       	pop	r12
    1e2e:	bf 90       	pop	r11
    1e30:	af 90       	pop	r10
    1e32:	9f 90       	pop	r9
    1e34:	08 95       	ret

00001e36 <processBuffer>:


// pulls bytes from the buffer and puts them into Chunks
// also handles ACKs appropriately
void processBuffer(PRef p)
{
    1e36:	2f 92       	push	r2
    1e38:	3f 92       	push	r3
    1e3a:	4f 92       	push	r4
    1e3c:	5f 92       	push	r5
    1e3e:	6f 92       	push	r6
    1e40:	7f 92       	push	r7
    1e42:	8f 92       	push	r8
    1e44:	9f 92       	push	r9
    1e46:	af 92       	push	r10
    1e48:	bf 92       	push	r11
    1e4a:	cf 92       	push	r12
    1e4c:	df 92       	push	r13
    1e4e:	ef 92       	push	r14
    1e50:	ff 92       	push	r15
    1e52:	0f 93       	push	r16
    1e54:	1f 93       	push	r17
    1e56:	cf 93       	push	r28
    1e58:	df 93       	push	r29
    1e5a:	38 2e       	mov	r3, r24
    byte   currByte;
    Chunk* currChunk = NULL;
    byte   wasEscape = wasEscapeStore[p];
    1e5c:	e8 2e       	mov	r14, r24
    1e5e:	f1 2c       	mov	r15, r1
    1e60:	f7 01       	movw	r30, r14
    1e62:	e5 56       	subi	r30, 0x65	; 101
    1e64:	f1 4d       	sbci	r31, 0xD1	; 209
    1e66:	20 80       	ld	r2, Z


    // nothing to process
    if( isEmpty(&(port[p].rx)) )
    1e68:	88 e5       	ldi	r24, 0x58	; 88
    1e6a:	8e 9d       	mul	r24, r14
    1e6c:	e0 01       	movw	r28, r0
    1e6e:	8f 9d       	mul	r24, r15
    1e70:	d0 0d       	add	r29, r0
    1e72:	11 24       	eor	r1, r1
    1e74:	fa e8       	ldi	r31, 0x8A	; 138
    1e76:	6f 2e       	mov	r6, r31
    1e78:	fc e2       	ldi	r31, 0x2C	; 44
    1e7a:	7f 2e       	mov	r7, r31
    1e7c:	6c 0e       	add	r6, r28
    1e7e:	7d 1e       	adc	r7, r29
    1e80:	c3 01       	movw	r24, r6
    1e82:	0e 94 cc 01 	call	0x398	; 0x398 <isEmpty>
    1e86:	81 11       	cpse	r24, r1
    1e88:	d1 c0       	rjmp	.+418    	; 0x202c <processBuffer+0x1f6>
    {
        return;
    }

    // continue filling unfinished Chunk
    if( (port[p].rq.curr != NULL) && chunkFilling(port[p].rq.curr) ) 
    1e8a:	fe 01       	movw	r30, r28
    1e8c:	ee 58       	subi	r30, 0x8E	; 142
    1e8e:	f3 4d       	sbci	r31, 0xD3	; 211
    1e90:	46 88       	ldd	r4, Z+22	; 0x16
    1e92:	57 88       	ldd	r5, Z+23	; 0x17
    1e94:	41 14       	cp	r4, r1
    1e96:	51 04       	cpc	r5, r1
    1e98:	21 f0       	breq	.+8      	; 0x1ea2 <processBuffer+0x6c>
    1e9a:	f2 01       	movw	r30, r4
    1e9c:	81 89       	ldd	r24, Z+17	; 0x11
    1e9e:	86 fd       	sbrc	r24, 6
    1ea0:	a4 c0       	rjmp	.+328    	; 0x1fea <processBuffer+0x1b4>
    {
        currChunk = port[p].rq.curr;
    }
    else
    {
        port[p].rq.index    = 0;
    1ea2:	88 e5       	ldi	r24, 0x58	; 88
    1ea4:	8e 9d       	mul	r24, r14
    1ea6:	f0 01       	movw	r30, r0
    1ea8:	8f 9d       	mul	r24, r15
    1eaa:	f0 0d       	add	r31, r0
    1eac:	11 24       	eor	r1, r1
    1eae:	ee 58       	subi	r30, 0x8E	; 142
    1eb0:	f3 4d       	sbci	r31, 0xD3	; 211
    1eb2:	13 8a       	std	Z+19, r1	; 0x13
        port[p].rq.checksum = 0;
    1eb4:	14 8a       	std	Z+20, r1	; 0x14
        wasEscape           = 0;
    1eb6:	21 2c       	mov	r2, r1
// pulls bytes from the buffer and puts them into Chunks
// also handles ACKs appropriately
void processBuffer(PRef p)
{
    byte   currByte;
    Chunk* currChunk = NULL;
    1eb8:	41 2c       	mov	r4, r1
    1eba:	51 2c       	mov	r5, r1
    1ebc:	96 c0       	rjmp	.+300    	; 0x1fea <processBuffer+0x1b4>
        wasEscape           = 0;
    }
                
    while( !isEmpty(&(port[p].rx)) )
    {
        currByte = (byte)pop(&(port[p].rx));
    1ebe:	c3 01       	movw	r24, r6
    1ec0:	0e 94 b1 01 	call	0x362	; 0x362 <pop>
        
        // is ACK
        if( (currByte & ACK_MASK) == ACK )
    1ec4:	bc 01       	movw	r22, r24
    1ec6:	6e 7f       	andi	r22, 0xFE	; 254
    1ec8:	77 27       	eor	r23, r23
    1eca:	68 30       	cpi	r22, 0x08	; 8
    1ecc:	71 05       	cpc	r23, r1
    1ece:	91 f4       	brne	.+36     	; 0x1ef4 <processBuffer+0xbe>
        {
            // set ack parity
            port[p].rq.flags |= (1 << (currByte & 0x01));
    1ed0:	81 70       	andi	r24, 0x01	; 1
    1ed2:	99 27       	eor	r25, r25
    1ed4:	21 e0       	ldi	r18, 0x01	; 1
    1ed6:	30 e0       	ldi	r19, 0x00	; 0
    1ed8:	02 c0       	rjmp	.+4      	; 0x1ede <processBuffer+0xa8>
    1eda:	22 0f       	add	r18, r18
    1edc:	33 1f       	adc	r19, r19
    1ede:	8a 95       	dec	r24
    1ee0:	e2 f7       	brpl	.-8      	; 0x1eda <processBuffer+0xa4>
    1ee2:	c9 01       	movw	r24, r18
    1ee4:	f8 01       	movw	r30, r16
    1ee6:	90 81       	ld	r25, Z
    1ee8:	98 2b       	or	r25, r24
    1eea:	90 83       	st	Z, r25
        
            ackHandler(p);
    1eec:	83 2d       	mov	r24, r3
    1eee:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <ackHandler>
            continue;
    1ef2:	92 c0       	rjmp	.+292    	; 0x2018 <processBuffer+0x1e2>
	        nackHandler(p);
	        continue;
	        }*/
        
        // is FRAME_DELIMETER
        if( (currByte & FD_MASK) == FD )
    1ef4:	62 31       	cpi	r22, 0x12	; 18
    1ef6:	71 05       	cpc	r23, r1
    1ef8:	01 f5       	brne	.+64     	; 0x1f3a <processBuffer+0x104>
        {
            // determine parity
            byte parity = setParityFromByte(currByte);
    1efa:	81 70       	andi	r24, 0x01	; 1
    1efc:	99 27       	eor	r25, r25
    1efe:	28 2e       	mov	r2, r24
    1f00:	22 94       	swap	r2
    1f02:	22 0c       	add	r2, r2
    1f04:	e0 ee       	ldi	r30, 0xE0	; 224
    1f06:	2e 22       	and	r2, r30
        
            // restart the fill
            port[p].rq.index    = 0;
    1f08:	f6 01       	movw	r30, r12
    1f0a:	10 82       	st	Z, r1
            port[p].rq.checksum = 0;
    1f0c:	f5 01       	movw	r30, r10
    1f0e:	10 82       	st	Z, r1
            wasEscape           = 0;
                
            // unfinished Chunk
            if(port[p].rq.curr != NULL)
    1f10:	f4 01       	movw	r30, r8
    1f12:	40 80       	ld	r4, Z
    1f14:	51 80       	ldd	r5, Z+1	; 0x01
    1f16:	41 14       	cp	r4, r1
    1f18:	51 04       	cpc	r5, r1
    1f1a:	49 f4       	brne	.+18     	; 0x1f2e <processBuffer+0xf8>
                currChunk = port[p].rq.curr;
            }
            // need new Chunk
            else
            {
                currChunk = getSystemRXChunk();
    1f1c:	0e 94 30 07 	call	0xe60	; 0xe60 <getSystemRXChunk>
    1f20:	2c 01       	movw	r4, r24
                
                // out of memory, can't fill
                if( currChunk == NULL )
    1f22:	00 97       	sbiw	r24, 0x00	; 0
    1f24:	09 f4       	brne	.+2      	; 0x1f28 <processBuffer+0xf2>
    1f26:	5c c0       	rjmp	.+184    	; 0x1fe0 <processBuffer+0x1aa>
                    // discard bytes, hopefully will get resent
                    continue;
                }
                
                // add to the queue
                port[p].rq.curr = currChunk;
    1f28:	f4 01       	movw	r30, r8
    1f2a:	80 83       	st	Z, r24
    1f2c:	91 83       	std	Z+1, r25	; 0x01
            }
            
            // reset the status of the Chunk, just in case
            currChunk->status = CHUNK_USED | CHUNK_FILLING | parity | port[p].pnum;
    1f2e:	98 81       	ld	r25, Y
    1f30:	90 6c       	ori	r25, 0xC0	; 192
    1f32:	92 29       	or	r25, r2
    1f34:	f2 01       	movw	r30, r4
    1f36:	91 8b       	std	Z+17, r25	; 0x11
    1f38:	53 c0       	rjmp	.+166    	; 0x1fe0 <processBuffer+0x1aa>
            
            continue;
        }
        
        // no use processing if can't put anywhere
        if(currChunk == NULL)
    1f3a:	41 14       	cp	r4, r1
    1f3c:	51 04       	cpc	r5, r1
    1f3e:	09 f4       	brne	.+2      	; 0x1f42 <processBuffer+0x10c>
    1f40:	6b c0       	rjmp	.+214    	; 0x2018 <processBuffer+0x1e2>
        wasEscape           = 0;
    }
                
    while( !isEmpty(&(port[p].rx)) )
    {
        currByte = (byte)pop(&(port[p].rx));
    1f42:	68 2f       	mov	r22, r24
        {
            continue;
        }
        
        // is an escape char        
        if( currByte == ESCAPE )
    1f44:	8d 37       	cpi	r24, 0x7D	; 125
    1f46:	09 f4       	brne	.+2      	; 0x1f4a <processBuffer+0x114>
    1f48:	4d c0       	rjmp	.+154    	; 0x1fe4 <processBuffer+0x1ae>
            continue;
        }

        // is a regular character
        // was escaped
        if( wasEscape )
    1f4a:	22 20       	and	r2, r2
    1f4c:	19 f0       	breq	.+6      	; 0x1f54 <processBuffer+0x11e>
        {
            currByte ^= ESCAPE_CHAR;
    1f4e:	f0 e2       	ldi	r31, 0x20	; 32
    1f50:	8f 27       	eor	r24, r31
    1f52:	68 2f       	mov	r22, r24
            wasEscape = 0;
        }

        // is transmitted checksum
        if( port[p].rq.index >= (DATA_SIZE + POINTER_SIZE) )
    1f54:	f6 01       	movw	r30, r12
    1f56:	80 81       	ld	r24, Z
    1f58:	83 31       	cpi	r24, 0x13	; 19
    1f5a:	70 f1       	brcs	.+92     	; 0x1fb8 <processBuffer+0x182>
        {
            // checksum matches!
            if( currByte == port[p].rq.checksum )
    1f5c:	f5 01       	movw	r30, r10
    1f5e:	80 81       	ld	r24, Z
    1f60:	68 13       	cpse	r22, r24
    1f62:	22 c0       	rjmp	.+68     	; 0x1fa8 <processBuffer+0x172>
            {
                currChunk->status &= ~CHUNK_FILLING;
    1f64:	f2 01       	movw	r30, r4
    1f66:	81 89       	ldd	r24, Z+17	; 0x11
    1f68:	8f 7b       	andi	r24, 0xBF	; 191
    1f6a:	81 8b       	std	Z+17, r24	; 0x11
                port[p].rq.flags  |=  CHUNK_READY;
    1f6c:	f8 01       	movw	r30, r16
    1f6e:	80 81       	ld	r24, Z
    1f70:	80 68       	ori	r24, 0x80	; 128
    1f72:	80 83       	st	Z, r24
				
                // check for parity error
                byte parity = chunkParity(currChunk);
    1f74:	f2 01       	movw	r30, r4
    1f76:	91 89       	ldd	r25, Z+17	; 0x11
    1f78:	95 fb       	bst	r25, 5
    1f7a:	99 27       	eor	r25, r25
    1f7c:	90 f9       	bld	r25, 0
                byte last   = parityLastChunk(port[p].rq);
    1f7e:	86 fb       	bst	r24, 6
    1f80:	88 27       	eor	r24, r24
    1f82:	80 f9       	bld	r24, 0
	      
                // not a duplicate packet		
                if(parity != last) {
    1f84:	98 17       	cp	r25, r24
    1f86:	51 f0       	breq	.+20     	; 0x1f9c <processBuffer+0x166>
                    // update neighborhood (fix for race condition)
                    //updateNeighbor(p, PRESENT);
		
                    // add to global receive queue
                    addToGlobalRq(currChunk);
    1f88:	c2 01       	movw	r24, r4
    1f8a:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <addToGlobalRq>
		
                    // flip the parity
                    flipParityLast(port[p].rq);
    1f8e:	f8 01       	movw	r30, r16
    1f90:	80 81       	ld	r24, Z
    1f92:	f0 e4       	ldi	r31, 0x40	; 64
    1f94:	8f 27       	eor	r24, r31
    1f96:	f8 01       	movw	r30, r16
    1f98:	80 83       	st	Z, r24
    1f9a:	03 c0       	rjmp	.+6      	; 0x1fa2 <processBuffer+0x16c>
                }
                // free the chunk
                else 
                {
                    freeChunk(currChunk);
    1f9c:	c2 01       	movw	r24, r4
    1f9e:	0e 94 04 07 	call	0xe08	; 0xe08 <freeChunk>
                }
              
                // remove from the port rq
                port[p].rq.curr = NULL;
    1fa2:	f4 01       	movw	r30, r8
    1fa4:	10 82       	st	Z, r1
    1fa6:	11 82       	std	Z+1, r1	; 0x01
            }
            
            // reset the data
            port[p].rq.index    = 0;
    1fa8:	f6 01       	movw	r30, r12
    1faa:	10 82       	st	Z, r1
            port[p].rq.checksum = 0;
    1fac:	f5 01       	movw	r30, r10
    1fae:	10 82       	st	Z, r1
            wasEscape           = 0;
    1fb0:	21 2c       	mov	r2, r1
            currChunk           = NULL;
    1fb2:	41 2c       	mov	r4, r1
    1fb4:	51 2c       	mov	r5, r1
	    
            /// TODO: send NACK
            continue;
    1fb6:	30 c0       	rjmp	.+96     	; 0x2018 <processBuffer+0x1e2>
    1fb8:	e8 2f       	mov	r30, r24
    1fba:	f0 e0       	ldi	r31, 0x00	; 0
        }
		
        // message handler
        if( port[p].rq.index < POINTER_SIZE )
        {
            currChunk->handler[port[p].rq.index] = currByte;
    1fbc:	e4 0d       	add	r30, r4
    1fbe:	f5 1d       	adc	r31, r5
            /// TODO: send NACK
            continue;
        }
		
        // message handler
        if( port[p].rq.index < POINTER_SIZE )
    1fc0:	82 30       	cpi	r24, 0x02	; 2
    1fc2:	10 f4       	brcc	.+4      	; 0x1fc8 <processBuffer+0x192>
        {
            currChunk->handler[port[p].rq.index] = currByte;
    1fc4:	64 8b       	std	Z+20, r22	; 0x14
    1fc6:	02 c0       	rjmp	.+4      	; 0x1fcc <processBuffer+0x196>
        }
        // regular byte
        else
        {
            currChunk->data[port[p].rq.index-POINTER_SIZE] = currByte;
    1fc8:	32 97       	sbiw	r30, 0x02	; 2
    1fca:	60 83       	st	Z, r22
        }

        port[p].rq.checksum = crcCalc(port[p].rq.checksum, currByte);
    1fcc:	f5 01       	movw	r30, r10
    1fce:	80 81       	ld	r24, Z
    1fd0:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <crcCalc>
    1fd4:	f5 01       	movw	r30, r10
    1fd6:	80 83       	st	Z, r24
        port[p].rq.index++;
    1fd8:	f6 01       	movw	r30, r12
    1fda:	80 81       	ld	r24, Z
    1fdc:	8f 5f       	subi	r24, 0xFF	; 255
    1fde:	80 83       	st	Z, r24
            byte parity = setParityFromByte(currByte);
        
            // restart the fill
            port[p].rq.index    = 0;
            port[p].rq.checksum = 0;
            wasEscape           = 0;
    1fe0:	21 2c       	mov	r2, r1
    1fe2:	1a c0       	rjmp	.+52     	; 0x2018 <processBuffer+0x1e2>
        }
        
        // is an escape char        
        if( currByte == ESCAPE )
        {
            wasEscape = 1;   
    1fe4:	22 24       	eor	r2, r2
    1fe6:	23 94       	inc	r2
    1fe8:	17 c0       	rjmp	.+46     	; 0x2018 <processBuffer+0x1e2>
            currByte ^= ESCAPE_CHAR;
            wasEscape = 0;
        }

        // is transmitted checksum
        if( port[p].rq.index >= (DATA_SIZE + POINTER_SIZE) )
    1fea:	88 e5       	ldi	r24, 0x58	; 88
    1fec:	8e 9d       	mul	r24, r14
    1fee:	e0 01       	movw	r28, r0
    1ff0:	8f 9d       	mul	r24, r15
    1ff2:	d0 0d       	add	r29, r0
    1ff4:	11 24       	eor	r1, r1
    1ff6:	ce 58       	subi	r28, 0x8E	; 142
    1ff8:	d3 4d       	sbci	r29, 0xD3	; 211
    1ffa:	6e 01       	movw	r12, r28
    1ffc:	f3 e1       	ldi	r31, 0x13	; 19
    1ffe:	cf 0e       	add	r12, r31
    2000:	d1 1c       	adc	r13, r1
        else
        {
            currChunk->data[port[p].rq.index-POINTER_SIZE] = currByte;
        }

        port[p].rq.checksum = crcCalc(port[p].rq.checksum, currByte);
    2002:	5e 01       	movw	r10, r28
    2004:	24 e1       	ldi	r18, 0x14	; 20
    2006:	a2 0e       	add	r10, r18
    2008:	b1 1c       	adc	r11, r1
        {
            // checksum matches!
            if( currByte == port[p].rq.checksum )
            {
                currChunk->status &= ~CHUNK_FILLING;
                port[p].rq.flags  |=  CHUNK_READY;
    200a:	8e 01       	movw	r16, r28
    200c:	0b 5e       	subi	r16, 0xEB	; 235
    200e:	1f 4f       	sbci	r17, 0xFF	; 255
                {
                    freeChunk(currChunk);
                }
              
                // remove from the port rq
                port[p].rq.curr = NULL;
    2010:	4e 01       	movw	r8, r28
    2012:	36 e1       	ldi	r19, 0x16	; 22
    2014:	83 0e       	add	r8, r19
    2016:	91 1c       	adc	r9, r1
        port[p].rq.index    = 0;
        port[p].rq.checksum = 0;
        wasEscape           = 0;
    }
                
    while( !isEmpty(&(port[p].rx)) )
    2018:	c3 01       	movw	r24, r6
    201a:	0e 94 cc 01 	call	0x398	; 0x398 <isEmpty>
    201e:	88 23       	and	r24, r24
    2020:	09 f4       	brne	.+2      	; 0x2024 <processBuffer+0x1ee>
    2022:	4d cf       	rjmp	.-358    	; 0x1ebe <processBuffer+0x88>
        port[p].rq.checksum = crcCalc(port[p].rq.checksum, currByte);
        port[p].rq.index++;
    }
    
    // store wasEscape
    wasEscapeStore[p] = wasEscape;
    2024:	f7 01       	movw	r30, r14
    2026:	e5 56       	subi	r30, 0x65	; 101
    2028:	f1 4d       	sbci	r31, 0xD1	; 209
    202a:	20 82       	st	Z, r2
}
    202c:	df 91       	pop	r29
    202e:	cf 91       	pop	r28
    2030:	1f 91       	pop	r17
    2032:	0f 91       	pop	r16
    2034:	ff 90       	pop	r15
    2036:	ef 90       	pop	r14
    2038:	df 90       	pop	r13
    203a:	cf 90       	pop	r12
    203c:	bf 90       	pop	r11
    203e:	af 90       	pop	r10
    2040:	9f 90       	pop	r9
    2042:	8f 90       	pop	r8
    2044:	7f 90       	pop	r7
    2046:	6f 90       	pop	r6
    2048:	5f 90       	pop	r5
    204a:	4f 90       	pop	r4
    204c:	3f 90       	pop	r3
    204e:	2f 90       	pop	r2
    2050:	08 95       	ret

00002052 <nextPacket>:
Chunk* nextPacket(void)
{
    Chunk* c = NULL;

    // no packets
    if( globalRq.head == NULL )
    2052:	e0 91 68 29 	lds	r30, 0x2968
    2056:	f0 91 69 29 	lds	r31, 0x2969
    205a:	30 97       	sbiw	r30, 0x00	; 0
    205c:	51 f4       	brne	.+20     	; 0x2072 <nextPacket+0x20>
    {
        globalRq.tail = NULL;
    205e:	10 92 6a 29 	sts	0x296A, r1
    2062:	10 92 6b 29 	sts	0x296B, r1
        globalRq.flags &= ~PACKET_READY;
    2066:	80 91 6c 29 	lds	r24, 0x296C
    206a:	8f 77       	andi	r24, 0x7F	; 127
    206c:	80 93 6c 29 	sts	0x296C, r24
        return NULL;
    2070:	13 c0       	rjmp	.+38     	; 0x2098 <nextPacket+0x46>
    }

    // update pointers
    c = globalRq.head;
    
    globalRq.head = c->next;
    2072:	82 89       	ldd	r24, Z+18	; 0x12
    2074:	93 89       	ldd	r25, Z+19	; 0x13
    2076:	80 93 68 29 	sts	0x2968, r24
    207a:	90 93 69 29 	sts	0x2969, r25
    if( globalRq.head == NULL )
    207e:	89 2b       	or	r24, r25
    2080:	49 f4       	brne	.+18     	; 0x2094 <nextPacket+0x42>
    {
        globalRq.flags &= ~PACKET_READY;
    2082:	80 91 6c 29 	lds	r24, 0x296C
    2086:	8f 77       	andi	r24, 0x7F	; 127
    2088:	80 93 6c 29 	sts	0x296C, r24
        globalRq.tail = NULL;
    208c:	10 92 6a 29 	sts	0x296A, r1
    2090:	10 92 6b 29 	sts	0x296B, r1
    }
    
    // isolate and return
    c->next = NULL;
    2094:	12 8a       	std	Z+18, r1	; 0x12
    2096:	13 8a       	std	Z+19, r1	; 0x13
    return c;
}
    2098:	cf 01       	movw	r24, r30
    209a:	08 95       	ret

0000209c <sendOnSerial>:

// try sending stuff if available and ready
void sendOnSerial(PRef p)
{
    209c:	df 92       	push	r13
    209e:	ef 92       	push	r14
    20a0:	ff 92       	push	r15
    20a2:	0f 93       	push	r16
    20a4:	1f 93       	push	r17
    20a6:	cf 93       	push	r28
    20a8:	df 93       	push	r29
    20aa:	d8 2e       	mov	r13, r24
    // send acks
    if( shouldSendOddAck(port[p].sq) )
    20ac:	e8 2e       	mov	r14, r24
    20ae:	f1 2c       	mov	r15, r1
    20b0:	88 e5       	ldi	r24, 0x58	; 88
    20b2:	d8 9e       	mul	r13, r24
    20b4:	80 01       	movw	r16, r0
    20b6:	11 24       	eor	r1, r1
    20b8:	e8 01       	movw	r28, r16
    20ba:	ce 58       	subi	r28, 0x8E	; 142
    20bc:	d3 4d       	sbci	r29, 0xD3	; 211
    20be:	8e 85       	ldd	r24, Y+14	; 0x0e
    20c0:	81 ff       	sbrs	r24, 1
    20c2:	10 c0       	rjmp	.+32     	; 0x20e4 <sendOnSerial+0x48>
    {
        if( isEmpty(&(port[p].tx)) ) {
    20c4:	06 55       	subi	r16, 0x56	; 86
    20c6:	13 4d       	sbci	r17, 0xD3	; 211
    20c8:	c8 01       	movw	r24, r16
    20ca:	0e 94 cc 01 	call	0x398	; 0x398 <isEmpty>
    20ce:	88 23       	and	r24, r24
    20d0:	29 f0       	breq	.+10     	; 0x20dc <sendOnSerial+0x40>
            pPutChar(ACK | ODD, port[p].pnum);
    20d2:	68 81       	ld	r22, Y
    20d4:	89 e0       	ldi	r24, 0x09	; 9
    20d6:	0e 94 b3 11 	call	0x2366	; 0x2366 <pPutChar>
    20da:	04 c0       	rjmp	.+8      	; 0x20e4 <sendOnSerial+0x48>
        }
        else {
            push(ACK | ODD, &(port[p].tx));
    20dc:	b8 01       	movw	r22, r16
    20de:	89 e0       	ldi	r24, 0x09	; 9
    20e0:	0e 94 96 01 	call	0x32c	; 0x32c <push>
        }
    }
    if( shouldSendEvenAck(port[p].sq) )
    20e4:	88 e5       	ldi	r24, 0x58	; 88
    20e6:	8e 9d       	mul	r24, r14
    20e8:	e0 01       	movw	r28, r0
    20ea:	8f 9d       	mul	r24, r15
    20ec:	d0 0d       	add	r29, r0
    20ee:	11 24       	eor	r1, r1
    20f0:	8e 01       	movw	r16, r28
    20f2:	0e 58       	subi	r16, 0x8E	; 142
    20f4:	13 4d       	sbci	r17, 0xD3	; 211
    20f6:	f8 01       	movw	r30, r16
    20f8:	86 85       	ldd	r24, Z+14	; 0x0e
    20fa:	80 ff       	sbrs	r24, 0
    20fc:	11 c0       	rjmp	.+34     	; 0x2120 <sendOnSerial+0x84>
    {
        if( isEmpty(&(port[p].tx)) ) {
    20fe:	c6 55       	subi	r28, 0x56	; 86
    2100:	d3 4d       	sbci	r29, 0xD3	; 211
    2102:	ce 01       	movw	r24, r28
    2104:	0e 94 cc 01 	call	0x398	; 0x398 <isEmpty>
    2108:	88 23       	and	r24, r24
    210a:	31 f0       	breq	.+12     	; 0x2118 <sendOnSerial+0x7c>
            pPutChar(ACK | EVEN, port[p].pnum);
    210c:	f8 01       	movw	r30, r16
    210e:	60 81       	ld	r22, Z
    2110:	88 e0       	ldi	r24, 0x08	; 8
    2112:	0e 94 b3 11 	call	0x2366	; 0x2366 <pPutChar>
    2116:	04 c0       	rjmp	.+8      	; 0x2120 <sendOnSerial+0x84>
        }
        else {
            push(ACK | EVEN, &(port[p].tx));
    2118:	be 01       	movw	r22, r28
    211a:	88 e0       	ldi	r24, 0x08	; 8
    211c:	0e 94 96 01 	call	0x32c	; 0x32c <push>
        }
    }
    clearSendAcks(port[p].sq);
    2120:	88 e5       	ldi	r24, 0x58	; 88
    2122:	8e 9d       	mul	r24, r14
    2124:	80 01       	movw	r16, r0
    2126:	8f 9d       	mul	r24, r15
    2128:	10 0d       	add	r17, r0
    212a:	11 24       	eor	r1, r1
    212c:	e8 01       	movw	r28, r16
    212e:	ce 58       	subi	r28, 0x8E	; 142
    2130:	d3 4d       	sbci	r29, 0xD3	; 211
    2132:	4e 85       	ldd	r20, Y+14	; 0x0e
    2134:	4c 7f       	andi	r20, 0xFC	; 252
    2136:	4e 87       	std	Y+14, r20	; 0x0e
    
    // send Chunk?
    if( chunkReady(port[p].sq) )
    2138:	47 ff       	sbrs	r20, 7
    213a:	37 c0       	rjmp	.+110    	; 0x21aa <sendOnSerial+0x10e>
    {
        if( clearToSend(port[p].sq) )
    213c:	46 ff       	sbrs	r20, 6
    213e:	35 c0       	rjmp	.+106    	; 0x21aa <sendOnSerial+0x10e>
        {
            // out of retries
            if( (port[p].sq.retry <= 0) || (port[p].sq.retry > NUM_RETRIES))
    2140:	8d 85       	ldd	r24, Y+13	; 0x0d
    2142:	81 50       	subi	r24, 0x01	; 1
    2144:	84 30       	cpi	r24, 0x04	; 4
    2146:	78 f0       	brcs	.+30     	; 0x2166 <sendOnSerial+0xca>
            {
                // reset the timer
                deregisterTimeout(&(port[p].sq.qtout.tout));
    2148:	c8 01       	movw	r24, r16
    214a:	8d 58       	subi	r24, 0x8D	; 141
    214c:	93 4d       	sbci	r25, 0xD3	; 211
    214e:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <deregisterTimeout>

                // flush the queue
                flushSendQueue(p);
    2152:	8d 2d       	mov	r24, r13
    2154:	0e 94 2a 02 	call	0x454	; 0x454 <flushSendQueue>
                        
                // reset the flags
                port[p].sq.retry    = NUM_RETRIES;
    2158:	94 e0       	ldi	r25, 0x04	; 4
    215a:	9d 87       	std	Y+13, r25	; 0x0d
                port[p].sq.flags   |= CLEAR_TO_SEND;
    215c:	8e 85       	ldd	r24, Y+14	; 0x0e
    215e:	80 64       	ori	r24, 0x40	; 64
                flipParity(port[p].sq);
    2160:	89 27       	eor	r24, r25
    2162:	8e 87       	std	Y+14, r24	; 0x0e

                // ensemble level updates - remove neighbor, restart neighbor scanning
                //     These don't belong in data-link in my opinion
                //restartScan(p);

                return;
    2164:	22 c0       	rjmp	.+68     	; 0x21aa <sendOnSerial+0x10e>
            }
            port[p].sq.retry--;
    2166:	8d 87       	std	Y+13, r24	; 0x0d

            sendToBuffer(p, port[p].sq.head, sendParity(port[p].sq) );
    2168:	42 fb       	bst	r20, 2
    216a:	44 27       	eor	r20, r20
    216c:	40 f9       	bld	r20, 0
    216e:	6f 85       	ldd	r22, Y+15	; 0x0f
    2170:	78 89       	ldd	r23, Y+16	; 0x10
    2172:	8d 2d       	mov	r24, r13
    2174:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <sendToBuffer>
            port[p].sq.flags &= ~CLEAR_TO_SEND;
    2178:	8e 85       	ldd	r24, Y+14	; 0x0e
    217a:	8f 7b       	andi	r24, 0xBF	; 191
    217c:	8e 87       	std	Y+14, r24	; 0x0e
            
            // start the timeout
            port[p].sq.qtout.tout.calltime = getTime() + DEFAULT_TIMEOUT;
    217e:	0e 94 46 08 	call	0x108c	; 0x108c <getTime>
    2182:	6e 5c       	subi	r22, 0xCE	; 206
    2184:	7f 4f       	sbci	r23, 0xFF	; 255
    2186:	8f 4f       	sbci	r24, 0xFF	; 255
    2188:	9f 4f       	sbci	r25, 0xFF	; 255
    218a:	6b 83       	std	Y+3, r22	; 0x03
    218c:	7c 83       	std	Y+4, r23	; 0x04
    218e:	8d 83       	std	Y+5, r24	; 0x05
    2190:	9e 83       	std	Y+6, r25	; 0x06
            registerTimeout(&(port[p].sq.qtout.tout));
    2192:	c8 01       	movw	r24, r16
    2194:	8d 58       	subi	r24, 0x8D	; 141
    2196:	93 4d       	sbci	r25, 0xD3	; 211
        }
    }
}
    2198:	df 91       	pop	r29
    219a:	cf 91       	pop	r28
    219c:	1f 91       	pop	r17
    219e:	0f 91       	pop	r16
    21a0:	ff 90       	pop	r15
    21a2:	ef 90       	pop	r14
    21a4:	df 90       	pop	r13
            sendToBuffer(p, port[p].sq.head, sendParity(port[p].sq) );
            port[p].sq.flags &= ~CLEAR_TO_SEND;
            
            // start the timeout
            port[p].sq.qtout.tout.calltime = getTime() + DEFAULT_TIMEOUT;
            registerTimeout(&(port[p].sq.qtout.tout));
    21a6:	0c 94 91 08 	jmp	0x1122	; 0x1122 <registerTimeout>
        }
    }
}
    21aa:	df 91       	pop	r29
    21ac:	cf 91       	pop	r28
    21ae:	1f 91       	pop	r17
    21b0:	0f 91       	pop	r16
    21b2:	ff 90       	pop	r15
    21b4:	ef 90       	pop	r14
    21b6:	df 90       	pop	r13
    21b8:	08 95       	ret

000021ba <initHWDataLink>:

// initialize
void initHWDataLink(){
    21ba:	08 95       	ret

000021bc <setHWLED>:
	
	//r = 255 - r;
	//g = 255 - g;
	//b = 255 - b;

	currentRGB[0] = r;
    21bc:	80 93 29 2a 	sts	0x2A29, r24
	currentRGB[1] = g;
    21c0:	60 93 2a 2a 	sts	0x2A2A, r22
	currentRGB[2] = b;
    21c4:	40 93 2b 2a 	sts	0x2A2B, r20

	rr = (uint16_t)i*(uint16_t)r;
    21c8:	28 9f       	mul	r18, r24
    21ca:	c0 01       	movw	r24, r0
    21cc:	11 24       	eor	r1, r1
	gg = (uint16_t)i*(uint16_t)g;
    21ce:	26 9f       	mul	r18, r22
    21d0:	b0 01       	movw	r22, r0
    21d2:	11 24       	eor	r1, r1
	bb = (uint16_t)i*(uint16_t)b;
    21d4:	24 9f       	mul	r18, r20
    21d6:	a0 01       	movw	r20, r0
    21d8:	11 24       	eor	r1, r1
	
	rr = 0xFFFF - rr;
    21da:	80 95       	com	r24
    21dc:	90 95       	com	r25
	gg = 0xFFFF - gg;
    21de:	60 95       	com	r22
    21e0:	70 95       	com	r23
	bb = 0xFFFF - bb;
    21e2:	40 95       	com	r20
    21e4:	50 95       	com	r21
	
	TCC0.CCABUF = rr;
    21e6:	e0 e0       	ldi	r30, 0x00	; 0
    21e8:	f8 e0       	ldi	r31, 0x08	; 8
    21ea:	80 af       	std	Z+56, r24	; 0x38
    21ec:	91 af       	std	Z+57, r25	; 0x39
	TCC0.CCBBUF = rr;
    21ee:	82 af       	std	Z+58, r24	; 0x3a
    21f0:	93 af       	std	Z+59, r25	; 0x3b

	TCD0.CCABUF = gg;
    21f2:	e0 e0       	ldi	r30, 0x00	; 0
    21f4:	f9 e0       	ldi	r31, 0x09	; 9
    21f6:	60 af       	std	Z+56, r22	; 0x38
    21f8:	71 af       	std	Z+57, r23	; 0x39
	TCD0.CCBBUF = bb;
    21fa:	42 af       	std	Z+58, r20	; 0x3a
    21fc:	53 af       	std	Z+59, r21	; 0x3b
	
	TCC1.CCABUF = gg;
    21fe:	e0 e4       	ldi	r30, 0x40	; 64
    2200:	f8 e0       	ldi	r31, 0x08	; 8
    2202:	60 af       	std	Z+56, r22	; 0x38
    2204:	71 af       	std	Z+57, r23	; 0x39
	TCC1.CCBBUF = bb;
    2206:	42 af       	std	Z+58, r20	; 0x3a
    2208:	53 af       	std	Z+59, r21	; 0x3b
    220a:	08 95       	ret

0000220c <initHWLED>:


void initHWLED()
{
	// Initialize the RED
	TCC0.CTRLA |= TC_CLKSEL_DIV4_gc;	// RED clock source
    220c:	e0 e0       	ldi	r30, 0x00	; 0
    220e:	f8 e0       	ldi	r31, 0x08	; 8
    2210:	80 81       	ld	r24, Z
    2212:	83 60       	ori	r24, 0x03	; 3
    2214:	80 83       	st	Z, r24
	TCC0.CTRLB = TC0_CCAEN_bm | TC0_CCBEN_bm | TC_WGMODE_SS_gc;	// enable REDs, set WGM to SS PWM
    2216:	33 e3       	ldi	r19, 0x33	; 51
    2218:	31 83       	std	Z+1, r19	; 0x01
	TCC0.PERBUF = 0xFFFF;		// set period to 8-bit for 8-bit resolution
    221a:	8f ef       	ldi	r24, 0xFF	; 255
    221c:	9f ef       	ldi	r25, 0xFF	; 255
    221e:	86 ab       	std	Z+54, r24	; 0x36
    2220:	97 ab       	std	Z+55, r25	; 0x37
	TCC0.CCABUF = 0;		// set to off by default
    2222:	10 ae       	std	Z+56, r1	; 0x38
    2224:	11 ae       	std	Z+57, r1	; 0x39
	TCC0.CCBBUF = 0;		// set to off by default
    2226:	12 ae       	std	Z+58, r1	; 0x3a
    2228:	13 ae       	std	Z+59, r1	; 0x3b
	PORTC.DIRSET = PIN0_bm | PIN1_bm;  // set REDs to OUTPUT
    222a:	a0 e4       	ldi	r26, 0x40	; 64
    222c:	b6 e0       	ldi	r27, 0x06	; 6
    222e:	23 e0       	ldi	r18, 0x03	; 3
    2230:	11 96       	adiw	r26, 0x01	; 1
    2232:	2c 93       	st	X, r18
    2234:	11 97       	sbiw	r26, 0x01	; 1

	TCC1.CTRLA = TC_CLKSEL_DIV4_gc;	// BLUE clock source
    2236:	e0 e4       	ldi	r30, 0x40	; 64
    2238:	f8 e0       	ldi	r31, 0x08	; 8
    223a:	20 83       	st	Z, r18
	TCC1.CTRLB = TC1_CCAEN_bm | TC1_CCBEN_bm | TC_WGMODE_SS_gc;	// enable BLUEs, set WGM to SS PWM
    223c:	31 83       	std	Z+1, r19	; 0x01
	TCC1.PERBUF = 0xFFFF;		// set period to 8-bit for 8-bit resolution
    223e:	86 ab       	std	Z+54, r24	; 0x36
    2240:	97 ab       	std	Z+55, r25	; 0x37
	TCC1.CCABUF = 0;		// set to off by default
    2242:	10 ae       	std	Z+56, r1	; 0x38
    2244:	11 ae       	std	Z+57, r1	; 0x39
	TCC1.CCBBUF = 0;		// set to off by default
    2246:	12 ae       	std	Z+58, r1	; 0x3a
    2248:	13 ae       	std	Z+59, r1	; 0x3b
	PORTC.DIRSET = PIN4_bm | PIN5_bm;  // set BLUEs to OUTPUT
    224a:	40 e3       	ldi	r20, 0x30	; 48
    224c:	11 96       	adiw	r26, 0x01	; 1
    224e:	4c 93       	st	X, r20

	TCD0.CTRLA = TC_CLKSEL_DIV4_gc;	// GREEN clock source
    2250:	e0 e0       	ldi	r30, 0x00	; 0
    2252:	f9 e0       	ldi	r31, 0x09	; 9
    2254:	20 83       	st	Z, r18
	TCD0.CTRLB = TC0_CCAEN_bm | TC0_CCBEN_bm | TC_WGMODE_SS_gc;	// enable REDs, set WGM to SS PWM
    2256:	31 83       	std	Z+1, r19	; 0x01
	TCD0.PERBUF = 0xFFFF;		// set period to 8-bit for 8-bit resolution
    2258:	86 ab       	std	Z+54, r24	; 0x36
    225a:	97 ab       	std	Z+55, r25	; 0x37
	TCD0.CCABUF = 0;		// set to off by default
    225c:	10 ae       	std	Z+56, r1	; 0x38
    225e:	11 ae       	std	Z+57, r1	; 0x39
	TCD0.CCBBUF = 0;		// set to off by default
    2260:	12 ae       	std	Z+58, r1	; 0x3a
    2262:	13 ae       	std	Z+59, r1	; 0x3b
	PORTD.DIRSET = PIN0_bm | PIN1_bm;  // set GREENs to OUTPUT	
    2264:	e0 e6       	ldi	r30, 0x60	; 96
    2266:	f6 e0       	ldi	r31, 0x06	; 6
    2268:	21 83       	std	Z+1, r18	; 0x01
    226a:	08 95       	ret

0000226c <store>:
//
//  nv_addr points to the desired EEMEM structure address (if you declared it using 'type EEMEM mydata', then '(char *)&mydata'
//  data points to the desired SRAM structure address
//  len    is sizeof(type)
void store(void * nv_addr, void * data, int len)
{
    226c:	cf 92       	push	r12
    226e:	df 92       	push	r13
    2270:	ef 92       	push	r14
    2272:	ff 92       	push	r15
    2274:	0f 93       	push	r16
    2276:	1f 93       	push	r17
    2278:	cf 93       	push	r28
    227a:	df 93       	push	r29
    227c:	8c 01       	movw	r16, r24
    227e:	7b 01       	movw	r14, r22
    2280:	ea 01       	movw	r28, r20
    while(len != 0)
    {
        // grab the page offset address from the current
        partial_offset = (uint16_t)nv_addr & (EEPROM_PAGESIZE - 1);
    
        partial_length = EEPROM_PAGESIZE - partial_offset;
    2282:	30 e2       	ldi	r19, 0x20	; 32
    2284:	c3 2e       	mov	r12, r19
//  len    is sizeof(type)
void store(void * nv_addr, void * data, int len)
{
    uint8_t partial_offset, partial_length;

    while(len != 0)
    2286:	1e c0       	rjmp	.+60     	; 0x22c4 <store+0x58>
    {
        // grab the page offset address from the current
        partial_offset = (uint16_t)nv_addr & (EEPROM_PAGESIZE - 1);
    2288:	60 2f       	mov	r22, r16
    228a:	6f 71       	andi	r22, 0x1F	; 31
    
        partial_length = EEPROM_PAGESIZE - partial_offset;
    228c:	dc 2c       	mov	r13, r12
    228e:	d6 1a       	sub	r13, r22
        
        if(partial_length > len)
    2290:	8d 2d       	mov	r24, r13
    2292:	90 e0       	ldi	r25, 0x00	; 0
    2294:	c8 17       	cp	r28, r24
    2296:	d9 07       	cpc	r29, r25
    2298:	0c f4       	brge	.+2      	; 0x229c <store+0x30>
        {
            partial_length = len;
    229a:	dc 2e       	mov	r13, r28
        }

        EEPROM_LoadPartialPage(data, partial_offset, partial_length);
    229c:	4d 2d       	mov	r20, r13
    229e:	c7 01       	movw	r24, r14
    22a0:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <EEPROM_LoadPartialPage>
        EEPROM_AtomicWritePage((uint16_t)nv_addr / (EEPROM_PAGESIZE));
    22a4:	c8 01       	movw	r24, r16
    22a6:	25 e0       	ldi	r18, 0x05	; 5
    22a8:	96 95       	lsr	r25
    22aa:	87 95       	ror	r24
    22ac:	2a 95       	dec	r18
    22ae:	e1 f7       	brne	.-8      	; 0x22a8 <store+0x3c>
    22b0:	0e 94 aa 0a 	call	0x1554	; 0x1554 <EEPROM_AtomicWritePage>

        len -= partial_length;
    22b4:	4d 2d       	mov	r20, r13
    22b6:	50 e0       	ldi	r21, 0x00	; 0
    22b8:	c4 1b       	sub	r28, r20
    22ba:	d5 0b       	sbc	r29, r21
        nv_addr += partial_length;
    22bc:	04 0f       	add	r16, r20
    22be:	15 1f       	adc	r17, r21
        data += partial_length;
    22c0:	e4 0e       	add	r14, r20
    22c2:	f5 1e       	adc	r15, r21
//  len    is sizeof(type)
void store(void * nv_addr, void * data, int len)
{
    uint8_t partial_offset, partial_length;

    while(len != 0)
    22c4:	20 97       	sbiw	r28, 0x00	; 0
    22c6:	01 f7       	brne	.-64     	; 0x2288 <store+0x1c>
        len -= partial_length;
        nv_addr += partial_length;
        data += partial_length;
    }
    
}
    22c8:	df 91       	pop	r29
    22ca:	cf 91       	pop	r28
    22cc:	1f 91       	pop	r17
    22ce:	0f 91       	pop	r16
    22d0:	ff 90       	pop	r15
    22d2:	ef 90       	pop	r14
    22d4:	df 90       	pop	r13
    22d6:	cf 90       	pop	r12
    22d8:	08 95       	ret

000022da <restore>:

// this could be done in pages but reads are pretty quick so it shouldn't matter
void restore(void * vaddr, void * vnv_addr, int len)
{    
    22da:	ef 92       	push	r14
    22dc:	ff 92       	push	r15
    22de:	0f 93       	push	r16
    22e0:	1f 93       	push	r17
    22e2:	cf 93       	push	r28
    22e4:	df 93       	push	r29
    22e6:	7a 01       	movw	r14, r20
    }
    
}

// this could be done in pages but reads are pretty quick so it shouldn't matter
void restore(void * vaddr, void * vnv_addr, int len)
    22e8:	e6 0e       	add	r14, r22
    22ea:	f7 1e       	adc	r15, r23
{    
	byte *addr=(byte *)vaddr;
	byte *nv_addr=(byte *) vnv_addr;
    22ec:	eb 01       	movw	r28, r22
}

// this could be done in pages but reads are pretty quick so it shouldn't matter
void restore(void * vaddr, void * vnv_addr, int len)
{    
	byte *addr=(byte *)vaddr;
    22ee:	8c 01       	movw	r16, r24
	byte *nv_addr=(byte *) vnv_addr;
    while(len != 0)
    22f0:	0f c0       	rjmp	.+30     	; 0x2310 <restore+0x36>
    {
        *addr = EEPROM_ReadByte(((uint16_t)(nv_addr) / (EEPROM_PAGESIZE)), (uint16_t)(nv_addr) & (EEPROM_PAGESIZE-1));
    22f2:	be 01       	movw	r22, r28
    22f4:	6f 71       	andi	r22, 0x1F	; 31
    22f6:	77 27       	eor	r23, r23
    22f8:	ce 01       	movw	r24, r28
    22fa:	45 e0       	ldi	r20, 0x05	; 5
    22fc:	96 95       	lsr	r25
    22fe:	87 95       	ror	r24
    2300:	4a 95       	dec	r20
    2302:	e1 f7       	brne	.-8      	; 0x22fc <restore+0x22>
    2304:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <EEPROM_ReadByte>
    2308:	f8 01       	movw	r30, r16
    230a:	81 93       	st	Z+, r24
    230c:	8f 01       	movw	r16, r30
        nv_addr++;
    230e:	21 96       	adiw	r28, 0x01	; 1
// this could be done in pages but reads are pretty quick so it shouldn't matter
void restore(void * vaddr, void * vnv_addr, int len)
{    
	byte *addr=(byte *)vaddr;
	byte *nv_addr=(byte *) vnv_addr;
    while(len != 0)
    2310:	ce 15       	cp	r28, r14
    2312:	df 05       	cpc	r29, r15
    2314:	71 f7       	brne	.-36     	; 0x22f2 <restore+0x18>
        *addr = EEPROM_ReadByte(((uint16_t)(nv_addr) / (EEPROM_PAGESIZE)), (uint16_t)(nv_addr) & (EEPROM_PAGESIZE-1));
        nv_addr++;
        addr++;
        len--;
    }
}
    2316:	df 91       	pop	r29
    2318:	cf 91       	pop	r28
    231a:	1f 91       	pop	r17
    231c:	0f 91       	pop	r16
    231e:	ff 90       	pop	r15
    2320:	ef 90       	pop	r14
    2322:	08 95       	ret

00002324 <getGUID>:
#define ID_BYTE_ADDR 0x00


/* TODO: This is WRONG. It should be Uid, but the build system is being stupid and now is not a good time to spend forever trying to fix it. */
//reads GUID from eeprom
uint16_t getGUID(){
    2324:	cf 93       	push	r28
  //return 255;
	//TODO: read from eeprom
  return (((uint16_t)EEPROM_ReadByte(ID_PAGE_ADDR, ID_BYTE_ADDR))<<8) |
    2326:	60 e0       	ldi	r22, 0x00	; 0
    2328:	80 e0       	ldi	r24, 0x00	; 0
    232a:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <EEPROM_ReadByte>
    232e:	c8 2f       	mov	r28, r24
	  ((uint16_t)EEPROM_ReadByte(ID_PAGE_ADDR, ID_BYTE_ADDR+1));
    2330:	61 e0       	ldi	r22, 0x01	; 1
    2332:	80 e0       	ldi	r24, 0x00	; 0
    2334:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <EEPROM_ReadByte>
/* TODO: This is WRONG. It should be Uid, but the build system is being stupid and now is not a good time to spend forever trying to fix it. */
//reads GUID from eeprom
uint16_t getGUID(){
  //return 255;
	//TODO: read from eeprom
  return (((uint16_t)EEPROM_ReadByte(ID_PAGE_ADDR, ID_BYTE_ADDR))<<8) |
    2338:	3c 2f       	mov	r19, r28
    233a:	20 e0       	ldi	r18, 0x00	; 0
    233c:	28 2b       	or	r18, r24
	  ((uint16_t)EEPROM_ReadByte(ID_PAGE_ADDR, ID_BYTE_ADDR+1));
}
    233e:	c9 01       	movw	r24, r18
    2340:	cf 91       	pop	r28
    2342:	08 95       	ret

00002344 <u_putchar>:
void initHWUart(USART_t * uart);


void u_putchar(char c, USART_t * uart)
{
	while(!(uart->STATUS & USART_DREIF_bm));
    2344:	fb 01       	movw	r30, r22
    2346:	91 81       	ldd	r25, Z+1	; 0x01
    2348:	95 ff       	sbrs	r25, 5
    234a:	fc cf       	rjmp	.-8      	; 0x2344 <u_putchar>
    //loop_until_bit_is_set(UCSR0A, UDRE0);
	// Load buffer with your character
    uart->DATA = c;
    234c:	80 83       	st	Z, r24
    234e:	08 95       	ret

00002350 <u_getchar>:
int	u_getchar(USART_t * uart)
{
	//char c;
	// Wait for the receive buffer to be filled
    //loop_until_bit_is_set(UCSR0A, RXC0);
	if((uart->STATUS & USART_RXCIF_bm))
    2350:	fc 01       	movw	r30, r24
    2352:	21 81       	ldd	r18, Z+1	; 0x01
    2354:	27 ff       	sbrs	r18, 7
    2356:	03 c0       	rjmp	.+6      	; 0x235e <u_getchar+0xe>
	{
		// Read the receive buffer
		//c = uart->DATA;
		return uart->DATA;
    2358:	20 81       	ld	r18, Z
    235a:	30 e0       	ldi	r19, 0x00	; 0
    235c:	02 c0       	rjmp	.+4      	; 0x2362 <u_getchar+0x12>
	}
	else
	{
		return -1;
    235e:	2f ef       	ldi	r18, 0xFF	; 255
    2360:	3f ef       	ldi	r19, 0xFF	; 255
	}
}
    2362:	c9 01       	movw	r24, r18
    2364:	08 95       	ret

00002366 <pPutChar>:

void pPutChar(char c, PRef p)
{
	if(p >= 0 && p < NUM_PORTS)
    2366:	66 30       	cpi	r22, 0x06	; 6
    2368:	78 f4       	brcc	.+30     	; 0x2388 <pPutChar+0x22>
	{
		if(hwPort[p].ptype == HARDWARE_UART)
    236a:	70 e0       	ldi	r23, 0x00	; 0
    236c:	fb 01       	movw	r30, r22
    236e:	ee 0f       	add	r30, r30
    2370:	ff 1f       	adc	r31, r31
    2372:	e6 0f       	add	r30, r22
    2374:	f7 1f       	adc	r31, r23
    2376:	ef 55       	subi	r30, 0x5F	; 95
    2378:	f1 4d       	sbci	r31, 0xD1	; 209
    237a:	92 81       	ldd	r25, Z+2	; 0x02
    237c:	91 11       	cpse	r25, r1
    237e:	04 c0       	rjmp	.+8      	; 0x2388 <pPutChar+0x22>
		{
			u_putchar(c, hwPort[p].uart.huart);
    2380:	60 81       	ld	r22, Z
    2382:	71 81       	ldd	r23, Z+1	; 0x01
    2384:	0c 94 a2 11 	jmp	0x2344	; 0x2344 <u_putchar>
    2388:	08 95       	ret

0000238a <pGetChar>:
	}
}

int pGetChar(PRef p)
{
	if(p >= 0 && p < NUM_PORTS)
    238a:	86 30       	cpi	r24, 0x06	; 6
    238c:	a0 f4       	brcc	.+40     	; 0x23b6 <pGetChar+0x2c>
	{
		if(hwPort[p].ptype == HARDWARE_UART)
    238e:	90 e0       	ldi	r25, 0x00	; 0
    2390:	fc 01       	movw	r30, r24
    2392:	ee 0f       	add	r30, r30
    2394:	ff 1f       	adc	r31, r31
    2396:	e8 0f       	add	r30, r24
    2398:	f9 1f       	adc	r31, r25
    239a:	ef 55       	subi	r30, 0x5F	; 95
    239c:	f1 4d       	sbci	r31, 0xD1	; 209
    239e:	82 81       	ldd	r24, Z+2	; 0x02
    23a0:	81 11       	cpse	r24, r1
    23a2:	09 c0       	rjmp	.+18     	; 0x23b6 <pGetChar+0x2c>
		{
			return u_getchar(hwPort[p].uart.huart);
    23a4:	01 90       	ld	r0, Z+
    23a6:	f0 81       	ld	r31, Z
    23a8:	e0 2d       	mov	r30, r0
int	u_getchar(USART_t * uart)
{
	//char c;
	// Wait for the receive buffer to be filled
    //loop_until_bit_is_set(UCSR0A, RXC0);
	if((uart->STATUS & USART_RXCIF_bm))
    23aa:	81 81       	ldd	r24, Z+1	; 0x01
    23ac:	87 ff       	sbrs	r24, 7
    23ae:	03 c0       	rjmp	.+6      	; 0x23b6 <pGetChar+0x2c>
	{
		// Read the receive buffer
		//c = uart->DATA;
		return uart->DATA;
    23b0:	20 81       	ld	r18, Z
    23b2:	30 e0       	ldi	r19, 0x00	; 0
    23b4:	02 c0       	rjmp	.+4      	; 0x23ba <pGetChar+0x30>
		{
			//return su_getchar(hwPort[p].uart.suart);
		}
	}

	return -1;
    23b6:	2f ef       	ldi	r18, 0xFF	; 255
    23b8:	3f ef       	ldi	r19, 0xFF	; 255
}
    23ba:	c9 01       	movw	r24, r18
    23bc:	08 95       	ret

000023be <initHWUart>:
	PORTD.DIRSET = PIN3_bm;	
	initializeHWPort(&(hwPort[DOWN]), &USARTD0);
}

void initHWUart(USART_t * huart)
{
    23be:	fc 01       	movw	r30, r24
	huart->CTRLB = USART_RXEN_bm | USART_TXEN_bm;		// turn on RX/TX, somewhat helpful!
    23c0:	88 e1       	ldi	r24, 0x18	; 24
    23c2:	84 83       	std	Z+4, r24	; 0x04
	huart->CTRLC = USART_CHSIZE_8BIT_gc;				// use 8-bit data
    23c4:	83 e0       	ldi	r24, 0x03	; 3
    23c6:	85 83       	std	Z+5, r24	; 0x05

	huart->CTRLA = USART_RXCINTLVL_HI_gc | USART_TXCINTLVL_HI_gc;	// enable RX/TX interrupt support
    23c8:	8c e3       	ldi	r24, 0x3C	; 60
    23ca:	83 83       	std	Z+3, r24	; 0x03
	huart->BAUDCTRLA = 51;  // 38400 		// 57600   			//103;	//19200 	16; // 115200
    23cc:	83 e3       	ldi	r24, 0x33	; 51
    23ce:	86 83       	std	Z+6, r24	; 0x06
	huart->BAUDCTRLB = 0;				//0xB4;  // 57600, set to 0 for others
    23d0:	17 82       	std	Z+7, r1	; 0x07
    23d2:	08 95       	ret

000023d4 <initializeHWPort>:
	return -1;
}

void initializeHWPort(HWPort *p, USART_t *huart)
{
	if(huart != NULL)
    23d4:	61 15       	cp	r22, r1
    23d6:	71 05       	cpc	r23, r1
    23d8:	39 f0       	breq	.+14     	; 0x23e8 <initializeHWPort+0x14>
	{
		(p->uart).huart = huart;
    23da:	fc 01       	movw	r30, r24
    23dc:	60 83       	st	Z, r22
    23de:	71 83       	std	Z+1, r23	; 0x01
		p->ptype = HARDWARE_UART;
    23e0:	12 82       	std	Z+2, r1	; 0x02

		initHWUart(huart);
    23e2:	cb 01       	movw	r24, r22
    23e4:	0c 94 df 11 	jmp	0x23be	; 0x23be <initHWUart>
    23e8:	08 95       	ret

000023ea <initHWPorts>:
	}
}

void initHWPorts()
{
    23ea:	ff 92       	push	r15
    23ec:	0f 93       	push	r16
    23ee:	1f 93       	push	r17
    23f0:	cf 93       	push	r28
    23f2:	df 93       	push	r29
	// male headers
	PORTD.DIRSET = PIN7_bm;
    23f4:	c0 e6       	ldi	r28, 0x60	; 96
    23f6:	d6 e0       	ldi	r29, 0x06	; 6
    23f8:	30 e8       	ldi	r19, 0x80	; 128
    23fa:	f3 2e       	mov	r15, r19
    23fc:	f9 82       	std	Y+1, r15	; 0x01

void initializeHWPort(HWPort *p, USART_t *huart)
{
	if(huart != NULL)
	{
		(p->uart).huart = huart;
    23fe:	80 eb       	ldi	r24, 0xB0	; 176
    2400:	99 e0       	ldi	r25, 0x09	; 9
    2402:	80 93 b0 2e 	sts	0x2EB0, r24
    2406:	90 93 b1 2e 	sts	0x2EB1, r25
		p->ptype = HARDWARE_UART;
    240a:	10 92 b2 2e 	sts	0x2EB2, r1

		initHWUart(huart);
    240e:	0e 94 df 11 	call	0x23be	; 0x23be <initHWUart>
	// male headers
	PORTD.DIRSET = PIN7_bm;
	initializeHWPort(&(hwPort[UP]), &USARTD1);

	// near the double TVS diodes
	PORTC.DIRSET = PIN7_bm;
    2412:	00 e4       	ldi	r16, 0x40	; 64
    2414:	16 e0       	ldi	r17, 0x06	; 6
    2416:	f8 01       	movw	r30, r16
    2418:	f1 82       	std	Z+1, r15	; 0x01

void initializeHWPort(HWPort *p, USART_t *huart)
{
	if(huart != NULL)
	{
		(p->uart).huart = huart;
    241a:	80 eb       	ldi	r24, 0xB0	; 176
    241c:	98 e0       	ldi	r25, 0x08	; 8
    241e:	80 93 a4 2e 	sts	0x2EA4, r24
    2422:	90 93 a5 2e 	sts	0x2EA5, r25
		p->ptype = HARDWARE_UART;
    2426:	10 92 a6 2e 	sts	0x2EA6, r1

		initHWUart(huart);
    242a:	0e 94 df 11 	call	0x23be	; 0x23be <initHWUart>
	// near the double TVS diodes
	PORTC.DIRSET = PIN7_bm;
	initializeHWPort(&(hwPort[NORTH]), &USARTC1);
	
	// closest to audio amp
	PORTE.DIRSET = PIN3_bm;
    242e:	48 e0       	ldi	r20, 0x08	; 8
    2430:	f4 2e       	mov	r15, r20
    2432:	e0 e8       	ldi	r30, 0x80	; 128
    2434:	f6 e0       	ldi	r31, 0x06	; 6
    2436:	f1 82       	std	Z+1, r15	; 0x01

void initializeHWPort(HWPort *p, USART_t *huart)
{
	if(huart != NULL)
	{
		(p->uart).huart = huart;
    2438:	80 ea       	ldi	r24, 0xA0	; 160
    243a:	9a e0       	ldi	r25, 0x0A	; 10
    243c:	80 93 ad 2e 	sts	0x2EAD, r24
    2440:	90 93 ae 2e 	sts	0x2EAE, r25
		p->ptype = HARDWARE_UART;
    2444:	10 92 af 2e 	sts	0x2EAF, r1

		initHWUart(huart);
    2448:	0e 94 df 11 	call	0x23be	; 0x23be <initHWUart>
	// closest to audio amp
	PORTE.DIRSET = PIN3_bm;
	initializeHWPort(&(hwPort[SOUTH]), &USARTE0);
	
	// closest to LEDs
	PORTF.DIRSET = PIN3_bm;	
    244c:	e0 ea       	ldi	r30, 0xA0	; 160
    244e:	f6 e0       	ldi	r31, 0x06	; 6
    2450:	f1 82       	std	Z+1, r15	; 0x01

void initializeHWPort(HWPort *p, USART_t *huart)
{
	if(huart != NULL)
	{
		(p->uart).huart = huart;
    2452:	80 ea       	ldi	r24, 0xA0	; 160
    2454:	9b e0       	ldi	r25, 0x0B	; 11
    2456:	80 93 a7 2e 	sts	0x2EA7, r24
    245a:	90 93 a8 2e 	sts	0x2EA8, r25
		p->ptype = HARDWARE_UART;
    245e:	10 92 a9 2e 	sts	0x2EA9, r1

		initHWUart(huart);
    2462:	0e 94 df 11 	call	0x23be	; 0x23be <initHWUart>
	// closest to LEDs
	PORTF.DIRSET = PIN3_bm;	
	initializeHWPort(&(hwPort[EAST]), &USARTF0);
	
	// closest to analog input dividers
	PORTC.DIRSET = PIN3_bm;	
    2466:	f8 01       	movw	r30, r16
    2468:	f1 82       	std	Z+1, r15	; 0x01

void initializeHWPort(HWPort *p, USART_t *huart)
{
	if(huart != NULL)
	{
		(p->uart).huart = huart;
    246a:	80 ea       	ldi	r24, 0xA0	; 160
    246c:	98 e0       	ldi	r25, 0x08	; 8
    246e:	80 93 aa 2e 	sts	0x2EAA, r24
    2472:	90 93 ab 2e 	sts	0x2EAB, r25
		p->ptype = HARDWARE_UART;
    2476:	10 92 ac 2e 	sts	0x2EAC, r1

		initHWUart(huart);
    247a:	0e 94 df 11 	call	0x23be	; 0x23be <initHWUart>
	
	// closest to analog input dividers
	PORTC.DIRSET = PIN3_bm;	
	initializeHWPort(&(hwPort[WEST]), &USARTC0);
	
	PORTD.DIRSET = PIN3_bm;	
    247e:	f9 82       	std	Y+1, r15	; 0x01

void initializeHWPort(HWPort *p, USART_t *huart)
{
	if(huart != NULL)
	{
		(p->uart).huart = huart;
    2480:	80 ea       	ldi	r24, 0xA0	; 160
    2482:	99 e0       	ldi	r25, 0x09	; 9
    2484:	80 93 a1 2e 	sts	0x2EA1, r24
    2488:	90 93 a2 2e 	sts	0x2EA2, r25
		p->ptype = HARDWARE_UART;
    248c:	10 92 a3 2e 	sts	0x2EA3, r1
	PORTC.DIRSET = PIN3_bm;	
	initializeHWPort(&(hwPort[WEST]), &USARTC0);
	
	PORTD.DIRSET = PIN3_bm;	
	initializeHWPort(&(hwPort[DOWN]), &USARTD0);
}
    2490:	df 91       	pop	r29
    2492:	cf 91       	pop	r28
    2494:	1f 91       	pop	r17
    2496:	0f 91       	pop	r16
    2498:	ff 90       	pop	r15
	if(huart != NULL)
	{
		(p->uart).huart = huart;
		p->ptype = HARDWARE_UART;

		initHWUart(huart);
    249a:	0c 94 df 11 	jmp	0x23be	; 0x23be <initHWUart>

0000249e <__vector_91>:
	huart->BAUDCTRLB = 0;				//0xB4;  // 57600, set to 0 for others
}


ISR(USARTD1_RXC_vect)
{
    249e:	1f 92       	push	r1
    24a0:	0f 92       	push	r0
    24a2:	0f b6       	in	r0, 0x3f	; 63
    24a4:	0f 92       	push	r0
    24a6:	11 24       	eor	r1, r1
    24a8:	0b b6       	in	r0, 0x3b	; 59
    24aa:	0f 92       	push	r0
    24ac:	2f 93       	push	r18
    24ae:	3f 93       	push	r19
    24b0:	4f 93       	push	r20
    24b2:	5f 93       	push	r21
    24b4:	6f 93       	push	r22
    24b6:	7f 93       	push	r23
    24b8:	8f 93       	push	r24
    24ba:	9f 93       	push	r25
    24bc:	af 93       	push	r26
    24be:	bf 93       	push	r27
    24c0:	ef 93       	push	r30
    24c2:	ff 93       	push	r31
	uint8_t c;
	
	c = USARTD1.DATA;
    24c4:	80 91 b0 09 	lds	r24, 0x09B0
	//printf("R:%x",c);	
	push(c, &(port[UP].rx));
    24c8:	62 e4       	ldi	r22, 0x42	; 66
    24ca:	7e e2       	ldi	r23, 0x2E	; 46
    24cc:	0e 94 96 01 	call	0x32c	; 0x32c <push>
}
    24d0:	ff 91       	pop	r31
    24d2:	ef 91       	pop	r30
    24d4:	bf 91       	pop	r27
    24d6:	af 91       	pop	r26
    24d8:	9f 91       	pop	r25
    24da:	8f 91       	pop	r24
    24dc:	7f 91       	pop	r23
    24de:	6f 91       	pop	r22
    24e0:	5f 91       	pop	r21
    24e2:	4f 91       	pop	r20
    24e4:	3f 91       	pop	r19
    24e6:	2f 91       	pop	r18
    24e8:	0f 90       	pop	r0
    24ea:	0b be       	out	0x3b, r0	; 59
    24ec:	0f 90       	pop	r0
    24ee:	0f be       	out	0x3f, r0	; 63
    24f0:	0f 90       	pop	r0
    24f2:	1f 90       	pop	r1
    24f4:	18 95       	reti

000024f6 <__vector_93>:

ISR(USARTD1_TXC_vect)
{
    24f6:	1f 92       	push	r1
    24f8:	0f 92       	push	r0
    24fa:	0f b6       	in	r0, 0x3f	; 63
    24fc:	0f 92       	push	r0
    24fe:	11 24       	eor	r1, r1
    2500:	0b b6       	in	r0, 0x3b	; 59
    2502:	0f 92       	push	r0
    2504:	2f 93       	push	r18
    2506:	3f 93       	push	r19
    2508:	4f 93       	push	r20
    250a:	5f 93       	push	r21
    250c:	6f 93       	push	r22
    250e:	7f 93       	push	r23
    2510:	8f 93       	push	r24
    2512:	9f 93       	push	r25
    2514:	af 93       	push	r26
    2516:	bf 93       	push	r27
    2518:	ef 93       	push	r30
    251a:	ff 93       	push	r31
	int16_t c;
	
	c  = pop(&(port[UP].tx));
    251c:	82 e6       	ldi	r24, 0x62	; 98
    251e:	9e e2       	ldi	r25, 0x2E	; 46
    2520:	0e 94 b1 01 	call	0x362	; 0x362 <pop>
	
	if(c != -1)
    2524:	8f 3f       	cpi	r24, 0xFF	; 255
    2526:	2f ef       	ldi	r18, 0xFF	; 255
    2528:	92 07       	cpc	r25, r18
    252a:	11 f0       	breq	.+4      	; 0x2530 <__vector_93+0x3a>
	{
		USARTD1.DATA = c;
    252c:	80 93 b0 09 	sts	0x09B0, r24
	}
	else
	{
		// should flag that we're waiting for an ACK now
	}
}
    2530:	ff 91       	pop	r31
    2532:	ef 91       	pop	r30
    2534:	bf 91       	pop	r27
    2536:	af 91       	pop	r26
    2538:	9f 91       	pop	r25
    253a:	8f 91       	pop	r24
    253c:	7f 91       	pop	r23
    253e:	6f 91       	pop	r22
    2540:	5f 91       	pop	r21
    2542:	4f 91       	pop	r20
    2544:	3f 91       	pop	r19
    2546:	2f 91       	pop	r18
    2548:	0f 90       	pop	r0
    254a:	0b be       	out	0x3b, r0	; 59
    254c:	0f 90       	pop	r0
    254e:	0f be       	out	0x3f, r0	; 63
    2550:	0f 90       	pop	r0
    2552:	1f 90       	pop	r1
    2554:	18 95       	reti

00002556 <__vector_28>:

ISR(USARTC1_RXC_vect)
{
    2556:	1f 92       	push	r1
    2558:	0f 92       	push	r0
    255a:	0f b6       	in	r0, 0x3f	; 63
    255c:	0f 92       	push	r0
    255e:	11 24       	eor	r1, r1
    2560:	0b b6       	in	r0, 0x3b	; 59
    2562:	0f 92       	push	r0
    2564:	2f 93       	push	r18
    2566:	3f 93       	push	r19
    2568:	4f 93       	push	r20
    256a:	5f 93       	push	r21
    256c:	6f 93       	push	r22
    256e:	7f 93       	push	r23
    2570:	8f 93       	push	r24
    2572:	9f 93       	push	r25
    2574:	af 93       	push	r26
    2576:	bf 93       	push	r27
    2578:	ef 93       	push	r30
    257a:	ff 93       	push	r31
	uint8_t c;
	
	c = USARTC1.DATA;
    257c:	80 91 b0 08 	lds	r24, 0x08B0
	//printf("R:%x",c);	
	push(c, &(port[NORTH].rx));
    2580:	62 ee       	ldi	r22, 0xE2	; 226
    2582:	7c e2       	ldi	r23, 0x2C	; 44
    2584:	0e 94 96 01 	call	0x32c	; 0x32c <push>
}
    2588:	ff 91       	pop	r31
    258a:	ef 91       	pop	r30
    258c:	bf 91       	pop	r27
    258e:	af 91       	pop	r26
    2590:	9f 91       	pop	r25
    2592:	8f 91       	pop	r24
    2594:	7f 91       	pop	r23
    2596:	6f 91       	pop	r22
    2598:	5f 91       	pop	r21
    259a:	4f 91       	pop	r20
    259c:	3f 91       	pop	r19
    259e:	2f 91       	pop	r18
    25a0:	0f 90       	pop	r0
    25a2:	0b be       	out	0x3b, r0	; 59
    25a4:	0f 90       	pop	r0
    25a6:	0f be       	out	0x3f, r0	; 63
    25a8:	0f 90       	pop	r0
    25aa:	1f 90       	pop	r1
    25ac:	18 95       	reti

000025ae <__vector_30>:
ISR(USARTC1_TXC_vect)
{
    25ae:	1f 92       	push	r1
    25b0:	0f 92       	push	r0
    25b2:	0f b6       	in	r0, 0x3f	; 63
    25b4:	0f 92       	push	r0
    25b6:	11 24       	eor	r1, r1
    25b8:	0b b6       	in	r0, 0x3b	; 59
    25ba:	0f 92       	push	r0
    25bc:	2f 93       	push	r18
    25be:	3f 93       	push	r19
    25c0:	4f 93       	push	r20
    25c2:	5f 93       	push	r21
    25c4:	6f 93       	push	r22
    25c6:	7f 93       	push	r23
    25c8:	8f 93       	push	r24
    25ca:	9f 93       	push	r25
    25cc:	af 93       	push	r26
    25ce:	bf 93       	push	r27
    25d0:	ef 93       	push	r30
    25d2:	ff 93       	push	r31
	int16_t c;
	
	c  = pop(&(port[NORTH].tx));
    25d4:	82 e0       	ldi	r24, 0x02	; 2
    25d6:	9d e2       	ldi	r25, 0x2D	; 45
    25d8:	0e 94 b1 01 	call	0x362	; 0x362 <pop>
	
	if(c != -1)
    25dc:	8f 3f       	cpi	r24, 0xFF	; 255
    25de:	2f ef       	ldi	r18, 0xFF	; 255
    25e0:	92 07       	cpc	r25, r18
    25e2:	11 f0       	breq	.+4      	; 0x25e8 <__vector_30+0x3a>
	{
		USARTC1.DATA = c;
    25e4:	80 93 b0 08 	sts	0x08B0, r24
	}
}
    25e8:	ff 91       	pop	r31
    25ea:	ef 91       	pop	r30
    25ec:	bf 91       	pop	r27
    25ee:	af 91       	pop	r26
    25f0:	9f 91       	pop	r25
    25f2:	8f 91       	pop	r24
    25f4:	7f 91       	pop	r23
    25f6:	6f 91       	pop	r22
    25f8:	5f 91       	pop	r21
    25fa:	4f 91       	pop	r20
    25fc:	3f 91       	pop	r19
    25fe:	2f 91       	pop	r18
    2600:	0f 90       	pop	r0
    2602:	0b be       	out	0x3b, r0	; 59
    2604:	0f 90       	pop	r0
    2606:	0f be       	out	0x3f, r0	; 63
    2608:	0f 90       	pop	r0
    260a:	1f 90       	pop	r1
    260c:	18 95       	reti

0000260e <__vector_119>:

ISR(USARTF0_RXC_vect)
{
    260e:	1f 92       	push	r1
    2610:	0f 92       	push	r0
    2612:	0f b6       	in	r0, 0x3f	; 63
    2614:	0f 92       	push	r0
    2616:	11 24       	eor	r1, r1
    2618:	0b b6       	in	r0, 0x3b	; 59
    261a:	0f 92       	push	r0
    261c:	2f 93       	push	r18
    261e:	3f 93       	push	r19
    2620:	4f 93       	push	r20
    2622:	5f 93       	push	r21
    2624:	6f 93       	push	r22
    2626:	7f 93       	push	r23
    2628:	8f 93       	push	r24
    262a:	9f 93       	push	r25
    262c:	af 93       	push	r26
    262e:	bf 93       	push	r27
    2630:	ef 93       	push	r30
    2632:	ff 93       	push	r31
	uint8_t c;
	
	c = USARTF0.DATA;
    2634:	80 91 a0 0b 	lds	r24, 0x0BA0
	//printf("R:%x",c);	
	push(c, &(port[EAST].rx));
    2638:	6a e3       	ldi	r22, 0x3A	; 58
    263a:	7d e2       	ldi	r23, 0x2D	; 45
    263c:	0e 94 96 01 	call	0x32c	; 0x32c <push>
}
    2640:	ff 91       	pop	r31
    2642:	ef 91       	pop	r30
    2644:	bf 91       	pop	r27
    2646:	af 91       	pop	r26
    2648:	9f 91       	pop	r25
    264a:	8f 91       	pop	r24
    264c:	7f 91       	pop	r23
    264e:	6f 91       	pop	r22
    2650:	5f 91       	pop	r21
    2652:	4f 91       	pop	r20
    2654:	3f 91       	pop	r19
    2656:	2f 91       	pop	r18
    2658:	0f 90       	pop	r0
    265a:	0b be       	out	0x3b, r0	; 59
    265c:	0f 90       	pop	r0
    265e:	0f be       	out	0x3f, r0	; 63
    2660:	0f 90       	pop	r0
    2662:	1f 90       	pop	r1
    2664:	18 95       	reti

00002666 <__vector_121>:
ISR(USARTF0_TXC_vect)
{
    2666:	1f 92       	push	r1
    2668:	0f 92       	push	r0
    266a:	0f b6       	in	r0, 0x3f	; 63
    266c:	0f 92       	push	r0
    266e:	11 24       	eor	r1, r1
    2670:	0b b6       	in	r0, 0x3b	; 59
    2672:	0f 92       	push	r0
    2674:	2f 93       	push	r18
    2676:	3f 93       	push	r19
    2678:	4f 93       	push	r20
    267a:	5f 93       	push	r21
    267c:	6f 93       	push	r22
    267e:	7f 93       	push	r23
    2680:	8f 93       	push	r24
    2682:	9f 93       	push	r25
    2684:	af 93       	push	r26
    2686:	bf 93       	push	r27
    2688:	ef 93       	push	r30
    268a:	ff 93       	push	r31
	int16_t c;
	
	c  = pop(&(port[EAST].tx));
    268c:	8a e5       	ldi	r24, 0x5A	; 90
    268e:	9d e2       	ldi	r25, 0x2D	; 45
    2690:	0e 94 b1 01 	call	0x362	; 0x362 <pop>
	
	if(c != -1)
    2694:	8f 3f       	cpi	r24, 0xFF	; 255
    2696:	2f ef       	ldi	r18, 0xFF	; 255
    2698:	92 07       	cpc	r25, r18
    269a:	11 f0       	breq	.+4      	; 0x26a0 <__vector_121+0x3a>
	{
		USARTF0.DATA = c;
    269c:	80 93 a0 0b 	sts	0x0BA0, r24
	}
}
    26a0:	ff 91       	pop	r31
    26a2:	ef 91       	pop	r30
    26a4:	bf 91       	pop	r27
    26a6:	af 91       	pop	r26
    26a8:	9f 91       	pop	r25
    26aa:	8f 91       	pop	r24
    26ac:	7f 91       	pop	r23
    26ae:	6f 91       	pop	r22
    26b0:	5f 91       	pop	r21
    26b2:	4f 91       	pop	r20
    26b4:	3f 91       	pop	r19
    26b6:	2f 91       	pop	r18
    26b8:	0f 90       	pop	r0
    26ba:	0b be       	out	0x3b, r0	; 59
    26bc:	0f 90       	pop	r0
    26be:	0f be       	out	0x3f, r0	; 63
    26c0:	0f 90       	pop	r0
    26c2:	1f 90       	pop	r1
    26c4:	18 95       	reti

000026c6 <__vector_58>:

ISR(USARTE0_RXC_vect)
{
    26c6:	1f 92       	push	r1
    26c8:	0f 92       	push	r0
    26ca:	0f b6       	in	r0, 0x3f	; 63
    26cc:	0f 92       	push	r0
    26ce:	11 24       	eor	r1, r1
    26d0:	0b b6       	in	r0, 0x3b	; 59
    26d2:	0f 92       	push	r0
    26d4:	2f 93       	push	r18
    26d6:	3f 93       	push	r19
    26d8:	4f 93       	push	r20
    26da:	5f 93       	push	r21
    26dc:	6f 93       	push	r22
    26de:	7f 93       	push	r23
    26e0:	8f 93       	push	r24
    26e2:	9f 93       	push	r25
    26e4:	af 93       	push	r26
    26e6:	bf 93       	push	r27
    26e8:	ef 93       	push	r30
    26ea:	ff 93       	push	r31
	uint8_t c;
	
	c = USARTE0.DATA;
    26ec:	80 91 a0 0a 	lds	r24, 0x0AA0
	//printf("R:%x",c);	
	push(c, &(port[SOUTH].rx));
    26f0:	6a ee       	ldi	r22, 0xEA	; 234
    26f2:	7d e2       	ldi	r23, 0x2D	; 45
    26f4:	0e 94 96 01 	call	0x32c	; 0x32c <push>
}
    26f8:	ff 91       	pop	r31
    26fa:	ef 91       	pop	r30
    26fc:	bf 91       	pop	r27
    26fe:	af 91       	pop	r26
    2700:	9f 91       	pop	r25
    2702:	8f 91       	pop	r24
    2704:	7f 91       	pop	r23
    2706:	6f 91       	pop	r22
    2708:	5f 91       	pop	r21
    270a:	4f 91       	pop	r20
    270c:	3f 91       	pop	r19
    270e:	2f 91       	pop	r18
    2710:	0f 90       	pop	r0
    2712:	0b be       	out	0x3b, r0	; 59
    2714:	0f 90       	pop	r0
    2716:	0f be       	out	0x3f, r0	; 63
    2718:	0f 90       	pop	r0
    271a:	1f 90       	pop	r1
    271c:	18 95       	reti

0000271e <__vector_60>:
ISR(USARTE0_TXC_vect)
{
    271e:	1f 92       	push	r1
    2720:	0f 92       	push	r0
    2722:	0f b6       	in	r0, 0x3f	; 63
    2724:	0f 92       	push	r0
    2726:	11 24       	eor	r1, r1
    2728:	0b b6       	in	r0, 0x3b	; 59
    272a:	0f 92       	push	r0
    272c:	2f 93       	push	r18
    272e:	3f 93       	push	r19
    2730:	4f 93       	push	r20
    2732:	5f 93       	push	r21
    2734:	6f 93       	push	r22
    2736:	7f 93       	push	r23
    2738:	8f 93       	push	r24
    273a:	9f 93       	push	r25
    273c:	af 93       	push	r26
    273e:	bf 93       	push	r27
    2740:	ef 93       	push	r30
    2742:	ff 93       	push	r31
	int16_t c;
	
	c  = pop(&(port[SOUTH].tx));
    2744:	8a e0       	ldi	r24, 0x0A	; 10
    2746:	9e e2       	ldi	r25, 0x2E	; 46
    2748:	0e 94 b1 01 	call	0x362	; 0x362 <pop>
	
	if(c != -1)
    274c:	8f 3f       	cpi	r24, 0xFF	; 255
    274e:	2f ef       	ldi	r18, 0xFF	; 255
    2750:	92 07       	cpc	r25, r18
    2752:	11 f0       	breq	.+4      	; 0x2758 <__vector_60+0x3a>
	{
		USARTE0.DATA = c;
    2754:	80 93 a0 0a 	sts	0x0AA0, r24
	}
}
    2758:	ff 91       	pop	r31
    275a:	ef 91       	pop	r30
    275c:	bf 91       	pop	r27
    275e:	af 91       	pop	r26
    2760:	9f 91       	pop	r25
    2762:	8f 91       	pop	r24
    2764:	7f 91       	pop	r23
    2766:	6f 91       	pop	r22
    2768:	5f 91       	pop	r21
    276a:	4f 91       	pop	r20
    276c:	3f 91       	pop	r19
    276e:	2f 91       	pop	r18
    2770:	0f 90       	pop	r0
    2772:	0b be       	out	0x3b, r0	; 59
    2774:	0f 90       	pop	r0
    2776:	0f be       	out	0x3f, r0	; 63
    2778:	0f 90       	pop	r0
    277a:	1f 90       	pop	r1
    277c:	18 95       	reti

0000277e <__vector_25>:

ISR(USARTC0_RXC_vect)
{
    277e:	1f 92       	push	r1
    2780:	0f 92       	push	r0
    2782:	0f b6       	in	r0, 0x3f	; 63
    2784:	0f 92       	push	r0
    2786:	11 24       	eor	r1, r1
    2788:	0b b6       	in	r0, 0x3b	; 59
    278a:	0f 92       	push	r0
    278c:	2f 93       	push	r18
    278e:	3f 93       	push	r19
    2790:	4f 93       	push	r20
    2792:	5f 93       	push	r21
    2794:	6f 93       	push	r22
    2796:	7f 93       	push	r23
    2798:	8f 93       	push	r24
    279a:	9f 93       	push	r25
    279c:	af 93       	push	r26
    279e:	bf 93       	push	r27
    27a0:	ef 93       	push	r30
    27a2:	ff 93       	push	r31
	uint8_t c;
	
	c = USARTC0.DATA;
    27a4:	80 91 a0 08 	lds	r24, 0x08A0
	//printf("R:%x",c);	
	push(c, &(port[WEST].rx));
    27a8:	62 e9       	ldi	r22, 0x92	; 146
    27aa:	7d e2       	ldi	r23, 0x2D	; 45
    27ac:	0e 94 96 01 	call	0x32c	; 0x32c <push>
}
    27b0:	ff 91       	pop	r31
    27b2:	ef 91       	pop	r30
    27b4:	bf 91       	pop	r27
    27b6:	af 91       	pop	r26
    27b8:	9f 91       	pop	r25
    27ba:	8f 91       	pop	r24
    27bc:	7f 91       	pop	r23
    27be:	6f 91       	pop	r22
    27c0:	5f 91       	pop	r21
    27c2:	4f 91       	pop	r20
    27c4:	3f 91       	pop	r19
    27c6:	2f 91       	pop	r18
    27c8:	0f 90       	pop	r0
    27ca:	0b be       	out	0x3b, r0	; 59
    27cc:	0f 90       	pop	r0
    27ce:	0f be       	out	0x3f, r0	; 63
    27d0:	0f 90       	pop	r0
    27d2:	1f 90       	pop	r1
    27d4:	18 95       	reti

000027d6 <__vector_27>:
ISR(USARTC0_TXC_vect)
{
    27d6:	1f 92       	push	r1
    27d8:	0f 92       	push	r0
    27da:	0f b6       	in	r0, 0x3f	; 63
    27dc:	0f 92       	push	r0
    27de:	11 24       	eor	r1, r1
    27e0:	0b b6       	in	r0, 0x3b	; 59
    27e2:	0f 92       	push	r0
    27e4:	2f 93       	push	r18
    27e6:	3f 93       	push	r19
    27e8:	4f 93       	push	r20
    27ea:	5f 93       	push	r21
    27ec:	6f 93       	push	r22
    27ee:	7f 93       	push	r23
    27f0:	8f 93       	push	r24
    27f2:	9f 93       	push	r25
    27f4:	af 93       	push	r26
    27f6:	bf 93       	push	r27
    27f8:	ef 93       	push	r30
    27fa:	ff 93       	push	r31
	int16_t c;
	
	c  = pop(&(port[WEST].tx));
    27fc:	82 eb       	ldi	r24, 0xB2	; 178
    27fe:	9d e2       	ldi	r25, 0x2D	; 45
    2800:	0e 94 b1 01 	call	0x362	; 0x362 <pop>
	
	if(c != -1)
    2804:	8f 3f       	cpi	r24, 0xFF	; 255
    2806:	2f ef       	ldi	r18, 0xFF	; 255
    2808:	92 07       	cpc	r25, r18
    280a:	11 f0       	breq	.+4      	; 0x2810 <__vector_27+0x3a>
	{
		USARTC0.DATA = c;
    280c:	80 93 a0 08 	sts	0x08A0, r24
	}
}
    2810:	ff 91       	pop	r31
    2812:	ef 91       	pop	r30
    2814:	bf 91       	pop	r27
    2816:	af 91       	pop	r26
    2818:	9f 91       	pop	r25
    281a:	8f 91       	pop	r24
    281c:	7f 91       	pop	r23
    281e:	6f 91       	pop	r22
    2820:	5f 91       	pop	r21
    2822:	4f 91       	pop	r20
    2824:	3f 91       	pop	r19
    2826:	2f 91       	pop	r18
    2828:	0f 90       	pop	r0
    282a:	0b be       	out	0x3b, r0	; 59
    282c:	0f 90       	pop	r0
    282e:	0f be       	out	0x3f, r0	; 63
    2830:	0f 90       	pop	r0
    2832:	1f 90       	pop	r1
    2834:	18 95       	reti

00002836 <__vector_88>:

ISR(USARTD0_RXC_vect)
{
    2836:	1f 92       	push	r1
    2838:	0f 92       	push	r0
    283a:	0f b6       	in	r0, 0x3f	; 63
    283c:	0f 92       	push	r0
    283e:	11 24       	eor	r1, r1
    2840:	0b b6       	in	r0, 0x3b	; 59
    2842:	0f 92       	push	r0
    2844:	2f 93       	push	r18
    2846:	3f 93       	push	r19
    2848:	4f 93       	push	r20
    284a:	5f 93       	push	r21
    284c:	6f 93       	push	r22
    284e:	7f 93       	push	r23
    2850:	8f 93       	push	r24
    2852:	9f 93       	push	r25
    2854:	af 93       	push	r26
    2856:	bf 93       	push	r27
    2858:	ef 93       	push	r30
    285a:	ff 93       	push	r31
	uint8_t c;
	
	c = USARTD0.DATA;
    285c:	80 91 a0 09 	lds	r24, 0x09A0
	//printf("R:%x",c);
	push(c, &(port[DOWN].rx));
    2860:	6a e8       	ldi	r22, 0x8A	; 138
    2862:	7c e2       	ldi	r23, 0x2C	; 44
    2864:	0e 94 96 01 	call	0x32c	; 0x32c <push>
}
    2868:	ff 91       	pop	r31
    286a:	ef 91       	pop	r30
    286c:	bf 91       	pop	r27
    286e:	af 91       	pop	r26
    2870:	9f 91       	pop	r25
    2872:	8f 91       	pop	r24
    2874:	7f 91       	pop	r23
    2876:	6f 91       	pop	r22
    2878:	5f 91       	pop	r21
    287a:	4f 91       	pop	r20
    287c:	3f 91       	pop	r19
    287e:	2f 91       	pop	r18
    2880:	0f 90       	pop	r0
    2882:	0b be       	out	0x3b, r0	; 59
    2884:	0f 90       	pop	r0
    2886:	0f be       	out	0x3f, r0	; 63
    2888:	0f 90       	pop	r0
    288a:	1f 90       	pop	r1
    288c:	18 95       	reti

0000288e <__vector_90>:
ISR(USARTD0_TXC_vect)
{
    288e:	1f 92       	push	r1
    2890:	0f 92       	push	r0
    2892:	0f b6       	in	r0, 0x3f	; 63
    2894:	0f 92       	push	r0
    2896:	11 24       	eor	r1, r1
    2898:	0b b6       	in	r0, 0x3b	; 59
    289a:	0f 92       	push	r0
    289c:	2f 93       	push	r18
    289e:	3f 93       	push	r19
    28a0:	4f 93       	push	r20
    28a2:	5f 93       	push	r21
    28a4:	6f 93       	push	r22
    28a6:	7f 93       	push	r23
    28a8:	8f 93       	push	r24
    28aa:	9f 93       	push	r25
    28ac:	af 93       	push	r26
    28ae:	bf 93       	push	r27
    28b0:	ef 93       	push	r30
    28b2:	ff 93       	push	r31
	int16_t c;
	
	c  = pop(&(port[DOWN].tx));
    28b4:	8a ea       	ldi	r24, 0xAA	; 170
    28b6:	9c e2       	ldi	r25, 0x2C	; 44
    28b8:	0e 94 b1 01 	call	0x362	; 0x362 <pop>
	
	if(c != -1)
    28bc:	8f 3f       	cpi	r24, 0xFF	; 255
    28be:	2f ef       	ldi	r18, 0xFF	; 255
    28c0:	92 07       	cpc	r25, r18
    28c2:	11 f0       	breq	.+4      	; 0x28c8 <__vector_90+0x3a>
	{
		USARTD0.DATA = c;
    28c4:	80 93 a0 09 	sts	0x09A0, r24
	}
}
    28c8:	ff 91       	pop	r31
    28ca:	ef 91       	pop	r30
    28cc:	bf 91       	pop	r27
    28ce:	af 91       	pop	r26
    28d0:	9f 91       	pop	r25
    28d2:	8f 91       	pop	r24
    28d4:	7f 91       	pop	r23
    28d6:	6f 91       	pop	r22
    28d8:	5f 91       	pop	r21
    28da:	4f 91       	pop	r20
    28dc:	3f 91       	pop	r19
    28de:	2f 91       	pop	r18
    28e0:	0f 90       	pop	r0
    28e2:	0b be       	out	0x3b, r0	; 59
    28e4:	0f 90       	pop	r0
    28e6:	0f be       	out	0x3f, r0	; 63
    28e8:	0f 90       	pop	r0
    28ea:	1f 90       	pop	r1
    28ec:	18 95       	reti

000028ee <getHWTime>:
#include "../system/hardwaretime.h"

uint16_t timeHi;			// semi-private data, do not modify outside of this file

Time getHWTime()
{
    28ee:	0f 93       	push	r16
    28f0:	1f 93       	push	r17
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    28f2:	f8 94       	cli
	Time tmp;
	// prevents ISRs from corrupting multibyte write
	ATOMIC_BLOCK(ATOMIC_FORCEON)
    {
		tmp = (((Time)timeHi) << 16) | RTC.CNT;
    28f4:	e0 e0       	ldi	r30, 0x00	; 0
    28f6:	f4 e0       	ldi	r31, 0x04	; 4
    28f8:	80 85       	ldd	r24, Z+8	; 0x08
    28fa:	91 85       	ldd	r25, Z+9	; 0x09
    28fc:	00 91 b3 2e 	lds	r16, 0x2EB3
    2900:	10 91 b4 2e 	lds	r17, 0x2EB4
    2904:	20 e0       	ldi	r18, 0x00	; 0
    2906:	30 e0       	ldi	r19, 0x00	; 0
    2908:	98 01       	movw	r18, r16
    290a:	11 27       	eor	r17, r17
    290c:	00 27       	eor	r16, r16
    290e:	a0 e0       	ldi	r26, 0x00	; 0
    2910:	b0 e0       	ldi	r27, 0x00	; 0
    2912:	08 2b       	or	r16, r24
    2914:	19 2b       	or	r17, r25
    2916:	2a 2b       	or	r18, r26
    2918:	3b 2b       	or	r19, r27
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
    291a:	78 94       	sei
	}
	
	return tmp;
}
    291c:	b8 01       	movw	r22, r16
    291e:	c9 01       	movw	r24, r18
    2920:	1f 91       	pop	r17
    2922:	0f 91       	pop	r16
    2924:	08 95       	ret

00002926 <initClock>:

void initClock(void)
{
	OSC.CTRL |= _BV(OSC_RC32MEN_bp);			// turn on 32MHz internal RC oscillator
    2926:	80 91 50 00 	lds	r24, 0x0050
    292a:	82 60       	ori	r24, 0x02	; 2
    292c:	80 93 50 00 	sts	0x0050, r24
	while(!(OSC.STATUS & OSC_RC32MRDY_bm));  	// wait for it to be ready
    2930:	80 91 51 00 	lds	r24, 0x0051
    2934:	81 ff       	sbrs	r24, 1
    2936:	fc cf       	rjmp	.-8      	; 0x2930 <initClock+0xa>

	CCP=0xD8;							// allow modification of protected register
    2938:	88 ed       	ldi	r24, 0xD8	; 216
    293a:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc;	// change from 2MHz to 32MHz
    293c:	81 e0       	ldi	r24, 0x01	; 1
    293e:	80 93 40 00 	sts	0x0040, r24
    2942:	08 95       	ret

00002944 <initRTC>:
}

void initRTC(void)
{
	RTC.CTRL = RTC_PRESCALER_DIV1_gc;
    2944:	e0 e0       	ldi	r30, 0x00	; 0
    2946:	f4 e0       	ldi	r31, 0x04	; 4
    2948:	81 e0       	ldi	r24, 0x01	; 1
    294a:	80 83       	st	Z, r24
	CLK.RTCCTRL = CLK_RTCSRC_ULP_gc | CLK_RTCEN_bm; 
    294c:	a0 e4       	ldi	r26, 0x40	; 64
    294e:	b0 e0       	ldi	r27, 0x00	; 0
    2950:	13 96       	adiw	r26, 0x03	; 3
    2952:	8c 93       	st	X, r24

	RTC.INTCTRL = RTC_OVFINTLVL_HI_gc;
    2954:	83 e0       	ldi	r24, 0x03	; 3
    2956:	82 83       	std	Z+2, r24	; 0x02
    2958:	08 95       	ret

0000295a <initHWTime>:
}

void initHWTime()
{
	initClock();
    295a:	0e 94 93 14 	call	0x2926	; 0x2926 <initClock>
	initRTC();
    295e:	0c 94 a2 14 	jmp	0x2944	; 0x2944 <initRTC>

00002962 <__vector_10>:
}

ISR(RTC_OVF_vect)
{
    2962:	1f 92       	push	r1
    2964:	0f 92       	push	r0
    2966:	0f b6       	in	r0, 0x3f	; 63
    2968:	0f 92       	push	r0
    296a:	11 24       	eor	r1, r1
    296c:	8f 93       	push	r24
    296e:	9f 93       	push	r25
	timeHi++;
    2970:	80 91 b3 2e 	lds	r24, 0x2EB3
    2974:	90 91 b4 2e 	lds	r25, 0x2EB4
    2978:	01 96       	adiw	r24, 0x01	; 1
    297a:	80 93 b3 2e 	sts	0x2EB3, r24
    297e:	90 93 b4 2e 	sts	0x2EB4, r25
}
    2982:	9f 91       	pop	r25
    2984:	8f 91       	pop	r24
    2986:	0f 90       	pop	r0
    2988:	0f be       	out	0x3f, r0	; 63
    298a:	0f 90       	pop	r0
    298c:	1f 90       	pop	r1
    298e:	18 95       	reti

00002990 <updateHWMic>:
extern MicData _mic;


void updateHWMic()
{
    BB_LOCK(ATOMIC_RESTORESTATE)
    2990:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2992:	f8 94       	cli
    // read low, then high byte
    _mic = ADCA.CH0.RES;
    2994:	e0 e0       	ldi	r30, 0x00	; 0
    2996:	f2 e0       	ldi	r31, 0x02	; 2
    2998:	84 a1       	ldd	r24, Z+36	; 0x24
    299a:	95 a1       	ldd	r25, Z+37	; 0x25

    // sign extend to full 16 bits
    _mic = _mic >> 4;
    299c:	34 e0       	ldi	r19, 0x04	; 4
    299e:	95 95       	asr	r25
    29a0:	87 95       	ror	r24
    29a2:	3a 95       	dec	r19
    29a4:	e1 f7       	brne	.-8      	; 0x299e <updateHWMic+0xe>
    29a6:	80 93 88 2e 	sts	0x2E88, r24
    29aa:	90 93 89 2e 	sts	0x2E89, r25
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    29ae:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
    29b0:	08 95       	ret

000029b2 <initHWMic>:
}

void initHWMic(void)
{
    // set-up basic function
    ADCA.CTRLA = ADC_ENABLE_bm;                                 // disable combined DMA but enable ADC
    29b2:	e0 e0       	ldi	r30, 0x00	; 0
    29b4:	f2 e0       	ldi	r31, 0x02	; 2
    29b6:	81 e0       	ldi	r24, 0x01	; 1
    29b8:	80 83       	st	Z, r24
    ADCA.CTRLB = ADC_CONMODE_bm | ADC_RESOLUTION_LEFT12BIT_gc;  // use signed 12 bit left adjusted format
    29ba:	96 e1       	ldi	r25, 0x16	; 22
    29bc:	91 83       	std	Z+1, r25	; 0x01
    ADCA.REFCTRL = ADC_REFSEL_VCC_gc | ADC_BANDGAP_bm;          // disable combined DMA but enable ADC
    29be:	92 e1       	ldi	r25, 0x12	; 18
    29c0:	92 83       	std	Z+2, r25	; 0x02
    ADCA.PRESCALER = ADC_PRESCALER_DIV512_gc;                   // DIV512 prescaler
    29c2:	97 e0       	ldi	r25, 0x07	; 7
    29c4:	94 83       	std	Z+4, r25	; 0x04

    // set-up inputs (NOTE: define for ADC_CH_MUXNEG_PIN5_gv is incorrect)
    ADCA.CH0.MUXCTRL = ADC_CH_MUXPOS_PIN0_gc | ADC_CH_MUXNEG_PIN1_gc;   // take inputs from microphone (A0, A5)
    29c6:	81 a3       	std	Z+33, r24	; 0x21
    ADCA.CH0.CTRL = ADC_CH_GAIN_1X_gc | ADC_CH_INPUTMODE_DIFFWGAIN_gc;  // use differential gain (x1)
    29c8:	93 e0       	ldi	r25, 0x03	; 3
    29ca:	90 a3       	std	Z+32, r25	; 0x20

    // set-up interrupts
    ADCA.CH0.INTCTRL = ADC_CH_INTLVL1_bm;    // interrupts on conversion completion with MED priority
    29cc:	92 e0       	ldi	r25, 0x02	; 2
    29ce:	92 a3       	std	Z+34, r25	; 0x22

    // start conversion/clear interrupts
    ADCA.CH0.INTFLAGS = ADC_CH_CHIF_bm;
    29d0:	83 a3       	std	Z+35, r24	; 0x23
    ADCA.CH0.CTRL |= ADC_CH_START_bm;
    29d2:	80 a1       	ldd	r24, Z+32	; 0x20
    29d4:	80 68       	ori	r24, 0x80	; 128
    29d6:	80 a3       	std	Z+32, r24	; 0x20
    29d8:	08 95       	ret

000029da <rejuvenateHWMic>:
}

void rejuvenateHWMic(void)
{
    // set as outputs
    PORTA.DIRSET = PIN0_bm;
    29da:	e0 e0       	ldi	r30, 0x00	; 0
    29dc:	f6 e0       	ldi	r31, 0x06	; 6
    29de:	91 e0       	ldi	r25, 0x01	; 1
    29e0:	91 83       	std	Z+1, r25	; 0x01
    PORTA.DIRSET = PIN5_bm;
    29e2:	80 e2       	ldi	r24, 0x20	; 32
    29e4:	81 83       	std	Z+1, r24	; 0x01

    // drive both back to zero
    PORTA.OUTCLR = PIN0_bm;
    29e6:	96 83       	std	Z+6, r25	; 0x06
    PORTA.OUTCLR = PIN5_bm;
    29e8:	86 83       	std	Z+6, r24	; 0x06

    // reset as inputs
    PORTA.DIRCLR = PIN0_bm;
    29ea:	92 83       	std	Z+2, r25	; 0x02
    PORTA.DIRCLR = PIN5_bm;
    29ec:	82 83       	std	Z+2, r24	; 0x02
    29ee:	08 95       	ret

000029f0 <__vector_71>:

}

ISR(ADCA_CH0_vect)
{
    29f0:	1f 92       	push	r1
    29f2:	0f 92       	push	r0
    29f4:	0f b6       	in	r0, 0x3f	; 63
    29f6:	0f 92       	push	r0
    29f8:	11 24       	eor	r1, r1
    29fa:	0b b6       	in	r0, 0x3b	; 59
    29fc:	0f 92       	push	r0
    29fe:	2f 93       	push	r18
    2a00:	3f 93       	push	r19
    2a02:	4f 93       	push	r20
    2a04:	5f 93       	push	r21
    2a06:	6f 93       	push	r22
    2a08:	7f 93       	push	r23
    2a0a:	8f 93       	push	r24
    2a0c:	9f 93       	push	r25
    2a0e:	af 93       	push	r26
    2a10:	bf 93       	push	r27
    2a12:	cf 93       	push	r28
    2a14:	df 93       	push	r29
    2a16:	ef 93       	push	r30
    2a18:	ff 93       	push	r31
    ADCA.CH0.INTFLAGS |= ADC_CH_CHIF_bm;
    2a1a:	c0 e0       	ldi	r28, 0x00	; 0
    2a1c:	d2 e0       	ldi	r29, 0x02	; 2
    2a1e:	8b a1       	ldd	r24, Y+35	; 0x23
    2a20:	81 60       	ori	r24, 0x01	; 1
    2a22:	8b a3       	std	Y+35, r24	; 0x23
    
    // update the data
    updateHWMic();
    2a24:	0e 94 c8 14 	call	0x2990	; 0x2990 <updateHWMic>

    // restart the conversion
    ADCA.CH0.CTRL |= ADC_CH_START_bm;
    2a28:	88 a1       	ldd	r24, Y+32	; 0x20
    2a2a:	80 68       	ori	r24, 0x80	; 128
    2a2c:	88 a3       	std	Y+32, r24	; 0x20
}
    2a2e:	ff 91       	pop	r31
    2a30:	ef 91       	pop	r30
    2a32:	df 91       	pop	r29
    2a34:	cf 91       	pop	r28
    2a36:	bf 91       	pop	r27
    2a38:	af 91       	pop	r26
    2a3a:	9f 91       	pop	r25
    2a3c:	8f 91       	pop	r24
    2a3e:	7f 91       	pop	r23
    2a40:	6f 91       	pop	r22
    2a42:	5f 91       	pop	r21
    2a44:	4f 91       	pop	r20
    2a46:	3f 91       	pop	r19
    2a48:	2f 91       	pop	r18
    2a4a:	0f 90       	pop	r0
    2a4c:	0b be       	out	0x3b, r0	; 59
    2a4e:	0f 90       	pop	r0
    2a50:	0f be       	out	0x3f, r0	; 63
    2a52:	0f 90       	pop	r0
    2a54:	1f 90       	pop	r1
    2a56:	18 95       	reti

00002a58 <timer_set>:
		}
	}
*/

void timer_set( uint32_t bps, TC0_t * tx_timer, TC1_t * rx_timer)
{
    2a58:	6f 92       	push	r6
    2a5a:	7f 92       	push	r7
    2a5c:	8f 92       	push	r8
    2a5e:	9f 92       	push	r9
    2a60:	af 92       	push	r10
    2a62:	bf 92       	push	r11
    2a64:	cf 92       	push	r12
    2a66:	df 92       	push	r13
    2a68:	ef 92       	push	r14
    2a6a:	ff 92       	push	r15
    2a6c:	0f 93       	push	r16
    2a6e:	1f 93       	push	r17
    2a70:	cf 93       	push	r28
    2a72:	df 93       	push	r29
    2a74:	4b 01       	movw	r8, r22
    2a76:	5c 01       	movw	r10, r24
    2a78:	8a 01       	movw	r16, r20
    2a7a:	e9 01       	movw	r28, r18
	uint16_t per;
	
	per = ((uint32_t)F_CPU / (bps));
    2a7c:	c1 2c       	mov	r12, r1
    2a7e:	88 e4       	ldi	r24, 0x48	; 72
    2a80:	d8 2e       	mov	r13, r24
    2a82:	88 ee       	ldi	r24, 0xE8	; 232
    2a84:	e8 2e       	mov	r14, r24
    2a86:	ff 24       	eor	r15, r15
    2a88:	f3 94       	inc	r15
    2a8a:	c7 01       	movw	r24, r14
    2a8c:	b6 01       	movw	r22, r12
    2a8e:	a5 01       	movw	r20, r10
    2a90:	94 01       	movw	r18, r8
    2a92:	0e 94 2b 3b 	call	0x7656	; 0x7656 <__udivmodsi4>

	tx_timer->INTCTRLA = TC_OVFINTLVL_HI_gc;
    2a96:	93 e0       	ldi	r25, 0x03	; 3
    2a98:	69 2e       	mov	r6, r25
    2a9a:	f8 01       	movw	r30, r16
    2a9c:	66 82       	std	Z+6, r6	; 0x06
	tx_timer->PER = per;
    2a9e:	26 a3       	std	Z+38, r18	; 0x26
    2aa0:	37 a3       	std	Z+39, r19	; 0x27
	tx_timer->CTRLA = TC_CLKSEL_DIV1_gc;
    2aa2:	77 24       	eor	r7, r7
    2aa4:	73 94       	inc	r7
    2aa6:	70 82       	st	Z, r7
	
//	printf("TCE0 set to %x %x %x\r\n",tx_timer->INTCTRLA, tx_timer->PER, tx_timer->CTRLA);
	
	per = ((uint32_t)F_CPU / (bps*3));	
    2aa8:	a3 e0       	ldi	r26, 0x03	; 3
    2aaa:	b0 e0       	ldi	r27, 0x00	; 0
    2aac:	a5 01       	movw	r20, r10
    2aae:	94 01       	movw	r18, r8
    2ab0:	0e 94 08 3b 	call	0x7610	; 0x7610 <__muluhisi3>
    2ab4:	9b 01       	movw	r18, r22
    2ab6:	ac 01       	movw	r20, r24
    2ab8:	c7 01       	movw	r24, r14
    2aba:	b6 01       	movw	r22, r12
    2abc:	0e 94 2b 3b 	call	0x7656	; 0x7656 <__udivmodsi4>
	//per = 31; // bps*9
	
	rx_timer->INTCTRLA = TC_OVFINTLVL_HI_gc;
    2ac0:	6e 82       	std	Y+6, r6	; 0x06
	rx_timer->PER = per;
    2ac2:	2e a3       	std	Y+38, r18	; 0x26
    2ac4:	3f a3       	std	Y+39, r19	; 0x27
	rx_timer->CTRLA = TC_CLKSEL_DIV1_gc;	
    2ac6:	78 82       	st	Y, r7
}
    2ac8:	df 91       	pop	r29
    2aca:	cf 91       	pop	r28
    2acc:	1f 91       	pop	r17
    2ace:	0f 91       	pop	r16
    2ad0:	ff 90       	pop	r15
    2ad2:	ef 90       	pop	r14
    2ad4:	df 90       	pop	r13
    2ad6:	cf 90       	pop	r12
    2ad8:	bf 90       	pop	r11
    2ada:	af 90       	pop	r10
    2adc:	9f 90       	pop	r9
    2ade:	8f 90       	pop	r8
    2ae0:	7f 90       	pop	r7
    2ae2:	6f 90       	pop	r6
    2ae4:	08 95       	ret

00002ae6 <configure_soft_uart>:

void configure_soft_uart(soft_uart_t * uart, CircBuf * ctx, CircBuf * crx)
{
    2ae6:	fc 01       	movw	r30, r24
	uart->rx = crx;
    2ae8:	40 87       	std	Z+8, r20	; 0x08
    2aea:	51 87       	std	Z+9, r21	; 0x09
	uart->tx = ctx;
    2aec:	66 83       	std	Z+6, r22	; 0x06
    2aee:	77 83       	std	Z+7, r23	; 0x07
	uart->internal_rx_buffer =  0;
    2af0:	10 82       	st	Z, r1
	uart->internal_tx_buffer  = 0;
    2af2:	11 82       	std	Z+1, r1	; 0x01
    2af4:	12 82       	std	Z+2, r1	; 0x02
    2af6:	08 95       	ret

00002af8 <init_soft_uart>:
}

void init_soft_uart()
{
	PORTD.OUTSET = PIN5_bm | PIN6_bm; // set tx output high (idle)
    2af8:	e0 e6       	ldi	r30, 0x60	; 96
    2afa:	f6 e0       	ldi	r31, 0x06	; 6
    2afc:	80 e6       	ldi	r24, 0x60	; 96
    2afe:	85 83       	std	Z+5, r24	; 0x05
	PORTD.DIRSET = PIN5_bm | PIN6_bm; // tx pins as output
    2b00:	81 83       	std	Z+1, r24	; 0x01
	PORTD.DIRCLR = PIN4_bm | PIN7_bm; // rx pins as input
    2b02:	80 e9       	ldi	r24, 0x90	; 144
    2b04:	82 83       	std	Z+2, r24	; 0x02
	
	PORTD.PIN4CTRL |= PORT_OPC_PULLUP_gc;	// set pullups on rx lines to prevent floating noise
    2b06:	84 89       	ldd	r24, Z+20	; 0x14
    2b08:	88 61       	ori	r24, 0x18	; 24
    2b0a:	84 8b       	std	Z+20, r24	; 0x14
	PORTD.PIN7CTRL |= PORT_OPC_PULLUP_gc;	
    2b0c:	87 89       	ldd	r24, Z+23	; 0x17
    2b0e:	88 61       	ori	r24, 0x18	; 24
    2b10:	87 8b       	std	Z+23, r24	; 0x17

	soft_uart[1].rx_state = SU_RX_IDLE;
    2b12:	10 92 c3 2e 	sts	0x2EC3, r1
{
	uint16_t per;
	
	per = ((uint32_t)F_CPU / (bps));

	tx_timer->INTCTRLA = TC_OVFINTLVL_HI_gc;
    2b16:	e0 e0       	ldi	r30, 0x00	; 0
    2b18:	fa e0       	ldi	r31, 0x0A	; 10
    2b1a:	33 e0       	ldi	r19, 0x03	; 3
    2b1c:	36 83       	std	Z+6, r19	; 0x06
	tx_timer->PER = per;
    2b1e:	81 e4       	ldi	r24, 0x41	; 65
    2b20:	93 e0       	ldi	r25, 0x03	; 3
    2b22:	86 a3       	std	Z+38, r24	; 0x26
    2b24:	97 a3       	std	Z+39, r25	; 0x27
	tx_timer->CTRLA = TC_CLKSEL_DIV1_gc;
    2b26:	21 e0       	ldi	r18, 0x01	; 1
    2b28:	20 83       	st	Z, r18
//	printf("TCE0 set to %x %x %x\r\n",tx_timer->INTCTRLA, tx_timer->PER, tx_timer->CTRLA);
	
	per = ((uint32_t)F_CPU / (bps*3));	
	//per = 31; // bps*9
	
	rx_timer->INTCTRLA = TC_OVFINTLVL_HI_gc;
    2b2a:	e0 e4       	ldi	r30, 0x40	; 64
    2b2c:	f9 e0       	ldi	r31, 0x09	; 9
    2b2e:	36 83       	std	Z+6, r19	; 0x06
	rx_timer->PER = per;
    2b30:	85 e1       	ldi	r24, 0x15	; 21
    2b32:	91 e0       	ldi	r25, 0x01	; 1
    2b34:	86 a3       	std	Z+38, r24	; 0x26
    2b36:	97 a3       	std	Z+39, r25	; 0x27
	rx_timer->CTRLA = TC_CLKSEL_DIV1_gc;	
    2b38:	20 83       	st	Z, r18
    2b3a:	08 95       	ret

00002b3c <su_getchar>:

	timer_set( BAUD_RATE, &TCE0, &TCD1);	
}

int su_getchar(soft_uart_t * uart)
{
    2b3c:	cf 93       	push	r28
    2b3e:	df 93       	push	r29
    2b40:	ec 01       	movw	r28, r24
	char		ch;

	if(isEmpty((uart->rx)))
    2b42:	88 85       	ldd	r24, Y+8	; 0x08
    2b44:	99 85       	ldd	r25, Y+9	; 0x09
    2b46:	0e 94 cc 01 	call	0x398	; 0x398 <isEmpty>
    2b4a:	81 11       	cpse	r24, r1
    2b4c:	07 c0       	rjmp	.+14     	; 0x2b5c <su_getchar+0x20>
	{
		return -1;
	}
	else
	{	
		ch = pop((uart->rx));
    2b4e:	88 85       	ldd	r24, Y+8	; 0x08
    2b50:	99 85       	ldd	r25, Y+9	; 0x09
    2b52:	0e 94 b1 01 	call	0x362	; 0x362 <pop>
    2b56:	9c 01       	movw	r18, r24
		return( ch );
    2b58:	33 27       	eor	r19, r19
    2b5a:	02 c0       	rjmp	.+4      	; 0x2b60 <su_getchar+0x24>
{
	char		ch;

	if(isEmpty((uart->rx)))
	{
		return -1;
    2b5c:	2f ef       	ldi	r18, 0xFF	; 255
    2b5e:	3f ef       	ldi	r19, 0xFF	; 255
	else
	{	
		ch = pop((uart->rx));
		return( ch );
	}
}
    2b60:	c9 01       	movw	r24, r18
    2b62:	df 91       	pop	r29
    2b64:	cf 91       	pop	r28
    2b66:	08 95       	ret

00002b68 <set_tx_char>:

void set_tx_char(int ch, soft_uart_t * uart)
{
	if(ch != -1)
    2b68:	8f 3f       	cpi	r24, 0xFF	; 255
    2b6a:	2f ef       	ldi	r18, 0xFF	; 255
    2b6c:	92 07       	cpc	r25, r18
    2b6e:	31 f0       	breq	.+12     	; 0x2b7c <set_tx_char+0x14>
	{
		uart->internal_tx_buffer = (ch << 1) | 0x200;
    2b70:	88 0f       	add	r24, r24
    2b72:	99 1f       	adc	r25, r25
    2b74:	92 60       	ori	r25, 0x02	; 2
    2b76:	fb 01       	movw	r30, r22
    2b78:	81 83       	std	Z+1, r24	; 0x01
    2b7a:	92 83       	std	Z+2, r25	; 0x02
    2b7c:	08 95       	ret

00002b7e <su_putchar>:
	}
}

void su_putchar( char ch, soft_uart_t * uart)
{	
	while ( uart->internal_tx_buffer != 0 );
    2b7e:	fb 01       	movw	r30, r22
    2b80:	21 81       	ldd	r18, Z+1	; 0x01
    2b82:	32 81       	ldd	r19, Z+2	; 0x02
    2b84:	23 2b       	or	r18, r19
    2b86:	d9 f7       	brne	.-10     	; 0x2b7e <su_putchar>
	
	set_tx_char(ch, uart);
    2b88:	90 e0       	ldi	r25, 0x00	; 0
    2b8a:	0c 94 b4 15 	jmp	0x2b68	; 0x2b68 <set_tx_char>

00002b8e <kbhit>:

}

int kbhit( soft_uart_t * uart )
{
	return( !isEmpty(uart->rx));
    2b8e:	fc 01       	movw	r30, r24
    2b90:	80 85       	ldd	r24, Z+8	; 0x08
    2b92:	91 85       	ldd	r25, Z+9	; 0x09
    2b94:	0e 94 cc 01 	call	0x398	; 0x398 <isEmpty>
    2b98:	21 e0       	ldi	r18, 0x01	; 1
    2b9a:	30 e0       	ldi	r19, 0x00	; 0
    2b9c:	88 23       	and	r24, r24
    2b9e:	11 f0       	breq	.+4      	; 0x2ba4 <kbhit+0x16>
    2ba0:	20 e0       	ldi	r18, 0x00	; 0
    2ba2:	30 e0       	ldi	r19, 0x00	; 0
}
    2ba4:	c9 01       	movw	r24, r18
    2ba6:	08 95       	ret

00002ba8 <__vector_83>:

// rx ISR
ISR(TCD1_OVF_vect)
{
    2ba8:	1f 92       	push	r1
    2baa:	0f 92       	push	r0
    2bac:	0f b6       	in	r0, 0x3f	; 63
    2bae:	0f 92       	push	r0
    2bb0:	11 24       	eor	r1, r1
    2bb2:	0b b6       	in	r0, 0x3b	; 59
    2bb4:	0f 92       	push	r0
    2bb6:	2f 93       	push	r18
    2bb8:	3f 93       	push	r19
    2bba:	4f 93       	push	r20
    2bbc:	5f 93       	push	r21
    2bbe:	6f 93       	push	r22
    2bc0:	7f 93       	push	r23
    2bc2:	8f 93       	push	r24
    2bc4:	9f 93       	push	r25
    2bc6:	af 93       	push	r26
    2bc8:	bf 93       	push	r27
    2bca:	ef 93       	push	r30
    2bcc:	ff 93       	push	r31
	if(!soft_uart[0].sample_time)
    2bce:	80 91 ba 2e 	lds	r24, 0x2EBA
    2bd2:	81 11       	cpse	r24, r1
    2bd4:	3b c0       	rjmp	.+118    	; 0x2c4c <__vector_83+0xa4>
	{
		if(soft_uart[0].rx_state == SU_RX_IDLE)
    2bd6:	80 91 b9 2e 	lds	r24, 0x2EB9
    2bda:	81 11       	cpse	r24, r1
    2bdc:	0b c0       	rjmp	.+22     	; 0x2bf4 <__vector_83+0x4c>
		{
			if(!(PORTD.IN & PIN4_bm))
    2bde:	80 91 68 06 	lds	r24, 0x0668
    2be2:	84 fd       	sbrc	r24, 4
    2be4:	36 c0       	rjmp	.+108    	; 0x2c52 <__vector_83+0xaa>
			{
				soft_uart[0].rx_state = SU_RX_BYTE;
    2be6:	81 e0       	ldi	r24, 0x01	; 1
    2be8:	80 93 b9 2e 	sts	0x2EB9, r24
				soft_uart[0].rx_mask = 0x01;
    2bec:	80 93 b8 2e 	sts	0x2EB8, r24
				soft_uart[0].sample_time = 3;	// begin sampling every third time
    2bf0:	83 e0       	ldi	r24, 0x03	; 3
    2bf2:	2d c0       	rjmp	.+90     	; 0x2c4e <__vector_83+0xa6>
			}
		}
		else if (soft_uart[0].rx_state == SU_RX_BYTE)
    2bf4:	81 30       	cpi	r24, 0x01	; 1
    2bf6:	b9 f4       	brne	.+46     	; 0x2c26 <__vector_83+0x7e>
		{
			if(PORTD.IN & PIN4_bm)
    2bf8:	80 91 68 06 	lds	r24, 0x0668
    2bfc:	84 ff       	sbrs	r24, 4
    2bfe:	07 c0       	rjmp	.+14     	; 0x2c0e <__vector_83+0x66>
			{
				soft_uart[0].internal_rx_buffer |= soft_uart[0].rx_mask;
    2c00:	80 91 b5 2e 	lds	r24, 0x2EB5
    2c04:	90 91 b8 2e 	lds	r25, 0x2EB8
    2c08:	89 2b       	or	r24, r25
    2c0a:	80 93 b5 2e 	sts	0x2EB5, r24
			}
			
			soft_uart[0].rx_mask <<= 1;
    2c0e:	80 91 b8 2e 	lds	r24, 0x2EB8
    2c12:	88 0f       	add	r24, r24
    2c14:	80 93 b8 2e 	sts	0x2EB8, r24

			if(!soft_uart[0].rx_mask)
    2c18:	81 11       	cpse	r24, r1
    2c1a:	03 c0       	rjmp	.+6      	; 0x2c22 <__vector_83+0x7a>
			{
				soft_uart[0].rx_state = SU_RX_STOP;
    2c1c:	82 e0       	ldi	r24, 0x02	; 2
    2c1e:	80 93 b9 2e 	sts	0x2EB9, r24
			}
			
			soft_uart[0].sample_time = 2;	
    2c22:	82 e0       	ldi	r24, 0x02	; 2
    2c24:	14 c0       	rjmp	.+40     	; 0x2c4e <__vector_83+0xa6>
		}
		else if (soft_uart[0].rx_state == SU_RX_STOP)
    2c26:	82 30       	cpi	r24, 0x02	; 2
    2c28:	a1 f4       	brne	.+40     	; 0x2c52 <__vector_83+0xaa>
		{
			if(PORTD.IN & PIN4_bm)
    2c2a:	80 91 68 06 	lds	r24, 0x0668
    2c2e:	84 ff       	sbrs	r24, 4
    2c30:	0a c0       	rjmp	.+20     	; 0x2c46 <__vector_83+0x9e>
			{
				push(soft_uart[0].internal_rx_buffer, soft_uart[0].rx);
    2c32:	80 91 b5 2e 	lds	r24, 0x2EB5
    2c36:	60 91 bd 2e 	lds	r22, 0x2EBD
    2c3a:	70 91 be 2e 	lds	r23, 0x2EBE
    2c3e:	0e 94 96 01 	call	0x32c	; 0x32c <push>
				soft_uart[0].internal_rx_buffer = 0;
    2c42:	10 92 b5 2e 	sts	0x2EB5, r1
			}
			
			soft_uart[0].rx_state = SU_RX_IDLE;		
    2c46:	10 92 b9 2e 	sts	0x2EB9, r1
    2c4a:	03 c0       	rjmp	.+6      	; 0x2c52 <__vector_83+0xaa>
		}
	}
	else
	{
		soft_uart[0].sample_time--;
    2c4c:	81 50       	subi	r24, 0x01	; 1
    2c4e:	80 93 ba 2e 	sts	0x2EBA, r24
	}

	if(!soft_uart[1].sample_time)
    2c52:	80 91 c4 2e 	lds	r24, 0x2EC4
    2c56:	81 11       	cpse	r24, r1
    2c58:	3b c0       	rjmp	.+118    	; 0x2cd0 <__vector_83+0x128>
	{
		if(soft_uart[1].rx_state == SU_RX_IDLE)
    2c5a:	80 91 c3 2e 	lds	r24, 0x2EC3
    2c5e:	81 11       	cpse	r24, r1
    2c60:	0b c0       	rjmp	.+22     	; 0x2c78 <__vector_83+0xd0>
		{
			if(!(PORTD.IN & PIN7_bm))
    2c62:	80 91 68 06 	lds	r24, 0x0668
    2c66:	87 fd       	sbrc	r24, 7
    2c68:	36 c0       	rjmp	.+108    	; 0x2cd6 <__vector_83+0x12e>
			{
				soft_uart[1].rx_state = SU_RX_BYTE;
    2c6a:	81 e0       	ldi	r24, 0x01	; 1
    2c6c:	80 93 c3 2e 	sts	0x2EC3, r24
				soft_uart[1].rx_mask = 0x01;
    2c70:	80 93 c2 2e 	sts	0x2EC2, r24
				soft_uart[1].sample_time = 3;	// begin sampling every third time
    2c74:	83 e0       	ldi	r24, 0x03	; 3
    2c76:	2d c0       	rjmp	.+90     	; 0x2cd2 <__vector_83+0x12a>
			}
		}
		else if (soft_uart[1].rx_state == SU_RX_BYTE)
    2c78:	81 30       	cpi	r24, 0x01	; 1
    2c7a:	b9 f4       	brne	.+46     	; 0x2caa <__vector_83+0x102>
		{
			if(PORTD.IN & PIN7_bm)
    2c7c:	80 91 68 06 	lds	r24, 0x0668
    2c80:	87 ff       	sbrs	r24, 7
    2c82:	07 c0       	rjmp	.+14     	; 0x2c92 <__vector_83+0xea>
			{
				soft_uart[1].internal_rx_buffer |= soft_uart[1].rx_mask;
    2c84:	80 91 bf 2e 	lds	r24, 0x2EBF
    2c88:	90 91 c2 2e 	lds	r25, 0x2EC2
    2c8c:	89 2b       	or	r24, r25
    2c8e:	80 93 bf 2e 	sts	0x2EBF, r24
			}
			
			soft_uart[1].rx_mask <<= 1;
    2c92:	80 91 c2 2e 	lds	r24, 0x2EC2
    2c96:	88 0f       	add	r24, r24
    2c98:	80 93 c2 2e 	sts	0x2EC2, r24

			if(!soft_uart[1].rx_mask)
    2c9c:	81 11       	cpse	r24, r1
    2c9e:	03 c0       	rjmp	.+6      	; 0x2ca6 <__vector_83+0xfe>
			{
				soft_uart[1].rx_state = SU_RX_STOP;
    2ca0:	82 e0       	ldi	r24, 0x02	; 2
    2ca2:	80 93 c3 2e 	sts	0x2EC3, r24
			}
			
			soft_uart[1].sample_time = 2;	
    2ca6:	82 e0       	ldi	r24, 0x02	; 2
    2ca8:	14 c0       	rjmp	.+40     	; 0x2cd2 <__vector_83+0x12a>
		}
		else if (soft_uart[1].rx_state == SU_RX_STOP)
    2caa:	82 30       	cpi	r24, 0x02	; 2
    2cac:	a1 f4       	brne	.+40     	; 0x2cd6 <__vector_83+0x12e>
		{
			if(PORTD.IN & PIN7_bm)
    2cae:	80 91 68 06 	lds	r24, 0x0668
    2cb2:	87 ff       	sbrs	r24, 7
    2cb4:	0a c0       	rjmp	.+20     	; 0x2cca <__vector_83+0x122>
			{
				push(soft_uart[1].internal_rx_buffer, soft_uart[1].rx);
    2cb6:	80 91 bf 2e 	lds	r24, 0x2EBF
    2cba:	60 91 c7 2e 	lds	r22, 0x2EC7
    2cbe:	70 91 c8 2e 	lds	r23, 0x2EC8
    2cc2:	0e 94 96 01 	call	0x32c	; 0x32c <push>
				soft_uart[1].internal_rx_buffer = 0;
    2cc6:	10 92 bf 2e 	sts	0x2EBF, r1
			}
			
			soft_uart[1].rx_state = SU_RX_IDLE;		
    2cca:	10 92 c3 2e 	sts	0x2EC3, r1
    2cce:	03 c0       	rjmp	.+6      	; 0x2cd6 <__vector_83+0x12e>
		}
	}
	else
	{
		soft_uart[1].sample_time--;
    2cd0:	81 50       	subi	r24, 0x01	; 1
    2cd2:	80 93 c4 2e 	sts	0x2EC4, r24
	}	
}
    2cd6:	ff 91       	pop	r31
    2cd8:	ef 91       	pop	r30
    2cda:	bf 91       	pop	r27
    2cdc:	af 91       	pop	r26
    2cde:	9f 91       	pop	r25
    2ce0:	8f 91       	pop	r24
    2ce2:	7f 91       	pop	r23
    2ce4:	6f 91       	pop	r22
    2ce6:	5f 91       	pop	r21
    2ce8:	4f 91       	pop	r20
    2cea:	3f 91       	pop	r19
    2cec:	2f 91       	pop	r18
    2cee:	0f 90       	pop	r0
    2cf0:	0b be       	out	0x3b, r0	; 59
    2cf2:	0f 90       	pop	r0
    2cf4:	0f be       	out	0x3f, r0	; 63
    2cf6:	0f 90       	pop	r0
    2cf8:	1f 90       	pop	r1
    2cfa:	18 95       	reti

00002cfc <TWI_MasterInit>:
 */
void TWI_MasterInit(TWI_Master_t *twi,
                    TWI_t *module,
                    TWI_MASTER_INTLVL_t intLevel,
                    uint8_t baudRateRegisterSetting)
{
    2cfc:	fc 01       	movw	r30, r24
	twi->interface = module;
    2cfe:	60 83       	st	Z, r22
    2d00:	71 83       	std	Z+1, r23	; 0x01
	twi->interface->MASTER.CTRLA = intLevel |
    2d02:	48 63       	ori	r20, 0x38	; 56
    2d04:	db 01       	movw	r26, r22
    2d06:	11 96       	adiw	r26, 0x01	; 1
    2d08:	4c 93       	st	X, r20
	                               TWI_MASTER_RIEN_bm |
	                               TWI_MASTER_WIEN_bm |
	                               TWI_MASTER_ENABLE_bm;
	twi->interface->MASTER.BAUD = baudRateRegisterSetting;
    2d0a:	a0 81       	ld	r26, Z
    2d0c:	b1 81       	ldd	r27, Z+1	; 0x01
    2d0e:	15 96       	adiw	r26, 0x05	; 5
    2d10:	2c 93       	st	X, r18
	twi->interface->MASTER.STATUS = TWI_MASTER_BUSSTATE_IDLE_gc;
    2d12:	01 90       	ld	r0, Z+
    2d14:	f0 81       	ld	r31, Z
    2d16:	e0 2d       	mov	r30, r0
    2d18:	81 e0       	ldi	r24, 0x01	; 1
    2d1a:	84 83       	std	Z+4, r24	; 0x04
    2d1c:	08 95       	ret

00002d1e <TWI_MasterState>:
 *  \retval TWI_MASTER_BUSSTATE_BUSY_gc    Bus state is busy.
 */
TWI_MASTER_BUSSTATE_t TWI_MasterState(TWI_Master_t *twi)
{
	TWI_MASTER_BUSSTATE_t twi_status;
	twi_status = (TWI_MASTER_BUSSTATE_t) (twi->interface->MASTER.STATUS &
    2d1e:	dc 01       	movw	r26, r24
    2d20:	ed 91       	ld	r30, X+
    2d22:	fc 91       	ld	r31, X
    2d24:	84 81       	ldd	r24, Z+4	; 0x04
	                                      TWI_MASTER_BUSSTATE_gm);
	return twi_status;
}
    2d26:	83 70       	andi	r24, 0x03	; 3
    2d28:	08 95       	ret

00002d2a <TWI_MasterReady>:
 *  \retval true  If transaction could be started.
 *  \retval false If transaction could not be started.
 */
bool TWI_MasterReady(TWI_Master_t *twi)
{
	bool twi_status = (twi->status & TWIM_STATUS_READY);
    2d2a:	fc 01       	movw	r30, r24
    2d2c:	87 85       	ldd	r24, Z+15	; 0x0f
	return twi_status;
}
    2d2e:	80 e0       	ldi	r24, 0x00	; 0
    2d30:	08 95       	ret

00002d32 <TWI_MasterWriteRead>:
bool TWI_MasterWriteRead(TWI_Master_t *twi,
                         uint8_t address,
                         uint8_t *writeData,
                         uint8_t bytesToWrite,
                         uint8_t bytesToRead)
{
    2d32:	0f 93       	push	r16
    2d34:	cf 93       	push	r28
    2d36:	df 93       	push	r29
    2d38:	fc 01       	movw	r30, r24
	/*Parameter sanity check. */
	if (bytesToWrite > TWIM_WRITE_BUFFER_SIZE) {
    2d3a:	25 30       	cpi	r18, 0x05	; 5
    2d3c:	50 f5       	brcc	.+84     	; 0x2d92 <TWI_MasterWriteRead+0x60>
		return false;
	}
	if (bytesToRead > TWIM_READ_BUFFER_SIZE) {
    2d3e:	05 30       	cpi	r16, 0x05	; 5
    2d40:	40 f5       	brcc	.+80     	; 0x2d92 <TWI_MasterWriteRead+0x60>
		return false;
	}

	/*Initiate transaction if bus is ready. */
	if (twi->status == TWIM_STATUS_READY) {
    2d42:	87 85       	ldd	r24, Z+15	; 0x0f
    2d44:	81 11       	cpse	r24, r1
    2d46:	25 c0       	rjmp	.+74     	; 0x2d92 <TWI_MasterWriteRead+0x60>

		twi->status = TWIM_STATUS_BUSY;
    2d48:	81 e0       	ldi	r24, 0x01	; 1
    2d4a:	87 87       	std	Z+15, r24	; 0x0f
		twi->result = TWIM_RESULT_UNKNOWN;
    2d4c:	10 8a       	std	Z+16, r1	; 0x10

		twi->address = address<<1;
    2d4e:	66 0f       	add	r22, r22
    2d50:	62 83       	std	Z+2, r22	; 0x02
    2d52:	da 01       	movw	r26, r20

		/* Fill write data buffer. */
		for (uint8_t bufferIndex=0; bufferIndex < bytesToWrite; bufferIndex++) {
    2d54:	80 e0       	ldi	r24, 0x00	; 0
    2d56:	90 e0       	ldi	r25, 0x00	; 0
    2d58:	06 c0       	rjmp	.+12     	; 0x2d66 <TWI_MasterWriteRead+0x34>
			twi->writeData[bufferIndex] = writeData[bufferIndex];
    2d5a:	3d 91       	ld	r19, X+
    2d5c:	ef 01       	movw	r28, r30
    2d5e:	c8 0f       	add	r28, r24
    2d60:	d9 1f       	adc	r29, r25
    2d62:	3b 83       	std	Y+3, r19	; 0x03
    2d64:	01 96       	adiw	r24, 0x01	; 1
		twi->result = TWIM_RESULT_UNKNOWN;

		twi->address = address<<1;

		/* Fill write data buffer. */
		for (uint8_t bufferIndex=0; bufferIndex < bytesToWrite; bufferIndex++) {
    2d66:	82 17       	cp	r24, r18
    2d68:	c0 f3       	brcs	.-16     	; 0x2d5a <TWI_MasterWriteRead+0x28>
			twi->writeData[bufferIndex] = writeData[bufferIndex];
		}

		twi->bytesToWrite = bytesToWrite;
    2d6a:	23 87       	std	Z+11, r18	; 0x0b
		twi->bytesToRead = bytesToRead;
    2d6c:	04 87       	std	Z+12, r16	; 0x0c
		twi->bytesWritten = 0;
    2d6e:	15 86       	std	Z+13, r1	; 0x0d
		twi->bytesRead = 0;
    2d70:	16 86       	std	Z+14, r1	; 0x0e

		/* If write command, send the START condition + Address +
		 * 'R/_W = 0'
		 */
		if (twi->bytesToWrite > 0) {
    2d72:	83 85       	ldd	r24, Z+11	; 0x0b
    2d74:	88 23       	and	r24, r24
    2d76:	19 f0       	breq	.+6      	; 0x2d7e <TWI_MasterWriteRead+0x4c>
			uint8_t writeAddress = twi->address & ~0x01;
    2d78:	82 81       	ldd	r24, Z+2	; 0x02
    2d7a:	8e 7f       	andi	r24, 0xFE	; 254
    2d7c:	05 c0       	rjmp	.+10     	; 0x2d88 <TWI_MasterWriteRead+0x56>
		}

		/* If read command, send the START condition + Address +
		 * 'R/_W = 1'
		 */
		else if (twi->bytesToRead > 0) {
    2d7e:	84 85       	ldd	r24, Z+12	; 0x0c
    2d80:	88 23       	and	r24, r24
    2d82:	49 f0       	breq	.+18     	; 0x2d96 <TWI_MasterWriteRead+0x64>
			uint8_t readAddress = twi->address | 0x01;
    2d84:	82 81       	ldd	r24, Z+2	; 0x02
    2d86:	81 60       	ori	r24, 0x01	; 1
			twi->interface->MASTER.ADDR = readAddress;
    2d88:	01 90       	ld	r0, Z+
    2d8a:	f0 81       	ld	r31, Z
    2d8c:	e0 2d       	mov	r30, r0
    2d8e:	86 83       	std	Z+6, r24	; 0x06
    2d90:	02 c0       	rjmp	.+4      	; 0x2d96 <TWI_MasterWriteRead+0x64>
                         uint8_t bytesToWrite,
                         uint8_t bytesToRead)
{
	/*Parameter sanity check. */
	if (bytesToWrite > TWIM_WRITE_BUFFER_SIZE) {
		return false;
    2d92:	80 e0       	ldi	r24, 0x00	; 0
    2d94:	01 c0       	rjmp	.+2      	; 0x2d98 <TWI_MasterWriteRead+0x66>
		 */
		else if (twi->bytesToRead > 0) {
			uint8_t readAddress = twi->address | 0x01;
			twi->interface->MASTER.ADDR = readAddress;
		}
		return true;
    2d96:	81 e0       	ldi	r24, 0x01	; 1
	} else {
		return false;
	}
}
    2d98:	df 91       	pop	r29
    2d9a:	cf 91       	pop	r28
    2d9c:	0f 91       	pop	r16
    2d9e:	08 95       	ret

00002da0 <TWI_MasterRead>:
 *  \retval false If transaction could not be started.
 */
bool TWI_MasterRead(TWI_Master_t *twi,
                    uint8_t address,
                    uint8_t bytesToRead)
{
    2da0:	0f 93       	push	r16
	bool twi_status = TWI_MasterWriteRead(twi, address, 0, 0, bytesToRead);
    2da2:	04 2f       	mov	r16, r20
    2da4:	20 e0       	ldi	r18, 0x00	; 0
    2da6:	40 e0       	ldi	r20, 0x00	; 0
    2da8:	50 e0       	ldi	r21, 0x00	; 0
    2daa:	0e 94 99 16 	call	0x2d32	; 0x2d32 <TWI_MasterWriteRead>
	return twi_status;
}
    2dae:	0f 91       	pop	r16
    2db0:	08 95       	ret

00002db2 <TWI_MasterWrite>:
 */
bool TWI_MasterWrite(TWI_Master_t *twi,
                     uint8_t address,
                     uint8_t *writeData,
                     uint8_t bytesToWrite)
{
    2db2:	0f 93       	push	r16
	bool twi_status = TWI_MasterWriteRead(twi, address, writeData, bytesToWrite, 0);
    2db4:	00 e0       	ldi	r16, 0x00	; 0
    2db6:	0e 94 99 16 	call	0x2d32	; 0x2d32 <TWI_MasterWriteRead>
	return twi_status;
}
    2dba:	0f 91       	pop	r16
    2dbc:	08 95       	ret

00002dbe <TWI_MasterArbitrationLostBusErrorHandler>:
 *  Handles TWI responses to lost arbitration and bus error.
 *
 *  \param twi  The TWI_Master_t struct instance.
 */
void TWI_MasterArbitrationLostBusErrorHandler(TWI_Master_t *twi)
{
    2dbe:	fc 01       	movw	r30, r24
	uint8_t currentStatus = twi->interface->MASTER.STATUS;
    2dc0:	a0 81       	ld	r26, Z
    2dc2:	b1 81       	ldd	r27, Z+1	; 0x01
    2dc4:	14 96       	adiw	r26, 0x04	; 4
    2dc6:	8c 91       	ld	r24, X
    2dc8:	14 97       	sbiw	r26, 0x04	; 4

	/* If bus error. */
	if (currentStatus & TWI_MASTER_BUSERR_bm) {
    2dca:	82 ff       	sbrs	r24, 2
    2dcc:	02 c0       	rjmp	.+4      	; 0x2dd2 <TWI_MasterArbitrationLostBusErrorHandler+0x14>
		twi->result = TWIM_RESULT_BUS_ERROR;
    2dce:	94 e0       	ldi	r25, 0x04	; 4
    2dd0:	01 c0       	rjmp	.+2      	; 0x2dd4 <TWI_MasterArbitrationLostBusErrorHandler+0x16>
	}
	/* If arbitration lost. */
	else {
		twi->result = TWIM_RESULT_ARBITRATION_LOST;
    2dd2:	93 e0       	ldi	r25, 0x03	; 3
    2dd4:	90 8b       	std	Z+16, r25	; 0x10
	}

	/* Clear interrupt flag. */
	twi->interface->MASTER.STATUS = currentStatus | TWI_MASTER_ARBLOST_bm;
    2dd6:	88 60       	ori	r24, 0x08	; 8
    2dd8:	14 96       	adiw	r26, 0x04	; 4
    2dda:	8c 93       	st	X, r24

	twi->status = TWIM_STATUS_READY;
    2ddc:	17 86       	std	Z+15, r1	; 0x0f
    2dde:	08 95       	ret

00002de0 <TWI_MasterWriteHandler>:
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 *
 *  \param twi The TWI_Master_t struct instance.
 */
void TWI_MasterWriteHandler(TWI_Master_t *twi)
{
    2de0:	cf 93       	push	r28
    2de2:	df 93       	push	r29
    2de4:	fc 01       	movw	r30, r24
	/* Local variables used in if tests to avoid compiler warning. */
	uint8_t bytesToWrite  = twi->bytesToWrite;
    2de6:	93 85       	ldd	r25, Z+11	; 0x0b
	uint8_t bytesToRead   = twi->bytesToRead;
    2de8:	84 85       	ldd	r24, Z+12	; 0x0c

	/* If NOT acknowledged (NACK) by slave cancel the transaction. */
	if (twi->interface->MASTER.STATUS & TWI_MASTER_RXACK_bm) {
    2dea:	a0 81       	ld	r26, Z
    2dec:	b1 81       	ldd	r27, Z+1	; 0x01
    2dee:	14 96       	adiw	r26, 0x04	; 4
    2df0:	2c 91       	ld	r18, X
    2df2:	14 97       	sbiw	r26, 0x04	; 4
    2df4:	24 ff       	sbrs	r18, 4
    2df6:	05 c0       	rjmp	.+10     	; 0x2e02 <TWI_MasterWriteHandler+0x22>
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    2df8:	83 e0       	ldi	r24, 0x03	; 3
    2dfa:	13 96       	adiw	r26, 0x03	; 3
    2dfc:	8c 93       	st	X, r24
		twi->result = TWIM_RESULT_NACK_RECEIVED;
    2dfe:	85 e0       	ldi	r24, 0x05	; 5
    2e00:	1a c0       	rjmp	.+52     	; 0x2e36 <TWI_MasterWriteHandler+0x56>
		twi->status = TWIM_STATUS_READY;
	}

	/* If more bytes to write, send data. */
	else if (twi->bytesWritten < bytesToWrite) {
    2e02:	25 85       	ldd	r18, Z+13	; 0x0d
    2e04:	29 17       	cp	r18, r25
    2e06:	58 f4       	brcc	.+22     	; 0x2e1e <TWI_MasterWriteHandler+0x3e>
		uint8_t data = twi->writeData[twi->bytesWritten];
    2e08:	85 85       	ldd	r24, Z+13	; 0x0d
    2e0a:	ef 01       	movw	r28, r30
    2e0c:	c8 0f       	add	r28, r24
    2e0e:	d1 1d       	adc	r29, r1
    2e10:	8b 81       	ldd	r24, Y+3	; 0x03
		twi->interface->MASTER.DATA = data;
    2e12:	17 96       	adiw	r26, 0x07	; 7
    2e14:	8c 93       	st	X, r24
		++twi->bytesWritten;
    2e16:	85 85       	ldd	r24, Z+13	; 0x0d
    2e18:	8f 5f       	subi	r24, 0xFF	; 255
    2e1a:	85 87       	std	Z+13, r24	; 0x0d
    2e1c:	0e c0       	rjmp	.+28     	; 0x2e3a <TWI_MasterWriteHandler+0x5a>
	}

	/* If bytes to read, send repeated START condition + Address +
	 * 'R/_W = 1'
	 */
	else if (twi->bytesRead < bytesToRead) {
    2e1e:	96 85       	ldd	r25, Z+14	; 0x0e
    2e20:	98 17       	cp	r25, r24
    2e22:	28 f4       	brcc	.+10     	; 0x2e2e <TWI_MasterWriteHandler+0x4e>
		uint8_t readAddress = twi->address | 0x01;
    2e24:	82 81       	ldd	r24, Z+2	; 0x02
    2e26:	81 60       	ori	r24, 0x01	; 1
		twi->interface->MASTER.ADDR = readAddress;
    2e28:	16 96       	adiw	r26, 0x06	; 6
    2e2a:	8c 93       	st	X, r24
    2e2c:	06 c0       	rjmp	.+12     	; 0x2e3a <TWI_MasterWriteHandler+0x5a>
	}

	/* If transaction finished, send STOP condition and set RESULT OK. */
	else {
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    2e2e:	83 e0       	ldi	r24, 0x03	; 3
    2e30:	13 96       	adiw	r26, 0x03	; 3
    2e32:	8c 93       	st	X, r24
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result)
{
	twi->result = result;
    2e34:	81 e0       	ldi	r24, 0x01	; 1
    2e36:	80 8b       	std	Z+16, r24	; 0x10
	twi->status = TWIM_STATUS_READY;
    2e38:	17 86       	std	Z+15, r1	; 0x0f
	/* If transaction finished, send STOP condition and set RESULT OK. */
	else {
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		TWI_MasterTransactionFinished(twi, TWIM_RESULT_OK);
	}
}
    2e3a:	df 91       	pop	r29
    2e3c:	cf 91       	pop	r28
    2e3e:	08 95       	ret

00002e40 <TWI_MasterReadHandler>:
 *  reading bytes from the TWI slave.
 *
 *  \param twi The TWI_Master_t struct instance.
 */
void TWI_MasterReadHandler(TWI_Master_t *twi)
{
    2e40:	fc 01       	movw	r30, r24
	/* Fetch data if bytes to be read. */
	if (twi->bytesRead < TWIM_READ_BUFFER_SIZE) {
    2e42:	86 85       	ldd	r24, Z+14	; 0x0e
    2e44:	a0 81       	ld	r26, Z
    2e46:	b1 81       	ldd	r27, Z+1	; 0x01
    2e48:	84 30       	cpi	r24, 0x04	; 4
    2e4a:	60 f4       	brcc	.+24     	; 0x2e64 <TWI_MasterReadHandler+0x24>
		uint8_t data = twi->interface->MASTER.DATA;
    2e4c:	17 96       	adiw	r26, 0x07	; 7
    2e4e:	8c 91       	ld	r24, X
		twi->readData[twi->bytesRead] = data;
    2e50:	96 85       	ldd	r25, Z+14	; 0x0e
    2e52:	df 01       	movw	r26, r30
    2e54:	a9 0f       	add	r26, r25
    2e56:	b1 1d       	adc	r27, r1
    2e58:	17 96       	adiw	r26, 0x07	; 7
    2e5a:	8c 93       	st	X, r24
		twi->bytesRead++;
    2e5c:	86 85       	ldd	r24, Z+14	; 0x0e
    2e5e:	8f 5f       	subi	r24, 0xFF	; 255
    2e60:	86 87       	std	Z+14, r24	; 0x0e
    2e62:	06 c0       	rjmp	.+12     	; 0x2e70 <TWI_MasterReadHandler+0x30>
	}

	/* If buffer overflow, issue STOP and BUFFER_OVERFLOW condition. */
	else {
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    2e64:	83 e0       	ldi	r24, 0x03	; 3
    2e66:	13 96       	adiw	r26, 0x03	; 3
    2e68:	8c 93       	st	X, r24
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result)
{
	twi->result = result;
    2e6a:	82 e0       	ldi	r24, 0x02	; 2
    2e6c:	80 8b       	std	Z+16, r24	; 0x10
	twi->status = TWIM_STATUS_READY;
    2e6e:	17 86       	std	Z+15, r1	; 0x0f
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		TWI_MasterTransactionFinished(twi, TWIM_RESULT_BUFFER_OVERFLOW);
	}

	/* Local variable used in if test to avoid compiler warning. */
	uint8_t bytesToRead = twi->bytesToRead;
    2e70:	84 85       	ldd	r24, Z+12	; 0x0c

	/* If more bytes to read, issue ACK and start a byte read. */
	if (twi->bytesRead < bytesToRead) {
    2e72:	96 85       	ldd	r25, Z+14	; 0x0e
    2e74:	a0 81       	ld	r26, Z
    2e76:	b1 81       	ldd	r27, Z+1	; 0x01
    2e78:	98 17       	cp	r25, r24
    2e7a:	20 f4       	brcc	.+8      	; 0x2e84 <TWI_MasterReadHandler+0x44>
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    2e7c:	82 e0       	ldi	r24, 0x02	; 2
    2e7e:	13 96       	adiw	r26, 0x03	; 3
    2e80:	8c 93       	st	X, r24
    2e82:	08 95       	ret
	}

	/* If transaction finished, issue NACK and STOP condition. */
	else {
		twi->interface->MASTER.CTRLC = TWI_MASTER_ACKACT_bm |
    2e84:	87 e0       	ldi	r24, 0x07	; 7
    2e86:	13 96       	adiw	r26, 0x03	; 3
    2e88:	8c 93       	st	X, r24
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result)
{
	twi->result = result;
    2e8a:	81 e0       	ldi	r24, 0x01	; 1
    2e8c:	80 8b       	std	Z+16, r24	; 0x10
	twi->status = TWIM_STATUS_READY;
    2e8e:	17 86       	std	Z+15, r1	; 0x0f
    2e90:	08 95       	ret

00002e92 <TWI_MasterInterruptHandler>:
 *
 *  \param twi  The TWI_Master_t struct instance.
 */
void TWI_MasterInterruptHandler(TWI_Master_t *twi)
{
	uint8_t currentStatus = twi->interface->MASTER.STATUS;
    2e92:	dc 01       	movw	r26, r24
    2e94:	ed 91       	ld	r30, X+
    2e96:	fc 91       	ld	r31, X
    2e98:	24 81       	ldd	r18, Z+4	; 0x04
 *
 *  Check current status and calls the appropriate handler.
 *
 *  \param twi  The TWI_Master_t struct instance.
 */
void TWI_MasterInterruptHandler(TWI_Master_t *twi)
    2e9a:	32 2f       	mov	r19, r18
    2e9c:	3c 70       	andi	r19, 0x0C	; 12
{
	uint8_t currentStatus = twi->interface->MASTER.STATUS;

	/* If arbitration lost or bus error. */
	if ((currentStatus & TWI_MASTER_ARBLOST_bm) ||
    2e9e:	11 f0       	breq	.+4      	; 0x2ea4 <TWI_MasterInterruptHandler+0x12>
	    (currentStatus & TWI_MASTER_BUSERR_bm)) {

		TWI_MasterArbitrationLostBusErrorHandler(twi);
    2ea0:	0c 94 df 16 	jmp	0x2dbe	; 0x2dbe <TWI_MasterArbitrationLostBusErrorHandler>
	}

	/* If master write interrupt. */
	else if (currentStatus & TWI_MASTER_WIF_bm) {
    2ea4:	26 fd       	sbrc	r18, 6
		TWI_MasterWriteHandler(twi);
    2ea6:	0c 94 f0 16 	jmp	0x2de0	; 0x2de0 <TWI_MasterWriteHandler>
	}

	/* If master read interrupt. */
	else if (currentStatus & TWI_MASTER_RIF_bm) {
    2eaa:	27 fd       	sbrc	r18, 7
		TWI_MasterReadHandler(twi);
    2eac:	0c 94 20 17 	jmp	0x2e40	; 0x2e40 <TWI_MasterReadHandler>
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result)
{
	twi->result = result;
    2eb0:	26 e0       	ldi	r18, 0x06	; 6
    2eb2:	fc 01       	movw	r30, r24
    2eb4:	20 8b       	std	Z+16, r18	; 0x10
	twi->status = TWIM_STATUS_READY;
    2eb6:	17 86       	std	Z+15, r1	; 0x0f
    2eb8:	08 95       	ret

00002eba <TWI_MasterTransactionFinished>:
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result)
{
	twi->result = result;
    2eba:	fc 01       	movw	r30, r24
    2ebc:	60 8b       	std	Z+16, r22	; 0x10
	twi->status = TWIM_STATUS_READY;
    2ebe:	17 86       	std	Z+15, r1	; 0x0f
    2ec0:	08 95       	ret

00002ec2 <initDebugUart>:
#endif

FILE debug;

void initDebugUart(USART_t * uart)
{
    2ec2:	fc 01       	movw	r30, r24
	uart->CTRLA = 0;	// disable RX/TX interrupts
    2ec4:	13 82       	std	Z+3, r1	; 0x03
	uart->CTRLB = USART_RXEN_bm | USART_TXEN_bm;
    2ec6:	88 e1       	ldi	r24, 0x18	; 24
    2ec8:	84 83       	std	Z+4, r24	; 0x04
	uart->CTRLC = USART_CHSIZE_8BIT_gc;
    2eca:	83 e0       	ldi	r24, 0x03	; 3
    2ecc:	85 83       	std	Z+5, r24	; 0x05
	uart->BAUDCTRLA = 16;  // 115200  103;	// 19200?!
    2ece:	80 e1       	ldi	r24, 0x10	; 16
    2ed0:	86 83       	std	Z+6, r24	; 0x06
	uart->BAUDCTRLB = 0;
    2ed2:	17 82       	std	Z+7, r1	; 0x07
    2ed4:	08 95       	ret

00002ed6 <debugPutChar>:
#ifdef DEBUG
    while(!(DEBUGUART.STATUS & USART_DREIF_bm));
    DEBUGUART.DATA = c;
#endif
    return 0;
}
    2ed6:	80 e0       	ldi	r24, 0x00	; 0
    2ed8:	90 e0       	ldi	r25, 0x00	; 0
    2eda:	08 95       	ret

00002edc <debugGetChar>:
	    return -1;
	}
#else
	return -1;
#endif
}
    2edc:	8f ef       	ldi	r24, 0xFF	; 255
    2ede:	9f ef       	ldi	r25, 0xFF	; 255
    2ee0:	08 95       	ret

00002ee2 <initHWDebug>:


void initHWDebug() 
{
    2ee2:	08 95       	ret

00002ee4 <free_chunk>:
{
	receive_tuple(1);
}

void free_chunk(void) {
	free(thisChunk);
    2ee4:	80 91 6d 29 	lds	r24, 0x296D
    2ee8:	90 91 6e 29 	lds	r25, 0x296E
    2eec:	0c 94 40 3c 	jmp	0x7880	; 0x7880 <free>

00002ef0 <tuple_alloc>:
extern unsigned char *arguments;
extern int *delta_sizes;

static inline tuple_t
tuple_alloc(tuple_type type)
{
    2ef0:	cf 93       	push	r28
    2ef2:	df 93       	push	r29
    2ef4:	ec 01       	movw	r28, r24
#ifdef TUPLE_ALLOC_CHECKS
  if(type >= NUM_TYPES || type < 0) {
    2ef6:	80 91 56 20 	lds	r24, 0x2056
    2efa:	90 e0       	ldi	r25, 0x00	; 0
    2efc:	c8 17       	cp	r28, r24
    2efe:	d9 07       	cpc	r29, r25
    2f00:	14 f4       	brge	.+4      	; 0x2f06 <tuple_alloc+0x16>
    2f02:	d7 ff       	sbrs	r29, 7
    2f04:	12 c0       	rjmp	.+36     	; 0x2f2a <tuple_alloc+0x3a>
    fprintf(stderr, "Unrecognized type: %d\n", type);
    2f06:	df 93       	push	r29
    2f08:	cf 93       	push	r28
    2f0a:	82 e9       	ldi	r24, 0x92	; 146
    2f0c:	94 e2       	ldi	r25, 0x24	; 36
    2f0e:	9f 93       	push	r25
    2f10:	8f 93       	push	r24
    2f12:	80 91 88 2f 	lds	r24, 0x2F88
    2f16:	8f 93       	push	r24
    2f18:	80 91 87 2f 	lds	r24, 0x2F87
    2f1c:	8f 93       	push	r24
    2f1e:	0e 94 45 3e 	call	0x7c8a	; 0x7c8a <fprintf>
    exit(EXIT_FAILURE);
    2f22:	8f ef       	ldi	r24, 0xFF	; 255
    2f24:	9f ef       	ldi	r25, 0xFF	; 255
    2f26:	0e 94 73 41 	call	0x82e6	; 0x82e6 <_exit>
  }
#endif
  
	tuple_t tuple = ALLOC_TUPLE(TYPE_SIZE(type));
    2f2a:	ce 01       	movw	r24, r28
    2f2c:	88 0f       	add	r24, r24
    2f2e:	99 1f       	adc	r25, r25
    2f30:	e0 91 3e 29 	lds	r30, 0x293E
    2f34:	f0 91 3f 29 	lds	r31, 0x293F
    2f38:	e8 0f       	add	r30, r24
    2f3a:	f9 1f       	adc	r31, r25
    2f3c:	81 81       	ldd	r24, Z+1	; 0x01
    2f3e:	90 e0       	ldi	r25, 0x00	; 0
    2f40:	0e 94 a5 3b 	call	0x774a	; 0x774a <malloc>
    2f44:	fc 01       	movw	r30, r24

	TUPLE_TYPE(tuple) = type;
    2f46:	c0 83       	st	Z, r28
#ifdef TUPLE_ALLOC_DEBUG
  printf("New %s(%d) tuple\n", tuple_names[type], type);
#endif

	return tuple;
}
    2f48:	8e 2f       	mov	r24, r30
    2f4a:	df 91       	pop	r29
    2f4c:	cf 91       	pop	r28
    2f4e:	08 95       	ret

00002f50 <enqueueNewTuple>:
				return -1;
		}
}

void enqueueNewTuple(tuple_t tuple, record_type isNew)
{
    2f50:	ef 92       	push	r14
    2f52:	ff 92       	push	r15
    2f54:	0f 93       	push	r16
    2f56:	1f 93       	push	r17
    2f58:	7b 01       	movw	r14, r22
		if (TYPE_IS_STRATIFIED(TUPLE_TYPE(tuple))) {
    2f5a:	dc 01       	movw	r26, r24
    2f5c:	ec 91       	ld	r30, X
    2f5e:	f0 e0       	ldi	r31, 0x00	; 0
    2f60:	ea 5a       	subi	r30, 0xAA	; 170
    2f62:	ff 4d       	sbci	r31, 0xDF	; 223
    2f64:	e1 81       	ldd	r30, Z+1	; 0x01
    2f66:	f0 e0       	ldi	r31, 0x00	; 0
    2f68:	e5 5a       	subi	r30, 0xA5	; 165
    2f6a:	ff 4d       	sbci	r31, 0xDF	; 223
    2f6c:	40 81       	ld	r20, Z
    2f6e:	44 23       	and	r20, r20
    2f70:	69 f0       	breq	.+26     	; 0x2f8c <enqueueNewTuple+0x3c>
			p_enqueue(newStratTuples, TYPE_STRATIFICATION_ROUND(TUPLE_TYPE(tuple)), tuple, NULL, isNew);
    2f72:	50 e0       	ldi	r21, 0x00	; 0
    2f74:	60 e0       	ldi	r22, 0x00	; 0
    2f76:	70 e0       	ldi	r23, 0x00	; 0
    2f78:	00 e0       	ldi	r16, 0x00	; 0
    2f7a:	10 e0       	ldi	r17, 0x00	; 0
    2f7c:	9c 01       	movw	r18, r24
    2f7e:	80 91 d7 2e 	lds	r24, 0x2ED7
    2f82:	90 91 d8 2e 	lds	r25, 0x2ED8
    2f86:	0e 94 86 1e 	call	0x3d0c	; 0x3d0c <p_enqueue>
    2f8a:	0c c0       	rjmp	.+24     	; 0x2fa4 <enqueueNewTuple+0x54>
		}
		else {
			queue_enqueue(newTuples, tuple, isNew);
    2f8c:	ab 01       	movw	r20, r22
    2f8e:	bc 01       	movw	r22, r24
    2f90:	80 91 5d 2f 	lds	r24, 0x2F5D
    2f94:	90 91 5e 2f 	lds	r25, 0x2F5E
		}
}
    2f98:	1f 91       	pop	r17
    2f9a:	0f 91       	pop	r16
    2f9c:	ff 90       	pop	r15
    2f9e:	ef 90       	pop	r14
{
		if (TYPE_IS_STRATIFIED(TUPLE_TYPE(tuple))) {
			p_enqueue(newStratTuples, TYPE_STRATIFICATION_ROUND(TUPLE_TYPE(tuple)), tuple, NULL, isNew);
		}
		else {
			queue_enqueue(newTuples, tuple, isNew);
    2fa0:	0c 94 39 1e 	jmp	0x3c72	; 0x3c72 <queue_enqueue>
		}
}
    2fa4:	1f 91       	pop	r17
    2fa6:	0f 91       	pop	r16
    2fa8:	ff 90       	pop	r15
    2faa:	ef 90       	pop	r14
    2fac:	08 95       	ret

00002fae <enqueue_tap>:
		enqueueNewTuple(tuple, (record_type) isNew);
}

static
void enqueue_tap(void)
{
    2fae:	cf 93       	push	r28
    2fb0:	df 93       	push	r29
		tuple_t tuple = tuple_alloc(TYPE_TAP);
    2fb2:	80 91 40 20 	lds	r24, 0x2040
    2fb6:	90 91 41 20 	lds	r25, 0x2041
    2fba:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <tuple_alloc>
    2fbe:	ec 01       	movw	r28, r24

		SET_TUPLE_FIELD(tuple, 0, &blockId);
    2fc0:	80 91 3e 29 	lds	r24, 0x293E
    2fc4:	90 91 3f 29 	lds	r25, 0x293F
    2fc8:	28 81       	ld	r18, Y
    2fca:	fc 01       	movw	r30, r24
    2fcc:	e2 0f       	add	r30, r18
    2fce:	f1 1d       	adc	r31, r1
    2fd0:	e2 0f       	add	r30, r18
    2fd2:	f1 1d       	adc	r31, r1
    2fd4:	20 81       	ld	r18, Z
    2fd6:	fc 01       	movw	r30, r24
    2fd8:	e2 0f       	add	r30, r18
    2fda:	f1 1d       	adc	r31, r1
    2fdc:	21 81       	ldd	r18, Z+1	; 0x01
    2fde:	30 e0       	ldi	r19, 0x00	; 0
    2fe0:	2f 5f       	subi	r18, 0xFF	; 255
    2fe2:	3f 4f       	sbci	r19, 0xFF	; 255
    2fe4:	2c 0f       	add	r18, r28
    2fe6:	3d 1f       	adc	r19, r29
    2fe8:	40 81       	ld	r20, Z
    2fea:	8b e5       	ldi	r24, 0x5B	; 91
    2fec:	9f e2       	ldi	r25, 0x2F	; 47
    2fee:	50 e0       	ldi	r21, 0x00	; 0
    2ff0:	bc 01       	movw	r22, r24
    2ff2:	c9 01       	movw	r24, r18
    2ff4:	0e 94 2c 3e 	call	0x7c58	; 0x7c58 <memcpy>

		enqueueNewTuple(tuple, (record_type) 1);
    2ff8:	61 e0       	ldi	r22, 0x01	; 1
    2ffa:	70 e0       	ldi	r23, 0x00	; 0
    2ffc:	ce 01       	movw	r24, r28
    2ffe:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <enqueueNewTuple>

		//#if DEBUG
		facts_dump();
		//#endif
}
    3002:	df 91       	pop	r29
    3004:	cf 91       	pop	r28
		SET_TUPLE_FIELD(tuple, 0, &blockId);

		enqueueNewTuple(tuple, (record_type) 1);

		//#if DEBUG
		facts_dump();
    3006:	0c 94 67 30 	jmp	0x60ce	; 0x60ce <facts_dump>

0000300a <enqueue_count>:
		enqueueNewTuple(tuple, (record_type) isNew);
}

static
void enqueue_count(meld_int count, int isNew)
{
    300a:	ef 92       	push	r14
    300c:	ff 92       	push	r15
    300e:	0f 93       	push	r16
    3010:	1f 93       	push	r17
    3012:	cf 93       	push	r28
    3014:	df 93       	push	r29
    3016:	00 d0       	rcall	.+0      	; 0x3018 <enqueue_count+0xe>
    3018:	1f 92       	push	r1
    301a:	cd b7       	in	r28, 0x3d	; 61
    301c:	de b7       	in	r29, 0x3e	; 62
    301e:	69 83       	std	Y+1, r22	; 0x01
    3020:	7a 83       	std	Y+2, r23	; 0x02
    3022:	8b 83       	std	Y+3, r24	; 0x03
    3024:	9c 83       	std	Y+4, r25	; 0x04
    3026:	7a 01       	movw	r14, r20
		tuple_t tuple = tuple_alloc(TYPE_NEIGHBORCOUNT);
    3028:	81 e0       	ldi	r24, 0x01	; 1
    302a:	90 e0       	ldi	r25, 0x00	; 0
    302c:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <tuple_alloc>
    3030:	8c 01       	movw	r16, r24

		SET_TUPLE_FIELD(tuple, 0, &blockId);
    3032:	80 91 3e 29 	lds	r24, 0x293E
    3036:	90 91 3f 29 	lds	r25, 0x293F
    303a:	f8 01       	movw	r30, r16
    303c:	20 81       	ld	r18, Z
    303e:	fc 01       	movw	r30, r24
    3040:	e2 0f       	add	r30, r18
    3042:	f1 1d       	adc	r31, r1
    3044:	e2 0f       	add	r30, r18
    3046:	f1 1d       	adc	r31, r1
    3048:	20 81       	ld	r18, Z
    304a:	fc 01       	movw	r30, r24
    304c:	e2 0f       	add	r30, r18
    304e:	f1 1d       	adc	r31, r1
    3050:	21 81       	ldd	r18, Z+1	; 0x01
    3052:	30 e0       	ldi	r19, 0x00	; 0
    3054:	2f 5f       	subi	r18, 0xFF	; 255
    3056:	3f 4f       	sbci	r19, 0xFF	; 255
    3058:	20 0f       	add	r18, r16
    305a:	31 1f       	adc	r19, r17
    305c:	40 81       	ld	r20, Z
    305e:	8b e5       	ldi	r24, 0x5B	; 91
    3060:	9f e2       	ldi	r25, 0x2F	; 47
    3062:	50 e0       	ldi	r21, 0x00	; 0
    3064:	bc 01       	movw	r22, r24
    3066:	c9 01       	movw	r24, r18
    3068:	0e 94 2c 3e 	call	0x7c58	; 0x7c58 <memcpy>
		SET_TUPLE_FIELD(tuple, 1, &count);
    306c:	80 91 3e 29 	lds	r24, 0x293E
    3070:	90 91 3f 29 	lds	r25, 0x293F
    3074:	f8 01       	movw	r30, r16
    3076:	20 81       	ld	r18, Z
    3078:	fc 01       	movw	r30, r24
    307a:	e2 0f       	add	r30, r18
    307c:	f1 1d       	adc	r31, r1
    307e:	e2 0f       	add	r30, r18
    3080:	f1 1d       	adc	r31, r1
    3082:	20 81       	ld	r18, Z
    3084:	fc 01       	movw	r30, r24
    3086:	e2 0f       	add	r30, r18
    3088:	f1 1d       	adc	r31, r1
    308a:	23 81       	ldd	r18, Z+3	; 0x03
    308c:	30 e0       	ldi	r19, 0x00	; 0
    308e:	2f 5f       	subi	r18, 0xFF	; 255
    3090:	3f 4f       	sbci	r19, 0xFF	; 255
    3092:	20 0f       	add	r18, r16
    3094:	31 1f       	adc	r19, r17
    3096:	42 81       	ldd	r20, Z+2	; 0x02
    3098:	50 e0       	ldi	r21, 0x00	; 0
    309a:	be 01       	movw	r22, r28
    309c:	6f 5f       	subi	r22, 0xFF	; 255
    309e:	7f 4f       	sbci	r23, 0xFF	; 255
    30a0:	c9 01       	movw	r24, r18
    30a2:	0e 94 2c 3e 	call	0x7c58	; 0x7c58 <memcpy>

		enqueueNewTuple(tuple, (record_type) isNew);
    30a6:	b7 01       	movw	r22, r14
    30a8:	c8 01       	movw	r24, r16
    30aa:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <enqueueNewTuple>
}
    30ae:	24 96       	adiw	r28, 0x04	; 4
    30b0:	cd bf       	out	0x3d, r28	; 61
    30b2:	de bf       	out	0x3e, r29	; 62
    30b4:	df 91       	pop	r29
    30b6:	cf 91       	pop	r28
    30b8:	1f 91       	pop	r17
    30ba:	0f 91       	pop	r16
    30bc:	ff 90       	pop	r15
    30be:	ef 90       	pop	r14
    30c0:	08 95       	ret

000030c2 <enqueue_face>:
			queue_enqueue(newTuples, tuple, isNew);
		}
}

void enqueue_face(NodeID neighbor, meld_int face, int isNew)
{
    30c2:	ef 92       	push	r14
    30c4:	ff 92       	push	r15
    30c6:	0f 93       	push	r16
    30c8:	1f 93       	push	r17
    30ca:	cf 93       	push	r28
    30cc:	df 93       	push	r29
    30ce:	cd b7       	in	r28, 0x3d	; 61
    30d0:	de b7       	in	r29, 0x3e	; 62
    30d2:	28 97       	sbiw	r28, 0x08	; 8
    30d4:	cd bf       	out	0x3d, r28	; 61
    30d6:	de bf       	out	0x3e, r29	; 62
    30d8:	8b 83       	std	Y+3, r24	; 0x03
    30da:	9c 83       	std	Y+4, r25	; 0x04
    30dc:	4d 83       	std	Y+5, r20	; 0x05
    30de:	5e 83       	std	Y+6, r21	; 0x06
    30e0:	6f 83       	std	Y+7, r22	; 0x07
    30e2:	78 87       	std	Y+8, r23	; 0x08
    30e4:	79 01       	movw	r14, r18
		tuple_t tuple = NULL;

		if (neighbor <= 0) {
    30e6:	89 2b       	or	r24, r25
    30e8:	f1 f5       	brne	.+124    	; 0x3166 <enqueue_face+0xa4>
				tuple = tuple_alloc(TYPE_VACANT);
    30ea:	82 e0       	ldi	r24, 0x02	; 2
    30ec:	90 e0       	ldi	r25, 0x00	; 0
    30ee:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <tuple_alloc>
    30f2:	8c 01       	movw	r16, r24
				SET_TUPLE_FIELD(tuple, 0, &blockId);
    30f4:	a0 91 3e 29 	lds	r26, 0x293E
    30f8:	b0 91 3f 29 	lds	r27, 0x293F
    30fc:	fc 01       	movw	r30, r24
    30fe:	80 81       	ld	r24, Z
    3100:	fd 01       	movw	r30, r26
    3102:	e8 0f       	add	r30, r24
    3104:	f1 1d       	adc	r31, r1
    3106:	e8 0f       	add	r30, r24
    3108:	f1 1d       	adc	r31, r1
    310a:	80 81       	ld	r24, Z
    310c:	a8 0f       	add	r26, r24
    310e:	b1 1d       	adc	r27, r1
    3110:	11 96       	adiw	r26, 0x01	; 1
    3112:	ec 91       	ld	r30, X
    3114:	11 97       	sbiw	r26, 0x01	; 1
    3116:	f0 e0       	ldi	r31, 0x00	; 0
    3118:	31 96       	adiw	r30, 0x01	; 1
    311a:	e0 0f       	add	r30, r16
    311c:	f1 1f       	adc	r31, r17
    311e:	4c 91       	ld	r20, X
    3120:	8b e5       	ldi	r24, 0x5B	; 91
    3122:	9f e2       	ldi	r25, 0x2F	; 47
    3124:	50 e0       	ldi	r21, 0x00	; 0
    3126:	bc 01       	movw	r22, r24
    3128:	cf 01       	movw	r24, r30
    312a:	0e 94 2c 3e 	call	0x7c58	; 0x7c58 <memcpy>
				SET_TUPLE_FIELD(tuple, 1, &face);
    312e:	a0 91 3e 29 	lds	r26, 0x293E
    3132:	b0 91 3f 29 	lds	r27, 0x293F
    3136:	f8 01       	movw	r30, r16
    3138:	80 81       	ld	r24, Z
    313a:	fd 01       	movw	r30, r26
    313c:	e8 0f       	add	r30, r24
    313e:	f1 1d       	adc	r31, r1
    3140:	e8 0f       	add	r30, r24
    3142:	f1 1d       	adc	r31, r1
    3144:	80 81       	ld	r24, Z
    3146:	a8 0f       	add	r26, r24
    3148:	b1 1d       	adc	r27, r1
    314a:	13 96       	adiw	r26, 0x03	; 3
    314c:	ec 91       	ld	r30, X
    314e:	13 97       	sbiw	r26, 0x03	; 3
    3150:	f0 e0       	ldi	r31, 0x00	; 0
    3152:	31 96       	adiw	r30, 0x01	; 1
    3154:	e0 0f       	add	r30, r16
    3156:	f1 1f       	adc	r31, r17
    3158:	12 96       	adiw	r26, 0x02	; 2
    315a:	4c 91       	ld	r20, X
    315c:	ce 01       	movw	r24, r28
    315e:	05 96       	adiw	r24, 0x05	; 5
    3160:	50 e0       	ldi	r21, 0x00	; 0
    3162:	bc 01       	movw	r22, r24
    3164:	7b c0       	rjmp	.+246    	; 0x325c <enqueue_face+0x19a>
		}
		else {
		  void *null = NULL;
    3166:	19 82       	std	Y+1, r1	; 0x01
    3168:	1a 82       	std	Y+2, r1	; 0x02

				tuple = tuple_alloc(TYPE_NEIGHBOR);
    316a:	80 e0       	ldi	r24, 0x00	; 0
    316c:	90 e0       	ldi	r25, 0x00	; 0
    316e:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <tuple_alloc>
    3172:	8c 01       	movw	r16, r24
				SET_TUPLE_FIELD(tuple, 0, &blockId);
    3174:	a0 91 3e 29 	lds	r26, 0x293E
    3178:	b0 91 3f 29 	lds	r27, 0x293F
    317c:	fc 01       	movw	r30, r24
    317e:	80 81       	ld	r24, Z
    3180:	fd 01       	movw	r30, r26
    3182:	e8 0f       	add	r30, r24
    3184:	f1 1d       	adc	r31, r1
    3186:	e8 0f       	add	r30, r24
    3188:	f1 1d       	adc	r31, r1
    318a:	80 81       	ld	r24, Z
    318c:	a8 0f       	add	r26, r24
    318e:	b1 1d       	adc	r27, r1
    3190:	11 96       	adiw	r26, 0x01	; 1
    3192:	ec 91       	ld	r30, X
    3194:	11 97       	sbiw	r26, 0x01	; 1
    3196:	f0 e0       	ldi	r31, 0x00	; 0
    3198:	31 96       	adiw	r30, 0x01	; 1
    319a:	e0 0f       	add	r30, r16
    319c:	f1 1f       	adc	r31, r17
    319e:	4c 91       	ld	r20, X
    31a0:	8b e5       	ldi	r24, 0x5B	; 91
    31a2:	9f e2       	ldi	r25, 0x2F	; 47
    31a4:	50 e0       	ldi	r21, 0x00	; 0
    31a6:	bc 01       	movw	r22, r24
    31a8:	cf 01       	movw	r24, r30
    31aa:	0e 94 2c 3e 	call	0x7c58	; 0x7c58 <memcpy>
				SET_TUPLE_FIELD(tuple, 1, &neighbor);
    31ae:	a0 91 3e 29 	lds	r26, 0x293E
    31b2:	b0 91 3f 29 	lds	r27, 0x293F
    31b6:	f8 01       	movw	r30, r16
    31b8:	80 81       	ld	r24, Z
    31ba:	fd 01       	movw	r30, r26
    31bc:	e8 0f       	add	r30, r24
    31be:	f1 1d       	adc	r31, r1
    31c0:	e8 0f       	add	r30, r24
    31c2:	f1 1d       	adc	r31, r1
    31c4:	80 81       	ld	r24, Z
    31c6:	a8 0f       	add	r26, r24
    31c8:	b1 1d       	adc	r27, r1
    31ca:	13 96       	adiw	r26, 0x03	; 3
    31cc:	ec 91       	ld	r30, X
    31ce:	13 97       	sbiw	r26, 0x03	; 3
    31d0:	f0 e0       	ldi	r31, 0x00	; 0
    31d2:	31 96       	adiw	r30, 0x01	; 1
    31d4:	e0 0f       	add	r30, r16
    31d6:	f1 1f       	adc	r31, r17
    31d8:	12 96       	adiw	r26, 0x02	; 2
    31da:	4c 91       	ld	r20, X
    31dc:	ce 01       	movw	r24, r28
    31de:	03 96       	adiw	r24, 0x03	; 3
    31e0:	50 e0       	ldi	r21, 0x00	; 0
    31e2:	bc 01       	movw	r22, r24
    31e4:	cf 01       	movw	r24, r30
    31e6:	0e 94 2c 3e 	call	0x7c58	; 0x7c58 <memcpy>
				SET_TUPLE_FIELD(tuple, 2, &face);
    31ea:	a0 91 3e 29 	lds	r26, 0x293E
    31ee:	b0 91 3f 29 	lds	r27, 0x293F
    31f2:	f8 01       	movw	r30, r16
    31f4:	80 81       	ld	r24, Z
    31f6:	fd 01       	movw	r30, r26
    31f8:	e8 0f       	add	r30, r24
    31fa:	f1 1d       	adc	r31, r1
    31fc:	e8 0f       	add	r30, r24
    31fe:	f1 1d       	adc	r31, r1
    3200:	80 81       	ld	r24, Z
    3202:	a8 0f       	add	r26, r24
    3204:	b1 1d       	adc	r27, r1
    3206:	15 96       	adiw	r26, 0x05	; 5
    3208:	ec 91       	ld	r30, X
    320a:	15 97       	sbiw	r26, 0x05	; 5
    320c:	f0 e0       	ldi	r31, 0x00	; 0
    320e:	31 96       	adiw	r30, 0x01	; 1
    3210:	e0 0f       	add	r30, r16
    3212:	f1 1f       	adc	r31, r17
    3214:	14 96       	adiw	r26, 0x04	; 4
    3216:	4c 91       	ld	r20, X
    3218:	ce 01       	movw	r24, r28
    321a:	05 96       	adiw	r24, 0x05	; 5
    321c:	50 e0       	ldi	r21, 0x00	; 0
    321e:	bc 01       	movw	r22, r24
    3220:	cf 01       	movw	r24, r30
    3222:	0e 94 2c 3e 	call	0x7c58	; 0x7c58 <memcpy>
				SET_TUPLE_FIELD(tuple, 3, &null);
    3226:	a0 91 3e 29 	lds	r26, 0x293E
    322a:	b0 91 3f 29 	lds	r27, 0x293F
    322e:	f8 01       	movw	r30, r16
    3230:	80 81       	ld	r24, Z
    3232:	fd 01       	movw	r30, r26
    3234:	e8 0f       	add	r30, r24
    3236:	f1 1d       	adc	r31, r1
    3238:	e8 0f       	add	r30, r24
    323a:	f1 1d       	adc	r31, r1
    323c:	80 81       	ld	r24, Z
    323e:	a8 0f       	add	r26, r24
    3240:	b1 1d       	adc	r27, r1
    3242:	17 96       	adiw	r26, 0x07	; 7
    3244:	ec 91       	ld	r30, X
    3246:	17 97       	sbiw	r26, 0x07	; 7
    3248:	f0 e0       	ldi	r31, 0x00	; 0
    324a:	31 96       	adiw	r30, 0x01	; 1
    324c:	e0 0f       	add	r30, r16
    324e:	f1 1f       	adc	r31, r17
    3250:	16 96       	adiw	r26, 0x06	; 6
    3252:	4c 91       	ld	r20, X
    3254:	50 e0       	ldi	r21, 0x00	; 0
    3256:	be 01       	movw	r22, r28
    3258:	6f 5f       	subi	r22, 0xFF	; 255
    325a:	7f 4f       	sbci	r23, 0xFF	; 255
    325c:	cf 01       	movw	r24, r30
    325e:	0e 94 2c 3e 	call	0x7c58	; 0x7c58 <memcpy>
		}

		enqueueNewTuple(tuple, (record_type) isNew);
    3262:	b7 01       	movw	r22, r14
    3264:	c8 01       	movw	r24, r16
    3266:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <enqueueNewTuple>
}
    326a:	28 96       	adiw	r28, 0x08	; 8
    326c:	cd bf       	out	0x3d, r28	; 61
    326e:	de bf       	out	0x3e, r29	; 62
    3270:	df 91       	pop	r29
    3272:	cf 91       	pop	r28
    3274:	1f 91       	pop	r17
    3276:	0f 91       	pop	r16
    3278:	ff 90       	pop	r15
    327a:	ef 90       	pop	r14
    327c:	08 95       	ret

0000327e <userRegistration>:
		}
}

void userRegistration(void)
{
		registerHandler(SYSTEM_MAIN, (GenericHandler)&meldMain);
    327e:	6e e8       	ldi	r22, 0x8E	; 142
    3280:	7b e1       	ldi	r23, 0x1B	; 27
    3282:	81 e0       	ldi	r24, 0x01	; 1
    3284:	0e 94 86 06 	call	0xd0c	; 0xd0c <registerHandler>
		registerHandler(EVENT_ACCEL_TAP, (GenericHandler)&enqueue_tap);
    3288:	67 ed       	ldi	r22, 0xD7	; 215
    328a:	77 e1       	ldi	r23, 0x17	; 23
    328c:	8c e0       	ldi	r24, 0x0C	; 12
    328e:	0c 94 86 06 	jmp	0xd0c	; 0xd0c <registerHandler>

00003292 <receive_tuple>:
		(*x<<56);
}
#endif

void receive_tuple(int isNew)
{
    3292:	df 92       	push	r13
    3294:	ef 92       	push	r14
    3296:	ff 92       	push	r15
    3298:	0f 93       	push	r16
    329a:	1f 93       	push	r17
    329c:	cf 93       	push	r28
    329e:	df 93       	push	r29
    32a0:	f8 2e       	mov	r15, r24
    32a2:	09 2f       	mov	r16, r25
  tuple_t rcvdTuple = (tuple_t)thisChunk->data;
    32a4:	c0 91 6d 29 	lds	r28, 0x296D
    32a8:	d0 91 6e 29 	lds	r29, 0x296E
  tuple_t tuple;
  size_t tuple_size = TYPE_SIZE(TUPLE_TYPE(rcvdTuple));
    32ac:	88 81       	ld	r24, Y
    32ae:	20 91 3e 29 	lds	r18, 0x293E
    32b2:	90 91 3f 29 	lds	r25, 0x293F
    32b6:	e2 2f       	mov	r30, r18
    32b8:	f9 2f       	mov	r31, r25
    32ba:	e8 0f       	add	r30, r24
    32bc:	f1 1d       	adc	r31, r1
    32be:	e8 0f       	add	r30, r24
    32c0:	f1 1d       	adc	r31, r1
    32c2:	11 81       	ldd	r17, Z+1	; 0x01

  tuple = malloc(tuple_size);
    32c4:	81 2f       	mov	r24, r17
    32c6:	90 e0       	ldi	r25, 0x00	; 0
    32c8:	0e 94 a5 3b 	call	0x774a	; 0x774a <malloc>
    32cc:	d8 2e       	mov	r13, r24
    32ce:	e9 2e       	mov	r14, r25
  memcpy(tuple, rcvdTuple, tuple_size);
    32d0:	41 2f       	mov	r20, r17
    32d2:	50 e0       	ldi	r21, 0x00	; 0
    32d4:	be 01       	movw	r22, r28
    32d6:	0e 94 2c 3e 	call	0x7c58	; 0x7c58 <memcpy>
  queue_enqueue(&receivedTuples[faceNum(thisChunk)], tuple, (record_type)isNew);
    32da:	29 89       	ldd	r18, Y+17	; 0x11
    32dc:	27 70       	andi	r18, 0x07	; 7
    32de:	34 e0       	ldi	r19, 0x04	; 4
    32e0:	23 9f       	mul	r18, r19
    32e2:	c0 01       	movw	r24, r0
    32e4:	11 24       	eor	r1, r1
    32e6:	4f 2d       	mov	r20, r15
    32e8:	50 2f       	mov	r21, r16
    32ea:	6d 2d       	mov	r22, r13
    32ec:	7e 2d       	mov	r23, r14
    32ee:	8d 59       	subi	r24, 0x9D	; 157
    32f0:	90 4d       	sbci	r25, 0xD0	; 208
    32f2:	0e 94 39 1e 	call	0x3c72	; 0x3c72 <queue_enqueue>

  tuple = malloc(tuple_size);
    32f6:	81 2f       	mov	r24, r17
    32f8:	90 e0       	ldi	r25, 0x00	; 0
    32fa:	0e 94 a5 3b 	call	0x774a	; 0x774a <malloc>
    32fe:	d8 2e       	mov	r13, r24
    3300:	e9 2e       	mov	r14, r25
  memcpy(tuple, rcvdTuple, tuple_size);
    3302:	41 2f       	mov	r20, r17
    3304:	50 e0       	ldi	r21, 0x00	; 0
    3306:	be 01       	movw	r22, r28
    3308:	0e 94 2c 3e 	call	0x7c58	; 0x7c58 <memcpy>
  enqueueNewTuple(tuple, (record_type)isNew);
    330c:	6f 2d       	mov	r22, r15
    330e:	70 2f       	mov	r23, r16
    3310:	8d 2d       	mov	r24, r13
    3312:	9e 2d       	mov	r25, r14
    3314:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <enqueueNewTuple>
}
    3318:	df 91       	pop	r29
    331a:	cf 91       	pop	r28
    331c:	1f 91       	pop	r17
    331e:	0f 91       	pop	r16
    3320:	ff 90       	pop	r15
    3322:	ef 90       	pop	r14
    3324:	df 90       	pop	r13
    3326:	08 95       	ret

00003328 <receive_tuple_add>:
	receive_tuple(-1);
}

void receive_tuple_add(void)
{
	receive_tuple(1);
    3328:	81 e0       	ldi	r24, 0x01	; 1
    332a:	90 e0       	ldi	r25, 0x00	; 0
    332c:	0c 94 49 19 	jmp	0x3292	; 0x3292 <receive_tuple>

00003330 <receive_tuple_delete>:
  enqueueNewTuple(tuple, (record_type)isNew);
}

void receive_tuple_delete(void)
{
	receive_tuple(-1);
    3330:	8f ef       	ldi	r24, 0xFF	; 255
    3332:	9f ef       	ldi	r25, 0xFF	; 255
    3334:	0c 94 49 19 	jmp	0x3292	; 0x3292 <receive_tuple>

00003338 <vm_init>:
#endif

/* NOTE: this must be executed before running the virtual machine */
void
vm_init(void)
{
    3338:	cf 92       	push	r12
    333a:	df 92       	push	r13
    333c:	ef 92       	push	r14
    333e:	ff 92       	push	r15
    3340:	0f 93       	push	r16
    3342:	1f 93       	push	r17
    3344:	cf 93       	push	r28
    3346:	df 93       	push	r29
   // We only want to do this once per executable, so in simulator make sure it happens only once and everyone else waits for it to complete.

   if (alreadyExecuted(0)) return;
#endif

	fprintf(stderr, "In VM_init\n");
    3348:	60 91 87 2f 	lds	r22, 0x2F87
    334c:	70 91 88 2f 	lds	r23, 0x2F88
    3350:	89 ea       	ldi	r24, 0xA9	; 169
    3352:	94 e2       	ldi	r25, 0x24	; 36
    3354:	0e 94 87 3e 	call	0x7d0e	; 0x7d0e <fputs>
}

static
void init_all_consts(void)
{
		init_consts();
    3358:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <init_consts>

		tuple_type i;
		for (i = 0; i < NUM_TYPES; i++) {
    335c:	c0 90 56 20 	lds	r12, 0x2056
    3360:	d1 2c       	mov	r13, r1
    3362:	00 e0       	ldi	r16, 0x00	; 0
    3364:	10 e2       	ldi	r17, 0x20	; 32
    3366:	c0 e0       	ldi	r28, 0x00	; 0
    3368:	d0 e0       	ldi	r29, 0x00	; 0
    336a:	1c c0       	rjmp	.+56     	; 0x33a4 <vm_init+0x6c>
				if (strcmp(TYPE_NAME(i), "tap") == 0)
    336c:	f8 01       	movw	r30, r16
    336e:	e1 90       	ld	r14, Z+
    3370:	f1 90       	ld	r15, Z+
    3372:	8f 01       	movw	r16, r30
    3374:	67 ef       	ldi	r22, 0xF7	; 247
    3376:	73 e2       	ldi	r23, 0x23	; 35
    3378:	c7 01       	movw	r24, r14
    337a:	0e 94 3c 3e 	call	0x7c78	; 0x7c78 <strcmp>
    337e:	00 97       	sbiw	r24, 0x00	; 0
    3380:	29 f4       	brne	.+10     	; 0x338c <vm_init+0x54>
						TYPE_TAP = i;
    3382:	c0 93 40 20 	sts	0x2040, r28
    3386:	d0 93 41 20 	sts	0x2041, r29
    338a:	0b c0       	rjmp	.+22     	; 0x33a2 <vm_init+0x6a>
				else if (strcmp(TYPE_NAME(i), "_init") == 0)
    338c:	65 eb       	ldi	r22, 0xB5	; 181
    338e:	74 e2       	ldi	r23, 0x24	; 36
    3390:	c7 01       	movw	r24, r14
    3392:	0e 94 3c 3e 	call	0x7c78	; 0x7c78 <strcmp>
    3396:	00 97       	sbiw	r24, 0x00	; 0
    3398:	21 f4       	brne	.+8      	; 0x33a2 <vm_init+0x6a>
						TYPE_INIT = i;
    339a:	c0 93 48 20 	sts	0x2048, r28
    339e:	d0 93 49 20 	sts	0x2049, r29
void init_all_consts(void)
{
		init_consts();

		tuple_type i;
		for (i = 0; i < NUM_TYPES; i++) {
    33a2:	21 96       	adiw	r28, 0x01	; 1
    33a4:	cc 15       	cp	r28, r12
    33a6:	dd 05       	cpc	r29, r13
    33a8:	0c f3       	brlt	.-62     	; 0x336c <vm_init+0x34>
#endif

	fprintf(stderr, "In VM_init\n");

  init_all_consts();
  init_fields();
    33aa:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <init_fields>
  init_deltas();
    33ae:	0e 94 d5 1e 	call	0x3daa	; 0x3daa <init_deltas>
  set_init_descriptors();
    33b2:	0e 94 b4 34 	call	0x6968	; 0x6968 <set_init_descriptors>

#ifdef BBSIM
       // indicate that the vm is inited.
       alreadyExecuted(1);
#endif
}
    33b6:	df 91       	pop	r29
    33b8:	cf 91       	pop	r28
    33ba:	1f 91       	pop	r17
    33bc:	0f 91       	pop	r16
    33be:	ff 90       	pop	r15
    33c0:	ef 90       	pop	r14
    33c2:	df 90       	pop	r13
    33c4:	cf 90       	pop	r12

  init_all_consts();
  init_fields();
  init_deltas();
  set_init_descriptors();
  list_init_descriptors();
    33c6:	0c 94 7e 38 	jmp	0x70fc	; 0x70fc <list_init_descriptors>

000033ca <__myassert>:
}

#ifndef BBSIM
void __myassert(char* file, int line, char* exp) {
    while (1) {
	setColor(RED); delayMS(50); setColor(BLUE); delayMS(50);}
    33ca:	80 e0       	ldi	r24, 0x00	; 0
    33cc:	0e 94 c9 06 	call	0xd92	; 0xd92 <setColor>
    33d0:	82 e3       	ldi	r24, 0x32	; 50
    33d2:	90 e0       	ldi	r25, 0x00	; 0
    33d4:	0e 94 24 08 	call	0x1048	; 0x1048 <delayMS>
    33d8:	85 e0       	ldi	r24, 0x05	; 5
    33da:	0e 94 c9 06 	call	0xd92	; 0xd92 <setColor>
    33de:	82 e3       	ldi	r24, 0x32	; 50
    33e0:	90 e0       	ldi	r25, 0x00	; 0
    33e2:	0e 94 24 08 	call	0x1048	; 0x1048 <delayMS>
    33e6:	f1 cf       	rjmp	.-30     	; 0x33ca <__myassert>

000033e8 <tuple_handle>:
				/* TODO-REAL: needs to free on real blinky blocks??? */
		}
}

void tuple_handle(tuple_t tuple, int isNew, Register *registers)
{
    33e8:	0f 93       	push	r16
    33ea:	1f 93       	push	r17
    33ec:	cf 93       	push	r28
    33ee:	df 93       	push	r29
    33f0:	ec 01       	movw	r28, r24
    33f2:	9a 01       	movw	r18, r20
	tuple_print(tuple, stdout);
	printf ("\n");
#endif


		tuple_type type = TUPLE_TYPE(tuple);
    33f4:	e8 81       	ld	r30, Y
    33f6:	8e 2f       	mov	r24, r30
    33f8:	90 e0       	ldi	r25, 0x00	; 0

		assert (type < NUM_TYPES);
    33fa:	40 91 56 20 	lds	r20, 0x2056
    33fe:	50 e0       	ldi	r21, 0x00	; 0
    3400:	84 17       	cp	r24, r20
    3402:	95 07       	cpc	r25, r21
    3404:	44 f0       	brlt	.+16     	; 0x3416 <tuple_handle+0x2e>
    3406:	4b eb       	ldi	r20, 0xBB	; 187
    3408:	54 e2       	ldi	r21, 0x24	; 36
    340a:	64 e7       	ldi	r22, 0x74	; 116
    340c:	71 e0       	ldi	r23, 0x01	; 1
    340e:	8c ec       	ldi	r24, 0xCC	; 204
    3410:	94 e2       	ldi	r25, 0x24	; 36
    3412:	0e 94 e5 19 	call	0x33ca	; 0x33ca <__myassert>

		switch (type) {
    3416:	e3 30       	cpi	r30, 0x03	; 3
    3418:	21 f0       	breq	.+8      	; 0x3422 <tuple_handle+0x3a>
    341a:	e4 30       	cpi	r30, 0x04	; 4
    341c:	09 f0       	breq	.+2      	; 0x3420 <tuple_handle+0x38>
    341e:	4a c0       	rjmp	.+148    	; 0x34b4 <tuple_handle+0xcc>
    3420:	27 c0       	rjmp	.+78     	; 0x3470 <tuple_handle+0x88>
		case TYPE_SETCOLOR:
				if (isNew <= 0) return;
    3422:	16 16       	cp	r1, r22
    3424:	17 06       	cpc	r1, r23
    3426:	0c f0       	brlt	.+2      	; 0x342a <tuple_handle+0x42>
    3428:	4d c0       	rjmp	.+154    	; 0x34c4 <tuple_handle+0xdc>

				setLED(*(byte *)GET_TUPLE_FIELD(tuple, 1),
							 *(byte *)GET_TUPLE_FIELD(tuple, 2),
							 *(byte *)GET_TUPLE_FIELD(tuple, 3),
							 *(byte *)GET_TUPLE_FIELD(tuple, 4));
    342a:	e0 91 3e 29 	lds	r30, 0x293E
    342e:	f0 91 3f 29 	lds	r31, 0x293F
    3432:	86 81       	ldd	r24, Z+6	; 0x06
    3434:	e8 0f       	add	r30, r24
    3436:	f1 1d       	adc	r31, r1
    3438:	81 85       	ldd	r24, Z+9	; 0x09

		switch (type) {
		case TYPE_SETCOLOR:
				if (isNew <= 0) return;

				setLED(*(byte *)GET_TUPLE_FIELD(tuple, 1),
    343a:	9e 01       	movw	r18, r28
    343c:	28 0f       	add	r18, r24
    343e:	31 1d       	adc	r19, r1
							 *(byte *)GET_TUPLE_FIELD(tuple, 2),
							 *(byte *)GET_TUPLE_FIELD(tuple, 3),
    3440:	87 81       	ldd	r24, Z+7	; 0x07

		switch (type) {
		case TYPE_SETCOLOR:
				if (isNew <= 0) return;

				setLED(*(byte *)GET_TUPLE_FIELD(tuple, 1),
    3442:	ae 01       	movw	r20, r28
    3444:	48 0f       	add	r20, r24
    3446:	51 1d       	adc	r21, r1
    3448:	ca 01       	movw	r24, r20
							 *(byte *)GET_TUPLE_FIELD(tuple, 2),
    344a:	45 81       	ldd	r20, Z+5	; 0x05

		switch (type) {
		case TYPE_SETCOLOR:
				if (isNew <= 0) return;

				setLED(*(byte *)GET_TUPLE_FIELD(tuple, 1),
    344c:	de 01       	movw	r26, r28
    344e:	a4 0f       	add	r26, r20
    3450:	b1 1d       	adc	r27, r1
    3452:	43 81       	ldd	r20, Z+3	; 0x03
    3454:	8e 01       	movw	r16, r28
    3456:	04 0f       	add	r16, r20
    3458:	11 1d       	adc	r17, r1
    345a:	f9 01       	movw	r30, r18
    345c:	21 81       	ldd	r18, Z+1	; 0x01
    345e:	fc 01       	movw	r30, r24
    3460:	41 81       	ldd	r20, Z+1	; 0x01
    3462:	11 96       	adiw	r26, 0x01	; 1
    3464:	6c 91       	ld	r22, X
    3466:	f8 01       	movw	r30, r16
    3468:	81 81       	ldd	r24, Z+1	; 0x01
    346a:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <setLED>
    346e:	1b c0       	rjmp	.+54     	; 0x34a6 <tuple_handle+0xbe>
							 *(byte *)GET_TUPLE_FIELD(tuple, 4));
				FREE_TUPLE(tuple);
				return;

		case TYPE_SETCOLOR2:
				if (isNew <= 0) return;
    3470:	16 16       	cp	r1, r22
    3472:	17 06       	cpc	r1, r23
    3474:	3c f5       	brge	.+78     	; 0x34c4 <tuple_handle+0xdc>

				setColor(MELD_INT(GET_TUPLE_FIELD(tuple, 1)) % NUM_COLORS);
    3476:	e0 91 3e 29 	lds	r30, 0x293E
    347a:	f0 91 3f 29 	lds	r31, 0x293F
    347e:	80 85       	ldd	r24, Z+8	; 0x08
    3480:	e8 0f       	add	r30, r24
    3482:	f1 1d       	adc	r31, r1
    3484:	83 81       	ldd	r24, Z+3	; 0x03
    3486:	fe 01       	movw	r30, r28
    3488:	e8 0f       	add	r30, r24
    348a:	f1 1d       	adc	r31, r1
    348c:	61 81       	ldd	r22, Z+1	; 0x01
    348e:	72 81       	ldd	r23, Z+2	; 0x02
    3490:	83 81       	ldd	r24, Z+3	; 0x03
    3492:	94 81       	ldd	r25, Z+4	; 0x04
    3494:	29 e0       	ldi	r18, 0x09	; 9
    3496:	30 e0       	ldi	r19, 0x00	; 0
    3498:	40 e0       	ldi	r20, 0x00	; 0
    349a:	50 e0       	ldi	r21, 0x00	; 0
    349c:	0e 94 4d 3b 	call	0x769a	; 0x769a <__divmodsi4>
    34a0:	86 2f       	mov	r24, r22
    34a2:	0e 94 c9 06 	call	0xd92	; 0xd92 <setColor>
				FREE_TUPLE(tuple);
    34a6:	ce 01       	movw	r24, r28

		default:
				tuple_do_handle(type, tuple, isNew, registers);
				return;
		}
}
    34a8:	df 91       	pop	r29
    34aa:	cf 91       	pop	r28
    34ac:	1f 91       	pop	r17
    34ae:	0f 91       	pop	r16

		case TYPE_SETCOLOR2:
				if (isNew <= 0) return;

				setColor(MELD_INT(GET_TUPLE_FIELD(tuple, 1)) % NUM_COLORS);
				FREE_TUPLE(tuple);
    34b0:	0c 94 40 3c 	jmp	0x7880	; 0x7880 <free>
				return;

		default:
				tuple_do_handle(type, tuple, isNew, registers);
    34b4:	ab 01       	movw	r20, r22
    34b6:	be 01       	movw	r22, r28
				return;
		}
}
    34b8:	df 91       	pop	r29
    34ba:	cf 91       	pop	r28
    34bc:	1f 91       	pop	r17
    34be:	0f 91       	pop	r16
				setColor(MELD_INT(GET_TUPLE_FIELD(tuple, 1)) % NUM_COLORS);
				FREE_TUPLE(tuple);
				return;

		default:
				tuple_do_handle(type, tuple, isNew, registers);
    34c0:	0c 94 f8 2a 	jmp	0x55f0	; 0x55f0 <tuple_do_handle>
				return;
		}
}
    34c4:	df 91       	pop	r29
    34c6:	cf 91       	pop	r28
    34c8:	1f 91       	pop	r17
    34ca:	0f 91       	pop	r16
    34cc:	08 95       	ret

000034ce <tuple_send>:
void free_chunk(void) {
	free(thisChunk);
}

void tuple_send(tuple_t tuple, void *rt, meld_int delay, int isNew)
{
    34ce:	8f 92       	push	r8
    34d0:	9f 92       	push	r9
    34d2:	af 92       	push	r10
    34d4:	bf 92       	push	r11
    34d6:	cf 92       	push	r12
    34d8:	df 92       	push	r13
    34da:	ef 92       	push	r14
    34dc:	ff 92       	push	r15
    34de:	0f 93       	push	r16
    34e0:	1f 93       	push	r17
    34e2:	cf 93       	push	r28
    34e4:	df 93       	push	r29
    34e6:	ec 01       	movw	r28, r24
    34e8:	6b 01       	movw	r12, r22
    34ea:	49 01       	movw	r8, r18
    34ec:	5a 01       	movw	r10, r20
		assert (TUPLE_TYPE(tuple) < NUM_TYPES);
    34ee:	28 81       	ld	r18, Y
    34f0:	80 91 56 20 	lds	r24, 0x2056
    34f4:	28 17       	cp	r18, r24
    34f6:	28 f0       	brcs	.+10     	; 0x3502 <tuple_send+0x34>
    34f8:	41 e1       	ldi	r20, 0x11	; 17
    34fa:	55 e2       	ldi	r21, 0x25	; 37
    34fc:	63 e3       	ldi	r22, 0x33	; 51
    34fe:	71 e0       	ldi	r23, 0x01	; 1
    3500:	6f c0       	rjmp	.+222    	; 0x35e0 <tuple_send+0x112>

		if (delay > 0) {
    3502:	18 14       	cp	r1, r8
    3504:	19 04       	cpc	r1, r9
    3506:	1a 04       	cpc	r1, r10
    3508:	1b 04       	cpc	r1, r11
    350a:	94 f4       	brge	.+36     	; 0x3530 <tuple_send+0x62>
				p_enqueue(delayedTuples, getTime() + delay, tuple, rt, (record_type) isNew);
    350c:	0e 94 46 08 	call	0x108c	; 0x108c <getTime>
    3510:	ab 01       	movw	r20, r22
    3512:	bc 01       	movw	r22, r24
    3514:	48 0d       	add	r20, r8
    3516:	59 1d       	adc	r21, r9
    3518:	6a 1d       	adc	r22, r10
    351a:	7b 1d       	adc	r23, r11
    351c:	78 01       	movw	r14, r16
    351e:	86 01       	movw	r16, r12
    3520:	9e 01       	movw	r18, r28
    3522:	80 91 d9 2e 	lds	r24, 0x2ED9
    3526:	90 91 da 2e 	lds	r25, 0x2EDA
    352a:	0e 94 86 1e 	call	0x3d0c	; 0x3d0c <p_enqueue>
				return;
    352e:	c5 c0       	rjmp	.+394    	; 0x36ba <tuple_send+0x1ec>
		}

		NodeID target = MELD_NODE_ID(GET_TUPLE_FIELD(tuple, 0));
    3530:	80 91 3e 29 	lds	r24, 0x293E
    3534:	90 91 3f 29 	lds	r25, 0x293F
    3538:	fc 01       	movw	r30, r24
    353a:	e2 0f       	add	r30, r18
    353c:	f1 1d       	adc	r31, r1
    353e:	e2 0f       	add	r30, r18
    3540:	f1 1d       	adc	r31, r1
    3542:	20 81       	ld	r18, Z
    3544:	fc 01       	movw	r30, r24
    3546:	e2 0f       	add	r30, r18
    3548:	f1 1d       	adc	r31, r1
    354a:	81 81       	ldd	r24, Z+1	; 0x01
    354c:	fe 01       	movw	r30, r28
    354e:	e8 0f       	add	r30, r24
    3550:	f1 1d       	adc	r31, r1
    3552:	c1 80       	ldd	r12, Z+1	; 0x01
    3554:	d2 80       	ldd	r13, Z+2	; 0x02
		if (target == blockId) {
    3556:	80 91 5b 2f 	lds	r24, 0x2F5B
    355a:	90 91 5c 2f 	lds	r25, 0x2F5C
    355e:	c8 16       	cp	r12, r24
    3560:	d9 06       	cpc	r13, r25
    3562:	29 f4       	brne	.+10     	; 0x356e <tuple_send+0xa0>
				enqueueNewTuple(tuple, (record_type) isNew);
    3564:	b8 01       	movw	r22, r16
    3566:	ce 01       	movw	r24, r28
    3568:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <enqueueNewTuple>
    356c:	a6 c0       	rjmp	.+332    	; 0x36ba <tuple_send+0x1ec>
		}
		else {
				int face = -1;

				if (target == up())
    356e:	0e 94 b1 03 	call	0x762	; 0x762 <up>
    3572:	c8 16       	cp	r12, r24
    3574:	d9 06       	cpc	r13, r25
    3576:	09 f4       	brne	.+2      	; 0x357a <tuple_send+0xac>
    3578:	7b c0       	rjmp	.+246    	; 0x3670 <tuple_send+0x1a2>
						face = UP;
				else if (target == down())
    357a:	0e 94 ac 03 	call	0x758	; 0x758 <down>
    357e:	c8 16       	cp	r12, r24
    3580:	d9 06       	cpc	r13, r25
    3582:	09 f4       	brne	.+2      	; 0x3586 <tuple_send+0xb8>
    3584:	79 c0       	rjmp	.+242    	; 0x3678 <tuple_send+0x1aa>
						face = DOWN;
				else if (target == west())
    3586:	0e 94 c5 03 	call	0x78a	; 0x78a <west>
    358a:	c8 16       	cp	r12, r24
    358c:	d9 06       	cpc	r13, r25
    358e:	09 f4       	brne	.+2      	; 0x3592 <tuple_send+0xc4>
    3590:	76 c0       	rjmp	.+236    	; 0x367e <tuple_send+0x1b0>
						face = WEST;
				else if (target == east())
    3592:	0e 94 c0 03 	call	0x780	; 0x780 <east>
    3596:	c8 16       	cp	r12, r24
    3598:	d9 06       	cpc	r13, r25
    359a:	09 f4       	brne	.+2      	; 0x359e <tuple_send+0xd0>
    359c:	74 c0       	rjmp	.+232    	; 0x3686 <tuple_send+0x1b8>
						face = EAST;
				else if (target == north())
    359e:	0e 94 b6 03 	call	0x76c	; 0x76c <north>
    35a2:	c8 16       	cp	r12, r24
    35a4:	d9 06       	cpc	r13, r25
    35a6:	09 f4       	brne	.+2      	; 0x35aa <tuple_send+0xdc>
    35a8:	72 c0       	rjmp	.+228    	; 0x368e <tuple_send+0x1c0>
						face = NORTH;
				else if (target == south())
    35aa:	0e 94 bb 03 	call	0x776	; 0x776 <south>
    35ae:	c8 16       	cp	r12, r24
    35b0:	d9 06       	cpc	r13, r25
    35b2:	09 f0       	breq	.+2      	; 0x35b6 <tuple_send+0xe8>
    35b4:	43 c0       	rjmp	.+134    	; 0x363c <tuple_send+0x16e>
    35b6:	6f c0       	rjmp	.+222    	; 0x3696 <tuple_send+0x1c8>

						if (isNew > 0) {
							receiver = (MsgHandler)receive_tuple_add;
						}
						else {
							receiver = (MsgHandler)receive_tuple_delete;
    35b8:	08 e9       	ldi	r16, 0x98	; 152
    35ba:	19 e1       	ldi	r17, 0x19	; 25
						}

						assert(TYPE_SIZE(TUPLE_TYPE(tuple)) <= 17);
    35bc:	88 81       	ld	r24, Y
    35be:	20 91 3e 29 	lds	r18, 0x293E
    35c2:	90 91 3f 29 	lds	r25, 0x293F
    35c6:	e2 2f       	mov	r30, r18
    35c8:	f9 2f       	mov	r31, r25
    35ca:	e8 0f       	add	r30, r24
    35cc:	f1 1d       	adc	r31, r1
    35ce:	e8 0f       	add	r30, r24
    35d0:	f1 1d       	adc	r31, r1
    35d2:	21 81       	ldd	r18, Z+1	; 0x01
    35d4:	22 31       	cpi	r18, 0x12	; 18
    35d6:	40 f0       	brcs	.+16     	; 0x35e8 <tuple_send+0x11a>
    35d8:	4f e2       	ldi	r20, 0x2F	; 47
    35da:	55 e2       	ldi	r21, 0x25	; 37
    35dc:	69 e5       	ldi	r22, 0x59	; 89
    35de:	71 e0       	ldi	r23, 0x01	; 1
    35e0:	8c ec       	ldi	r24, 0xCC	; 204
    35e2:	94 e2       	ldi	r25, 0x24	; 36
    35e4:	0e 94 e5 19 	call	0x33ca	; 0x33ca <__myassert>

						if (sendMessageToPort(c, face, tuple, TYPE_SIZE(TUPLE_TYPE(tuple)), (MsgHandler)receiver, (GenericHandler)&free_chunk) == 0) {
    35e8:	e2 e7       	ldi	r30, 0x72	; 114
    35ea:	ee 2e       	mov	r14, r30
    35ec:	e7 e1       	ldi	r30, 0x17	; 23
    35ee:	fe 2e       	mov	r15, r30
    35f0:	ae 01       	movw	r20, r28
    35f2:	6a 2d       	mov	r22, r10
    35f4:	89 2d       	mov	r24, r9
    35f6:	98 2d       	mov	r25, r8
    35f8:	0e 94 5d 07 	call	0xeba	; 0xeba <sendMessageToPort>
    35fc:	81 11       	cpse	r24, r1
    35fe:	5d c0       	rjmp	.+186    	; 0x36ba <tuple_send+0x1ec>
							// Send failed :(
							free(c);
    3600:	89 2d       	mov	r24, r9
    3602:	98 2d       	mov	r25, r8
    3604:	0e 94 40 3c 	call	0x7880	; 0x7880 <free>
							fprintf(stderr, "SEND FAILED EVEN THOUGH BLOCK IS PRESENT! from %d to %d\n", (int)blockId, (int)target);
    3608:	df 92       	push	r13
    360a:	cf 92       	push	r12
    360c:	80 91 5c 2f 	lds	r24, 0x2F5C
    3610:	8f 93       	push	r24
    3612:	80 91 5b 2f 	lds	r24, 0x2F5B
    3616:	8f 93       	push	r24
    3618:	82 e5       	ldi	r24, 0x52	; 82
    361a:	95 e2       	ldi	r25, 0x25	; 37
    361c:	9f 93       	push	r25
    361e:	8f 93       	push	r24
    3620:	80 91 88 2f 	lds	r24, 0x2F88
    3624:	8f 93       	push	r24
    3626:	80 91 87 2f 	lds	r24, 0x2F87
    362a:	8f 93       	push	r24
    362c:	0e 94 45 3e 	call	0x7c8a	; 0x7c8a <fprintf>
    3630:	8d b7       	in	r24, 0x3d	; 61
    3632:	9e b7       	in	r25, 0x3e	; 62
    3634:	08 96       	adiw	r24, 0x08	; 8
    3636:	8d bf       	out	0x3d, r24	; 61
    3638:	9e bf       	out	0x3e, r25	; 62
    363a:	3f c0       	rjmp	.+126    	; 0x36ba <tuple_send+0x1ec>
						};
				}
				else {
						fprintf(stderr, "UNABLE TO ROUTE MESSAGE! from %d to %d\n", (int)blockId, (int)target);
    363c:	df 92       	push	r13
    363e:	cf 92       	push	r12
    3640:	80 91 5c 2f 	lds	r24, 0x2F5C
    3644:	8f 93       	push	r24
    3646:	80 91 5b 2f 	lds	r24, 0x2F5B
    364a:	8f 93       	push	r24
    364c:	8b e8       	ldi	r24, 0x8B	; 139
    364e:	95 e2       	ldi	r25, 0x25	; 37
    3650:	9f 93       	push	r25
    3652:	8f 93       	push	r24
    3654:	80 91 88 2f 	lds	r24, 0x2F88
    3658:	8f 93       	push	r24
    365a:	80 91 87 2f 	lds	r24, 0x2F87
    365e:	8f 93       	push	r24
    3660:	0e 94 45 3e 	call	0x7c8a	; 0x7c8a <fprintf>
    3664:	8d b7       	in	r24, 0x3d	; 61
    3666:	9e b7       	in	r25, 0x3e	; 62
    3668:	08 96       	adiw	r24, 0x08	; 8
    366a:	8d bf       	out	0x3d, r24	; 61
    366c:	9e bf       	out	0x3e, r25	; 62
    366e:	25 c0       	rjmp	.+74     	; 0x36ba <tuple_send+0x1ec>
		}
		else {
				int face = -1;

				if (target == up())
						face = UP;
    3670:	75 e0       	ldi	r23, 0x05	; 5
    3672:	a7 2e       	mov	r10, r23
    3674:	b1 2c       	mov	r11, r1
    3676:	12 c0       	rjmp	.+36     	; 0x369c <tuple_send+0x1ce>
				else if (target == down())
						face = DOWN;
    3678:	a1 2c       	mov	r10, r1
    367a:	b1 2c       	mov	r11, r1
    367c:	0f c0       	rjmp	.+30     	; 0x369c <tuple_send+0x1ce>
				else if (target == west())
						face = WEST;
    367e:	63 e0       	ldi	r22, 0x03	; 3
    3680:	a6 2e       	mov	r10, r22
    3682:	b1 2c       	mov	r11, r1
    3684:	0b c0       	rjmp	.+22     	; 0x369c <tuple_send+0x1ce>
				else if (target == east())
						face = EAST;
    3686:	52 e0       	ldi	r21, 0x02	; 2
    3688:	a5 2e       	mov	r10, r21
    368a:	b1 2c       	mov	r11, r1
    368c:	07 c0       	rjmp	.+14     	; 0x369c <tuple_send+0x1ce>
				else if (target == north())
						face = NORTH;
    368e:	aa 24       	eor	r10, r10
    3690:	a3 94       	inc	r10
    3692:	b1 2c       	mov	r11, r1
    3694:	03 c0       	rjmp	.+6      	; 0x369c <tuple_send+0x1ce>
				else if (target == south())
						face = SOUTH;
    3696:	34 e0       	ldi	r19, 0x04	; 4
    3698:	a3 2e       	mov	r10, r19
    369a:	b1 2c       	mov	r11, r1

				if (face != -1) {		  
						Chunk *c=calloc(sizeof(Chunk), 1);
    369c:	61 e0       	ldi	r22, 0x01	; 1
    369e:	70 e0       	ldi	r23, 0x00	; 0
    36a0:	88 e1       	ldi	r24, 0x18	; 24
    36a2:	90 e0       	ldi	r25, 0x00	; 0
    36a4:	0e 94 87 3b 	call	0x770e	; 0x770e <calloc>
    36a8:	98 2e       	mov	r9, r24
    36aa:	89 2e       	mov	r8, r25
						MsgHandler receiver;

						if (isNew > 0) {
    36ac:	10 16       	cp	r1, r16
    36ae:	11 06       	cpc	r1, r17
    36b0:	0c f0       	brlt	.+2      	; 0x36b4 <tuple_send+0x1e6>
    36b2:	82 cf       	rjmp	.-252    	; 0x35b8 <tuple_send+0xea>
							receiver = (MsgHandler)receive_tuple_add;
    36b4:	04 e9       	ldi	r16, 0x94	; 148
    36b6:	19 e1       	ldi	r17, 0x19	; 25
    36b8:	81 cf       	rjmp	.-254    	; 0x35bc <tuple_send+0xee>
						fprintf(stderr, "UNABLE TO ROUTE MESSAGE! from %d to %d\n", (int)blockId, (int)target);
						//exit(EXIT_FAILURE);
				}
				/* TODO-REAL: needs to free on real blinky blocks??? */
		}
}
    36ba:	df 91       	pop	r29
    36bc:	cf 91       	pop	r28
    36be:	1f 91       	pop	r17
    36c0:	0f 91       	pop	r16
    36c2:	ff 90       	pop	r15
    36c4:	ef 90       	pop	r14
    36c6:	df 90       	pop	r13
    36c8:	cf 90       	pop	r12
    36ca:	bf 90       	pop	r11
    36cc:	af 90       	pop	r10
    36ce:	9f 90       	pop	r9
    36d0:	8f 90       	pop	r8
    36d2:	08 95       	ret

000036d4 <get_neighbor_ID>:
#endif

static inline
NodeID get_neighbor_ID(int face)
{
		if (face == UP)
    36d4:	85 30       	cpi	r24, 0x05	; 5
    36d6:	91 05       	cpc	r25, r1
    36d8:	11 f4       	brne	.+4      	; 0x36de <get_neighbor_ID+0xa>
				return up();
    36da:	0c 94 b1 03 	jmp	0x762	; 0x762 <up>
		else if (face == DOWN)
    36de:	00 97       	sbiw	r24, 0x00	; 0
    36e0:	11 f4       	brne	.+4      	; 0x36e6 <get_neighbor_ID+0x12>
				return down();
    36e2:	0c 94 ac 03 	jmp	0x758	; 0x758 <down>
		else if (face == WEST)
    36e6:	83 30       	cpi	r24, 0x03	; 3
    36e8:	91 05       	cpc	r25, r1
    36ea:	11 f4       	brne	.+4      	; 0x36f0 <get_neighbor_ID+0x1c>
				return west();
    36ec:	0c 94 c5 03 	jmp	0x78a	; 0x78a <west>
		else if (face == EAST)
    36f0:	82 30       	cpi	r24, 0x02	; 2
    36f2:	91 05       	cpc	r25, r1
    36f4:	11 f4       	brne	.+4      	; 0x36fa <get_neighbor_ID+0x26>
				return east();
    36f6:	0c 94 c0 03 	jmp	0x780	; 0x780 <east>
		else if (face == NORTH)
    36fa:	81 30       	cpi	r24, 0x01	; 1
    36fc:	91 05       	cpc	r25, r1
    36fe:	11 f4       	brne	.+4      	; 0x3704 <get_neighbor_ID+0x30>
				return north();
    3700:	0c 94 b6 03 	jmp	0x76c	; 0x76c <north>
		else if (face == SOUTH)
    3704:	04 97       	sbiw	r24, 0x04	; 4
    3706:	11 f4       	brne	.+4      	; 0x370c <get_neighbor_ID+0x38>
				return south();
    3708:	0c 94 bb 03 	jmp	0x776	; 0x776 <south>
		else {
				assert(0);
    370c:	43 eb       	ldi	r20, 0xB3	; 179
    370e:	55 e2       	ldi	r21, 0x25	; 37
    3710:	66 e4       	ldi	r22, 0x46	; 70
    3712:	70 e0       	ldi	r23, 0x00	; 0
    3714:	8c ec       	ldi	r24, 0xCC	; 204
    3716:	94 e2       	ldi	r25, 0x24	; 36
    3718:	0e 94 e5 19 	call	0x33ca	; 0x33ca <__myassert>

0000371c <meldMain>:
#ifdef BBSIM
extern pthread_mutex_t printmutex;
#endif

void meldMain(void)
{
    371c:	cf 93       	push	r28
    371e:	df 93       	push	r29
    3720:	cd b7       	in	r28, 0x3d	; 61
    3722:	de b7       	in	r29, 0x3e	; 62
    3724:	2e 97       	sbiw	r28, 0x0e	; 14
    3726:	cd bf       	out	0x3d, r28	; 61
    3728:	de bf       	out	0x3e, r29	; 62
		blockId = getGUID();
    372a:	0e 94 92 11 	call	0x2324	; 0x2324 <getGUID>
    372e:	80 93 5b 2f 	sts	0x2F5B, r24
    3732:	90 93 5c 2f 	sts	0x2F5C, r25

		// init stuff
		tuples = calloc(NUM_TYPES, sizeof(tuple_queue));
    3736:	10 91 56 20 	lds	r17, 0x2056
    373a:	64 e0       	ldi	r22, 0x04	; 4
    373c:	70 e0       	ldi	r23, 0x00	; 0
    373e:	81 2f       	mov	r24, r17
    3740:	90 e0       	ldi	r25, 0x00	; 0
    3742:	0e 94 87 3b 	call	0x770e	; 0x770e <calloc>
    3746:	80 93 61 2f 	sts	0x2F61, r24
    374a:	90 93 62 2f 	sts	0x2F62, r25
		newTuples = calloc(1, sizeof(tuple_queue));
    374e:	64 e0       	ldi	r22, 0x04	; 4
    3750:	70 e0       	ldi	r23, 0x00	; 0
    3752:	81 e0       	ldi	r24, 0x01	; 1
    3754:	90 e0       	ldi	r25, 0x00	; 0
    3756:	0e 94 87 3b 	call	0x770e	; 0x770e <calloc>
    375a:	80 93 5d 2f 	sts	0x2F5D, r24
    375e:	90 93 5e 2f 	sts	0x2F5E, r25
		newStratTuples = calloc(1, sizeof(tuple_pqueue));
    3762:	62 e0       	ldi	r22, 0x02	; 2
    3764:	70 e0       	ldi	r23, 0x00	; 0
    3766:	81 e0       	ldi	r24, 0x01	; 1
    3768:	90 e0       	ldi	r25, 0x00	; 0
    376a:	0e 94 87 3b 	call	0x770e	; 0x770e <calloc>
    376e:	80 93 d7 2e 	sts	0x2ED7, r24
    3772:	90 93 d8 2e 	sts	0x2ED8, r25
		oldTuples = calloc(NUM_TYPES, sizeof(tuple_t));
    3776:	62 e0       	ldi	r22, 0x02	; 2
    3778:	70 e0       	ldi	r23, 0x00	; 0
    377a:	81 2f       	mov	r24, r17
    377c:	90 e0       	ldi	r25, 0x00	; 0
    377e:	0e 94 87 3b 	call	0x770e	; 0x770e <calloc>
    3782:	80 93 7d 2f 	sts	0x2F7D, r24
    3786:	90 93 7e 2f 	sts	0x2F7E, r25
		delayedTuples = calloc(1, sizeof(tuple_pqueue));
    378a:	62 e0       	ldi	r22, 0x02	; 2
    378c:	70 e0       	ldi	r23, 0x00	; 0
    378e:	81 e0       	ldi	r24, 0x01	; 1
    3790:	90 e0       	ldi	r25, 0x00	; 0
    3792:	0e 94 87 3b 	call	0x770e	; 0x770e <calloc>
    3796:	80 93 d9 2e 	sts	0x2ED9, r24
    379a:	90 93 da 2e 	sts	0x2EDA, r25
		proved = calloc(NUM_TYPES, sizeof(meld_int));
    379e:	64 e0       	ldi	r22, 0x04	; 4
    37a0:	70 e0       	ldi	r23, 0x00	; 0
    37a2:	81 2f       	mov	r24, r17
    37a4:	90 e0       	ldi	r25, 0x00	; 0
    37a6:	0e 94 87 3b 	call	0x770e	; 0x770e <calloc>
    37aa:	80 93 7b 2f 	sts	0x2F7B, r24
    37ae:	90 93 7c 2f 	sts	0x2F7C, r25
		memset(receivedTuples, 0, sizeof(tuple_queue) * NUM_PORTS);
    37b2:	88 e1       	ldi	r24, 0x18	; 24
    37b4:	e3 e6       	ldi	r30, 0x63	; 99
    37b6:	ff e2       	ldi	r31, 0x2F	; 47
    37b8:	df 01       	movw	r26, r30
    37ba:	1d 92       	st	X+, r1
    37bc:	8a 95       	dec	r24
    37be:	e9 f7       	brne	.-6      	; 0x37ba <meldMain+0x9e>

		vm_init();
    37c0:	0e 94 9c 19 	call	0x3338	; 0x3338 <vm_init>
#if DEBUG
		printf("meld program started\n");
#endif

		//setColor(0);
		setLED(128,0,128,32);
    37c4:	20 e2       	ldi	r18, 0x20	; 32
    37c6:	40 e8       	ldi	r20, 0x80	; 128
    37c8:	60 e0       	ldi	r22, 0x00	; 0
    37ca:	80 e8       	ldi	r24, 0x80	; 128
    37cc:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <setLED>
}

static
void enqueue_init(void)
{
		if(TYPE_INIT == -1)
    37d0:	80 91 48 20 	lds	r24, 0x2048
    37d4:	90 91 49 20 	lds	r25, 0x2049
    37d8:	8f 3f       	cpi	r24, 0xFF	; 255
    37da:	bf ef       	ldi	r27, 0xFF	; 255
    37dc:	9b 07       	cpc	r25, r27
    37de:	29 f1       	breq	.+74     	; 0x382a <meldMain+0x10e>
			return;

		tuple_t tuple = tuple_alloc(TYPE_INIT);
    37e0:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <tuple_alloc>
    37e4:	8c 01       	movw	r16, r24

		SET_TUPLE_FIELD(tuple, 0, &blockId);
    37e6:	80 91 3e 29 	lds	r24, 0x293E
    37ea:	90 91 3f 29 	lds	r25, 0x293F
    37ee:	f8 01       	movw	r30, r16
    37f0:	20 81       	ld	r18, Z
    37f2:	fc 01       	movw	r30, r24
    37f4:	e2 0f       	add	r30, r18
    37f6:	f1 1d       	adc	r31, r1
    37f8:	e2 0f       	add	r30, r18
    37fa:	f1 1d       	adc	r31, r1
    37fc:	20 81       	ld	r18, Z
    37fe:	fc 01       	movw	r30, r24
    3800:	e2 0f       	add	r30, r18
    3802:	f1 1d       	adc	r31, r1
    3804:	21 81       	ldd	r18, Z+1	; 0x01
    3806:	30 e0       	ldi	r19, 0x00	; 0
    3808:	2f 5f       	subi	r18, 0xFF	; 255
    380a:	3f 4f       	sbci	r19, 0xFF	; 255
    380c:	20 0f       	add	r18, r16
    380e:	31 1f       	adc	r19, r17
    3810:	40 81       	ld	r20, Z
    3812:	8b e5       	ldi	r24, 0x5B	; 91
    3814:	9f e2       	ldi	r25, 0x2F	; 47
    3816:	50 e0       	ldi	r21, 0x00	; 0
    3818:	bc 01       	movw	r22, r24
    381a:	c9 01       	movw	r24, r18
    381c:	0e 94 2c 3e 	call	0x7c58	; 0x7c58 <memcpy>

		enqueueNewTuple(tuple, (record_type) 1);
    3820:	61 e0       	ldi	r22, 0x01	; 1
    3822:	70 e0       	ldi	r23, 0x00	; 0
    3824:	c8 01       	movw	r24, r16
    3826:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <enqueueNewTuple>

		enqueue_init();

		// introduce intial set of axioms
		NodeID neighbors[6];
		int numNeighbors = getNeighborCount();
    382a:	0e 94 9f 03 	call	0x73e	; 0x73e <getNeighborCount>
    382e:	e8 2e       	mov	r14, r24
    3830:	f1 2c       	mov	r15, r1

		enqueue_count(numNeighbors, 1);
    3832:	68 2f       	mov	r22, r24
    3834:	70 e0       	ldi	r23, 0x00	; 0
    3836:	80 e0       	ldi	r24, 0x00	; 0
    3838:	90 e0       	ldi	r25, 0x00	; 0
    383a:	41 e0       	ldi	r20, 0x01	; 1
    383c:	50 e0       	ldi	r21, 0x00	; 0
    383e:	0e 94 05 18 	call	0x300a	; 0x300a <enqueue_count>
    3842:	8e 01       	movw	r16, r28
    3844:	0f 5f       	subi	r16, 0xFF	; 255
    3846:	1f 4f       	sbci	r17, 0xFF	; 255
    3848:	41 2c       	mov	r4, r1
    384a:	51 2c       	mov	r5, r1
    384c:	32 01       	movw	r6, r4
	
		int i;
		for (i = 0; i < NUM_PORTS; i++) {
				neighbors[i] = get_neighbor_ID(i);
    384e:	c2 01       	movw	r24, r4
    3850:	0e 94 6a 1b 	call	0x36d4	; 0x36d4 <get_neighbor_ID>
    3854:	d8 01       	movw	r26, r16
    3856:	8d 93       	st	X+, r24
    3858:	9d 93       	st	X+, r25
    385a:	8d 01       	movw	r16, r26

				enqueue_face(neighbors[i], i, 1);
    385c:	21 e0       	ldi	r18, 0x01	; 1
    385e:	30 e0       	ldi	r19, 0x00	; 0
    3860:	b3 01       	movw	r22, r6
    3862:	a2 01       	movw	r20, r4
    3864:	0e 94 61 18 	call	0x30c2	; 0x30c2 <enqueue_face>
    3868:	bf ef       	ldi	r27, 0xFF	; 255
    386a:	4b 1a       	sub	r4, r27
    386c:	5b 0a       	sbc	r5, r27
    386e:	6b 0a       	sbc	r6, r27
    3870:	7b 0a       	sbc	r7, r27
		int numNeighbors = getNeighborCount();

		enqueue_count(numNeighbors, 1);
	
		int i;
		for (i = 0; i < NUM_PORTS; i++) {
    3872:	e6 e0       	ldi	r30, 0x06	; 6
    3874:	4e 16       	cp	r4, r30
    3876:	51 04       	cpc	r5, r1
    3878:	61 04       	cpc	r6, r1
    387a:	71 04       	cpc	r7, r1
    387c:	41 f7       	brne	.-48     	; 0x384e <meldMain+0x132>

		// loop forever, processing new facts and updating axioms
		while(1) {
				// loop for new facts to process

				if(!queue_is_empty(newTuples)) {
    387e:	80 91 5d 2f 	lds	r24, 0x2F5D
    3882:	90 91 5e 2f 	lds	r25, 0x2F5E
    3886:	0e 94 0d 1e 	call	0x3c1a	; 0x3c1a <queue_is_empty>
    388a:	81 11       	cpse	r24, r1
    388c:	12 c0       	rjmp	.+36     	; 0x38b2 <meldMain+0x196>
						int isNew = 0;
    388e:	1d 86       	std	Y+13, r1	; 0x0d
    3890:	1e 86       	std	Y+14, r1	; 0x0e
						tuple_t tuple = queue_dequeue(newTuples, &isNew);
    3892:	be 01       	movw	r22, r28
    3894:	63 5f       	subi	r22, 0xF3	; 243
    3896:	7f 4f       	sbci	r23, 0xFF	; 255
    3898:	80 91 5d 2f 	lds	r24, 0x2F5D
    389c:	90 91 5e 2f 	lds	r25, 0x2F5E
    38a0:	0e 94 62 1e 	call	0x3cc4	; 0x3cc4 <queue_dequeue>

						tuple_handle(tuple, isNew, reg);
    38a4:	6d 85       	ldd	r22, Y+13	; 0x0d
    38a6:	7e 85       	ldd	r23, Y+14	; 0x0e
    38a8:	4b ed       	ldi	r20, 0xDB	; 219
    38aa:	5e e2       	ldi	r21, 0x2E	; 46
    38ac:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <tuple_handle>
    38b0:	50 c0       	rjmp	.+160    	; 0x3952 <meldMain+0x236>
}

static inline bool
p_empty(tuple_pqueue *q)
{
	return q->queue == NULL;
    38b2:	e0 91 d9 2e 	lds	r30, 0x2ED9
    38b6:	f0 91 da 2e 	lds	r31, 0x2EDA
    38ba:	01 90       	ld	r0, Z+
    38bc:	f0 81       	ld	r31, Z
    38be:	e0 2d       	mov	r30, r0
				}
				else if (!p_empty(delayedTuples) && p_peek(delayedTuples)->priority <= getTime()) {
    38c0:	30 97       	sbiw	r30, 0x00	; 0
    38c2:	31 f1       	breq	.+76     	; 0x3910 <meldMain+0x1f4>
    38c4:	40 80       	ld	r4, Z
    38c6:	51 80       	ldd	r5, Z+1	; 0x01
    38c8:	62 80       	ldd	r6, Z+2	; 0x02
    38ca:	73 80       	ldd	r7, Z+3	; 0x03
    38cc:	0e 94 46 08 	call	0x108c	; 0x108c <getTime>
    38d0:	64 15       	cp	r22, r4
    38d2:	75 05       	cpc	r23, r5
    38d4:	86 05       	cpc	r24, r6
    38d6:	97 05       	cpc	r25, r7
    38d8:	d8 f0       	brcs	.+54     	; 0x3910 <meldMain+0x1f4>
						tuple_pentry *entry = p_dequeue(delayedTuples);
    38da:	80 91 d9 2e 	lds	r24, 0x2ED9
    38de:	90 91 da 2e 	lds	r25, 0x2EDA
    38e2:	0e 94 7a 1e 	call	0x3cf4	; 0x3cf4 <p_dequeue>
    38e6:	6c 01       	movw	r12, r24

						tuple_send(entry->tuple, entry->rt, 0, entry->records.count);
    38e8:	dc 01       	movw	r26, r24
    38ea:	16 96       	adiw	r26, 0x06	; 6
    38ec:	0d 91       	ld	r16, X+
    38ee:	1c 91       	ld	r17, X
    38f0:	17 97       	sbiw	r26, 0x07	; 7
    38f2:	1a 96       	adiw	r26, 0x0a	; 10
    38f4:	6d 91       	ld	r22, X+
    38f6:	7c 91       	ld	r23, X
    38f8:	1b 97       	sbiw	r26, 0x0b	; 11
    38fa:	20 e0       	ldi	r18, 0x00	; 0
    38fc:	30 e0       	ldi	r19, 0x00	; 0
    38fe:	a9 01       	movw	r20, r18
    3900:	18 96       	adiw	r26, 0x08	; 8
    3902:	8d 91       	ld	r24, X+
    3904:	9c 91       	ld	r25, X
    3906:	19 97       	sbiw	r26, 0x09	; 9
    3908:	0e 94 67 1a 	call	0x34ce	; 0x34ce <tuple_send>
						free(entry);
    390c:	c6 01       	movw	r24, r12
    390e:	1a c0       	rjmp	.+52     	; 0x3944 <meldMain+0x228>
				} else if (!(p_empty(newStratTuples))) {
    3910:	80 91 d7 2e 	lds	r24, 0x2ED7
    3914:	90 91 d8 2e 	lds	r25, 0x2ED8
    3918:	fc 01       	movw	r30, r24
    391a:	20 81       	ld	r18, Z
    391c:	31 81       	ldd	r19, Z+1	; 0x01
    391e:	23 2b       	or	r18, r19
    3920:	a1 f0       	breq	.+40     	; 0x394a <meldMain+0x22e>
						tuple_pentry *entry = p_dequeue(newStratTuples);
    3922:	0e 94 7a 1e 	call	0x3cf4	; 0x3cf4 <p_dequeue>
    3926:	8c 01       	movw	r16, r24
						tuple_handle(entry->tuple, entry->records.count, reg);
    3928:	dc 01       	movw	r26, r24
    392a:	16 96       	adiw	r26, 0x06	; 6
    392c:	6d 91       	ld	r22, X+
    392e:	7c 91       	ld	r23, X
    3930:	17 97       	sbiw	r26, 0x07	; 7
    3932:	4b ed       	ldi	r20, 0xDB	; 219
    3934:	5e e2       	ldi	r21, 0x2E	; 46
    3936:	18 96       	adiw	r26, 0x08	; 8
    3938:	8d 91       	ld	r24, X+
    393a:	9c 91       	ld	r25, X
    393c:	19 97       	sbiw	r26, 0x09	; 9
    393e:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <tuple_handle>

						free(entry);
    3942:	c8 01       	movw	r24, r16
    3944:	0e 94 40 3c 	call	0x7880	; 0x7880 <free>
    3948:	04 c0       	rjmp	.+8      	; 0x3952 <meldMain+0x236>
				} else {
						// if we've processed everything, sleep for the sake of letting other blocks run in the simulator
						delayMS(30);
    394a:	8e e1       	ldi	r24, 0x1E	; 30
    394c:	90 e0       	ldi	r25, 0x00	; 0
    394e:	0e 94 24 08 	call	0x1048	; 0x1048 <delayMS>
				}

				updateAccel();
    3952:	0e 94 3a 01 	call	0x274	; 0x274 <updateAccel>

				// update axioms based upon any changes
				int newNumNeighbors = getNeighborCount();
    3956:	0e 94 9f 03 	call	0x73e	; 0x73e <getNeighborCount>
    395a:	d8 2e       	mov	r13, r24
    395c:	08 2f       	mov	r16, r24
    395e:	10 e0       	ldi	r17, 0x00	; 0
				if (newNumNeighbors != numNeighbors) {
    3960:	0e 15       	cp	r16, r14
    3962:	1f 05       	cpc	r17, r15
    3964:	91 f0       	breq	.+36     	; 0x398a <meldMain+0x26e>
						enqueue_count(numNeighbors, -1);
    3966:	b7 01       	movw	r22, r14
    3968:	88 27       	eor	r24, r24
    396a:	77 fd       	sbrc	r23, 7
    396c:	80 95       	com	r24
    396e:	98 2f       	mov	r25, r24
    3970:	4f ef       	ldi	r20, 0xFF	; 255
    3972:	5f ef       	ldi	r21, 0xFF	; 255
    3974:	0e 94 05 18 	call	0x300a	; 0x300a <enqueue_count>
						numNeighbors = newNumNeighbors;
						enqueue_count(numNeighbors, 1);			
    3978:	6d 2d       	mov	r22, r13
    397a:	70 e0       	ldi	r23, 0x00	; 0
    397c:	80 e0       	ldi	r24, 0x00	; 0
    397e:	90 e0       	ldi	r25, 0x00	; 0
    3980:	41 e0       	ldi	r20, 0x01	; 1
    3982:	50 e0       	ldi	r21, 0x00	; 0
    3984:	0e 94 05 18 	call	0x300a	; 0x300a <enqueue_count>
    3988:	78 01       	movw	r14, r16
    398a:	8e 01       	movw	r16, r28
    398c:	0f 5f       	subi	r16, 0xFF	; 255
    398e:	1f 4f       	sbci	r17, 0xFF	; 255
    3990:	41 2c       	mov	r4, r1
    3992:	51 2c       	mov	r5, r1
    3994:	32 01       	movw	r6, r4
    3996:	52 01       	movw	r10, r4
				}

				for (i = 0; i < NUM_PORTS; i++) {
						NodeID neighbor = get_neighbor_ID(i);
    3998:	c2 01       	movw	r24, r4
    399a:	0e 94 6a 1b 	call	0x36d4	; 0x36d4 <get_neighbor_ID>
    399e:	6c 01       	movw	r12, r24

						if (neighbor == neighbors[i])
    39a0:	f8 01       	movw	r30, r16
    39a2:	80 81       	ld	r24, Z
    39a4:	91 81       	ldd	r25, Z+1	; 0x01
    39a6:	c8 16       	cp	r12, r24
    39a8:	d9 06       	cpc	r13, r25
    39aa:	49 f1       	breq	.+82     	; 0x39fe <meldMain+0x2e2>
								continue;

						enqueue_face(neighbors[i], i, -1);
    39ac:	12 01       	movw	r2, r4
    39ae:	43 01       	movw	r8, r6
    39b0:	2f ef       	ldi	r18, 0xFF	; 255
    39b2:	3f ef       	ldi	r19, 0xFF	; 255
    39b4:	a2 01       	movw	r20, r4
    39b6:	b3 01       	movw	r22, r6
    39b8:	0e 94 61 18 	call	0x30c2	; 0x30c2 <enqueue_face>

						while(!queue_is_empty(&(receivedTuples[i]))) {
    39bc:	aa 0c       	add	r10, r10
    39be:	bb 1c       	adc	r11, r11
    39c0:	aa 0c       	add	r10, r10
    39c2:	bb 1c       	adc	r11, r11
    39c4:	83 e6       	ldi	r24, 0x63	; 99
    39c6:	9f e2       	ldi	r25, 0x2F	; 47
    39c8:	a8 0e       	add	r10, r24
    39ca:	b9 1e       	adc	r11, r25
    39cc:	09 c0       	rjmp	.+18     	; 0x39e0 <meldMain+0x2c4>
						  tuple_t tuple = queue_dequeue(&receivedTuples[i], NULL);
    39ce:	60 e0       	ldi	r22, 0x00	; 0
    39d0:	70 e0       	ldi	r23, 0x00	; 0
    39d2:	c5 01       	movw	r24, r10
    39d4:	0e 94 62 1e 	call	0x3cc4	; 0x3cc4 <queue_dequeue>
						  enqueueNewTuple(tuple, (record_type)-1);
    39d8:	6f ef       	ldi	r22, 0xFF	; 255
    39da:	7f ef       	ldi	r23, 0xFF	; 255
    39dc:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <enqueueNewTuple>
						if (neighbor == neighbors[i])
								continue;

						enqueue_face(neighbors[i], i, -1);

						while(!queue_is_empty(&(receivedTuples[i]))) {
    39e0:	c5 01       	movw	r24, r10
    39e2:	0e 94 0d 1e 	call	0x3c1a	; 0x3c1a <queue_is_empty>
    39e6:	88 23       	and	r24, r24
    39e8:	91 f3       	breq	.-28     	; 0x39ce <meldMain+0x2b2>
						  tuple_t tuple = queue_dequeue(&receivedTuples[i], NULL);
						  enqueueNewTuple(tuple, (record_type)-1);
						}

						neighbors[i] = neighbor;
    39ea:	d8 01       	movw	r26, r16
    39ec:	cd 92       	st	X+, r12
    39ee:	dc 92       	st	X, r13
						enqueue_face(neighbors[i], i, 1);
    39f0:	21 e0       	ldi	r18, 0x01	; 1
    39f2:	30 e0       	ldi	r19, 0x00	; 0
    39f4:	a1 01       	movw	r20, r2
    39f6:	b4 01       	movw	r22, r8
    39f8:	c6 01       	movw	r24, r12
    39fa:	0e 94 61 18 	call	0x30c2	; 0x30c2 <enqueue_face>
    39fe:	0e 5f       	subi	r16, 0xFE	; 254
    3a00:	1f 4f       	sbci	r17, 0xFF	; 255
    3a02:	bf ef       	ldi	r27, 0xFF	; 255
    3a04:	4b 1a       	sub	r4, r27
    3a06:	5b 0a       	sbc	r5, r27
    3a08:	6b 0a       	sbc	r6, r27
    3a0a:	7b 0a       	sbc	r7, r27
						enqueue_count(numNeighbors, -1);
						numNeighbors = newNumNeighbors;
						enqueue_count(numNeighbors, 1);			
				}

				for (i = 0; i < NUM_PORTS; i++) {
    3a0c:	e6 e0       	ldi	r30, 0x06	; 6
    3a0e:	4e 16       	cp	r4, r30
    3a10:	51 04       	cpc	r5, r1
    3a12:	61 04       	cpc	r6, r1
    3a14:	71 04       	cpc	r7, r1
    3a16:	09 f0       	breq	.+2      	; 0x3a1a <meldMain+0x2fe>
    3a18:	be cf       	rjmp	.-132    	; 0x3996 <meldMain+0x27a>
    3a1a:	31 cf       	rjmp	.-414    	; 0x387e <meldMain+0x162>

00003a1c <blockID>:

meld_value blockID(meld_value x) {
  meld_int ret = MELD_INT(&x);
  //printf("Returning %d\n", ret);
  return MELD_CONVERT_INT(ret);
}
    3a1c:	08 95       	ret

00003a1e <gen_fresh_file>:
}
*/

int gen_fresh_file(void) {
	static int f = 0;
	return f++;
    3a1e:	20 91 38 29 	lds	r18, 0x2938
    3a22:	30 91 39 29 	lds	r19, 0x2939
    3a26:	c9 01       	movw	r24, r18
    3a28:	01 96       	adiw	r24, 0x01	; 1
    3a2a:	80 93 38 29 	sts	0x2938, r24
    3a2e:	90 93 39 29 	sts	0x2939, r25
}
    3a32:	c9 01       	movw	r24, r18
    3a34:	08 95       	ret

00003a36 <gen_fresh_tag>:

int gen_fresh_tag(void) {
	static int t = 0;
	return t++;
    3a36:	20 91 3a 29 	lds	r18, 0x293A
    3a3a:	30 91 3b 29 	lds	r19, 0x293B
    3a3e:	c9 01       	movw	r24, r18
    3a40:	01 96       	adiw	r24, 0x01	; 1
    3a42:	80 93 3a 29 	sts	0x293A, r24
    3a46:	90 93 3b 29 	sts	0x293B, r25
}
    3a4a:	c9 01       	movw	r24, r18
    3a4c:	08 95       	ret

00003a4e <gen_fresh_nonce>:

int gen_fresh_nonce(void) {
	static int n = 0;
	return n++;
    3a4e:	20 91 3c 29 	lds	r18, 0x293C
    3a52:	30 91 3d 29 	lds	r19, 0x293D
    3a56:	c9 01       	movw	r24, r18
    3a58:	01 96       	adiw	r24, 0x01	; 1
    3a5a:	80 93 3c 29 	sts	0x293C, r24
    3a5e:	90 93 3d 29 	sts	0x293D, r25
}
    3a62:	c9 01       	movw	r24, r18
    3a64:	08 95       	ret

00003a66 <queue_dequeue_pos>:
  return entry;
}

static tuple_t
queue_dequeue_pos(tuple_queue *queue, tuple_entry **pos)
{
    3a66:	cf 93       	push	r28
    3a68:	df 93       	push	r29
    3a6a:	dc 01       	movw	r26, r24
  tuple_entry *entry = *pos;
    3a6c:	eb 01       	movw	r28, r22
    3a6e:	e8 81       	ld	r30, Y
    3a70:	f9 81       	ldd	r31, Y+1	; 0x01
  tuple_entry *next = (*pos)->next;
    3a72:	80 81       	ld	r24, Z
    3a74:	91 81       	ldd	r25, Z+1	; 0x01
  
  if (entry == queue->tail) {
    3a76:	12 96       	adiw	r26, 0x02	; 2
    3a78:	2d 91       	ld	r18, X+
    3a7a:	3c 91       	ld	r19, X
    3a7c:	13 97       	sbiw	r26, 0x03	; 3
    3a7e:	e2 17       	cp	r30, r18
    3a80:	f3 07       	cpc	r31, r19
    3a82:	79 f4       	brne	.+30     	; 0x3aa2 <queue_dequeue_pos+0x3c>
    if(entry == queue->head)
    3a84:	2d 91       	ld	r18, X+
    3a86:	3c 91       	ld	r19, X
    3a88:	11 97       	sbiw	r26, 0x01	; 1
    3a8a:	e2 17       	cp	r30, r18
    3a8c:	f3 07       	cpc	r31, r19
    3a8e:	29 f4       	brne	.+10     	; 0x3a9a <queue_dequeue_pos+0x34>
      queue->tail = NULL;
    3a90:	12 96       	adiw	r26, 0x02	; 2
    3a92:	1d 92       	st	X+, r1
    3a94:	1c 92       	st	X, r1
    3a96:	13 97       	sbiw	r26, 0x03	; 3
    3a98:	04 c0       	rjmp	.+8      	; 0x3aa2 <queue_dequeue_pos+0x3c>
    else
      queue->tail = (tuple_entry *)pos; /* previous */
    3a9a:	12 96       	adiw	r26, 0x02	; 2
    3a9c:	6d 93       	st	X+, r22
    3a9e:	7c 93       	st	X, r23
    3aa0:	13 97       	sbiw	r26, 0x03	; 3
  }
  
  *pos = next;
    3aa2:	db 01       	movw	r26, r22
    3aa4:	8d 93       	st	X+, r24
    3aa6:	9c 93       	st	X, r25
    
  tuple_t tuple = entry->tuple;
    3aa8:	d4 81       	ldd	r29, Z+4	; 0x04
    3aaa:	c5 81       	ldd	r28, Z+5	; 0x05
  free(entry);
    3aac:	cf 01       	movw	r24, r30
    3aae:	0e 94 40 3c 	call	0x7880	; 0x7880 <free>
  
  return tuple;
}
    3ab2:	8d 2f       	mov	r24, r29
    3ab4:	9c 2f       	mov	r25, r28
    3ab6:	df 91       	pop	r29
    3ab8:	cf 91       	pop	r28
    3aba:	08 95       	ret

00003abc <eval>:
}

static inline
void* eval(const unsigned char value, tuple_t tuple,
	   const unsigned char **pc, Register *reg)
{
    3abc:	cf 93       	push	r28
    3abe:	df 93       	push	r29
    3ac0:	fa 01       	movw	r30, r20
  if (VAL_IS_REG(value)) {
    3ac2:	85 ff       	sbrs	r24, 5
    3ac4:	07 c0       	rjmp	.+14     	; 0x3ad4 <eval+0x18>
    return (void*)&(reg[VAL_REG(value)]);
    3ac6:	8f 71       	andi	r24, 0x1F	; 31
    3ac8:	44 e0       	ldi	r20, 0x04	; 4
    3aca:	84 9f       	mul	r24, r20
    3acc:	20 0d       	add	r18, r0
    3ace:	31 1d       	adc	r19, r1
    3ad0:	11 24       	eor	r1, r1
    3ad2:	53 c0       	rjmp	.+166    	; 0x3b7a <eval+0xbe>
  }

  switch(value) {
    3ad4:	82 30       	cpi	r24, 0x02	; 2
    3ad6:	b9 f0       	breq	.+46     	; 0x3b06 <eval+0x4a>
    3ad8:	30 f4       	brcc	.+12     	; 0x3ae6 <eval+0x2a>
    3ada:	88 23       	and	r24, r24
    3adc:	69 f0       	breq	.+26     	; 0x3af8 <eval+0x3c>
    3ade:	81 30       	cpi	r24, 0x01	; 1
    3ae0:	09 f0       	breq	.+2      	; 0x3ae4 <eval+0x28>
    3ae2:	3f c0       	rjmp	.+126    	; 0x3b62 <eval+0xa6>
    3ae4:	09 c0       	rjmp	.+18     	; 0x3af8 <eval+0x3c>
    3ae6:	84 30       	cpi	r24, 0x04	; 4
    3ae8:	71 f0       	breq	.+28     	; 0x3b06 <eval+0x4a>
    3aea:	18 f0       	brcs	.+6      	; 0x3af2 <eval+0x36>
    3aec:	8f 31       	cpi	r24, 0x1F	; 31
    3aee:	c9 f5       	brne	.+114    	; 0x3b62 <eval+0xa6>
    3af0:	43 c0       	rjmp	.+134    	; 0x3b78 <eval+0xbc>
    return ret;
    break;
  }

  case VALUE_TYPE_HOST: {
    return (void*)EVAL_HOST;
    3af2:	2b e5       	ldi	r18, 0x5B	; 91
    3af4:	3f e2       	ldi	r19, 0x2F	; 47
    3af6:	41 c0       	rjmp	.+130    	; 0x3b7a <eval+0xbe>
    return ret;
    break;
  }

  case VALUE_TYPE_INT: {
    void *ret = (void *)(*pc);
    3af8:	20 81       	ld	r18, Z
    3afa:	31 81       	ldd	r19, Z+1	; 0x01
    *pc = *pc + sizeof(meld_int);
    3afc:	c9 01       	movw	r24, r18
    3afe:	04 96       	adiw	r24, 0x04	; 4
    3b00:	80 83       	st	Z, r24
    3b02:	91 83       	std	Z+1, r25	; 0x01
    return ret;
    3b04:	3a c0       	rjmp	.+116    	; 0x3b7a <eval+0xbe>
    return (void*)tuple;
    break;
  }

  case VALUE_TYPE_FIELD: {
    const unsigned char reg_index = VAL_FIELD_REG(*pc);
    3b06:	a0 81       	ld	r26, Z
    3b08:	b1 81       	ldd	r27, Z+1	; 0x01
    3b0a:	11 96       	adiw	r26, 0x01	; 1
    3b0c:	8c 91       	ld	r24, X
    3b0e:	11 97       	sbiw	r26, 0x01	; 1
    3b10:	8f 71       	andi	r24, 0x1F	; 31
    const unsigned char field_num = VAL_FIELD_NUM(*pc);
    3b12:	9c 91       	ld	r25, X
    tuple_t tuple = (tuple_t)MELD_CONVERT_REG_TO_PTR(reg[reg_index]);
    3b14:	e9 01       	movw	r28, r18
    3b16:	44 e0       	ldi	r20, 0x04	; 4
    3b18:	84 9f       	mul	r24, r20
    3b1a:	c0 0d       	add	r28, r0
    3b1c:	d1 1d       	adc	r29, r1
    3b1e:	11 24       	eor	r1, r1
    3b20:	09 90       	ld	r0, Y+
    3b22:	d8 81       	ld	r29, Y
    3b24:	c0 2d       	mov	r28, r0
    (*pc) += 2;
    3b26:	12 96       	adiw	r26, 0x02	; 2
    3b28:	a0 83       	st	Z, r26
    3b2a:	b1 83       	std	Z+1, r27	; 0x01
    tuple_print(tuple, stdout);
    printf ("\n");
    printf ("tuple[%d] = %lx\n", field_num, MELD_INT(GET_TUPLE_FIELD(tuple, field_num)));
#endif

    return GET_TUPLE_FIELD(tuple, field_num);
    3b2c:	20 91 3e 29 	lds	r18, 0x293E
    3b30:	80 91 3f 29 	lds	r24, 0x293F
    3b34:	38 81       	ld	r19, Y
    3b36:	e2 2f       	mov	r30, r18
    3b38:	f8 2f       	mov	r31, r24
    3b3a:	e3 0f       	add	r30, r19
    3b3c:	f1 1d       	adc	r31, r1
    3b3e:	e3 0f       	add	r30, r19
    3b40:	f1 1d       	adc	r31, r1
    3b42:	30 81       	ld	r19, Z
    3b44:	e2 2f       	mov	r30, r18
    3b46:	f8 2f       	mov	r31, r24
    3b48:	e9 0f       	add	r30, r25
    3b4a:	f1 1d       	adc	r31, r1
    3b4c:	e9 0f       	add	r30, r25
    3b4e:	f1 1d       	adc	r31, r1
    3b50:	e3 0f       	add	r30, r19
    3b52:	f1 1d       	adc	r31, r1
    3b54:	21 81       	ldd	r18, Z+1	; 0x01
    3b56:	30 e0       	ldi	r19, 0x00	; 0
    3b58:	2f 5f       	subi	r18, 0xFF	; 255
    3b5a:	3f 4f       	sbci	r19, 0xFF	; 255
    3b5c:	2c 0f       	add	r18, r28
    3b5e:	3d 1f       	adc	r19, r29
    3b60:	0c c0       	rjmp	.+24     	; 0x3b7a <eval+0xbe>
    break;
  }
  }    

  assert(0);
    3b62:	43 eb       	ldi	r20, 0xB3	; 179
    3b64:	55 e2       	ldi	r21, 0x25	; 37
    3b66:	67 e5       	ldi	r22, 0x57	; 87
    3b68:	71 e0       	ldi	r23, 0x01	; 1
    3b6a:	85 eb       	ldi	r24, 0xB5	; 181
    3b6c:	95 e2       	ldi	r25, 0x25	; 37
    3b6e:	0e 94 e5 19 	call	0x33ca	; 0x33ca <__myassert>
  return NULL;
    3b72:	20 e0       	ldi	r18, 0x00	; 0
    3b74:	30 e0       	ldi	r19, 0x00	; 0
    3b76:	01 c0       	rjmp	.+2      	; 0x3b7a <eval+0xbe>
#endif /* PARALLEL_MACHINE */
    break;
  }

  case VALUE_TYPE_TUPLE: {
    return (void*)tuple;
    3b78:	9b 01       	movw	r18, r22
  }
  }    

  assert(0);
  return NULL;
}
    3b7a:	c9 01       	movw	r24, r18
    3b7c:	df 91       	pop	r29
    3b7e:	cf 91       	pop	r28
    3b80:	08 95       	ret

00003b82 <aggregate_free>:

static inline void
aggregate_free(tuple_t tuple, unsigned char field_aggregate,
	       unsigned char type_aggregate)
{
  switch(type_aggregate) {
    3b82:	4a 30       	cpi	r20, 0x0A	; 10
    3b84:	28 f4       	brcc	.+10     	; 0x3b90 <aggregate_free+0xe>
    3b86:	48 30       	cpi	r20, 0x08	; 8
    3b88:	30 f4       	brcc	.+12     	; 0x3b96 <aggregate_free+0x14>
    3b8a:	41 30       	cpi	r20, 0x01	; 1
    3b8c:	f0 f1       	brcs	.+124    	; 0x3c0a <aggregate_free+0x88>
    3b8e:	08 95       	ret
    3b90:	4c 30       	cpi	r20, 0x0C	; 12
    3b92:	d8 f5       	brcc	.+118    	; 0x3c0a <aggregate_free+0x88>
    3b94:	1d c0       	rjmp	.+58     	; 0x3bd0 <aggregate_free+0x4e>
    /* nothing to do */
    break;

  case AGG_SET_UNION_INT:
  case AGG_SET_UNION_FLOAT:
    set_delete(MELD_SET(GET_TUPLE_FIELD(tuple, field_aggregate)));
    3b96:	30 91 3e 29 	lds	r19, 0x293E
    3b9a:	20 91 3f 29 	lds	r18, 0x293F
    3b9e:	fc 01       	movw	r30, r24
    3ba0:	40 81       	ld	r20, Z
    3ba2:	e3 2f       	mov	r30, r19
    3ba4:	f2 2f       	mov	r31, r18
    3ba6:	e4 0f       	add	r30, r20
    3ba8:	f1 1d       	adc	r31, r1
    3baa:	e4 0f       	add	r30, r20
    3bac:	f1 1d       	adc	r31, r1
    3bae:	40 81       	ld	r20, Z
    3bb0:	e3 2f       	mov	r30, r19
    3bb2:	f2 2f       	mov	r31, r18
    3bb4:	e6 0f       	add	r30, r22
    3bb6:	f1 1d       	adc	r31, r1
    3bb8:	e6 0f       	add	r30, r22
    3bba:	f1 1d       	adc	r31, r1
    3bbc:	e4 0f       	add	r30, r20
    3bbe:	f1 1d       	adc	r31, r1
    3bc0:	21 81       	ldd	r18, Z+1	; 0x01
    3bc2:	fc 01       	movw	r30, r24
    3bc4:	e2 0f       	add	r30, r18
    3bc6:	f1 1d       	adc	r31, r1
    3bc8:	81 81       	ldd	r24, Z+1	; 0x01
    3bca:	92 81       	ldd	r25, Z+2	; 0x02
    3bcc:	0c 94 97 34 	jmp	0x692e	; 0x692e <set_delete>
    break;

  case AGG_SUM_LIST_INT:
  case AGG_SUM_LIST_FLOAT:
    list_delete(MELD_LIST(GET_TUPLE_FIELD(tuple, field_aggregate)));
    3bd0:	30 91 3e 29 	lds	r19, 0x293E
    3bd4:	20 91 3f 29 	lds	r18, 0x293F
    3bd8:	fc 01       	movw	r30, r24
    3bda:	40 81       	ld	r20, Z
    3bdc:	e3 2f       	mov	r30, r19
    3bde:	f2 2f       	mov	r31, r18
    3be0:	e4 0f       	add	r30, r20
    3be2:	f1 1d       	adc	r31, r1
    3be4:	e4 0f       	add	r30, r20
    3be6:	f1 1d       	adc	r31, r1
    3be8:	40 81       	ld	r20, Z
    3bea:	e3 2f       	mov	r30, r19
    3bec:	f2 2f       	mov	r31, r18
    3bee:	e6 0f       	add	r30, r22
    3bf0:	f1 1d       	adc	r31, r1
    3bf2:	e6 0f       	add	r30, r22
    3bf4:	f1 1d       	adc	r31, r1
    3bf6:	e4 0f       	add	r30, r20
    3bf8:	f1 1d       	adc	r31, r1
    3bfa:	21 81       	ldd	r18, Z+1	; 0x01
    3bfc:	fc 01       	movw	r30, r24
    3bfe:	e2 0f       	add	r30, r18
    3c00:	f1 1d       	adc	r31, r1
    3c02:	81 81       	ldd	r24, Z+1	; 0x01
    3c04:	92 81       	ldd	r25, Z+2	; 0x02
    3c06:	0c 94 6a 37 	jmp	0x6ed4	; 0x6ed4 <list_delete>
    break;

  default:
    assert(0);
    3c0a:	43 eb       	ldi	r20, 0xB3	; 179
    3c0c:	55 e2       	ldi	r21, 0x25	; 37
    3c0e:	6f e5       	ldi	r22, 0x5F	; 95
    3c10:	72 e0       	ldi	r23, 0x02	; 2
    3c12:	85 eb       	ldi	r24, 0xB5	; 181
    3c14:	95 e2       	ldi	r25, 0x25	; 37
    3c16:	0c 94 e5 19 	jmp	0x33ca	; 0x33ca <__myassert>

00003c1a <queue_is_empty>:

extern persistent_set *persistent;

bool
queue_is_empty(tuple_queue *queue)
{
    3c1a:	fc 01       	movw	r30, r24
  return queue->head == NULL;
    3c1c:	81 e0       	ldi	r24, 0x01	; 1
    3c1e:	20 81       	ld	r18, Z
    3c20:	31 81       	ldd	r19, Z+1	; 0x01
    3c22:	23 2b       	or	r18, r19
    3c24:	09 f0       	breq	.+2      	; 0x3c28 <queue_is_empty+0xe>
    3c26:	80 e0       	ldi	r24, 0x00	; 0
}
    3c28:	08 95       	ret

00003c2a <queue_push_tuple>:

void
queue_push_tuple(tuple_queue *queue, tuple_entry *entry)
{
    3c2a:	fc 01       	movw	r30, r24
  if(queue->head == NULL)
    3c2c:	80 81       	ld	r24, Z
    3c2e:	91 81       	ldd	r25, Z+1	; 0x01
    3c30:	89 2b       	or	r24, r25
    3c32:	29 f4       	brne	.+10     	; 0x3c3e <queue_push_tuple+0x14>
    queue->head = queue->tail = entry;
    3c34:	62 83       	std	Z+2, r22	; 0x02
    3c36:	73 83       	std	Z+3, r23	; 0x03
    3c38:	60 83       	st	Z, r22
    3c3a:	71 83       	std	Z+1, r23	; 0x01
    3c3c:	08 95       	ret
  else {
    queue->tail->next = entry;
    3c3e:	a2 81       	ldd	r26, Z+2	; 0x02
    3c40:	b3 81       	ldd	r27, Z+3	; 0x03
    3c42:	6d 93       	st	X+, r22
    3c44:	7c 93       	st	X, r23
    queue->tail = entry;
    3c46:	62 83       	std	Z+2, r22	; 0x02
    3c48:	73 83       	std	Z+3, r23	; 0x03
    3c4a:	08 95       	ret

00003c4c <queue_pop_tuple>:
  }
}

tuple_t
queue_pop_tuple(tuple_queue *queue)
{
    3c4c:	dc 01       	movw	r26, r24
  tuple_entry *entry = NULL;
  
  if (queue->head) {
    3c4e:	ed 91       	ld	r30, X+
    3c50:	fc 91       	ld	r31, X
    3c52:	11 97       	sbiw	r26, 0x01	; 1
    3c54:	30 97       	sbiw	r30, 0x00	; 0
    3c56:	59 f0       	breq	.+22     	; 0x3c6e <queue_pop_tuple+0x22>
    entry = queue->head;
    queue->head = queue->head->next;
    3c58:	80 81       	ld	r24, Z
    3c5a:	91 81       	ldd	r25, Z+1	; 0x01
    3c5c:	8d 93       	st	X+, r24
    3c5e:	9c 93       	st	X, r25
    3c60:	11 97       	sbiw	r26, 0x01	; 1
    
    if (queue->head == NULL)
    3c62:	89 2b       	or	r24, r25
    3c64:	21 f4       	brne	.+8      	; 0x3c6e <queue_pop_tuple+0x22>
      queue->tail = NULL;
    3c66:	12 96       	adiw	r26, 0x02	; 2
    3c68:	1d 92       	st	X+, r1
    3c6a:	1c 92       	st	X, r1
    3c6c:	13 97       	sbiw	r26, 0x03	; 3
  }
  
  return entry;
}
    3c6e:	cf 01       	movw	r24, r30
    3c70:	08 95       	ret

00003c72 <queue_enqueue>:
  return tuple;
}

tuple_entry*
queue_enqueue(tuple_queue *queue, tuple_t tuple, record_type isNew)
{
    3c72:	bf 92       	push	r11
    3c74:	cf 92       	push	r12
    3c76:	df 92       	push	r13
    3c78:	ef 92       	push	r14
    3c7a:	ff 92       	push	r15
    3c7c:	0f 93       	push	r16
    3c7e:	1f 93       	push	r17
    3c80:	cf 93       	push	r28
    3c82:	df 93       	push	r29
    3c84:	8c 01       	movw	r16, r24
    3c86:	6b 01       	movw	r12, r22
    3c88:	7a 01       	movw	r14, r20
  tuple_entry *entry = malloc(sizeof(tuple_entry));
    3c8a:	86 e0       	ldi	r24, 0x06	; 6
    3c8c:	90 e0       	ldi	r25, 0x00	; 0
    3c8e:	0e 94 a5 3b 	call	0x774a	; 0x774a <malloc>
    3c92:	b9 2e       	mov	r11, r25
    3c94:	c8 2f       	mov	r28, r24
    3c96:	d9 2f       	mov	r29, r25
  
  entry->tuple = tuple;
    3c98:	cc 82       	std	Y+4, r12	; 0x04
    3c9a:	dd 82       	std	Y+5, r13	; 0x05
  entry->records = isNew;
    3c9c:	ea 82       	std	Y+2, r14	; 0x02
    3c9e:	fb 82       	std	Y+3, r15	; 0x03
  entry->next = NULL;
    3ca0:	18 82       	st	Y, r1
    3ca2:	19 82       	std	Y+1, r1	; 0x01
  
  queue_push_tuple(queue, entry);
    3ca4:	be 01       	movw	r22, r28
    3ca6:	c8 01       	movw	r24, r16
    3ca8:	0e 94 15 1e 	call	0x3c2a	; 0x3c2a <queue_push_tuple>

  return entry;
}
    3cac:	8c 2f       	mov	r24, r28
    3cae:	9b 2d       	mov	r25, r11
    3cb0:	df 91       	pop	r29
    3cb2:	cf 91       	pop	r28
    3cb4:	1f 91       	pop	r17
    3cb6:	0f 91       	pop	r16
    3cb8:	ff 90       	pop	r15
    3cba:	ef 90       	pop	r14
    3cbc:	df 90       	pop	r13
    3cbe:	cf 90       	pop	r12
    3cc0:	bf 90       	pop	r11
    3cc2:	08 95       	ret

00003cc4 <queue_dequeue>:

tuple_t
queue_dequeue(tuple_queue *queue, int *isNew)
{
    3cc4:	0f 93       	push	r16
    3cc6:	1f 93       	push	r17
    3cc8:	cf 93       	push	r28
    3cca:	df 93       	push	r29
    3ccc:	eb 01       	movw	r28, r22
  tuple_entry *entry = queue_pop_tuple(queue);
    3cce:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <queue_pop_tuple>

  tuple_t tuple = entry->tuple;
    3cd2:	fc 01       	movw	r30, r24
    3cd4:	04 81       	ldd	r16, Z+4	; 0x04
    3cd6:	15 81       	ldd	r17, Z+5	; 0x05

  if(isNew)
    3cd8:	20 97       	sbiw	r28, 0x00	; 0
    3cda:	21 f0       	breq	.+8      	; 0x3ce4 <queue_dequeue+0x20>
    *isNew = entry->records.count;
    3cdc:	22 81       	ldd	r18, Z+2	; 0x02
    3cde:	33 81       	ldd	r19, Z+3	; 0x03
    3ce0:	28 83       	st	Y, r18
    3ce2:	39 83       	std	Y+1, r19	; 0x01

  free(entry);
    3ce4:	0e 94 40 3c 	call	0x7880	; 0x7880 <free>

  return tuple;
}
    3ce8:	c8 01       	movw	r24, r16
    3cea:	df 91       	pop	r29
    3cec:	cf 91       	pop	r28
    3cee:	1f 91       	pop	r17
    3cf0:	0f 91       	pop	r16
    3cf2:	08 95       	ret

00003cf4 <p_dequeue>:

tuple_pentry*
p_dequeue(tuple_pqueue *q)
{
  tuple_pentry *ret = q->queue;
    3cf4:	dc 01       	movw	r26, r24
    3cf6:	ed 91       	ld	r30, X+
    3cf8:	fc 91       	ld	r31, X
    3cfa:	11 97       	sbiw	r26, 0x01	; 1
  
  if(q->queue != NULL)
    3cfc:	30 97       	sbiw	r30, 0x00	; 0
    3cfe:	21 f0       	breq	.+8      	; 0x3d08 <p_dequeue+0x14>
    q->queue = q->queue->next;
    3d00:	24 81       	ldd	r18, Z+4	; 0x04
    3d02:	35 81       	ldd	r19, Z+5	; 0x05
    3d04:	2d 93       	st	X+, r18
    3d06:	3c 93       	st	X, r19
    
  return ret;
}
    3d08:	cf 01       	movw	r24, r30
    3d0a:	08 95       	ret

00003d0c <p_enqueue>:

void
p_enqueue(tuple_pqueue *queue, meld_int priority, tuple_t tuple,
	  void *rt, record_type isNew)
{
    3d0c:	af 92       	push	r10
    3d0e:	bf 92       	push	r11
    3d10:	cf 92       	push	r12
    3d12:	df 92       	push	r13
    3d14:	ef 92       	push	r14
    3d16:	ff 92       	push	r15
    3d18:	0f 93       	push	r16
    3d1a:	1f 93       	push	r17
    3d1c:	cf 93       	push	r28
    3d1e:	df 93       	push	r29
    3d20:	00 d0       	rcall	.+0      	; 0x3d22 <p_enqueue+0x16>
    3d22:	1f 92       	push	r1
    3d24:	cd b7       	in	r28, 0x3d	; 61
    3d26:	de b7       	in	r29, 0x3e	; 62
    3d28:	6c 01       	movw	r12, r24
    3d2a:	59 01       	movw	r10, r18
  tuple_pentry *entry = malloc(sizeof(tuple_pentry));
    3d2c:	8c e0       	ldi	r24, 0x0C	; 12
    3d2e:	90 e0       	ldi	r25, 0x00	; 0
    3d30:	49 83       	std	Y+1, r20	; 0x01
    3d32:	5a 83       	std	Y+2, r21	; 0x02
    3d34:	6b 83       	std	Y+3, r22	; 0x03
    3d36:	7c 83       	std	Y+4, r23	; 0x04
    3d38:	0e 94 a5 3b 	call	0x774a	; 0x774a <malloc>
    3d3c:	fc 01       	movw	r30, r24

  entry->tuple = tuple;
    3d3e:	a0 86       	std	Z+8, r10	; 0x08
    3d40:	b1 86       	std	Z+9, r11	; 0x09
  entry->records = isNew;
    3d42:	e6 82       	std	Z+6, r14	; 0x06
    3d44:	f7 82       	std	Z+7, r15	; 0x07
  entry->priority = priority;
    3d46:	49 81       	ldd	r20, Y+1	; 0x01
    3d48:	5a 81       	ldd	r21, Y+2	; 0x02
    3d4a:	6b 81       	ldd	r22, Y+3	; 0x03
    3d4c:	7c 81       	ldd	r23, Y+4	; 0x04
    3d4e:	40 83       	st	Z, r20
    3d50:	51 83       	std	Z+1, r21	; 0x01
    3d52:	62 83       	std	Z+2, r22	; 0x02
    3d54:	73 83       	std	Z+3, r23	; 0x03
  entry->rt = rt;
    3d56:	02 87       	std	Z+10, r16	; 0x0a
    3d58:	13 87       	std	Z+11, r17	; 0x0b

  tuple_pentry **spot;
  for (spot = &(queue->queue);
    3d5a:	76 01       	movw	r14, r12
    3d5c:	04 c0       	rjmp	.+8      	; 0x3d66 <p_enqueue+0x5a>
       *spot != NULL &&
         (*spot)->priority < priority;
       spot = &((*spot)->next));
    3d5e:	7c 01       	movw	r14, r24
    3d60:	24 e0       	ldi	r18, 0x04	; 4
    3d62:	e2 0e       	add	r14, r18
    3d64:	f1 1c       	adc	r15, r1
  entry->priority = priority;
  entry->rt = rt;

  tuple_pentry **spot;
  for (spot = &(queue->queue);
       *spot != NULL &&
    3d66:	d7 01       	movw	r26, r14
    3d68:	8d 91       	ld	r24, X+
    3d6a:	9c 91       	ld	r25, X
  entry->records = isNew;
  entry->priority = priority;
  entry->rt = rt;

  tuple_pentry **spot;
  for (spot = &(queue->queue);
    3d6c:	00 97       	sbiw	r24, 0x00	; 0
    3d6e:	51 f0       	breq	.+20     	; 0x3d84 <p_enqueue+0x78>
       *spot != NULL &&
    3d70:	dc 01       	movw	r26, r24
    3d72:	0d 91       	ld	r16, X+
    3d74:	1d 91       	ld	r17, X+
    3d76:	2d 91       	ld	r18, X+
    3d78:	3c 91       	ld	r19, X
    3d7a:	04 17       	cp	r16, r20
    3d7c:	15 07       	cpc	r17, r21
    3d7e:	26 07       	cpc	r18, r22
    3d80:	37 07       	cpc	r19, r23
    3d82:	6c f3       	brlt	.-38     	; 0x3d5e <p_enqueue+0x52>
         (*spot)->priority < priority;
       spot = &((*spot)->next));

  entry->next = *spot;
    3d84:	84 83       	std	Z+4, r24	; 0x04
    3d86:	95 83       	std	Z+5, r25	; 0x05
  *spot = entry;
    3d88:	d7 01       	movw	r26, r14
    3d8a:	ed 93       	st	X+, r30
    3d8c:	fc 93       	st	X, r31
}
    3d8e:	24 96       	adiw	r28, 0x04	; 4
    3d90:	cd bf       	out	0x3d, r28	; 61
    3d92:	de bf       	out	0x3e, r29	; 62
    3d94:	df 91       	pop	r29
    3d96:	cf 91       	pop	r28
    3d98:	1f 91       	pop	r17
    3d9a:	0f 91       	pop	r16
    3d9c:	ff 90       	pop	r15
    3d9e:	ef 90       	pop	r14
    3da0:	df 90       	pop	r13
    3da2:	cf 90       	pop	r12
    3da4:	bf 90       	pop	r11
    3da6:	af 90       	pop	r10
    3da8:	08 95       	ret

00003daa <init_deltas>:
    
void
init_deltas(void)
{
    3daa:	ef 92       	push	r14
    3dac:	ff 92       	push	r15
    3dae:	0f 93       	push	r16
    3db0:	1f 93       	push	r17
    3db2:	cf 93       	push	r28
    3db4:	df 93       	push	r29
  int i;

  deltas = (unsigned char **)malloc(sizeof(unsigned char*)*NUM_TYPES);
    3db6:	c0 91 56 20 	lds	r28, 0x2056
    3dba:	d0 e0       	ldi	r29, 0x00	; 0
    3dbc:	8e 01       	movw	r16, r28
    3dbe:	00 0f       	add	r16, r16
    3dc0:	11 1f       	adc	r17, r17
    3dc2:	c8 01       	movw	r24, r16
    3dc4:	0e 94 a5 3b 	call	0x774a	; 0x774a <malloc>
    3dc8:	7c 01       	movw	r14, r24
    3dca:	80 93 42 29 	sts	0x2942, r24
    3dce:	f0 92 43 29 	sts	0x2943, r15
  delta_sizes = (int *)malloc(sizeof(int)*NUM_TYPES);
    3dd2:	c8 01       	movw	r24, r16
    3dd4:	0e 94 a5 3b 	call	0x774a	; 0x774a <malloc>
    3dd8:	80 93 40 29 	sts	0x2940, r24
    3ddc:	90 93 41 29 	sts	0x2941, r25
    3de0:	67 e5       	ldi	r22, 0x57	; 87
    3de2:	70 e2       	ldi	r23, 0x20	; 32
    3de4:	fc 01       	movw	r30, r24
    3de6:	d7 01       	movw	r26, r14

  for (i = 0; i < NUM_TYPES; ++i) {
    3de8:	20 e0       	ldi	r18, 0x00	; 0
    3dea:	30 e0       	ldi	r19, 0x00	; 0
    3dec:	8e 01       	movw	r16, r28
    3dee:	1a c0       	rjmp	.+52     	; 0x3e24 <init_deltas+0x7a>
    delta_sizes[i] = TYPE_NODELTAS(i);
    3df0:	2f 5f       	subi	r18, 0xFF	; 255
    3df2:	3f 4f       	sbci	r19, 0xFF	; 255
    3df4:	eb 01       	movw	r28, r22
    3df6:	49 91       	ld	r20, Y+
    3df8:	be 01       	movw	r22, r28
    3dfa:	50 e0       	ldi	r21, 0x00	; 0
    3dfc:	ca 01       	movw	r24, r20
    3dfe:	84 5a       	subi	r24, 0xA4	; 164
    3e00:	9f 4d       	sbci	r25, 0xDF	; 223
    3e02:	ec 01       	movw	r28, r24
    3e04:	88 81       	ld	r24, Y
    3e06:	80 83       	st	Z, r24
    3e08:	11 82       	std	Z+1, r1	; 0x01
    3e0a:	32 96       	adiw	r30, 0x02	; 2
    deltas[i] = (unsigned char*)TYPE_DELTAS(i);
    3e0c:	ca 01       	movw	r24, r20
    3e0e:	07 96       	adiw	r24, 0x07	; 7
    3e10:	45 5a       	subi	r20, 0xA5	; 165
    3e12:	5f 4d       	sbci	r21, 0xDF	; 223
    3e14:	ea 01       	movw	r28, r20
    3e16:	48 81       	ld	r20, Y
    3e18:	84 0f       	add	r24, r20
    3e1a:	91 1d       	adc	r25, r1
    3e1c:	8a 5a       	subi	r24, 0xAA	; 170
    3e1e:	9f 4d       	sbci	r25, 0xDF	; 223
    3e20:	8d 93       	st	X+, r24
    3e22:	9d 93       	st	X+, r25
  int i;

  deltas = (unsigned char **)malloc(sizeof(unsigned char*)*NUM_TYPES);
  delta_sizes = (int *)malloc(sizeof(int)*NUM_TYPES);

  for (i = 0; i < NUM_TYPES; ++i) {
    3e24:	20 17       	cp	r18, r16
    3e26:	31 07       	cpc	r19, r17
    3e28:	1c f3       	brlt	.-58     	; 0x3df0 <init_deltas+0x46>
    delta_sizes[i] = TYPE_NODELTAS(i);
    deltas[i] = (unsigned char*)TYPE_DELTAS(i);
  }
}
    3e2a:	df 91       	pop	r29
    3e2c:	cf 91       	pop	r28
    3e2e:	1f 91       	pop	r17
    3e30:	0f 91       	pop	r16
    3e32:	ff 90       	pop	r15
    3e34:	ef 90       	pop	r14
    3e36:	08 95       	ret

00003e38 <init_fields>:

static int type;
void
init_fields(void)
{
    3e38:	7f 92       	push	r7
    3e3a:	8f 92       	push	r8
    3e3c:	9f 92       	push	r9
    3e3e:	af 92       	push	r10
    3e40:	bf 92       	push	r11
    3e42:	cf 92       	push	r12
    3e44:	df 92       	push	r13
    3e46:	ef 92       	push	r14
    3e48:	ff 92       	push	r15
    3e4a:	0f 93       	push	r16
    3e4c:	1f 93       	push	r17
    3e4e:	cf 93       	push	r28
    3e50:	df 93       	push	r29
  size_t total = 2*NUM_TYPES;
    3e52:	e0 90 56 20 	lds	r14, 0x2056
    3e56:	f1 2c       	mov	r15, r1
    3e58:	e7 01       	movw	r28, r14
    3e5a:	cc 0f       	add	r28, r28
    3e5c:	dd 1f       	adc	r29, r29
    3e5e:	a7 e5       	ldi	r26, 0x57	; 87
    3e60:	b0 e2       	ldi	r27, 0x20	; 32
    3e62:	ce 01       	movw	r24, r28
  int i, j;
  
  for(i = 0; i < NUM_TYPES; ++i)
    3e64:	20 e0       	ldi	r18, 0x00	; 0
    3e66:	30 e0       	ldi	r19, 0x00	; 0
    3e68:	0b c0       	rjmp	.+22     	; 0x3e80 <init_fields+0x48>
    total += TYPE_NOARGS(i) * 2;
    3e6a:	2f 5f       	subi	r18, 0xFF	; 255
    3e6c:	3f 4f       	sbci	r19, 0xFF	; 255
    3e6e:	ed 91       	ld	r30, X+
    3e70:	f0 e0       	ldi	r31, 0x00	; 0
    3e72:	e5 5a       	subi	r30, 0xA5	; 165
    3e74:	ff 4d       	sbci	r31, 0xDF	; 223
    3e76:	40 81       	ld	r20, Z
    3e78:	84 0f       	add	r24, r20
    3e7a:	91 1d       	adc	r25, r1
    3e7c:	84 0f       	add	r24, r20
    3e7e:	91 1d       	adc	r25, r1
init_fields(void)
{
  size_t total = 2*NUM_TYPES;
  int i, j;
  
  for(i = 0; i < NUM_TYPES; ++i)
    3e80:	2e 15       	cp	r18, r14
    3e82:	3f 05       	cpc	r19, r15
    3e84:	94 f3       	brlt	.-28     	; 0x3e6a <init_fields+0x32>
    total += TYPE_NOARGS(i) * 2;
  
  arguments = malloc(total);
    3e86:	0e 94 a5 3b 	call	0x774a	; 0x774a <malloc>
    3e8a:	80 93 3e 29 	sts	0x293E, r24
    3e8e:	90 93 3f 29 	sts	0x293F, r25
  unsigned char *start = arguments + 2*NUM_TYPES;
    3e92:	c8 0f       	add	r28, r24
    3e94:	d9 1f       	adc	r29, r25
  unsigned char offset, size;
  
  for(i = 0; i < NUM_TYPES; ++i) {
    3e96:	cc 24       	eor	r12, r12
    3e98:	c3 94       	inc	r12
    3e9a:	d1 2c       	mov	r13, r1
    3e9c:	80 e0       	ldi	r24, 0x00	; 0
    3e9e:	90 e0       	ldi	r25, 0x00	; 0
    3ea0:	56 c0       	rjmp	.+172    	; 0x3f4e <init_fields+0x116>
    arguments[i*2] = start - arguments; /* start */
    3ea2:	20 91 3e 29 	lds	r18, 0x293E
    3ea6:	30 91 3f 29 	lds	r19, 0x293F
    3eaa:	fc 01       	movw	r30, r24
    3eac:	ee 0f       	add	r30, r30
    3eae:	ff 1f       	adc	r31, r31
    3eb0:	e2 0f       	add	r30, r18
    3eb2:	f3 1f       	adc	r31, r19
    3eb4:	ae 01       	movw	r20, r28
    3eb6:	42 1b       	sub	r20, r18
    3eb8:	53 0b       	sbc	r21, r19
    3eba:	40 83       	st	Z, r20
    offset = 0;
    3ebc:	71 2c       	mov	r7, r1
    
    for(j = 0; j < TYPE_NOARGS(i); ++j) {
    3ebe:	00 e0       	ldi	r16, 0x00	; 0
    3ec0:	10 e0       	ldi	r17, 0x00	; 0
  }
}

static int type;
void
init_fields(void)
    3ec2:	5c 01       	movw	r10, r24
    3ec4:	5f ef       	ldi	r21, 0xFF	; 255
    3ec6:	a5 1a       	sub	r10, r21
    3ec8:	b5 0a       	sbc	r11, r21
    3eca:	56 e5       	ldi	r21, 0x56	; 86
    3ecc:	85 2e       	mov	r8, r21
    3ece:	50 e2       	ldi	r21, 0x20	; 32
    3ed0:	95 2e       	mov	r9, r21
    3ed2:	88 0e       	add	r8, r24
    3ed4:	99 1e       	adc	r9, r25
  
  for(i = 0; i < NUM_TYPES; ++i) {
    arguments[i*2] = start - arguments; /* start */
    offset = 0;
    
    for(j = 0; j < TYPE_NOARGS(i); ++j) {
    3ed6:	23 c0       	rjmp	.+70     	; 0x3f1e <init_fields+0xe6>
      type = TYPE_ARG_TYPE(i, j);
    3ed8:	e0 0f       	add	r30, r16
    3eda:	f1 1f       	adc	r31, r17
    3edc:	e3 5a       	subi	r30, 0xA3	; 163
    3ede:	ff 4d       	sbci	r31, 0xDF	; 223
    3ee0:	80 81       	ld	r24, Z
    3ee2:	80 93 44 29 	sts	0x2944, r24
    3ee6:	10 92 45 29 	sts	0x2945, r1
      switch (type) {
    3eea:	88 30       	cpi	r24, 0x08	; 8
    3eec:	18 f4       	brcc	.+6      	; 0x3ef4 <init_fields+0xbc>
    3eee:	82 30       	cpi	r24, 0x02	; 2
    3ef0:	78 f4       	brcc	.+30     	; 0x3f10 <init_fields+0xd8>
    3ef2:	02 c0       	rjmp	.+4      	; 0x3ef8 <init_fields+0xc0>
    3ef4:	88 30       	cpi	r24, 0x08	; 8
    3ef6:	11 f4       	brne	.+4      	; 0x3efc <init_fields+0xc4>

      case (int)FIELD_INT:
      case (int)FIELD_TYPE:
	size = sizeof(meld_int);
    3ef8:	84 e0       	ldi	r24, 0x04	; 4
    3efa:	0b c0       	rjmp	.+22     	; 0x3f12 <init_fields+0xda>
      case (int)FIELD_SET_FLOAT:
	size = sizeof(void*);
	break;

      default:
	assert(0);
    3efc:	43 eb       	ldi	r20, 0xB3	; 179
    3efe:	55 e2       	ldi	r21, 0x25	; 37
    3f00:	6b ec       	ldi	r22, 0xCB	; 203
    3f02:	70 e0       	ldi	r23, 0x00	; 0
    3f04:	85 eb       	ldi	r24, 0xB5	; 181
    3f06:	95 e2       	ldi	r25, 0x25	; 37
    3f08:	0e 94 e5 19 	call	0x33ca	; 0x33ca <__myassert>
	size = 0;
    3f0c:	80 e0       	ldi	r24, 0x00	; 0
	break;
    3f0e:	01 c0       	rjmp	.+2      	; 0x3f12 <init_fields+0xda>
      case (int)FIELD_FLOAT:
	size = sizeof(meld_float);
	break;

      case (int)FIELD_ADDR:
	size = sizeof(NodeID);
    3f10:	82 e0       	ldi	r24, 0x02	; 2
	assert(0);
	size = 0;
	break;
      }
      
      start[0] = size; /* argument size */
    3f12:	88 83       	st	Y, r24
      start[1] = offset; /* argument offset */
    3f14:	79 82       	std	Y+1, r7	; 0x01
      
      offset += size;
    3f16:	78 0e       	add	r7, r24
      start += 2;
    3f18:	22 96       	adiw	r28, 0x02	; 2
  
  for(i = 0; i < NUM_TYPES; ++i) {
    arguments[i*2] = start - arguments; /* start */
    offset = 0;
    
    for(j = 0; j < TYPE_NOARGS(i); ++j) {
    3f1a:	0f 5f       	subi	r16, 0xFF	; 255
    3f1c:	1f 4f       	sbci	r17, 0xFF	; 255
    3f1e:	d4 01       	movw	r26, r8
    3f20:	11 96       	adiw	r26, 0x01	; 1
    3f22:	ec 91       	ld	r30, X
    3f24:	f0 e0       	ldi	r31, 0x00	; 0
    3f26:	df 01       	movw	r26, r30
    3f28:	a5 5a       	subi	r26, 0xA5	; 165
    3f2a:	bf 4d       	sbci	r27, 0xDF	; 223
    3f2c:	8c 91       	ld	r24, X
    3f2e:	90 e0       	ldi	r25, 0x00	; 0
    3f30:	08 17       	cp	r16, r24
    3f32:	19 07       	cpc	r17, r25
    3f34:	8c f2       	brlt	.-94     	; 0x3ed8 <init_fields+0xa0>
      
      offset += size;
      start += 2;
    }
    
    arguments[i*2+1] = offset + TYPE_FIELD_SIZE; /* tuple size */
    3f36:	e0 91 3e 29 	lds	r30, 0x293E
    3f3a:	f0 91 3f 29 	lds	r31, 0x293F
    3f3e:	ec 0d       	add	r30, r12
    3f40:	fd 1d       	adc	r31, r13
    3f42:	73 94       	inc	r7
    3f44:	70 82       	st	Z, r7
    3f46:	b2 e0       	ldi	r27, 0x02	; 2
    3f48:	cb 0e       	add	r12, r27
    3f4a:	d1 1c       	adc	r13, r1
    3f4c:	c5 01       	movw	r24, r10
  
  arguments = malloc(total);
  unsigned char *start = arguments + 2*NUM_TYPES;
  unsigned char offset, size;
  
  for(i = 0; i < NUM_TYPES; ++i) {
    3f4e:	8e 15       	cp	r24, r14
    3f50:	9f 05       	cpc	r25, r15
    3f52:	0c f4       	brge	.+2      	; 0x3f56 <init_fields+0x11e>
    3f54:	a6 cf       	rjmp	.-180    	; 0x3ea2 <init_fields+0x6a>
      start += 2;
    }
    
    arguments[i*2+1] = offset + TYPE_FIELD_SIZE; /* tuple size */
  }
}
    3f56:	df 91       	pop	r29
    3f58:	cf 91       	pop	r28
    3f5a:	1f 91       	pop	r17
    3f5c:	0f 91       	pop	r16
    3f5e:	ff 90       	pop	r15
    3f60:	ef 90       	pop	r14
    3f62:	df 90       	pop	r13
    3f64:	cf 90       	pop	r12
    3f66:	bf 90       	pop	r11
    3f68:	af 90       	pop	r10
    3f6a:	9f 90       	pop	r9
    3f6c:	8f 90       	pop	r8
    3f6e:	7f 90       	pop	r7
    3f70:	08 95       	ret

00003f72 <init_consts>:

void init_consts(void)
{
    3f72:	cf 92       	push	r12
    3f74:	df 92       	push	r13
    3f76:	ef 92       	push	r14
    3f78:	ff 92       	push	r15
    3f7a:	0f 93       	push	r16
    3f7c:	1f 93       	push	r17
    3f7e:	cf 93       	push	r28
    3f80:	df 93       	push	r29
  tuple_type i;
  for (i = 0; i < NUM_TYPES; i++) {
    3f82:	c0 90 56 20 	lds	r12, 0x2056
    3f86:	d1 2c       	mov	r13, r1
    3f88:	e0 e0       	ldi	r30, 0x00	; 0
    3f8a:	ee 2e       	mov	r14, r30
    3f8c:	e0 e2       	ldi	r30, 0x20	; 32
    3f8e:	fe 2e       	mov	r15, r30
    3f90:	c0 e0       	ldi	r28, 0x00	; 0
    3f92:	d0 e0       	ldi	r29, 0x00	; 0
    3f94:	40 c0       	rjmp	.+128    	; 0x4016 <init_consts+0xa4>
    if (strcmp(TYPE_NAME(i), "_init") == 0)
    3f96:	f7 01       	movw	r30, r14
    3f98:	01 91       	ld	r16, Z+
    3f9a:	11 91       	ld	r17, Z+
    3f9c:	7f 01       	movw	r14, r30
    3f9e:	65 eb       	ldi	r22, 0xB5	; 181
    3fa0:	74 e2       	ldi	r23, 0x24	; 36
    3fa2:	c8 01       	movw	r24, r16
    3fa4:	0e 94 3c 3e 	call	0x7c78	; 0x7c78 <strcmp>
    3fa8:	00 97       	sbiw	r24, 0x00	; 0
    3faa:	29 f4       	brne	.+10     	; 0x3fb6 <init_consts+0x44>
      TYPE_INIT = i;
    3fac:	c0 93 48 20 	sts	0x2048, r28
    3fb0:	d0 93 49 20 	sts	0x2049, r29
    3fb4:	2f c0       	rjmp	.+94     	; 0x4014 <init_consts+0xa2>
    else if(strcmp(TYPE_NAME(i), "edge") == 0)
    3fb6:	67 ef       	ldi	r22, 0xF7	; 247
    3fb8:	75 e2       	ldi	r23, 0x25	; 37
    3fba:	c8 01       	movw	r24, r16
    3fbc:	0e 94 3c 3e 	call	0x7c78	; 0x7c78 <strcmp>
    3fc0:	00 97       	sbiw	r24, 0x00	; 0
    3fc2:	29 f4       	brne	.+10     	; 0x3fce <init_consts+0x5c>
      TYPE_EDGE = i;
    3fc4:	c0 93 4a 20 	sts	0x204A, r28
    3fc8:	d0 93 4b 20 	sts	0x204B, r29
    3fcc:	23 c0       	rjmp	.+70     	; 0x4014 <init_consts+0xa2>
    else if(strcmp(TYPE_NAME(i), "colocated") == 0)
    3fce:	6c ef       	ldi	r22, 0xFC	; 252
    3fd0:	75 e2       	ldi	r23, 0x25	; 37
    3fd2:	c8 01       	movw	r24, r16
    3fd4:	0e 94 3c 3e 	call	0x7c78	; 0x7c78 <strcmp>
    3fd8:	00 97       	sbiw	r24, 0x00	; 0
    3fda:	29 f4       	brne	.+10     	; 0x3fe6 <init_consts+0x74>
      TYPE_COLOCATED = i;
    3fdc:	c0 93 46 20 	sts	0x2046, r28
    3fe0:	d0 93 47 20 	sts	0x2047, r29
    3fe4:	17 c0       	rjmp	.+46     	; 0x4014 <init_consts+0xa2>
    else if(strcmp(TYPE_NAME(i), "proved") == 0)
    3fe6:	66 e0       	ldi	r22, 0x06	; 6
    3fe8:	76 e2       	ldi	r23, 0x26	; 38
    3fea:	c8 01       	movw	r24, r16
    3fec:	0e 94 3c 3e 	call	0x7c78	; 0x7c78 <strcmp>
    3ff0:	00 97       	sbiw	r24, 0x00	; 0
    3ff2:	29 f4       	brne	.+10     	; 0x3ffe <init_consts+0x8c>
      TYPE_PROVED = i;
    3ff4:	c0 93 44 20 	sts	0x2044, r28
    3ff8:	d0 93 45 20 	sts	0x2045, r29
    3ffc:	0b c0       	rjmp	.+22     	; 0x4014 <init_consts+0xa2>
    else if(strcmp(TYPE_NAME(i), "terminate") == 0)
    3ffe:	6d e0       	ldi	r22, 0x0D	; 13
    4000:	76 e2       	ldi	r23, 0x26	; 38
    4002:	c8 01       	movw	r24, r16
    4004:	0e 94 3c 3e 	call	0x7c78	; 0x7c78 <strcmp>
    4008:	00 97       	sbiw	r24, 0x00	; 0
    400a:	21 f4       	brne	.+8      	; 0x4014 <init_consts+0xa2>
      TYPE_TERMINATE = i;
    400c:	c0 93 42 20 	sts	0x2042, r28
    4010:	d0 93 43 20 	sts	0x2043, r29
}

void init_consts(void)
{
  tuple_type i;
  for (i = 0; i < NUM_TYPES; i++) {
    4014:	21 96       	adiw	r28, 0x01	; 1
    4016:	cc 15       	cp	r28, r12
    4018:	dd 05       	cpc	r29, r13
    401a:	0c f4       	brge	.+2      	; 0x401e <init_consts+0xac>
    401c:	bc cf       	rjmp	.-136    	; 0x3f96 <init_consts+0x24>
    else if(strcmp(TYPE_NAME(i), "proved") == 0)
      TYPE_PROVED = i;
    else if(strcmp(TYPE_NAME(i), "terminate") == 0)
      TYPE_TERMINATE = i;
  }	
}
    401e:	df 91       	pop	r29
    4020:	cf 91       	pop	r28
    4022:	1f 91       	pop	r17
    4024:	0f 91       	pop	r16
    4026:	ff 90       	pop	r15
    4028:	ef 90       	pop	r14
    402a:	df 90       	pop	r13
    402c:	cf 90       	pop	r12
    402e:	08 95       	ret

00004030 <queue_length>:

int
queue_length (tuple_queue *queue)
{
  int i;
  tuple_entry *entry = queue->head;
    4030:	dc 01       	movw	r26, r24
    4032:	ed 91       	ld	r30, X+
    4034:	fc 91       	ld	r31, X
  
  for (i = 0; entry != NULL; entry = entry->next, i++);
    4036:	20 e0       	ldi	r18, 0x00	; 0
    4038:	30 e0       	ldi	r19, 0x00	; 0
    403a:	05 c0       	rjmp	.+10     	; 0x4046 <queue_length+0x16>
    403c:	01 90       	ld	r0, Z+
    403e:	f0 81       	ld	r31, Z
    4040:	e0 2d       	mov	r30, r0
    4042:	2f 5f       	subi	r18, 0xFF	; 255
    4044:	3f 4f       	sbci	r19, 0xFF	; 255
    4046:	30 97       	sbiw	r30, 0x00	; 0
    4048:	c9 f7       	brne	.-14     	; 0x403c <queue_length+0xc>

  return i;
}
    404a:	c9 01       	movw	r24, r18
    404c:	08 95       	ret

0000404e <tuple_process>:

int tuple_process(tuple_t tuple, const unsigned char *pc,
		  int isNew, Register *reg)
{
    404e:	2f 92       	push	r2
    4050:	3f 92       	push	r3
    4052:	4f 92       	push	r4
    4054:	5f 92       	push	r5
    4056:	6f 92       	push	r6
    4058:	7f 92       	push	r7
    405a:	8f 92       	push	r8
    405c:	9f 92       	push	r9
    405e:	af 92       	push	r10
    4060:	bf 92       	push	r11
    4062:	cf 92       	push	r12
    4064:	df 92       	push	r13
    4066:	ef 92       	push	r14
    4068:	ff 92       	push	r15
    406a:	0f 93       	push	r16
    406c:	1f 93       	push	r17
    406e:	cf 93       	push	r28
    4070:	df 93       	push	r29
    4072:	cd b7       	in	r28, 0x3d	; 61
    4074:	de b7       	in	r29, 0x3e	; 62
    4076:	66 97       	sbiw	r28, 0x16	; 22
    4078:	cd bf       	out	0x3d, r28	; 61
    407a:	de bf       	out	0x3e, r29	; 62
    407c:	8b 83       	std	Y+3, r24	; 0x03
    407e:	9c 83       	std	Y+4, r25	; 0x04
    4080:	5b 01       	movw	r10, r22
    4082:	4b 87       	std	Y+11, r20	; 0x0b
    4084:	5c 87       	std	Y+12, r21	; 0x0c
    4086:	29 01       	movw	r4, r18
      break;
    }
  }

  return RET_RET;
}
    4088:	2d b7       	in	r18, 0x3d	; 61
    408a:	3e b7       	in	r19, 0x3e	; 62
    408c:	2a 8b       	std	Y+18, r18	; 0x12
    408e:	3b 8b       	std	Y+19, r19	; 0x13
    4090:	02 c0       	rjmp	.+4      	; 0x4096 <tuple_process+0x48>
      printf("ITER %s len=%d\n", tuple_names[type], length);
#endif

      if(length == 0) {
        /* no need to execute any further code, just jump! */
        pc = jump;
    4092:	af 80       	ldd	r10, Y+7	; 0x07
    4094:	b8 84       	ldd	r11, Y+8	; 0x08

int tuple_process(tuple_t tuple, const unsigned char *pc,
		  int isNew, Register *reg)
{
  for (;;) {
    switch (0xf0 & *(const unsigned char*)pc) {
    4096:	d5 01       	movw	r26, r10
    4098:	ec 91       	ld	r30, X
    409a:	8e 2f       	mov	r24, r30
    409c:	80 7f       	andi	r24, 0xF0	; 240
    409e:	80 37       	cpi	r24, 0x70	; 112
    40a0:	09 f4       	brne	.+2      	; 0x40a4 <tuple_process+0x56>
    40a2:	a5 c2       	rjmp	.+1354   	; 0x45ee <tuple_process+0x5a0>
    40a4:	a0 f4       	brcc	.+40     	; 0x40ce <tuple_process+0x80>
    40a6:	80 33       	cpi	r24, 0x30	; 48
    40a8:	09 f4       	brne	.+2      	; 0x40ac <tuple_process+0x5e>
    40aa:	c6 c1       	rjmp	.+908    	; 0x4438 <tuple_process+0x3ea>
    40ac:	30 f4       	brcc	.+12     	; 0x40ba <tuple_process+0x6c>
    40ae:	88 23       	and	r24, r24
    40b0:	31 f1       	breq	.+76     	; 0x40fe <tuple_process+0xb0>
    40b2:	80 32       	cpi	r24, 0x20	; 32
    40b4:	09 f0       	breq	.+2      	; 0x40b8 <tuple_process+0x6a>
    40b6:	6f c6       	rjmp	.+3294   	; 0x4d96 <tuple_process+0xd48>
    40b8:	9e c0       	rjmp	.+316    	; 0x41f6 <tuple_process+0x1a8>
    40ba:	80 35       	cpi	r24, 0x50	; 80
    40bc:	09 f4       	brne	.+2      	; 0x40c0 <tuple_process+0x72>
    40be:	53 c2       	rjmp	.+1190   	; 0x4566 <tuple_process+0x518>
    40c0:	80 36       	cpi	r24, 0x60	; 96
    40c2:	09 f4       	brne	.+2      	; 0x40c6 <tuple_process+0x78>
    40c4:	94 c2       	rjmp	.+1320   	; 0x45ee <tuple_process+0x5a0>
    40c6:	80 34       	cpi	r24, 0x40	; 64
    40c8:	09 f0       	breq	.+2      	; 0x40cc <tuple_process+0x7e>
    40ca:	65 c6       	rjmp	.+3274   	; 0x4d96 <tuple_process+0xd48>
    40cc:	4c c2       	rjmp	.+1176   	; 0x4566 <tuple_process+0x518>
    40ce:	80 3c       	cpi	r24, 0xC0	; 192
    40d0:	09 f4       	brne	.+2      	; 0x40d4 <tuple_process+0x86>
    40d2:	53 c4       	rjmp	.+2214   	; 0x497a <tuple_process+0x92c>
    40d4:	50 f4       	brcc	.+20     	; 0x40ea <tuple_process+0x9c>
    40d6:	80 39       	cpi	r24, 0x90	; 144
    40d8:	09 f4       	brne	.+2      	; 0x40dc <tuple_process+0x8e>
    40da:	a5 c2       	rjmp	.+1354   	; 0x4626 <tuple_process+0x5d8>
    40dc:	80 3a       	cpi	r24, 0xA0	; 160
    40de:	09 f4       	brne	.+2      	; 0x40e2 <tuple_process+0x94>
    40e0:	de c2       	rjmp	.+1468   	; 0x469e <tuple_process+0x650>
    40e2:	80 38       	cpi	r24, 0x80	; 128
    40e4:	09 f0       	breq	.+2      	; 0x40e8 <tuple_process+0x9a>
    40e6:	57 c6       	rjmp	.+3246   	; 0x4d96 <tuple_process+0xd48>
    40e8:	9e c2       	rjmp	.+1340   	; 0x4626 <tuple_process+0x5d8>
    40ea:	80 3e       	cpi	r24, 0xE0	; 224
    40ec:	09 f4       	brne	.+2      	; 0x40f0 <tuple_process+0xa2>
    40ee:	45 c4       	rjmp	.+2186   	; 0x497a <tuple_process+0x92c>
    40f0:	80 3f       	cpi	r24, 0xF0	; 240
    40f2:	09 f4       	brne	.+2      	; 0x40f6 <tuple_process+0xa8>
    40f4:	42 c4       	rjmp	.+2180   	; 0x497a <tuple_process+0x92c>
    40f6:	80 3d       	cpi	r24, 0xD0	; 208
    40f8:	09 f0       	breq	.+2      	; 0x40fc <tuple_process+0xae>
    40fa:	4d c6       	rjmp	.+3226   	; 0x4d96 <tuple_process+0xd48>
    40fc:	3e c4       	rjmp	.+2172   	; 0x497a <tuple_process+0x92c>

    case 0x00: // some '8-bit' instruction
      switch (0x0f & *(const unsigned char*)pc) {
    40fe:	8e 2f       	mov	r24, r30
    4100:	8f 70       	andi	r24, 0x0F	; 15
    4102:	82 30       	cpi	r24, 0x02	; 2
    4104:	91 f0       	breq	.+36     	; 0x412a <tuple_process+0xdc>
    4106:	38 f4       	brcc	.+14     	; 0x4116 <tuple_process+0xc8>
    4108:	88 23       	and	r24, r24
    410a:	09 f4       	brne	.+2      	; 0x410e <tuple_process+0xc0>
    410c:	61 c6       	rjmp	.+3266   	; 0x4dd0 <tuple_process+0xd82>
    410e:	81 30       	cpi	r24, 0x01	; 1
    4110:	09 f0       	breq	.+2      	; 0x4114 <tuple_process+0xc6>
    4112:	5e c0       	rjmp	.+188    	; 0x41d0 <tuple_process+0x182>
    4114:	07 c0       	rjmp	.+14     	; 0x4124 <tuple_process+0xd6>
    4116:	83 30       	cpi	r24, 0x03	; 3
    4118:	c9 f0       	breq	.+50     	; 0x414c <tuple_process+0xfe>
    411a:	88 50       	subi	r24, 0x08	; 8
    411c:	84 30       	cpi	r24, 0x04	; 4
    411e:	08 f0       	brcs	.+2      	; 0x4122 <tuple_process+0xd4>
    4120:	57 c0       	rjmp	.+174    	; 0x41d0 <tuple_process+0x182>
    4122:	18 c0       	rjmp	.+48     	; 0x4154 <tuple_process+0x106>

      case 0x01: // NEXT
#ifdef DEBUG_INSTRS
	printf("NEXT\n");
#endif
	return RET_NEXT;
    4124:	21 e0       	ldi	r18, 0x01	; 1
    4126:	30 e0       	ldi	r19, 0x00	; 0
    4128:	55 c6       	rjmp	.+3242   	; 0x4dd4 <tuple_process+0xd86>
	break;

      case 0x02: // ELSE
	fprintf(stderr, "ELSE NOT IMPLEMENTED YET!\n");
    412a:	60 91 87 2f 	lds	r22, 0x2F87
    412e:	70 91 88 2f 	lds	r23, 0x2F88
    4132:	87 e1       	ldi	r24, 0x17	; 23
    4134:	96 e2       	ldi	r25, 0x26	; 38
    4136:	0e 94 87 3e 	call	0x7d0e	; 0x7d0e <fputs>
	assert(0);
    413a:	43 eb       	ldi	r20, 0xB3	; 179
    413c:	55 e2       	ldi	r21, 0x25	; 37
    413e:	6e ec       	ldi	r22, 0xCE	; 206
    4140:	73 e0       	ldi	r23, 0x03	; 3
    4142:	85 eb       	ldi	r24, 0xB5	; 181
    4144:	95 e2       	ldi	r25, 0x25	; 37
    4146:	0e 94 e5 19 	call	0x33ca	; 0x33ca <__myassert>
	break;
    414a:	a5 cf       	rjmp	.-182    	; 0x4096 <tuple_process+0x48>

      case 0x03: // NOP
	pc++;
    414c:	bf ef       	ldi	r27, 0xFF	; 255
    414e:	ab 1a       	sub	r10, r27
    4150:	bb 0a       	sbc	r11, r27
	break;
    4152:	a1 cf       	rjmp	.-190    	; 0x4096 <tuple_process+0x48>
      case 0x08: // SEND
      case 0x09: // SEND
      case 0x0a: // SEND
      case 0x0b: // SEND
	{
	const unsigned char *new_pc = pc+3;
    4154:	c5 01       	movw	r24, r10
    4156:	03 96       	adiw	r24, 0x03	; 3
    4158:	89 83       	std	Y+1, r24	; 0x01
    415a:	9a 83       	std	Y+2, r25	; 0x02
	Register send_reg = reg[SEND_MSG(pc)];
    415c:	f5 01       	movw	r30, r10
    415e:	81 81       	ldd	r24, Z+1	; 0x01
    4160:	e0 81       	ld	r30, Z
    4162:	e3 70       	andi	r30, 0x03	; 3
    4164:	28 e0       	ldi	r18, 0x08	; 8
    4166:	e2 9f       	mul	r30, r18
    4168:	f0 01       	movw	r30, r0
    416a:	11 24       	eor	r1, r1
    416c:	98 2f       	mov	r25, r24
    416e:	92 95       	swap	r25
    4170:	96 95       	lsr	r25
    4172:	97 70       	andi	r25, 0x07	; 7
    4174:	e9 2b       	or	r30, r25
    4176:	ee 0f       	add	r30, r30
    4178:	ff 1f       	adc	r31, r31
    417a:	ee 0f       	add	r30, r30
    417c:	ff 1f       	adc	r31, r31
    417e:	e4 0d       	add	r30, r4
    4180:	f5 1d       	adc	r31, r5
    4182:	c0 80       	ld	r12, Z
    4184:	d1 80       	ldd	r13, Z+1	; 0x01
    4186:	e2 80       	ldd	r14, Z+2	; 0x02
    4188:	f3 80       	ldd	r15, Z+3	; 0x03
	Register send_rt = reg[SEND_RT(pc)];
    418a:	8f 71       	andi	r24, 0x1F	; 31
    418c:	f2 01       	movw	r30, r4
    418e:	34 e0       	ldi	r19, 0x04	; 4
    4190:	83 9f       	mul	r24, r19
    4192:	e0 0d       	add	r30, r0
    4194:	f1 1d       	adc	r31, r1
    4196:	11 24       	eor	r1, r1
    4198:	60 80       	ld	r6, Z
    419a:	71 80       	ldd	r7, Z+1	; 0x01
    419c:	82 80       	ldd	r8, Z+2	; 0x02
    419e:	93 80       	ldd	r9, Z+3	; 0x03
	printf("SEND\n");
#endif

	tuple_send((tuple_t)MELD_CONVERT_REG_TO_PTR(send_reg),
		   MELD_CONVERT_REG_TO_PTR(send_rt),
		   MELD_INT(eval(SEND_DELAY(pc), &tuple, &new_pc, reg)), isNew);
    41a0:	92 01       	movw	r18, r4
    41a2:	ae 01       	movw	r20, r28
    41a4:	4f 5f       	subi	r20, 0xFF	; 255
    41a6:	5f 4f       	sbci	r21, 0xFF	; 255
    41a8:	be 01       	movw	r22, r28
    41aa:	6d 5f       	subi	r22, 0xFD	; 253
    41ac:	7f 4f       	sbci	r23, 0xFF	; 255
    41ae:	d5 01       	movw	r26, r10
    41b0:	12 96       	adiw	r26, 0x02	; 2
    41b2:	8c 91       	ld	r24, X
    41b4:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <eval>

#ifdef DEBUG_INSTRS
	printf("SEND\n");
#endif

	tuple_send((tuple_t)MELD_CONVERT_REG_TO_PTR(send_reg),
    41b8:	fc 01       	movw	r30, r24
    41ba:	20 81       	ld	r18, Z
    41bc:	31 81       	ldd	r19, Z+1	; 0x01
    41be:	42 81       	ldd	r20, Z+2	; 0x02
    41c0:	53 81       	ldd	r21, Z+3	; 0x03
    41c2:	0b 85       	ldd	r16, Y+11	; 0x0b
    41c4:	1c 85       	ldd	r17, Y+12	; 0x0c
    41c6:	b3 01       	movw	r22, r6
    41c8:	c6 01       	movw	r24, r12
    41ca:	0e 94 67 1a 	call	0x34ce	; 0x34ce <tuple_send>
    41ce:	e0 c5       	rjmp	.+3008   	; 0x4d90 <tuple_process+0xd42>
	pc = new_pc;
	break;
	}

      default:
	fprintf(stderr, "INVALID INSTRUCTION %u", *pc);
    41d0:	1f 92       	push	r1
    41d2:	ef 93       	push	r30
    41d4:	22 e3       	ldi	r18, 0x32	; 50
    41d6:	36 e2       	ldi	r19, 0x26	; 38
    41d8:	3f 93       	push	r19
    41da:	2f 93       	push	r18
    41dc:	80 91 88 2f 	lds	r24, 0x2F88
    41e0:	8f 93       	push	r24
    41e2:	80 91 87 2f 	lds	r24, 0x2F87
    41e6:	8f 93       	push	r24
    41e8:	0e 94 45 3e 	call	0x7c8a	; 0x7c8a <fprintf>
	assert(0);
    41ec:	43 eb       	ldi	r20, 0xB3	; 179
    41ee:	55 e2       	ldi	r21, 0x25	; 37
    41f0:	6d ee       	ldi	r22, 0xED	; 237
    41f2:	73 e0       	ldi	r23, 0x03	; 3
    41f4:	e2 c5       	rjmp	.+3012   	; 0x4dba <tuple_process+0xd6c>
    41f6:	6d b6       	in	r6, 0x3d	; 61
    41f8:	7e b6       	in	r7, 0x3e	; 62
      }
      break;

    case 0x20: // CALL
      {
      Register *dst = &reg[CALL_DST(pc)];
    41fa:	d5 01       	movw	r26, r10
    41fc:	11 96       	adiw	r26, 0x01	; 1
    41fe:	8c 91       	ld	r24, X
    4200:	98 2f       	mov	r25, r24
    4202:	9f 71       	andi	r25, 0x1F	; 31
    4204:	42 01       	movw	r8, r4
    4206:	b4 e0       	ldi	r27, 0x04	; 4
    4208:	9b 9f       	mul	r25, r27
    420a:	80 0c       	add	r8, r0
    420c:	91 1c       	adc	r9, r1
    420e:	11 24       	eor	r1, r1
      Register args[CALL_ARGS(pc)];
    4210:	ef 70       	andi	r30, 0x0F	; 15
    4212:	28 e0       	ldi	r18, 0x08	; 8
    4214:	e2 9f       	mul	r30, r18
    4216:	f0 01       	movw	r30, r0
    4218:	11 24       	eor	r1, r1
    421a:	82 95       	swap	r24
    421c:	86 95       	lsr	r24
    421e:	87 70       	andi	r24, 0x07	; 7
    4220:	e8 2b       	or	r30, r24
    4222:	ee 0f       	add	r30, r30
    4224:	ff 1f       	adc	r31, r31
    4226:	ee 5c       	subi	r30, 0xCE	; 206
    4228:	f6 4d       	sbci	r31, 0xD6	; 214
    422a:	80 81       	ld	r24, Z
    422c:	91 81       	ldd	r25, Z+1	; 0x01
    422e:	9c 01       	movw	r18, r24
    4230:	22 0f       	add	r18, r18
    4232:	33 1f       	adc	r19, r19
    4234:	22 0f       	add	r18, r18
    4236:	33 1f       	adc	r19, r19
    4238:	4d b7       	in	r20, 0x3d	; 61
    423a:	5e b7       	in	r21, 0x3e	; 62
    423c:	42 1b       	sub	r20, r18
    423e:	53 0b       	sbc	r21, r19
    4240:	4d bf       	out	0x3d, r20	; 61
    4242:	5e bf       	out	0x3e, r21	; 62
    4244:	2d b6       	in	r2, 0x3d	; 61
    4246:	3e b6       	in	r3, 0x3e	; 62
    4248:	af ef       	ldi	r26, 0xFF	; 255
    424a:	2a 1a       	sub	r2, r26
    424c:	3a 0a       	sbc	r3, r26

      assert(CALL_ARGS(pc) <= 5);
    424e:	06 97       	sbiw	r24, 0x06	; 6
    4250:	44 f0       	brlt	.+16     	; 0x4262 <tuple_process+0x214>
    4252:	49 e4       	ldi	r20, 0x49	; 73
    4254:	56 e2       	ldi	r21, 0x26	; 38
    4256:	67 ef       	ldi	r22, 0xF7	; 247
    4258:	73 e0       	ldi	r23, 0x03	; 3
    425a:	85 eb       	ldi	r24, 0xB5	; 181
    425c:	95 e2       	ldi	r25, 0x25	; 37
    425e:	0e 94 e5 19 	call	0x33ca	; 0x33ca <__myassert>
#ifdef DEBUG_INSTRS
      printf("CALL %d (%d)\n", CALL_ID(pc), CALL_ARGS(pc));
#endif
        
      int i;
      const unsigned char *new_pc = pc+2;
    4262:	c5 01       	movw	r24, r10
    4264:	02 96       	adiw	r24, 0x02	; 2
    4266:	89 83       	std	Y+1, r24	; 0x01
    4268:	9a 83       	std	Y+2, r25	; 0x02
    426a:	61 01       	movw	r12, r2
      for (i = 0; i < CALL_ARGS(pc); i++) {
    426c:	e1 2c       	mov	r14, r1
    426e:	f1 2c       	mov	r15, r1
    4270:	1b c0       	rjmp	.+54     	; 0x42a8 <tuple_process+0x25a>
	unsigned char value = CALL_VAL(new_pc);
    4272:	e9 81       	ldd	r30, Y+1	; 0x01
    4274:	fa 81       	ldd	r31, Y+2	; 0x02
    4276:	81 91       	ld	r24, Z+
	new_pc++;
    4278:	e9 83       	std	Y+1, r30	; 0x01
    427a:	fa 83       	std	Y+2, r31	; 0x02
	args[i] = MELD_CONVERT_PTR_TO_REG(eval(value, &tuple, &new_pc, reg));
    427c:	92 01       	movw	r18, r4
    427e:	ae 01       	movw	r20, r28
    4280:	4f 5f       	subi	r20, 0xFF	; 255
    4282:	5f 4f       	sbci	r21, 0xFF	; 255
    4284:	be 01       	movw	r22, r28
    4286:	6d 5f       	subi	r22, 0xFD	; 253
    4288:	7f 4f       	sbci	r23, 0xFF	; 255
    428a:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <eval>
    428e:	aa 27       	eor	r26, r26
    4290:	97 fd       	sbrc	r25, 7
    4292:	a0 95       	com	r26
    4294:	ba 2f       	mov	r27, r26
    4296:	f6 01       	movw	r30, r12
    4298:	81 93       	st	Z+, r24
    429a:	91 93       	st	Z+, r25
    429c:	a1 93       	st	Z+, r26
    429e:	b1 93       	st	Z+, r27
    42a0:	6f 01       	movw	r12, r30
      printf("CALL %d (%d)\n", CALL_ID(pc), CALL_ARGS(pc));
#endif
        
      int i;
      const unsigned char *new_pc = pc+2;
      for (i = 0; i < CALL_ARGS(pc); i++) {
    42a2:	ff ef       	ldi	r31, 0xFF	; 255
    42a4:	ef 1a       	sub	r14, r31
    42a6:	ff 0a       	sbc	r15, r31
    42a8:	d5 01       	movw	r26, r10
    42aa:	ec 91       	ld	r30, X
    42ac:	ef 70       	andi	r30, 0x0F	; 15
    42ae:	b8 e0       	ldi	r27, 0x08	; 8
    42b0:	eb 9f       	mul	r30, r27
    42b2:	f0 01       	movw	r30, r0
    42b4:	11 24       	eor	r1, r1
    42b6:	d5 01       	movw	r26, r10
    42b8:	11 96       	adiw	r26, 0x01	; 1
    42ba:	8c 91       	ld	r24, X
    42bc:	82 95       	swap	r24
    42be:	86 95       	lsr	r24
    42c0:	87 70       	andi	r24, 0x07	; 7
    42c2:	e8 2b       	or	r30, r24
    42c4:	ee 0f       	add	r30, r30
    42c6:	ff 1f       	adc	r31, r31
    42c8:	df 01       	movw	r26, r30
    42ca:	ae 5c       	subi	r26, 0xCE	; 206
    42cc:	b6 4d       	sbci	r27, 0xD6	; 214
    42ce:	8d 91       	ld	r24, X+
    42d0:	9c 91       	ld	r25, X
    42d2:	e8 16       	cp	r14, r24
    42d4:	f9 06       	cpc	r15, r25
    42d6:	6c f2       	brlt	.-102    	; 0x4272 <tuple_process+0x224>
	unsigned char value = CALL_VAL(new_pc);
	new_pc++;
	args[i] = MELD_CONVERT_PTR_TO_REG(eval(value, &tuple, &new_pc, reg));
      }

      switch (CALL_ARGS(pc)) {
    42d8:	82 30       	cpi	r24, 0x02	; 2
    42da:	91 05       	cpc	r25, r1
    42dc:	41 f1       	breq	.+80     	; 0x432e <tuple_process+0x2e0>
    42de:	34 f4       	brge	.+12     	; 0x42ec <tuple_process+0x29e>
    42e0:	00 97       	sbiw	r24, 0x00	; 0
    42e2:	69 f0       	breq	.+26     	; 0x42fe <tuple_process+0x2b0>
    42e4:	01 97       	sbiw	r24, 0x01	; 1
    42e6:	09 f0       	breq	.+2      	; 0x42ea <tuple_process+0x29c>
    42e8:	a0 c0       	rjmp	.+320    	; 0x442a <tuple_process+0x3dc>
    42ea:	10 c0       	rjmp	.+32     	; 0x430c <tuple_process+0x2be>
    42ec:	84 30       	cpi	r24, 0x04	; 4
    42ee:	91 05       	cpc	r25, r1
    42f0:	09 f4       	brne	.+2      	; 0x42f4 <tuple_process+0x2a6>
    42f2:	47 c0       	rjmp	.+142    	; 0x4382 <tuple_process+0x334>
    42f4:	74 f1       	brlt	.+92     	; 0x4352 <tuple_process+0x304>
    42f6:	05 97       	sbiw	r24, 0x05	; 5
    42f8:	09 f0       	breq	.+2      	; 0x42fc <tuple_process+0x2ae>
    42fa:	97 c0       	rjmp	.+302    	; 0x442a <tuple_process+0x3dc>
    42fc:	60 c0       	rjmp	.+192    	; 0x43be <tuple_process+0x370>
      default:
	break;
      case 0:
	*dst = CALL_FUNC(pc)();
    42fe:	ed 5c       	subi	r30, 0xCD	; 205
    4300:	f6 4d       	sbci	r31, 0xD6	; 214
    4302:	01 90       	ld	r0, Z+
    4304:	f0 81       	ld	r31, Z
    4306:	e0 2d       	mov	r30, r0
    4308:	19 95       	eicall
    430a:	0b c0       	rjmp	.+22     	; 0x4322 <tuple_process+0x2d4>
	break;
      case 1:
	*dst = CALL_FUNC(pc)(args[0]);
    430c:	ed 5c       	subi	r30, 0xCD	; 205
    430e:	f6 4d       	sbci	r31, 0xD6	; 214
    4310:	d1 01       	movw	r26, r2
    4312:	6d 91       	ld	r22, X+
    4314:	7d 91       	ld	r23, X+
    4316:	8d 91       	ld	r24, X+
    4318:	9c 91       	ld	r25, X
    431a:	01 90       	ld	r0, Z+
    431c:	f0 81       	ld	r31, Z
    431e:	e0 2d       	mov	r30, r0
    4320:	19 95       	eicall
    4322:	f4 01       	movw	r30, r8
    4324:	60 83       	st	Z, r22
    4326:	71 83       	std	Z+1, r23	; 0x01
    4328:	82 83       	std	Z+2, r24	; 0x02
    432a:	93 83       	std	Z+3, r25	; 0x03
	break;
    432c:	7e c0       	rjmp	.+252    	; 0x442a <tuple_process+0x3dc>
      case 2:
	*dst = CALL_FUNC(pc)(args[0], args[1]);
    432e:	ed 5c       	subi	r30, 0xCD	; 205
    4330:	f6 4d       	sbci	r31, 0xD6	; 214
    4332:	d1 01       	movw	r26, r2
    4334:	14 96       	adiw	r26, 0x04	; 4
    4336:	2d 91       	ld	r18, X+
    4338:	3d 91       	ld	r19, X+
    433a:	4d 91       	ld	r20, X+
    433c:	5c 91       	ld	r21, X
    433e:	17 97       	sbiw	r26, 0x07	; 7
    4340:	6d 91       	ld	r22, X+
    4342:	7d 91       	ld	r23, X+
    4344:	8d 91       	ld	r24, X+
    4346:	9c 91       	ld	r25, X
    4348:	01 90       	ld	r0, Z+
    434a:	f0 81       	ld	r31, Z
    434c:	e0 2d       	mov	r30, r0
    434e:	19 95       	eicall
    4350:	e8 cf       	rjmp	.-48     	; 0x4322 <tuple_process+0x2d4>
	break;
      case 3:
	*dst = CALL_FUNC(pc)(args[0], args[1], args[2]);
    4352:	ed 5c       	subi	r30, 0xCD	; 205
    4354:	f6 4d       	sbci	r31, 0xD6	; 214
    4356:	d1 01       	movw	r26, r2
    4358:	18 96       	adiw	r26, 0x08	; 8
    435a:	ed 90       	ld	r14, X+
    435c:	fd 90       	ld	r15, X+
    435e:	0d 91       	ld	r16, X+
    4360:	1c 91       	ld	r17, X
    4362:	1b 97       	sbiw	r26, 0x0b	; 11
    4364:	14 96       	adiw	r26, 0x04	; 4
    4366:	2d 91       	ld	r18, X+
    4368:	3d 91       	ld	r19, X+
    436a:	4d 91       	ld	r20, X+
    436c:	5c 91       	ld	r21, X
    436e:	17 97       	sbiw	r26, 0x07	; 7
    4370:	6d 91       	ld	r22, X+
    4372:	7d 91       	ld	r23, X+
    4374:	8d 91       	ld	r24, X+
    4376:	9c 91       	ld	r25, X
    4378:	01 90       	ld	r0, Z+
    437a:	f0 81       	ld	r31, Z
    437c:	e0 2d       	mov	r30, r0
    437e:	19 95       	eicall
    4380:	d0 cf       	rjmp	.-96     	; 0x4322 <tuple_process+0x2d4>
	break;
      case 4:
	*dst = CALL_FUNC(pc)(args[0], args[1], args[2], args[3]);
    4382:	ed 5c       	subi	r30, 0xCD	; 205
    4384:	f6 4d       	sbci	r31, 0xD6	; 214
    4386:	d1 01       	movw	r26, r2
    4388:	1c 96       	adiw	r26, 0x0c	; 12
    438a:	ad 90       	ld	r10, X+
    438c:	bd 90       	ld	r11, X+
    438e:	cd 90       	ld	r12, X+
    4390:	dc 90       	ld	r13, X
    4392:	1f 97       	sbiw	r26, 0x0f	; 15
    4394:	18 96       	adiw	r26, 0x08	; 8
    4396:	ed 90       	ld	r14, X+
    4398:	fd 90       	ld	r15, X+
    439a:	0d 91       	ld	r16, X+
    439c:	1c 91       	ld	r17, X
    439e:	1b 97       	sbiw	r26, 0x0b	; 11
    43a0:	14 96       	adiw	r26, 0x04	; 4
    43a2:	2d 91       	ld	r18, X+
    43a4:	3d 91       	ld	r19, X+
    43a6:	4d 91       	ld	r20, X+
    43a8:	5c 91       	ld	r21, X
    43aa:	17 97       	sbiw	r26, 0x07	; 7
    43ac:	6d 91       	ld	r22, X+
    43ae:	7d 91       	ld	r23, X+
    43b0:	8d 91       	ld	r24, X+
    43b2:	9c 91       	ld	r25, X
    43b4:	01 90       	ld	r0, Z+
    43b6:	f0 81       	ld	r31, Z
    43b8:	e0 2d       	mov	r30, r0
    43ba:	19 95       	eicall
    43bc:	b2 cf       	rjmp	.-156    	; 0x4322 <tuple_process+0x2d4>
	break;
      case 5:
	*dst = CALL_FUNC(pc)(args[0], args[1], args[2], args[3], args[4]);
    43be:	ed 5c       	subi	r30, 0xCD	; 205
    43c0:	f6 4d       	sbci	r31, 0xD6	; 214
    43c2:	d1 01       	movw	r26, r2
    43c4:	1c 96       	adiw	r26, 0x0c	; 12
    43c6:	ad 90       	ld	r10, X+
    43c8:	bd 90       	ld	r11, X+
    43ca:	cd 90       	ld	r12, X+
    43cc:	dc 90       	ld	r13, X
    43ce:	1f 97       	sbiw	r26, 0x0f	; 15
    43d0:	18 96       	adiw	r26, 0x08	; 8
    43d2:	ed 90       	ld	r14, X+
    43d4:	fd 90       	ld	r15, X+
    43d6:	0d 91       	ld	r16, X+
    43d8:	1c 91       	ld	r17, X
    43da:	1b 97       	sbiw	r26, 0x0b	; 11
    43dc:	14 96       	adiw	r26, 0x04	; 4
    43de:	2d 91       	ld	r18, X+
    43e0:	3d 91       	ld	r19, X+
    43e2:	4d 91       	ld	r20, X+
    43e4:	5c 91       	ld	r21, X
    43e6:	17 97       	sbiw	r26, 0x07	; 7
    43e8:	6d 91       	ld	r22, X+
    43ea:	7d 91       	ld	r23, X+
    43ec:	8d 91       	ld	r24, X+
    43ee:	9c 91       	ld	r25, X
    43f0:	13 97       	sbiw	r26, 0x03	; 3
    43f2:	53 96       	adiw	r26, 0x13	; 19
    43f4:	bc 91       	ld	r27, X
    43f6:	bf 93       	push	r27
    43f8:	d1 01       	movw	r26, r2
    43fa:	52 96       	adiw	r26, 0x12	; 18
    43fc:	bc 91       	ld	r27, X
    43fe:	bf 93       	push	r27
    4400:	d1 01       	movw	r26, r2
    4402:	51 96       	adiw	r26, 0x11	; 17
    4404:	bc 91       	ld	r27, X
    4406:	bf 93       	push	r27
    4408:	d1 01       	movw	r26, r2
    440a:	50 96       	adiw	r26, 0x10	; 16
    440c:	3c 90       	ld	r3, X
    440e:	3f 92       	push	r3
    4410:	01 90       	ld	r0, Z+
    4412:	f0 81       	ld	r31, Z
    4414:	e0 2d       	mov	r30, r0
    4416:	19 95       	eicall
    4418:	f4 01       	movw	r30, r8
    441a:	60 83       	st	Z, r22
    441c:	71 83       	std	Z+1, r23	; 0x01
    441e:	82 83       	std	Z+2, r24	; 0x02
    4420:	93 83       	std	Z+3, r25	; 0x03
	break;
    4422:	0f 90       	pop	r0
    4424:	0f 90       	pop	r0
    4426:	0f 90       	pop	r0
    4428:	0f 90       	pop	r0
      }
      // Advance the program counter past the instruction
      pc = new_pc;
    442a:	a9 80       	ldd	r10, Y+1	; 0x01
    442c:	ba 80       	ldd	r11, Y+2	; 0x02
    442e:	86 2d       	mov	r24, r6
    4430:	97 2d       	mov	r25, r7
    4432:	8d bf       	out	0x3d, r24	; 61
    4434:	9e bf       	out	0x3e, r25	; 62
    4436:	2f ce       	rjmp	.-930    	; 0x4096 <tuple_process+0x48>
      break;
      }

    case 0x30: // MOVE
      {
	const unsigned char *new_pc = pc+2;
    4438:	c5 01       	movw	r24, r10
    443a:	02 96       	adiw	r24, 0x02	; 2
    443c:	89 83       	std	Y+1, r24	; 0x01
    443e:	9a 83       	std	Y+2, r25	; 0x02
	  printf("\n");
	}
#endif
	size_t size = 0;
	
	Register *src = eval(MOVE_SRC(pc), &tuple, &new_pc, reg);
    4440:	d5 01       	movw	r26, r10
    4442:	8c 91       	ld	r24, X
    4444:	8f 70       	andi	r24, 0x0F	; 15
    4446:	b4 e0       	ldi	r27, 0x04	; 4
    4448:	8b 9f       	mul	r24, r27
    444a:	c0 01       	movw	r24, r0
    444c:	11 24       	eor	r1, r1
    444e:	f5 01       	movw	r30, r10
    4450:	91 81       	ldd	r25, Z+1	; 0x01
    4452:	92 95       	swap	r25
    4454:	96 95       	lsr	r25
    4456:	96 95       	lsr	r25
    4458:	93 70       	andi	r25, 0x03	; 3
    445a:	92 01       	movw	r18, r4
    445c:	ae 01       	movw	r20, r28
    445e:	4f 5f       	subi	r20, 0xFF	; 255
    4460:	5f 4f       	sbci	r21, 0xFF	; 255
    4462:	be 01       	movw	r22, r28
    4464:	6d 5f       	subi	r22, 0xFD	; 253
    4466:	7f 4f       	sbci	r23, 0xFF	; 255
    4468:	89 2b       	or	r24, r25
    446a:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <eval>
    446e:	8c 01       	movw	r16, r24
	Register *dst = eval_dst(MOVE_DST(pc), &new_pc, reg, &size);
    4470:	d5 01       	movw	r26, r10
    4472:	11 96       	adiw	r26, 0x01	; 1
    4474:	8c 91       	ld	r24, X

static inline
void *eval_dst(const unsigned char value,
	       const unsigned char **pc, Register *reg, size_t *size)
{
  if (VAL_IS_REG(value)) {
    4476:	85 ff       	sbrs	r24, 5
    4478:	0a c0       	rjmp	.+20     	; 0x448e <tuple_process+0x440>
    *size = sizeof(Register);
    return &(reg)[VAL_REG(value)];
    447a:	8f 71       	andi	r24, 0x1F	; 31
    447c:	92 01       	movw	r18, r4
    447e:	b4 e0       	ldi	r27, 0x04	; 4
    4480:	8b 9f       	mul	r24, r27
    4482:	20 0d       	add	r18, r0
    4484:	31 1d       	adc	r19, r1
    4486:	11 24       	eor	r1, r1
static inline
void *eval_dst(const unsigned char value,
	       const unsigned char **pc, Register *reg, size_t *size)
{
  if (VAL_IS_REG(value)) {
    *size = sizeof(Register);
    4488:	84 e0       	ldi	r24, 0x04	; 4
    448a:	90 e0       	ldi	r25, 0x00	; 0
    448c:	66 c0       	rjmp	.+204    	; 0x455a <tuple_process+0x50c>
	}
#endif
	size_t size = 0;
	
	Register *src = eval(MOVE_SRC(pc), &tuple, &new_pc, reg);
	Register *dst = eval_dst(MOVE_DST(pc), &new_pc, reg, &size);
    448e:	8f 73       	andi	r24, 0x3F	; 63
	       const unsigned char **pc, Register *reg, size_t *size)
{
  if (VAL_IS_REG(value)) {
    *size = sizeof(Register);
    return &(reg)[VAL_REG(value)];
  } else if (VAL_IS_FIELD(value)) {
    4490:	82 30       	cpi	r24, 0x02	; 2
    4492:	d9 f5       	brne	.+118    	; 0x450a <tuple_process+0x4bc>
    int reg_index = VAL_FIELD_REG(*pc);
    4494:	49 81       	ldd	r20, Y+1	; 0x01
    4496:	5a 81       	ldd	r21, Y+2	; 0x02
    4498:	fa 01       	movw	r30, r20
    449a:	81 81       	ldd	r24, Z+1	; 0x01
    449c:	8f 71       	andi	r24, 0x1F	; 31
    int field_num = VAL_FIELD_NUM(*pc);
    449e:	90 81       	ld	r25, Z
    tuple_t tuple = (tuple_t)MELD_CONVERT_REG_TO_PTR(reg[reg_index]);
    44a0:	f2 01       	movw	r30, r4
    44a2:	24 e0       	ldi	r18, 0x04	; 4
    44a4:	82 9f       	mul	r24, r18
    44a6:	e0 0d       	add	r30, r0
    44a8:	f1 1d       	adc	r31, r1
    44aa:	11 24       	eor	r1, r1
    44ac:	a0 81       	ld	r26, Z
    44ae:	b1 81       	ldd	r27, Z+1	; 0x01
    tuple_type type = TUPLE_TYPE(tuple);
    44b0:	8c 91       	ld	r24, X

    *size = TYPE_ARG_SIZE(type, field_num);
    44b2:	70 91 3e 29 	lds	r23, 0x293E
    44b6:	60 91 3f 29 	lds	r22, 0x293F
    44ba:	e7 2f       	mov	r30, r23
    44bc:	f6 2f       	mov	r31, r22
    44be:	e8 0f       	add	r30, r24
    44c0:	f1 1d       	adc	r31, r1
    44c2:	e8 0f       	add	r30, r24
    44c4:	f1 1d       	adc	r31, r1
    44c6:	80 81       	ld	r24, Z
    44c8:	27 2f       	mov	r18, r23
    44ca:	36 2f       	mov	r19, r22
    44cc:	29 0f       	add	r18, r25
    44ce:	31 1d       	adc	r19, r1
    44d0:	29 0f       	add	r18, r25
    44d2:	31 1d       	adc	r19, r1
    44d4:	f9 01       	movw	r30, r18
    44d6:	e8 0f       	add	r30, r24
    44d8:	f1 1d       	adc	r31, r1
    44da:	80 81       	ld	r24, Z
    44dc:	90 e0       	ldi	r25, 0x00	; 0

    (*pc) += 2;
    44de:	4e 5f       	subi	r20, 0xFE	; 254
    44e0:	5f 4f       	sbci	r21, 0xFF	; 255
    44e2:	49 83       	std	Y+1, r20	; 0x01
    44e4:	5a 83       	std	Y+2, r21	; 0x02

    return GET_TUPLE_FIELD(tuple, field_num);
    44e6:	4c 91       	ld	r20, X
    44e8:	e7 2f       	mov	r30, r23
    44ea:	f6 2f       	mov	r31, r22
    44ec:	e4 0f       	add	r30, r20
    44ee:	f1 1d       	adc	r31, r1
    44f0:	e4 0f       	add	r30, r20
    44f2:	f1 1d       	adc	r31, r1
    44f4:	40 81       	ld	r20, Z
    44f6:	f9 01       	movw	r30, r18
    44f8:	e4 0f       	add	r30, r20
    44fa:	f1 1d       	adc	r31, r1
    44fc:	21 81       	ldd	r18, Z+1	; 0x01
    44fe:	30 e0       	ldi	r19, 0x00	; 0
    4500:	2f 5f       	subi	r18, 0xFF	; 255
    4502:	3f 4f       	sbci	r19, 0xFF	; 255
    4504:	2a 0f       	add	r18, r26
    4506:	3b 1f       	adc	r19, r27
    4508:	28 c0       	rjmp	.+80     	; 0x455a <tuple_process+0x50c>
  } else if (VAL_IS_INT(value)) {
    assert(0);
    450a:	43 eb       	ldi	r20, 0xB3	; 179
    450c:	55 e2       	ldi	r21, 0x25	; 37
    *size = TYPE_ARG_SIZE(type, field_num);

    (*pc) += 2;

    return GET_TUPLE_FIELD(tuple, field_num);
  } else if (VAL_IS_INT(value)) {
    450e:	81 30       	cpi	r24, 0x01	; 1
    4510:	19 f4       	brne	.+6      	; 0x4518 <tuple_process+0x4ca>
    assert(0);
    4512:	6f ef       	ldi	r22, 0xFF	; 255
    4514:	70 e0       	ldi	r23, 0x00	; 0
    4516:	11 c0       	rjmp	.+34     	; 0x453a <tuple_process+0x4ec>
  } else if (VAL_IS_FLOAT(value)) {
    4518:	81 11       	cpse	r24, r1
    451a:	03 c0       	rjmp	.+6      	; 0x4522 <tuple_process+0x4d4>
    assert(0);
    451c:	61 e0       	ldi	r22, 0x01	; 1
    451e:	71 e0       	ldi	r23, 0x01	; 1
    4520:	0c c0       	rjmp	.+24     	; 0x453a <tuple_process+0x4ec>
  } else if(VAL_IS_TUPLE(value)) {
    4522:	8f 31       	cpi	r24, 0x1F	; 31
    4524:	19 f4       	brne	.+6      	; 0x452c <tuple_process+0x4de>
    assert(0);
    4526:	63 e0       	ldi	r22, 0x03	; 3
    4528:	71 e0       	ldi	r23, 0x01	; 1
    452a:	07 c0       	rjmp	.+14     	; 0x453a <tuple_process+0x4ec>
  } else if(VAL_IS_HOST(value)) {
    452c:	83 30       	cpi	r24, 0x03	; 3
    452e:	19 f4       	brne	.+6      	; 0x4536 <tuple_process+0x4e8>
    assert(0);
    4530:	65 e0       	ldi	r22, 0x05	; 5
    4532:	71 e0       	ldi	r23, 0x01	; 1
    4534:	02 c0       	rjmp	.+4      	; 0x453a <tuple_process+0x4ec>
  } else {
    assert(0 /* invalid value */ );
    4536:	67 e0       	ldi	r22, 0x07	; 7
    4538:	71 e0       	ldi	r23, 0x01	; 1
    453a:	85 eb       	ldi	r24, 0xB5	; 181
    453c:	95 e2       	ldi	r25, 0x25	; 37
    453e:	0e 94 e5 19 	call	0x33ca	; 0x33ca <__myassert>
  }

  assert(0);
    4542:	43 eb       	ldi	r20, 0xB3	; 179
    4544:	55 e2       	ldi	r21, 0x25	; 37
    4546:	6a e0       	ldi	r22, 0x0A	; 10
    4548:	71 e0       	ldi	r23, 0x01	; 1
    454a:	85 eb       	ldi	r24, 0xB5	; 181
    454c:	95 e2       	ldi	r25, 0x25	; 37
    454e:	0e 94 e5 19 	call	0x33ca	; 0x33ca <__myassert>
	  else printf("??");

	  printf("\n");
	}
#endif
	size_t size = 0;
    4552:	80 e0       	ldi	r24, 0x00	; 0
    4554:	90 e0       	ldi	r25, 0x00	; 0
  } else {
    assert(0 /* invalid value */ );
  }

  assert(0);
  return NULL;
    4556:	20 e0       	ldi	r18, 0x00	; 0
    4558:	30 e0       	ldi	r19, 0x00	; 0
	size_t size = 0;
	
	Register *src = eval(MOVE_SRC(pc), &tuple, &new_pc, reg);
	Register *dst = eval_dst(MOVE_DST(pc), &new_pc, reg, &size);

	memcpy(dst, src, size);
    455a:	ac 01       	movw	r20, r24
    455c:	b8 01       	movw	r22, r16
    455e:	c9 01       	movw	r24, r18
    4560:	0e 94 2c 3e 	call	0x7c58	; 0x7c58 <memcpy>
    4564:	15 c4       	rjmp	.+2090   	; 0x4d90 <tuple_process+0xd42>
      }

    case 0x40: // ALLOC
    case 0x50: // ALLOC
      {
	const unsigned char *new_pc = pc+2;
    4566:	c5 01       	movw	r24, r10
    4568:	02 96       	adiw	r24, 0x02	; 2
    456a:	89 83       	std	Y+1, r24	; 0x01
    456c:	9a 83       	std	Y+2, r25	; 0x02
	tuple_t *dst;
	tuple_type type = ALLOC_TYPE(pc);
    456e:	d5 01       	movw	r26, r10
    4570:	11 96       	adiw	r26, 0x01	; 1
    4572:	8c 91       	ld	r24, X
    4574:	11 97       	sbiw	r26, 0x01	; 1
    4576:	0c 91       	ld	r16, X
    4578:	0f 71       	andi	r16, 0x1F	; 31
    457a:	b4 e0       	ldi	r27, 0x04	; 4
    457c:	0b 9f       	mul	r16, r27
    457e:	80 01       	movw	r16, r0
    4580:	11 24       	eor	r1, r1
    4582:	98 2f       	mov	r25, r24
    4584:	92 95       	swap	r25
    4586:	96 95       	lsr	r25
    4588:	96 95       	lsr	r25
    458a:	93 70       	andi	r25, 0x03	; 3
    458c:	09 2b       	or	r16, r25
	{
	  printf("ALLOC %s\n", tuple_names[type]);
	}
#endif

	dst = eval(ALLOC_DST(pc), &tuple, &new_pc, reg);
    458e:	92 01       	movw	r18, r4
    4590:	ae 01       	movw	r20, r28
    4592:	4f 5f       	subi	r20, 0xFF	; 255
    4594:	5f 4f       	sbci	r21, 0xFF	; 255
    4596:	be 01       	movw	r22, r28
    4598:	6d 5f       	subi	r22, 0xFD	; 253
    459a:	7f 4f       	sbci	r23, 0xFF	; 255
    459c:	8f 73       	andi	r24, 0x3F	; 63
    459e:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <eval>
    45a2:	6c 01       	movw	r12, r24
			
	*dst = ALLOC_TUPLE(TYPE_SIZE(type));
    45a4:	78 01       	movw	r14, r16
    45a6:	ee 0c       	add	r14, r14
    45a8:	ff 1c       	adc	r15, r15
    45aa:	ef ef       	ldi	r30, 0xFF	; 255
    45ac:	ee 1a       	sub	r14, r30
    45ae:	fe 0a       	sbc	r15, r30
    45b0:	e0 91 3e 29 	lds	r30, 0x293E
    45b4:	f0 91 3f 29 	lds	r31, 0x293F
    45b8:	ee 0d       	add	r30, r14
    45ba:	ff 1d       	adc	r31, r15
    45bc:	80 81       	ld	r24, Z
    45be:	90 e0       	ldi	r25, 0x00	; 0
    45c0:	0e 94 a5 3b 	call	0x774a	; 0x774a <malloc>
    45c4:	d6 01       	movw	r26, r12
    45c6:	8c 93       	st	X, r24
    45c8:	11 96       	adiw	r26, 0x01	; 1
    45ca:	9c 93       	st	X, r25
	memset(*dst, 0, TYPE_SIZE(type));
    45cc:	e0 91 3e 29 	lds	r30, 0x293E
    45d0:	f0 91 3f 29 	lds	r31, 0x293F
    45d4:	ee 0d       	add	r30, r14
    45d6:	ff 1d       	adc	r31, r15
    45d8:	40 81       	ld	r20, Z
    45da:	50 e0       	ldi	r21, 0x00	; 0
    45dc:	60 e0       	ldi	r22, 0x00	; 0
    45de:	70 e0       	ldi	r23, 0x00	; 0
    45e0:	0e 94 35 3e 	call	0x7c6a	; 0x7c6a <memset>
	TUPLE_TYPE(*dst) = type;
    45e4:	d6 01       	movw	r26, r12
    45e6:	ed 91       	ld	r30, X+
    45e8:	fc 91       	ld	r31, X
    45ea:	00 83       	st	Z, r16
    45ec:	d1 c3       	rjmp	.+1954   	; 0x4d90 <tuple_process+0xd42>
    case 0x60: // IF
    case 0x70: // IF
#ifdef DEBUG_INSTRS
      printf("IF reg %d ", IF_REG(pc));
#endif
      if (!reg[IF_REG(pc)]) {
    45ee:	ef 71       	andi	r30, 0x1F	; 31
    45f0:	92 01       	movw	r18, r4
    45f2:	44 e0       	ldi	r20, 0x04	; 4
    45f4:	e4 9f       	mul	r30, r20
    45f6:	20 0d       	add	r18, r0
    45f8:	31 1d       	adc	r19, r1
    45fa:	11 24       	eor	r1, r1
    45fc:	f9 01       	movw	r30, r18
    45fe:	80 81       	ld	r24, Z
    4600:	91 81       	ldd	r25, Z+1	; 0x01
    4602:	a2 81       	ldd	r26, Z+2	; 0x02
    4604:	b3 81       	ldd	r27, Z+3	; 0x03
    4606:	89 2b       	or	r24, r25
    4608:	8a 2b       	or	r24, r26
    460a:	8b 2b       	or	r24, r27
    460c:	41 f4       	brne	.+16     	; 0x461e <tuple_process+0x5d0>
#ifdef DEBUG_INSTRS
	printf("no\n");
#endif
	pc += IF_JUMP(pc);
    460e:	d5 01       	movw	r26, r10
    4610:	11 96       	adiw	r26, 0x01	; 1
    4612:	8d 91       	ld	r24, X+
    4614:	9c 91       	ld	r25, X
    4616:	12 97       	sbiw	r26, 0x02	; 2
    4618:	a8 0e       	add	r10, r24
    461a:	b9 1e       	adc	r11, r25
	break;
    461c:	3c cd       	rjmp	.-1416   	; 0x4096 <tuple_process+0x48>

#ifdef DEBUG_INSTRS
      printf("yes\n");
#endif
      // Advance the program counter past the instruction
      pc += IF_BASE;
    461e:	b3 e0       	ldi	r27, 0x03	; 3
    4620:	ab 0e       	add	r10, r27
    4622:	b1 1c       	adc	r11, r1
      break;
    4624:	38 cd       	rjmp	.-1424   	; 0x4096 <tuple_process+0x48>

    case 0x80: // REMOVE
    case 0x90: // REMOVE
      if (isNew > 0) {
    4626:	2b 85       	ldd	r18, Y+11	; 0x0b
    4628:	3c 85       	ldd	r19, Y+12	; 0x0c
    462a:	12 16       	cp	r1, r18
    462c:	13 06       	cpc	r1, r19
    462e:	9c f5       	brge	.+102    	; 0x4696 <tuple_process+0x648>
        int reg_remove = REMOVE_REG(pc);
    4630:	ef 71       	andi	r30, 0x1F	; 31
	int size = TYPE_SIZE(TUPLE_TYPE(MELD_CONVERT_REG_TO_PTR(reg[reg_remove])));
    4632:	a2 01       	movw	r20, r4
    4634:	84 e0       	ldi	r24, 0x04	; 4
    4636:	e8 9f       	mul	r30, r24
    4638:	40 0d       	add	r20, r0
    463a:	51 1d       	adc	r21, r1
    463c:	11 24       	eor	r1, r1
    463e:	fa 01       	movw	r30, r20
    4640:	00 81       	ld	r16, Z
    4642:	11 81       	ldd	r17, Z+1	; 0x01
    4644:	d8 01       	movw	r26, r16
    4646:	8c 91       	ld	r24, X
    4648:	20 91 3e 29 	lds	r18, 0x293E
    464c:	90 91 3f 29 	lds	r25, 0x293F
    4650:	e2 2f       	mov	r30, r18
    4652:	f9 2f       	mov	r31, r25
    4654:	e8 0f       	add	r30, r24
    4656:	f1 1d       	adc	r31, r1
    4658:	e8 0f       	add	r30, r24
    465a:	f1 1d       	adc	r31, r1

	tuple_handle(memcpy(malloc(size),MELD_CONVERT_REG_TO_PTR(reg[reg_remove]), size), -1, reg);
    465c:	41 81       	ldd	r20, Z+1	; 0x01
    465e:	84 2f       	mov	r24, r20
    4660:	90 e0       	ldi	r25, 0x00	; 0
    4662:	4e 8b       	std	Y+22, r20	; 0x16
    4664:	0e 94 a5 3b 	call	0x774a	; 0x774a <malloc>
    4668:	4e 89       	ldd	r20, Y+22	; 0x16
    466a:	50 e0       	ldi	r21, 0x00	; 0
    466c:	b8 01       	movw	r22, r16
    466e:	0e 94 2c 3e 	call	0x7c58	; 0x7c58 <memcpy>
    4672:	a2 01       	movw	r20, r4
    4674:	6f ef       	ldi	r22, 0xFF	; 255
    4676:	7f ef       	ldi	r23, 0xFF	; 255
    4678:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <tuple_handle>
	reg[REMOVE_REG(pc)] = 0;
    467c:	f5 01       	movw	r30, r10
    467e:	80 81       	ld	r24, Z
    4680:	8f 71       	andi	r24, 0x1F	; 31
    4682:	f2 01       	movw	r30, r4
    4684:	24 e0       	ldi	r18, 0x04	; 4
    4686:	82 9f       	mul	r24, r18
    4688:	e0 0d       	add	r30, r0
    468a:	f1 1d       	adc	r31, r1
    468c:	11 24       	eor	r1, r1
    468e:	10 82       	st	Z, r1
    4690:	11 82       	std	Z+1, r1	; 0x01
    4692:	12 82       	std	Z+2, r1	; 0x02
    4694:	13 82       	std	Z+3, r1	; 0x03
      }	
      // Advance the program counter past the instruction
      pc += 1;
    4696:	3f ef       	ldi	r19, 0xFF	; 255
    4698:	a3 1a       	sub	r10, r19
    469a:	b3 0a       	sbc	r11, r19
      break;
    469c:	fc cc       	rjmp	.-1544   	; 0x4096 <tuple_process+0x48>

    case 0xa0: // ITER
      {
      const tuple_type type = ITER_TYPE(pc);
    469e:	d5 01       	movw	r26, r10
    46a0:	11 96       	adiw	r26, 0x01	; 1
    46a2:	2c 91       	ld	r18, X
    46a4:	11 97       	sbiw	r26, 0x01	; 1
    46a6:	2f 77       	andi	r18, 0x7F	; 127
      int i, length;
      void **list;
      const unsigned char *jump = pc + ITER_JUMP(pc);
    46a8:	12 96       	adiw	r26, 0x02	; 2
    46aa:	ed 91       	ld	r30, X+
    46ac:	fc 91       	ld	r31, X
    46ae:	13 97       	sbiw	r26, 0x03	; 3
    46b0:	ea 0d       	add	r30, r10
    46b2:	fb 1d       	adc	r31, r11
    46b4:	ef 83       	std	Y+7, r30	; 0x07
    46b6:	f8 87       	std	Y+8, r31	; 0x08
      int size = TYPE_SIZE(type);
    46b8:	82 2f       	mov	r24, r18
    46ba:	90 e0       	ldi	r25, 0x00	; 0
    46bc:	ac 01       	movw	r20, r24
    46be:	44 0f       	add	r20, r20
    46c0:	55 1f       	adc	r21, r21
    46c2:	4f 87       	std	Y+15, r20	; 0x0f
    46c4:	58 8b       	std	Y+16, r21	; 0x10
    46c6:	e0 91 3e 29 	lds	r30, 0x293E
    46ca:	f0 91 3f 29 	lds	r31, 0x293F
    46ce:	e4 0f       	add	r30, r20
    46d0:	f5 1f       	adc	r31, r21
    46d2:	d1 80       	ldd	r13, Z+1	; 0x01
			
      /* produce a random ordering for all tuples of the appropriate type */
			
      if(TYPE_IS_PERSISTENT(type) && !TYPE_IS_AGG(type)) {
    46d4:	fc 01       	movw	r30, r24
    46d6:	ea 5a       	subi	r30, 0xAA	; 170
    46d8:	ff 4d       	sbci	r31, 0xDF	; 223
    46da:	e1 81       	ldd	r30, Z+1	; 0x01
    46dc:	f0 e0       	ldi	r31, 0x00	; 0
    46de:	e8 5a       	subi	r30, 0xA8	; 168
    46e0:	ff 4d       	sbci	r31, 0xDF	; 223
    46e2:	30 81       	ld	r19, Z
    46e4:	31 ff       	sbrs	r19, 1
    46e6:	4f c0       	rjmp	.+158    	; 0x4786 <tuple_process+0x738>
    46e8:	30 fd       	sbrc	r19, 0
    46ea:	4d c0       	rjmp	.+154    	; 0x4786 <tuple_process+0x738>
	/* persistent aggregate types not supported */
        persistent_set *persistents = &PERSISTENT[type];
    46ec:	e0 90 5f 2f 	lds	r14, 0x2F5F
    46f0:	f0 90 60 2f 	lds	r15, 0x2F60
    46f4:	56 e0       	ldi	r21, 0x06	; 6
    46f6:	25 9f       	mul	r18, r21
    46f8:	e0 0c       	add	r14, r0
    46fa:	f1 1c       	adc	r15, r1
    46fc:	11 24       	eor	r1, r1
        
        length = persistents->current;
    46fe:	d7 01       	movw	r26, r14
    4700:	14 96       	adiw	r26, 0x04	; 4
    4702:	2d 90       	ld	r2, X+
    4704:	3c 90       	ld	r3, X
    4706:	15 97       	sbiw	r26, 0x05	; 5
        list = malloc(sizeof(tuple_t) * length);
    4708:	c1 01       	movw	r24, r2
    470a:	88 0f       	add	r24, r24
    470c:	99 1f       	adc	r25, r25
    470e:	0e 94 a5 3b 	call	0x774a	; 0x774a <malloc>
    4712:	8c 01       	movw	r16, r24
    4714:	8d 83       	std	Y+5, r24	; 0x05
    4716:	9e 83       	std	Y+6, r25	; 0x06
  for (i = 0; entry != NULL; entry = entry->next, i++);

  return i;
}

int tuple_process(tuple_t tuple, const unsigned char *pc,
    4718:	ed 2d       	mov	r30, r13
    471a:	f0 e0       	ldi	r31, 0x00	; 0
    471c:	ed 87       	std	Y+13, r30	; 0x0d
    471e:	fe 87       	std	Y+14, r31	; 0x0e
        persistent_set *persistents = &PERSISTENT[type];
        
        length = persistents->current;
        list = malloc(sizeof(tuple_t) * length);

        for(i = 0; i < length; i++) {
    4720:	c1 2c       	mov	r12, r1
    4722:	d1 2c       	mov	r13, r1
    4724:	61 2c       	mov	r6, r1
    4726:	71 2c       	mov	r7, r1
    4728:	43 01       	movw	r8, r6
    472a:	1c c0       	rjmp	.+56     	; 0x4764 <tuple_process+0x716>
          int j = random() % (i + 1);
    472c:	0e 94 2d 3d 	call	0x7a5a	; 0x7a5a <random>
    4730:	a4 01       	movw	r20, r8
    4732:	93 01       	movw	r18, r6
    4734:	0e 94 4d 3b 	call	0x769a	; 0x769a <__divmodsi4>
          
          list[i] = list[j];
    4738:	fb 01       	movw	r30, r22
    473a:	ee 0f       	add	r30, r30
    473c:	ff 1f       	adc	r31, r31
    473e:	e0 0f       	add	r30, r16
    4740:	f1 1f       	adc	r31, r17
    4742:	80 81       	ld	r24, Z
    4744:	91 81       	ldd	r25, Z+1	; 0x01
    4746:	ad 81       	ldd	r26, Y+5	; 0x05
    4748:	be 81       	ldd	r27, Y+6	; 0x06
    474a:	8d 93       	st	X+, r24
    474c:	9d 93       	st	X+, r25
    474e:	ad 83       	std	Y+5, r26	; 0x05
    4750:	be 83       	std	Y+6, r27	; 0x06
          list[j] = persistents->array + i * size;
    4752:	d7 01       	movw	r26, r14
    4754:	8d 91       	ld	r24, X+
    4756:	9c 91       	ld	r25, X
    4758:	8c 0d       	add	r24, r12
    475a:	9d 1d       	adc	r25, r13
    475c:	80 83       	st	Z, r24
    475e:	91 83       	std	Z+1, r25	; 0x01
    4760:	c9 84       	ldd	r12, Y+9	; 0x09
    4762:	da 84       	ldd	r13, Y+10	; 0x0a
    4764:	bf ef       	ldi	r27, 0xFF	; 255
    4766:	6b 1a       	sub	r6, r27
    4768:	7b 0a       	sbc	r7, r27
    476a:	8b 0a       	sbc	r8, r27
    476c:	9b 0a       	sbc	r9, r27
    476e:	ed 85       	ldd	r30, Y+13	; 0x0d
    4770:	fe 85       	ldd	r31, Y+14	; 0x0e
    4772:	ec 0d       	add	r30, r12
    4774:	fd 1d       	adc	r31, r13
    4776:	e9 87       	std	Y+9, r30	; 0x09
    4778:	fa 87       	std	Y+10, r31	; 0x0a
  for (i = 0; entry != NULL; entry = entry->next, i++);

  return i;
}

int tuple_process(tuple_t tuple, const unsigned char *pc,
    477a:	c3 01       	movw	r24, r6
    477c:	01 97       	sbiw	r24, 0x01	; 1
        persistent_set *persistents = &PERSISTENT[type];
        
        length = persistents->current;
        list = malloc(sizeof(tuple_t) * length);

        for(i = 0; i < length; i++) {
    477e:	82 15       	cp	r24, r2
    4780:	93 05       	cpc	r25, r3
    4782:	a4 f2       	brlt	.-88     	; 0x472c <tuple_process+0x6de>
    4784:	3f c0       	rjmp	.+126    	; 0x4804 <tuple_process+0x7b6>
          list[i] = list[j];
          list[j] = persistents->array + i * size;
        }
      } else {
	/* non-persistent type */
	tuple_entry *entry = TUPLES[type].head;
    4786:	9c 01       	movw	r18, r24
    4788:	22 0f       	add	r18, r18
    478a:	33 1f       	adc	r19, r19
    478c:	22 0f       	add	r18, r18
    478e:	33 1f       	adc	r19, r19
    4790:	80 91 61 2f 	lds	r24, 0x2F61
    4794:	90 91 62 2f 	lds	r25, 0x2F62
    4798:	82 0f       	add	r24, r18
    479a:	93 1f       	adc	r25, r19
    479c:	dc 01       	movw	r26, r24
    479e:	ed 90       	ld	r14, X+
    47a0:	fc 90       	ld	r15, X
		    
	length = queue_length(&TUPLES[ITER_TYPE(pc)]);
    47a2:	0e 94 18 20 	call	0x4030	; 0x4030 <queue_length>
    47a6:	1c 01       	movw	r2, r24
	list = malloc(sizeof(tuple_t) * length);
    47a8:	88 0f       	add	r24, r24
    47aa:	99 1f       	adc	r25, r25
    47ac:	0e 94 a5 3b 	call	0x774a	; 0x774a <malloc>
    47b0:	8c 01       	movw	r16, r24
    47b2:	6c 01       	movw	r12, r24
		    
	for (i = 0; i < length; i++) {
    47b4:	61 2c       	mov	r6, r1
    47b6:	71 2c       	mov	r7, r1
    47b8:	43 01       	movw	r8, r6
    47ba:	1a c0       	rjmp	.+52     	; 0x47f0 <tuple_process+0x7a2>
	  int j = random() % (i+1);
    47bc:	0e 94 2d 3d 	call	0x7a5a	; 0x7a5a <random>
    47c0:	a4 01       	movw	r20, r8
    47c2:	93 01       	movw	r18, r6
    47c4:	0e 94 4d 3b 	call	0x769a	; 0x769a <__divmodsi4>

	  list[i] = list[j];
    47c8:	fb 01       	movw	r30, r22
    47ca:	ee 0f       	add	r30, r30
    47cc:	ff 1f       	adc	r31, r31
    47ce:	e0 0f       	add	r30, r16
    47d0:	f1 1f       	adc	r31, r17
    47d2:	80 81       	ld	r24, Z
    47d4:	91 81       	ldd	r25, Z+1	; 0x01
    47d6:	d6 01       	movw	r26, r12
    47d8:	8d 93       	st	X+, r24
    47da:	9d 93       	st	X+, r25
    47dc:	6d 01       	movw	r12, r26
	  list[j] = entry->tuple;
    47de:	d7 01       	movw	r26, r14
    47e0:	14 96       	adiw	r26, 0x04	; 4
    47e2:	8d 91       	ld	r24, X+
    47e4:	9c 91       	ld	r25, X
    47e6:	15 97       	sbiw	r26, 0x05	; 5
    47e8:	80 83       	st	Z, r24
    47ea:	91 83       	std	Z+1, r25	; 0x01

	  entry = entry->next;
    47ec:	ed 90       	ld	r14, X+
    47ee:	fc 90       	ld	r15, X
    47f0:	bf ef       	ldi	r27, 0xFF	; 255
    47f2:	6b 1a       	sub	r6, r27
    47f4:	7b 0a       	sbc	r7, r27
    47f6:	8b 0a       	sbc	r8, r27
    47f8:	9b 0a       	sbc	r9, r27
  for (i = 0; entry != NULL; entry = entry->next, i++);

  return i;
}

int tuple_process(tuple_t tuple, const unsigned char *pc,
    47fa:	c3 01       	movw	r24, r6
    47fc:	01 97       	sbiw	r24, 0x01	; 1
	tuple_entry *entry = TUPLES[type].head;
		    
	length = queue_length(&TUPLES[ITER_TYPE(pc)]);
	list = malloc(sizeof(tuple_t) * length);
		    
	for (i = 0; i < length; i++) {
    47fe:	82 15       	cp	r24, r2
    4800:	93 05       	cpc	r25, r3
    4802:	e4 f2       	brlt	.-72     	; 0x47bc <tuple_process+0x76e>
			
#ifdef DEBUG_INSTRS
      printf("ITER %s len=%d\n", tuple_names[type], length);
#endif

      if(length == 0) {
    4804:	21 14       	cp	r2, r1
    4806:	31 04       	cpc	r3, r1
    4808:	09 f4       	brne	.+2      	; 0x480c <tuple_process+0x7be>
    480a:	43 cc       	rjmp	.-1914   	; 0x4092 <tuple_process+0x44>
    480c:	09 87       	std	Y+9, r16	; 0x09
    480e:	1a 87       	std	Y+10, r17	; 0x0a
    4810:	61 2c       	mov	r6, r1
    4812:	71 2c       	mov	r7, r1
	next_tuple = list[i];

	unsigned char matched = 1;
	const unsigned char *tmppc;

        tmppc = pc + ITER_BASE;
    4814:	45 01       	movw	r8, r10
    4816:	e4 e0       	ldi	r30, 0x04	; 4
    4818:	8e 0e       	add	r8, r30
    481a:	91 1c       	adc	r9, r1
          
	if (matched) {
	  const unsigned char* iter_pc = pc + ITER_BASE;
    
	  if(ITER_MATCH_NONE(iter_pc))
	    iter_pc += 2;
    481c:	95 01       	movw	r18, r10
    481e:	2a 5f       	subi	r18, 0xFA	; 250
    4820:	3f 4f       	sbci	r19, 0xFF	; 255
    4822:	2c 8b       	std	Y+20, r18	; 0x14
    4824:	3d 8b       	std	Y+21, r19	; 0x15
    4826:	a1 c0       	rjmp	.+322    	; 0x496a <tuple_process+0x91c>

      /* iterate over all tuples of the appropriate type */
      void *next_tuple;
      
      for (i = 0; i < length; i++) {
	next_tuple = list[i];
    4828:	a9 85       	ldd	r26, Y+9	; 0x09
    482a:	ba 85       	ldd	r27, Y+10	; 0x0a
    482c:	cd 90       	ld	r12, X+
    482e:	dd 90       	ld	r13, X+
    4830:	a9 87       	std	Y+9, r26	; 0x09
    4832:	ba 87       	std	Y+10, r27	; 0x0a
	unsigned char matched = 1;
	const unsigned char *tmppc;

        tmppc = pc + ITER_BASE;

        if(!ITER_MATCH_NONE(tmppc)) {
    4834:	f5 01       	movw	r30, r10
    4836:	85 81       	ldd	r24, Z+5	; 0x05
    4838:	80 7c       	andi	r24, 0xC0	; 192
    483a:	80 3c       	cpi	r24, 0xC0	; 192
    483c:	49 f4       	brne	.+18     	; 0x4850 <tuple_process+0x802>
#endif
          
	if (matched) {
	  const unsigned char* iter_pc = pc + ITER_BASE;
    
	  if(ITER_MATCH_NONE(iter_pc))
    483e:	d5 01       	movw	r26, r10
    4840:	15 96       	adiw	r26, 0x05	; 5
    4842:	8c 91       	ld	r24, X
    4844:	80 7c       	andi	r24, 0xC0	; 192
    4846:	80 3c       	cpi	r24, 0xC0	; 192
    4848:	09 f4       	brne	.+2      	; 0x484c <tuple_process+0x7fe>
    484a:	5b c0       	rjmp	.+182    	; 0x4902 <tuple_process+0x8b4>
    484c:	b4 01       	movw	r22, r8
    484e:	5c c0       	rjmp	.+184    	; 0x4908 <tuple_process+0x8ba>
	unsigned char matched = 1;
	const unsigned char *tmppc;

        tmppc = pc + ITER_BASE;

        if(!ITER_MATCH_NONE(tmppc)) {
    4850:	74 01       	movw	r14, r8
    4852:	b1 e0       	ldi	r27, 0x01	; 1
    4854:	bd 83       	std	Y+5, r27	; 0x05
	  /* check to see if it matches */
          while (1) {
            const unsigned char *new_pc = tmppc + 2;
    4856:	c7 01       	movw	r24, r14
    4858:	02 96       	adiw	r24, 0x02	; 2
    485a:	89 83       	std	Y+1, r24	; 0x01
    485c:	9a 83       	std	Y+2, r25	; 0x02
	    const unsigned char fieldnum = ITER_MATCH_FIELD(tmppc);
    485e:	f7 01       	movw	r30, r14
    4860:	20 81       	ld	r18, Z
	    const unsigned char type_size = TYPE_ARG_SIZE(type, fieldnum);
    4862:	e0 91 3e 29 	lds	r30, 0x293E
    4866:	f0 91 3f 29 	lds	r31, 0x293F
    486a:	af 85       	ldd	r26, Y+15	; 0x0f
    486c:	b8 89       	ldd	r27, Y+16	; 0x10
    486e:	ae 0f       	add	r26, r30
    4870:	bf 1f       	adc	r27, r31
    4872:	3c 91       	ld	r19, X
    4874:	cf 01       	movw	r24, r30
    4876:	82 0f       	add	r24, r18
    4878:	91 1d       	adc	r25, r1
    487a:	82 0f       	add	r24, r18
    487c:	91 1d       	adc	r25, r1
    487e:	dc 01       	movw	r26, r24
    4880:	a3 0f       	add	r26, r19
    4882:	b1 1d       	adc	r27, r1
    4884:	2c 91       	ld	r18, X
    4886:	2d 87       	std	Y+13, r18	; 0x0d

            Register *field = GET_TUPLE_FIELD(next_tuple, fieldnum);
    4888:	d6 01       	movw	r26, r12
    488a:	2c 91       	ld	r18, X
    488c:	e2 0f       	add	r30, r18
    488e:	f1 1d       	adc	r31, r1
    4890:	e2 0f       	add	r30, r18
    4892:	f1 1d       	adc	r31, r1
    4894:	20 81       	ld	r18, Z
    4896:	fc 01       	movw	r30, r24
    4898:	e2 0f       	add	r30, r18
    489a:	f1 1d       	adc	r31, r1
    489c:	b1 81       	ldd	r27, Z+1	; 0x01
    489e:	b9 8b       	std	Y+17, r27	; 0x11
            Register *val = eval(ITER_MATCH_VAL(tmppc), &tuple, &new_pc, reg);
    48a0:	f7 01       	movw	r30, r14
    48a2:	81 81       	ldd	r24, Z+1	; 0x01
    48a4:	92 01       	movw	r18, r4
    48a6:	ae 01       	movw	r20, r28
    48a8:	4f 5f       	subi	r20, 0xFF	; 255
    48aa:	5f 4f       	sbci	r21, 0xFF	; 255
    48ac:	be 01       	movw	r22, r28
    48ae:	6d 5f       	subi	r22, 0xFD	; 253
    48b0:	7f 4f       	sbci	r23, 0xFF	; 255
    48b2:	8f 73       	andi	r24, 0x3F	; 63
    48b4:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <eval>
            
            matched = matched && (memcmp(field, val, type_size) == 0);
    48b8:	fd 81       	ldd	r31, Y+5	; 0x05
    48ba:	ff 23       	and	r31, r31
    48bc:	91 f0       	breq	.+36     	; 0x48e2 <tuple_process+0x894>
          while (1) {
            const unsigned char *new_pc = tmppc + 2;
	    const unsigned char fieldnum = ITER_MATCH_FIELD(tmppc);
	    const unsigned char type_size = TYPE_ARG_SIZE(type, fieldnum);

            Register *field = GET_TUPLE_FIELD(next_tuple, fieldnum);
    48be:	49 89       	ldd	r20, Y+17	; 0x11
    48c0:	24 2f       	mov	r18, r20
    48c2:	30 e0       	ldi	r19, 0x00	; 0
    48c4:	2f 5f       	subi	r18, 0xFF	; 255
    48c6:	3f 4f       	sbci	r19, 0xFF	; 255
            Register *val = eval(ITER_MATCH_VAL(tmppc), &tuple, &new_pc, reg);
            
            matched = matched && (memcmp(field, val, type_size) == 0);
    48c8:	4d 85       	ldd	r20, Y+13	; 0x0d
    48ca:	50 e0       	ldi	r21, 0x00	; 0
    48cc:	bc 01       	movw	r22, r24
    48ce:	c6 01       	movw	r24, r12
    48d0:	82 0f       	add	r24, r18
    48d2:	93 1f       	adc	r25, r19
    48d4:	0e 94 1f 3e 	call	0x7c3e	; 0x7c3e <memcmp>
    48d8:	9c 01       	movw	r18, r24
    48da:	81 e0       	ldi	r24, 0x01	; 1
    48dc:	90 e0       	ldi	r25, 0x00	; 0
    48de:	23 2b       	or	r18, r19
    48e0:	11 f0       	breq	.+4      	; 0x48e6 <tuple_process+0x898>
    48e2:	80 e0       	ldi	r24, 0x00	; 0
    48e4:	90 e0       	ldi	r25, 0x00	; 0
    48e6:	8d 83       	std	Y+5, r24	; 0x05

            if(ITER_MATCH_END(tmppc))
    48e8:	d7 01       	movw	r26, r14
    48ea:	11 96       	adiw	r26, 0x01	; 1
    48ec:	8c 91       	ld	r24, X
    48ee:	80 7c       	andi	r24, 0xC0	; 192
    48f0:	80 34       	cpi	r24, 0x40	; 64
    48f2:	19 f0       	breq	.+6      	; 0x48fa <tuple_process+0x8ac>
              break;

            tmppc = new_pc;
    48f4:	e9 80       	ldd	r14, Y+1	; 0x01
    48f6:	fa 80       	ldd	r15, Y+2	; 0x02
          }
    48f8:	ae cf       	rjmp	.-164    	; 0x4856 <tuple_process+0x808>

#ifdef DEBUG_INSTRS
	printf("MATCHED: %d %d\n", matched, length);
#endif
          
	if (matched) {
    48fa:	bd 81       	ldd	r27, Y+5	; 0x05
    48fc:	bb 23       	and	r27, r27
    48fe:	91 f1       	breq	.+100    	; 0x4964 <tuple_process+0x916>
    4900:	9e cf       	rjmp	.-196    	; 0x483e <tuple_process+0x7f0>
	  const unsigned char* iter_pc = pc + ITER_BASE;
    
	  if(ITER_MATCH_NONE(iter_pc))
	    iter_pc += 2;
    4902:	6c 89       	ldd	r22, Y+20	; 0x14
    4904:	7d 89       	ldd	r23, Y+21	; 0x15
    4906:	22 c0       	rjmp	.+68     	; 0x494c <tuple_process+0x8fe>
	  else {
	    const unsigned char *old;
	    while(1) {
	      old = iter_pc;
	      
	      if (VAL_IS_FLOAT(ITER_MATCH_VAL(iter_pc)))
    4908:	fb 01       	movw	r30, r22
    490a:	91 81       	ldd	r25, Z+1	; 0x01
    490c:	89 2f       	mov	r24, r25
    490e:	8f 73       	andi	r24, 0x3F	; 63
    4910:	09 f4       	brne	.+2      	; 0x4914 <tuple_process+0x8c6>
    4912:	02 c0       	rjmp	.+4      	; 0x4918 <tuple_process+0x8ca>
		iter_pc += sizeof(meld_float);
	      else if (VAL_IS_INT(ITER_MATCH_VAL(iter_pc)))
    4914:	81 30       	cpi	r24, 0x01	; 1
    4916:	19 f4       	brne	.+6      	; 0x491e <tuple_process+0x8d0>
		iter_pc += sizeof(meld_int);
    4918:	6c 5f       	subi	r22, 0xFC	; 252
    491a:	7f 4f       	sbci	r23, 0xFF	; 255
    491c:	12 c0       	rjmp	.+36     	; 0x4942 <tuple_process+0x8f4>
    491e:	6e 5f       	subi	r22, 0xFE	; 254
    4920:	7f 4f       	sbci	r23, 0xFF	; 255
	      else if (VAL_IS_FIELD(ITER_MATCH_VAL(iter_pc)))
    4922:	82 30       	cpi	r24, 0x02	; 2
    4924:	71 f0       	breq	.+28     	; 0x4942 <tuple_process+0x8f4>
		iter_pc += 2;
	      else if (VAL_IS_REVERSE(ITER_MATCH_VAL(iter_pc)))
    4926:	84 30       	cpi	r24, 0x04	; 4
    4928:	61 f0       	breq	.+24     	; 0x4942 <tuple_process+0x8f4>
		iter_pc += 2;
	      else {
		assert(0);
    492a:	43 eb       	ldi	r20, 0xB3	; 179
    492c:	55 e2       	ldi	r21, 0x25	; 37
    492e:	69 ef       	ldi	r22, 0xF9	; 249
    4930:	74 e0       	ldi	r23, 0x04	; 4
    4932:	85 eb       	ldi	r24, 0xB5	; 181
    4934:	95 e2       	ldi	r25, 0x25	; 37
    4936:	0e 94 e5 19 	call	0x33ca	; 0x33ca <__myassert>
		exit(1);
    493a:	81 e0       	ldi	r24, 0x01	; 1
    493c:	90 e0       	ldi	r25, 0x00	; 0
    493e:	0e 94 73 41 	call	0x82e6	; 0x82e6 <_exit>
	      }

	      iter_pc += 2;
    4942:	6e 5f       	subi	r22, 0xFE	; 254
    4944:	7f 4f       	sbci	r23, 0xFF	; 255

	      if(ITER_MATCH_END(old))
    4946:	90 7c       	andi	r25, 0xC0	; 192
    4948:	90 34       	cpi	r25, 0x40	; 64
    494a:	f1 f6       	brne	.-68     	; 0x4908 <tuple_process+0x8ba>
		break;
	    }
	  }

	  if (RET_RET == tuple_process(next_tuple, iter_pc, isNew, reg)) {
    494c:	92 01       	movw	r18, r4
    494e:	4b 85       	ldd	r20, Y+11	; 0x0b
    4950:	5c 85       	ldd	r21, Y+12	; 0x0c
    4952:	c6 01       	movw	r24, r12
    4954:	0e 94 27 20 	call	0x404e	; 0x404e <tuple_process>
    4958:	89 2b       	or	r24, r25
    495a:	21 f4       	brne	.+8      	; 0x4964 <tuple_process+0x916>
	    free(list);
    495c:	c8 01       	movw	r24, r16
    495e:	0e 94 40 3c 	call	0x7880	; 0x7880 <free>
    4962:	36 c2       	rjmp	.+1132   	; 0x4dd0 <tuple_process+0xd82>
      }

      /* iterate over all tuples of the appropriate type */
      void *next_tuple;
      
      for (i = 0; i < length; i++) {
    4964:	ff ef       	ldi	r31, 0xFF	; 255
    4966:	6f 1a       	sub	r6, r31
    4968:	7f 0a       	sbc	r7, r31
    496a:	62 14       	cp	r6, r2
    496c:	73 04       	cpc	r7, r3
    496e:	0c f4       	brge	.+2      	; 0x4972 <tuple_process+0x924>
    4970:	5b cf       	rjmp	.-330    	; 0x4828 <tuple_process+0x7da>
	    return RET_RET;
	  }
	}
      }

      free(list);
    4972:	c8 01       	movw	r24, r16
    4974:	0e 94 40 3c 	call	0x7880	; 0x7880 <free>
    4978:	8c cb       	rjmp	.-2280   	; 0x4092 <tuple_process+0x44>
    case 0xc0: // OP
    case 0xd0: // OP
    case 0xe0: // OP
    case 0xf0: // OP
      {
	const unsigned char *new_pc = pc+3;
    497a:	c5 01       	movw	r24, r10
    497c:	03 96       	adiw	r24, 0x03	; 3
    497e:	89 83       	std	Y+1, r24	; 0x01
    4980:	9a 83       	std	Y+2, r25	; 0x02
	printf("OP to %d\n", OP_DST(pc));
#endif

	Register *arg1, *arg2;
      
	arg1 = eval(OP_ARG1(pc), &tuple, &new_pc, reg);
    4982:	d5 01       	movw	r26, r10
    4984:	8c 91       	ld	r24, X
    4986:	92 01       	movw	r18, r4
    4988:	ae 01       	movw	r20, r28
    498a:	4f 5f       	subi	r20, 0xFF	; 255
    498c:	5f 4f       	sbci	r21, 0xFF	; 255
    498e:	be 01       	movw	r22, r28
    4990:	6d 5f       	subi	r22, 0xFD	; 253
    4992:	7f 4f       	sbci	r23, 0xFF	; 255
    4994:	8f 73       	andi	r24, 0x3F	; 63
    4996:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <eval>
    499a:	7c 01       	movw	r14, r24
	arg2 = eval(OP_ARG2(pc), &tuple, &new_pc, reg);
    499c:	f5 01       	movw	r30, r10
    499e:	81 81       	ldd	r24, Z+1	; 0x01
    49a0:	92 01       	movw	r18, r4
    49a2:	ae 01       	movw	r20, r28
    49a4:	4f 5f       	subi	r20, 0xFF	; 255
    49a6:	5f 4f       	sbci	r21, 0xFF	; 255
    49a8:	be 01       	movw	r22, r28
    49aa:	6d 5f       	subi	r22, 0xFD	; 253
    49ac:	7f 4f       	sbci	r23, 0xFF	; 255
    49ae:	86 95       	lsr	r24
    49b0:	86 95       	lsr	r24
    49b2:	0e 94 5e 1d 	call	0x3abc	; 0x3abc <eval>
    49b6:	3c 01       	movw	r6, r24
	printf ("OP");
	printf ("%ld", MELD_INT(arg2));
	printf ("\n");
#endif

	Register *dest = reg + OP_DST(pc);
    49b8:	d5 01       	movw	r26, r10
    49ba:	12 96       	adiw	r26, 0x02	; 2
    49bc:	8c 91       	ld	r24, X
    49be:	12 97       	sbiw	r26, 0x02	; 2
    49c0:	11 96       	adiw	r26, 0x01	; 1
    49c2:	0c 91       	ld	r16, X
    49c4:	03 70       	andi	r16, 0x03	; 3
    49c6:	b8 e0       	ldi	r27, 0x08	; 8
    49c8:	0b 9f       	mul	r16, r27
    49ca:	80 01       	movw	r16, r0
    49cc:	11 24       	eor	r1, r1
    49ce:	98 2f       	mov	r25, r24
    49d0:	92 95       	swap	r25
    49d2:	96 95       	lsr	r25
    49d4:	97 70       	andi	r25, 0x07	; 7
    49d6:	09 2b       	or	r16, r25
    49d8:	00 0f       	add	r16, r16
    49da:	11 1f       	adc	r17, r17
    49dc:	00 0f       	add	r16, r16
    49de:	11 1f       	adc	r17, r17
    49e0:	04 0d       	add	r16, r4
    49e2:	15 1d       	adc	r17, r5
      
	switch(OP_OP(pc)) {
    49e4:	8f 71       	andi	r24, 0x1F	; 31
    49e6:	90 e0       	ldi	r25, 0x00	; 0
    49e8:	88 31       	cpi	r24, 0x18	; 24
    49ea:	91 05       	cpc	r25, r1
    49ec:	08 f0       	brcs	.+2      	; 0x49f0 <tuple_process+0x9a2>
    49ee:	d0 c1       	rjmp	.+928    	; 0x4d90 <tuple_process+0xd42>
    49f0:	8c 50       	subi	r24, 0x0C	; 12
    49f2:	9f 4f       	sbci	r25, 0xFF	; 255
    49f4:	fc 01       	movw	r30, r24
    49f6:	0c 94 69 3b 	jmp	0x76d2	; 0x76d2 <__tablejump2__>
	case OP_NEQI: *dest = (MELD_INT(arg1) != MELD_INT(arg2)); break;
    49fa:	81 e0       	ldi	r24, 0x01	; 1
    49fc:	90 e0       	ldi	r25, 0x00	; 0
    49fe:	a0 e0       	ldi	r26, 0x00	; 0
    4a00:	b0 e0       	ldi	r27, 0x00	; 0
    4a02:	f7 01       	movw	r30, r14
    4a04:	c0 80       	ld	r12, Z
    4a06:	d1 80       	ldd	r13, Z+1	; 0x01
    4a08:	e2 80       	ldd	r14, Z+2	; 0x02
    4a0a:	f3 80       	ldd	r15, Z+3	; 0x03
    4a0c:	f3 01       	movw	r30, r6
    4a0e:	40 81       	ld	r20, Z
    4a10:	51 81       	ldd	r21, Z+1	; 0x01
    4a12:	62 81       	ldd	r22, Z+2	; 0x02
    4a14:	73 81       	ldd	r23, Z+3	; 0x03
    4a16:	c4 16       	cp	r12, r20
    4a18:	d5 06       	cpc	r13, r21
    4a1a:	e6 06       	cpc	r14, r22
    4a1c:	f7 06       	cpc	r15, r23
    4a1e:	09 f0       	breq	.+2      	; 0x4a22 <tuple_process+0x9d4>
    4a20:	b2 c1       	rjmp	.+868    	; 0x4d86 <tuple_process+0xd38>
    4a22:	ae c1       	rjmp	.+860    	; 0x4d80 <tuple_process+0xd32>
	case OP_EQI: *dest = (MELD_INT(arg1) == MELD_INT(arg2)); break;
    4a24:	81 e0       	ldi	r24, 0x01	; 1
    4a26:	90 e0       	ldi	r25, 0x00	; 0
    4a28:	a0 e0       	ldi	r26, 0x00	; 0
    4a2a:	b0 e0       	ldi	r27, 0x00	; 0
    4a2c:	f7 01       	movw	r30, r14
    4a2e:	c0 80       	ld	r12, Z
    4a30:	d1 80       	ldd	r13, Z+1	; 0x01
    4a32:	e2 80       	ldd	r14, Z+2	; 0x02
    4a34:	f3 80       	ldd	r15, Z+3	; 0x03
    4a36:	f3 01       	movw	r30, r6
    4a38:	40 81       	ld	r20, Z
    4a3a:	51 81       	ldd	r21, Z+1	; 0x01
    4a3c:	62 81       	ldd	r22, Z+2	; 0x02
    4a3e:	73 81       	ldd	r23, Z+3	; 0x03
    4a40:	c4 16       	cp	r12, r20
    4a42:	d5 06       	cpc	r13, r21
    4a44:	e6 06       	cpc	r14, r22
    4a46:	f7 06       	cpc	r15, r23
    4a48:	09 f4       	brne	.+2      	; 0x4a4c <tuple_process+0x9fe>
    4a4a:	9d c1       	rjmp	.+826    	; 0x4d86 <tuple_process+0xd38>
    4a4c:	99 c1       	rjmp	.+818    	; 0x4d80 <tuple_process+0xd32>
	case OP_LESSI: *dest = (MELD_INT(arg1) < MELD_INT(arg2)); break;
    4a4e:	81 e0       	ldi	r24, 0x01	; 1
    4a50:	90 e0       	ldi	r25, 0x00	; 0
    4a52:	a0 e0       	ldi	r26, 0x00	; 0
    4a54:	b0 e0       	ldi	r27, 0x00	; 0
    4a56:	f7 01       	movw	r30, r14
    4a58:	c0 80       	ld	r12, Z
    4a5a:	d1 80       	ldd	r13, Z+1	; 0x01
    4a5c:	e2 80       	ldd	r14, Z+2	; 0x02
    4a5e:	f3 80       	ldd	r15, Z+3	; 0x03
    4a60:	f3 01       	movw	r30, r6
    4a62:	40 81       	ld	r20, Z
    4a64:	51 81       	ldd	r21, Z+1	; 0x01
    4a66:	62 81       	ldd	r22, Z+2	; 0x02
    4a68:	73 81       	ldd	r23, Z+3	; 0x03
    4a6a:	c4 16       	cp	r12, r20
    4a6c:	d5 06       	cpc	r13, r21
    4a6e:	e6 06       	cpc	r14, r22
    4a70:	f7 06       	cpc	r15, r23
    4a72:	0c f4       	brge	.+2      	; 0x4a76 <tuple_process+0xa28>
    4a74:	88 c1       	rjmp	.+784    	; 0x4d86 <tuple_process+0xd38>
    4a76:	84 c1       	rjmp	.+776    	; 0x4d80 <tuple_process+0xd32>
	case OP_LESSEQI: *dest = (MELD_INT(arg1) <= MELD_INT(arg2)); break;
    4a78:	81 e0       	ldi	r24, 0x01	; 1
    4a7a:	90 e0       	ldi	r25, 0x00	; 0
    4a7c:	a0 e0       	ldi	r26, 0x00	; 0
    4a7e:	b0 e0       	ldi	r27, 0x00	; 0
    4a80:	f7 01       	movw	r30, r14
    4a82:	c0 80       	ld	r12, Z
    4a84:	d1 80       	ldd	r13, Z+1	; 0x01
    4a86:	e2 80       	ldd	r14, Z+2	; 0x02
    4a88:	f3 80       	ldd	r15, Z+3	; 0x03
    4a8a:	f3 01       	movw	r30, r6
    4a8c:	40 81       	ld	r20, Z
    4a8e:	51 81       	ldd	r21, Z+1	; 0x01
    4a90:	62 81       	ldd	r22, Z+2	; 0x02
    4a92:	73 81       	ldd	r23, Z+3	; 0x03
    4a94:	4c 15       	cp	r20, r12
    4a96:	5d 05       	cpc	r21, r13
    4a98:	6e 05       	cpc	r22, r14
    4a9a:	7f 05       	cpc	r23, r15
    4a9c:	0c f0       	brlt	.+2      	; 0x4aa0 <tuple_process+0xa52>
    4a9e:	73 c1       	rjmp	.+742    	; 0x4d86 <tuple_process+0xd38>
    4aa0:	6f c1       	rjmp	.+734    	; 0x4d80 <tuple_process+0xd32>
	case OP_GREATERI: *dest = (MELD_INT(arg1) > MELD_INT(arg2)); break;
    4aa2:	81 e0       	ldi	r24, 0x01	; 1
    4aa4:	90 e0       	ldi	r25, 0x00	; 0
    4aa6:	a0 e0       	ldi	r26, 0x00	; 0
    4aa8:	b0 e0       	ldi	r27, 0x00	; 0
    4aaa:	f7 01       	movw	r30, r14
    4aac:	c0 80       	ld	r12, Z
    4aae:	d1 80       	ldd	r13, Z+1	; 0x01
    4ab0:	e2 80       	ldd	r14, Z+2	; 0x02
    4ab2:	f3 80       	ldd	r15, Z+3	; 0x03
    4ab4:	f3 01       	movw	r30, r6
    4ab6:	40 81       	ld	r20, Z
    4ab8:	51 81       	ldd	r21, Z+1	; 0x01
    4aba:	62 81       	ldd	r22, Z+2	; 0x02
    4abc:	73 81       	ldd	r23, Z+3	; 0x03
    4abe:	4c 15       	cp	r20, r12
    4ac0:	5d 05       	cpc	r21, r13
    4ac2:	6e 05       	cpc	r22, r14
    4ac4:	7f 05       	cpc	r23, r15
    4ac6:	0c f4       	brge	.+2      	; 0x4aca <tuple_process+0xa7c>
    4ac8:	5e c1       	rjmp	.+700    	; 0x4d86 <tuple_process+0xd38>
    4aca:	5a c1       	rjmp	.+692    	; 0x4d80 <tuple_process+0xd32>
	case OP_GREATEREQI: *dest = (MELD_INT(arg1) >= MELD_INT(arg2)); break;
    4acc:	81 e0       	ldi	r24, 0x01	; 1
    4ace:	90 e0       	ldi	r25, 0x00	; 0
    4ad0:	a0 e0       	ldi	r26, 0x00	; 0
    4ad2:	b0 e0       	ldi	r27, 0x00	; 0
    4ad4:	f7 01       	movw	r30, r14
    4ad6:	c0 80       	ld	r12, Z
    4ad8:	d1 80       	ldd	r13, Z+1	; 0x01
    4ada:	e2 80       	ldd	r14, Z+2	; 0x02
    4adc:	f3 80       	ldd	r15, Z+3	; 0x03
    4ade:	f3 01       	movw	r30, r6
    4ae0:	40 81       	ld	r20, Z
    4ae2:	51 81       	ldd	r21, Z+1	; 0x01
    4ae4:	62 81       	ldd	r22, Z+2	; 0x02
    4ae6:	73 81       	ldd	r23, Z+3	; 0x03
    4ae8:	c4 16       	cp	r12, r20
    4aea:	d5 06       	cpc	r13, r21
    4aec:	e6 06       	cpc	r14, r22
    4aee:	f7 06       	cpc	r15, r23
    4af0:	0c f0       	brlt	.+2      	; 0x4af4 <tuple_process+0xaa6>
    4af2:	49 c1       	rjmp	.+658    	; 0x4d86 <tuple_process+0xd38>
    4af4:	45 c1       	rjmp	.+650    	; 0x4d80 <tuple_process+0xd32>
	case OP_MODI: MELD_INT(dest) = (MELD_INT(arg1) % MELD_INT(arg2)); break;
    4af6:	d7 01       	movw	r26, r14
    4af8:	6d 91       	ld	r22, X+
    4afa:	7d 91       	ld	r23, X+
    4afc:	8d 91       	ld	r24, X+
    4afe:	9c 91       	ld	r25, X
    4b00:	f3 01       	movw	r30, r6
    4b02:	20 81       	ld	r18, Z
    4b04:	31 81       	ldd	r19, Z+1	; 0x01
    4b06:	42 81       	ldd	r20, Z+2	; 0x02
    4b08:	53 81       	ldd	r21, Z+3	; 0x03
    4b0a:	0e 94 4d 3b 	call	0x769a	; 0x769a <__divmodsi4>
    4b0e:	2a c0       	rjmp	.+84     	; 0x4b64 <tuple_process+0xb16>
	case OP_PLUSI: MELD_INT(dest) = (MELD_INT(arg1) + MELD_INT(arg2)); break;
    4b10:	f7 01       	movw	r30, r14
    4b12:	80 81       	ld	r24, Z
    4b14:	91 81       	ldd	r25, Z+1	; 0x01
    4b16:	a2 81       	ldd	r26, Z+2	; 0x02
    4b18:	b3 81       	ldd	r27, Z+3	; 0x03
    4b1a:	f3 01       	movw	r30, r6
    4b1c:	40 81       	ld	r20, Z
    4b1e:	51 81       	ldd	r21, Z+1	; 0x01
    4b20:	62 81       	ldd	r22, Z+2	; 0x02
    4b22:	73 81       	ldd	r23, Z+3	; 0x03
    4b24:	84 0f       	add	r24, r20
    4b26:	95 1f       	adc	r25, r21
    4b28:	a6 1f       	adc	r26, r22
    4b2a:	b7 1f       	adc	r27, r23
    4b2c:	2c c1       	rjmp	.+600    	; 0x4d86 <tuple_process+0xd38>
	case OP_MINUSI: MELD_INT(dest) = (MELD_INT(arg1) - MELD_INT(arg2)); break;
    4b2e:	f7 01       	movw	r30, r14
    4b30:	80 81       	ld	r24, Z
    4b32:	91 81       	ldd	r25, Z+1	; 0x01
    4b34:	a2 81       	ldd	r26, Z+2	; 0x02
    4b36:	b3 81       	ldd	r27, Z+3	; 0x03
    4b38:	f3 01       	movw	r30, r6
    4b3a:	40 81       	ld	r20, Z
    4b3c:	51 81       	ldd	r21, Z+1	; 0x01
    4b3e:	62 81       	ldd	r22, Z+2	; 0x02
    4b40:	73 81       	ldd	r23, Z+3	; 0x03
    4b42:	84 1b       	sub	r24, r20
    4b44:	95 0b       	sbc	r25, r21
    4b46:	a6 0b       	sbc	r26, r22
    4b48:	b7 0b       	sbc	r27, r23
    4b4a:	1d c1       	rjmp	.+570    	; 0x4d86 <tuple_process+0xd38>
	case OP_TIMESI: MELD_INT(dest) = (MELD_INT(arg1) * MELD_INT(arg2)); break;
    4b4c:	d7 01       	movw	r26, r14
    4b4e:	2d 91       	ld	r18, X+
    4b50:	3d 91       	ld	r19, X+
    4b52:	4d 91       	ld	r20, X+
    4b54:	5c 91       	ld	r21, X
    4b56:	f3 01       	movw	r30, r6
    4b58:	60 81       	ld	r22, Z
    4b5a:	71 81       	ldd	r23, Z+1	; 0x01
    4b5c:	82 81       	ldd	r24, Z+2	; 0x02
    4b5e:	93 81       	ldd	r25, Z+3	; 0x03
    4b60:	0e 94 1b 3b 	call	0x7636	; 0x7636 <__mulsi3>
    4b64:	d8 01       	movw	r26, r16
    4b66:	6d 93       	st	X+, r22
    4b68:	7d 93       	st	X+, r23
    4b6a:	8d 93       	st	X+, r24
    4b6c:	9c 93       	st	X, r25
    4b6e:	13 97       	sbiw	r26, 0x03	; 3
    4b70:	0f c1       	rjmp	.+542    	; 0x4d90 <tuple_process+0xd42>
	case OP_DIVI: MELD_INT(dest) = (MELD_INT(arg1) / MELD_INT(arg2)); break;
    4b72:	f7 01       	movw	r30, r14
    4b74:	60 81       	ld	r22, Z
    4b76:	71 81       	ldd	r23, Z+1	; 0x01
    4b78:	82 81       	ldd	r24, Z+2	; 0x02
    4b7a:	93 81       	ldd	r25, Z+3	; 0x03
    4b7c:	d3 01       	movw	r26, r6
    4b7e:	2d 91       	ld	r18, X+
    4b80:	3d 91       	ld	r19, X+
    4b82:	4d 91       	ld	r20, X+
    4b84:	5c 91       	ld	r21, X
    4b86:	0e 94 4d 3b 	call	0x769a	; 0x769a <__divmodsi4>
    4b8a:	f8 01       	movw	r30, r16
    4b8c:	20 83       	st	Z, r18
    4b8e:	31 83       	std	Z+1, r19	; 0x01
    4b90:	42 83       	std	Z+2, r20	; 0x02
    4b92:	53 83       	std	Z+3, r21	; 0x03
    4b94:	fd c0       	rjmp	.+506    	; 0x4d90 <tuple_process+0xd42>
	case OP_NEQF: *dest = (MELD_FLOAT(arg1) != MELD_FLOAT(arg2)); break;
    4b96:	81 2c       	mov	r8, r1
    4b98:	91 2c       	mov	r9, r1
    4b9a:	54 01       	movw	r10, r8
    4b9c:	83 94       	inc	r8
    4b9e:	d3 01       	movw	r26, r6
    4ba0:	2d 91       	ld	r18, X+
    4ba2:	3d 91       	ld	r19, X+
    4ba4:	4d 91       	ld	r20, X+
    4ba6:	5c 91       	ld	r21, X
    4ba8:	f7 01       	movw	r30, r14
    4baa:	60 81       	ld	r22, Z
    4bac:	71 81       	ldd	r23, Z+1	; 0x01
    4bae:	82 81       	ldd	r24, Z+2	; 0x02
    4bb0:	93 81       	ldd	r25, Z+3	; 0x03
    4bb2:	0e 94 27 39 	call	0x724e	; 0x724e <__cmpsf2>
    4bb6:	81 11       	cpse	r24, r1
    4bb8:	50 c0       	rjmp	.+160    	; 0x4c5a <tuple_process+0xc0c>
    4bba:	4c c0       	rjmp	.+152    	; 0x4c54 <tuple_process+0xc06>
	case OP_EQF: *dest = (MELD_FLOAT(arg1) == MELD_FLOAT(arg2)); break;
    4bbc:	81 2c       	mov	r8, r1
    4bbe:	91 2c       	mov	r9, r1
    4bc0:	54 01       	movw	r10, r8
    4bc2:	83 94       	inc	r8
    4bc4:	f3 01       	movw	r30, r6
    4bc6:	20 81       	ld	r18, Z
    4bc8:	31 81       	ldd	r19, Z+1	; 0x01
    4bca:	42 81       	ldd	r20, Z+2	; 0x02
    4bcc:	53 81       	ldd	r21, Z+3	; 0x03
    4bce:	d7 01       	movw	r26, r14
    4bd0:	6d 91       	ld	r22, X+
    4bd2:	7d 91       	ld	r23, X+
    4bd4:	8d 91       	ld	r24, X+
    4bd6:	9c 91       	ld	r25, X
    4bd8:	0e 94 27 39 	call	0x724e	; 0x724e <__cmpsf2>
    4bdc:	88 23       	and	r24, r24
    4bde:	09 f4       	brne	.+2      	; 0x4be2 <tuple_process+0xb94>
    4be0:	58 c0       	rjmp	.+176    	; 0x4c92 <tuple_process+0xc44>
    4be2:	54 c0       	rjmp	.+168    	; 0x4c8c <tuple_process+0xc3e>
	case OP_LESSF: *dest = (MELD_FLOAT(arg1) < MELD_FLOAT(arg2)); break;
    4be4:	81 2c       	mov	r8, r1
    4be6:	91 2c       	mov	r9, r1
    4be8:	54 01       	movw	r10, r8
    4bea:	83 94       	inc	r8
    4bec:	d3 01       	movw	r26, r6
    4bee:	2d 91       	ld	r18, X+
    4bf0:	3d 91       	ld	r19, X+
    4bf2:	4d 91       	ld	r20, X+
    4bf4:	5c 91       	ld	r21, X
    4bf6:	f7 01       	movw	r30, r14
    4bf8:	60 81       	ld	r22, Z
    4bfa:	71 81       	ldd	r23, Z+1	; 0x01
    4bfc:	82 81       	ldd	r24, Z+2	; 0x02
    4bfe:	93 81       	ldd	r25, Z+3	; 0x03
    4c00:	0e 94 27 39 	call	0x724e	; 0x724e <__cmpsf2>
    4c04:	87 fd       	sbrc	r24, 7
    4c06:	29 c0       	rjmp	.+82     	; 0x4c5a <tuple_process+0xc0c>
    4c08:	25 c0       	rjmp	.+74     	; 0x4c54 <tuple_process+0xc06>
	case OP_LESSEQF: *dest = (MELD_FLOAT(arg1) <= MELD_FLOAT(arg2)); break;
    4c0a:	81 2c       	mov	r8, r1
    4c0c:	91 2c       	mov	r9, r1
    4c0e:	54 01       	movw	r10, r8
    4c10:	83 94       	inc	r8
    4c12:	f3 01       	movw	r30, r6
    4c14:	20 81       	ld	r18, Z
    4c16:	31 81       	ldd	r19, Z+1	; 0x01
    4c18:	42 81       	ldd	r20, Z+2	; 0x02
    4c1a:	53 81       	ldd	r21, Z+3	; 0x03
    4c1c:	d7 01       	movw	r26, r14
    4c1e:	6d 91       	ld	r22, X+
    4c20:	7d 91       	ld	r23, X+
    4c22:	8d 91       	ld	r24, X+
    4c24:	9c 91       	ld	r25, X
    4c26:	0e 94 27 39 	call	0x724e	; 0x724e <__cmpsf2>
    4c2a:	18 16       	cp	r1, r24
    4c2c:	94 f5       	brge	.+100    	; 0x4c92 <tuple_process+0xc44>
    4c2e:	2e c0       	rjmp	.+92     	; 0x4c8c <tuple_process+0xc3e>
	case OP_GREATERF: *dest = (MELD_FLOAT(arg1) > MELD_FLOAT(arg2)); break;
    4c30:	81 2c       	mov	r8, r1
    4c32:	91 2c       	mov	r9, r1
    4c34:	54 01       	movw	r10, r8
    4c36:	83 94       	inc	r8
    4c38:	d3 01       	movw	r26, r6
    4c3a:	2d 91       	ld	r18, X+
    4c3c:	3d 91       	ld	r19, X+
    4c3e:	4d 91       	ld	r20, X+
    4c40:	5c 91       	ld	r21, X
    4c42:	f7 01       	movw	r30, r14
    4c44:	60 81       	ld	r22, Z
    4c46:	71 81       	ldd	r23, Z+1	; 0x01
    4c48:	82 81       	ldd	r24, Z+2	; 0x02
    4c4a:	93 81       	ldd	r25, Z+3	; 0x03
    4c4c:	0e 94 a1 3a 	call	0x7542	; 0x7542 <__gesf2>
    4c50:	18 16       	cp	r1, r24
    4c52:	1c f0       	brlt	.+6      	; 0x4c5a <tuple_process+0xc0c>
    4c54:	81 2c       	mov	r8, r1
    4c56:	91 2c       	mov	r9, r1
    4c58:	54 01       	movw	r10, r8
    4c5a:	d8 01       	movw	r26, r16
    4c5c:	8d 92       	st	X+, r8
    4c5e:	9d 92       	st	X+, r9
    4c60:	ad 92       	st	X+, r10
    4c62:	bc 92       	st	X, r11
    4c64:	13 97       	sbiw	r26, 0x03	; 3
    4c66:	94 c0       	rjmp	.+296    	; 0x4d90 <tuple_process+0xd42>
	case OP_GREATEREQF: *dest = (MELD_FLOAT(arg1) >= MELD_FLOAT(arg2)); break;
    4c68:	81 2c       	mov	r8, r1
    4c6a:	91 2c       	mov	r9, r1
    4c6c:	54 01       	movw	r10, r8
    4c6e:	83 94       	inc	r8
    4c70:	f3 01       	movw	r30, r6
    4c72:	20 81       	ld	r18, Z
    4c74:	31 81       	ldd	r19, Z+1	; 0x01
    4c76:	42 81       	ldd	r20, Z+2	; 0x02
    4c78:	53 81       	ldd	r21, Z+3	; 0x03
    4c7a:	d7 01       	movw	r26, r14
    4c7c:	6d 91       	ld	r22, X+
    4c7e:	7d 91       	ld	r23, X+
    4c80:	8d 91       	ld	r24, X+
    4c82:	9c 91       	ld	r25, X
    4c84:	0e 94 a1 3a 	call	0x7542	; 0x7542 <__gesf2>
    4c88:	87 ff       	sbrs	r24, 7
    4c8a:	03 c0       	rjmp	.+6      	; 0x4c92 <tuple_process+0xc44>
    4c8c:	81 2c       	mov	r8, r1
    4c8e:	91 2c       	mov	r9, r1
    4c90:	54 01       	movw	r10, r8
    4c92:	f8 01       	movw	r30, r16
    4c94:	80 82       	st	Z, r8
    4c96:	91 82       	std	Z+1, r9	; 0x01
    4c98:	a2 82       	std	Z+2, r10	; 0x02
    4c9a:	b3 82       	std	Z+3, r11	; 0x03
    4c9c:	79 c0       	rjmp	.+242    	; 0x4d90 <tuple_process+0xd42>
	case OP_MODF: MELD_FLOAT(dest) = fmod(MELD_FLOAT(arg1), MELD_FLOAT(arg2)); break;
    4c9e:	d3 01       	movw	r26, r6
    4ca0:	2d 91       	ld	r18, X+
    4ca2:	3d 91       	ld	r19, X+
    4ca4:	4d 91       	ld	r20, X+
    4ca6:	5c 91       	ld	r21, X
    4ca8:	f7 01       	movw	r30, r14
    4caa:	60 81       	ld	r22, Z
    4cac:	71 81       	ldd	r23, Z+1	; 0x01
    4cae:	82 81       	ldd	r24, Z+2	; 0x02
    4cb0:	93 81       	ldd	r25, Z+3	; 0x03
    4cb2:	0e 94 d7 39 	call	0x73ae	; 0x73ae <fmod>
    4cb6:	46 2f       	mov	r20, r22
    4cb8:	57 2f       	mov	r21, r23
    4cba:	68 2f       	mov	r22, r24
    4cbc:	79 2f       	mov	r23, r25
    4cbe:	d8 01       	movw	r26, r16
    4cc0:	4d 93       	st	X+, r20
    4cc2:	5d 93       	st	X+, r21
    4cc4:	6d 93       	st	X+, r22
    4cc6:	7c 93       	st	X, r23
    4cc8:	13 97       	sbiw	r26, 0x03	; 3
    4cca:	62 c0       	rjmp	.+196    	; 0x4d90 <tuple_process+0xd42>
	case OP_PLUSF: MELD_FLOAT(dest) = (MELD_FLOAT(arg1) + MELD_FLOAT(arg2)); break;
    4ccc:	f3 01       	movw	r30, r6
    4cce:	20 81       	ld	r18, Z
    4cd0:	31 81       	ldd	r19, Z+1	; 0x01
    4cd2:	42 81       	ldd	r20, Z+2	; 0x02
    4cd4:	53 81       	ldd	r21, Z+3	; 0x03
    4cd6:	d7 01       	movw	r26, r14
    4cd8:	6d 91       	ld	r22, X+
    4cda:	7d 91       	ld	r23, X+
    4cdc:	8d 91       	ld	r24, X+
    4cde:	9c 91       	ld	r25, X
    4ce0:	0e 94 c3 38 	call	0x7186	; 0x7186 <__addsf3>
    4ce4:	19 c0       	rjmp	.+50     	; 0x4d18 <tuple_process+0xcca>
	case OP_MINUSF: MELD_FLOAT(dest) = (MELD_FLOAT(arg1) - MELD_FLOAT(arg2)); break;
    4ce6:	d3 01       	movw	r26, r6
    4ce8:	2d 91       	ld	r18, X+
    4cea:	3d 91       	ld	r19, X+
    4cec:	4d 91       	ld	r20, X+
    4cee:	5c 91       	ld	r21, X
    4cf0:	f7 01       	movw	r30, r14
    4cf2:	60 81       	ld	r22, Z
    4cf4:	71 81       	ldd	r23, Z+1	; 0x01
    4cf6:	82 81       	ldd	r24, Z+2	; 0x02
    4cf8:	93 81       	ldd	r25, Z+3	; 0x03
    4cfa:	0e 94 c2 38 	call	0x7184	; 0x7184 <__subsf3>
    4cfe:	1e c0       	rjmp	.+60     	; 0x4d3c <tuple_process+0xcee>
	case OP_TIMESF: MELD_FLOAT(dest) = (MELD_FLOAT(arg1) * MELD_FLOAT(arg2)); break;
    4d00:	f3 01       	movw	r30, r6
    4d02:	20 81       	ld	r18, Z
    4d04:	31 81       	ldd	r19, Z+1	; 0x01
    4d06:	42 81       	ldd	r20, Z+2	; 0x02
    4d08:	53 81       	ldd	r21, Z+3	; 0x03
    4d0a:	d7 01       	movw	r26, r14
    4d0c:	6d 91       	ld	r22, X+
    4d0e:	7d 91       	ld	r23, X+
    4d10:	8d 91       	ld	r24, X+
    4d12:	9c 91       	ld	r25, X
    4d14:	0e 94 a5 3a 	call	0x754a	; 0x754a <__mulsf3>
    4d18:	f8 01       	movw	r30, r16
    4d1a:	60 83       	st	Z, r22
    4d1c:	71 83       	std	Z+1, r23	; 0x01
    4d1e:	82 83       	std	Z+2, r24	; 0x02
    4d20:	93 83       	std	Z+3, r25	; 0x03
    4d22:	36 c0       	rjmp	.+108    	; 0x4d90 <tuple_process+0xd42>
	case OP_DIVF: MELD_FLOAT(dest) = (MELD_FLOAT(arg1) / MELD_FLOAT(arg2)); break;
    4d24:	d3 01       	movw	r26, r6
    4d26:	2d 91       	ld	r18, X+
    4d28:	3d 91       	ld	r19, X+
    4d2a:	4d 91       	ld	r20, X+
    4d2c:	5c 91       	ld	r21, X
    4d2e:	f7 01       	movw	r30, r14
    4d30:	60 81       	ld	r22, Z
    4d32:	71 81       	ldd	r23, Z+1	; 0x01
    4d34:	82 81       	ldd	r24, Z+2	; 0x02
    4d36:	93 81       	ldd	r25, Z+3	; 0x03
    4d38:	0e 94 2b 39 	call	0x7256	; 0x7256 <__divsf3>
    4d3c:	d8 01       	movw	r26, r16
    4d3e:	6d 93       	st	X+, r22
    4d40:	7d 93       	st	X+, r23
    4d42:	8d 93       	st	X+, r24
    4d44:	9c 93       	st	X, r25
    4d46:	13 97       	sbiw	r26, 0x03	; 3
    4d48:	23 c0       	rjmp	.+70     	; 0x4d90 <tuple_process+0xd42>
	case OP_NEQA: *dest = (MELD_PTR(arg1) != MELD_PTR(arg2)); break;
    4d4a:	81 e0       	ldi	r24, 0x01	; 1
    4d4c:	90 e0       	ldi	r25, 0x00	; 0
    4d4e:	a0 e0       	ldi	r26, 0x00	; 0
    4d50:	b0 e0       	ldi	r27, 0x00	; 0
    4d52:	f7 01       	movw	r30, r14
    4d54:	40 81       	ld	r20, Z
    4d56:	51 81       	ldd	r21, Z+1	; 0x01
    4d58:	f3 01       	movw	r30, r6
    4d5a:	20 81       	ld	r18, Z
    4d5c:	31 81       	ldd	r19, Z+1	; 0x01
    4d5e:	42 17       	cp	r20, r18
    4d60:	53 07       	cpc	r21, r19
    4d62:	89 f4       	brne	.+34     	; 0x4d86 <tuple_process+0xd38>
    4d64:	0d c0       	rjmp	.+26     	; 0x4d80 <tuple_process+0xd32>
	case OP_EQA: *dest = (MELD_PTR(arg1) == MELD_PTR(arg2)); break;
    4d66:	81 e0       	ldi	r24, 0x01	; 1
    4d68:	90 e0       	ldi	r25, 0x00	; 0
    4d6a:	a0 e0       	ldi	r26, 0x00	; 0
    4d6c:	b0 e0       	ldi	r27, 0x00	; 0
    4d6e:	f7 01       	movw	r30, r14
    4d70:	40 81       	ld	r20, Z
    4d72:	51 81       	ldd	r21, Z+1	; 0x01
    4d74:	f3 01       	movw	r30, r6
    4d76:	20 81       	ld	r18, Z
    4d78:	31 81       	ldd	r19, Z+1	; 0x01
    4d7a:	42 17       	cp	r20, r18
    4d7c:	53 07       	cpc	r21, r19
    4d7e:	19 f0       	breq	.+6      	; 0x4d86 <tuple_process+0xd38>
    4d80:	80 e0       	ldi	r24, 0x00	; 0
    4d82:	90 e0       	ldi	r25, 0x00	; 0
    4d84:	dc 01       	movw	r26, r24
    4d86:	f8 01       	movw	r30, r16
    4d88:	80 83       	st	Z, r24
    4d8a:	91 83       	std	Z+1, r25	; 0x01
    4d8c:	a2 83       	std	Z+2, r26	; 0x02
    4d8e:	b3 83       	std	Z+3, r27	; 0x03
	}
	// Advance the program counter past the send instruction
	pc = new_pc;
    4d90:	a9 80       	ldd	r10, Y+1	; 0x01
    4d92:	ba 80       	ldd	r11, Y+2	; 0x02
    4d94:	80 c9       	rjmp	.-3328   	; 0x4096 <tuple_process+0x48>
	break;
      }

    default:
      fprintf(stderr, "INVALID INSTRUCTION %u", *pc);
    4d96:	1f 92       	push	r1
    4d98:	ef 93       	push	r30
    4d9a:	22 e3       	ldi	r18, 0x32	; 50
    4d9c:	36 e2       	ldi	r19, 0x26	; 38
    4d9e:	3f 93       	push	r19
    4da0:	2f 93       	push	r18
    4da2:	80 91 88 2f 	lds	r24, 0x2F88
    4da6:	8f 93       	push	r24
    4da8:	80 91 87 2f 	lds	r24, 0x2F87
    4dac:	8f 93       	push	r24
    4dae:	0e 94 45 3e 	call	0x7c8a	; 0x7c8a <fprintf>
      assert(0);
    4db2:	43 eb       	ldi	r20, 0xB3	; 179
    4db4:	55 e2       	ldi	r21, 0x25	; 37
    4db6:	6c e4       	ldi	r22, 0x4C	; 76
    4db8:	75 e0       	ldi	r23, 0x05	; 5
    4dba:	85 eb       	ldi	r24, 0xB5	; 181
    4dbc:	95 e2       	ldi	r25, 0x25	; 37
    4dbe:	0e 94 e5 19 	call	0x33ca	; 0x33ca <__myassert>
      break;
    4dc2:	0f 90       	pop	r0
    4dc4:	0f 90       	pop	r0
    4dc6:	0f 90       	pop	r0
    4dc8:	0f 90       	pop	r0
    4dca:	0f 90       	pop	r0
    4dcc:	0f 90       	pop	r0
    4dce:	63 c9       	rjmp	.-3386   	; 0x4096 <tuple_process+0x48>

      case 0x00: // RETURN
#ifdef DEBUG_INSTRS
	printf("RETURN\n");
#endif
	return RET_RET;
    4dd0:	20 e0       	ldi	r18, 0x00	; 0
    4dd2:	30 e0       	ldi	r19, 0x00	; 0
      break;
    }
  }

  return RET_RET;
}
    4dd4:	c9 01       	movw	r24, r18
    4dd6:	aa 89       	ldd	r26, Y+18	; 0x12
    4dd8:	bb 89       	ldd	r27, Y+19	; 0x13
    4dda:	ad bf       	out	0x3d, r26	; 61
    4ddc:	be bf       	out	0x3e, r27	; 62
    4dde:	66 96       	adiw	r28, 0x16	; 22
    4de0:	cd bf       	out	0x3d, r28	; 61
    4de2:	de bf       	out	0x3e, r29	; 62
    4de4:	df 91       	pop	r29
    4de6:	cf 91       	pop	r28
    4de8:	1f 91       	pop	r17
    4dea:	0f 91       	pop	r16
    4dec:	ff 90       	pop	r15
    4dee:	ef 90       	pop	r14
    4df0:	df 90       	pop	r13
    4df2:	cf 90       	pop	r12
    4df4:	bf 90       	pop	r11
    4df6:	af 90       	pop	r10
    4df8:	9f 90       	pop	r9
    4dfa:	8f 90       	pop	r8
    4dfc:	7f 90       	pop	r7
    4dfe:	6f 90       	pop	r6
    4e00:	5f 90       	pop	r5
    4e02:	4f 90       	pop	r4
    4e04:	3f 90       	pop	r3
    4e06:	2f 90       	pop	r2
    4e08:	08 95       	ret

00004e0a <aggregate_recalc>:
}

static inline
void aggregate_recalc(tuple_entry *agg, Register *reg,
		      bool first_run)
{
    4e0a:	2f 92       	push	r2
    4e0c:	3f 92       	push	r3
    4e0e:	4f 92       	push	r4
    4e10:	5f 92       	push	r5
    4e12:	6f 92       	push	r6
    4e14:	7f 92       	push	r7
    4e16:	8f 92       	push	r8
    4e18:	9f 92       	push	r9
    4e1a:	af 92       	push	r10
    4e1c:	bf 92       	push	r11
    4e1e:	cf 92       	push	r12
    4e20:	df 92       	push	r13
    4e22:	ef 92       	push	r14
    4e24:	ff 92       	push	r15
    4e26:	0f 93       	push	r16
    4e28:	1f 93       	push	r17
    4e2a:	cf 93       	push	r28
    4e2c:	df 93       	push	r29
    4e2e:	cd b7       	in	r28, 0x3d	; 61
    4e30:	de b7       	in	r29, 0x3e	; 62
    4e32:	60 97       	sbiw	r28, 0x10	; 16
    4e34:	cd bf       	out	0x3d, r28	; 61
    4e36:	de bf       	out	0x3e, r29	; 62
    4e38:	4c 01       	movw	r8, r24
    4e3a:	6a 87       	std	Y+10, r22	; 0x0a
    4e3c:	7b 87       	std	Y+11, r23	; 0x0b
    4e3e:	4c 87       	std	Y+12, r20	; 0x0c
  tuple_type type = TUPLE_TYPE(agg->tuple);
    4e40:	dc 01       	movw	r26, r24
    4e42:	14 96       	adiw	r26, 0x04	; 4
    4e44:	ed 91       	ld	r30, X+
    4e46:	fc 91       	ld	r31, X
    4e48:	15 97       	sbiw	r26, 0x05	; 5
    4e4a:	40 81       	ld	r20, Z
    4e4c:	50 e0       	ldi	r21, 0x00	; 0

  tuple_entry *cur;
	
  int agg_type = AGG_AGG(TYPE_AGGREGATE(type));
    4e4e:	fa 01       	movw	r30, r20
    4e50:	ea 5a       	subi	r30, 0xAA	; 170
    4e52:	ff 4d       	sbci	r31, 0xDF	; 223
    4e54:	a1 80       	ldd	r10, Z+1	; 0x01
    4e56:	ea 2d       	mov	r30, r10
    4e58:	f0 e0       	ldi	r31, 0x00	; 0
    4e5a:	ef 83       	std	Y+7, r30	; 0x07
    4e5c:	f8 87       	std	Y+8, r31	; 0x08
    4e5e:	e7 5a       	subi	r30, 0xA7	; 167
    4e60:	ff 4d       	sbci	r31, 0xDF	; 223
    4e62:	80 81       	ld	r24, Z
    4e64:	f8 2f       	mov	r31, r24
    4e66:	f2 95       	swap	r31
    4e68:	ff 70       	andi	r31, 0x0F	; 15
    4e6a:	f9 83       	std	Y+1, r31	; 0x01
  int agg_field = AGG_FIELD(TYPE_AGGREGATE(type));
    4e6c:	8f 70       	andi	r24, 0x0F	; 15
    4e6e:	89 87       	std	Y+9, r24	; 0x09
  tuple_queue *agg_queue = agg->records.agg_queue;
  tuple_entry *agg_list = agg_queue->head;
    4e70:	12 96       	adiw	r26, 0x02	; 2
    4e72:	ed 91       	ld	r30, X+
    4e74:	fc 91       	ld	r31, X
    4e76:	13 97       	sbiw	r26, 0x03	; 3
    4e78:	20 81       	ld	r18, Z
    4e7a:	31 81       	ldd	r19, Z+1	; 0x01
    4e7c:	2a 83       	std	Y+2, r18	; 0x02
    4e7e:	3b 83       	std	Y+3, r19	; 0x03
  tuple_t tuple = agg_list->tuple;
    4e80:	d9 01       	movw	r26, r18
    4e82:	14 96       	adiw	r26, 0x04	; 4
    4e84:	cd 90       	ld	r12, X+
    4e86:	dc 90       	ld	r13, X
    4e88:	15 97       	sbiw	r26, 0x05	; 5
  
  void* start = GET_TUPLE_FIELD(tuple, agg_field);
    4e8a:	80 91 3e 29 	lds	r24, 0x293E
    4e8e:	90 91 3f 29 	lds	r25, 0x293F
    4e92:	f6 01       	movw	r30, r12
    4e94:	20 81       	ld	r18, Z
    4e96:	f9 85       	ldd	r31, Y+9	; 0x09
    4e98:	6f 2e       	mov	r6, r31
    4e9a:	71 2c       	mov	r7, r1
    4e9c:	66 0c       	add	r6, r6
    4e9e:	77 1c       	adc	r7, r7
    4ea0:	fc 01       	movw	r30, r24
    4ea2:	e2 0f       	add	r30, r18
    4ea4:	f1 1d       	adc	r31, r1
    4ea6:	e2 0f       	add	r30, r18
    4ea8:	f1 1d       	adc	r31, r1
    4eaa:	60 81       	ld	r22, Z
    4eac:	9c 01       	movw	r18, r24
    4eae:	26 0d       	add	r18, r6
    4eb0:	37 1d       	adc	r19, r7
    4eb2:	f9 01       	movw	r30, r18
    4eb4:	e6 0f       	add	r30, r22
    4eb6:	f1 1d       	adc	r31, r1
    4eb8:	01 81       	ldd	r16, Z+1	; 0x01
    4eba:	10 e0       	ldi	r17, 0x00	; 0
    4ebc:	0f 5f       	subi	r16, 0xFF	; 255
    4ebe:	1f 4f       	sbci	r17, 0xFF	; 255
    4ec0:	0c 0d       	add	r16, r12
    4ec2:	1d 1d       	adc	r17, r13

  /* make copy */
  size_t size = TYPE_ARG_SIZE(type, agg_field);
    4ec4:	7a 01       	movw	r14, r20
    4ec6:	ee 0c       	add	r14, r14
    4ec8:	ff 1c       	adc	r15, r15
    4eca:	fc 01       	movw	r30, r24
    4ecc:	ee 0d       	add	r30, r14
    4ece:	ff 1d       	adc	r31, r15
    4ed0:	80 81       	ld	r24, Z
    4ed2:	f9 01       	movw	r30, r18
    4ed4:	e8 0f       	add	r30, r24
    4ed6:	f1 1d       	adc	r31, r1
    4ed8:	20 81       	ld	r18, Z
    4eda:	2e 83       	std	Y+6, r18	; 0x06
  void* accumulator = malloc(size);
    4edc:	82 2f       	mov	r24, r18
    4ede:	90 e0       	ldi	r25, 0x00	; 0
    4ee0:	0e 94 a5 3b 	call	0x774a	; 0x774a <malloc>
    4ee4:	8d 87       	std	Y+13, r24	; 0x0d
    4ee6:	9e 87       	std	Y+14, r25	; 0x0e

  aggregate_seed(agg_type, accumulator, start, agg_list->records.count, size);
    4ee8:	aa 81       	ldd	r26, Y+2	; 0x02
    4eea:	bb 81       	ldd	r27, Y+3	; 0x03
    4eec:	12 96       	adiw	r26, 0x02	; 2
    4eee:	2d 90       	ld	r2, X+
    4ef0:	3c 90       	ld	r3, X
    4ef2:	13 97       	sbiw	r26, 0x03	; 3
}

static inline void
aggregate_seed(int agg_type, void *acc, void *start, int count, size_t size)
{
  switch(agg_type) {
    4ef4:	b9 81       	ldd	r27, Y+1	; 0x01
    4ef6:	b7 30       	cpi	r27, 0x07	; 7
    4ef8:	50 f4       	brcc	.+20     	; 0x4f0e <aggregate_recalc+0x104>
    4efa:	b5 30       	cpi	r27, 0x05	; 5
    4efc:	e8 f5       	brcc	.+122    	; 0x4f78 <aggregate_recalc+0x16e>
    4efe:	b4 30       	cpi	r27, 0x04	; 4
    4f00:	60 f5       	brcc	.+88     	; 0x4f5a <aggregate_recalc+0x150>
    4f02:	b2 30       	cpi	r27, 0x02	; 2
    4f04:	f0 f4       	brcc	.+60     	; 0x4f42 <aggregate_recalc+0x138>
    4f06:	b1 30       	cpi	r27, 0x01	; 1
    4f08:	09 f0       	breq	.+2      	; 0x4f0c <aggregate_recalc+0x102>
    4f0a:	ba c0       	rjmp	.+372    	; 0x5080 <aggregate_recalc+0x276>
    4f0c:	13 c0       	rjmp	.+38     	; 0x4f34 <aggregate_recalc+0x12a>
    4f0e:	e9 81       	ldd	r30, Y+1	; 0x01
    4f10:	e9 30       	cpi	r30, 0x09	; 9
    4f12:	09 f4       	brne	.+2      	; 0x4f16 <aggregate_recalc+0x10c>
    4f14:	5d c0       	rjmp	.+186    	; 0x4fd0 <aggregate_recalc+0x1c6>
    4f16:	30 f4       	brcc	.+12     	; 0x4f24 <aggregate_recalc+0x11a>
    4f18:	e7 30       	cpi	r30, 0x07	; 7
    4f1a:	d1 f1       	breq	.+116    	; 0x4f90 <aggregate_recalc+0x186>
    4f1c:	e8 30       	cpi	r30, 0x08	; 8
    4f1e:	09 f0       	breq	.+2      	; 0x4f22 <aggregate_recalc+0x118>
    4f20:	af c0       	rjmp	.+350    	; 0x5080 <aggregate_recalc+0x276>
    4f22:	4d c0       	rjmp	.+154    	; 0x4fbe <aggregate_recalc+0x1b4>
    4f24:	f9 81       	ldd	r31, Y+1	; 0x01
    4f26:	fa 30       	cpi	r31, 0x0A	; 10
    4f28:	09 f4       	brne	.+2      	; 0x4f2c <aggregate_recalc+0x122>
    4f2a:	60 c0       	rjmp	.+192    	; 0x4fec <aggregate_recalc+0x1e2>
    4f2c:	fb 30       	cpi	r31, 0x0B	; 11
    4f2e:	09 f0       	breq	.+2      	; 0x4f32 <aggregate_recalc+0x128>
    4f30:	a7 c0       	rjmp	.+334    	; 0x5080 <aggregate_recalc+0x276>
    4f32:	7e c0       	rjmp	.+252    	; 0x5030 <aggregate_recalc+0x226>
  case AGG_FIRST:
    memcpy(acc, start, size);
    4f34:	4e 81       	ldd	r20, Y+6	; 0x06
    4f36:	50 e0       	ldi	r21, 0x00	; 0
    4f38:	b8 01       	movw	r22, r16
    4f3a:	8d 85       	ldd	r24, Y+13	; 0x0d
    4f3c:	0e 94 2c 3e 	call	0x7c58	; 0x7c58 <memcpy>
    4f40:	a8 c0       	rjmp	.+336    	; 0x5092 <aggregate_recalc+0x288>
    return;
  case AGG_MIN_INT:
  case AGG_MAX_INT:
    MELD_INT(acc) = MELD_INT(start);
    4f42:	f8 01       	movw	r30, r16
    4f44:	80 81       	ld	r24, Z
    4f46:	91 81       	ldd	r25, Z+1	; 0x01
    4f48:	a2 81       	ldd	r26, Z+2	; 0x02
    4f4a:	b3 81       	ldd	r27, Z+3	; 0x03
    4f4c:	ed 85       	ldd	r30, Y+13	; 0x0d
    4f4e:	fe 85       	ldd	r31, Y+14	; 0x0e
    4f50:	80 83       	st	Z, r24
    4f52:	91 83       	std	Z+1, r25	; 0x01
    4f54:	a2 83       	std	Z+2, r26	; 0x02
    4f56:	b3 83       	std	Z+3, r27	; 0x03
    4f58:	9c c0       	rjmp	.+312    	; 0x5092 <aggregate_recalc+0x288>
    return;
  case AGG_SUM_INT:
    MELD_INT(acc) = MELD_INT(start) * count;
    4f5a:	d8 01       	movw	r26, r16
    4f5c:	2d 91       	ld	r18, X+
    4f5e:	3d 91       	ld	r19, X+
    4f60:	4d 91       	ld	r20, X+
    4f62:	5c 91       	ld	r21, X
    4f64:	d1 01       	movw	r26, r2
    4f66:	0e 94 13 3b 	call	0x7626	; 0x7626 <__mulshisi3>
    4f6a:	ed 85       	ldd	r30, Y+13	; 0x0d
    4f6c:	fe 85       	ldd	r31, Y+14	; 0x0e
    4f6e:	60 83       	st	Z, r22
    4f70:	71 83       	std	Z+1, r23	; 0x01
    4f72:	82 83       	std	Z+2, r24	; 0x02
    4f74:	93 83       	std	Z+3, r25	; 0x03
    4f76:	8d c0       	rjmp	.+282    	; 0x5092 <aggregate_recalc+0x288>
    return;
  case AGG_MIN_FLOAT:
  case AGG_MAX_FLOAT:
    MELD_FLOAT(acc) = MELD_FLOAT(start);
    4f78:	f8 01       	movw	r30, r16
    4f7a:	80 81       	ld	r24, Z
    4f7c:	91 81       	ldd	r25, Z+1	; 0x01
    4f7e:	a2 81       	ldd	r26, Z+2	; 0x02
    4f80:	b3 81       	ldd	r27, Z+3	; 0x03
    4f82:	ed 85       	ldd	r30, Y+13	; 0x0d
    4f84:	fe 85       	ldd	r31, Y+14	; 0x0e
    4f86:	80 83       	st	Z, r24
    4f88:	91 83       	std	Z+1, r25	; 0x01
    4f8a:	a2 83       	std	Z+2, r26	; 0x02
    4f8c:	b3 83       	std	Z+3, r27	; 0x03
    4f8e:	81 c0       	rjmp	.+258    	; 0x5092 <aggregate_recalc+0x288>
    return;
  case AGG_SUM_FLOAT:
    MELD_FLOAT(acc) = MELD_FLOAT(start) * count;
    4f90:	b1 01       	movw	r22, r2
    4f92:	88 27       	eor	r24, r24
    4f94:	77 fd       	sbrc	r23, 7
    4f96:	80 95       	com	r24
    4f98:	98 2f       	mov	r25, r24
    4f9a:	0e 94 95 39 	call	0x732a	; 0x732a <__floatsisf>
    4f9e:	9b 01       	movw	r18, r22
    4fa0:	ac 01       	movw	r20, r24
    4fa2:	d8 01       	movw	r26, r16
    4fa4:	6d 91       	ld	r22, X+
    4fa6:	7d 91       	ld	r23, X+
    4fa8:	8d 91       	ld	r24, X+
    4faa:	9c 91       	ld	r25, X
    4fac:	0e 94 a5 3a 	call	0x754a	; 0x754a <__mulsf3>
    4fb0:	ed 85       	ldd	r30, Y+13	; 0x0d
    4fb2:	fe 85       	ldd	r31, Y+14	; 0x0e
    4fb4:	60 83       	st	Z, r22
    4fb6:	71 83       	std	Z+1, r23	; 0x01
    4fb8:	82 83       	std	Z+2, r24	; 0x02
    4fba:	93 83       	std	Z+3, r25	; 0x03
    4fbc:	6a c0       	rjmp	.+212    	; 0x5092 <aggregate_recalc+0x288>
    return;
  case AGG_SET_UNION_INT: {
    Set *set = set_int_create();
    4fbe:	0e 94 9e 33 	call	0x673c	; 0x673c <set_int_create>
    4fc2:	5c 01       	movw	r10, r24
    set_int_insert(set, MELD_INT(start));
    4fc4:	d8 01       	movw	r26, r16
    4fc6:	6d 91       	ld	r22, X+
    4fc8:	7c 91       	ld	r23, X
    4fca:	0e 94 e2 33 	call	0x67c4	; 0x67c4 <set_int_insert>
    4fce:	0a c0       	rjmp	.+20     	; 0x4fe4 <aggregate_recalc+0x1da>
    set_print(set);
    MELD_SET(acc) = set;
    return;
  }
  case AGG_SET_UNION_FLOAT: {
    Set *set = set_float_create();
    4fd0:	0e 94 c0 33 	call	0x6780	; 0x6780 <set_float_create>
    4fd4:	5c 01       	movw	r10, r24
    set_float_insert(set, MELD_FLOAT(start));
    4fd6:	d8 01       	movw	r26, r16
    4fd8:	4d 91       	ld	r20, X+
    4fda:	5d 91       	ld	r21, X+
    4fdc:	6d 91       	ld	r22, X+
    4fde:	7c 91       	ld	r23, X
    4fe0:	0e 94 f4 33 	call	0x67e8	; 0x67e8 <set_float_insert>
    set_print(set);
    4fe4:	c5 01       	movw	r24, r10
    4fe6:	0e 94 09 34 	call	0x6812	; 0x6812 <set_print>
    4fea:	45 c0       	rjmp	.+138    	; 0x5076 <aggregate_recalc+0x26c>
    MELD_SET(acc) = set;
    return;
  }
  case AGG_SUM_LIST_INT: {
    List *result_list = list_int_create();
    4fec:	0e 94 dd 35 	call	0x6bba	; 0x6bba <list_int_create>
    4ff0:	5c 01       	movw	r10, r24
    for (j = 0; j < TYPE_NOARGS(i); ++j) {
      printf(" %d:%d", TYPE_ARG_OFFSET(i, j), TYPE_ARG_SIZE(i, j));
    }
    printf("\n");
  }
}
    4ff2:	d8 01       	movw	r26, r16
    4ff4:	ed 91       	ld	r30, X+
    4ff6:	fc 91       	ld	r31, X
    4ff8:	00 81       	ld	r16, Z
    4ffa:	11 81       	ldd	r17, Z+1	; 0x01
    /* add values to result_list */
    list_iterator it;
    for(it = list_get_iterator(start_list); list_iterator_has_next(it);
	it = list_iterator_next(it))
      {
	meld_int total = list_iterator_int(it) * (meld_int)count;
    4ffc:	44 24       	eor	r4, r4
    4ffe:	37 fc       	sbrc	r3, 7
    5000:	40 94       	com	r4
    5002:	54 2c       	mov	r5, r4
    5004:	11 c0       	rjmp	.+34     	; 0x5028 <aggregate_recalc+0x21e>
    5006:	f8 01       	movw	r30, r16
    5008:	62 81       	ldd	r22, Z+2	; 0x02
    500a:	73 81       	ldd	r23, Z+3	; 0x03
    500c:	84 81       	ldd	r24, Z+4	; 0x04
    500e:	95 81       	ldd	r25, Z+5	; 0x05
    5010:	a2 01       	movw	r20, r4
    5012:	91 01       	movw	r18, r2
    5014:	0e 94 1b 3b 	call	0x7636	; 0x7636 <__mulsi3>
    5018:	ab 01       	movw	r20, r22
    501a:	bc 01       	movw	r22, r24
	list_int_push_tail(result_list, total);
    501c:	c5 01       	movw	r24, r10
    501e:	0e 94 2e 36 	call	0x6c5c	; 0x6c5c <list_int_push_tail>
}

static inline
list_iterator list_iterator_next(list_iterator iterator)
{
	return LIST_NEXT(iterator);
    5022:	d8 01       	movw	r26, r16
    5024:	0d 91       	ld	r16, X+
    5026:	1c 91       	ld	r17, X
    List *result_list = list_int_create();
    List *start_list = MELD_LIST(start);

    /* add values to result_list */
    list_iterator it;
    for(it = list_get_iterator(start_list); list_iterator_has_next(it);
    5028:	01 15       	cp	r16, r1
    502a:	11 05       	cpc	r17, r1
    502c:	61 f7       	brne	.-40     	; 0x5006 <aggregate_recalc+0x1fc>
    502e:	23 c0       	rjmp	.+70     	; 0x5076 <aggregate_recalc+0x26c>

    MELD_LIST(acc) = result_list;
    return;
  }
  case AGG_SUM_LIST_FLOAT: {
    List *result_list = list_float_create();
    5030:	0e 94 f1 35 	call	0x6be2	; 0x6be2 <list_float_create>
    5034:	5c 01       	movw	r10, r24
    for (j = 0; j < TYPE_NOARGS(i); ++j) {
      printf(" %d:%d", TYPE_ARG_OFFSET(i, j), TYPE_ARG_SIZE(i, j));
    }
    printf("\n");
  }
}
    5036:	d8 01       	movw	r26, r16
    5038:	ed 91       	ld	r30, X+
    503a:	fc 91       	ld	r31, X
    503c:	00 81       	ld	r16, Z
    503e:	11 81       	ldd	r17, Z+1	; 0x01
    /* add values to result_list */
    list_iterator it;
    for(it = list_get_iterator(start_list); list_iterator_has_next(it);
	it = list_iterator_next(it))
      {
	meld_float total = list_iterator_float(it) * (meld_float)count;
    5040:	44 24       	eor	r4, r4
    5042:	37 fc       	sbrc	r3, 7
    5044:	40 94       	com	r4
    5046:	54 2c       	mov	r5, r4
    5048:	13 c0       	rjmp	.+38     	; 0x5070 <aggregate_recalc+0x266>
    504a:	c2 01       	movw	r24, r4
    504c:	b1 01       	movw	r22, r2
    504e:	0e 94 95 39 	call	0x732a	; 0x732a <__floatsisf>
    5052:	f8 01       	movw	r30, r16
    5054:	22 81       	ldd	r18, Z+2	; 0x02
    5056:	33 81       	ldd	r19, Z+3	; 0x03
    5058:	44 81       	ldd	r20, Z+4	; 0x04
    505a:	55 81       	ldd	r21, Z+5	; 0x05
    505c:	0e 94 a5 3a 	call	0x754a	; 0x754a <__mulsf3>
    5060:	ab 01       	movw	r20, r22
    5062:	bc 01       	movw	r22, r24
	list_float_push_tail(result_list, total);
    5064:	c5 01       	movw	r24, r10
    5066:	0e 94 7c 36 	call	0x6cf8	; 0x6cf8 <list_float_push_tail>
    506a:	d8 01       	movw	r26, r16
    506c:	0d 91       	ld	r16, X+
    506e:	1c 91       	ld	r17, X
    List *result_list = list_float_create();
    List *start_list = MELD_LIST(start);

    /* add values to result_list */
    list_iterator it;
    for(it = list_get_iterator(start_list); list_iterator_has_next(it);
    5070:	01 15       	cp	r16, r1
    5072:	11 05       	cpc	r17, r1
    5074:	51 f7       	brne	.-44     	; 0x504a <aggregate_recalc+0x240>
      {
	meld_float total = list_iterator_float(it) * (meld_float)count;
	list_float_push_tail(result_list, total);
      }

    MELD_LIST(acc) = result_list;
    5076:	ed 85       	ldd	r30, Y+13	; 0x0d
    5078:	fe 85       	ldd	r31, Y+14	; 0x0e
    507a:	a0 82       	st	Z, r10
    507c:	b1 82       	std	Z+1, r11	; 0x01
    507e:	09 c0       	rjmp	.+18     	; 0x5092 <aggregate_recalc+0x288>
    return;
  }
  }

  assert(0);
    5080:	43 eb       	ldi	r20, 0xB3	; 179
    5082:	55 e2       	ldi	r21, 0x25	; 37
    5084:	61 e4       	ldi	r22, 0x41	; 65
    5086:	72 e0       	ldi	r23, 0x02	; 2
    5088:	85 eb       	ldi	r24, 0xB5	; 181
    508a:	95 e2       	ldi	r25, 0x25	; 37
    508c:	0e 94 e5 19 	call	0x33ca	; 0x33ca <__myassert>
    5090:	ff cf       	rjmp	.-2      	; 0x5090 <aggregate_recalc+0x286>
  void* accumulator = malloc(size);

  aggregate_seed(agg_type, accumulator, start, agg_list->records.count, size);
	
  /* calculate offsets to copy right side to aggregated tuple */
  size_t size_offset = TYPE_FIELD_SIZE + TYPE_ARG_OFFSET(type, agg_field) + TYPE_ARG_SIZE(type, agg_field);
    5092:	80 91 3e 29 	lds	r24, 0x293E
    5096:	90 91 3f 29 	lds	r25, 0x293F
    509a:	dc 01       	movw	r26, r24
    509c:	ae 0d       	add	r26, r14
    509e:	bf 1d       	adc	r27, r15
    50a0:	2c 91       	ld	r18, X
    50a2:	f3 01       	movw	r30, r6
    50a4:	e2 0f       	add	r30, r18
    50a6:	f1 1d       	adc	r31, r1
    50a8:	e8 0f       	add	r30, r24
    50aa:	f9 1f       	adc	r31, r25
    50ac:	01 81       	ldd	r16, Z+1	; 0x01
    50ae:	10 e0       	ldi	r17, 0x00	; 0
    50b0:	0f 5f       	subi	r16, 0xFF	; 255
    50b2:	1f 4f       	sbci	r17, 0xFF	; 255
    50b4:	80 81       	ld	r24, Z
    50b6:	08 0f       	add	r16, r24
    50b8:	11 1d       	adc	r17, r1
  size_t total_copy = TYPE_SIZE(type) - size_offset;
    50ba:	11 96       	adiw	r26, 0x01	; 1
    50bc:	4c 90       	ld	r4, X
    50be:	51 2c       	mov	r5, r1
    50c0:	40 1a       	sub	r4, r16
    50c2:	51 0a       	sbc	r5, r17
  tuple_t target_tuple = NULL;
  
  if (total_copy > 0)
    50c4:	19 f4       	brne	.+6      	; 0x50cc <aggregate_recalc+0x2c2>
  aggregate_seed(agg_type, accumulator, start, agg_list->records.count, size);
	
  /* calculate offsets to copy right side to aggregated tuple */
  size_t size_offset = TYPE_FIELD_SIZE + TYPE_ARG_OFFSET(type, agg_field) + TYPE_ARG_SIZE(type, agg_field);
  size_t total_copy = TYPE_SIZE(type) - size_offset;
  tuple_t target_tuple = NULL;
    50c6:	21 2c       	mov	r2, r1
    50c8:	31 2c       	mov	r3, r1
    50ca:	01 c0       	rjmp	.+2      	; 0x50ce <aggregate_recalc+0x2c4>
  
  if (total_copy > 0)
    target_tuple = tuple;
    50cc:	16 01       	movw	r2, r12

  for (cur = agg_list->next; cur != NULL; cur = cur->next) {
    50ce:	aa 81       	ldd	r26, Y+2	; 0x02
    50d0:	bb 81       	ldd	r27, Y+3	; 0x03
    50d2:	ab c1       	rjmp	.+854    	; 0x542a <aggregate_recalc+0x620>
    if(aggregate_accumulate(agg_type, accumulator,
    50d4:	f5 01       	movw	r30, r10
    50d6:	62 81       	ldd	r22, Z+2	; 0x02
    50d8:	73 81       	ldd	r23, Z+3	; 0x03
			    GET_TUPLE_FIELD(cur->tuple, agg_field), cur->records.count))
    50da:	24 81       	ldd	r18, Z+4	; 0x04
    50dc:	35 81       	ldd	r19, Z+5	; 0x05
    50de:	2a 83       	std	Y+2, r18	; 0x02
    50e0:	3b 83       	std	Y+3, r19	; 0x03
    50e2:	d9 01       	movw	r26, r18
    50e4:	2c 91       	ld	r18, X
    50e6:	fc 01       	movw	r30, r24
    50e8:	e2 0f       	add	r30, r18
    50ea:	f1 1d       	adc	r31, r1
    50ec:	e2 0f       	add	r30, r18
    50ee:	f1 1d       	adc	r31, r1
    50f0:	20 81       	ld	r18, Z
    50f2:	fc 01       	movw	r30, r24
    50f4:	e6 0d       	add	r30, r6
    50f6:	f7 1d       	adc	r31, r7
    50f8:	e2 0f       	add	r30, r18
    50fa:	f1 1d       	adc	r31, r1
    50fc:	c1 80       	ldd	r12, Z+1	; 0x01
    50fe:	d1 2c       	mov	r13, r1
    5100:	bf ef       	ldi	r27, 0xFF	; 255
    5102:	cb 1a       	sub	r12, r27
    5104:	db 0a       	sbc	r13, r27
  
  if (total_copy > 0)
    target_tuple = tuple;

  for (cur = agg_list->next; cur != NULL; cur = cur->next) {
    if(aggregate_accumulate(agg_type, accumulator,
    5106:	ea 81       	ldd	r30, Y+2	; 0x02
    5108:	fb 81       	ldd	r31, Y+3	; 0x03
    510a:	ce 0e       	add	r12, r30
    510c:	df 1e       	adc	r13, r31
}

static inline
bool aggregate_accumulate(int agg_type, void *acc, void *obj, int count)
{
  switch (agg_type) {
    510e:	f9 81       	ldd	r31, Y+1	; 0x01
    5110:	f6 30       	cpi	r31, 0x06	; 6
    5112:	09 f4       	brne	.+2      	; 0x5116 <aggregate_recalc+0x30c>
    5114:	9a c0       	rjmp	.+308    	; 0x524a <aggregate_recalc+0x440>
    5116:	98 f4       	brcc	.+38     	; 0x513e <aggregate_recalc+0x334>
    5118:	f3 30       	cpi	r31, 0x03	; 3
    511a:	09 f4       	brne	.+2      	; 0x511e <aggregate_recalc+0x314>
    511c:	50 c0       	rjmp	.+160    	; 0x51be <aggregate_recalc+0x3b4>
    511e:	38 f4       	brcc	.+14     	; 0x512e <aggregate_recalc+0x324>
    5120:	f1 30       	cpi	r31, 0x01	; 1
    5122:	09 f4       	brne	.+2      	; 0x5126 <aggregate_recalc+0x31c>
    5124:	81 c1       	rjmp	.+770    	; 0x5428 <aggregate_recalc+0x61e>
    5126:	f2 30       	cpi	r31, 0x02	; 2
    5128:	09 f0       	breq	.+2      	; 0x512c <aggregate_recalc+0x322>
    512a:	75 c1       	rjmp	.+746    	; 0x5416 <aggregate_recalc+0x60c>
    512c:	36 c0       	rjmp	.+108    	; 0x519a <aggregate_recalc+0x390>
    512e:	29 81       	ldd	r18, Y+1	; 0x01
    5130:	24 30       	cpi	r18, 0x04	; 4
    5132:	09 f4       	brne	.+2      	; 0x5136 <aggregate_recalc+0x32c>
    5134:	5a c0       	rjmp	.+180    	; 0x51ea <aggregate_recalc+0x3e0>
    5136:	25 30       	cpi	r18, 0x05	; 5
    5138:	09 f0       	breq	.+2      	; 0x513c <aggregate_recalc+0x332>
    513a:	6d c1       	rjmp	.+730    	; 0x5416 <aggregate_recalc+0x60c>
    513c:	6d c0       	rjmp	.+218    	; 0x5218 <aggregate_recalc+0x40e>
    513e:	39 81       	ldd	r19, Y+1	; 0x01
    5140:	39 30       	cpi	r19, 0x09	; 9
    5142:	d9 f0       	breq	.+54     	; 0x517a <aggregate_recalc+0x370>
    5144:	38 f4       	brcc	.+14     	; 0x5154 <aggregate_recalc+0x34a>
    5146:	37 30       	cpi	r19, 0x07	; 7
    5148:	09 f4       	brne	.+2      	; 0x514c <aggregate_recalc+0x342>
    514a:	98 c0       	rjmp	.+304    	; 0x527c <aggregate_recalc+0x472>
    514c:	38 30       	cpi	r19, 0x08	; 8
    514e:	09 f0       	breq	.+2      	; 0x5152 <aggregate_recalc+0x348>
    5150:	62 c1       	rjmp	.+708    	; 0x5416 <aggregate_recalc+0x60c>
    5152:	08 c0       	rjmp	.+16     	; 0x5164 <aggregate_recalc+0x35a>
    5154:	89 81       	ldd	r24, Y+1	; 0x01
    5156:	8a 30       	cpi	r24, 0x0A	; 10
    5158:	09 f4       	brne	.+2      	; 0x515c <aggregate_recalc+0x352>
    515a:	ae c0       	rjmp	.+348    	; 0x52b8 <aggregate_recalc+0x4ae>
    515c:	8b 30       	cpi	r24, 0x0B	; 11
    515e:	09 f0       	breq	.+2      	; 0x5162 <aggregate_recalc+0x358>
    5160:	5a c1       	rjmp	.+692    	; 0x5416 <aggregate_recalc+0x60c>
    5162:	fd c0       	rjmp	.+506    	; 0x535e <aggregate_recalc+0x554>
  case AGG_SET_UNION_INT: {
    Set *set = MELD_SET(acc);
    5164:	ad 85       	ldd	r26, Y+13	; 0x0d
    5166:	be 85       	ldd	r27, Y+14	; 0x0e
    5168:	ed 90       	ld	r14, X+
    516a:	fc 90       	ld	r15, X
    set_int_insert(set, MELD_INT(obj));
    516c:	f6 01       	movw	r30, r12
    516e:	60 81       	ld	r22, Z
    5170:	71 81       	ldd	r23, Z+1	; 0x01
    5172:	c7 01       	movw	r24, r14
    5174:	0e 94 e2 33 	call	0x67c4	; 0x67c4 <set_int_insert>
    5178:	0c c0       	rjmp	.+24     	; 0x5192 <aggregate_recalc+0x388>
    set_print(set);
    return false;
  }
  case AGG_SET_UNION_FLOAT: {
    Set *set = MELD_SET(acc);
    517a:	ad 85       	ldd	r26, Y+13	; 0x0d
    517c:	be 85       	ldd	r27, Y+14	; 0x0e
    517e:	ed 90       	ld	r14, X+
    5180:	fc 90       	ld	r15, X
    set_float_insert(set, MELD_FLOAT(obj));
    5182:	f6 01       	movw	r30, r12
    5184:	40 81       	ld	r20, Z
    5186:	51 81       	ldd	r21, Z+1	; 0x01
    5188:	62 81       	ldd	r22, Z+2	; 0x02
    518a:	73 81       	ldd	r23, Z+3	; 0x03
    518c:	c7 01       	movw	r24, r14
    518e:	0e 94 f4 33 	call	0x67e8	; 0x67e8 <set_float_insert>
    set_print(set);
    5192:	c7 01       	movw	r24, r14
    5194:	0e 94 09 34 	call	0x6812	; 0x6812 <set_print>
    5198:	47 c1       	rjmp	.+654    	; 0x5428 <aggregate_recalc+0x61e>

  case AGG_FIRST:
    return false;

  case AGG_MAX_INT:
    if (MELD_INT(obj) > MELD_INT(acc)) {
    519a:	f6 01       	movw	r30, r12
    519c:	80 81       	ld	r24, Z
    519e:	91 81       	ldd	r25, Z+1	; 0x01
    51a0:	a2 81       	ldd	r26, Z+2	; 0x02
    51a2:	b3 81       	ldd	r27, Z+3	; 0x03
    51a4:	ed 85       	ldd	r30, Y+13	; 0x0d
    51a6:	fe 85       	ldd	r31, Y+14	; 0x0e
    51a8:	40 81       	ld	r20, Z
    51aa:	51 81       	ldd	r21, Z+1	; 0x01
    51ac:	62 81       	ldd	r22, Z+2	; 0x02
    51ae:	73 81       	ldd	r23, Z+3	; 0x03
    51b0:	48 17       	cp	r20, r24
    51b2:	59 07       	cpc	r21, r25
    51b4:	6a 07       	cpc	r22, r26
    51b6:	7b 07       	cpc	r23, r27
    51b8:	0c f0       	brlt	.+2      	; 0x51bc <aggregate_recalc+0x3b2>
    51ba:	36 c1       	rjmp	.+620    	; 0x5428 <aggregate_recalc+0x61e>
    51bc:	11 c0       	rjmp	.+34     	; 0x51e0 <aggregate_recalc+0x3d6>
      return true;
    } else
      return false;

  case AGG_MIN_INT:
    if (MELD_INT(obj) < MELD_INT(acc)) {
    51be:	f6 01       	movw	r30, r12
    51c0:	80 81       	ld	r24, Z
    51c2:	91 81       	ldd	r25, Z+1	; 0x01
    51c4:	a2 81       	ldd	r26, Z+2	; 0x02
    51c6:	b3 81       	ldd	r27, Z+3	; 0x03
    51c8:	ed 85       	ldd	r30, Y+13	; 0x0d
    51ca:	fe 85       	ldd	r31, Y+14	; 0x0e
    51cc:	40 81       	ld	r20, Z
    51ce:	51 81       	ldd	r21, Z+1	; 0x01
    51d0:	62 81       	ldd	r22, Z+2	; 0x02
    51d2:	73 81       	ldd	r23, Z+3	; 0x03
    51d4:	84 17       	cp	r24, r20
    51d6:	95 07       	cpc	r25, r21
    51d8:	a6 07       	cpc	r26, r22
    51da:	b7 07       	cpc	r27, r23
    51dc:	0c f0       	brlt	.+2      	; 0x51e0 <aggregate_recalc+0x3d6>
    51de:	24 c1       	rjmp	.+584    	; 0x5428 <aggregate_recalc+0x61e>
      MELD_INT(acc) = MELD_INT(obj);
    51e0:	80 83       	st	Z, r24
    51e2:	91 83       	std	Z+1, r25	; 0x01
    51e4:	a2 83       	std	Z+2, r26	; 0x02
    51e6:	b3 83       	std	Z+3, r27	; 0x03
    51e8:	00 c2       	rjmp	.+1024   	; 0x55ea <aggregate_recalc+0x7e0>
      return true;
    } else
      return false;
		
  case AGG_SUM_INT:
    MELD_INT(acc) += MELD_INT(obj) * count;
    51ea:	d6 01       	movw	r26, r12
    51ec:	2d 91       	ld	r18, X+
    51ee:	3d 91       	ld	r19, X+
    51f0:	4d 91       	ld	r20, X+
    51f2:	5c 91       	ld	r21, X
    51f4:	db 01       	movw	r26, r22
    51f6:	0e 94 13 3b 	call	0x7626	; 0x7626 <__mulshisi3>
    51fa:	ed 85       	ldd	r30, Y+13	; 0x0d
    51fc:	fe 85       	ldd	r31, Y+14	; 0x0e
    51fe:	c0 80       	ld	r12, Z
    5200:	d1 80       	ldd	r13, Z+1	; 0x01
    5202:	e2 80       	ldd	r14, Z+2	; 0x02
    5204:	f3 80       	ldd	r15, Z+3	; 0x03
    5206:	c6 0e       	add	r12, r22
    5208:	d7 1e       	adc	r13, r23
    520a:	e8 1e       	adc	r14, r24
    520c:	f9 1e       	adc	r15, r25
    520e:	c0 82       	st	Z, r12
    5210:	d1 82       	std	Z+1, r13	; 0x01
    5212:	e2 82       	std	Z+2, r14	; 0x02
    5214:	f3 82       	std	Z+3, r15	; 0x03
    5216:	08 c1       	rjmp	.+528    	; 0x5428 <aggregate_recalc+0x61e>
    return false;
			
  case AGG_MAX_FLOAT:
    if(MELD_FLOAT(obj) > MELD_FLOAT(acc)) {
    5218:	f6 01       	movw	r30, r12
    521a:	c0 80       	ld	r12, Z
    521c:	d1 80       	ldd	r13, Z+1	; 0x01
    521e:	e2 80       	ldd	r14, Z+2	; 0x02
    5220:	f3 80       	ldd	r15, Z+3	; 0x03
    5222:	ad 85       	ldd	r26, Y+13	; 0x0d
    5224:	be 85       	ldd	r27, Y+14	; 0x0e
    5226:	2d 91       	ld	r18, X+
    5228:	3d 91       	ld	r19, X+
    522a:	4d 91       	ld	r20, X+
    522c:	5c 91       	ld	r21, X
    522e:	c7 01       	movw	r24, r14
    5230:	b6 01       	movw	r22, r12
    5232:	0e 94 a1 3a 	call	0x7542	; 0x7542 <__gesf2>
    5236:	18 16       	cp	r1, r24
    5238:	0c f0       	brlt	.+2      	; 0x523c <aggregate_recalc+0x432>
    523a:	f6 c0       	rjmp	.+492    	; 0x5428 <aggregate_recalc+0x61e>
      MELD_FLOAT(acc) = MELD_FLOAT(obj);
    523c:	ed 85       	ldd	r30, Y+13	; 0x0d
    523e:	fe 85       	ldd	r31, Y+14	; 0x0e
    5240:	c0 82       	st	Z, r12
    5242:	d1 82       	std	Z+1, r13	; 0x01
    5244:	e2 82       	std	Z+2, r14	; 0x02
    5246:	f3 82       	std	Z+3, r15	; 0x03
    5248:	d0 c1       	rjmp	.+928    	; 0x55ea <aggregate_recalc+0x7e0>
      return true;
    } else
      return false;
    
  case AGG_MIN_FLOAT:
    if(MELD_FLOAT(obj) < MELD_FLOAT(acc)) {
    524a:	d6 01       	movw	r26, r12
    524c:	cd 90       	ld	r12, X+
    524e:	dd 90       	ld	r13, X+
    5250:	ed 90       	ld	r14, X+
    5252:	fc 90       	ld	r15, X
    5254:	ed 85       	ldd	r30, Y+13	; 0x0d
    5256:	fe 85       	ldd	r31, Y+14	; 0x0e
    5258:	20 81       	ld	r18, Z
    525a:	31 81       	ldd	r19, Z+1	; 0x01
    525c:	42 81       	ldd	r20, Z+2	; 0x02
    525e:	53 81       	ldd	r21, Z+3	; 0x03
    5260:	c7 01       	movw	r24, r14
    5262:	b6 01       	movw	r22, r12
    5264:	0e 94 27 39 	call	0x724e	; 0x724e <__cmpsf2>
    5268:	87 ff       	sbrs	r24, 7
    526a:	de c0       	rjmp	.+444    	; 0x5428 <aggregate_recalc+0x61e>
      MELD_FLOAT(acc) = MELD_FLOAT(obj);
    526c:	ad 85       	ldd	r26, Y+13	; 0x0d
    526e:	be 85       	ldd	r27, Y+14	; 0x0e
    5270:	cd 92       	st	X+, r12
    5272:	dd 92       	st	X+, r13
    5274:	ed 92       	st	X+, r14
    5276:	fc 92       	st	X, r15
    5278:	13 97       	sbiw	r26, 0x03	; 3
    527a:	b7 c1       	rjmp	.+878    	; 0x55ea <aggregate_recalc+0x7e0>
      return true;
    } else
      return false;
    
  case AGG_SUM_FLOAT:
    MELD_FLOAT(acc) += MELD_FLOAT(obj) * (meld_float)count;
    527c:	88 27       	eor	r24, r24
    527e:	77 fd       	sbrc	r23, 7
    5280:	80 95       	com	r24
    5282:	98 2f       	mov	r25, r24
    5284:	0e 94 95 39 	call	0x732a	; 0x732a <__floatsisf>
    5288:	f6 01       	movw	r30, r12
    528a:	20 81       	ld	r18, Z
    528c:	31 81       	ldd	r19, Z+1	; 0x01
    528e:	42 81       	ldd	r20, Z+2	; 0x02
    5290:	53 81       	ldd	r21, Z+3	; 0x03
    5292:	0e 94 a5 3a 	call	0x754a	; 0x754a <__mulsf3>
    5296:	9b 01       	movw	r18, r22
    5298:	ac 01       	movw	r20, r24
    529a:	ad 85       	ldd	r26, Y+13	; 0x0d
    529c:	be 85       	ldd	r27, Y+14	; 0x0e
    529e:	6d 91       	ld	r22, X+
    52a0:	7d 91       	ld	r23, X+
    52a2:	8d 91       	ld	r24, X+
    52a4:	9c 91       	ld	r25, X
    52a6:	0e 94 c3 38 	call	0x7186	; 0x7186 <__addsf3>
    52aa:	ed 85       	ldd	r30, Y+13	; 0x0d
    52ac:	fe 85       	ldd	r31, Y+14	; 0x0e
    52ae:	60 83       	st	Z, r22
    52b0:	71 83       	std	Z+1, r23	; 0x01
    52b2:	82 83       	std	Z+2, r24	; 0x02
    52b4:	93 83       	std	Z+3, r25	; 0x03
    52b6:	b8 c0       	rjmp	.+368    	; 0x5428 <aggregate_recalc+0x61e>
    return false;

  case AGG_SUM_LIST_INT: {
    List *result_list = MELD_LIST(acc);
    52b8:	ed 85       	ldd	r30, Y+13	; 0x0d
    52ba:	fe 85       	ldd	r31, Y+14	; 0x0e
    52bc:	a0 81       	ld	r26, Z
    52be:	b1 81       	ldd	r27, Z+1	; 0x01
    List *other_list = MELD_LIST(obj);
    52c0:	f6 01       	movw	r30, r12
    52c2:	20 81       	ld	r18, Z
    52c4:	31 81       	ldd	r19, Z+1	; 0x01
    for (j = 0; j < TYPE_NOARGS(i); ++j) {
      printf(" %d:%d", TYPE_ARG_OFFSET(i, j), TYPE_ARG_SIZE(i, j));
    }
    printf("\n");
  }
}
    52c6:	14 96       	adiw	r26, 0x04	; 4
    52c8:	8d 91       	ld	r24, X+
    52ca:	9c 91       	ld	r25, X
    52cc:	15 97       	sbiw	r26, 0x05	; 5
    52ce:	f9 01       	movw	r30, r18
    52d0:	44 81       	ldd	r20, Z+4	; 0x04
    52d2:	55 81       	ldd	r21, Z+5	; 0x05

  case AGG_SUM_LIST_INT: {
    List *result_list = MELD_LIST(acc);
    List *other_list = MELD_LIST(obj);

    if(list_total(result_list) != list_total(other_list)) {
    52d4:	84 17       	cp	r24, r20
    52d6:	95 07       	cpc	r25, r21
    52d8:	39 f0       	breq	.+14     	; 0x52e8 <aggregate_recalc+0x4de>
      fprintf(stderr, "lists differ in size for accumulator AGG_SUM_LIST_INT:"
    52da:	5f 93       	push	r21
    52dc:	4f 93       	push	r20
    52de:	9f 93       	push	r25
    52e0:	8f 93       	push	r24
    52e2:	8c e5       	ldi	r24, 0x5C	; 92
    52e4:	96 e2       	ldi	r25, 0x26	; 38
    52e6:	52 c0       	rjmp	.+164    	; 0x538c <aggregate_recalc+0x582>
    for (j = 0; j < TYPE_NOARGS(i); ++j) {
      printf(" %d:%d", TYPE_ARG_OFFSET(i, j), TYPE_ARG_SIZE(i, j));
    }
    printf("\n");
  }
}
    52e8:	ed 91       	ld	r30, X+
    52ea:	fc 91       	ld	r31, X
    52ec:	ef 87       	std	Y+15, r30	; 0x0f
    52ee:	f8 8b       	std	Y+16, r31	; 0x10
    52f0:	d9 01       	movw	r26, r18
    52f2:	0d 90       	ld	r0, X+
    52f4:	bc 91       	ld	r27, X
    52f6:	a0 2d       	mov	r26, r0
    52f8:	aa 83       	std	Y+2, r26	; 0x02
    52fa:	bb 83       	std	Y+3, r27	; 0x03

    list_iterator it_result = list_get_iterator(result_list);
    list_iterator it_other = list_get_iterator(other_list);

    while(list_iterator_has_next(it_result)) {
      list_iterator_int(it_result) += list_iterator_int(it_other) * (meld_int)count;
    52fc:	6b 01       	movw	r12, r22
    52fe:	ee 24       	eor	r14, r14
    5300:	d7 fc       	sbrc	r13, 7
    5302:	e0 94       	com	r14
    5304:	fe 2c       	mov	r15, r14
    5306:	26 c0       	rjmp	.+76     	; 0x5354 <aggregate_recalc+0x54a>
    5308:	ea 81       	ldd	r30, Y+2	; 0x02
    530a:	fb 81       	ldd	r31, Y+3	; 0x03
    530c:	62 81       	ldd	r22, Z+2	; 0x02
    530e:	73 81       	ldd	r23, Z+3	; 0x03
    5310:	84 81       	ldd	r24, Z+4	; 0x04
    5312:	95 81       	ldd	r25, Z+5	; 0x05
    5314:	a7 01       	movw	r20, r14
    5316:	96 01       	movw	r18, r12
    5318:	0e 94 1b 3b 	call	0x7636	; 0x7636 <__mulsi3>
    531c:	ef 85       	ldd	r30, Y+15	; 0x0f
    531e:	f8 89       	ldd	r31, Y+16	; 0x10
    5320:	22 81       	ldd	r18, Z+2	; 0x02
    5322:	33 81       	ldd	r19, Z+3	; 0x03
    5324:	44 81       	ldd	r20, Z+4	; 0x04
    5326:	55 81       	ldd	r21, Z+5	; 0x05
    5328:	26 0f       	add	r18, r22
    532a:	37 1f       	adc	r19, r23
    532c:	48 1f       	adc	r20, r24
    532e:	59 1f       	adc	r21, r25
    5330:	22 83       	std	Z+2, r18	; 0x02
    5332:	33 83       	std	Z+3, r19	; 0x03
    5334:	44 83       	std	Z+4, r20	; 0x04
    5336:	55 83       	std	Z+5, r21	; 0x05
    5338:	ea 81       	ldd	r30, Y+2	; 0x02
    533a:	fb 81       	ldd	r31, Y+3	; 0x03
    533c:	01 90       	ld	r0, Z+
    533e:	f0 81       	ld	r31, Z
    5340:	e0 2d       	mov	r30, r0
    5342:	ea 83       	std	Y+2, r30	; 0x02
    5344:	fb 83       	std	Y+3, r31	; 0x03
    5346:	ef 85       	ldd	r30, Y+15	; 0x0f
    5348:	f8 89       	ldd	r31, Y+16	; 0x10
    534a:	01 90       	ld	r0, Z+
    534c:	f0 81       	ld	r31, Z
    534e:	e0 2d       	mov	r30, r0
    5350:	ef 87       	std	Y+15, r30	; 0x0f
    5352:	f8 8b       	std	Y+16, r31	; 0x10
    }

    list_iterator it_result = list_get_iterator(result_list);
    list_iterator it_other = list_get_iterator(other_list);

    while(list_iterator_has_next(it_result)) {
    5354:	ef 85       	ldd	r30, Y+15	; 0x0f
    5356:	f8 89       	ldd	r31, Y+16	; 0x10
    5358:	ef 2b       	or	r30, r31
    535a:	b1 f6       	brne	.-84     	; 0x5308 <aggregate_recalc+0x4fe>
    535c:	65 c0       	rjmp	.+202    	; 0x5428 <aggregate_recalc+0x61e>
			
    return false;
  }
	  
  case AGG_SUM_LIST_FLOAT: {
    List *result_list = MELD_LIST(acc);
    535e:	ad 85       	ldd	r26, Y+13	; 0x0d
    5360:	be 85       	ldd	r27, Y+14	; 0x0e
    5362:	2d 91       	ld	r18, X+
    5364:	3c 91       	ld	r19, X
    List *other_list = MELD_LIST(obj);
    5366:	d6 01       	movw	r26, r12
    5368:	ed 91       	ld	r30, X+
    536a:	fc 91       	ld	r31, X
    for (j = 0; j < TYPE_NOARGS(i); ++j) {
      printf(" %d:%d", TYPE_ARG_OFFSET(i, j), TYPE_ARG_SIZE(i, j));
    }
    printf("\n");
  }
}
    536c:	d9 01       	movw	r26, r18
    536e:	14 96       	adiw	r26, 0x04	; 4
    5370:	8d 91       	ld	r24, X+
    5372:	9c 91       	ld	r25, X
    5374:	15 97       	sbiw	r26, 0x05	; 5
    5376:	44 81       	ldd	r20, Z+4	; 0x04
    5378:	55 81       	ldd	r21, Z+5	; 0x05
	  
  case AGG_SUM_LIST_FLOAT: {
    List *result_list = MELD_LIST(acc);
    List *other_list = MELD_LIST(obj);

    if(list_total(result_list) != list_total(other_list)) {
    537a:	84 17       	cp	r24, r20
    537c:	95 07       	cpc	r25, r21
    537e:	a1 f0       	breq	.+40     	; 0x53a8 <aggregate_recalc+0x59e>
      fprintf(stderr, "lists differ in size for accumulator AGG_SUM_LIST_FLOAT: "
    5380:	5f 93       	push	r21
    5382:	4f 93       	push	r20
    5384:	9f 93       	push	r25
    5386:	8f 93       	push	r24
    5388:	8d e9       	ldi	r24, 0x9D	; 157
    538a:	96 e2       	ldi	r25, 0x26	; 38
    538c:	9f 93       	push	r25
    538e:	8f 93       	push	r24
    5390:	80 91 88 2f 	lds	r24, 0x2F88
    5394:	8f 93       	push	r24
    5396:	80 91 87 2f 	lds	r24, 0x2F87
    539a:	8f 93       	push	r24
    539c:	0e 94 45 3e 	call	0x7c8a	; 0x7c8a <fprintf>
	      "%d vs %d\n", list_total(result_list), list_total(other_list));
      exit(1);
    53a0:	81 e0       	ldi	r24, 0x01	; 1
    53a2:	90 e0       	ldi	r25, 0x00	; 0
    53a4:	0e 94 73 41 	call	0x82e6	; 0x82e6 <_exit>
    for (j = 0; j < TYPE_NOARGS(i); ++j) {
      printf(" %d:%d", TYPE_ARG_OFFSET(i, j), TYPE_ARG_SIZE(i, j));
    }
    printf("\n");
  }
}
    53a8:	d9 01       	movw	r26, r18
    53aa:	ed 90       	ld	r14, X+
    53ac:	fc 90       	ld	r15, X
    53ae:	c0 80       	ld	r12, Z
    53b0:	d1 80       	ldd	r13, Z+1	; 0x01

    list_iterator it_result = list_get_iterator(result_list);
    list_iterator it_other = list_get_iterator(other_list);

    while(list_iterator_has_next(it_result)) {
      list_iterator_float(it_result) += list_iterator_float(it_other) * (meld_float)count;
    53b2:	cb 01       	movw	r24, r22
    53b4:	aa 27       	eor	r26, r26
    53b6:	97 fd       	sbrc	r25, 7
    53b8:	a0 95       	com	r26
    53ba:	ba 2f       	mov	r27, r26
    53bc:	8a 83       	std	Y+2, r24	; 0x02
    53be:	9b 83       	std	Y+3, r25	; 0x03
    53c0:	ac 83       	std	Y+4, r26	; 0x04
    53c2:	bd 83       	std	Y+5, r27	; 0x05
    53c4:	24 c0       	rjmp	.+72     	; 0x540e <aggregate_recalc+0x604>
    53c6:	6a 81       	ldd	r22, Y+2	; 0x02
    53c8:	7b 81       	ldd	r23, Y+3	; 0x03
    53ca:	8c 81       	ldd	r24, Y+4	; 0x04
    53cc:	9d 81       	ldd	r25, Y+5	; 0x05
    53ce:	0e 94 95 39 	call	0x732a	; 0x732a <__floatsisf>
    53d2:	d6 01       	movw	r26, r12
    53d4:	12 96       	adiw	r26, 0x02	; 2
    53d6:	2d 91       	ld	r18, X+
    53d8:	3d 91       	ld	r19, X+
    53da:	4d 91       	ld	r20, X+
    53dc:	5c 91       	ld	r21, X
    53de:	15 97       	sbiw	r26, 0x05	; 5
    53e0:	0e 94 a5 3a 	call	0x754a	; 0x754a <__mulsf3>
    53e4:	9b 01       	movw	r18, r22
    53e6:	ac 01       	movw	r20, r24
    53e8:	f7 01       	movw	r30, r14
    53ea:	62 81       	ldd	r22, Z+2	; 0x02
    53ec:	73 81       	ldd	r23, Z+3	; 0x03
    53ee:	84 81       	ldd	r24, Z+4	; 0x04
    53f0:	95 81       	ldd	r25, Z+5	; 0x05
    53f2:	0e 94 c3 38 	call	0x7186	; 0x7186 <__addsf3>
    53f6:	d7 01       	movw	r26, r14
    53f8:	12 96       	adiw	r26, 0x02	; 2
    53fa:	6d 93       	st	X+, r22
    53fc:	7d 93       	st	X+, r23
    53fe:	8d 93       	st	X+, r24
    5400:	9c 93       	st	X, r25
    5402:	15 97       	sbiw	r26, 0x05	; 5
    5404:	ed 90       	ld	r14, X+
    5406:	fc 90       	ld	r15, X
    5408:	f6 01       	movw	r30, r12
    540a:	c0 80       	ld	r12, Z
    540c:	d1 80       	ldd	r13, Z+1	; 0x01
    }

    list_iterator it_result = list_get_iterator(result_list);
    list_iterator it_other = list_get_iterator(other_list);

    while(list_iterator_has_next(it_result)) {
    540e:	e1 14       	cp	r14, r1
    5410:	f1 04       	cpc	r15, r1
    5412:	c9 f6       	brne	.-78     	; 0x53c6 <aggregate_recalc+0x5bc>
    5414:	09 c0       	rjmp	.+18     	; 0x5428 <aggregate_recalc+0x61e>
			
    return false;
  }
  }

  assert(0);
    5416:	43 eb       	ldi	r20, 0xB3	; 179
    5418:	55 e2       	ldi	r21, 0x25	; 37
    541a:	62 ec       	ldi	r22, 0xC2	; 194
    541c:	71 e0       	ldi	r23, 0x01	; 1
    541e:	85 eb       	ldi	r24, 0xB5	; 181
    5420:	95 e2       	ldi	r25, 0x25	; 37
    5422:	0e 94 e5 19 	call	0x33ca	; 0x33ca <__myassert>
    5426:	ff cf       	rjmp	.-2      	; 0x5426 <aggregate_recalc+0x61c>
  tuple_t target_tuple = NULL;
  
  if (total_copy > 0)
    target_tuple = tuple;

  for (cur = agg_list->next; cur != NULL; cur = cur->next) {
    5428:	d5 01       	movw	r26, r10
    542a:	ad 90       	ld	r10, X+
    542c:	bc 90       	ld	r11, X
    542e:	80 91 3e 29 	lds	r24, 0x293E
    5432:	90 91 3f 29 	lds	r25, 0x293F
    5436:	a1 14       	cp	r10, r1
    5438:	b1 04       	cpc	r11, r1
    543a:	09 f0       	breq	.+2      	; 0x543e <aggregate_recalc+0x634>
    543c:	4b ce       	rjmp	.-874    	; 0x50d4 <aggregate_recalc+0x2ca>
    if(aggregate_accumulate(agg_type, accumulator,
			    GET_TUPLE_FIELD(cur->tuple, agg_field), cur->records.count))
      target_tuple = cur->tuple;
  }

  void *acc_area = GET_TUPLE_FIELD(agg->tuple, agg_field);
    543e:	f4 01       	movw	r30, r8
    5440:	a4 81       	ldd	r26, Z+4	; 0x04
    5442:	b5 81       	ldd	r27, Z+5	; 0x05
    5444:	2c 91       	ld	r18, X
    5446:	fc 01       	movw	r30, r24
    5448:	e2 0f       	add	r30, r18
    544a:	f1 1d       	adc	r31, r1
    544c:	e2 0f       	add	r30, r18
    544e:	f1 1d       	adc	r31, r1
    5450:	20 81       	ld	r18, Z
    5452:	fc 01       	movw	r30, r24
    5454:	e6 0d       	add	r30, r6
    5456:	f7 1d       	adc	r31, r7
    5458:	e2 0f       	add	r30, r18
    545a:	f1 1d       	adc	r31, r1
    545c:	e1 80       	ldd	r14, Z+1	; 0x01
    545e:	f1 2c       	mov	r15, r1
    5460:	ff ef       	ldi	r31, 0xFF	; 255
    5462:	ef 1a       	sub	r14, r31
    5464:	ff 0a       	sbc	r15, r31
    5466:	ea 0e       	add	r14, r26
    5468:	fb 1e       	adc	r15, r27

  if(first_run)
    546a:	2c 85       	ldd	r18, Y+12	; 0x0c
    546c:	22 23       	and	r18, r18
    546e:	41 f0       	breq	.+16     	; 0x5480 <aggregate_recalc+0x676>
    memcpy(acc_area, accumulator, size);
    5470:	4e 81       	ldd	r20, Y+6	; 0x06
    5472:	50 e0       	ldi	r21, 0x00	; 0
    5474:	6d 85       	ldd	r22, Y+13	; 0x0d
    5476:	7e 85       	ldd	r23, Y+14	; 0x0e
    5478:	c7 01       	movw	r24, r14
    547a:	0e 94 2c 3e 	call	0x7c58	; 0x7c58 <memcpy>
    547e:	9c c0       	rjmp	.+312    	; 0x55b8 <aggregate_recalc+0x7ae>
}

static inline bool
aggregate_changed(int agg_type, void *v1, void *v2)
{
  switch(agg_type) {
    5480:	39 81       	ldd	r19, Y+1	; 0x01
    5482:	38 30       	cpi	r19, 0x08	; 8
    5484:	40 f4       	brcc	.+16     	; 0x5496 <aggregate_recalc+0x68c>
    5486:	35 30       	cpi	r19, 0x05	; 5
    5488:	f0 f4       	brcc	.+60     	; 0x54c6 <aggregate_recalc+0x6bc>
    548a:	31 30       	cpi	r19, 0x01	; 1
    548c:	09 f4       	brne	.+2      	; 0x5490 <aggregate_recalc+0x686>
    548e:	94 c0       	rjmp	.+296    	; 0x55b8 <aggregate_recalc+0x7ae>
    5490:	08 f4       	brcc	.+2      	; 0x5494 <aggregate_recalc+0x68a>
    5492:	49 c0       	rjmp	.+146    	; 0x5526 <aggregate_recalc+0x71c>
    5494:	07 c0       	rjmp	.+14     	; 0x54a4 <aggregate_recalc+0x69a>
    5496:	89 81       	ldd	r24, Y+1	; 0x01
    5498:	8a 30       	cpi	r24, 0x0A	; 10
    549a:	28 f1       	brcs	.+74     	; 0x54e6 <aggregate_recalc+0x6dc>
    549c:	8c 30       	cpi	r24, 0x0C	; 12
    549e:	08 f0       	brcs	.+2      	; 0x54a2 <aggregate_recalc+0x698>
    54a0:	42 c0       	rjmp	.+132    	; 0x5526 <aggregate_recalc+0x71c>
    54a2:	31 c0       	rjmp	.+98     	; 0x5506 <aggregate_recalc+0x6fc>
    return false;

  case AGG_MIN_INT:
  case AGG_MAX_INT:
  case AGG_SUM_INT:
    return MELD_INT(v1) != MELD_INT(v2);
    54a4:	d7 01       	movw	r26, r14
    54a6:	4d 91       	ld	r20, X+
    54a8:	5d 91       	ld	r21, X+
    54aa:	6d 91       	ld	r22, X+
    54ac:	7c 91       	ld	r23, X
    54ae:	ed 85       	ldd	r30, Y+13	; 0x0d
    54b0:	fe 85       	ldd	r31, Y+14	; 0x0e
    54b2:	80 81       	ld	r24, Z
    54b4:	91 81       	ldd	r25, Z+1	; 0x01
    54b6:	a2 81       	ldd	r26, Z+2	; 0x02
    54b8:	b3 81       	ldd	r27, Z+3	; 0x03
    54ba:	48 17       	cp	r20, r24
    54bc:	59 07       	cpc	r21, r25
    54be:	6a 07       	cpc	r22, r26
    54c0:	7b 07       	cpc	r23, r27
    54c2:	c9 f5       	brne	.+114    	; 0x5536 <aggregate_recalc+0x72c>
    54c4:	79 c0       	rjmp	.+242    	; 0x55b8 <aggregate_recalc+0x7ae>
    
  case AGG_MIN_FLOAT:
  case AGG_MAX_FLOAT:
  case AGG_SUM_FLOAT:
    return MELD_FLOAT(v1) != MELD_FLOAT(v2);
    54c6:	ad 85       	ldd	r26, Y+13	; 0x0d
    54c8:	be 85       	ldd	r27, Y+14	; 0x0e
    54ca:	2d 91       	ld	r18, X+
    54cc:	3d 91       	ld	r19, X+
    54ce:	4d 91       	ld	r20, X+
    54d0:	5c 91       	ld	r21, X
    54d2:	f7 01       	movw	r30, r14
    54d4:	60 81       	ld	r22, Z
    54d6:	71 81       	ldd	r23, Z+1	; 0x01
    54d8:	82 81       	ldd	r24, Z+2	; 0x02
    54da:	93 81       	ldd	r25, Z+3	; 0x03
    54dc:	0e 94 27 39 	call	0x724e	; 0x724e <__cmpsf2>
    54e0:	81 11       	cpse	r24, r1
    54e2:	29 c0       	rjmp	.+82     	; 0x5536 <aggregate_recalc+0x72c>
    54e4:	69 c0       	rjmp	.+210    	; 0x55b8 <aggregate_recalc+0x7ae>

  case AGG_SET_UNION_INT:
  case AGG_SET_UNION_FLOAT: {
    Set *setOld = MELD_SET(v1);
    Set *setNew = MELD_SET(v2);
    54e6:	ad 85       	ldd	r26, Y+13	; 0x0d
    54e8:	be 85       	ldd	r27, Y+14	; 0x0e
    54ea:	cd 90       	ld	r12, X+
    54ec:	dc 90       	ld	r13, X

    if(!set_equal(setOld, setNew))
    54ee:	b6 01       	movw	r22, r12
    54f0:	f7 01       	movw	r30, r14
    54f2:	80 81       	ld	r24, Z
    54f4:	91 81       	ldd	r25, Z+1	; 0x01
    54f6:	0e 94 56 34 	call	0x68ac	; 0x68ac <set_equal>
    54fa:	89 2b       	or	r24, r25
    54fc:	e1 f0       	breq	.+56     	; 0x5536 <aggregate_recalc+0x72c>
      return true;

    /* delete new set union */
    set_delete(setNew);
    54fe:	c6 01       	movw	r24, r12
    5500:	0e 94 97 34 	call	0x692e	; 0x692e <set_delete>
    5504:	59 c0       	rjmp	.+178    	; 0x55b8 <aggregate_recalc+0x7ae>
    break;

  case AGG_SUM_LIST_INT:
  case AGG_SUM_LIST_FLOAT: {
    List *listOld = MELD_LIST(v1);
    List *listNew = MELD_LIST(v2);
    5506:	ad 85       	ldd	r26, Y+13	; 0x0d
    5508:	be 85       	ldd	r27, Y+14	; 0x0e
    550a:	cd 90       	ld	r12, X+
    550c:	dc 90       	ld	r13, X

    if(!list_equal(listOld, listNew))
    550e:	b6 01       	movw	r22, r12
    5510:	f7 01       	movw	r30, r14
    5512:	80 81       	ld	r24, Z
    5514:	91 81       	ldd	r25, Z+1	; 0x01
    5516:	0e 94 81 37 	call	0x6f02	; 0x6f02 <list_equal>
    551a:	89 2b       	or	r24, r25
    551c:	61 f0       	breq	.+24     	; 0x5536 <aggregate_recalc+0x72c>
      return true;

    /* delete new list */
    list_delete(listNew);
    551e:	c6 01       	movw	r24, r12
    5520:	0e 94 6a 37 	call	0x6ed4	; 0x6ed4 <list_delete>
    5524:	49 c0       	rjmp	.+146    	; 0x55b8 <aggregate_recalc+0x7ae>
    return false;
  }
    break;

  default:
    assert(0);
    5526:	43 eb       	ldi	r20, 0xB3	; 179
    5528:	55 e2       	ldi	r21, 0x25	; 37
    552a:	64 ef       	ldi	r22, 0xF4	; 244
    552c:	71 e0       	ldi	r23, 0x01	; 1
    552e:	85 eb       	ldi	r24, 0xB5	; 181
    5530:	95 e2       	ldi	r25, 0x25	; 37
    5532:	0e 94 e5 19 	call	0x33ca	; 0x33ca <__myassert>
  void *acc_area = GET_TUPLE_FIELD(agg->tuple, agg_field);

  if(first_run)
    memcpy(acc_area, accumulator, size);
  else if (aggregate_changed(agg_type, acc_area, accumulator)) {
    tuple_process(agg->tuple, TYPE_START(type), -1, reg);
    5536:	af 80       	ldd	r10, Y+7	; 0x07
    5538:	b8 84       	ldd	r11, Y+8	; 0x08
    553a:	26 e5       	ldi	r18, 0x56	; 86
    553c:	30 e2       	ldi	r19, 0x20	; 32
    553e:	a2 0e       	add	r10, r18
    5540:	b3 1e       	adc	r11, r19
    5542:	d5 01       	movw	r26, r10
    5544:	6d 91       	ld	r22, X+
    5546:	7c 91       	ld	r23, X
    5548:	62 0f       	add	r22, r18
    554a:	73 1f       	adc	r23, r19
    554c:	2a 85       	ldd	r18, Y+10	; 0x0a
    554e:	3b 85       	ldd	r19, Y+11	; 0x0b
    5550:	4f ef       	ldi	r20, 0xFF	; 255
    5552:	5f ef       	ldi	r21, 0xFF	; 255
    5554:	f4 01       	movw	r30, r8
    5556:	84 81       	ldd	r24, Z+4	; 0x04
    5558:	95 81       	ldd	r25, Z+5	; 0x05
    555a:	0e 94 27 20 	call	0x404e	; 0x404e <tuple_process>
    aggregate_free(agg->tuple, agg_field, agg_type);
    555e:	49 81       	ldd	r20, Y+1	; 0x01
    5560:	69 85       	ldd	r22, Y+9	; 0x09
    5562:	d4 01       	movw	r26, r8
    5564:	14 96       	adiw	r26, 0x04	; 4
    5566:	8d 91       	ld	r24, X+
    5568:	9c 91       	ld	r25, X
    556a:	15 97       	sbiw	r26, 0x05	; 5
    556c:	0e 94 c1 1d 	call	0x3b82	; 0x3b82 <aggregate_free>
    memcpy(acc_area, accumulator, size);
    5570:	4e 81       	ldd	r20, Y+6	; 0x06
    5572:	50 e0       	ldi	r21, 0x00	; 0
    5574:	6d 85       	ldd	r22, Y+13	; 0x0d
    5576:	7e 85       	ldd	r23, Y+14	; 0x0e
    5578:	c7 01       	movw	r24, r14
    557a:	0e 94 2c 3e 	call	0x7c58	; 0x7c58 <memcpy>
    if (total_copy > 0) /* copy right side from target tuple */
    557e:	41 14       	cp	r4, r1
    5580:	51 04       	cpc	r5, r1
    5582:	61 f0       	breq	.+24     	; 0x559c <aggregate_recalc+0x792>
      memcpy(((unsigned char *)agg->tuple) + size_offset, ((unsigned char *)target_tuple) + size_offset, total_copy);
    5584:	f4 01       	movw	r30, r8
    5586:	24 81       	ldd	r18, Z+4	; 0x04
    5588:	35 81       	ldd	r19, Z+5	; 0x05
    558a:	20 0f       	add	r18, r16
    558c:	31 1f       	adc	r19, r17
    558e:	02 0d       	add	r16, r2
    5590:	13 1d       	adc	r17, r3
    5592:	a2 01       	movw	r20, r4
    5594:	b8 01       	movw	r22, r16
    5596:	c9 01       	movw	r24, r18
    5598:	0e 94 2c 3e 	call	0x7c58	; 0x7c58 <memcpy>
    tuple_process(agg->tuple, TYPE_START(type), 1, reg);
    559c:	d5 01       	movw	r26, r10
    559e:	6d 91       	ld	r22, X+
    55a0:	7c 91       	ld	r23, X
    55a2:	6a 5a       	subi	r22, 0xAA	; 170
    55a4:	7f 4d       	sbci	r23, 0xDF	; 223
    55a6:	2a 85       	ldd	r18, Y+10	; 0x0a
    55a8:	3b 85       	ldd	r19, Y+11	; 0x0b
    55aa:	41 e0       	ldi	r20, 0x01	; 1
    55ac:	50 e0       	ldi	r21, 0x00	; 0
    55ae:	f4 01       	movw	r30, r8
    55b0:	84 81       	ldd	r24, Z+4	; 0x04
    55b2:	95 81       	ldd	r25, Z+5	; 0x05
    55b4:	0e 94 27 20 	call	0x404e	; 0x404e <tuple_process>
  }

  free(accumulator);
    55b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    55ba:	9e 85       	ldd	r25, Y+14	; 0x0e
}
    55bc:	60 96       	adiw	r28, 0x10	; 16
    55be:	cd bf       	out	0x3d, r28	; 61
    55c0:	de bf       	out	0x3e, r29	; 62
    55c2:	df 91       	pop	r29
    55c4:	cf 91       	pop	r28
    55c6:	1f 91       	pop	r17
    55c8:	0f 91       	pop	r16
    55ca:	ff 90       	pop	r15
    55cc:	ef 90       	pop	r14
    55ce:	df 90       	pop	r13
    55d0:	cf 90       	pop	r12
    55d2:	bf 90       	pop	r11
    55d4:	af 90       	pop	r10
    55d6:	9f 90       	pop	r9
    55d8:	8f 90       	pop	r8
    55da:	7f 90       	pop	r7
    55dc:	6f 90       	pop	r6
    55de:	5f 90       	pop	r5
    55e0:	4f 90       	pop	r4
    55e2:	3f 90       	pop	r3
    55e4:	2f 90       	pop	r2
    if (total_copy > 0) /* copy right side from target tuple */
      memcpy(((unsigned char *)agg->tuple) + size_offset, ((unsigned char *)target_tuple) + size_offset, total_copy);
    tuple_process(agg->tuple, TYPE_START(type), 1, reg);
  }

  free(accumulator);
    55e6:	0c 94 40 3c 	jmp	0x7880	; 0x7880 <free>
    target_tuple = tuple;

  for (cur = agg_list->next; cur != NULL; cur = cur->next) {
    if(aggregate_accumulate(agg_type, accumulator,
			    GET_TUPLE_FIELD(cur->tuple, agg_field), cur->records.count))
      target_tuple = cur->tuple;
    55ea:	2a 80       	ldd	r2, Y+2	; 0x02
    55ec:	3b 80       	ldd	r3, Y+3	; 0x03
    55ee:	1c cf       	rjmp	.-456    	; 0x5428 <aggregate_recalc+0x61e>

000055f0 <tuple_do_handle>:
  
  return tuple;
}

void tuple_do_handle(tuple_type type,	tuple_t tuple, int isNew, Register *reg)
{
    55f0:	2f 92       	push	r2
    55f2:	3f 92       	push	r3
    55f4:	4f 92       	push	r4
    55f6:	5f 92       	push	r5
    55f8:	6f 92       	push	r6
    55fa:	7f 92       	push	r7
    55fc:	8f 92       	push	r8
    55fe:	9f 92       	push	r9
    5600:	af 92       	push	r10
    5602:	bf 92       	push	r11
    5604:	cf 92       	push	r12
    5606:	df 92       	push	r13
    5608:	ef 92       	push	r14
    560a:	ff 92       	push	r15
    560c:	0f 93       	push	r16
    560e:	1f 93       	push	r17
    5610:	cf 93       	push	r28
    5612:	df 93       	push	r29
    5614:	cd b7       	in	r28, 0x3d	; 61
    5616:	de b7       	in	r29, 0x3e	; 62
    5618:	66 97       	sbiw	r28, 0x16	; 22
    561a:	cd bf       	out	0x3d, r28	; 61
    561c:	de bf       	out	0x3e, r29	; 62
    561e:	8c 01       	movw	r16, r24
    5620:	1b 01       	movw	r2, r22
    5622:	2a 01       	movw	r4, r20
    5624:	29 87       	std	Y+9, r18	; 0x09
    5626:	3a 87       	std	Y+10, r19	; 0x0a
  if(TYPE_IS_PROVED(type)) {
    5628:	fc 01       	movw	r30, r24
    562a:	ea 5a       	subi	r30, 0xAA	; 170
    562c:	ff 4d       	sbci	r31, 0xDF	; 223
    562e:	81 81       	ldd	r24, Z+1	; 0x01
    5630:	28 2f       	mov	r18, r24
    5632:	30 e0       	ldi	r19, 0x00	; 0
    5634:	2d 87       	std	Y+13, r18	; 0x0d
    5636:	3e 87       	std	Y+14, r19	; 0x0e
    5638:	49 01       	movw	r8, r18
    563a:	88 e5       	ldi	r24, 0x58	; 88
    563c:	90 e2       	ldi	r25, 0x20	; 32
    563e:	88 0e       	add	r8, r24
    5640:	99 1e       	adc	r9, r25
    5642:	d4 01       	movw	r26, r8
    5644:	8c 91       	ld	r24, X
    5646:	86 ff       	sbrs	r24, 6
    5648:	8e c0       	rjmp	.+284    	; 0x5766 <tuple_do_handle+0x176>
    PROVED[type] += (meld_int)isNew;
    564a:	c8 01       	movw	r24, r16
    564c:	88 0f       	add	r24, r24
    564e:	99 1f       	adc	r25, r25
    5650:	88 0f       	add	r24, r24
    5652:	99 1f       	adc	r25, r25
    5654:	e0 91 7b 2f 	lds	r30, 0x2F7B
    5658:	f0 91 7c 2f 	lds	r31, 0x2F7C
    565c:	e8 0f       	add	r30, r24
    565e:	f9 1f       	adc	r31, r25
    5660:	c2 01       	movw	r24, r4
    5662:	aa 27       	eor	r26, r26
    5664:	97 fd       	sbrc	r25, 7
    5666:	a0 95       	com	r26
    5668:	ba 2f       	mov	r27, r26
    566a:	40 81       	ld	r20, Z
    566c:	51 81       	ldd	r21, Z+1	; 0x01
    566e:	62 81       	ldd	r22, Z+2	; 0x02
    5670:	73 81       	ldd	r23, Z+3	; 0x03
    5672:	84 0f       	add	r24, r20
    5674:	95 1f       	adc	r25, r21
    5676:	a6 1f       	adc	r26, r22
    5678:	b7 1f       	adc	r27, r23
    567a:	80 83       	st	Z, r24
    567c:	91 83       	std	Z+1, r25	; 0x01
    567e:	a2 83       	std	Z+2, r26	; 0x02
    5680:	b3 83       	std	Z+3, r27	; 0x03
    5682:	8d 83       	std	Y+5, r24	; 0x05
    5684:	9e 83       	std	Y+6, r25	; 0x06
    5686:	af 83       	std	Y+7, r26	; 0x07
    5688:	b8 87       	std	Y+8, r27	; 0x08
}

static inline tuple_t
tuple_build_proved(tuple_type type, meld_int total)
{
  tuple_t tuple = tuple_alloc(TYPE_PROVED);
    568a:	c0 90 44 20 	lds	r12, 0x2044
    568e:	d0 90 45 20 	lds	r13, 0x2045

static inline tuple_t
tuple_alloc(tuple_type type)
{
#ifdef TUPLE_ALLOC_CHECKS
  if(type >= NUM_TYPES || type < 0) {
    5692:	80 91 56 20 	lds	r24, 0x2056
    5696:	90 e0       	ldi	r25, 0x00	; 0
    5698:	c8 16       	cp	r12, r24
    569a:	d9 06       	cpc	r13, r25
    569c:	14 f4       	brge	.+4      	; 0x56a2 <tuple_do_handle+0xb2>
    569e:	d7 fe       	sbrs	r13, 7
    56a0:	12 c0       	rjmp	.+36     	; 0x56c6 <tuple_do_handle+0xd6>
    fprintf(stderr, "Unrecognized type: %d\n", type);
    56a2:	df 92       	push	r13
    56a4:	cf 92       	push	r12
    56a6:	82 e9       	ldi	r24, 0x92	; 146
    56a8:	94 e2       	ldi	r25, 0x24	; 36
    56aa:	9f 93       	push	r25
    56ac:	8f 93       	push	r24
    56ae:	80 91 88 2f 	lds	r24, 0x2F88
    56b2:	8f 93       	push	r24
    56b4:	80 91 87 2f 	lds	r24, 0x2F87
    56b8:	8f 93       	push	r24
    56ba:	0e 94 45 3e 	call	0x7c8a	; 0x7c8a <fprintf>
    exit(EXIT_FAILURE);
    56be:	8f ef       	ldi	r24, 0xFF	; 255
    56c0:	9f ef       	ldi	r25, 0xFF	; 255
    56c2:	0e 94 73 41 	call	0x82e6	; 0x82e6 <_exit>
  }
#endif
  
	tuple_t tuple = ALLOC_TUPLE(TYPE_SIZE(type));
    56c6:	a0 90 3e 29 	lds	r10, 0x293E
    56ca:	b0 90 3f 29 	lds	r11, 0x293F
    56ce:	36 01       	movw	r6, r12
    56d0:	66 0c       	add	r6, r6
    56d2:	77 1c       	adc	r7, r7
    56d4:	6a 0c       	add	r6, r10
    56d6:	7b 1c       	adc	r7, r11
    56d8:	f3 01       	movw	r30, r6
    56da:	81 81       	ldd	r24, Z+1	; 0x01
    56dc:	90 e0       	ldi	r25, 0x00	; 0
    56de:	0e 94 a5 3b 	call	0x774a	; 0x774a <malloc>
    56e2:	7c 01       	movw	r14, r24

	TUPLE_TYPE(tuple) = type;
    56e4:	dc 01       	movw	r26, r24
    56e6:	cc 92       	st	X, r12
  meld_int type_int = (meld_int)type;
    56e8:	c8 01       	movw	r24, r16
    56ea:	aa 27       	eor	r26, r26
    56ec:	97 fd       	sbrc	r25, 7
    56ee:	a0 95       	com	r26
    56f0:	ba 2f       	mov	r27, r26
    56f2:	89 83       	std	Y+1, r24	; 0x01
    56f4:	9a 83       	std	Y+2, r25	; 0x02
    56f6:	ab 83       	std	Y+3, r26	; 0x03
    56f8:	bc 83       	std	Y+4, r27	; 0x04
  
  SET_TUPLE_FIELD(tuple, 0, &type_int);
    56fa:	f3 01       	movw	r30, r6
    56fc:	80 81       	ld	r24, Z
    56fe:	f5 01       	movw	r30, r10
    5700:	e8 0f       	add	r30, r24
    5702:	f1 1d       	adc	r31, r1
    5704:	21 81       	ldd	r18, Z+1	; 0x01
    5706:	30 e0       	ldi	r19, 0x00	; 0
    5708:	2f 5f       	subi	r18, 0xFF	; 255
    570a:	3f 4f       	sbci	r19, 0xFF	; 255
    570c:	2e 0d       	add	r18, r14
    570e:	3f 1d       	adc	r19, r15
    5710:	40 81       	ld	r20, Z
    5712:	50 e0       	ldi	r21, 0x00	; 0
    5714:	be 01       	movw	r22, r28
    5716:	6f 5f       	subi	r22, 0xFF	; 255
    5718:	7f 4f       	sbci	r23, 0xFF	; 255
    571a:	c9 01       	movw	r24, r18
    571c:	0e 94 2c 3e 	call	0x7c58	; 0x7c58 <memcpy>
  SET_TUPLE_FIELD(tuple, 1, &total);
    5720:	80 91 3e 29 	lds	r24, 0x293E
    5724:	90 91 3f 29 	lds	r25, 0x293F
    5728:	d7 01       	movw	r26, r14
    572a:	2c 91       	ld	r18, X
    572c:	fc 01       	movw	r30, r24
    572e:	e2 0f       	add	r30, r18
    5730:	f1 1d       	adc	r31, r1
    5732:	e2 0f       	add	r30, r18
    5734:	f1 1d       	adc	r31, r1
    5736:	20 81       	ld	r18, Z
    5738:	fc 01       	movw	r30, r24
    573a:	e2 0f       	add	r30, r18
    573c:	f1 1d       	adc	r31, r1
    573e:	23 81       	ldd	r18, Z+3	; 0x03
    5740:	30 e0       	ldi	r19, 0x00	; 0
    5742:	2f 5f       	subi	r18, 0xFF	; 255
    5744:	3f 4f       	sbci	r19, 0xFF	; 255
    5746:	2e 0d       	add	r18, r14
    5748:	3f 1d       	adc	r19, r15
    574a:	42 81       	ldd	r20, Z+2	; 0x02
    574c:	ce 01       	movw	r24, r28
    574e:	05 96       	adiw	r24, 0x05	; 5
    5750:	50 e0       	ldi	r21, 0x00	; 0
    5752:	bc 01       	movw	r22, r24
    5754:	c9 01       	movw	r24, r18
    5756:	0e 94 2c 3e 	call	0x7c58	; 0x7c58 <memcpy>
    PROVED[type] += (meld_int)isNew;
    tuple_t _proved = tuple_build_proved(type, PROVED[type]);
#ifdef DEBUG_PROVED_TUPLES
    printf("New proved for tuple %s: %d\n", tuple_names[type], PROVED[type]);
#endif
    PUSH_NEW_TUPLE(_proved);
    575a:	61 e0       	ldi	r22, 0x01	; 1
    575c:	70 e0       	ldi	r23, 0x00	; 0
    575e:	c7 01       	movw	r24, r14
    5760:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <enqueueNewTuple>
    5764:	34 c0       	rjmp	.+104    	; 0x57ce <tuple_do_handle+0x1de>
  } else if(type == TYPE_PROVED) {
    5766:	80 91 44 20 	lds	r24, 0x2044
    576a:	90 91 45 20 	lds	r25, 0x2045
    576e:	08 17       	cp	r16, r24
    5770:	19 07       	cpc	r17, r25
    5772:	71 f4       	brne	.+28     	; 0x5790 <tuple_do_handle+0x1a0>
    tuple_process(tuple, TYPE_START(type), isNew, reg);
    5774:	ed 85       	ldd	r30, Y+13	; 0x0d
    5776:	fe 85       	ldd	r31, Y+14	; 0x0e
    5778:	ea 5a       	subi	r30, 0xAA	; 170
    577a:	ff 4d       	sbci	r31, 0xDF	; 223
    577c:	60 81       	ld	r22, Z
    577e:	71 81       	ldd	r23, Z+1	; 0x01
    5780:	6a 5a       	subi	r22, 0xAA	; 170
    5782:	7f 4d       	sbci	r23, 0xDF	; 223
    5784:	29 85       	ldd	r18, Y+9	; 0x09
    5786:	3a 85       	ldd	r19, Y+10	; 0x0a
    5788:	c1 01       	movw	r24, r2
    578a:	0e 94 27 20 	call	0x404e	; 0x404e <tuple_process>
    578e:	07 c0       	rjmp	.+14     	; 0x579e <tuple_do_handle+0x1ae>
    FREE_TUPLE(tuple);
    return;
  } else if(type == TYPE_TERMINATE) {
    5790:	80 91 42 20 	lds	r24, 0x2042
    5794:	90 91 43 20 	lds	r25, 0x2043
    5798:	08 17       	cp	r16, r24
    579a:	19 07       	cpc	r17, r25
    579c:	c1 f4       	brne	.+48     	; 0x57ce <tuple_do_handle+0x1de>
    FREE_TUPLE(tuple);
    579e:	c1 01       	movw	r24, r2
  tuple_entry *entry =
    queue_enqueue(&TUPLES[type], tuple_cpy, (record_type)agg_queue);

  aggregate_recalc(entry, reg, true);
  tuple_process(tuple, TYPE_START(type), isNew, reg);
}
    57a0:	66 96       	adiw	r28, 0x16	; 22
    57a2:	cd bf       	out	0x3d, r28	; 61
    57a4:	de bf       	out	0x3e, r29	; 62
    57a6:	df 91       	pop	r29
    57a8:	cf 91       	pop	r28
    57aa:	1f 91       	pop	r17
    57ac:	0f 91       	pop	r16
    57ae:	ff 90       	pop	r15
    57b0:	ef 90       	pop	r14
    57b2:	df 90       	pop	r13
    57b4:	cf 90       	pop	r12
    57b6:	bf 90       	pop	r11
    57b8:	af 90       	pop	r10
    57ba:	9f 90       	pop	r9
    57bc:	8f 90       	pop	r8
    57be:	7f 90       	pop	r7
    57c0:	6f 90       	pop	r6
    57c2:	5f 90       	pop	r5
    57c4:	4f 90       	pop	r4
    57c6:	3f 90       	pop	r3
    57c8:	2f 90       	pop	r2
  } else if(type == TYPE_PROVED) {
    tuple_process(tuple, TYPE_START(type), isNew, reg);
    FREE_TUPLE(tuple);
    return;
  } else if(type == TYPE_TERMINATE) {
    FREE_TUPLE(tuple);
    57ca:	0c 94 40 3c 	jmp	0x7880	; 0x7880 <free>
    TERMINATE_CURRENT();
    return;
  }
  
  if(!TYPE_IS_AGG(type) && TYPE_IS_PERSISTENT(type)) {
    57ce:	f4 01       	movw	r30, r8
    57d0:	20 81       	ld	r18, Z
    57d2:	c8 01       	movw	r24, r16
    57d4:	88 0f       	add	r24, r24
    57d6:	99 1f       	adc	r25, r25
    57d8:	20 fd       	sbrc	r18, 0
    57da:	8b c0       	rjmp	.+278    	; 0x58f2 <tuple_do_handle+0x302>
    57dc:	21 ff       	sbrs	r18, 1
    57de:	8b c0       	rjmp	.+278    	; 0x58f6 <tuple_do_handle+0x306>
    persistent_set *persistents = &PERSISTENT[type];
    57e0:	46 e0       	ldi	r20, 0x06	; 6
    57e2:	40 9f       	mul	r20, r16
    57e4:	90 01       	movw	r18, r0
    57e6:	41 9f       	mul	r20, r17
    57e8:	30 0d       	add	r19, r0
    57ea:	11 24       	eor	r1, r1
    57ec:	00 91 5f 2f 	lds	r16, 0x2F5F
    57f0:	10 91 60 2f 	lds	r17, 0x2F60
    57f4:	02 0f       	add	r16, r18
    57f6:	13 1f       	adc	r17, r19
    int i;
    int size = TYPE_SIZE(type);
    57f8:	e0 91 3e 29 	lds	r30, 0x293E
    57fc:	f0 91 3f 29 	lds	r31, 0x293F
    5800:	e8 0f       	add	r30, r24
    5802:	f9 1f       	adc	r31, r25
    5804:	71 80       	ldd	r7, Z+1	; 0x01
    5806:	c7 2c       	mov	r12, r7
    5808:	d1 2c       	mov	r13, r1
    
    if(isNew < 0) {
    580a:	57 fc       	sbrc	r5, 7
    580c:	0a c0       	rjmp	.+20     	; 0x5822 <tuple_do_handle+0x232>
      fprintf(stderr, "meld: persistent types can't be deleted\n");
      exit(EXIT_FAILURE);
    }
    
    for(i = 0; i < persistents->total; ++i) {
    580e:	d8 01       	movw	r26, r16
    5810:	12 96       	adiw	r26, 0x02	; 2
    5812:	ed 90       	ld	r14, X+
    5814:	fc 90       	ld	r15, X
    5816:	13 97       	sbiw	r26, 0x03	; 3
  SET_TUPLE_FIELD(tuple, 1, &total);
  
  return tuple;
}

void tuple_do_handle(tuple_type type,	tuple_t tuple, int isNew, Register *reg)
    5818:	81 2c       	mov	r8, r1
    581a:	91 2c       	mov	r9, r1
    581c:	a1 2c       	mov	r10, r1
    581e:	b1 2c       	mov	r11, r1
    5820:	1e c0       	rjmp	.+60     	; 0x585e <tuple_do_handle+0x26e>
    persistent_set *persistents = &PERSISTENT[type];
    int i;
    int size = TYPE_SIZE(type);
    
    if(isNew < 0) {
      fprintf(stderr, "meld: persistent types can't be deleted\n");
    5822:	60 91 87 2f 	lds	r22, 0x2F87
    5826:	70 91 88 2f 	lds	r23, 0x2F88
    582a:	80 ee       	ldi	r24, 0xE0	; 224
    582c:	96 e2       	ldi	r25, 0x26	; 38
    582e:	0e 94 87 3e 	call	0x7d0e	; 0x7d0e <fputs>
      exit(EXIT_FAILURE);
    5832:	8f ef       	ldi	r24, 0xFF	; 255
    5834:	9f ef       	ldi	r25, 0xFF	; 255
    5836:	0e 94 73 41 	call	0x82e6	; 0x82e6 <_exit>
    }
    
    for(i = 0; i < persistents->total; ++i) {
      void *stored_tuple = persistents->array + i * size;
    583a:	f8 01       	movw	r30, r16
    583c:	80 81       	ld	r24, Z
    583e:	91 81       	ldd	r25, Z+1	; 0x01
      
      if(memcmp(stored_tuple, tuple, size) == 0) {
    5840:	47 2d       	mov	r20, r7
    5842:	50 e0       	ldi	r21, 0x00	; 0
    5844:	b1 01       	movw	r22, r2
    5846:	88 0d       	add	r24, r8
    5848:	99 1d       	adc	r25, r9
    584a:	0e 94 1f 3e 	call	0x7c3e	; 0x7c3e <memcmp>
    584e:	8c 0c       	add	r8, r12
    5850:	9d 1c       	adc	r9, r13
    5852:	00 97       	sbiw	r24, 0x00	; 0
    5854:	09 f4       	brne	.+2      	; 0x5858 <tuple_do_handle+0x268>
    5856:	a3 cf       	rjmp	.-186    	; 0x579e <tuple_do_handle+0x1ae>
    if(isNew < 0) {
      fprintf(stderr, "meld: persistent types can't be deleted\n");
      exit(EXIT_FAILURE);
    }
    
    for(i = 0; i < persistents->total; ++i) {
    5858:	ff ef       	ldi	r31, 0xFF	; 255
    585a:	af 1a       	sub	r10, r31
    585c:	bf 0a       	sbc	r11, r31
    585e:	ae 14       	cp	r10, r14
    5860:	bf 04       	cpc	r11, r15
    5862:	5c f3       	brlt	.-42     	; 0x583a <tuple_do_handle+0x24a>
        return;
      }
    }
    
    /* new tuple */
    if(persistents->total == persistents->current) {
    5864:	d8 01       	movw	r26, r16
    5866:	14 96       	adiw	r26, 0x04	; 4
    5868:	8d 91       	ld	r24, X+
    586a:	9c 91       	ld	r25, X
    586c:	15 97       	sbiw	r26, 0x05	; 5
    586e:	e8 16       	cp	r14, r24
    5870:	f9 06       	cpc	r15, r25
    5872:	11 f5       	brne	.+68     	; 0x58b8 <tuple_do_handle+0x2c8>
      if(persistents->total == 0)
    5874:	e1 14       	cp	r14, r1
    5876:	f1 04       	cpc	r15, r1
    5878:	39 f4       	brne	.+14     	; 0x5888 <tuple_do_handle+0x298>
        persistents->total = PERSISTENT_INITIAL;
    587a:	82 e0       	ldi	r24, 0x02	; 2
    587c:	90 e0       	ldi	r25, 0x00	; 0
    587e:	12 96       	adiw	r26, 0x02	; 2
    5880:	8d 93       	st	X+, r24
    5882:	9c 93       	st	X, r25
    5884:	13 97       	sbiw	r26, 0x03	; 3
    5886:	05 c0       	rjmp	.+10     	; 0x5892 <tuple_do_handle+0x2a2>
      else
        persistents->total *= 2;
    5888:	ee 0c       	add	r14, r14
    588a:	ff 1c       	adc	r15, r15
    588c:	f8 01       	movw	r30, r16
    588e:	e2 82       	std	Z+2, r14	; 0x02
    5890:	f3 82       	std	Z+3, r15	; 0x03
        
      persistents->array = realloc(persistents->array, size * persistents->total);
    5892:	d8 01       	movw	r26, r16
    5894:	12 96       	adiw	r26, 0x02	; 2
    5896:	8d 91       	ld	r24, X+
    5898:	9c 91       	ld	r25, X
    589a:	13 97       	sbiw	r26, 0x03	; 3
    589c:	c8 9e       	mul	r12, r24
    589e:	b0 01       	movw	r22, r0
    58a0:	c9 9e       	mul	r12, r25
    58a2:	70 0d       	add	r23, r0
    58a4:	d8 9e       	mul	r13, r24
    58a6:	70 0d       	add	r23, r0
    58a8:	11 24       	eor	r1, r1
    58aa:	8d 91       	ld	r24, X+
    58ac:	9c 91       	ld	r25, X
    58ae:	0e 94 3a 3d 	call	0x7a74	; 0x7a74 <realloc>
    58b2:	f8 01       	movw	r30, r16
    58b4:	80 83       	st	Z, r24
    58b6:	91 83       	std	Z+1, r25	; 0x01
    }
    
    memcpy(persistents->array + persistents->current * size, tuple, size);
    58b8:	d8 01       	movw	r26, r16
    58ba:	14 96       	adiw	r26, 0x04	; 4
    58bc:	2d 91       	ld	r18, X+
    58be:	3c 91       	ld	r19, X
    58c0:	15 97       	sbiw	r26, 0x05	; 5
    58c2:	c2 9e       	mul	r12, r18
    58c4:	c0 01       	movw	r24, r0
    58c6:	c3 9e       	mul	r12, r19
    58c8:	90 0d       	add	r25, r0
    58ca:	d2 9e       	mul	r13, r18
    58cc:	90 0d       	add	r25, r0
    58ce:	11 24       	eor	r1, r1
    58d0:	2d 91       	ld	r18, X+
    58d2:	3c 91       	ld	r19, X
    58d4:	28 0f       	add	r18, r24
    58d6:	39 1f       	adc	r19, r25
    58d8:	47 2d       	mov	r20, r7
    58da:	50 e0       	ldi	r21, 0x00	; 0
    58dc:	b1 01       	movw	r22, r2
    58de:	c9 01       	movw	r24, r18
    58e0:	0e 94 2c 3e 	call	0x7c58	; 0x7c58 <memcpy>
    ++persistents->current;
    58e4:	f8 01       	movw	r30, r16
    58e6:	84 81       	ldd	r24, Z+4	; 0x04
    58e8:	95 81       	ldd	r25, Z+5	; 0x05
    58ea:	01 96       	adiw	r24, 0x01	; 1
    58ec:	84 83       	std	Z+4, r24	; 0x04
    58ee:	95 83       	std	Z+5, r25	; 0x05
    58f0:	7c c2       	rjmp	.+1272   	; 0x5dea <tuple_do_handle+0x7fa>
    tuple_process(tuple, TYPE_START(type), isNew, reg);
    
    return;
  }
  
  if (!TYPE_IS_AGG(type) || TYPE_IS_LINEAR(type))
    58f2:	22 ff       	sbrs	r18, 2
    58f4:	7e c1       	rjmp	.+764    	; 0x5bf2 <tuple_do_handle+0x602>
    {
      tuple_queue *queue = &TUPLES[type];
    58f6:	98 01       	movw	r18, r16
    58f8:	22 0f       	add	r18, r18
    58fa:	33 1f       	adc	r19, r19
    58fc:	22 0f       	add	r18, r18
    58fe:	33 1f       	adc	r19, r19
    5900:	e0 90 61 2f 	lds	r14, 0x2F61
    5904:	f0 90 62 2f 	lds	r15, 0x2F62
    5908:	e2 0e       	add	r14, r18
    590a:	f3 1e       	adc	r15, r19
      tuple_entry** current;
      tuple_entry* cur;
		
      for (current = &queue->head;
    590c:	67 01       	movw	r12, r14
	{
	  cur = *current;

	  if (memcmp(cur->tuple,
		     tuple,
		     TYPE_SIZE(type)) == 0)
    590e:	01 96       	adiw	r24, 0x01	; 1
    5910:	60 90 3e 29 	lds	r6, 0x293E
    5914:	70 90 3f 29 	lds	r7, 0x293F
    5918:	68 0e       	add	r6, r24
    591a:	79 1e       	adc	r7, r25
    {
      tuple_queue *queue = &TUPLES[type];
      tuple_entry** current;
      tuple_entry* cur;
		
      for (current = &queue->head;
    591c:	60 c0       	rjmp	.+192    	; 0x59de <tuple_do_handle+0x3ee>
	   *current != NULL;
	   current = &(*current)->next)
	{
	  cur = *current;

	  if (memcmp(cur->tuple,
    591e:	d3 01       	movw	r26, r6
    5920:	4c 91       	ld	r20, X
    5922:	50 e0       	ldi	r21, 0x00	; 0
    5924:	b1 01       	movw	r22, r2
    5926:	f5 01       	movw	r30, r10
    5928:	84 81       	ldd	r24, Z+4	; 0x04
    592a:	95 81       	ldd	r25, Z+5	; 0x05
    592c:	0e 94 1f 3e 	call	0x7c3e	; 0x7c3e <memcmp>
    5930:	00 97       	sbiw	r24, 0x00	; 0
    5932:	09 f0       	breq	.+2      	; 0x5936 <tuple_do_handle+0x346>
    5934:	53 c0       	rjmp	.+166    	; 0x59dc <tuple_do_handle+0x3ec>
		     tuple,
		     TYPE_SIZE(type)) == 0)
	    {
	      cur->records.count += isNew;
    5936:	d5 01       	movw	r26, r10
    5938:	12 96       	adiw	r26, 0x02	; 2
    593a:	8d 91       	ld	r24, X+
    593c:	9c 91       	ld	r25, X
    593e:	13 97       	sbiw	r26, 0x03	; 3
    5940:	84 0d       	add	r24, r4
    5942:	95 1d       	adc	r25, r5
    5944:	12 96       	adiw	r26, 0x02	; 2
    5946:	8d 93       	st	X+, r24
    5948:	9c 93       	st	X, r25
    594a:	13 97       	sbiw	r26, 0x03	; 3

	      if (cur->records.count <= 0) {
    594c:	18 16       	cp	r1, r24
    594e:	19 06       	cpc	r1, r25
    5950:	0c f4       	brge	.+2      	; 0x5954 <tuple_do_handle+0x364>
    5952:	25 cf       	rjmp	.-438    	; 0x579e <tuple_do_handle+0x1ae>
		/* only process if it isn't linear */
		if (!TYPE_IS_LINEAR(type)) {
    5954:	f4 01       	movw	r30, r8
    5956:	80 81       	ld	r24, Z
    5958:	82 fd       	sbrc	r24, 2
    595a:	15 c0       	rjmp	.+42     	; 0x5986 <tuple_do_handle+0x396>
		  tuple_process(tuple, TYPE_START(TUPLE_TYPE(tuple)), -1, reg);
    595c:	d1 01       	movw	r26, r2
    595e:	ec 91       	ld	r30, X
    5960:	f0 e0       	ldi	r31, 0x00	; 0
    5962:	ea 5a       	subi	r30, 0xAA	; 170
    5964:	ff 4d       	sbci	r31, 0xDF	; 223
    5966:	e1 81       	ldd	r30, Z+1	; 0x01
    5968:	f0 e0       	ldi	r31, 0x00	; 0
    596a:	ea 5a       	subi	r30, 0xAA	; 170
    596c:	ff 4d       	sbci	r31, 0xDF	; 223
    596e:	60 81       	ld	r22, Z
    5970:	71 81       	ldd	r23, Z+1	; 0x01
    5972:	6a 5a       	subi	r22, 0xAA	; 170
    5974:	7f 4d       	sbci	r23, 0xDF	; 223
    5976:	29 85       	ldd	r18, Y+9	; 0x09
    5978:	3a 85       	ldd	r19, Y+10	; 0x0a
    597a:	4f ef       	ldi	r20, 0xFF	; 255
    597c:	5f ef       	ldi	r21, 0xFF	; 255
    597e:	c1 01       	movw	r24, r2
    5980:	0e 94 27 20 	call	0x404e	; 0x404e <tuple_process>
    5984:	26 c0       	rjmp	.+76     	; 0x59d2 <tuple_do_handle+0x3e2>
		  FREE_TUPLE(queue_dequeue_pos(queue, current));
		} else {
		  if(DELTA_WITH(type)) {
    5986:	00 0f       	add	r16, r16
    5988:	11 1f       	adc	r17, r17
    598a:	e0 91 40 29 	lds	r30, 0x2940
    598e:	f0 91 41 29 	lds	r31, 0x2941
    5992:	e0 0f       	add	r30, r16
    5994:	f1 1f       	adc	r31, r17
    5996:	80 81       	ld	r24, Z
    5998:	91 81       	ldd	r25, Z+1	; 0x01
    599a:	89 2b       	or	r24, r25
    599c:	d1 f0       	breq	.+52     	; 0x59d2 <tuple_do_handle+0x3e2>
		    if(OLDTUPLES[type])
    599e:	e0 91 7d 2f 	lds	r30, 0x2F7D
    59a2:	f0 91 7e 2f 	lds	r31, 0x2F7E
    59a6:	e0 0f       	add	r30, r16
    59a8:	f1 1f       	adc	r31, r17
    59aa:	80 81       	ld	r24, Z
    59ac:	91 81       	ldd	r25, Z+1	; 0x01
    59ae:	00 97       	sbiw	r24, 0x00	; 0
    59b0:	11 f0       	breq	.+4      	; 0x59b6 <tuple_do_handle+0x3c6>
		      FREE_TUPLE(OLDTUPLES[type]);
    59b2:	0e 94 40 3c 	call	0x7880	; 0x7880 <free>
                
		    OLDTUPLES[type] = queue_dequeue_pos(queue, current);
    59b6:	a0 90 7d 2f 	lds	r10, 0x2F7D
    59ba:	b0 90 7e 2f 	lds	r11, 0x2F7E
    59be:	a0 0e       	add	r10, r16
    59c0:	b1 1e       	adc	r11, r17
    59c2:	b6 01       	movw	r22, r12
    59c4:	c7 01       	movw	r24, r14
    59c6:	0e 94 33 1d 	call	0x3a66	; 0x3a66 <queue_dequeue_pos>
    59ca:	f5 01       	movw	r30, r10
    59cc:	80 83       	st	Z, r24
    59ce:	91 83       	std	Z+1, r25	; 0x01
    59d0:	e6 ce       	rjmp	.-564    	; 0x579e <tuple_do_handle+0x1ae>
		  } else
		    FREE_TUPLE(queue_dequeue_pos(queue, current));
    59d2:	b6 01       	movw	r22, r12
    59d4:	c7 01       	movw	r24, r14
    59d6:	0e 94 33 1d 	call	0x3a66	; 0x3a66 <queue_dequeue_pos>
    59da:	a9 c1       	rjmp	.+850    	; 0x5d2e <tuple_do_handle+0x73e>
      tuple_entry** current;
      tuple_entry* cur;
		
      for (current = &queue->head;
	   *current != NULL;
	   current = &(*current)->next)
    59dc:	65 01       	movw	r12, r10
      tuple_queue *queue = &TUPLES[type];
      tuple_entry** current;
      tuple_entry* cur;
		
      for (current = &queue->head;
	   *current != NULL;
    59de:	d6 01       	movw	r26, r12
    59e0:	ad 90       	ld	r10, X+
    59e2:	bc 90       	ld	r11, X
    {
      tuple_queue *queue = &TUPLES[type];
      tuple_entry** current;
      tuple_entry* cur;
		
      for (current = &queue->head;
    59e4:	a1 14       	cp	r10, r1
    59e6:	b1 04       	cpc	r11, r1
    59e8:	09 f0       	breq	.+2      	; 0x59ec <tuple_do_handle+0x3fc>
    59ea:	99 cf       	rjmp	.-206    	; 0x591e <tuple_do_handle+0x32e>
	      return;
	    }
	}

      // if deleting, return
      if (isNew <= 0) {
    59ec:	14 14       	cp	r1, r4
    59ee:	15 04       	cpc	r1, r5
    59f0:	0c f0       	brlt	.+2      	; 0x59f4 <tuple_do_handle+0x404>
    59f2:	d5 ce       	rjmp	.-598    	; 0x579e <tuple_do_handle+0x1ae>
	FREE_TUPLE(tuple);
	return;
      }

      queue_enqueue(queue, tuple, (record_type) isNew);
    59f4:	a2 01       	movw	r20, r4
    59f6:	b1 01       	movw	r22, r2
    59f8:	c7 01       	movw	r24, r14
    59fa:	0e 94 39 1e 	call	0x3c72	; 0x3c72 <queue_enqueue>

      if(TYPE_IS_LINEAR(type) && DELTA_WITH(type))
    59fe:	f4 01       	movw	r30, r8
    5a00:	80 81       	ld	r24, Z
    5a02:	82 ff       	sbrs	r24, 2
    5a04:	ee c0       	rjmp	.+476    	; 0x5be2 <tuple_do_handle+0x5f2>
    5a06:	48 01       	movw	r8, r16
    5a08:	88 0c       	add	r8, r8
    5a0a:	99 1c       	adc	r9, r9
    5a0c:	e0 91 40 29 	lds	r30, 0x2940
    5a10:	f0 91 41 29 	lds	r31, 0x2941
    5a14:	e8 0d       	add	r30, r8
    5a16:	f9 1d       	adc	r31, r9
    5a18:	80 81       	ld	r24, Z
    5a1a:	91 81       	ldd	r25, Z+1	; 0x01
    5a1c:	89 2b       	or	r24, r25
    5a1e:	09 f4       	brne	.+2      	; 0x5a22 <tuple_do_handle+0x432>
    5a20:	e0 c0       	rjmp	.+448    	; 0x5be2 <tuple_do_handle+0x5f2>
}

static inline
void process_deltas(tuple_t tuple, tuple_type type, Register *reg)
{
  void *old = OLDTUPLES[type];
    5a22:	e0 91 7d 2f 	lds	r30, 0x2F7D
    5a26:	f0 91 7e 2f 	lds	r31, 0x2F7E
    5a2a:	e8 0d       	add	r30, r8
    5a2c:	f9 1d       	adc	r31, r9
    5a2e:	e0 80       	ld	r14, Z
    5a30:	f1 80       	ldd	r15, Z+1	; 0x01
  
  if(old == NULL)
    5a32:	e1 14       	cp	r14, r1
    5a34:	f1 04       	cpc	r15, r1
    5a36:	09 f4       	brne	.+2      	; 0x5a3a <tuple_do_handle+0x44a>
    5a38:	d4 c0       	rjmp	.+424    	; 0x5be2 <tuple_do_handle+0x5f2>
    return;
    
  OLDTUPLES[type] = NULL;
    5a3a:	10 82       	st	Z, r1
    5a3c:	11 82       	std	Z+1, r1	; 0x01
    5a3e:	21 e0       	ldi	r18, 0x01	; 1
    5a40:	30 e0       	ldi	r19, 0x00	; 0
    5a42:	2b 87       	std	Y+11, r18	; 0x0b
    5a44:	3c 87       	std	Y+12, r19	; 0x0c

  int i;
  for(i = 0; i < DELTA_TOTAL(type); ++i) {
    5a46:	a1 2c       	mov	r10, r1
    5a48:	b1 2c       	mov	r11, r1
    5a4a:	bc c0       	rjmp	.+376    	; 0x5bc4 <tuple_do_handle+0x5d4>
    int delta_type = DELTA_TYPE(type, i);
    5a4c:	e0 91 42 29 	lds	r30, 0x2942
    5a50:	f0 91 43 29 	lds	r31, 0x2943
    5a54:	e8 0d       	add	r30, r8
    5a56:	f9 1d       	adc	r31, r9
    5a58:	80 81       	ld	r24, Z
    5a5a:	91 81       	ldd	r25, Z+1	; 0x01
    5a5c:	f5 01       	movw	r30, r10
    5a5e:	ee 0f       	add	r30, r30
    5a60:	ff 1f       	adc	r31, r31
    5a62:	e8 0f       	add	r30, r24
    5a64:	f9 1f       	adc	r31, r25
    5a66:	30 81       	ld	r19, Z
    int delta_pos = DELTA_POSITION(type, i);
    5a68:	eb 85       	ldd	r30, Y+11	; 0x0b
    5a6a:	fc 85       	ldd	r31, Y+12	; 0x0c
    5a6c:	e8 0f       	add	r30, r24
    5a6e:	f9 1f       	adc	r31, r25
    5a70:	20 81       	ld	r18, Z
    void *delta_tuple = ALLOC_TUPLE(TYPE_SIZE(delta_type));
    5a72:	60 90 3e 29 	lds	r6, 0x293E
    5a76:	70 90 3f 29 	lds	r7, 0x293F
    5a7a:	63 01       	movw	r12, r6
    5a7c:	c3 0e       	add	r12, r19
    5a7e:	d1 1c       	adc	r13, r1
    5a80:	c3 0e       	add	r12, r19
    5a82:	d1 1c       	adc	r13, r1
    5a84:	d6 01       	movw	r26, r12
    5a86:	11 96       	adiw	r26, 0x01	; 1
    5a88:	4c 91       	ld	r20, X
    5a8a:	84 2f       	mov	r24, r20
    5a8c:	90 e0       	ldi	r25, 0x00	; 0
    5a8e:	2d 8b       	std	Y+21, r18	; 0x15
    5a90:	3c 8b       	std	Y+20, r19	; 0x14
    5a92:	4e 8b       	std	Y+22, r20	; 0x16
    5a94:	0e 94 a5 3b 	call	0x774a	; 0x774a <malloc>
    5a98:	8c 01       	movw	r16, r24

    memcpy(delta_tuple, old, TYPE_SIZE(delta_type));
    5a9a:	4e 89       	ldd	r20, Y+22	; 0x16
    5a9c:	50 e0       	ldi	r21, 0x00	; 0
    5a9e:	b7 01       	movw	r22, r14
    5aa0:	0e 94 2c 3e 	call	0x7c58	; 0x7c58 <memcpy>
    TUPLE_TYPE(delta_tuple) = delta_type;
    5aa4:	3c 89       	ldd	r19, Y+20	; 0x14
    5aa6:	f8 01       	movw	r30, r16
    5aa8:	30 83       	st	Z, r19

    void *field_delta = GET_TUPLE_FIELD(delta_tuple, delta_pos);
    5aaa:	2d 89       	ldd	r18, Y+21	; 0x15
    5aac:	30 e0       	ldi	r19, 0x00	; 0
    5aae:	c9 01       	movw	r24, r18
    5ab0:	88 0f       	add	r24, r24
    5ab2:	99 1f       	adc	r25, r25
    5ab4:	d6 01       	movw	r26, r12
    5ab6:	4c 91       	ld	r20, X
    5ab8:	86 0d       	add	r24, r6
    5aba:	97 1d       	adc	r25, r7
    5abc:	fc 01       	movw	r30, r24
    5abe:	e4 0f       	add	r30, r20
    5ac0:	f1 1d       	adc	r31, r1
    5ac2:	c1 80       	ldd	r12, Z+1	; 0x01
    5ac4:	d1 2c       	mov	r13, r1
    5ac6:	bf ef       	ldi	r27, 0xFF	; 255
    5ac8:	cb 1a       	sub	r12, r27
    5aca:	db 0a       	sbc	r13, r27
    5acc:	c0 0e       	add	r12, r16
    5ace:	d1 1e       	adc	r13, r17
    void *field_old = GET_TUPLE_FIELD(old, delta_pos);
    5ad0:	f7 01       	movw	r30, r14
    5ad2:	40 81       	ld	r20, Z
    5ad4:	f3 01       	movw	r30, r6
    5ad6:	e4 0f       	add	r30, r20
    5ad8:	f1 1d       	adc	r31, r1
    5ada:	e4 0f       	add	r30, r20
    5adc:	f1 1d       	adc	r31, r1
    5ade:	40 81       	ld	r20, Z
    5ae0:	fc 01       	movw	r30, r24
    5ae2:	e4 0f       	add	r30, r20
    5ae4:	f1 1d       	adc	r31, r1
    5ae6:	e1 81       	ldd	r30, Z+1	; 0x01
    5ae8:	6e 2f       	mov	r22, r30
    5aea:	70 e0       	ldi	r23, 0x00	; 0
    5aec:	6f 5f       	subi	r22, 0xFF	; 255
    5aee:	7f 4f       	sbci	r23, 0xFF	; 255
    5af0:	6e 0d       	add	r22, r14
    5af2:	7f 1d       	adc	r23, r15
    void *field_new = GET_TUPLE_FIELD(tuple, delta_pos);
    5af4:	d1 01       	movw	r26, r2
    5af6:	4c 91       	ld	r20, X
    5af8:	d3 01       	movw	r26, r6
    5afa:	a4 0f       	add	r26, r20
    5afc:	b1 1d       	adc	r27, r1
    5afe:	a4 0f       	add	r26, r20
    5b00:	b1 1d       	adc	r27, r1
    5b02:	4c 91       	ld	r20, X
    5b04:	dc 01       	movw	r26, r24
    5b06:	a4 0f       	add	r26, r20
    5b08:	b1 1d       	adc	r27, r1
    5b0a:	11 96       	adiw	r26, 0x01	; 1
    5b0c:	ac 91       	ld	r26, X
    5b0e:	b0 e0       	ldi	r27, 0x00	; 0
    5b10:	11 96       	adiw	r26, 0x01	; 1
    5b12:	a2 0d       	add	r26, r2
    5b14:	b3 1d       	adc	r27, r3

    switch(TYPE_ARG_TYPE(type, delta_pos)) {
    5b16:	ed 85       	ldd	r30, Y+13	; 0x0d
    5b18:	fe 85       	ldd	r31, Y+14	; 0x0e
    5b1a:	2e 0f       	add	r18, r30
    5b1c:	3f 1f       	adc	r19, r31
    5b1e:	23 5a       	subi	r18, 0xA3	; 163
    5b20:	3f 4d       	sbci	r19, 0xDF	; 223
    5b22:	f9 01       	movw	r30, r18
    5b24:	80 81       	ld	r24, Z
    5b26:	88 23       	and	r24, r24
    5b28:	19 f0       	breq	.+6      	; 0x5b30 <tuple_do_handle+0x540>
    5b2a:	81 30       	cpi	r24, 0x01	; 1
    5b2c:	39 f5       	brne	.+78     	; 0x5b7c <tuple_do_handle+0x58c>
    5b2e:	14 c0       	rjmp	.+40     	; 0x5b58 <tuple_do_handle+0x568>
    case FIELD_INT:
      MELD_INT(field_delta) = MELD_INT(field_new) - MELD_INT(field_old);
    5b30:	8d 91       	ld	r24, X+
    5b32:	9d 91       	ld	r25, X+
    5b34:	0d 90       	ld	r0, X+
    5b36:	bc 91       	ld	r27, X
    5b38:	a0 2d       	mov	r26, r0
    5b3a:	fb 01       	movw	r30, r22
    5b3c:	40 81       	ld	r20, Z
    5b3e:	51 81       	ldd	r21, Z+1	; 0x01
    5b40:	62 81       	ldd	r22, Z+2	; 0x02
    5b42:	73 81       	ldd	r23, Z+3	; 0x03
    5b44:	84 1b       	sub	r24, r20
    5b46:	95 0b       	sbc	r25, r21
    5b48:	a6 0b       	sbc	r26, r22
    5b4a:	b7 0b       	sbc	r27, r23
    5b4c:	f6 01       	movw	r30, r12
    5b4e:	80 83       	st	Z, r24
    5b50:	91 83       	std	Z+1, r25	; 0x01
    5b52:	a2 83       	std	Z+2, r26	; 0x02
    5b54:	b3 83       	std	Z+3, r27	; 0x03
    5b56:	1a c0       	rjmp	.+52     	; 0x5b8c <tuple_do_handle+0x59c>
      break;
    case FIELD_FLOAT:
      MELD_FLOAT(field_delta) = MELD_FLOAT(field_new) - MELD_FLOAT(field_old);
    5b58:	fb 01       	movw	r30, r22
    5b5a:	20 81       	ld	r18, Z
    5b5c:	31 81       	ldd	r19, Z+1	; 0x01
    5b5e:	42 81       	ldd	r20, Z+2	; 0x02
    5b60:	53 81       	ldd	r21, Z+3	; 0x03
    5b62:	6d 91       	ld	r22, X+
    5b64:	7d 91       	ld	r23, X+
    5b66:	8d 91       	ld	r24, X+
    5b68:	9c 91       	ld	r25, X
    5b6a:	0e 94 c2 38 	call	0x7184	; 0x7184 <__subsf3>
    5b6e:	d6 01       	movw	r26, r12
    5b70:	6d 93       	st	X+, r22
    5b72:	7d 93       	st	X+, r23
    5b74:	8d 93       	st	X+, r24
    5b76:	9c 93       	st	X, r25
    5b78:	13 97       	sbiw	r26, 0x03	; 3
    5b7a:	08 c0       	rjmp	.+16     	; 0x5b8c <tuple_do_handle+0x59c>
      break;
    default:
      assert(0);
    5b7c:	43 eb       	ldi	r20, 0xB3	; 179
    5b7e:	55 e2       	ldi	r21, 0x25	; 37
    5b80:	67 eb       	ldi	r22, 0xB7	; 183
    5b82:	72 e0       	ldi	r23, 0x02	; 2
    5b84:	85 eb       	ldi	r24, 0xB5	; 181
    5b86:	95 e2       	ldi	r25, 0x25	; 37
    5b88:	0e 94 e5 19 	call	0x33ca	; 0x33ca <__myassert>
      break;
    }

    tuple_process(delta_tuple, TYPE_START(TUPLE_TYPE(delta_tuple)), 1, reg);
    5b8c:	d8 01       	movw	r26, r16
    5b8e:	ec 91       	ld	r30, X
    5b90:	f0 e0       	ldi	r31, 0x00	; 0
    5b92:	ea 5a       	subi	r30, 0xAA	; 170
    5b94:	ff 4d       	sbci	r31, 0xDF	; 223
    5b96:	e1 81       	ldd	r30, Z+1	; 0x01
    5b98:	f0 e0       	ldi	r31, 0x00	; 0
    5b9a:	ea 5a       	subi	r30, 0xAA	; 170
    5b9c:	ff 4d       	sbci	r31, 0xDF	; 223
    5b9e:	60 81       	ld	r22, Z
    5ba0:	71 81       	ldd	r23, Z+1	; 0x01
    5ba2:	6a 5a       	subi	r22, 0xAA	; 170
    5ba4:	7f 4d       	sbci	r23, 0xDF	; 223
    5ba6:	29 85       	ldd	r18, Y+9	; 0x09
    5ba8:	3a 85       	ldd	r19, Y+10	; 0x0a
    5baa:	41 e0       	ldi	r20, 0x01	; 1
    5bac:	50 e0       	ldi	r21, 0x00	; 0
    5bae:	c8 01       	movw	r24, r16
    5bb0:	0e 94 27 20 	call	0x404e	; 0x404e <tuple_process>
    return;
    
  OLDTUPLES[type] = NULL;

  int i;
  for(i = 0; i < DELTA_TOTAL(type); ++i) {
    5bb4:	bf ef       	ldi	r27, 0xFF	; 255
    5bb6:	ab 1a       	sub	r10, r27
    5bb8:	bb 0a       	sbc	r11, r27
    5bba:	eb 85       	ldd	r30, Y+11	; 0x0b
    5bbc:	fc 85       	ldd	r31, Y+12	; 0x0c
    5bbe:	32 96       	adiw	r30, 0x02	; 2
    5bc0:	eb 87       	std	Y+11, r30	; 0x0b
    5bc2:	fc 87       	std	Y+12, r31	; 0x0c
    5bc4:	e0 91 40 29 	lds	r30, 0x2940
    5bc8:	f0 91 41 29 	lds	r31, 0x2941
    5bcc:	e8 0d       	add	r30, r8
    5bce:	f9 1d       	adc	r31, r9
    5bd0:	80 81       	ld	r24, Z
    5bd2:	91 81       	ldd	r25, Z+1	; 0x01
    5bd4:	a8 16       	cp	r10, r24
    5bd6:	b9 06       	cpc	r11, r25
    5bd8:	0c f4       	brge	.+2      	; 0x5bdc <tuple_do_handle+0x5ec>
    5bda:	38 cf       	rjmp	.-400    	; 0x5a4c <tuple_do_handle+0x45c>
    }

    tuple_process(delta_tuple, TYPE_START(TUPLE_TYPE(delta_tuple)), 1, reg);
  }

  FREE_TUPLE(old);
    5bdc:	c7 01       	movw	r24, r14
    5bde:	0e 94 40 3c 	call	0x7880	; 0x7880 <free>
      queue_enqueue(queue, tuple, (record_type) isNew);

      if(TYPE_IS_LINEAR(type) && DELTA_WITH(type))
	process_deltas(tuple, type, reg);

      tuple_process(tuple, TYPE_START(TUPLE_TYPE(tuple)), isNew, reg);
    5be2:	d1 01       	movw	r26, r2
    5be4:	ec 91       	ld	r30, X
    5be6:	f0 e0       	ldi	r31, 0x00	; 0
    5be8:	ea 5a       	subi	r30, 0xAA	; 170
    5bea:	ff 4d       	sbci	r31, 0xDF	; 223
    5bec:	e1 81       	ldd	r30, Z+1	; 0x01
    5bee:	f0 e0       	ldi	r31, 0x00	; 0
    5bf0:	fe c0       	rjmp	.+508    	; 0x5dee <tuple_do_handle+0x7fe>

      return;
    }

  unsigned char type_aggregate = TYPE_AGGREGATE(type);
    5bf2:	ed 85       	ldd	r30, Y+13	; 0x0d
    5bf4:	fe 85       	ldd	r31, Y+14	; 0x0e
    5bf6:	e7 5a       	subi	r30, 0xA7	; 167
    5bf8:	ff 4d       	sbci	r31, 0xDF	; 223
    5bfa:	20 81       	ld	r18, Z
    5bfc:	2b 87       	std	Y+11, r18	; 0x0b
  unsigned char field_aggregate = AGG_FIELD(type_aggregate);
    5bfe:	2f 70       	andi	r18, 0x0F	; 15
    5c00:	29 8b       	std	Y+17, r18	; 0x11

  tuple_entry **current;
  tuple_entry *cur;
  tuple_queue *queue = &(TUPLES[type]);
    5c02:	68 01       	movw	r12, r16
    5c04:	cc 0c       	add	r12, r12
    5c06:	dd 1c       	adc	r13, r13
    5c08:	cc 0c       	add	r12, r12
    5c0a:	dd 1c       	adc	r13, r13
    5c0c:	80 90 61 2f 	lds	r8, 0x2F61
    5c10:	90 90 62 2f 	lds	r9, 0x2F62
    5c14:	8c 0c       	add	r8, r12
    5c16:	9d 1c       	adc	r9, r13
	
  for (current = &queue->head;
    5c18:	8f 86       	std	Y+15, r8	; 0x0f
    5c1a:	98 8a       	std	Y+16, r9	; 0x10
       (*current) != NULL;
       current = &(*current)->next)
    {
      cur = *current;
    
      size_t sizeBegin = TYPE_FIELD_SIZE + TYPE_ARG_OFFSET(type, field_aggregate);
    5c1c:	a0 90 3e 29 	lds	r10, 0x293E
    5c20:	b0 90 3f 29 	lds	r11, 0x293F
    5c24:	7c 01       	movw	r14, r24
    5c26:	95 01       	movw	r18, r10
    5c28:	28 0f       	add	r18, r24
    5c2a:	39 1f       	adc	r19, r25
    5c2c:	2a 8b       	std	Y+18, r18	; 0x12
    5c2e:	3b 8b       	std	Y+19, r19	; 0x13
    5c30:	85 01       	movw	r16, r10
    5c32:	39 89       	ldd	r19, Y+17	; 0x11
    5c34:	03 0f       	add	r16, r19
    5c36:	11 1d       	adc	r17, r1
    5c38:	03 0f       	add	r16, r19
    5c3a:	11 1d       	adc	r17, r1

  tuple_entry **current;
  tuple_entry *cur;
  tuple_queue *queue = &(TUPLES[type]);
	
  for (current = &queue->head;
    5c3c:	9a c0       	rjmp	.+308    	; 0x5d72 <tuple_do_handle+0x782>
       (*current) != NULL;
       current = &(*current)->next)
    {
      cur = *current;
    
      size_t sizeBegin = TYPE_FIELD_SIZE + TYPE_ARG_OFFSET(type, field_aggregate);
    5c3e:	aa 89       	ldd	r26, Y+18	; 0x12
    5c40:	bb 89       	ldd	r27, Y+19	; 0x13
    5c42:	8c 91       	ld	r24, X
    5c44:	f8 01       	movw	r30, r16
    5c46:	e8 0f       	add	r30, r24
    5c48:	f1 1d       	adc	r31, r1
    5c4a:	41 81       	ldd	r20, Z+1	; 0x01
    5c4c:	50 e0       	ldi	r21, 0x00	; 0
    5c4e:	4f 5f       	subi	r20, 0xFF	; 255
    5c50:	5f 4f       	sbci	r21, 0xFF	; 255
      char *start = (char*)(cur->tuple);

      if(memcmp(start, tuple, sizeBegin))
    5c52:	b1 01       	movw	r22, r2
    5c54:	f3 01       	movw	r30, r6
    5c56:	84 81       	ldd	r24, Z+4	; 0x04
    5c58:	95 81       	ldd	r25, Z+5	; 0x05
    5c5a:	0e 94 1f 3e 	call	0x7c3e	; 0x7c3e <memcmp>
    5c5e:	00 97       	sbiw	r24, 0x00	; 0
    5c60:	19 f0       	breq	.+6      	; 0x5c68 <tuple_do_handle+0x678>
  tuple_entry *cur;
  tuple_queue *queue = &(TUPLES[type]);
	
  for (current = &queue->head;
       (*current) != NULL;
       current = &(*current)->next)
    5c62:	6f 86       	std	Y+15, r6	; 0x0f
    5c64:	78 8a       	std	Y+16, r7	; 0x10
    5c66:	85 c0       	rjmp	.+266    	; 0x5d72 <tuple_do_handle+0x782>
	size_t sizeEnd = TYPE_SIZE(type) - sizeOffset;

	if (memcmp(start + sizeOffset, (char*)tuple + sizeOffset, sizeEnd))
	continue;*/

      tuple_queue *agg_queue = cur->records.agg_queue;
    5c68:	d3 01       	movw	r26, r6
    5c6a:	12 96       	adiw	r26, 0x02	; 2
    5c6c:	0d 91       	ld	r16, X+
    5c6e:	1c 91       	ld	r17, X
    5c70:	13 97       	sbiw	r26, 0x03	; 3

      /* AGG_FIRST aggregate optimization */
      if(AGG_AGG(type_aggregate) == AGG_FIRST
    5c72:	bb 85       	ldd	r27, Y+11	; 0x0b
    5c74:	b2 95       	swap	r27
    5c76:	bf 70       	andi	r27, 0x0F	; 15
    5c78:	bb 87       	std	Y+11, r27	; 0x0b
    5c7a:	b1 30       	cpi	r27, 0x01	; 1
    5c7c:	49 f4       	brne	.+18     	; 0x5c90 <tuple_do_handle+0x6a0>
	 && isNew > 0
    5c7e:	14 14       	cp	r1, r4
    5c80:	15 04       	cpc	r1, r5
    5c82:	34 f4       	brge	.+12     	; 0x5c90 <tuple_do_handle+0x6a0>
	 && !queue_is_empty(agg_queue))
    5c84:	f8 01       	movw	r30, r16
    5c86:	80 81       	ld	r24, Z
    5c88:	91 81       	ldd	r25, Z+1	; 0x01
    5c8a:	89 2b       	or	r24, r25
    5c8c:	09 f0       	breq	.+2      	; 0x5c90 <tuple_do_handle+0x6a0>
    5c8e:	87 cd       	rjmp	.-1266   	; 0x579e <tuple_do_handle+0x1ae>
	}

      tuple_entry** current2;
      tuple_entry* cur2;
		
      for (current2 = &agg_queue->head;
    5c90:	68 01       	movw	r12, r16
	   *current2 != NULL;
	   current2 = &(*current2)->next)
	{
	  cur2 = *current2;

	  if (memcmp(cur2->tuple, tuple, TYPE_SIZE(type)) == 0)
    5c92:	ae 0c       	add	r10, r14
    5c94:	bf 1c       	adc	r11, r15
    5c96:	ff ef       	ldi	r31, 0xFF	; 255
    5c98:	af 1a       	sub	r10, r31
    5c9a:	bf 0a       	sbc	r11, r31
	}

      tuple_entry** current2;
      tuple_entry* cur2;
		
      for (current2 = &agg_queue->head;
    5c9c:	53 c0       	rjmp	.+166    	; 0x5d44 <tuple_do_handle+0x754>
	   *current2 != NULL;
	   current2 = &(*current2)->next)
	{
	  cur2 = *current2;

	  if (memcmp(cur2->tuple, tuple, TYPE_SIZE(type)) == 0)
    5c9e:	d5 01       	movw	r26, r10
    5ca0:	4c 91       	ld	r20, X
    5ca2:	50 e0       	ldi	r21, 0x00	; 0
    5ca4:	b1 01       	movw	r22, r2
    5ca6:	f7 01       	movw	r30, r14
    5ca8:	84 81       	ldd	r24, Z+4	; 0x04
    5caa:	95 81       	ldd	r25, Z+5	; 0x05
    5cac:	0e 94 1f 3e 	call	0x7c3e	; 0x7c3e <memcmp>
    5cb0:	00 97       	sbiw	r24, 0x00	; 0
    5cb2:	09 f0       	breq	.+2      	; 0x5cb6 <tuple_do_handle+0x6c6>
    5cb4:	46 c0       	rjmp	.+140    	; 0x5d42 <tuple_do_handle+0x752>
	    {
	      cur2->records.count += isNew;
    5cb6:	d7 01       	movw	r26, r14
    5cb8:	12 96       	adiw	r26, 0x02	; 2
    5cba:	8d 91       	ld	r24, X+
    5cbc:	9c 91       	ld	r25, X
    5cbe:	13 97       	sbiw	r26, 0x03	; 3
    5cc0:	84 0d       	add	r24, r4
    5cc2:	95 1d       	adc	r25, r5
    5cc4:	12 96       	adiw	r26, 0x02	; 2
    5cc6:	8d 93       	st	X+, r24
    5cc8:	9c 93       	st	X, r25
    5cca:	13 97       	sbiw	r26, 0x03	; 3

	      if (cur2->records.count <= 0) {
    5ccc:	18 16       	cp	r1, r24
    5cce:	19 06       	cpc	r1, r25
    5cd0:	8c f1       	brlt	.+98     	; 0x5d34 <tuple_do_handle+0x744>
		// remove it
		FREE_TUPLE(queue_dequeue_pos(agg_queue, current2));
    5cd2:	b6 01       	movw	r22, r12
    5cd4:	c8 01       	movw	r24, r16
    5cd6:	0e 94 33 1d 	call	0x3a66	; 0x3a66 <queue_dequeue_pos>
    5cda:	0e 94 40 3c 	call	0x7880	; 0x7880 <free>

		if (queue_is_empty(agg_queue)) {
    5cde:	f8 01       	movw	r30, r16
    5ce0:	80 81       	ld	r24, Z
    5ce2:	91 81       	ldd	r25, Z+1	; 0x01
    5ce4:	89 2b       	or	r24, r25
    5ce6:	31 f5       	brne	.+76     	; 0x5d34 <tuple_do_handle+0x744>
		  /* aggregate is removed */
		  void *aggTuple = queue_dequeue_pos(queue, current);
    5ce8:	6f 85       	ldd	r22, Y+15	; 0x0f
    5cea:	78 89       	ldd	r23, Y+16	; 0x10
    5cec:	c4 01       	movw	r24, r8
    5cee:	0e 94 33 1d 	call	0x3a66	; 0x3a66 <queue_dequeue_pos>
    5cf2:	7c 01       	movw	r14, r24
						
		  /* delete queue */
		  free(agg_queue);
    5cf4:	c8 01       	movw	r24, r16
    5cf6:	0e 94 40 3c 	call	0x7880	; 0x7880 <free>

		  tuple_process(aggTuple, TYPE_START(TUPLE_TYPE(aggTuple)), -1, reg);
    5cfa:	d7 01       	movw	r26, r14
    5cfc:	ec 91       	ld	r30, X
    5cfe:	f0 e0       	ldi	r31, 0x00	; 0
    5d00:	ea 5a       	subi	r30, 0xAA	; 170
    5d02:	ff 4d       	sbci	r31, 0xDF	; 223
    5d04:	e1 81       	ldd	r30, Z+1	; 0x01
    5d06:	f0 e0       	ldi	r31, 0x00	; 0
    5d08:	ea 5a       	subi	r30, 0xAA	; 170
    5d0a:	ff 4d       	sbci	r31, 0xDF	; 223
    5d0c:	60 81       	ld	r22, Z
    5d0e:	71 81       	ldd	r23, Z+1	; 0x01
    5d10:	6a 5a       	subi	r22, 0xAA	; 170
    5d12:	7f 4d       	sbci	r23, 0xDF	; 223
    5d14:	29 85       	ldd	r18, Y+9	; 0x09
    5d16:	3a 85       	ldd	r19, Y+10	; 0x0a
    5d18:	4f ef       	ldi	r20, 0xFF	; 255
    5d1a:	5f ef       	ldi	r21, 0xFF	; 255
    5d1c:	c7 01       	movw	r24, r14
    5d1e:	0e 94 27 20 	call	0x404e	; 0x404e <tuple_process>
		  aggregate_free(aggTuple, field_aggregate, AGG_AGG(type_aggregate));
    5d22:	4b 85       	ldd	r20, Y+11	; 0x0b
    5d24:	69 89       	ldd	r22, Y+17	; 0x11
    5d26:	c7 01       	movw	r24, r14
    5d28:	0e 94 c1 1d 	call	0x3b82	; 0x3b82 <aggregate_free>
		  FREE_TUPLE(aggTuple);
    5d2c:	c7 01       	movw	r24, r14
    5d2e:	0e 94 40 3c 	call	0x7880	; 0x7880 <free>
    5d32:	35 cd       	rjmp	.-1430   	; 0x579e <tuple_do_handle+0x1ae>
		} else
		  aggregate_recalc(cur, reg, false);
	      } else
		aggregate_recalc(cur, reg, false);
    5d34:	40 e0       	ldi	r20, 0x00	; 0
    5d36:	69 85       	ldd	r22, Y+9	; 0x09
    5d38:	7a 85       	ldd	r23, Y+10	; 0x0a
    5d3a:	c3 01       	movw	r24, r6
    5d3c:	0e 94 05 27 	call	0x4e0a	; 0x4e0a <aggregate_recalc>
    5d40:	2e cd       	rjmp	.-1444   	; 0x579e <tuple_do_handle+0x1ae>
      tuple_entry** current2;
      tuple_entry* cur2;
		
      for (current2 = &agg_queue->head;
	   *current2 != NULL;
	   current2 = &(*current2)->next)
    5d42:	67 01       	movw	r12, r14

      tuple_entry** current2;
      tuple_entry* cur2;
		
      for (current2 = &agg_queue->head;
	   *current2 != NULL;
    5d44:	f6 01       	movw	r30, r12
    5d46:	e0 80       	ld	r14, Z
    5d48:	f1 80       	ldd	r15, Z+1	; 0x01
	}

      tuple_entry** current2;
      tuple_entry* cur2;
		
      for (current2 = &agg_queue->head;
    5d4a:	e1 14       	cp	r14, r1
    5d4c:	f1 04       	cpc	r15, r1
    5d4e:	09 f0       	breq	.+2      	; 0x5d52 <tuple_do_handle+0x762>
    5d50:	a6 cf       	rjmp	.-180    	; 0x5c9e <tuple_do_handle+0x6ae>
	      return;
	    }
	}

      // if deleting, return
      if (isNew <= 0) {
    5d52:	14 14       	cp	r1, r4
    5d54:	15 04       	cpc	r1, r5
    5d56:	0c f0       	brlt	.+2      	; 0x5d5a <tuple_do_handle+0x76a>
    5d58:	22 cd       	rjmp	.-1468   	; 0x579e <tuple_do_handle+0x1ae>
	FREE_TUPLE(tuple);
	return;
      }

      queue_enqueue(agg_queue, tuple, (record_type) isNew);
    5d5a:	a2 01       	movw	r20, r4
    5d5c:	b1 01       	movw	r22, r2
    5d5e:	c8 01       	movw	r24, r16
    5d60:	0e 94 39 1e 	call	0x3c72	; 0x3c72 <queue_enqueue>
      aggregate_recalc(cur, reg, false);
    5d64:	40 e0       	ldi	r20, 0x00	; 0
    5d66:	69 85       	ldd	r22, Y+9	; 0x09
    5d68:	7a 85       	ldd	r23, Y+10	; 0x0a
    5d6a:	c3 01       	movw	r24, r6
    5d6c:	0e 94 05 27 	call	0x4e0a	; 0x4e0a <aggregate_recalc>
		
      return;
    5d70:	4a c0       	rjmp	.+148    	; 0x5e06 <tuple_do_handle+0x816>
  tuple_entry **current;
  tuple_entry *cur;
  tuple_queue *queue = &(TUPLES[type]);
	
  for (current = &queue->head;
       (*current) != NULL;
    5d72:	af 85       	ldd	r26, Y+15	; 0x0f
    5d74:	b8 89       	ldd	r27, Y+16	; 0x10
    5d76:	6d 90       	ld	r6, X+
    5d78:	7c 90       	ld	r7, X

  tuple_entry **current;
  tuple_entry *cur;
  tuple_queue *queue = &(TUPLES[type]);
	
  for (current = &queue->head;
    5d7a:	61 14       	cp	r6, r1
    5d7c:	71 04       	cpc	r7, r1
    5d7e:	09 f0       	breq	.+2      	; 0x5d82 <tuple_do_handle+0x792>
    5d80:	5e cf       	rjmp	.-324    	; 0x5c3e <tuple_do_handle+0x64e>
		
      return;
    }

  // if deleting, return
  if (isNew <= 0) {
    5d82:	14 14       	cp	r1, r4
    5d84:	15 04       	cpc	r1, r5
    5d86:	0c f0       	brlt	.+2      	; 0x5d8a <tuple_do_handle+0x79a>
    5d88:	0a cd       	rjmp	.-1516   	; 0x579e <tuple_do_handle+0x1ae>
    FREE_TUPLE(tuple);
    return;
  }

  // So now we know we have a new tuple
  tuple_t tuple_cpy = ALLOC_TUPLE(TYPE_SIZE(type));
    5d8a:	f5 01       	movw	r30, r10
    5d8c:	ee 0d       	add	r30, r14
    5d8e:	ff 1d       	adc	r31, r15
    5d90:	41 81       	ldd	r20, Z+1	; 0x01
    5d92:	84 2f       	mov	r24, r20
    5d94:	90 e0       	ldi	r25, 0x00	; 0
    5d96:	4e 8b       	std	Y+22, r20	; 0x16
    5d98:	0e 94 a5 3b 	call	0x774a	; 0x774a <malloc>
    5d9c:	7c 01       	movw	r14, r24
  memcpy(tuple_cpy, tuple, TYPE_SIZE(type));
    5d9e:	4e 89       	ldd	r20, Y+22	; 0x16
    5da0:	50 e0       	ldi	r21, 0x00	; 0
    5da2:	b1 01       	movw	r22, r2
    5da4:	0e 94 2c 3e 	call	0x7c58	; 0x7c58 <memcpy>

  /* create aggregate queue */
  tuple_queue *agg_queue = malloc(sizeof(tuple_queue));
    5da8:	84 e0       	ldi	r24, 0x04	; 4
    5daa:	90 e0       	ldi	r25, 0x00	; 0
    5dac:	0e 94 a5 3b 	call	0x774a	; 0x774a <malloc>
    5db0:	b9 2e       	mov	r11, r25
    5db2:	08 2f       	mov	r16, r24
    5db4:	19 2f       	mov	r17, r25
void queue_push_tuple(tuple_queue *queue, tuple_entry *entry);

static inline void
queue_init(tuple_queue *queue)
{
  queue->head = queue->tail = NULL;
    5db6:	f8 01       	movw	r30, r16
    5db8:	12 82       	std	Z+2, r1	; 0x02
    5dba:	13 82       	std	Z+3, r1	; 0x03
    5dbc:	10 82       	st	Z, r1
    5dbe:	11 82       	std	Z+1, r1	; 0x01
  
  queue_init(agg_queue);
  
  queue_enqueue(agg_queue, tuple, (record_type) isNew);
    5dc0:	a2 01       	movw	r20, r4
    5dc2:	b1 01       	movw	r22, r2
    5dc4:	c8 01       	movw	r24, r16
    5dc6:	0e 94 39 1e 	call	0x3c72	; 0x3c72 <queue_enqueue>
  tuple_entry *entry =
    queue_enqueue(&TUPLES[type], tuple_cpy, (record_type)agg_queue);
    5dca:	80 91 61 2f 	lds	r24, 0x2F61
    5dce:	90 91 62 2f 	lds	r25, 0x2F62
  tuple_queue *agg_queue = malloc(sizeof(tuple_queue));
  
  queue_init(agg_queue);
  
  queue_enqueue(agg_queue, tuple, (record_type) isNew);
  tuple_entry *entry =
    5dd2:	40 2f       	mov	r20, r16
    5dd4:	5b 2d       	mov	r21, r11
    5dd6:	b7 01       	movw	r22, r14
    5dd8:	8c 0d       	add	r24, r12
    5dda:	9d 1d       	adc	r25, r13
    5ddc:	0e 94 39 1e 	call	0x3c72	; 0x3c72 <queue_enqueue>
    queue_enqueue(&TUPLES[type], tuple_cpy, (record_type)agg_queue);

  aggregate_recalc(entry, reg, true);
    5de0:	41 e0       	ldi	r20, 0x01	; 1
    5de2:	69 85       	ldd	r22, Y+9	; 0x09
    5de4:	7a 85       	ldd	r23, Y+10	; 0x0a
    5de6:	0e 94 05 27 	call	0x4e0a	; 0x4e0a <aggregate_recalc>
  tuple_process(tuple, TYPE_START(type), isNew, reg);
    5dea:	ed 85       	ldd	r30, Y+13	; 0x0d
    5dec:	fe 85       	ldd	r31, Y+14	; 0x0e
    5dee:	ea 5a       	subi	r30, 0xAA	; 170
    5df0:	ff 4d       	sbci	r31, 0xDF	; 223
    5df2:	60 81       	ld	r22, Z
    5df4:	71 81       	ldd	r23, Z+1	; 0x01
    5df6:	6a 5a       	subi	r22, 0xAA	; 170
    5df8:	7f 4d       	sbci	r23, 0xDF	; 223
    5dfa:	29 85       	ldd	r18, Y+9	; 0x09
    5dfc:	3a 85       	ldd	r19, Y+10	; 0x0a
    5dfe:	a2 01       	movw	r20, r4
    5e00:	c1 01       	movw	r24, r2
    5e02:	0e 94 27 20 	call	0x404e	; 0x404e <tuple_process>
}
    5e06:	66 96       	adiw	r28, 0x16	; 22
    5e08:	cd bf       	out	0x3d, r28	; 61
    5e0a:	de bf       	out	0x3e, r29	; 62
    5e0c:	df 91       	pop	r29
    5e0e:	cf 91       	pop	r28
    5e10:	1f 91       	pop	r17
    5e12:	0f 91       	pop	r16
    5e14:	ff 90       	pop	r15
    5e16:	ef 90       	pop	r14
    5e18:	df 90       	pop	r13
    5e1a:	cf 90       	pop	r12
    5e1c:	bf 90       	pop	r11
    5e1e:	af 90       	pop	r10
    5e20:	9f 90       	pop	r9
    5e22:	8f 90       	pop	r8
    5e24:	7f 90       	pop	r7
    5e26:	6f 90       	pop	r6
    5e28:	5f 90       	pop	r5
    5e2a:	4f 90       	pop	r4
    5e2c:	3f 90       	pop	r3
    5e2e:	2f 90       	pop	r2
    5e30:	08 95       	ret

00005e32 <tuple_print>:
  return RET_RET;
}

void
tuple_print(tuple_t tuple, FILE *fp)
{
    5e32:	2f 92       	push	r2
    5e34:	3f 92       	push	r3
    5e36:	4f 92       	push	r4
    5e38:	5f 92       	push	r5
    5e3a:	6f 92       	push	r6
    5e3c:	7f 92       	push	r7
    5e3e:	8f 92       	push	r8
    5e40:	9f 92       	push	r9
    5e42:	af 92       	push	r10
    5e44:	bf 92       	push	r11
    5e46:	cf 92       	push	r12
    5e48:	df 92       	push	r13
    5e4a:	ef 92       	push	r14
    5e4c:	ff 92       	push	r15
    5e4e:	0f 93       	push	r16
    5e50:	1f 93       	push	r17
    5e52:	cf 93       	push	r28
    5e54:	df 93       	push	r29
    5e56:	00 d0       	rcall	.+0      	; 0x5e58 <tuple_print+0x26>
    5e58:	1f 92       	push	r1
    5e5a:	cd b7       	in	r28, 0x3d	; 61
    5e5c:	de b7       	in	r29, 0x3e	; 62
    5e5e:	8c 01       	movw	r16, r24
    5e60:	1b 01       	movw	r2, r22
  unsigned char tuple_type = TUPLE_TYPE(tuple);
  int j;

  fprintf(fp, "%s(", TYPE_NAME(tuple_type));
    5e62:	dc 01       	movw	r26, r24
    5e64:	ec 90       	ld	r14, X
    5e66:	f1 2c       	mov	r15, r1
    5e68:	f7 01       	movw	r30, r14
    5e6a:	ee 0f       	add	r30, r30
    5e6c:	ff 1f       	adc	r31, r31
    5e6e:	e0 50       	subi	r30, 0x00	; 0
    5e70:	f0 4e       	sbci	r31, 0xE0	; 224
    5e72:	81 81       	ldd	r24, Z+1	; 0x01
    5e74:	8f 93       	push	r24
    5e76:	80 81       	ld	r24, Z
    5e78:	8f 93       	push	r24
    5e7a:	89 e0       	ldi	r24, 0x09	; 9
    5e7c:	97 e2       	ldi	r25, 0x27	; 39
    5e7e:	9f 93       	push	r25
    5e80:	8f 93       	push	r24
    5e82:	3f 92       	push	r3
    5e84:	6f 93       	push	r22
    5e86:	0e 94 45 3e 	call	0x7c8a	; 0x7c8a <fprintf>
  for(j = 0; j < TYPE_NOARGS(tuple_type); ++j) {
    5e8a:	0f 90       	pop	r0
    5e8c:	0f 90       	pop	r0
    5e8e:	0f 90       	pop	r0
    5e90:	0f 90       	pop	r0
    5e92:	0f 90       	pop	r0
    5e94:	0f 90       	pop	r0
    5e96:	19 82       	std	Y+1, r1	; 0x01
    5e98:	1a 82       	std	Y+2, r1	; 0x02
    5e9a:	f7 01       	movw	r30, r14
    5e9c:	e9 5a       	subi	r30, 0xA9	; 169
    5e9e:	ff 4d       	sbci	r31, 0xDF	; 223
    5ea0:	e0 80       	ld	r14, Z
    5ea2:	f1 2c       	mov	r15, r1
    5ea4:	97 01       	movw	r18, r14
    5ea6:	25 5a       	subi	r18, 0xA5	; 165
    5ea8:	3f 4d       	sbci	r19, 0xDF	; 223
    5eaa:	2b 83       	std	Y+3, r18	; 0x03
    5eac:	3c 83       	std	Y+4, r19	; 0x04
#else
      fprintf(fp, "%d", MELD_INT(field));
#endif
      break;
    case FIELD_FLOAT:
      fprintf(fp, "%f", (double)MELD_FLOAT(field));
    5eae:	b4 e1       	ldi	r27, 0x14	; 20
    5eb0:	6b 2e       	mov	r6, r27
    5eb2:	b7 e2       	ldi	r27, 0x27	; 39
    5eb4:	7b 2e       	mov	r7, r27
      fprintf(fp, ", ");

    switch(TYPE_ARG_TYPE(tuple_type, j)) {
    case FIELD_INT:
#ifndef BBSIM
      fprintf(fp, "%ld", MELD_INT(field));
    5eb6:	80 e1       	ldi	r24, 0x10	; 16
    5eb8:	c8 2e       	mov	r12, r24
    5eba:	87 e2       	ldi	r24, 0x27	; 39
    5ebc:	d8 2e       	mov	r13, r24
      break;
    case FIELD_FLOAT:
      fprintf(fp, "%f", (double)MELD_FLOAT(field));
      break;
    case FIELD_ADDR:
      fprintf(fp, "%p", MELD_PTR(field));
    5ebe:	97 e1       	ldi	r25, 0x17	; 23
    5ec0:	a9 2e       	mov	r10, r25
    5ec2:	97 e2       	ldi	r25, 0x27	; 39
    5ec4:	b9 2e       	mov	r11, r25
      break;
    case FIELD_LIST_INT:
      fprintf(fp, "list_int[%d][%p]", list_total(MELD_LIST(field)),
    5ec6:	2a e1       	ldi	r18, 0x1A	; 26
    5ec8:	82 2e       	mov	r8, r18
    5eca:	27 e2       	ldi	r18, 0x27	; 39
    5ecc:	92 2e       	mov	r9, r18
{
  unsigned char tuple_type = TUPLE_TYPE(tuple);
  int j;

  fprintf(fp, "%s(", TYPE_NAME(tuple_type));
  for(j = 0; j < TYPE_NOARGS(tuple_type); ++j) {
    5ece:	db c0       	rjmp	.+438    	; 0x6086 <__stack+0x87>
    void *field = GET_TUPLE_FIELD(tuple, j);
    5ed0:	80 91 3e 29 	lds	r24, 0x293E
    5ed4:	90 91 3f 29 	lds	r25, 0x293F
    5ed8:	d8 01       	movw	r26, r16
    5eda:	2c 91       	ld	r18, X
    5edc:	fc 01       	movw	r30, r24
    5ede:	e2 0f       	add	r30, r18
    5ee0:	f1 1d       	adc	r31, r1
    5ee2:	e2 0f       	add	r30, r18
    5ee4:	f1 1d       	adc	r31, r1
    5ee6:	20 81       	ld	r18, Z
    5ee8:	e9 81       	ldd	r30, Y+1	; 0x01
    5eea:	fa 81       	ldd	r31, Y+2	; 0x02
    5eec:	ee 0f       	add	r30, r30
    5eee:	ff 1f       	adc	r31, r31
    5ef0:	e8 0f       	add	r30, r24
    5ef2:	f9 1f       	adc	r31, r25
    5ef4:	e2 0f       	add	r30, r18
    5ef6:	f1 1d       	adc	r31, r1
    5ef8:	41 80       	ldd	r4, Z+1	; 0x01
    5efa:	51 2c       	mov	r5, r1
    5efc:	bf ef       	ldi	r27, 0xFF	; 255
    5efe:	4b 1a       	sub	r4, r27
    5f00:	5b 0a       	sbc	r5, r27
    5f02:	40 0e       	add	r4, r16
    5f04:	51 1e       	adc	r5, r17

    if (j > 0)
    5f06:	29 81       	ldd	r18, Y+1	; 0x01
    5f08:	3a 81       	ldd	r19, Y+2	; 0x02
    5f0a:	23 2b       	or	r18, r19
    5f0c:	29 f0       	breq	.+10     	; 0x5f18 <tuple_print+0xe6>
      fprintf(fp, ", ");
    5f0e:	b1 01       	movw	r22, r2
    5f10:	8d e0       	ldi	r24, 0x0D	; 13
    5f12:	97 e2       	ldi	r25, 0x27	; 39
    5f14:	0e 94 87 3e 	call	0x7d0e	; 0x7d0e <fputs>

    switch(TYPE_ARG_TYPE(tuple_type, j)) {
    5f18:	e9 81       	ldd	r30, Y+1	; 0x01
    5f1a:	fa 81       	ldd	r31, Y+2	; 0x02
    5f1c:	ee 0d       	add	r30, r14
    5f1e:	ff 1d       	adc	r31, r15
    5f20:	e3 5a       	subi	r30, 0xA3	; 163
    5f22:	ff 4d       	sbci	r31, 0xDF	; 223
    5f24:	80 81       	ld	r24, Z
    5f26:	84 30       	cpi	r24, 0x04	; 4
    5f28:	09 f4       	brne	.+2      	; 0x5f2c <tuple_print+0xfa>
    5f2a:	56 c0       	rjmp	.+172    	; 0x5fd8 <tuple_print+0x1a6>
    5f2c:	48 f4       	brcc	.+18     	; 0x5f40 <tuple_print+0x10e>
    5f2e:	81 30       	cpi	r24, 0x01	; 1
    5f30:	29 f1       	breq	.+74     	; 0x5f7c <tuple_print+0x14a>
    5f32:	90 f0       	brcs	.+36     	; 0x5f58 <tuple_print+0x126>
    5f34:	82 30       	cpi	r24, 0x02	; 2
    5f36:	d1 f1       	breq	.+116    	; 0x5fac <tuple_print+0x17a>
    5f38:	83 30       	cpi	r24, 0x03	; 3
    5f3a:	09 f0       	breq	.+2      	; 0x5f3e <tuple_print+0x10c>
    5f3c:	96 c0       	rjmp	.+300    	; 0x606a <__stack+0x6b>
    5f3e:	40 c0       	rjmp	.+128    	; 0x5fc0 <tuple_print+0x18e>
    5f40:	86 30       	cpi	r24, 0x06	; 6
    5f42:	09 f4       	brne	.+2      	; 0x5f46 <tuple_print+0x114>
    5f44:	6b c0       	rjmp	.+214    	; 0x601c <__stack+0x1d>
    5f46:	08 f4       	brcc	.+2      	; 0x5f4a <tuple_print+0x118>
    5f48:	53 c0       	rjmp	.+166    	; 0x5ff0 <tuple_print+0x1be>
    5f4a:	87 30       	cpi	r24, 0x07	; 7
    5f4c:	09 f4       	brne	.+2      	; 0x5f50 <tuple_print+0x11e>
    5f4e:	72 c0       	rjmp	.+228    	; 0x6034 <__stack+0x35>
    5f50:	88 30       	cpi	r24, 0x08	; 8
    5f52:	09 f0       	breq	.+2      	; 0x5f56 <tuple_print+0x124>
    5f54:	8a c0       	rjmp	.+276    	; 0x606a <__stack+0x6b>
    5f56:	7c c0       	rjmp	.+248    	; 0x6050 <__stack+0x51>
    case FIELD_INT:
#ifndef BBSIM
      fprintf(fp, "%ld", MELD_INT(field));
    5f58:	d2 01       	movw	r26, r4
    5f5a:	13 96       	adiw	r26, 0x03	; 3
    5f5c:	8c 91       	ld	r24, X
    5f5e:	13 97       	sbiw	r26, 0x03	; 3
    5f60:	8f 93       	push	r24
    5f62:	12 96       	adiw	r26, 0x02	; 2
    5f64:	8c 91       	ld	r24, X
    5f66:	12 97       	sbiw	r26, 0x02	; 2
    5f68:	8f 93       	push	r24
    5f6a:	11 96       	adiw	r26, 0x01	; 1
    5f6c:	8c 91       	ld	r24, X
    5f6e:	11 97       	sbiw	r26, 0x01	; 1
    5f70:	8f 93       	push	r24
    5f72:	8c 91       	ld	r24, X
    5f74:	8f 93       	push	r24
    5f76:	df 92       	push	r13
    5f78:	cf 92       	push	r12
    5f7a:	11 c0       	rjmp	.+34     	; 0x5f9e <tuple_print+0x16c>
#else
      fprintf(fp, "%d", MELD_INT(field));
#endif
      break;
    case FIELD_FLOAT:
      fprintf(fp, "%f", (double)MELD_FLOAT(field));
    5f7c:	d2 01       	movw	r26, r4
    5f7e:	13 96       	adiw	r26, 0x03	; 3
    5f80:	8c 91       	ld	r24, X
    5f82:	13 97       	sbiw	r26, 0x03	; 3
    5f84:	8f 93       	push	r24
    5f86:	12 96       	adiw	r26, 0x02	; 2
    5f88:	8c 91       	ld	r24, X
    5f8a:	12 97       	sbiw	r26, 0x02	; 2
    5f8c:	8f 93       	push	r24
    5f8e:	11 96       	adiw	r26, 0x01	; 1
    5f90:	8c 91       	ld	r24, X
    5f92:	11 97       	sbiw	r26, 0x01	; 1
    5f94:	8f 93       	push	r24
    5f96:	8c 91       	ld	r24, X
    5f98:	8f 93       	push	r24
    5f9a:	7f 92       	push	r7
    5f9c:	6f 92       	push	r6
    5f9e:	3f 92       	push	r3
    5fa0:	2f 92       	push	r2
    5fa2:	0e 94 45 3e 	call	0x7c8a	; 0x7c8a <fprintf>
      break;
    5fa6:	cd bf       	out	0x3d, r28	; 61
    5fa8:	de bf       	out	0x3e, r29	; 62
    5faa:	67 c0       	rjmp	.+206    	; 0x607a <__stack+0x7b>
    case FIELD_ADDR:
      fprintf(fp, "%p", MELD_PTR(field));
    5fac:	d2 01       	movw	r26, r4
    5fae:	11 96       	adiw	r26, 0x01	; 1
    5fb0:	8c 91       	ld	r24, X
    5fb2:	11 97       	sbiw	r26, 0x01	; 1
    5fb4:	8f 93       	push	r24
    5fb6:	8c 91       	ld	r24, X
    5fb8:	8f 93       	push	r24
    5fba:	bf 92       	push	r11
    5fbc:	af 92       	push	r10
    5fbe:	23 c0       	rjmp	.+70     	; 0x6006 <__stack+0x7>
      break;
    case FIELD_LIST_INT:
      fprintf(fp, "list_int[%d][%p]", list_total(MELD_LIST(field)),
    5fc0:	d2 01       	movw	r26, r4
    5fc2:	ed 91       	ld	r30, X+
    5fc4:	fc 91       	ld	r31, X
    5fc6:	ff 93       	push	r31
    5fc8:	ef 93       	push	r30
    5fca:	85 81       	ldd	r24, Z+5	; 0x05
    5fcc:	8f 93       	push	r24
    5fce:	84 81       	ldd	r24, Z+4	; 0x04
    5fd0:	8f 93       	push	r24
    5fd2:	9f 92       	push	r9
    5fd4:	8f 92       	push	r8
    5fd6:	e3 cf       	rjmp	.-58     	; 0x5f9e <tuple_print+0x16c>
	      MELD_LIST(field));
      break;
    case FIELD_LIST_FLOAT:
      fprintf(fp, "list_float[%d][%p]", list_total(MELD_LIST(field)),
    5fd8:	d2 01       	movw	r26, r4
    5fda:	ed 91       	ld	r30, X+
    5fdc:	fc 91       	ld	r31, X
    5fde:	ff 93       	push	r31
    5fe0:	ef 93       	push	r30
    5fe2:	85 81       	ldd	r24, Z+5	; 0x05
    5fe4:	8f 93       	push	r24
    5fe6:	84 81       	ldd	r24, Z+4	; 0x04
    5fe8:	8f 93       	push	r24
    5fea:	eb e2       	ldi	r30, 0x2B	; 43
    5fec:	f7 e2       	ldi	r31, 0x27	; 39
    5fee:	2d c0       	rjmp	.+90     	; 0x604a <__stack+0x4b>
	      MELD_LIST(field));
      break;
    case FIELD_LIST_ADDR:
      fprintf(fp, "list_addr[%p]", *(void **)field);
    5ff0:	d2 01       	movw	r26, r4
    5ff2:	11 96       	adiw	r26, 0x01	; 1
    5ff4:	8c 91       	ld	r24, X
    5ff6:	11 97       	sbiw	r26, 0x01	; 1
    5ff8:	8f 93       	push	r24
    5ffa:	8c 91       	ld	r24, X
    5ffc:	8f 93       	push	r24
    5ffe:	ee e3       	ldi	r30, 0x3E	; 62
    6000:	f7 e2       	ldi	r31, 0x27	; 39
    6002:	ff 93       	push	r31
    6004:	ef 93       	push	r30
    6006:	3f 92       	push	r3
    6008:	2f 92       	push	r2
    600a:	0e 94 45 3e 	call	0x7c8a	; 0x7c8a <fprintf>
      break;
    600e:	0f 90       	pop	r0
    6010:	0f 90       	pop	r0
    6012:	0f 90       	pop	r0
    6014:	0f 90       	pop	r0
    6016:	0f 90       	pop	r0
    6018:	0f 90       	pop	r0
    601a:	2f c0       	rjmp	.+94     	; 0x607a <__stack+0x7b>
    case FIELD_SET_INT:
      fprintf(fp, "set_int[%d][%p]", set_total(MELD_SET(field)),
    601c:	d2 01       	movw	r26, r4
    601e:	ed 91       	ld	r30, X+
    6020:	fc 91       	ld	r31, X
    6022:	ff 93       	push	r31
    6024:	ef 93       	push	r30
    6026:	83 81       	ldd	r24, Z+3	; 0x03
    6028:	8f 93       	push	r24
    602a:	82 81       	ldd	r24, Z+2	; 0x02
    602c:	8f 93       	push	r24
    602e:	ec e4       	ldi	r30, 0x4C	; 76
    6030:	f7 e2       	ldi	r31, 0x27	; 39
    6032:	0b c0       	rjmp	.+22     	; 0x604a <__stack+0x4b>
	      MELD_SET(field));
      break;
    case FIELD_SET_FLOAT:
      fprintf(fp, "set_float[%d][%p]", set_total(MELD_SET(field)),
    6034:	d2 01       	movw	r26, r4
    6036:	ed 91       	ld	r30, X+
    6038:	fc 91       	ld	r31, X
    603a:	ff 93       	push	r31
    603c:	ef 93       	push	r30
    603e:	83 81       	ldd	r24, Z+3	; 0x03
    6040:	8f 93       	push	r24
    6042:	82 81       	ldd	r24, Z+2	; 0x02
    6044:	8f 93       	push	r24
    6046:	ec e5       	ldi	r30, 0x5C	; 92
    6048:	f7 e2       	ldi	r31, 0x27	; 39
    604a:	ff 93       	push	r31
    604c:	ef 93       	push	r30
    604e:	a7 cf       	rjmp	.-178    	; 0x5f9e <tuple_print+0x16c>
	      MELD_SET(field));
      break;
    case FIELD_TYPE:
      fprintf(fp, "%s", TYPE_NAME(MELD_INT(field)));
    6050:	d2 01       	movw	r26, r4
    6052:	ed 91       	ld	r30, X+
    6054:	fc 91       	ld	r31, X
    6056:	ee 0f       	add	r30, r30
    6058:	ff 1f       	adc	r31, r31
    605a:	e0 50       	subi	r30, 0x00	; 0
    605c:	f0 4e       	sbci	r31, 0xE0	; 224
    605e:	b1 01       	movw	r22, r2
    6060:	80 81       	ld	r24, Z
    6062:	91 81       	ldd	r25, Z+1	; 0x01
    6064:	0e 94 87 3e 	call	0x7d0e	; 0x7d0e <fputs>
      break;
    6068:	08 c0       	rjmp	.+16     	; 0x607a <__stack+0x7b>
    default:
      assert(0);
    606a:	43 eb       	ldi	r20, 0xB3	; 179
    606c:	55 e2       	ldi	r21, 0x25	; 37
    606e:	66 e8       	ldi	r22, 0x86	; 134
    6070:	75 e0       	ldi	r23, 0x05	; 5
    6072:	85 eb       	ldi	r24, 0xB5	; 181
    6074:	95 e2       	ldi	r25, 0x25	; 37
    6076:	0e 94 e5 19 	call	0x33ca	; 0x33ca <__myassert>
{
  unsigned char tuple_type = TUPLE_TYPE(tuple);
  int j;

  fprintf(fp, "%s(", TYPE_NAME(tuple_type));
  for(j = 0; j < TYPE_NOARGS(tuple_type); ++j) {
    607a:	29 81       	ldd	r18, Y+1	; 0x01
    607c:	3a 81       	ldd	r19, Y+2	; 0x02
    607e:	2f 5f       	subi	r18, 0xFF	; 255
    6080:	3f 4f       	sbci	r19, 0xFF	; 255
    6082:	29 83       	std	Y+1, r18	; 0x01
    6084:	3a 83       	std	Y+2, r19	; 0x02
    6086:	ab 81       	ldd	r26, Y+3	; 0x03
    6088:	bc 81       	ldd	r27, Y+4	; 0x04
    608a:	8c 91       	ld	r24, X
    608c:	90 e0       	ldi	r25, 0x00	; 0
    608e:	29 81       	ldd	r18, Y+1	; 0x01
    6090:	3a 81       	ldd	r19, Y+2	; 0x02
    6092:	28 17       	cp	r18, r24
    6094:	39 07       	cpc	r19, r25
    6096:	0c f4       	brge	.+2      	; 0x609a <__stack+0x9b>
    6098:	1b cf       	rjmp	.-458    	; 0x5ed0 <tuple_print+0x9e>
    default:
      assert(0);
      break;
    }
  }
  fprintf(fp, ")");
    609a:	b1 01       	movw	r22, r2
    609c:	89 e2       	ldi	r24, 0x29	; 41
    609e:	90 e0       	ldi	r25, 0x00	; 0
}
    60a0:	24 96       	adiw	r28, 0x04	; 4
    60a2:	cd bf       	out	0x3d, r28	; 61
    60a4:	de bf       	out	0x3e, r29	; 62
    60a6:	df 91       	pop	r29
    60a8:	cf 91       	pop	r28
    60aa:	1f 91       	pop	r17
    60ac:	0f 91       	pop	r16
    60ae:	ff 90       	pop	r15
    60b0:	ef 90       	pop	r14
    60b2:	df 90       	pop	r13
    60b4:	cf 90       	pop	r12
    60b6:	bf 90       	pop	r11
    60b8:	af 90       	pop	r10
    60ba:	9f 90       	pop	r9
    60bc:	8f 90       	pop	r8
    60be:	7f 90       	pop	r7
    60c0:	6f 90       	pop	r6
    60c2:	5f 90       	pop	r5
    60c4:	4f 90       	pop	r4
    60c6:	3f 90       	pop	r3
    60c8:	2f 90       	pop	r2
    default:
      assert(0);
      break;
    }
  }
  fprintf(fp, ")");
    60ca:	0c 94 5b 3e 	jmp	0x7cb6	; 0x7cb6 <fputc>

000060ce <facts_dump>:
}

void facts_dump(void)
{
    60ce:	2f 92       	push	r2
    60d0:	3f 92       	push	r3
    60d2:	4f 92       	push	r4
    60d4:	5f 92       	push	r5
    60d6:	6f 92       	push	r6
    60d8:	7f 92       	push	r7
    60da:	8f 92       	push	r8
    60dc:	9f 92       	push	r9
    60de:	af 92       	push	r10
    60e0:	bf 92       	push	r11
    60e2:	cf 92       	push	r12
    60e4:	df 92       	push	r13
    60e6:	ef 92       	push	r14
    60e8:	ff 92       	push	r15
    60ea:	0f 93       	push	r16
    60ec:	1f 93       	push	r17
    60ee:	cf 93       	push	r28
    60f0:	df 93       	push	r29
    60f2:	00 d0       	rcall	.+0      	; 0x60f4 <facts_dump+0x26>
    60f4:	1f 92       	push	r1
    60f6:	cd b7       	in	r28, 0x3d	; 61
    60f8:	de b7       	in	r29, 0x3e	; 62
    60fa:	30 e0       	ldi	r19, 0x00	; 0
    60fc:	c3 2e       	mov	r12, r19
    60fe:	30 e2       	ldi	r19, 0x20	; 32
    6100:	d3 2e       	mov	r13, r19
  int i;

  for (i = 0; i < NUM_TYPES; i++) {
    6102:	e1 2c       	mov	r14, r1
    6104:	f1 2c       	mov	r15, r1
    6106:	00 e0       	ldi	r16, 0x00	; 0
    6108:	10 e0       	ldi	r17, 0x00	; 0
    610a:	20 90 56 20 	lds	r2, 0x2056
    610e:	31 2c       	mov	r3, r1
    /*
    if (tuple_names[i][0] == '_')
      continue;
    */

    fprintf(stderr, "tuple %s (type %d)\n", tuple_names[i], i);
    6110:	4e e6       	ldi	r20, 0x6E	; 110
    6112:	44 2e       	mov	r4, r20
    6114:	47 e2       	ldi	r20, 0x27	; 39
    6116:	54 2e       	mov	r5, r20
					fprintf(stderr, "x%d\n       ", tpE->records.count);
				}
				fprintf(stderr, "\b\b\b]]]\n");
			}
			else {
				fprintf(stderr, "x%d\n", tupleEntry->records.count);
    6118:	5f e9       	ldi	r21, 0x9F	; 159
    611a:	65 2e       	mov	r6, r21
    611c:	57 e2       	ldi	r21, 0x27	; 39
    611e:	75 2e       	mov	r7, r21
				tuple_entry *tpE;
				for (tpE = tupleEntry->records.agg_queue->head;
						 tpE != NULL;
						 tpE = tpE->next) {
					tuple_print(tpE->tuple, stderr);
					fprintf(stderr, "x%d\n       ", tpE->records.count);
    6120:	6b e8       	ldi	r22, 0x8B	; 139
    6122:	a6 2e       	mov	r10, r22
    6124:	67 e2       	ldi	r22, 0x27	; 39
    6126:	b6 2e       	mov	r11, r22

void facts_dump(void)
{
  int i;

  for (i = 0; i < NUM_TYPES; i++) {
    6128:	b9 c0       	rjmp	.+370    	; 0x629c <facts_dump+0x1ce>
    // don't print fact types that don't exist
    if (TUPLES[i].head == NULL)
    612a:	e0 91 61 2f 	lds	r30, 0x2F61
    612e:	f0 91 62 2f 	lds	r31, 0x2F62
    6132:	ee 0d       	add	r30, r14
    6134:	ff 1d       	adc	r31, r15
    6136:	80 81       	ld	r24, Z
    6138:	91 81       	ldd	r25, Z+1	; 0x01
    613a:	89 2b       	or	r24, r25
    613c:	49 f4       	brne	.+18     	; 0x6150 <facts_dump+0x82>

void facts_dump(void)
{
  int i;

  for (i = 0; i < NUM_TYPES; i++) {
    613e:	0f 5f       	subi	r16, 0xFF	; 255
    6140:	1f 4f       	sbci	r17, 0xFF	; 255
    6142:	84 e0       	ldi	r24, 0x04	; 4
    6144:	e8 0e       	add	r14, r24
    6146:	f1 1c       	adc	r15, r1
    6148:	92 e0       	ldi	r25, 0x02	; 2
    614a:	c9 0e       	add	r12, r25
    614c:	d1 1c       	adc	r13, r1
    614e:	a6 c0       	rjmp	.+332    	; 0x629c <facts_dump+0x1ce>
    /*
    if (tuple_names[i][0] == '_')
      continue;
    */

    fprintf(stderr, "tuple %s (type %d)\n", tuple_names[i], i);
    6150:	1f 93       	push	r17
    6152:	0f 93       	push	r16
    6154:	d6 01       	movw	r26, r12
    6156:	11 96       	adiw	r26, 0x01	; 1
    6158:	8c 91       	ld	r24, X
    615a:	11 97       	sbiw	r26, 0x01	; 1
    615c:	8f 93       	push	r24
    615e:	8c 91       	ld	r24, X
    6160:	8f 93       	push	r24
    6162:	5f 92       	push	r5
    6164:	4f 92       	push	r4
    6166:	80 91 88 2f 	lds	r24, 0x2F88
    616a:	8f 93       	push	r24
    616c:	80 91 87 2f 	lds	r24, 0x2F87
    6170:	8f 93       	push	r24
    6172:	0e 94 45 3e 	call	0x7c8a	; 0x7c8a <fprintf>
    tuple_entry *tupleEntry;
    for (tupleEntry = TUPLES[i].head; tupleEntry != NULL; tupleEntry = tupleEntry->next) {
    6176:	e0 91 61 2f 	lds	r30, 0x2F61
    617a:	f0 91 62 2f 	lds	r31, 0x2F62
    617e:	ee 0d       	add	r30, r14
    6180:	ff 1d       	adc	r31, r15
    6182:	80 81       	ld	r24, Z
    6184:	91 81       	ldd	r25, Z+1	; 0x01
    6186:	8b 83       	std	Y+3, r24	; 0x03
    6188:	9c 83       	std	Y+4, r25	; 0x04
    618a:	cd bf       	out	0x3d, r28	; 61
    618c:	de bf       	out	0x3e, r29	; 62
    }
  }
  fprintf(fp, ")");
}

void facts_dump(void)
    618e:	f8 01       	movw	r30, r16
    6190:	ea 5a       	subi	r30, 0xAA	; 170
    6192:	ff 4d       	sbci	r31, 0xDF	; 223
    6194:	e9 83       	std	Y+1, r30	; 0x01
    6196:	fa 83       	std	Y+2, r31	; 0x02
      continue;
    */

    fprintf(stderr, "tuple %s (type %d)\n", tuple_names[i], i);
    tuple_entry *tupleEntry;
    for (tupleEntry = TUPLES[i].head; tupleEntry != NULL; tupleEntry = tupleEntry->next) {
    6198:	7b c0       	rjmp	.+246    	; 0x6290 <facts_dump+0x1c2>
			fprintf(stderr, "  ");
    619a:	60 91 87 2f 	lds	r22, 0x2F87
    619e:	70 91 88 2f 	lds	r23, 0x2F88
    61a2:	84 e9       	ldi	r24, 0x94	; 148
    61a4:	97 e2       	ldi	r25, 0x27	; 39
    61a6:	0e 94 87 3e 	call	0x7d0e	; 0x7d0e <fputs>
			tuple_print(tupleEntry->tuple, stderr);
    61aa:	60 91 87 2f 	lds	r22, 0x2F87
    61ae:	70 91 88 2f 	lds	r23, 0x2F88
    61b2:	ab 81       	ldd	r26, Y+3	; 0x03
    61b4:	bc 81       	ldd	r27, Y+4	; 0x04
    61b6:	14 96       	adiw	r26, 0x04	; 4
    61b8:	8d 91       	ld	r24, X+
    61ba:	9c 91       	ld	r25, X
    61bc:	15 97       	sbiw	r26, 0x05	; 5
    61be:	0e 94 19 2f 	call	0x5e32	; 0x5e32 <tuple_print>
			if (TYPE_IS_AGG(i)) {
    61c2:	e9 81       	ldd	r30, Y+1	; 0x01
    61c4:	fa 81       	ldd	r31, Y+2	; 0x02
    61c6:	81 81       	ldd	r24, Z+1	; 0x01
    61c8:	e8 2f       	mov	r30, r24
    61ca:	f0 e0       	ldi	r31, 0x00	; 0
    61cc:	e8 5a       	subi	r30, 0xA8	; 168
    61ce:	ff 4d       	sbci	r31, 0xDF	; 223
    61d0:	80 81       	ld	r24, Z
    61d2:	80 ff       	sbrs	r24, 0
    61d4:	3d c0       	rjmp	.+122    	; 0x6250 <facts_dump+0x182>
				fprintf(stderr, "\n    [[[");
    61d6:	60 91 87 2f 	lds	r22, 0x2F87
    61da:	70 91 88 2f 	lds	r23, 0x2F88
    61de:	82 e8       	ldi	r24, 0x82	; 130
    61e0:	97 e2       	ldi	r25, 0x27	; 39
    61e2:	0e 94 87 3e 	call	0x7d0e	; 0x7d0e <fputs>
				tuple_entry *tpE;
				for (tpE = tupleEntry->records.agg_queue->head;
    61e6:	ab 81       	ldd	r26, Y+3	; 0x03
    61e8:	bc 81       	ldd	r27, Y+4	; 0x04
    61ea:	12 96       	adiw	r26, 0x02	; 2
    61ec:	ed 91       	ld	r30, X+
    61ee:	fc 91       	ld	r31, X
    61f0:	13 97       	sbiw	r26, 0x03	; 3
    61f2:	80 80       	ld	r8, Z
    61f4:	91 80       	ldd	r9, Z+1	; 0x01
    61f6:	20 c0       	rjmp	.+64     	; 0x6238 <facts_dump+0x16a>
						 tpE != NULL;
						 tpE = tpE->next) {
					tuple_print(tpE->tuple, stderr);
    61f8:	f4 01       	movw	r30, r8
    61fa:	84 81       	ldd	r24, Z+4	; 0x04
    61fc:	95 81       	ldd	r25, Z+5	; 0x05
    61fe:	0e 94 19 2f 	call	0x5e32	; 0x5e32 <tuple_print>
					fprintf(stderr, "x%d\n       ", tpE->records.count);
    6202:	d4 01       	movw	r26, r8
    6204:	13 96       	adiw	r26, 0x03	; 3
    6206:	8c 91       	ld	r24, X
    6208:	13 97       	sbiw	r26, 0x03	; 3
    620a:	8f 93       	push	r24
    620c:	12 96       	adiw	r26, 0x02	; 2
    620e:	8c 91       	ld	r24, X
    6210:	8f 93       	push	r24
    6212:	bf 92       	push	r11
    6214:	af 92       	push	r10
    6216:	80 91 88 2f 	lds	r24, 0x2F88
    621a:	8f 93       	push	r24
    621c:	80 91 87 2f 	lds	r24, 0x2F87
    6220:	8f 93       	push	r24
    6222:	0e 94 45 3e 	call	0x7c8a	; 0x7c8a <fprintf>
			if (TYPE_IS_AGG(i)) {
				fprintf(stderr, "\n    [[[");
				tuple_entry *tpE;
				for (tpE = tupleEntry->records.agg_queue->head;
						 tpE != NULL;
						 tpE = tpE->next) {
    6226:	f4 01       	movw	r30, r8
    6228:	80 80       	ld	r8, Z
    622a:	91 80       	ldd	r9, Z+1	; 0x01
    622c:	0f 90       	pop	r0
    622e:	0f 90       	pop	r0
    6230:	0f 90       	pop	r0
    6232:	0f 90       	pop	r0
    6234:	0f 90       	pop	r0
    6236:	0f 90       	pop	r0
    6238:	60 91 87 2f 	lds	r22, 0x2F87
    623c:	70 91 88 2f 	lds	r23, 0x2F88
			fprintf(stderr, "  ");
			tuple_print(tupleEntry->tuple, stderr);
			if (TYPE_IS_AGG(i)) {
				fprintf(stderr, "\n    [[[");
				tuple_entry *tpE;
				for (tpE = tupleEntry->records.agg_queue->head;
    6240:	81 14       	cp	r8, r1
    6242:	91 04       	cpc	r9, r1
    6244:	c9 f6       	brne	.-78     	; 0x61f8 <facts_dump+0x12a>
						 tpE != NULL;
						 tpE = tpE->next) {
					tuple_print(tpE->tuple, stderr);
					fprintf(stderr, "x%d\n       ", tpE->records.count);
				}
				fprintf(stderr, "\b\b\b]]]\n");
    6246:	87 e9       	ldi	r24, 0x97	; 151
    6248:	97 e2       	ldi	r25, 0x27	; 39
    624a:	0e 94 87 3e 	call	0x7d0e	; 0x7d0e <fputs>
    624e:	19 c0       	rjmp	.+50     	; 0x6282 <facts_dump+0x1b4>
			}
			else {
				fprintf(stderr, "x%d\n", tupleEntry->records.count);
    6250:	ab 81       	ldd	r26, Y+3	; 0x03
    6252:	bc 81       	ldd	r27, Y+4	; 0x04
    6254:	13 96       	adiw	r26, 0x03	; 3
    6256:	8c 91       	ld	r24, X
    6258:	13 97       	sbiw	r26, 0x03	; 3
    625a:	8f 93       	push	r24
    625c:	12 96       	adiw	r26, 0x02	; 2
    625e:	8c 91       	ld	r24, X
    6260:	8f 93       	push	r24
    6262:	7f 92       	push	r7
    6264:	6f 92       	push	r6
    6266:	80 91 88 2f 	lds	r24, 0x2F88
    626a:	8f 93       	push	r24
    626c:	80 91 87 2f 	lds	r24, 0x2F87
    6270:	8f 93       	push	r24
    6272:	0e 94 45 3e 	call	0x7c8a	; 0x7c8a <fprintf>
    6276:	0f 90       	pop	r0
    6278:	0f 90       	pop	r0
    627a:	0f 90       	pop	r0
    627c:	0f 90       	pop	r0
    627e:	0f 90       	pop	r0
    6280:	0f 90       	pop	r0
      continue;
    */

    fprintf(stderr, "tuple %s (type %d)\n", tuple_names[i], i);
    tuple_entry *tupleEntry;
    for (tupleEntry = TUPLES[i].head; tupleEntry != NULL; tupleEntry = tupleEntry->next) {
    6282:	eb 81       	ldd	r30, Y+3	; 0x03
    6284:	fc 81       	ldd	r31, Y+4	; 0x04
    6286:	01 90       	ld	r0, Z+
    6288:	f0 81       	ld	r31, Z
    628a:	e0 2d       	mov	r30, r0
    628c:	eb 83       	std	Y+3, r30	; 0x03
    628e:	fc 83       	std	Y+4, r31	; 0x04
    6290:	8b 81       	ldd	r24, Y+3	; 0x03
    6292:	9c 81       	ldd	r25, Y+4	; 0x04
    6294:	89 2b       	or	r24, r25
    6296:	09 f0       	breq	.+2      	; 0x629a <facts_dump+0x1cc>
    6298:	80 cf       	rjmp	.-256    	; 0x619a <facts_dump+0xcc>
    629a:	51 cf       	rjmp	.-350    	; 0x613e <facts_dump+0x70>

void facts_dump(void)
{
  int i;

  for (i = 0; i < NUM_TYPES; i++) {
    629c:	02 15       	cp	r16, r2
    629e:	13 05       	cpc	r17, r3
    62a0:	0c f4       	brge	.+2      	; 0x62a4 <facts_dump+0x1d6>
    62a2:	43 cf       	rjmp	.-378    	; 0x612a <facts_dump+0x5c>
			else {
				fprintf(stderr, "x%d\n", tupleEntry->records.count);
			}
    }
  }
}
    62a4:	24 96       	adiw	r28, 0x04	; 4
    62a6:	cd bf       	out	0x3d, r28	; 61
    62a8:	de bf       	out	0x3e, r29	; 62
    62aa:	df 91       	pop	r29
    62ac:	cf 91       	pop	r28
    62ae:	1f 91       	pop	r17
    62b0:	0f 91       	pop	r16
    62b2:	ff 90       	pop	r15
    62b4:	ef 90       	pop	r14
    62b6:	df 90       	pop	r13
    62b8:	cf 90       	pop	r12
    62ba:	bf 90       	pop	r11
    62bc:	af 90       	pop	r10
    62be:	9f 90       	pop	r9
    62c0:	8f 90       	pop	r8
    62c2:	7f 90       	pop	r7
    62c4:	6f 90       	pop	r6
    62c6:	5f 90       	pop	r5
    62c8:	4f 90       	pop	r4
    62ca:	3f 90       	pop	r3
    62cc:	2f 90       	pop	r2
    62ce:	08 95       	ret

000062d0 <print_program_info>:

void
print_program_info(void)
{
    62d0:	2f 92       	push	r2
    62d2:	3f 92       	push	r3
    62d4:	4f 92       	push	r4
    62d6:	5f 92       	push	r5
    62d8:	6f 92       	push	r6
    62da:	7f 92       	push	r7
    62dc:	8f 92       	push	r8
    62de:	9f 92       	push	r9
    62e0:	af 92       	push	r10
    62e2:	bf 92       	push	r11
    62e4:	cf 92       	push	r12
    62e6:	df 92       	push	r13
    62e8:	ef 92       	push	r14
    62ea:	ff 92       	push	r15
    62ec:	0f 93       	push	r16
    62ee:	1f 93       	push	r17
    62f0:	cf 93       	push	r28
    62f2:	df 93       	push	r29
    62f4:	cd b7       	in	r28, 0x3d	; 61
    62f6:	de b7       	in	r29, 0x3e	; 62
    62f8:	25 97       	sbiw	r28, 0x05	; 5
    62fa:	cd bf       	out	0x3d, r28	; 61
    62fc:	de bf       	out	0x3e, r29	; 62
    62fe:	f0 e0       	ldi	r31, 0x00	; 0
    6300:	ef 2e       	mov	r14, r31
    6302:	f0 e2       	ldi	r31, 0x20	; 32
    6304:	ff 2e       	mov	r15, r31
    6306:	27 e5       	ldi	r18, 0x57	; 87
    6308:	30 e2       	ldi	r19, 0x20	; 32
    630a:	2a 83       	std	Y+2, r18	; 0x02
    630c:	3b 83       	std	Y+3, r19	; 0x03
  /* print program info */
  int i;
  for(i = 0; i < NUM_TYPES; ++i) {
    630e:	cc 24       	eor	r12, r12
    6310:	c3 94       	inc	r12
    6312:	d1 2c       	mov	r13, r1
    6314:	1c 82       	std	Y+4, r1	; 0x04
    6316:	1d 82       	std	Y+5, r1	; 0x05
    6318:	80 91 56 20 	lds	r24, 0x2056
    631c:	88 2e       	mov	r8, r24
    631e:	91 2c       	mov	r9, r1
      printf("route");
    if(TYPE_IS_PROVED(i))
      printf("proved");
    printf("] ");
    
    printf("num_args:%d deltas:%d off:%d ; args(offset, arg_size): ",
    6320:	be ec       	ldi	r27, 0xCE	; 206
    6322:	2b 2e       	mov	r2, r27
    6324:	b7 e2       	ldi	r27, 0x27	; 39
    6326:	3b 2e       	mov	r3, r27
	   TYPE_NOARGS(i), TYPE_NODELTAS(i), TYPE_OFFSET(i));
		
    int j;
    for (j = 0; j < TYPE_NOARGS(i); ++j) {
      printf(" %d:%d", TYPE_ARG_OFFSET(i, j), TYPE_ARG_SIZE(i, j));
    6328:	16 e0       	ldi	r17, 0x06	; 6
    632a:	41 2e       	mov	r4, r17
    632c:	18 e2       	ldi	r17, 0x28	; 40
    632e:	51 2e       	mov	r5, r17
void
print_program_info(void)
{
  /* print program info */
  int i;
  for(i = 0; i < NUM_TYPES; ++i) {
    6330:	c1 c0       	rjmp	.+386    	; 0x64b4 <print_program_info+0x1e4>
    }
  }
}

void
print_program_info(void)
    6332:	6c 80       	ldd	r6, Y+4	; 0x04
    6334:	7d 80       	ldd	r7, Y+5	; 0x05
    6336:	66 0c       	add	r6, r6
    6338:	77 1c       	adc	r7, r7
{
  /* print program info */
  int i;
  for(i = 0; i < NUM_TYPES; ++i) {
    printf("Tuple (%s:%d:%d) ", tuple_names[i], i, TYPE_SIZE(i));
    633a:	d7 01       	movw	r26, r14
    633c:	8c 91       	ld	r24, X
    633e:	11 96       	adiw	r26, 0x01	; 1
    6340:	9c 91       	ld	r25, X
    6342:	b2 e0       	ldi	r27, 0x02	; 2
    6344:	eb 0e       	add	r14, r27
    6346:	f1 1c       	adc	r15, r1
    6348:	e0 91 3e 29 	lds	r30, 0x293E
    634c:	f0 91 3f 29 	lds	r31, 0x293F
    6350:	ec 0d       	add	r30, r12
    6352:	fd 1d       	adc	r31, r13
    6354:	20 81       	ld	r18, Z
    6356:	1f 92       	push	r1
    6358:	2f 93       	push	r18
    635a:	ed 81       	ldd	r30, Y+5	; 0x05
    635c:	ef 93       	push	r30
    635e:	fc 81       	ldd	r31, Y+4	; 0x04
    6360:	ff 93       	push	r31
    6362:	9f 93       	push	r25
    6364:	8f 93       	push	r24
    6366:	24 ea       	ldi	r18, 0xA4	; 164
    6368:	37 e2       	ldi	r19, 0x27	; 39
    636a:	3f 93       	push	r19
    636c:	2f 93       	push	r18
    636e:	0e 94 b2 3e 	call	0x7d64	; 0x7d64 <printf>
    
    printf("[");
    6372:	8b e5       	ldi	r24, 0x5B	; 91
    6374:	90 e0       	ldi	r25, 0x00	; 0
    6376:	0e 94 ca 3e 	call	0x7d94	; 0x7d94 <putchar>
    if(TYPE_IS_AGG(i))
    637a:	2c 81       	ldd	r18, Y+4	; 0x04
    637c:	3d 81       	ldd	r19, Y+5	; 0x05
    637e:	2f 5f       	subi	r18, 0xFF	; 255
    6380:	3f 4f       	sbci	r19, 0xFF	; 255
    6382:	2c 83       	std	Y+4, r18	; 0x04
    6384:	3d 83       	std	Y+5, r19	; 0x05
    6386:	aa 81       	ldd	r26, Y+2	; 0x02
    6388:	bb 81       	ldd	r27, Y+3	; 0x03
    638a:	2d 91       	ld	r18, X+
    638c:	aa 83       	std	Y+2, r26	; 0x02
    638e:	bb 83       	std	Y+3, r27	; 0x03
    6390:	29 83       	std	Y+1, r18	; 0x01
    6392:	a2 2e       	mov	r10, r18
    6394:	b1 2c       	mov	r11, r1
    6396:	85 01       	movw	r16, r10
    6398:	08 5a       	subi	r16, 0xA8	; 168
    639a:	1f 4d       	sbci	r17, 0xDF	; 223
    639c:	d8 01       	movw	r26, r16
    639e:	8c 91       	ld	r24, X
    63a0:	cd bf       	out	0x3d, r28	; 61
    63a2:	de bf       	out	0x3e, r29	; 62
    63a4:	80 ff       	sbrs	r24, 0
    63a6:	08 c0       	rjmp	.+16     	; 0x63b8 <print_program_info+0xe8>
      printf("agg");
    63a8:	26 eb       	ldi	r18, 0xB6	; 182
    63aa:	37 e2       	ldi	r19, 0x27	; 39
    63ac:	3f 93       	push	r19
    63ae:	2f 93       	push	r18
    63b0:	0e 94 b2 3e 	call	0x7d64	; 0x7d64 <printf>
    63b4:	0f 90       	pop	r0
    63b6:	0f 90       	pop	r0
    if(TYPE_IS_PERSISTENT(i))
    63b8:	d8 01       	movw	r26, r16
    63ba:	8c 91       	ld	r24, X
    63bc:	81 ff       	sbrs	r24, 1
    63be:	08 c0       	rjmp	.+16     	; 0x63d0 <print_program_info+0x100>
      printf("per");
    63c0:	ea eb       	ldi	r30, 0xBA	; 186
    63c2:	f7 e2       	ldi	r31, 0x27	; 39
    63c4:	ff 93       	push	r31
    63c6:	ef 93       	push	r30
    63c8:	0e 94 b2 3e 	call	0x7d64	; 0x7d64 <printf>
    63cc:	0f 90       	pop	r0
    63ce:	0f 90       	pop	r0
    if(TYPE_IS_LINEAR(i))
    63d0:	d8 01       	movw	r26, r16
    63d2:	8c 91       	ld	r24, X
    63d4:	82 ff       	sbrs	r24, 2
    63d6:	08 c0       	rjmp	.+16     	; 0x63e8 <print_program_info+0x118>
      printf("linear");
    63d8:	ee eb       	ldi	r30, 0xBE	; 190
    63da:	f7 e2       	ldi	r31, 0x27	; 39
    63dc:	ff 93       	push	r31
    63de:	ef 93       	push	r30
    63e0:	0e 94 b2 3e 	call	0x7d64	; 0x7d64 <printf>
    63e4:	0f 90       	pop	r0
    63e6:	0f 90       	pop	r0
    if(TYPE_IS_ROUTING(i))
    63e8:	d8 01       	movw	r26, r16
    63ea:	8c 91       	ld	r24, X
    63ec:	85 ff       	sbrs	r24, 5
    63ee:	08 c0       	rjmp	.+16     	; 0x6400 <print_program_info+0x130>
      printf("route");
    63f0:	e5 ec       	ldi	r30, 0xC5	; 197
    63f2:	f7 e2       	ldi	r31, 0x27	; 39
    63f4:	ff 93       	push	r31
    63f6:	ef 93       	push	r30
    63f8:	0e 94 b2 3e 	call	0x7d64	; 0x7d64 <printf>
    63fc:	0f 90       	pop	r0
    63fe:	0f 90       	pop	r0
    if(TYPE_IS_PROVED(i))
    6400:	d8 01       	movw	r26, r16
    6402:	8c 91       	ld	r24, X
    6404:	86 ff       	sbrs	r24, 6
    6406:	08 c0       	rjmp	.+16     	; 0x6418 <print_program_info+0x148>
      printf("proved");
    6408:	e6 e0       	ldi	r30, 0x06	; 6
    640a:	f6 e2       	ldi	r31, 0x26	; 38
    640c:	ff 93       	push	r31
    640e:	ef 93       	push	r30
    6410:	0e 94 b2 3e 	call	0x7d64	; 0x7d64 <printf>
    6414:	0f 90       	pop	r0
    6416:	0f 90       	pop	r0
    printf("] ");
    6418:	8b ec       	ldi	r24, 0xCB	; 203
    641a:	97 e2       	ldi	r25, 0x27	; 39
    641c:	9f 93       	push	r25
    641e:	8f 93       	push	r24
    6420:	0e 94 b2 3e 	call	0x7d64	; 0x7d64 <printf>
    
    printf("num_args:%d deltas:%d off:%d ; args(offset, arg_size): ",
	   TYPE_NOARGS(i), TYPE_NODELTAS(i), TYPE_OFFSET(i));
    6424:	85 01       	movw	r16, r10
    6426:	05 5a       	subi	r16, 0xA5	; 165
    6428:	1f 4d       	sbci	r17, 0xDF	; 223
      printf("route");
    if(TYPE_IS_PROVED(i))
      printf("proved");
    printf("] ");
    
    printf("num_args:%d deltas:%d off:%d ; args(offset, arg_size): ",
    642a:	1f 92       	push	r1
    642c:	29 81       	ldd	r18, Y+1	; 0x01
    642e:	2f 93       	push	r18
	   TYPE_NOARGS(i), TYPE_NODELTAS(i), TYPE_OFFSET(i));
    6430:	f5 01       	movw	r30, r10
    6432:	e4 5a       	subi	r30, 0xA4	; 164
    6434:	ff 4d       	sbci	r31, 0xDF	; 223
      printf("route");
    if(TYPE_IS_PROVED(i))
      printf("proved");
    printf("] ");
    
    printf("num_args:%d deltas:%d off:%d ; args(offset, arg_size): ",
    6436:	80 81       	ld	r24, Z
    6438:	1f 92       	push	r1
    643a:	8f 93       	push	r24
    643c:	d8 01       	movw	r26, r16
    643e:	8c 91       	ld	r24, X
    6440:	1f 92       	push	r1
    6442:	8f 93       	push	r24
    6444:	3f 92       	push	r3
    6446:	2f 92       	push	r2
    6448:	0e 94 b2 3e 	call	0x7d64	; 0x7d64 <printf>
	   TYPE_NOARGS(i), TYPE_NODELTAS(i), TYPE_OFFSET(i));
		
    int j;
    for (j = 0; j < TYPE_NOARGS(i); ++j) {
    644c:	cd bf       	out	0x3d, r28	; 61
    644e:	de bf       	out	0x3e, r29	; 62
    6450:	a1 2c       	mov	r10, r1
    6452:	b1 2c       	mov	r11, r1
    6454:	22 c0       	rjmp	.+68     	; 0x649a <print_program_info+0x1ca>
      printf(" %d:%d", TYPE_ARG_OFFSET(i, j), TYPE_ARG_SIZE(i, j));
    6456:	80 91 3e 29 	lds	r24, 0x293E
    645a:	90 91 3f 29 	lds	r25, 0x293F
    }
  }
}

void
print_program_info(void)
    645e:	f5 01       	movw	r30, r10
    6460:	ee 0f       	add	r30, r30
    6462:	ff 1f       	adc	r31, r31
    printf("num_args:%d deltas:%d off:%d ; args(offset, arg_size): ",
	   TYPE_NOARGS(i), TYPE_NODELTAS(i), TYPE_OFFSET(i));
		
    int j;
    for (j = 0; j < TYPE_NOARGS(i); ++j) {
      printf(" %d:%d", TYPE_ARG_OFFSET(i, j), TYPE_ARG_SIZE(i, j));
    6464:	dc 01       	movw	r26, r24
    6466:	a6 0d       	add	r26, r6
    6468:	b7 1d       	adc	r27, r7
    646a:	2c 91       	ld	r18, X
    646c:	e2 0f       	add	r30, r18
    646e:	f1 1d       	adc	r31, r1
    6470:	e8 0f       	add	r30, r24
    6472:	f9 1f       	adc	r31, r25
    6474:	80 81       	ld	r24, Z
    6476:	1f 92       	push	r1
    6478:	8f 93       	push	r24
    647a:	81 81       	ldd	r24, Z+1	; 0x01
    647c:	1f 92       	push	r1
    647e:	8f 93       	push	r24
    6480:	5f 92       	push	r5
    6482:	4f 92       	push	r4
    6484:	0e 94 b2 3e 	call	0x7d64	; 0x7d64 <printf>
    
    printf("num_args:%d deltas:%d off:%d ; args(offset, arg_size): ",
	   TYPE_NOARGS(i), TYPE_NODELTAS(i), TYPE_OFFSET(i));
		
    int j;
    for (j = 0; j < TYPE_NOARGS(i); ++j) {
    6488:	ff ef       	ldi	r31, 0xFF	; 255
    648a:	af 1a       	sub	r10, r31
    648c:	bf 0a       	sbc	r11, r31
    648e:	0f 90       	pop	r0
    6490:	0f 90       	pop	r0
    6492:	0f 90       	pop	r0
    6494:	0f 90       	pop	r0
    6496:	0f 90       	pop	r0
    6498:	0f 90       	pop	r0
    649a:	d8 01       	movw	r26, r16
    649c:	8c 91       	ld	r24, X
    649e:	90 e0       	ldi	r25, 0x00	; 0
    64a0:	a8 16       	cp	r10, r24
    64a2:	b9 06       	cpc	r11, r25
    64a4:	c4 f2       	brlt	.-80     	; 0x6456 <print_program_info+0x186>
      printf(" %d:%d", TYPE_ARG_OFFSET(i, j), TYPE_ARG_SIZE(i, j));
    }
    printf("\n");
    64a6:	8a e0       	ldi	r24, 0x0A	; 10
    64a8:	90 e0       	ldi	r25, 0x00	; 0
    64aa:	0e 94 ca 3e 	call	0x7d94	; 0x7d94 <putchar>
    64ae:	b2 e0       	ldi	r27, 0x02	; 2
    64b0:	cb 0e       	add	r12, r27
    64b2:	d1 1c       	adc	r13, r1
void
print_program_info(void)
{
  /* print program info */
  int i;
  for(i = 0; i < NUM_TYPES; ++i) {
    64b4:	2c 81       	ldd	r18, Y+4	; 0x04
    64b6:	3d 81       	ldd	r19, Y+5	; 0x05
    64b8:	28 15       	cp	r18, r8
    64ba:	39 05       	cpc	r19, r9
    64bc:	0c f4       	brge	.+2      	; 0x64c0 <print_program_info+0x1f0>
    64be:	39 cf       	rjmp	.-398    	; 0x6332 <print_program_info+0x62>
    for (j = 0; j < TYPE_NOARGS(i); ++j) {
      printf(" %d:%d", TYPE_ARG_OFFSET(i, j), TYPE_ARG_SIZE(i, j));
    }
    printf("\n");
  }
}
    64c0:	25 96       	adiw	r28, 0x05	; 5
    64c2:	cd bf       	out	0x3d, r28	; 61
    64c4:	de bf       	out	0x3e, r29	; 62
    64c6:	df 91       	pop	r29
    64c8:	cf 91       	pop	r28
    64ca:	1f 91       	pop	r17
    64cc:	0f 91       	pop	r16
    64ce:	ff 90       	pop	r15
    64d0:	ef 90       	pop	r14
    64d2:	df 90       	pop	r13
    64d4:	cf 90       	pop	r12
    64d6:	bf 90       	pop	r11
    64d8:	af 90       	pop	r10
    64da:	9f 90       	pop	r9
    64dc:	8f 90       	pop	r8
    64de:	7f 90       	pop	r7
    64e0:	6f 90       	pop	r6
    64e2:	5f 90       	pop	r5
    64e4:	4f 90       	pop	r4
    64e6:	3f 90       	pop	r3
    64e8:	2f 90       	pop	r2
    64ea:	08 95       	ret

000064ec <compare_int_values>:
compare_int_values(set_data a1, set_data a2)
{
	int i1 = *(int*)a1;
	int i2 = *(int*)a2;

	return i1 < i2;
    64ec:	21 e0       	ldi	r18, 0x01	; 1
    64ee:	30 e0       	ldi	r19, 0x00	; 0
    64f0:	fc 01       	movw	r30, r24
    64f2:	40 81       	ld	r20, Z
    64f4:	51 81       	ldd	r21, Z+1	; 0x01
    64f6:	fb 01       	movw	r30, r22
    64f8:	80 81       	ld	r24, Z
    64fa:	91 81       	ldd	r25, Z+1	; 0x01
    64fc:	48 17       	cp	r20, r24
    64fe:	59 07       	cpc	r21, r25
    6500:	14 f0       	brlt	.+4      	; 0x6506 <compare_int_values+0x1a>
    6502:	20 e0       	ldi	r18, 0x00	; 0
    6504:	30 e0       	ldi	r19, 0x00	; 0
}
    6506:	c9 01       	movw	r24, r18
    6508:	08 95       	ret

0000650a <equal_int_values>:
equal_int_values(set_data a1, set_data a2)
{
	int i1 = *(int*)a1;
	int i2 = *(int*)a2;

	return i1 == i2;
    650a:	21 e0       	ldi	r18, 0x01	; 1
    650c:	30 e0       	ldi	r19, 0x00	; 0
    650e:	fc 01       	movw	r30, r24
    6510:	40 81       	ld	r20, Z
    6512:	51 81       	ldd	r21, Z+1	; 0x01
    6514:	fb 01       	movw	r30, r22
    6516:	80 81       	ld	r24, Z
    6518:	91 81       	ldd	r25, Z+1	; 0x01
    651a:	48 17       	cp	r20, r24
    651c:	59 07       	cpc	r21, r25
    651e:	11 f0       	breq	.+4      	; 0x6524 <equal_int_values+0x1a>
    6520:	20 e0       	ldi	r18, 0x00	; 0
    6522:	30 e0       	ldi	r19, 0x00	; 0
}
    6524:	c9 01       	movw	r24, r18
    6526:	08 95       	ret

00006528 <compare_float_values>:
	return set_create(int_descriptor);
}

static int
compare_float_values(set_data a1, set_data a2)
{
    6528:	cf 93       	push	r28
    652a:	df 93       	push	r29
	float f1 = *(float*)a1;
	float f2 = *(float*)a2;

	return f1 < f2;
    652c:	c1 e0       	ldi	r28, 0x01	; 1
    652e:	d0 e0       	ldi	r29, 0x00	; 0
    6530:	fb 01       	movw	r30, r22
    6532:	20 81       	ld	r18, Z
    6534:	31 81       	ldd	r19, Z+1	; 0x01
    6536:	42 81       	ldd	r20, Z+2	; 0x02
    6538:	53 81       	ldd	r21, Z+3	; 0x03
    653a:	fc 01       	movw	r30, r24
    653c:	60 81       	ld	r22, Z
    653e:	71 81       	ldd	r23, Z+1	; 0x01
    6540:	82 81       	ldd	r24, Z+2	; 0x02
    6542:	93 81       	ldd	r25, Z+3	; 0x03
    6544:	0e 94 27 39 	call	0x724e	; 0x724e <__cmpsf2>
    6548:	87 fd       	sbrc	r24, 7
    654a:	02 c0       	rjmp	.+4      	; 0x6550 <compare_float_values+0x28>
    654c:	c0 e0       	ldi	r28, 0x00	; 0
    654e:	d0 e0       	ldi	r29, 0x00	; 0
}
    6550:	ce 01       	movw	r24, r28
    6552:	df 91       	pop	r29
    6554:	cf 91       	pop	r28
    6556:	08 95       	ret

00006558 <equal_float_values>:

static int
equal_float_values(set_data a1, set_data a2)
{
    6558:	cf 93       	push	r28
    655a:	df 93       	push	r29
	float f1 = *(float*)a1;
	float f2 = *(float*)a2;

	return f1 == f2;
    655c:	c1 e0       	ldi	r28, 0x01	; 1
    655e:	d0 e0       	ldi	r29, 0x00	; 0
    6560:	fb 01       	movw	r30, r22
    6562:	20 81       	ld	r18, Z
    6564:	31 81       	ldd	r19, Z+1	; 0x01
    6566:	42 81       	ldd	r20, Z+2	; 0x02
    6568:	53 81       	ldd	r21, Z+3	; 0x03
    656a:	fc 01       	movw	r30, r24
    656c:	60 81       	ld	r22, Z
    656e:	71 81       	ldd	r23, Z+1	; 0x01
    6570:	82 81       	ldd	r24, Z+2	; 0x02
    6572:	93 81       	ldd	r25, Z+3	; 0x03
    6574:	0e 94 27 39 	call	0x724e	; 0x724e <__cmpsf2>
    6578:	88 23       	and	r24, r24
    657a:	11 f0       	breq	.+4      	; 0x6580 <equal_float_values+0x28>
    657c:	c0 e0       	ldi	r28, 0x00	; 0
    657e:	d0 e0       	ldi	r29, 0x00	; 0
}
    6580:	ce 01       	movw	r24, r28
    6582:	df 91       	pop	r29
    6584:	cf 91       	pop	r28
    6586:	08 95       	ret

00006588 <print_float_value>:

static void
print_float_value(set_data a)
{
    6588:	fc 01       	movw	r30, r24
	printf("%f", *(double*)a);
    658a:	83 81       	ldd	r24, Z+3	; 0x03
    658c:	8f 93       	push	r24
    658e:	82 81       	ldd	r24, Z+2	; 0x02
    6590:	8f 93       	push	r24
    6592:	81 81       	ldd	r24, Z+1	; 0x01
    6594:	8f 93       	push	r24
    6596:	80 81       	ld	r24, Z
    6598:	8f 93       	push	r24
    659a:	84 e1       	ldi	r24, 0x14	; 20
    659c:	97 e2       	ldi	r25, 0x27	; 39
    659e:	9f 93       	push	r25
    65a0:	8f 93       	push	r24
    65a2:	0e 94 b2 3e 	call	0x7d64	; 0x7d64 <printf>
    65a6:	0f 90       	pop	r0
    65a8:	0f 90       	pop	r0
    65aa:	0f 90       	pop	r0
    65ac:	0f 90       	pop	r0
    65ae:	0f 90       	pop	r0
    65b0:	0f 90       	pop	r0
    65b2:	08 95       	ret

000065b4 <print_int_value>:
}

static void
print_int_value(set_data a)
{
	printf("%d", *(int*)a);
    65b4:	fc 01       	movw	r30, r24
    65b6:	21 81       	ldd	r18, Z+1	; 0x01
    65b8:	2f 93       	push	r18
    65ba:	80 81       	ld	r24, Z
    65bc:	8f 93       	push	r24
    65be:	8a e0       	ldi	r24, 0x0A	; 10
    65c0:	98 e2       	ldi	r25, 0x28	; 40
    65c2:	9f 93       	push	r25
    65c4:	8f 93       	push	r24
    65c6:	0e 94 b2 3e 	call	0x7d64	; 0x7d64 <printf>
    65ca:	0f 90       	pop	r0
    65cc:	0f 90       	pop	r0
    65ce:	0f 90       	pop	r0
    65d0:	0f 90       	pop	r0
    65d2:	08 95       	ret

000065d4 <set_insert>:

#define ADVANCE_NEXT(set, ptr) *(unsigned char**)(ptr + set->descriptor->size_elem)

void
set_insert(Set *set, set_data data)
{
    65d4:	cf 92       	push	r12
    65d6:	df 92       	push	r13
    65d8:	ef 92       	push	r14
    65da:	ff 92       	push	r15
    65dc:	0f 93       	push	r16
    65de:	1f 93       	push	r17
    65e0:	cf 93       	push	r28
    65e2:	df 93       	push	r29
    65e4:	ec 01       	movw	r28, r24
    65e6:	6b 01       	movw	r12, r22
	unsigned char *before = NULL;
	unsigned char *current = set->start;
    65e8:	08 81       	ld	r16, Y
    65ea:	19 81       	ldd	r17, Y+1	; 0x01
#define ADVANCE_NEXT(set, ptr) *(unsigned char**)(ptr + set->descriptor->size_elem)

void
set_insert(Set *set, set_data data)
{
	unsigned char *before = NULL;
    65ec:	e1 2c       	mov	r14, r1
    65ee:	f1 2c       	mov	r15, r1
	unsigned char *current = set->start;

	while (current) {
    65f0:	20 c0       	rjmp	.+64     	; 0x6632 <set_insert+0x5e>
		set_data elem = current;

		if(set->descriptor->cmp_fn(data, elem)) {
    65f2:	01 90       	ld	r0, Z+
    65f4:	f0 81       	ld	r31, Z
    65f6:	e0 2d       	mov	r30, r0
    65f8:	b8 01       	movw	r22, r16
    65fa:	c6 01       	movw	r24, r12
    65fc:	19 95       	eicall
    65fe:	ec 81       	ldd	r30, Y+4	; 0x04
    6600:	fd 81       	ldd	r31, Y+5	; 0x05
    6602:	89 2b       	or	r24, r25
    6604:	71 f0       	breq	.+28     	; 0x6622 <set_insert+0x4e>
			/* insert it here */

			/* is it repeated? */
			if(before && set->descriptor->equal_fn(data, before))
    6606:	e1 14       	cp	r14, r1
    6608:	f1 04       	cpc	r15, r1
    660a:	09 f4       	brne	.+2      	; 0x660e <set_insert+0x3a>
    660c:	71 c0       	rjmp	.+226    	; 0x66f0 <set_insert+0x11c>
    660e:	02 80       	ldd	r0, Z+2	; 0x02
    6610:	f3 81       	ldd	r31, Z+3	; 0x03
    6612:	e0 2d       	mov	r30, r0
    6614:	b7 01       	movw	r22, r14
    6616:	c6 01       	movw	r24, r12
    6618:	19 95       	eicall
    661a:	89 2b       	or	r24, r25
    661c:	09 f4       	brne	.+2      	; 0x6620 <set_insert+0x4c>
    661e:	4e c0       	rjmp	.+156    	; 0x66bc <set_insert+0xe8>
    6620:	84 c0       	rjmp	.+264    	; 0x672a <set_insert+0x156>
			return;
		}

		/* go to next */
		before = current;
		current = ADVANCE_NEXT(set, current);
    6622:	06 80       	ldd	r0, Z+6	; 0x06
    6624:	f7 81       	ldd	r31, Z+7	; 0x07
    6626:	e0 2d       	mov	r30, r0
    6628:	e0 0f       	add	r30, r16
    662a:	f1 1f       	adc	r31, r17
    662c:	78 01       	movw	r14, r16
    662e:	00 81       	ld	r16, Z
    6630:	11 81       	ldd	r17, Z+1	; 0x01
    6632:	ec 81       	ldd	r30, Y+4	; 0x04
    6634:	fd 81       	ldd	r31, Y+5	; 0x05
set_insert(Set *set, set_data data)
{
	unsigned char *before = NULL;
	unsigned char *current = set->start;

	while (current) {
    6636:	01 15       	cp	r16, r1
    6638:	11 05       	cpc	r17, r1
    663a:	d9 f6       	brne	.-74     	; 0x65f2 <set_insert+0x1e>
		/* go to next */
		before = current;
		current = ADVANCE_NEXT(set, current);
	}

	if (before) {
    663c:	e1 14       	cp	r14, r1
    663e:	f1 04       	cpc	r15, r1
    6640:	21 f1       	breq	.+72     	; 0x668a <set_insert+0xb6>
		/* repeated? */
		if (set->descriptor->equal_fn(data, before))
    6642:	02 80       	ldd	r0, Z+2	; 0x02
    6644:	f3 81       	ldd	r31, Z+3	; 0x03
    6646:	e0 2d       	mov	r30, r0
    6648:	b7 01       	movw	r22, r14
    664a:	c6 01       	movw	r24, r12
    664c:	19 95       	eicall
    664e:	89 2b       	or	r24, r25
    6650:	09 f0       	breq	.+2      	; 0x6654 <set_insert+0x80>
    6652:	6b c0       	rjmp	.+214    	; 0x672a <set_insert+0x156>
			return;

		void **beforenext = (void**)(before + set->descriptor->size_elem);
    6654:	ec 81       	ldd	r30, Y+4	; 0x04
    6656:	fd 81       	ldd	r31, Y+5	; 0x05
    6658:	86 81       	ldd	r24, Z+6	; 0x06
    665a:	97 81       	ldd	r25, Z+7	; 0x07
    665c:	e8 0e       	add	r14, r24
    665e:	f9 1e       	adc	r15, r25
		ALLOC_AND_SET(set, data, NULL, *beforenext);
    6660:	02 96       	adiw	r24, 0x02	; 2
    6662:	0e 94 a5 3b 	call	0x774a	; 0x774a <malloc>
    6666:	d7 01       	movw	r26, r14
    6668:	8c 93       	st	X, r24
    666a:	11 96       	adiw	r26, 0x01	; 1
    666c:	9c 93       	st	X, r25
    666e:	ec 81       	ldd	r30, Y+4	; 0x04
    6670:	fd 81       	ldd	r31, Y+5	; 0x05
    6672:	46 81       	ldd	r20, Z+6	; 0x06
    6674:	57 81       	ldd	r21, Z+7	; 0x07
    6676:	b6 01       	movw	r22, r12
    6678:	0e 94 2c 3e 	call	0x7c58	; 0x7c58 <memcpy>
    667c:	8c 81       	ldd	r24, Y+4	; 0x04
    667e:	9d 81       	ldd	r25, Y+5	; 0x05
    6680:	d7 01       	movw	r26, r14
    6682:	ed 91       	ld	r30, X+
    6684:	fc 91       	ld	r31, X
    6686:	dc 01       	movw	r26, r24
    6688:	10 c0       	rjmp	.+32     	; 0x66aa <set_insert+0xd6>
	} else {
		ALLOC_AND_SET(set, data, NULL, set->start);
    668a:	06 81       	ldd	r16, Z+6	; 0x06
    668c:	17 81       	ldd	r17, Z+7	; 0x07
    668e:	c8 01       	movw	r24, r16
    6690:	02 96       	adiw	r24, 0x02	; 2
    6692:	0e 94 a5 3b 	call	0x774a	; 0x774a <malloc>
    6696:	88 83       	st	Y, r24
    6698:	99 83       	std	Y+1, r25	; 0x01
    669a:	a8 01       	movw	r20, r16
    669c:	b6 01       	movw	r22, r12
    669e:	0e 94 2c 3e 	call	0x7c58	; 0x7c58 <memcpy>
    66a2:	ac 81       	ldd	r26, Y+4	; 0x04
    66a4:	bd 81       	ldd	r27, Y+5	; 0x05
    66a6:	e8 81       	ld	r30, Y
    66a8:	f9 81       	ldd	r31, Y+1	; 0x01
    66aa:	16 96       	adiw	r26, 0x06	; 6
    66ac:	8d 91       	ld	r24, X+
    66ae:	9c 91       	ld	r25, X
    66b0:	17 97       	sbiw	r26, 0x07	; 7
    66b2:	e8 0f       	add	r30, r24
    66b4:	f9 1f       	adc	r31, r25
    66b6:	10 82       	st	Z, r1
    66b8:	11 82       	std	Z+1, r1	; 0x01
    66ba:	32 c0       	rjmp	.+100    	; 0x6720 <set_insert+0x14c>
			/* is it repeated? */
			if(before && set->descriptor->equal_fn(data, before))
				return;

			if (before) {
				void **beforenext = (void**)(before + set->descriptor->size_elem);
    66bc:	ec 81       	ldd	r30, Y+4	; 0x04
    66be:	fd 81       	ldd	r31, Y+5	; 0x05
    66c0:	86 81       	ldd	r24, Z+6	; 0x06
    66c2:	97 81       	ldd	r25, Z+7	; 0x07
    66c4:	e8 0e       	add	r14, r24
    66c6:	f9 1e       	adc	r15, r25
				ALLOC_AND_SET(set, data, current, *beforenext);
    66c8:	02 96       	adiw	r24, 0x02	; 2
    66ca:	0e 94 a5 3b 	call	0x774a	; 0x774a <malloc>
    66ce:	f7 01       	movw	r30, r14
    66d0:	80 83       	st	Z, r24
    66d2:	91 83       	std	Z+1, r25	; 0x01
    66d4:	ec 81       	ldd	r30, Y+4	; 0x04
    66d6:	fd 81       	ldd	r31, Y+5	; 0x05
    66d8:	46 81       	ldd	r20, Z+6	; 0x06
    66da:	57 81       	ldd	r21, Z+7	; 0x07
    66dc:	b6 01       	movw	r22, r12
    66de:	0e 94 2c 3e 	call	0x7c58	; 0x7c58 <memcpy>
    66e2:	8c 81       	ldd	r24, Y+4	; 0x04
    66e4:	9d 81       	ldd	r25, Y+5	; 0x05
    66e6:	d7 01       	movw	r26, r14
    66e8:	ed 91       	ld	r30, X+
    66ea:	fc 91       	ld	r31, X
    66ec:	dc 01       	movw	r26, r24
    66ee:	10 c0       	rjmp	.+32     	; 0x6710 <set_insert+0x13c>
			} else {
				ALLOC_AND_SET(set, data, current, set->start);
    66f0:	e6 80       	ldd	r14, Z+6	; 0x06
    66f2:	f7 80       	ldd	r15, Z+7	; 0x07
    66f4:	c7 01       	movw	r24, r14
    66f6:	02 96       	adiw	r24, 0x02	; 2
    66f8:	0e 94 a5 3b 	call	0x774a	; 0x774a <malloc>
    66fc:	88 83       	st	Y, r24
    66fe:	99 83       	std	Y+1, r25	; 0x01
    6700:	a7 01       	movw	r20, r14
    6702:	b6 01       	movw	r22, r12
    6704:	0e 94 2c 3e 	call	0x7c58	; 0x7c58 <memcpy>
    6708:	ac 81       	ldd	r26, Y+4	; 0x04
    670a:	bd 81       	ldd	r27, Y+5	; 0x05
    670c:	e8 81       	ld	r30, Y
    670e:	f9 81       	ldd	r31, Y+1	; 0x01
    6710:	16 96       	adiw	r26, 0x06	; 6
    6712:	8d 91       	ld	r24, X+
    6714:	9c 91       	ld	r25, X
    6716:	17 97       	sbiw	r26, 0x07	; 7
    6718:	e8 0f       	add	r30, r24
    671a:	f9 1f       	adc	r31, r25
    671c:	00 83       	st	Z, r16
    671e:	11 83       	std	Z+1, r17	; 0x01
    6720:	8a 81       	ldd	r24, Y+2	; 0x02
    6722:	9b 81       	ldd	r25, Y+3	; 0x03
    6724:	01 96       	adiw	r24, 0x01	; 1
    6726:	8a 83       	std	Y+2, r24	; 0x02
    6728:	9b 83       	std	Y+3, r25	; 0x03
		void **beforenext = (void**)(before + set->descriptor->size_elem);
		ALLOC_AND_SET(set, data, NULL, *beforenext);
	} else {
		ALLOC_AND_SET(set, data, NULL, set->start);
	}
}
    672a:	df 91       	pop	r29
    672c:	cf 91       	pop	r28
    672e:	1f 91       	pop	r17
    6730:	0f 91       	pop	r16
    6732:	ff 90       	pop	r15
    6734:	ef 90       	pop	r14
    6736:	df 90       	pop	r13
    6738:	cf 90       	pop	r12
    673a:	08 95       	ret

0000673c <set_int_create>:
	printf("%d", *(int*)a);
}

Set*
set_int_create(void)
{
    673c:	cf 93       	push	r28
    673e:	df 93       	push	r29
  assert(int_descriptor != NULL);
    6740:	80 91 46 29 	lds	r24, 0x2946
    6744:	90 91 47 29 	lds	r25, 0x2947
    6748:	89 2b       	or	r24, r25
    674a:	41 f4       	brne	.+16     	; 0x675c <set_int_create+0x20>
    674c:	4d e0       	ldi	r20, 0x0D	; 13
    674e:	58 e2       	ldi	r21, 0x28	; 40
    6750:	66 e6       	ldi	r22, 0x66	; 102
    6752:	70 e0       	ldi	r23, 0x00	; 0
    6754:	84 e2       	ldi	r24, 0x24	; 36
    6756:	98 e2       	ldi	r25, 0x28	; 40
    6758:	0e 94 e5 19 	call	0x33ca	; 0x33ca <__myassert>
	return set_create(int_descriptor);
    675c:	c0 91 46 29 	lds	r28, 0x2946
    6760:	d0 91 47 29 	lds	r29, 0x2947
static set_descriptor *float_descriptor = NULL;

static inline Set*
set_create(set_descriptor *descriptor)
{
	Set* set = (Set*)malloc(sizeof(Set));
    6764:	86 e0       	ldi	r24, 0x06	; 6
    6766:	90 e0       	ldi	r25, 0x00	; 0
    6768:	0e 94 a5 3b 	call	0x774a	; 0x774a <malloc>
    676c:	fc 01       	movw	r30, r24

	set->start = NULL;
    676e:	10 82       	st	Z, r1
    6770:	11 82       	std	Z+1, r1	; 0x01
	set->nelems = 0;
    6772:	12 82       	std	Z+2, r1	; 0x02
    6774:	13 82       	std	Z+3, r1	; 0x03
  set->descriptor = descriptor;
    6776:	c4 83       	std	Z+4, r28	; 0x04
    6778:	d5 83       	std	Z+5, r29	; 0x05
Set*
set_int_create(void)
{
  assert(int_descriptor != NULL);
	return set_create(int_descriptor);
}
    677a:	df 91       	pop	r29
    677c:	cf 91       	pop	r28
    677e:	08 95       	ret

00006780 <set_float_create>:
	printf("%f", *(double*)a);
}

Set*
set_float_create(void)
{
    6780:	cf 93       	push	r28
    6782:	df 93       	push	r29
  assert(float_descriptor != NULL);
    6784:	80 91 48 29 	lds	r24, 0x2948
    6788:	90 91 49 29 	lds	r25, 0x2949
    678c:	89 2b       	or	r24, r25
    678e:	41 f4       	brne	.+16     	; 0x67a0 <set_float_create+0x20>
    6790:	4d e6       	ldi	r20, 0x6D	; 109
    6792:	58 e2       	ldi	r21, 0x28	; 40
    6794:	65 e8       	ldi	r22, 0x85	; 133
    6796:	70 e0       	ldi	r23, 0x00	; 0
    6798:	84 e2       	ldi	r24, 0x24	; 36
    679a:	98 e2       	ldi	r25, 0x28	; 40
    679c:	0e 94 e5 19 	call	0x33ca	; 0x33ca <__myassert>
	return set_create(float_descriptor);
    67a0:	c0 91 48 29 	lds	r28, 0x2948
    67a4:	d0 91 49 29 	lds	r29, 0x2949
static set_descriptor *float_descriptor = NULL;

static inline Set*
set_create(set_descriptor *descriptor)
{
	Set* set = (Set*)malloc(sizeof(Set));
    67a8:	86 e0       	ldi	r24, 0x06	; 6
    67aa:	90 e0       	ldi	r25, 0x00	; 0
    67ac:	0e 94 a5 3b 	call	0x774a	; 0x774a <malloc>
    67b0:	fc 01       	movw	r30, r24

	set->start = NULL;
    67b2:	10 82       	st	Z, r1
    67b4:	11 82       	std	Z+1, r1	; 0x01
	set->nelems = 0;
    67b6:	12 82       	std	Z+2, r1	; 0x02
    67b8:	13 82       	std	Z+3, r1	; 0x03
  set->descriptor = descriptor;
    67ba:	c4 83       	std	Z+4, r28	; 0x04
    67bc:	d5 83       	std	Z+5, r29	; 0x05
Set*
set_float_create(void)
{
  assert(float_descriptor != NULL);
	return set_create(float_descriptor);
}
    67be:	df 91       	pop	r29
    67c0:	cf 91       	pop	r28
    67c2:	08 95       	ret

000067c4 <set_int_insert>:

void
set_int_insert(Set* set, int data)
{
    67c4:	cf 93       	push	r28
    67c6:	df 93       	push	r29
    67c8:	1f 92       	push	r1
    67ca:	1f 92       	push	r1
    67cc:	cd b7       	in	r28, 0x3d	; 61
    67ce:	de b7       	in	r29, 0x3e	; 62
    67d0:	69 83       	std	Y+1, r22	; 0x01
    67d2:	7a 83       	std	Y+2, r23	; 0x02
	set_insert(set, (set_data)&data);
    67d4:	be 01       	movw	r22, r28
    67d6:	6f 5f       	subi	r22, 0xFF	; 255
    67d8:	7f 4f       	sbci	r23, 0xFF	; 255
    67da:	0e 94 ea 32 	call	0x65d4	; 0x65d4 <set_insert>
}
    67de:	0f 90       	pop	r0
    67e0:	0f 90       	pop	r0
    67e2:	df 91       	pop	r29
    67e4:	cf 91       	pop	r28
    67e6:	08 95       	ret

000067e8 <set_float_insert>:

void
set_float_insert(Set* set, float data)
{
    67e8:	cf 93       	push	r28
    67ea:	df 93       	push	r29
    67ec:	00 d0       	rcall	.+0      	; 0x67ee <set_float_insert+0x6>
    67ee:	1f 92       	push	r1
    67f0:	cd b7       	in	r28, 0x3d	; 61
    67f2:	de b7       	in	r29, 0x3e	; 62
    67f4:	49 83       	std	Y+1, r20	; 0x01
    67f6:	5a 83       	std	Y+2, r21	; 0x02
    67f8:	6b 83       	std	Y+3, r22	; 0x03
    67fa:	7c 83       	std	Y+4, r23	; 0x04
	set_insert(set, (set_data)&data);
    67fc:	be 01       	movw	r22, r28
    67fe:	6f 5f       	subi	r22, 0xFF	; 255
    6800:	7f 4f       	sbci	r23, 0xFF	; 255
    6802:	0e 94 ea 32 	call	0x65d4	; 0x65d4 <set_insert>
}
    6806:	24 96       	adiw	r28, 0x04	; 4
    6808:	cd bf       	out	0x3d, r28	; 61
    680a:	de bf       	out	0x3e, r29	; 62
    680c:	df 91       	pop	r29
    680e:	cf 91       	pop	r28
    6810:	08 95       	ret

00006812 <set_print>:

void
set_print(Set *set)
{
    6812:	ef 92       	push	r14
    6814:	ff 92       	push	r15
    6816:	0f 93       	push	r16
    6818:	1f 93       	push	r17
    681a:	cf 93       	push	r28
    681c:	df 93       	push	r29
    681e:	ec 01       	movw	r28, r24
	printf("(Set-Union with %d elems, %Zu bytes each [", set->nelems, set->descriptor->size_elem);
    6820:	ec 81       	ldd	r30, Y+4	; 0x04
    6822:	fd 81       	ldd	r31, Y+5	; 0x05
    6824:	87 81       	ldd	r24, Z+7	; 0x07
    6826:	8f 93       	push	r24
    6828:	86 81       	ldd	r24, Z+6	; 0x06
    682a:	8f 93       	push	r24
    682c:	8b 81       	ldd	r24, Y+3	; 0x03
    682e:	8f 93       	push	r24
    6830:	8a 81       	ldd	r24, Y+2	; 0x02
    6832:	8f 93       	push	r24
    6834:	86 e8       	ldi	r24, 0x86	; 134
    6836:	98 e2       	ldi	r25, 0x28	; 40
    6838:	9f 93       	push	r25
    683a:	8f 93       	push	r24
    683c:	0e 94 b2 3e 	call	0x7d64	; 0x7d64 <printf>

	unsigned char* current = set->start;
    6840:	08 81       	ld	r16, Y
    6842:	19 81       	ldd	r17, Y+1	; 0x01
	int isFirst = 1;

	while(current) {
    6844:	0f 90       	pop	r0
    6846:	0f 90       	pop	r0
    6848:	0f 90       	pop	r0
    684a:	0f 90       	pop	r0
    684c:	0f 90       	pop	r0
    684e:	0f 90       	pop	r0
set_print(Set *set)
{
	printf("(Set-Union with %d elems, %Zu bytes each [", set->nelems, set->descriptor->size_elem);

	unsigned char* current = set->start;
	int isFirst = 1;
    6850:	81 e0       	ldi	r24, 0x01	; 1
    6852:	90 e0       	ldi	r25, 0x00	; 0
	while(current) {

		if(isFirst)
			isFirst = 0;
		else
			printf(", ");
    6854:	2d e0       	ldi	r18, 0x0D	; 13
    6856:	e2 2e       	mov	r14, r18
    6858:	27 e2       	ldi	r18, 0x27	; 39
    685a:	f2 2e       	mov	r15, r18
	printf("(Set-Union with %d elems, %Zu bytes each [", set->nelems, set->descriptor->size_elem);

	unsigned char* current = set->start;
	int isFirst = 1;

	while(current) {
    685c:	1a c0       	rjmp	.+52     	; 0x6892 <set_print+0x80>

		if(isFirst)
    685e:	89 2b       	or	r24, r25
    6860:	31 f4       	brne	.+12     	; 0x686e <set_print+0x5c>
			isFirst = 0;
		else
			printf(", ");
    6862:	ff 92       	push	r15
    6864:	ef 92       	push	r14
    6866:	0e 94 b2 3e 	call	0x7d64	; 0x7d64 <printf>
    686a:	0f 90       	pop	r0
    686c:	0f 90       	pop	r0

		set->descriptor->print_fn((set_data)current);
    686e:	ec 81       	ldd	r30, Y+4	; 0x04
    6870:	fd 81       	ldd	r31, Y+5	; 0x05
    6872:	04 80       	ldd	r0, Z+4	; 0x04
    6874:	f5 81       	ldd	r31, Z+5	; 0x05
    6876:	e0 2d       	mov	r30, r0
    6878:	c8 01       	movw	r24, r16
    687a:	19 95       	eicall

		current = ADVANCE_NEXT(set, current);
    687c:	ec 81       	ldd	r30, Y+4	; 0x04
    687e:	fd 81       	ldd	r31, Y+5	; 0x05
    6880:	06 80       	ldd	r0, Z+6	; 0x06
    6882:	f7 81       	ldd	r31, Z+7	; 0x07
    6884:	e0 2d       	mov	r30, r0
    6886:	e0 0f       	add	r30, r16
    6888:	f1 1f       	adc	r31, r17
    688a:	00 81       	ld	r16, Z
    688c:	11 81       	ldd	r17, Z+1	; 0x01
    688e:	80 e0       	ldi	r24, 0x00	; 0
    6890:	90 e0       	ldi	r25, 0x00	; 0
	printf("(Set-Union with %d elems, %Zu bytes each [", set->nelems, set->descriptor->size_elem);

	unsigned char* current = set->start;
	int isFirst = 1;

	while(current) {
    6892:	01 15       	cp	r16, r1
    6894:	11 05       	cpc	r17, r1
    6896:	19 f7       	brne	.-58     	; 0x685e <set_print+0x4c>
		set->descriptor->print_fn((set_data)current);

		current = ADVANCE_NEXT(set, current);
	}

	printf("])\n");
    6898:	81 eb       	ldi	r24, 0xB1	; 177
    689a:	98 e2       	ldi	r25, 0x28	; 40
}
    689c:	df 91       	pop	r29
    689e:	cf 91       	pop	r28
    68a0:	1f 91       	pop	r17
    68a2:	0f 91       	pop	r16
    68a4:	ff 90       	pop	r15
    68a6:	ef 90       	pop	r14
		set->descriptor->print_fn((set_data)current);

		current = ADVANCE_NEXT(set, current);
	}

	printf("])\n");
    68a8:	0c 94 d0 3e 	jmp	0x7da0	; 0x7da0 <puts>

000068ac <set_equal>:
}

int set_equal(Set *set1, Set *set2)
{
    68ac:	ef 92       	push	r14
    68ae:	ff 92       	push	r15
    68b0:	0f 93       	push	r16
    68b2:	1f 93       	push	r17
    68b4:	cf 93       	push	r28
    68b6:	df 93       	push	r29
    68b8:	ec 01       	movw	r28, r24
    68ba:	fb 01       	movw	r30, r22
	if(set1->nelems != set2->nelems)
    68bc:	2a 81       	ldd	r18, Y+2	; 0x02
    68be:	3b 81       	ldd	r19, Y+3	; 0x03
    68c0:	82 81       	ldd	r24, Z+2	; 0x02
    68c2:	93 81       	ldd	r25, Z+3	; 0x03
    68c4:	28 17       	cp	r18, r24
    68c6:	39 07       	cpc	r19, r25
    68c8:	19 f0       	breq	.+6      	; 0x68d0 <set_equal+0x24>
		return 0;
    68ca:	20 e0       	ldi	r18, 0x00	; 0
    68cc:	30 e0       	ldi	r19, 0x00	; 0
    68ce:	27 c0       	rjmp	.+78     	; 0x691e <set_equal+0x72>

	if(set1->descriptor != set2->descriptor)
    68d0:	2c 81       	ldd	r18, Y+4	; 0x04
    68d2:	3d 81       	ldd	r19, Y+5	; 0x05
    68d4:	84 81       	ldd	r24, Z+4	; 0x04
    68d6:	95 81       	ldd	r25, Z+5	; 0x05
    68d8:	28 17       	cp	r18, r24
    68da:	39 07       	cpc	r19, r25
    68dc:	b1 f7       	brne	.-20     	; 0x68ca <set_equal+0x1e>
		return 0;

	unsigned char* current1 = set1->start;
    68de:	08 81       	ld	r16, Y
    68e0:	19 81       	ldd	r17, Y+1	; 0x01
    68e2:	16 c0       	rjmp	.+44     	; 0x6910 <set_equal+0x64>

	while (current1) {
		set_data elem1 = (set_data)current1;
		set_data elem2 = (set_data)current2;

		if(!set1->descriptor->equal_fn(elem1, elem2))
    68e4:	ec 81       	ldd	r30, Y+4	; 0x04
    68e6:	fd 81       	ldd	r31, Y+5	; 0x05
    68e8:	02 80       	ldd	r0, Z+2	; 0x02
    68ea:	f3 81       	ldd	r31, Z+3	; 0x03
    68ec:	e0 2d       	mov	r30, r0
    68ee:	b7 01       	movw	r22, r14
    68f0:	c8 01       	movw	r24, r16
    68f2:	19 95       	eicall
    68f4:	89 2b       	or	r24, r25
    68f6:	49 f3       	breq	.-46     	; 0x68ca <set_equal+0x1e>
			return 0;

		current1 = ADVANCE_NEXT(set1, current1);
    68f8:	ec 81       	ldd	r30, Y+4	; 0x04
    68fa:	fd 81       	ldd	r31, Y+5	; 0x05
    68fc:	86 81       	ldd	r24, Z+6	; 0x06
    68fe:	97 81       	ldd	r25, Z+7	; 0x07
    6900:	f8 01       	movw	r30, r16
    6902:	e8 0f       	add	r30, r24
    6904:	f9 1f       	adc	r31, r25
    6906:	00 81       	ld	r16, Z
    6908:	11 81       	ldd	r17, Z+1	; 0x01
		current2 = ADVANCE_NEXT(set1, current2);
    690a:	f7 01       	movw	r30, r14
    690c:	e8 0f       	add	r30, r24
    690e:	f9 1f       	adc	r31, r25
    6910:	e0 80       	ld	r14, Z
    6912:	f1 80       	ldd	r15, Z+1	; 0x01
		return 0;

	unsigned char* current1 = set1->start;
	unsigned char* current2 = set2->start;

	while (current1) {
    6914:	01 15       	cp	r16, r1
    6916:	11 05       	cpc	r17, r1
    6918:	29 f7       	brne	.-54     	; 0x68e4 <set_equal+0x38>

		current1 = ADVANCE_NEXT(set1, current1);
		current2 = ADVANCE_NEXT(set1, current2);
	}

	return 1;
    691a:	21 e0       	ldi	r18, 0x01	; 1
    691c:	30 e0       	ldi	r19, 0x00	; 0
}
    691e:	c9 01       	movw	r24, r18
    6920:	df 91       	pop	r29
    6922:	cf 91       	pop	r28
    6924:	1f 91       	pop	r17
    6926:	0f 91       	pop	r16
    6928:	ff 90       	pop	r15
    692a:	ef 90       	pop	r14
    692c:	08 95       	ret

0000692e <set_delete>:

void set_delete(Set *set)
{
    692e:	0f 93       	push	r16
    6930:	1f 93       	push	r17
    6932:	cf 93       	push	r28
    6934:	df 93       	push	r29
    6936:	ec 01       	movw	r28, r24
	unsigned char* current = set->start;
    6938:	88 81       	ld	r24, Y
    693a:	99 81       	ldd	r25, Y+1	; 0x01
	unsigned char* next;

	while (current) {
    693c:	0c c0       	rjmp	.+24     	; 0x6956 <set_delete+0x28>
		
		next = ADVANCE_NEXT(set, current);
    693e:	ec 81       	ldd	r30, Y+4	; 0x04
    6940:	fd 81       	ldd	r31, Y+5	; 0x05
    6942:	06 80       	ldd	r0, Z+6	; 0x06
    6944:	f7 81       	ldd	r31, Z+7	; 0x07
    6946:	e0 2d       	mov	r30, r0
    6948:	e8 0f       	add	r30, r24
    694a:	f9 1f       	adc	r31, r25
    694c:	00 81       	ld	r16, Z
    694e:	11 81       	ldd	r17, Z+1	; 0x01
		free(current);
    6950:	0e 94 40 3c 	call	0x7880	; 0x7880 <free>
		current = next;
    6954:	c8 01       	movw	r24, r16
void set_delete(Set *set)
{
	unsigned char* current = set->start;
	unsigned char* next;

	while (current) {
    6956:	00 97       	sbiw	r24, 0x00	; 0
    6958:	91 f7       	brne	.-28     	; 0x693e <set_delete+0x10>
		next = ADVANCE_NEXT(set, current);
		free(current);
		current = next;
	}

	free(set);
    695a:	ce 01       	movw	r24, r28
}
    695c:	df 91       	pop	r29
    695e:	cf 91       	pop	r28
    6960:	1f 91       	pop	r17
    6962:	0f 91       	pop	r16
		next = ADVANCE_NEXT(set, current);
		free(current);
		current = next;
	}

	free(set);
    6964:	0c 94 40 3c 	jmp	0x7880	; 0x7880 <free>

00006968 <set_init_descriptors>:
}

void
set_init_descriptors(void)
{
  int_descriptor = malloc(sizeof(set_descriptor));
    6968:	88 e0       	ldi	r24, 0x08	; 8
    696a:	90 e0       	ldi	r25, 0x00	; 0
    696c:	0e 94 a5 3b 	call	0x774a	; 0x774a <malloc>
    6970:	fc 01       	movw	r30, r24
    6972:	80 93 46 29 	sts	0x2946, r24
    6976:	90 93 47 29 	sts	0x2947, r25
  int_descriptor->size_elem = sizeof(int);
    697a:	82 e0       	ldi	r24, 0x02	; 2
    697c:	90 e0       	ldi	r25, 0x00	; 0
    697e:	86 83       	std	Z+6, r24	; 0x06
    6980:	97 83       	std	Z+7, r25	; 0x07
  int_descriptor->print_fn = print_int_value;
    6982:	8a ed       	ldi	r24, 0xDA	; 218
    6984:	92 e3       	ldi	r25, 0x32	; 50
    6986:	84 83       	std	Z+4, r24	; 0x04
    6988:	95 83       	std	Z+5, r25	; 0x05
  int_descriptor->cmp_fn = compare_int_values;
    698a:	86 e7       	ldi	r24, 0x76	; 118
    698c:	92 e3       	ldi	r25, 0x32	; 50
    698e:	80 83       	st	Z, r24
    6990:	91 83       	std	Z+1, r25	; 0x01
  int_descriptor->equal_fn = equal_int_values;
    6992:	85 e8       	ldi	r24, 0x85	; 133
    6994:	92 e3       	ldi	r25, 0x32	; 50
    6996:	82 83       	std	Z+2, r24	; 0x02
    6998:	93 83       	std	Z+3, r25	; 0x03
  
  float_descriptor = malloc(sizeof(set_descriptor));
    699a:	88 e0       	ldi	r24, 0x08	; 8
    699c:	90 e0       	ldi	r25, 0x00	; 0
    699e:	0e 94 a5 3b 	call	0x774a	; 0x774a <malloc>
    69a2:	fc 01       	movw	r30, r24
    69a4:	80 93 48 29 	sts	0x2948, r24
    69a8:	90 93 49 29 	sts	0x2949, r25
  float_descriptor->size_elem = sizeof(float);
    69ac:	84 e0       	ldi	r24, 0x04	; 4
    69ae:	90 e0       	ldi	r25, 0x00	; 0
    69b0:	86 83       	std	Z+6, r24	; 0x06
    69b2:	97 83       	std	Z+7, r25	; 0x07
  float_descriptor->print_fn = print_float_value;
    69b4:	84 ec       	ldi	r24, 0xC4	; 196
    69b6:	92 e3       	ldi	r25, 0x32	; 50
    69b8:	84 83       	std	Z+4, r24	; 0x04
    69ba:	95 83       	std	Z+5, r25	; 0x05
  float_descriptor->cmp_fn = compare_float_values;
    69bc:	84 e9       	ldi	r24, 0x94	; 148
    69be:	92 e3       	ldi	r25, 0x32	; 50
    69c0:	80 83       	st	Z, r24
    69c2:	91 83       	std	Z+1, r25	; 0x01
  float_descriptor->equal_fn = equal_float_values;
    69c4:	8c ea       	ldi	r24, 0xAC	; 172
    69c6:	92 e3       	ldi	r25, 0x32	; 50
    69c8:	82 83       	std	Z+2, r24	; 0x02
    69ca:	93 83       	std	Z+3, r25	; 0x03
    69cc:	08 95       	ret

000069ce <equal_int_list_elem>:
	printf("%s", convert_meld_int_safe(MELD_INT(data)));
}

static bool
equal_int_list_elem(list_element el1, list_element el2)
{
    69ce:	0f 93       	push	r16
    69d0:	1f 93       	push	r17
    69d2:	fc 01       	movw	r30, r24
  return MELD_INT(el1) == MELD_INT(el2);
    69d4:	81 e0       	ldi	r24, 0x01	; 1
    69d6:	00 81       	ld	r16, Z
    69d8:	11 81       	ldd	r17, Z+1	; 0x01
    69da:	22 81       	ldd	r18, Z+2	; 0x02
    69dc:	33 81       	ldd	r19, Z+3	; 0x03
    69de:	fb 01       	movw	r30, r22
    69e0:	40 81       	ld	r20, Z
    69e2:	51 81       	ldd	r21, Z+1	; 0x01
    69e4:	62 81       	ldd	r22, Z+2	; 0x02
    69e6:	73 81       	ldd	r23, Z+3	; 0x03
    69e8:	04 17       	cp	r16, r20
    69ea:	15 07       	cpc	r17, r21
    69ec:	26 07       	cpc	r18, r22
    69ee:	37 07       	cpc	r19, r23
    69f0:	09 f0       	breq	.+2      	; 0x69f4 <equal_int_list_elem+0x26>
    69f2:	80 e0       	ldi	r24, 0x00	; 0
}
    69f4:	1f 91       	pop	r17
    69f6:	0f 91       	pop	r16
    69f8:	08 95       	ret

000069fa <equal_float_list_elem>:
    printf("%f", (double)(MELD_FLOAT(data)));
}

static bool
equal_float_list_elem(list_element el1, list_element el2)
{
    69fa:	cf 93       	push	r28
  return MELD_FLOAT(el1) == MELD_FLOAT(el2);
    69fc:	c1 e0       	ldi	r28, 0x01	; 1
    69fe:	fb 01       	movw	r30, r22
    6a00:	20 81       	ld	r18, Z
    6a02:	31 81       	ldd	r19, Z+1	; 0x01
    6a04:	42 81       	ldd	r20, Z+2	; 0x02
    6a06:	53 81       	ldd	r21, Z+3	; 0x03
    6a08:	fc 01       	movw	r30, r24
    6a0a:	60 81       	ld	r22, Z
    6a0c:	71 81       	ldd	r23, Z+1	; 0x01
    6a0e:	82 81       	ldd	r24, Z+2	; 0x02
    6a10:	93 81       	ldd	r25, Z+3	; 0x03
    6a12:	0e 94 27 39 	call	0x724e	; 0x724e <__cmpsf2>
    6a16:	81 11       	cpse	r24, r1
    6a18:	c0 e0       	ldi	r28, 0x00	; 0
}
    6a1a:	8c 2f       	mov	r24, r28
    6a1c:	cf 91       	pop	r28
    6a1e:	08 95       	ret

00006a20 <print_node_list_elem>:

static void
print_node_list_elem(list_element data)
{
    6a20:	08 95       	ret

00006a22 <equal_node_list_elem>:
#endif
}

static bool
equal_node_list_elem(list_element el1, list_element el2)
{
    6a22:	fc 01       	movw	r30, r24
	return MELD_PTR(el1) == MELD_PTR(el2);
    6a24:	81 e0       	ldi	r24, 0x01	; 1
    6a26:	40 81       	ld	r20, Z
    6a28:	51 81       	ldd	r21, Z+1	; 0x01
    6a2a:	fb 01       	movw	r30, r22
    6a2c:	20 81       	ld	r18, Z
    6a2e:	31 81       	ldd	r19, Z+1	; 0x01
    6a30:	42 17       	cp	r20, r18
    6a32:	53 07       	cpc	r21, r19
    6a34:	09 f0       	breq	.+2      	; 0x6a38 <equal_node_list_elem+0x16>
    6a36:	80 e0       	ldi	r24, 0x00	; 0
}
    6a38:	08 95       	ret

00006a3a <list_create>:
static list_descriptor *float_descriptor = NULL;
static list_descriptor *node_descriptor = NULL;

static inline List*
list_create(list_descriptor *descriptor)
{
    6a3a:	cf 93       	push	r28
    6a3c:	df 93       	push	r29
    6a3e:	ec 01       	movw	r28, r24
	List *ret = (List*)malloc(sizeof(List));
    6a40:	88 e0       	ldi	r24, 0x08	; 8
    6a42:	90 e0       	ldi	r25, 0x00	; 0
    6a44:	0e 94 a5 3b 	call	0x774a	; 0x774a <malloc>
    6a48:	fc 01       	movw	r30, r24

	ret->total = 0;
    6a4a:	14 82       	std	Z+4, r1	; 0x04
    6a4c:	15 82       	std	Z+5, r1	; 0x05
  ret->descriptor = descriptor;
    6a4e:	c6 83       	std	Z+6, r28	; 0x06
    6a50:	d7 83       	std	Z+7, r29	; 0x07
	ret->head = ret->tail = NULL;
    6a52:	12 82       	std	Z+2, r1	; 0x02
    6a54:	13 82       	std	Z+3, r1	; 0x03
    6a56:	10 82       	st	Z, r1
    6a58:	11 82       	std	Z+1, r1	; 0x01

	return ret;
}
    6a5a:	df 91       	pop	r29
    6a5c:	cf 91       	pop	r28
    6a5e:	08 95       	ret

00006a60 <print_float_list_elem>:
  return MELD_INT(el1) == MELD_INT(el2);
}

static void
print_float_list_elem(list_element data)
{
    6a60:	fc 01       	movw	r30, r24
    printf("%f", (double)(MELD_FLOAT(data)));
    6a62:	83 81       	ldd	r24, Z+3	; 0x03
    6a64:	8f 93       	push	r24
    6a66:	82 81       	ldd	r24, Z+2	; 0x02
    6a68:	8f 93       	push	r24
    6a6a:	81 81       	ldd	r24, Z+1	; 0x01
    6a6c:	8f 93       	push	r24
    6a6e:	80 81       	ld	r24, Z
    6a70:	8f 93       	push	r24
    6a72:	84 e1       	ldi	r24, 0x14	; 20
    6a74:	97 e2       	ldi	r25, 0x27	; 39
    6a76:	9f 93       	push	r25
    6a78:	8f 93       	push	r24
    6a7a:	0e 94 b2 3e 	call	0x7d64	; 0x7d64 <printf>
    6a7e:	0f 90       	pop	r0
    6a80:	0f 90       	pop	r0
    6a82:	0f 90       	pop	r0
    6a84:	0f 90       	pop	r0
    6a86:	0f 90       	pop	r0
    6a88:	0f 90       	pop	r0
    6a8a:	08 95       	ret

00006a8c <list_push_head>:
	return node;
}

static inline void
list_push_head(List *list, list_element data)
{
    6a8c:	cf 92       	push	r12
    6a8e:	df 92       	push	r13
    6a90:	ef 92       	push	r14
    6a92:	ff 92       	push	r15
    6a94:	0f 93       	push	r16
    6a96:	1f 93       	push	r17
    6a98:	cf 93       	push	r28
    6a9a:	df 93       	push	r29
    6a9c:	1f 92       	push	r1
    6a9e:	1f 92       	push	r1
    6aa0:	cd b7       	in	r28, 0x3d	; 61
    6aa2:	de b7       	in	r29, 0x3e	; 62
    6aa4:	6c 01       	movw	r12, r24
	void *node = list_create_node(list, data, list->head);
    6aa6:	dc 01       	movw	r26, r24
    6aa8:	0d 91       	ld	r16, X+
    6aaa:	1c 91       	ld	r17, X
    6aac:	11 97       	sbiw	r26, 0x01	; 1
}

static inline void*
list_create_node(List *list, list_element data, void *next)
{
	void *node = (void*)malloc(sizeof(void*) + list->descriptor->size_elem);
    6aae:	16 96       	adiw	r26, 0x06	; 6
    6ab0:	ed 91       	ld	r30, X+
    6ab2:	fc 91       	ld	r31, X
    6ab4:	17 97       	sbiw	r26, 0x07	; 7
    6ab6:	80 81       	ld	r24, Z
    6ab8:	91 81       	ldd	r25, Z+1	; 0x01
    6aba:	02 96       	adiw	r24, 0x02	; 2
    6abc:	69 83       	std	Y+1, r22	; 0x01
    6abe:	7a 83       	std	Y+2, r23	; 0x02
    6ac0:	0e 94 a5 3b 	call	0x774a	; 0x774a <malloc>
    6ac4:	7c 01       	movw	r14, r24

	LIST_NEXT(node) = next;
    6ac6:	fc 01       	movw	r30, r24
    6ac8:	01 93       	st	Z+, r16
    6aca:	11 93       	st	Z+, r17

	memcpy(LIST_DATA(node), data, list->descriptor->size_elem);
    6acc:	d6 01       	movw	r26, r12
    6ace:	16 96       	adiw	r26, 0x06	; 6
    6ad0:	8d 91       	ld	r24, X+
    6ad2:	9c 91       	ld	r25, X
    6ad4:	17 97       	sbiw	r26, 0x07	; 7
    6ad6:	dc 01       	movw	r26, r24
    6ad8:	4d 91       	ld	r20, X+
    6ada:	5c 91       	ld	r21, X
    6adc:	69 81       	ldd	r22, Y+1	; 0x01
    6ade:	7a 81       	ldd	r23, Y+2	; 0x02
    6ae0:	cf 01       	movw	r24, r30
    6ae2:	0e 94 2c 3e 	call	0x7c58	; 0x7c58 <memcpy>
static inline void
list_push_head(List *list, list_element data)
{
	void *node = list_create_node(list, data, list->head);

	list->head = node;
    6ae6:	f6 01       	movw	r30, r12
    6ae8:	e0 82       	st	Z, r14
    6aea:	f1 82       	std	Z+1, r15	; 0x01

	if(list->tail == NULL)
    6aec:	22 81       	ldd	r18, Z+2	; 0x02
    6aee:	33 81       	ldd	r19, Z+3	; 0x03
    6af0:	23 2b       	or	r18, r19
    6af2:	11 f4       	brne	.+4      	; 0x6af8 <list_push_head+0x6c>
		list->tail = node;
    6af4:	e2 82       	std	Z+2, r14	; 0x02
    6af6:	f3 82       	std	Z+3, r15	; 0x03

	list->total++;
    6af8:	d6 01       	movw	r26, r12
    6afa:	14 96       	adiw	r26, 0x04	; 4
    6afc:	8d 91       	ld	r24, X+
    6afe:	9c 91       	ld	r25, X
    6b00:	15 97       	sbiw	r26, 0x05	; 5
    6b02:	01 96       	adiw	r24, 0x01	; 1
    6b04:	14 96       	adiw	r26, 0x04	; 4
    6b06:	8d 93       	st	X+, r24
    6b08:	9c 93       	st	X, r25
    6b0a:	15 97       	sbiw	r26, 0x05	; 5
}
    6b0c:	0f 90       	pop	r0
    6b0e:	0f 90       	pop	r0
    6b10:	df 91       	pop	r29
    6b12:	cf 91       	pop	r28
    6b14:	1f 91       	pop	r17
    6b16:	0f 91       	pop	r16
    6b18:	ff 90       	pop	r15
    6b1a:	ef 90       	pop	r14
    6b1c:	df 90       	pop	r13
    6b1e:	cf 90       	pop	r12
    6b20:	08 95       	ret

00006b22 <list_push_tail>:
	list->total++;
}

static inline void
list_push_tail(List *list, list_element data)
{
    6b22:	ef 92       	push	r14
    6b24:	ff 92       	push	r15
    6b26:	0f 93       	push	r16
    6b28:	1f 93       	push	r17
    6b2a:	cf 93       	push	r28
    6b2c:	df 93       	push	r29
    6b2e:	1f 92       	push	r1
    6b30:	1f 92       	push	r1
    6b32:	cd b7       	in	r28, 0x3d	; 61
    6b34:	de b7       	in	r29, 0x3e	; 62
    6b36:	7c 01       	movw	r14, r24
}

static inline void*
list_create_node(List *list, list_element data, void *next)
{
	void *node = (void*)malloc(sizeof(void*) + list->descriptor->size_elem);
    6b38:	dc 01       	movw	r26, r24
    6b3a:	16 96       	adiw	r26, 0x06	; 6
    6b3c:	ed 91       	ld	r30, X+
    6b3e:	fc 91       	ld	r31, X
    6b40:	17 97       	sbiw	r26, 0x07	; 7
    6b42:	80 81       	ld	r24, Z
    6b44:	91 81       	ldd	r25, Z+1	; 0x01
    6b46:	02 96       	adiw	r24, 0x02	; 2
    6b48:	69 83       	std	Y+1, r22	; 0x01
    6b4a:	7a 83       	std	Y+2, r23	; 0x02
    6b4c:	0e 94 a5 3b 	call	0x774a	; 0x774a <malloc>
    6b50:	8c 01       	movw	r16, r24

	LIST_NEXT(node) = next;
    6b52:	fc 01       	movw	r30, r24
    6b54:	11 92       	st	Z+, r1
    6b56:	11 92       	st	Z+, r1

	memcpy(LIST_DATA(node), data, list->descriptor->size_elem);
    6b58:	d7 01       	movw	r26, r14
    6b5a:	16 96       	adiw	r26, 0x06	; 6
    6b5c:	8d 91       	ld	r24, X+
    6b5e:	9c 91       	ld	r25, X
    6b60:	17 97       	sbiw	r26, 0x07	; 7
    6b62:	dc 01       	movw	r26, r24
    6b64:	4d 91       	ld	r20, X+
    6b66:	5c 91       	ld	r21, X
    6b68:	69 81       	ldd	r22, Y+1	; 0x01
    6b6a:	7a 81       	ldd	r23, Y+2	; 0x02
    6b6c:	cf 01       	movw	r24, r30
    6b6e:	0e 94 2c 3e 	call	0x7c58	; 0x7c58 <memcpy>
}

static inline void
list_push_tail_node(List *list, void *node)
{
	if(list->tail != NULL)
    6b72:	d7 01       	movw	r26, r14
    6b74:	12 96       	adiw	r26, 0x02	; 2
    6b76:	ed 91       	ld	r30, X+
    6b78:	fc 91       	ld	r31, X
    6b7a:	13 97       	sbiw	r26, 0x03	; 3
    6b7c:	30 97       	sbiw	r30, 0x00	; 0
    6b7e:	11 f0       	breq	.+4      	; 0x6b84 <list_push_tail+0x62>
		LIST_NEXT(list->tail) = node;
    6b80:	00 83       	st	Z, r16
    6b82:	11 83       	std	Z+1, r17	; 0x01
	list->tail = node;
    6b84:	f7 01       	movw	r30, r14
    6b86:	02 83       	std	Z+2, r16	; 0x02
    6b88:	13 83       	std	Z+3, r17	; 0x03
	if(list->head == NULL)
    6b8a:	80 81       	ld	r24, Z
    6b8c:	91 81       	ldd	r25, Z+1	; 0x01
    6b8e:	89 2b       	or	r24, r25
    6b90:	11 f4       	brne	.+4      	; 0x6b96 <list_push_tail+0x74>
		list->head = node;
    6b92:	00 83       	st	Z, r16
    6b94:	11 83       	std	Z+1, r17	; 0x01
	LIST_NEXT(node) = NULL;
    6b96:	d8 01       	movw	r26, r16
    6b98:	1d 92       	st	X+, r1
    6b9a:	1c 92       	st	X, r1
	list->total++;
    6b9c:	f7 01       	movw	r30, r14
    6b9e:	84 81       	ldd	r24, Z+4	; 0x04
    6ba0:	95 81       	ldd	r25, Z+5	; 0x05
    6ba2:	01 96       	adiw	r24, 0x01	; 1
    6ba4:	84 83       	std	Z+4, r24	; 0x04
    6ba6:	95 83       	std	Z+5, r25	; 0x05

static inline void
list_push_tail(List *list, list_element data)
{
	list_push_tail_node(list, list_create_node(list, data, NULL));
}
    6ba8:	0f 90       	pop	r0
    6baa:	0f 90       	pop	r0
    6bac:	df 91       	pop	r29
    6bae:	cf 91       	pop	r28
    6bb0:	1f 91       	pop	r17
    6bb2:	0f 91       	pop	r16
    6bb4:	ff 90       	pop	r15
    6bb6:	ef 90       	pop	r14
    6bb8:	08 95       	ret

00006bba <list_int_create>:
		return NULL;
}

List *list_int_create(void)
{
  assert(int_descriptor != NULL);
    6bba:	80 91 4a 29 	lds	r24, 0x294A
    6bbe:	90 91 4b 29 	lds	r25, 0x294B
    6bc2:	89 2b       	or	r24, r25
    6bc4:	41 f4       	brne	.+16     	; 0x6bd6 <list_int_create+0x1c>
    6bc6:	4d e0       	ldi	r20, 0x0D	; 13
    6bc8:	58 e2       	ldi	r21, 0x28	; 40
    6bca:	6a e5       	ldi	r22, 0x5A	; 90
    6bcc:	70 e0       	ldi	r23, 0x00	; 0
    6bce:	84 eb       	ldi	r24, 0xB4	; 180
    6bd0:	98 e2       	ldi	r25, 0x28	; 40
    6bd2:	0e 94 e5 19 	call	0x33ca	; 0x33ca <__myassert>
  
	return list_create(int_descriptor);
    6bd6:	80 91 4a 29 	lds	r24, 0x294A
    6bda:	90 91 4b 29 	lds	r25, 0x294B
    6bde:	0c 94 1d 35 	jmp	0x6a3a	; 0x6a3a <list_create>

00006be2 <list_float_create>:
}

List *list_float_create(void)
{
  assert(float_descriptor != NULL);
    6be2:	80 91 4c 29 	lds	r24, 0x294C
    6be6:	90 91 4d 29 	lds	r25, 0x294D
    6bea:	89 2b       	or	r24, r25
    6bec:	41 f4       	brne	.+16     	; 0x6bfe <list_float_create+0x1c>
    6bee:	4d e6       	ldi	r20, 0x6D	; 109
    6bf0:	58 e2       	ldi	r21, 0x28	; 40
    6bf2:	61 e6       	ldi	r22, 0x61	; 97
    6bf4:	70 e0       	ldi	r23, 0x00	; 0
    6bf6:	84 eb       	ldi	r24, 0xB4	; 180
    6bf8:	98 e2       	ldi	r25, 0x28	; 40
    6bfa:	0e 94 e5 19 	call	0x33ca	; 0x33ca <__myassert>
  
	return list_create(float_descriptor);
    6bfe:	80 91 4c 29 	lds	r24, 0x294C
    6c02:	90 91 4d 29 	lds	r25, 0x294D
    6c06:	0c 94 1d 35 	jmp	0x6a3a	; 0x6a3a <list_create>

00006c0a <list_node_create>:
}

List *list_node_create(void)
{
	assert(node_descriptor != NULL);
    6c0a:	80 91 4e 29 	lds	r24, 0x294E
    6c0e:	90 91 4f 29 	lds	r25, 0x294F
    6c12:	89 2b       	or	r24, r25
    6c14:	41 f4       	brne	.+16     	; 0x6c26 <list_node_create+0x1c>
    6c16:	4e ef       	ldi	r20, 0xFE	; 254
    6c18:	58 e2       	ldi	r21, 0x28	; 40
    6c1a:	68 e6       	ldi	r22, 0x68	; 104
    6c1c:	70 e0       	ldi	r23, 0x00	; 0
    6c1e:	84 eb       	ldi	r24, 0xB4	; 180
    6c20:	98 e2       	ldi	r25, 0x28	; 40
    6c22:	0e 94 e5 19 	call	0x33ca	; 0x33ca <__myassert>

	return list_create(node_descriptor);
    6c26:	80 91 4e 29 	lds	r24, 0x294E
    6c2a:	90 91 4f 29 	lds	r25, 0x294F
    6c2e:	0c 94 1d 35 	jmp	0x6a3a	; 0x6a3a <list_create>

00006c32 <list_int_push_head>:
}

void list_int_push_head(List *list, meld_int data)
{
    6c32:	cf 93       	push	r28
    6c34:	df 93       	push	r29
    6c36:	00 d0       	rcall	.+0      	; 0x6c38 <list_int_push_head+0x6>
    6c38:	1f 92       	push	r1
    6c3a:	cd b7       	in	r28, 0x3d	; 61
    6c3c:	de b7       	in	r29, 0x3e	; 62
    6c3e:	49 83       	std	Y+1, r20	; 0x01
    6c40:	5a 83       	std	Y+2, r21	; 0x02
    6c42:	6b 83       	std	Y+3, r22	; 0x03
    6c44:	7c 83       	std	Y+4, r23	; 0x04
  list_push_head(list, (list_element)&data);
    6c46:	be 01       	movw	r22, r28
    6c48:	6f 5f       	subi	r22, 0xFF	; 255
    6c4a:	7f 4f       	sbci	r23, 0xFF	; 255
    6c4c:	0e 94 46 35 	call	0x6a8c	; 0x6a8c <list_push_head>
}
    6c50:	24 96       	adiw	r28, 0x04	; 4
    6c52:	cd bf       	out	0x3d, r28	; 61
    6c54:	de bf       	out	0x3e, r29	; 62
    6c56:	df 91       	pop	r29
    6c58:	cf 91       	pop	r28
    6c5a:	08 95       	ret

00006c5c <list_int_push_tail>:

void list_int_push_tail(List *list, meld_int data)
{
    6c5c:	cf 93       	push	r28
    6c5e:	df 93       	push	r29
    6c60:	00 d0       	rcall	.+0      	; 0x6c62 <list_int_push_tail+0x6>
    6c62:	1f 92       	push	r1
    6c64:	cd b7       	in	r28, 0x3d	; 61
    6c66:	de b7       	in	r29, 0x3e	; 62
    6c68:	49 83       	std	Y+1, r20	; 0x01
    6c6a:	5a 83       	std	Y+2, r21	; 0x02
    6c6c:	6b 83       	std	Y+3, r22	; 0x03
    6c6e:	7c 83       	std	Y+4, r23	; 0x04
	list_push_tail(list, (list_element)&data);
    6c70:	be 01       	movw	r22, r28
    6c72:	6f 5f       	subi	r22, 0xFF	; 255
    6c74:	7f 4f       	sbci	r23, 0xFF	; 255
    6c76:	0e 94 91 35 	call	0x6b22	; 0x6b22 <list_push_tail>
}
    6c7a:	24 96       	adiw	r28, 0x04	; 4
    6c7c:	cd bf       	out	0x3d, r28	; 61
    6c7e:	de bf       	out	0x3e, r29	; 62
    6c80:	df 91       	pop	r29
    6c82:	cf 91       	pop	r28
    6c84:	08 95       	ret

00006c86 <list_node_push_head>:

void list_node_push_head(List *list, void *data)
{
    6c86:	cf 93       	push	r28
    6c88:	df 93       	push	r29
    6c8a:	1f 92       	push	r1
    6c8c:	1f 92       	push	r1
    6c8e:	cd b7       	in	r28, 0x3d	; 61
    6c90:	de b7       	in	r29, 0x3e	; 62
    6c92:	69 83       	std	Y+1, r22	; 0x01
    6c94:	7a 83       	std	Y+2, r23	; 0x02
	list_push_head(list, (list_element)&data);
    6c96:	be 01       	movw	r22, r28
    6c98:	6f 5f       	subi	r22, 0xFF	; 255
    6c9a:	7f 4f       	sbci	r23, 0xFF	; 255
    6c9c:	0e 94 46 35 	call	0x6a8c	; 0x6a8c <list_push_head>
}
    6ca0:	0f 90       	pop	r0
    6ca2:	0f 90       	pop	r0
    6ca4:	df 91       	pop	r29
    6ca6:	cf 91       	pop	r28
    6ca8:	08 95       	ret

00006caa <list_node_push_tail>:

void list_node_push_tail(List *list, void *data)
{
    6caa:	cf 93       	push	r28
    6cac:	df 93       	push	r29
    6cae:	1f 92       	push	r1
    6cb0:	1f 92       	push	r1
    6cb2:	cd b7       	in	r28, 0x3d	; 61
    6cb4:	de b7       	in	r29, 0x3e	; 62
    6cb6:	69 83       	std	Y+1, r22	; 0x01
    6cb8:	7a 83       	std	Y+2, r23	; 0x02
	list_push_tail(list, (list_element)&data);
    6cba:	be 01       	movw	r22, r28
    6cbc:	6f 5f       	subi	r22, 0xFF	; 255
    6cbe:	7f 4f       	sbci	r23, 0xFF	; 255
    6cc0:	0e 94 91 35 	call	0x6b22	; 0x6b22 <list_push_tail>
}
    6cc4:	0f 90       	pop	r0
    6cc6:	0f 90       	pop	r0
    6cc8:	df 91       	pop	r29
    6cca:	cf 91       	pop	r28
    6ccc:	08 95       	ret

00006cce <list_float_push_head>:

void list_float_push_head(List *list, meld_float data)
{
    6cce:	cf 93       	push	r28
    6cd0:	df 93       	push	r29
    6cd2:	00 d0       	rcall	.+0      	; 0x6cd4 <list_float_push_head+0x6>
    6cd4:	1f 92       	push	r1
    6cd6:	cd b7       	in	r28, 0x3d	; 61
    6cd8:	de b7       	in	r29, 0x3e	; 62
    6cda:	49 83       	std	Y+1, r20	; 0x01
    6cdc:	5a 83       	std	Y+2, r21	; 0x02
    6cde:	6b 83       	std	Y+3, r22	; 0x03
    6ce0:	7c 83       	std	Y+4, r23	; 0x04
  list_push_head(list, (list_element)&data);
    6ce2:	be 01       	movw	r22, r28
    6ce4:	6f 5f       	subi	r22, 0xFF	; 255
    6ce6:	7f 4f       	sbci	r23, 0xFF	; 255
    6ce8:	0e 94 46 35 	call	0x6a8c	; 0x6a8c <list_push_head>
}
    6cec:	24 96       	adiw	r28, 0x04	; 4
    6cee:	cd bf       	out	0x3d, r28	; 61
    6cf0:	de bf       	out	0x3e, r29	; 62
    6cf2:	df 91       	pop	r29
    6cf4:	cf 91       	pop	r28
    6cf6:	08 95       	ret

00006cf8 <list_float_push_tail>:

void list_float_push_tail(List *list, meld_float data)
{
    6cf8:	cf 93       	push	r28
    6cfa:	df 93       	push	r29
    6cfc:	00 d0       	rcall	.+0      	; 0x6cfe <list_float_push_tail+0x6>
    6cfe:	1f 92       	push	r1
    6d00:	cd b7       	in	r28, 0x3d	; 61
    6d02:	de b7       	in	r29, 0x3e	; 62
    6d04:	49 83       	std	Y+1, r20	; 0x01
    6d06:	5a 83       	std	Y+2, r21	; 0x02
    6d08:	6b 83       	std	Y+3, r22	; 0x03
    6d0a:	7c 83       	std	Y+4, r23	; 0x04
	list_push_tail(list, (list_element)&data);
    6d0c:	be 01       	movw	r22, r28
    6d0e:	6f 5f       	subi	r22, 0xFF	; 255
    6d10:	7f 4f       	sbci	r23, 0xFF	; 255
    6d12:	0e 94 91 35 	call	0x6b22	; 0x6b22 <list_push_tail>
}
    6d16:	24 96       	adiw	r28, 0x04	; 4
    6d18:	cd bf       	out	0x3d, r28	; 61
    6d1a:	de bf       	out	0x3e, r29	; 62
    6d1c:	df 91       	pop	r29
    6d1e:	cf 91       	pop	r28
    6d20:	08 95       	ret

00006d22 <list_is_float>:

bool list_is_float(List *list)
{
	return list->descriptor == float_descriptor;
    6d22:	61 e0       	ldi	r22, 0x01	; 1
    6d24:	fc 01       	movw	r30, r24
    6d26:	46 81       	ldd	r20, Z+6	; 0x06
    6d28:	57 81       	ldd	r21, Z+7	; 0x07
    6d2a:	20 91 4c 29 	lds	r18, 0x294C
    6d2e:	30 91 4d 29 	lds	r19, 0x294D
    6d32:	42 17       	cp	r20, r18
    6d34:	53 07       	cpc	r21, r19
    6d36:	09 f0       	breq	.+2      	; 0x6d3a <list_is_float+0x18>
    6d38:	60 e0       	ldi	r22, 0x00	; 0
}
    6d3a:	86 2f       	mov	r24, r22
    6d3c:	08 95       	ret

00006d3e <list_is_int>:

bool list_is_int(List *list)
{
	return list->descriptor == int_descriptor;
    6d3e:	61 e0       	ldi	r22, 0x01	; 1
    6d40:	fc 01       	movw	r30, r24
    6d42:	46 81       	ldd	r20, Z+6	; 0x06
    6d44:	57 81       	ldd	r21, Z+7	; 0x07
    6d46:	20 91 4a 29 	lds	r18, 0x294A
    6d4a:	30 91 4b 29 	lds	r19, 0x294B
    6d4e:	42 17       	cp	r20, r18
    6d50:	53 07       	cpc	r21, r19
    6d52:	09 f0       	breq	.+2      	; 0x6d56 <list_is_int+0x18>
    6d54:	60 e0       	ldi	r22, 0x00	; 0
}
    6d56:	86 2f       	mov	r24, r22
    6d58:	08 95       	ret

00006d5a <list_is_node>:

bool list_is_node(List *list)
{
	return list->descriptor == node_descriptor;
    6d5a:	61 e0       	ldi	r22, 0x01	; 1
    6d5c:	fc 01       	movw	r30, r24
    6d5e:	46 81       	ldd	r20, Z+6	; 0x06
    6d60:	57 81       	ldd	r21, Z+7	; 0x07
    6d62:	20 91 4e 29 	lds	r18, 0x294E
    6d66:	30 91 4f 29 	lds	r19, 0x294F
    6d6a:	42 17       	cp	r20, r18
    6d6c:	53 07       	cpc	r21, r19
    6d6e:	09 f0       	breq	.+2      	; 0x6d72 <list_is_node+0x18>
    6d70:	60 e0       	ldi	r22, 0x00	; 0
}
    6d72:	86 2f       	mov	r24, r22
    6d74:	08 95       	ret

00006d76 <list_int_from_vector>:

List* list_int_from_vector(meld_int *vec, int size)
{
    6d76:	af 92       	push	r10
    6d78:	bf 92       	push	r11
    6d7a:	cf 92       	push	r12
    6d7c:	df 92       	push	r13
    6d7e:	ef 92       	push	r14
    6d80:	ff 92       	push	r15
    6d82:	0f 93       	push	r16
    6d84:	1f 93       	push	r17
    6d86:	cf 93       	push	r28
    6d88:	df 93       	push	r29
    6d8a:	00 d0       	rcall	.+0      	; 0x6d8c <list_int_from_vector+0x16>
    6d8c:	1f 92       	push	r1
    6d8e:	cd b7       	in	r28, 0x3d	; 61
    6d90:	de b7       	in	r29, 0x3e	; 62
    6d92:	7c 01       	movw	r14, r24
    6d94:	6b 01       	movw	r12, r22
	List *list = list_int_create();
    6d96:	0e 94 dd 35 	call	0x6bba	; 0x6bba <list_int_create>
    6d9a:	5c 01       	movw	r10, r24
    6d9c:	87 01       	movw	r16, r14
	int i;

	for(i = 0; i < size; ++i)
    6d9e:	e1 2c       	mov	r14, r1
    6da0:	f1 2c       	mov	r15, r1
    6da2:	13 c0       	rjmp	.+38     	; 0x6dca <list_int_from_vector+0x54>
		list_int_push_tail(list, vec[i]);
    6da4:	f8 01       	movw	r30, r16
    6da6:	41 91       	ld	r20, Z+
    6da8:	51 91       	ld	r21, Z+
    6daa:	61 91       	ld	r22, Z+
    6dac:	71 91       	ld	r23, Z+
    6dae:	8f 01       	movw	r16, r30
    6db0:	49 83       	std	Y+1, r20	; 0x01
    6db2:	5a 83       	std	Y+2, r21	; 0x02
    6db4:	6b 83       	std	Y+3, r22	; 0x03
    6db6:	7c 83       	std	Y+4, r23	; 0x04
  list_push_head(list, (list_element)&data);
}

void list_int_push_tail(List *list, meld_int data)
{
	list_push_tail(list, (list_element)&data);
    6db8:	be 01       	movw	r22, r28
    6dba:	6f 5f       	subi	r22, 0xFF	; 255
    6dbc:	7f 4f       	sbci	r23, 0xFF	; 255
    6dbe:	c5 01       	movw	r24, r10
    6dc0:	0e 94 91 35 	call	0x6b22	; 0x6b22 <list_push_tail>
List* list_int_from_vector(meld_int *vec, int size)
{
	List *list = list_int_create();
	int i;

	for(i = 0; i < size; ++i)
    6dc4:	ff ef       	ldi	r31, 0xFF	; 255
    6dc6:	ef 1a       	sub	r14, r31
    6dc8:	ff 0a       	sbc	r15, r31
    6dca:	ec 14       	cp	r14, r12
    6dcc:	fd 04       	cpc	r15, r13
    6dce:	54 f3       	brlt	.-44     	; 0x6da4 <list_int_from_vector+0x2e>
		list_int_push_tail(list, vec[i]);

	return list;
}
    6dd0:	c5 01       	movw	r24, r10
    6dd2:	24 96       	adiw	r28, 0x04	; 4
    6dd4:	cd bf       	out	0x3d, r28	; 61
    6dd6:	de bf       	out	0x3e, r29	; 62
    6dd8:	df 91       	pop	r29
    6dda:	cf 91       	pop	r28
    6ddc:	1f 91       	pop	r17
    6dde:	0f 91       	pop	r16
    6de0:	ff 90       	pop	r15
    6de2:	ef 90       	pop	r14
    6de4:	df 90       	pop	r13
    6de6:	cf 90       	pop	r12
    6de8:	bf 90       	pop	r11
    6dea:	af 90       	pop	r10
    6dec:	08 95       	ret

00006dee <list_float_from_vector>:

List* list_float_from_vector(meld_float *vec, int size)
{
    6dee:	af 92       	push	r10
    6df0:	bf 92       	push	r11
    6df2:	cf 92       	push	r12
    6df4:	df 92       	push	r13
    6df6:	ef 92       	push	r14
    6df8:	ff 92       	push	r15
    6dfa:	0f 93       	push	r16
    6dfc:	1f 93       	push	r17
    6dfe:	cf 93       	push	r28
    6e00:	df 93       	push	r29
    6e02:	00 d0       	rcall	.+0      	; 0x6e04 <list_float_from_vector+0x16>
    6e04:	1f 92       	push	r1
    6e06:	cd b7       	in	r28, 0x3d	; 61
    6e08:	de b7       	in	r29, 0x3e	; 62
    6e0a:	7c 01       	movw	r14, r24
    6e0c:	6b 01       	movw	r12, r22
	List *list = list_float_create();
    6e0e:	0e 94 f1 35 	call	0x6be2	; 0x6be2 <list_float_create>
    6e12:	5c 01       	movw	r10, r24
    6e14:	87 01       	movw	r16, r14
	int i;

	for(i = 0; i < size; ++i)
    6e16:	e1 2c       	mov	r14, r1
    6e18:	f1 2c       	mov	r15, r1
    6e1a:	13 c0       	rjmp	.+38     	; 0x6e42 <list_float_from_vector+0x54>
		list_float_push_tail(list, vec[i]);
    6e1c:	f8 01       	movw	r30, r16
    6e1e:	41 91       	ld	r20, Z+
    6e20:	51 91       	ld	r21, Z+
    6e22:	61 91       	ld	r22, Z+
    6e24:	71 91       	ld	r23, Z+
    6e26:	8f 01       	movw	r16, r30
    6e28:	49 83       	std	Y+1, r20	; 0x01
    6e2a:	5a 83       	std	Y+2, r21	; 0x02
    6e2c:	6b 83       	std	Y+3, r22	; 0x03
    6e2e:	7c 83       	std	Y+4, r23	; 0x04
  list_push_head(list, (list_element)&data);
}

void list_float_push_tail(List *list, meld_float data)
{
	list_push_tail(list, (list_element)&data);
    6e30:	be 01       	movw	r22, r28
    6e32:	6f 5f       	subi	r22, 0xFF	; 255
    6e34:	7f 4f       	sbci	r23, 0xFF	; 255
    6e36:	c5 01       	movw	r24, r10
    6e38:	0e 94 91 35 	call	0x6b22	; 0x6b22 <list_push_tail>
List* list_float_from_vector(meld_float *vec, int size)
{
	List *list = list_float_create();
	int i;

	for(i = 0; i < size; ++i)
    6e3c:	ff ef       	ldi	r31, 0xFF	; 255
    6e3e:	ef 1a       	sub	r14, r31
    6e40:	ff 0a       	sbc	r15, r31
    6e42:	ec 14       	cp	r14, r12
    6e44:	fd 04       	cpc	r15, r13
    6e46:	54 f3       	brlt	.-44     	; 0x6e1c <list_float_from_vector+0x2e>
		list_float_push_tail(list, vec[i]);

	return list;
}
    6e48:	c5 01       	movw	r24, r10
    6e4a:	24 96       	adiw	r28, 0x04	; 4
    6e4c:	cd bf       	out	0x3d, r28	; 61
    6e4e:	de bf       	out	0x3e, r29	; 62
    6e50:	df 91       	pop	r29
    6e52:	cf 91       	pop	r28
    6e54:	1f 91       	pop	r17
    6e56:	0f 91       	pop	r16
    6e58:	ff 90       	pop	r15
    6e5a:	ef 90       	pop	r14
    6e5c:	df 90       	pop	r13
    6e5e:	cf 90       	pop	r12
    6e60:	bf 90       	pop	r11
    6e62:	af 90       	pop	r10
    6e64:	08 95       	ret

00006e66 <list_node_from_vector>:

List* list_node_from_vector(void **vec, int size)
{
    6e66:	af 92       	push	r10
    6e68:	bf 92       	push	r11
    6e6a:	cf 92       	push	r12
    6e6c:	df 92       	push	r13
    6e6e:	ef 92       	push	r14
    6e70:	ff 92       	push	r15
    6e72:	0f 93       	push	r16
    6e74:	1f 93       	push	r17
    6e76:	cf 93       	push	r28
    6e78:	df 93       	push	r29
    6e7a:	1f 92       	push	r1
    6e7c:	1f 92       	push	r1
    6e7e:	cd b7       	in	r28, 0x3d	; 61
    6e80:	de b7       	in	r29, 0x3e	; 62
    6e82:	7c 01       	movw	r14, r24
    6e84:	6b 01       	movw	r12, r22
	List *list = list_node_create();
    6e86:	0e 94 05 36 	call	0x6c0a	; 0x6c0a <list_node_create>
    6e8a:	5c 01       	movw	r10, r24
    6e8c:	87 01       	movw	r16, r14
	int i;

	for(i = 0; i < size; ++i) {
    6e8e:	e1 2c       	mov	r14, r1
    6e90:	f1 2c       	mov	r15, r1
    6e92:	0f c0       	rjmp	.+30     	; 0x6eb2 <list_node_from_vector+0x4c>
		list_node_push_tail(list, vec[i]);
    6e94:	f8 01       	movw	r30, r16
    6e96:	21 91       	ld	r18, Z+
    6e98:	31 91       	ld	r19, Z+
    6e9a:	8f 01       	movw	r16, r30
    6e9c:	29 83       	std	Y+1, r18	; 0x01
    6e9e:	3a 83       	std	Y+2, r19	; 0x02
	list_push_head(list, (list_element)&data);
}

void list_node_push_tail(List *list, void *data)
{
	list_push_tail(list, (list_element)&data);
    6ea0:	be 01       	movw	r22, r28
    6ea2:	6f 5f       	subi	r22, 0xFF	; 255
    6ea4:	7f 4f       	sbci	r23, 0xFF	; 255
    6ea6:	c5 01       	movw	r24, r10
    6ea8:	0e 94 91 35 	call	0x6b22	; 0x6b22 <list_push_tail>
List* list_node_from_vector(void **vec, int size)
{
	List *list = list_node_create();
	int i;

	for(i = 0; i < size; ++i) {
    6eac:	ff ef       	ldi	r31, 0xFF	; 255
    6eae:	ef 1a       	sub	r14, r31
    6eb0:	ff 0a       	sbc	r15, r31
    6eb2:	ec 14       	cp	r14, r12
    6eb4:	fd 04       	cpc	r15, r13
    6eb6:	74 f3       	brlt	.-36     	; 0x6e94 <list_node_from_vector+0x2e>
		list_node_push_tail(list, vec[i]);
	}

	return list;
}
    6eb8:	c5 01       	movw	r24, r10
    6eba:	0f 90       	pop	r0
    6ebc:	0f 90       	pop	r0
    6ebe:	df 91       	pop	r29
    6ec0:	cf 91       	pop	r28
    6ec2:	1f 91       	pop	r17
    6ec4:	0f 91       	pop	r16
    6ec6:	ff 90       	pop	r15
    6ec8:	ef 90       	pop	r14
    6eca:	df 90       	pop	r13
    6ecc:	cf 90       	pop	r12
    6ece:	bf 90       	pop	r11
    6ed0:	af 90       	pop	r10
    6ed2:	08 95       	ret

00006ed4 <list_delete>:

void list_delete(List *list)
{
    6ed4:	0f 93       	push	r16
    6ed6:	1f 93       	push	r17
    6ed8:	cf 93       	push	r28
    6eda:	df 93       	push	r29
    6edc:	ec 01       	movw	r28, r24
	void *chain = list->head;
    6ede:	e8 81       	ld	r30, Y
    6ee0:	f9 81       	ldd	r31, Y+1	; 0x01
	void *next;
	
	while(chain) {
    6ee2:	06 c0       	rjmp	.+12     	; 0x6ef0 <list_delete+0x1c>
		next = LIST_NEXT(chain);
    6ee4:	00 81       	ld	r16, Z
    6ee6:	11 81       	ldd	r17, Z+1	; 0x01
		free(chain);
    6ee8:	cf 01       	movw	r24, r30
    6eea:	0e 94 40 3c 	call	0x7880	; 0x7880 <free>
		chain = next;
    6eee:	f8 01       	movw	r30, r16
void list_delete(List *list)
{
	void *chain = list->head;
	void *next;
	
	while(chain) {
    6ef0:	30 97       	sbiw	r30, 0x00	; 0
    6ef2:	c1 f7       	brne	.-16     	; 0x6ee4 <list_delete+0x10>
		next = LIST_NEXT(chain);
		free(chain);
		chain = next;
	}
	free(list);
    6ef4:	ce 01       	movw	r24, r28
}
    6ef6:	df 91       	pop	r29
    6ef8:	cf 91       	pop	r28
    6efa:	1f 91       	pop	r17
    6efc:	0f 91       	pop	r16
	while(chain) {
		next = LIST_NEXT(chain);
		free(chain);
		chain = next;
	}
	free(list);
    6efe:	0c 94 40 3c 	jmp	0x7880	; 0x7880 <free>

00006f02 <list_equal>:
}

int list_equal(List *list1, List *list2)
{
    6f02:	0f 93       	push	r16
    6f04:	1f 93       	push	r17
    6f06:	cf 93       	push	r28
    6f08:	df 93       	push	r29
    6f0a:	ec 01       	movw	r28, r24
    6f0c:	8b 01       	movw	r16, r22
  if(list1->descriptor != list2->descriptor)
    6f0e:	2e 81       	ldd	r18, Y+6	; 0x06
    6f10:	3f 81       	ldd	r19, Y+7	; 0x07
    6f12:	fb 01       	movw	r30, r22
    6f14:	86 81       	ldd	r24, Z+6	; 0x06
    6f16:	97 81       	ldd	r25, Z+7	; 0x07
    6f18:	28 17       	cp	r18, r24
    6f1a:	39 07       	cpc	r19, r25
    6f1c:	19 f0       	breq	.+6      	; 0x6f24 <list_equal+0x22>
    return 0;
    6f1e:	20 e0       	ldi	r18, 0x00	; 0
    6f20:	30 e0       	ldi	r19, 0x00	; 0
    6f22:	1f c0       	rjmp	.+62     	; 0x6f62 <list_equal+0x60>
    
	if(list_total(list1) != list_total(list2))
    6f24:	2c 81       	ldd	r18, Y+4	; 0x04
    6f26:	3d 81       	ldd	r19, Y+5	; 0x05
    6f28:	fb 01       	movw	r30, r22
    6f2a:	84 81       	ldd	r24, Z+4	; 0x04
    6f2c:	95 81       	ldd	r25, Z+5	; 0x05
    6f2e:	28 17       	cp	r18, r24
    6f30:	39 07       	cpc	r19, r25
    6f32:	a9 f7       	brne	.-22     	; 0x6f1e <list_equal+0x1c>

	node_descriptor = malloc(sizeof(list_descriptor));
	node_descriptor->size_elem = sizeof(void*);
	node_descriptor->print_fn = print_node_list_elem;
	node_descriptor->equal_fn = equal_node_list_elem;
}
    6f34:	88 81       	ld	r24, Y
    6f36:	99 81       	ldd	r25, Y+1	; 0x01
    6f38:	0e c0       	rjmp	.+28     	; 0x6f56 <list_equal+0x54>
	
	list_iterator it1 = list_get_iterator(list1);
	list_iterator it2 = list_get_iterator(list2);

	while(list_iterator_has_next(it1)) {
	  if(!list1->descriptor->equal_fn(list_iterator_data(it1), list_iterator_data(it2)))
    6f3a:	ee 81       	ldd	r30, Y+6	; 0x06
    6f3c:	ff 81       	ldd	r31, Y+7	; 0x07
    6f3e:	6e 5f       	subi	r22, 0xFE	; 254
    6f40:	7f 4f       	sbci	r23, 0xFF	; 255
    6f42:	04 80       	ldd	r0, Z+4	; 0x04
    6f44:	f5 81       	ldd	r31, Z+5	; 0x05
    6f46:	e0 2d       	mov	r30, r0
    6f48:	02 96       	adiw	r24, 0x02	; 2
    6f4a:	19 95       	eicall
    6f4c:	88 23       	and	r24, r24
    6f4e:	39 f3       	breq	.-50     	; 0x6f1e <list_equal+0x1c>
    6f50:	88 81       	ld	r24, Y
    6f52:	99 81       	ldd	r25, Y+1	; 0x01
    6f54:	f8 01       	movw	r30, r16
    6f56:	60 81       	ld	r22, Z
    6f58:	71 81       	ldd	r23, Z+1	; 0x01
		return 0;
	
	list_iterator it1 = list_get_iterator(list1);
	list_iterator it2 = list_get_iterator(list2);

	while(list_iterator_has_next(it1)) {
    6f5a:	00 97       	sbiw	r24, 0x00	; 0
    6f5c:	71 f7       	brne	.-36     	; 0x6f3a <list_equal+0x38>

		it1 = list_iterator_next(list1);
		it2 = list_iterator_next(list2);
	}

	return 1; /* they are equal! */
    6f5e:	21 e0       	ldi	r18, 0x01	; 1
    6f60:	30 e0       	ldi	r19, 0x00	; 0
}
    6f62:	c9 01       	movw	r24, r18
    6f64:	df 91       	pop	r29
    6f66:	cf 91       	pop	r28
    6f68:	1f 91       	pop	r17
    6f6a:	0f 91       	pop	r16
    6f6c:	08 95       	ret

00006f6e <list_print>:

void list_print(List *list)
{
    6f6e:	0f 93       	push	r16
    6f70:	1f 93       	push	r17
    6f72:	cf 93       	push	r28
    6f74:	df 93       	push	r29
    6f76:	ec 01       	movw	r28, r24

	node_descriptor = malloc(sizeof(list_descriptor));
	node_descriptor->size_elem = sizeof(void*);
	node_descriptor->print_fn = print_node_list_elem;
	node_descriptor->equal_fn = equal_node_list_elem;
}
    6f78:	08 81       	ld	r16, Y
    6f7a:	19 81       	ldd	r17, Y+1	; 0x01

void list_print(List *list)
{
	list_iterator it = list_get_iterator(list);

	printf("LIST %p with %d nodes:\n", list, list->total);
    6f7c:	8d 81       	ldd	r24, Y+5	; 0x05
    6f7e:	8f 93       	push	r24
    6f80:	8c 81       	ldd	r24, Y+4	; 0x04
    6f82:	8f 93       	push	r24
    6f84:	df 93       	push	r29
    6f86:	cf 93       	push	r28
    6f88:	86 e1       	ldi	r24, 0x16	; 22
    6f8a:	99 e2       	ldi	r25, 0x29	; 41
    6f8c:	9f 93       	push	r25
    6f8e:	8f 93       	push	r24
    6f90:	0e 94 b2 3e 	call	0x7d64	; 0x7d64 <printf>

	printf("\t");
    6f94:	89 e0       	ldi	r24, 0x09	; 9
    6f96:	90 e0       	ldi	r25, 0x00	; 0
    6f98:	0e 94 ca 3e 	call	0x7d94	; 0x7d94 <putchar>
	while (list_iterator_has_next(it)) {
    6f9c:	0f 90       	pop	r0
    6f9e:	0f 90       	pop	r0
    6fa0:	0f 90       	pop	r0
    6fa2:	0f 90       	pop	r0
    6fa4:	0f 90       	pop	r0
    6fa6:	0f 90       	pop	r0
    6fa8:	12 c0       	rjmp	.+36     	; 0x6fce <list_print+0x60>
    list->descriptor->print_fn(list_iterator_data(it));
    6faa:	ee 81       	ldd	r30, Y+6	; 0x06
    6fac:	ff 81       	ldd	r31, Y+7	; 0x07
    6fae:	02 80       	ldd	r0, Z+2	; 0x02
    6fb0:	f3 81       	ldd	r31, Z+3	; 0x03
    6fb2:	e0 2d       	mov	r30, r0
    6fb4:	c8 01       	movw	r24, r16
    6fb6:	02 96       	adiw	r24, 0x02	; 2
    6fb8:	19 95       	eicall
    6fba:	f8 01       	movw	r30, r16
    6fbc:	00 81       	ld	r16, Z
    6fbe:	11 81       	ldd	r17, Z+1	; 0x01
		it = list_iterator_next(it);
		if (list_iterator_has_next(it))
    6fc0:	01 15       	cp	r16, r1
    6fc2:	11 05       	cpc	r17, r1
    6fc4:	21 f0       	breq	.+8      	; 0x6fce <list_print+0x60>
			printf(" ");
    6fc6:	80 e2       	ldi	r24, 0x20	; 32
    6fc8:	90 e0       	ldi	r25, 0x00	; 0
    6fca:	0e 94 ca 3e 	call	0x7d94	; 0x7d94 <putchar>
	list_iterator it = list_get_iterator(list);

	printf("LIST %p with %d nodes:\n", list, list->total);

	printf("\t");
	while (list_iterator_has_next(it)) {
    6fce:	01 15       	cp	r16, r1
    6fd0:	11 05       	cpc	r17, r1
    6fd2:	59 f7       	brne	.-42     	; 0x6faa <list_print+0x3c>
    list->descriptor->print_fn(list_iterator_data(it));
		it = list_iterator_next(it);
		if (list_iterator_has_next(it))
			printf(" ");
	}
	printf("\n");
    6fd4:	8a e0       	ldi	r24, 0x0A	; 10
    6fd6:	90 e0       	ldi	r25, 0x00	; 0
}
    6fd8:	df 91       	pop	r29
    6fda:	cf 91       	pop	r28
    6fdc:	1f 91       	pop	r17
    6fde:	0f 91       	pop	r16
    list->descriptor->print_fn(list_iterator_data(it));
		it = list_iterator_next(it);
		if (list_iterator_has_next(it))
			printf(" ");
	}
	printf("\n");
    6fe0:	0c 94 ca 3e 	jmp	0x7d94	; 0x7d94 <putchar>

00006fe4 <list_reverse_first>:
}

void list_reverse_first(List *list)
{
    6fe4:	cf 93       	push	r28
    6fe6:	df 93       	push	r29
    6fe8:	fc 01       	movw	r30, r24
}

static inline void*
list_pop_head(List *list)
{
	if(list->head != NULL) {
    6fea:	a0 81       	ld	r26, Z
    6fec:	b1 81       	ldd	r27, Z+1	; 0x01
    6fee:	10 97       	sbiw	r26, 0x00	; 0
    6ff0:	11 f1       	breq	.+68     	; 0x7036 <list_reverse_first+0x52>
		void *ptr = list->head;

		list->head = LIST_NEXT(ptr);
    6ff2:	8d 91       	ld	r24, X+
    6ff4:	9c 91       	ld	r25, X
    6ff6:	11 97       	sbiw	r26, 0x01	; 1
    6ff8:	80 83       	st	Z, r24
    6ffa:	91 83       	std	Z+1, r25	; 0x01

		if(list->head == NULL)
    6ffc:	89 2b       	or	r24, r25
    6ffe:	11 f4       	brne	.+4      	; 0x7004 <list_reverse_first+0x20>
			list->tail = NULL;
    7000:	12 82       	std	Z+2, r1	; 0x02
    7002:	13 82       	std	Z+3, r1	; 0x03

		--list->total;
    7004:	84 81       	ldd	r24, Z+4	; 0x04
    7006:	95 81       	ldd	r25, Z+5	; 0x05
    7008:	9c 01       	movw	r18, r24
    700a:	21 50       	subi	r18, 0x01	; 1
    700c:	31 09       	sbc	r19, r1
    700e:	24 83       	std	Z+4, r18	; 0x04
    7010:	35 83       	std	Z+5, r19	; 0x05
}

static inline void
list_push_tail_node(List *list, void *node)
{
	if(list->tail != NULL)
    7012:	c2 81       	ldd	r28, Z+2	; 0x02
    7014:	d3 81       	ldd	r29, Z+3	; 0x03
    7016:	20 97       	sbiw	r28, 0x00	; 0
    7018:	11 f0       	breq	.+4      	; 0x701e <list_reverse_first+0x3a>
		LIST_NEXT(list->tail) = node;
    701a:	a8 83       	st	Y, r26
    701c:	b9 83       	std	Y+1, r27	; 0x01
	list->tail = node;
    701e:	a2 83       	std	Z+2, r26	; 0x02
    7020:	b3 83       	std	Z+3, r27	; 0x03
	if(list->head == NULL)
    7022:	20 81       	ld	r18, Z
    7024:	31 81       	ldd	r19, Z+1	; 0x01
    7026:	23 2b       	or	r18, r19
    7028:	11 f4       	brne	.+4      	; 0x702e <list_reverse_first+0x4a>
		list->head = node;
    702a:	a0 83       	st	Z, r26
    702c:	b1 83       	std	Z+1, r27	; 0x01
	LIST_NEXT(node) = NULL;
    702e:	1d 92       	st	X+, r1
    7030:	1c 92       	st	X, r1
	list->total++;
    7032:	84 83       	std	Z+4, r24	; 0x04
    7034:	95 83       	std	Z+5, r25	; 0x05
	void *node = list_pop_head(list);

	if (node) {
		list_push_tail_node(list, node);
	}
}
    7036:	df 91       	pop	r29
    7038:	cf 91       	pop	r28
    703a:	08 95       	ret

0000703c <list_copy>:

List* list_copy(List *list)
{
    703c:	0f 93       	push	r16
    703e:	1f 93       	push	r17
    7040:	cf 93       	push	r28
    7042:	df 93       	push	r29
    7044:	ec 01       	movw	r28, r24
	List *clone = list_create(list->descriptor);
    7046:	8e 81       	ldd	r24, Y+6	; 0x06
    7048:	9f 81       	ldd	r25, Y+7	; 0x07
    704a:	0e 94 1d 35 	call	0x6a3a	; 0x6a3a <list_create>
    704e:	8c 01       	movw	r16, r24
    7050:	06 c0       	rjmp	.+12     	; 0x705e <list_copy+0x22>
	list_iterator it = list_get_iterator(list);

	while(list_iterator_has_next(it)) {
		list_push_tail(clone, list_iterator_data(it));
    7052:	be 01       	movw	r22, r28
    7054:	6e 5f       	subi	r22, 0xFE	; 254
    7056:	7f 4f       	sbci	r23, 0xFF	; 255
    7058:	c8 01       	movw	r24, r16
    705a:	0e 94 91 35 	call	0x6b22	; 0x6b22 <list_push_tail>
    705e:	09 90       	ld	r0, Y+
    7060:	d8 81       	ld	r29, Y
    7062:	c0 2d       	mov	r28, r0
List* list_copy(List *list)
{
	List *clone = list_create(list->descriptor);
	list_iterator it = list_get_iterator(list);

	while(list_iterator_has_next(it)) {
    7064:	20 97       	sbiw	r28, 0x00	; 0
    7066:	a9 f7       	brne	.-22     	; 0x7052 <list_copy+0x16>

		it = list_iterator_next(it);
	}

	return clone;
}
    7068:	c8 01       	movw	r24, r16
    706a:	df 91       	pop	r29
    706c:	cf 91       	pop	r28
    706e:	1f 91       	pop	r17
    7070:	0f 91       	pop	r16
    7072:	08 95       	ret

00007074 <convert_meld_int_safe>:

#define MAXLEN 20

char*
convert_meld_int_safe(meld_int data)
{
    7074:	cf 92       	push	r12
    7076:	df 92       	push	r13
    7078:	ef 92       	push	r14
    707a:	ff 92       	push	r15
    707c:	0f 93       	push	r16
    707e:	1f 93       	push	r17
    7080:	cf 93       	push	r28
    7082:	df 93       	push	r29
    static char buffer[MAXLEN];
    int i=MAXLEN-2;
    buffer[MAXLEN-1] = 0;
    7084:	10 92 63 29 	sts	0x2963, r1
    7088:	03 e6       	ldi	r16, 0x63	; 99
    708a:	19 e2       	ldi	r17, 0x29	; 41

char*
convert_meld_int_safe(meld_int data)
{
    static char buffer[MAXLEN];
    int i=MAXLEN-2;
    708c:	c2 e1       	ldi	r28, 0x12	; 18
    708e:	d0 e0       	ldi	r29, 0x00	; 0
    buffer[MAXLEN-1] = 0;
    while (data) {
	int d = data % 10;
    7090:	2a e0       	ldi	r18, 0x0A	; 10
    7092:	c2 2e       	mov	r12, r18
    7094:	d1 2c       	mov	r13, r1
    7096:	e1 2c       	mov	r14, r1
    7098:	f1 2c       	mov	r15, r1
convert_meld_int_safe(meld_int data)
{
    static char buffer[MAXLEN];
    int i=MAXLEN-2;
    buffer[MAXLEN-1] = 0;
    while (data) {
    709a:	0b c0       	rjmp	.+22     	; 0x70b2 <convert_meld_int_safe+0x3e>
	int d = data % 10;
    709c:	a7 01       	movw	r20, r14
    709e:	96 01       	movw	r18, r12
    70a0:	0e 94 4d 3b 	call	0x769a	; 0x769a <__divmodsi4>
	buffer[i--] = '0'+d;
    70a4:	60 5d       	subi	r22, 0xD0	; 208
    70a6:	f8 01       	movw	r30, r16
    70a8:	62 93       	st	-Z, r22
    70aa:	8f 01       	movw	r16, r30
    70ac:	21 97       	sbiw	r28, 0x01	; 1
	data = data / 10;
    70ae:	b9 01       	movw	r22, r18
    70b0:	ca 01       	movw	r24, r20
convert_meld_int_safe(meld_int data)
{
    static char buffer[MAXLEN];
    int i=MAXLEN-2;
    buffer[MAXLEN-1] = 0;
    while (data) {
    70b2:	61 15       	cp	r22, r1
    70b4:	71 05       	cpc	r23, r1
    70b6:	81 05       	cpc	r24, r1
    70b8:	91 05       	cpc	r25, r1
    70ba:	81 f7       	brne	.-32     	; 0x709c <convert_meld_int_safe+0x28>
	int d = data % 10;
	buffer[i--] = '0'+d;
	data = data / 10;
    }
    return buffer+i+1;
    70bc:	cf 5a       	subi	r28, 0xAF	; 175
    70be:	d6 4d       	sbci	r29, 0xD6	; 214
}
    70c0:	ce 01       	movw	r24, r28
    70c2:	df 91       	pop	r29
    70c4:	cf 91       	pop	r28
    70c6:	1f 91       	pop	r17
    70c8:	0f 91       	pop	r16
    70ca:	ff 90       	pop	r15
    70cc:	ef 90       	pop	r14
    70ce:	df 90       	pop	r13
    70d0:	cf 90       	pop	r12
    70d2:	08 95       	ret

000070d4 <print_int_list_elem>:
print_int_list_elem(list_element data)
{
    if (sizeof(meld_int) <= sizeof(int))
	printf("%d", (int)MELD_INT(data));
    else 
	printf("%s", convert_meld_int_safe(MELD_INT(data)));
    70d4:	fc 01       	movw	r30, r24
    70d6:	60 81       	ld	r22, Z
    70d8:	71 81       	ldd	r23, Z+1	; 0x01
    70da:	82 81       	ldd	r24, Z+2	; 0x02
    70dc:	93 81       	ldd	r25, Z+3	; 0x03
    70de:	0e 94 3a 38 	call	0x7074	; 0x7074 <convert_meld_int_safe>
    70e2:	9f 93       	push	r25
    70e4:	8f 93       	push	r24
    70e6:	8e e2       	ldi	r24, 0x2E	; 46
    70e8:	99 e2       	ldi	r25, 0x29	; 41
    70ea:	9f 93       	push	r25
    70ec:	8f 93       	push	r24
    70ee:	0e 94 b2 3e 	call	0x7d64	; 0x7d64 <printf>
    70f2:	0f 90       	pop	r0
    70f4:	0f 90       	pop	r0
    70f6:	0f 90       	pop	r0
    70f8:	0f 90       	pop	r0
    70fa:	08 95       	ret

000070fc <list_init_descriptors>:
	return MELD_PTR(el1) == MELD_PTR(el2);
}

void
list_init_descriptors(void)
{
    70fc:	cf 93       	push	r28
    70fe:	df 93       	push	r29
  int_descriptor = malloc(sizeof(list_descriptor));
    7100:	86 e0       	ldi	r24, 0x06	; 6
    7102:	90 e0       	ldi	r25, 0x00	; 0
    7104:	0e 94 a5 3b 	call	0x774a	; 0x774a <malloc>
    7108:	fc 01       	movw	r30, r24
    710a:	80 93 4a 29 	sts	0x294A, r24
    710e:	90 93 4b 29 	sts	0x294B, r25
  int_descriptor->size_elem = sizeof(meld_int);
    7112:	c4 e0       	ldi	r28, 0x04	; 4
    7114:	d0 e0       	ldi	r29, 0x00	; 0
    7116:	c0 83       	st	Z, r28
    7118:	d1 83       	std	Z+1, r29	; 0x01
  int_descriptor->print_fn = print_int_list_elem;
    711a:	8a e6       	ldi	r24, 0x6A	; 106
    711c:	98 e3       	ldi	r25, 0x38	; 56
    711e:	82 83       	std	Z+2, r24	; 0x02
    7120:	93 83       	std	Z+3, r25	; 0x03
  int_descriptor->equal_fn = equal_int_list_elem;
    7122:	87 ee       	ldi	r24, 0xE7	; 231
    7124:	94 e3       	ldi	r25, 0x34	; 52
    7126:	84 83       	std	Z+4, r24	; 0x04
    7128:	95 83       	std	Z+5, r25	; 0x05
  
  float_descriptor = malloc(sizeof(list_descriptor));
    712a:	86 e0       	ldi	r24, 0x06	; 6
    712c:	90 e0       	ldi	r25, 0x00	; 0
    712e:	0e 94 a5 3b 	call	0x774a	; 0x774a <malloc>
    7132:	fc 01       	movw	r30, r24
    7134:	80 93 4c 29 	sts	0x294C, r24
    7138:	90 93 4d 29 	sts	0x294D, r25
  float_descriptor->size_elem = sizeof(meld_float);
    713c:	c0 83       	st	Z, r28
    713e:	d1 83       	std	Z+1, r29	; 0x01
  float_descriptor->print_fn = print_float_list_elem;
    7140:	80 e3       	ldi	r24, 0x30	; 48
    7142:	95 e3       	ldi	r25, 0x35	; 53
    7144:	82 83       	std	Z+2, r24	; 0x02
    7146:	93 83       	std	Z+3, r25	; 0x03
  float_descriptor->equal_fn = equal_float_list_elem;
    7148:	8d ef       	ldi	r24, 0xFD	; 253
    714a:	94 e3       	ldi	r25, 0x34	; 52
    714c:	84 83       	std	Z+4, r24	; 0x04
    714e:	95 83       	std	Z+5, r25	; 0x05

	node_descriptor = malloc(sizeof(list_descriptor));
    7150:	86 e0       	ldi	r24, 0x06	; 6
    7152:	90 e0       	ldi	r25, 0x00	; 0
    7154:	0e 94 a5 3b 	call	0x774a	; 0x774a <malloc>
    7158:	fc 01       	movw	r30, r24
    715a:	80 93 4e 29 	sts	0x294E, r24
    715e:	90 93 4f 29 	sts	0x294F, r25
	node_descriptor->size_elem = sizeof(void*);
    7162:	82 e0       	ldi	r24, 0x02	; 2
    7164:	90 e0       	ldi	r25, 0x00	; 0
    7166:	80 83       	st	Z, r24
    7168:	91 83       	std	Z+1, r25	; 0x01
	node_descriptor->print_fn = print_node_list_elem;
    716a:	80 e1       	ldi	r24, 0x10	; 16
    716c:	95 e3       	ldi	r25, 0x35	; 53
    716e:	82 83       	std	Z+2, r24	; 0x02
    7170:	93 83       	std	Z+3, r25	; 0x03
	node_descriptor->equal_fn = equal_node_list_elem;
    7172:	81 e1       	ldi	r24, 0x11	; 17
    7174:	95 e3       	ldi	r25, 0x35	; 53
    7176:	84 83       	std	Z+4, r24	; 0x04
    7178:	95 83       	std	Z+5, r25	; 0x05
}
    717a:	df 91       	pop	r29
    717c:	cf 91       	pop	r28
    717e:	08 95       	ret

00007180 <main>:
#include "system/system.h"

int main(void)
{
		return blockProgram();
    7180:	0c 94 1b 08 	jmp	0x1036	; 0x1036 <blockProgram>

00007184 <__subsf3>:
    7184:	50 58       	subi	r21, 0x80	; 128

00007186 <__addsf3>:
    7186:	bb 27       	eor	r27, r27
    7188:	aa 27       	eor	r26, r26
    718a:	0e d0       	rcall	.+28     	; 0x71a8 <__addsf3x>
    718c:	a0 c1       	rjmp	.+832    	; 0x74ce <__fp_round>
    718e:	91 d1       	rcall	.+802    	; 0x74b2 <__fp_pscA>
    7190:	30 f0       	brcs	.+12     	; 0x719e <__addsf3+0x18>
    7192:	96 d1       	rcall	.+812    	; 0x74c0 <__fp_pscB>
    7194:	20 f0       	brcs	.+8      	; 0x719e <__addsf3+0x18>
    7196:	31 f4       	brne	.+12     	; 0x71a4 <__addsf3+0x1e>
    7198:	9f 3f       	cpi	r25, 0xFF	; 255
    719a:	11 f4       	brne	.+4      	; 0x71a0 <__addsf3+0x1a>
    719c:	1e f4       	brtc	.+6      	; 0x71a4 <__addsf3+0x1e>
    719e:	86 c1       	rjmp	.+780    	; 0x74ac <__fp_nan>
    71a0:	0e f4       	brtc	.+2      	; 0x71a4 <__addsf3+0x1e>
    71a2:	e0 95       	com	r30
    71a4:	e7 fb       	bst	r30, 7
    71a6:	6e c1       	rjmp	.+732    	; 0x7484 <__fp_inf>

000071a8 <__addsf3x>:
    71a8:	e9 2f       	mov	r30, r25
    71aa:	a2 d1       	rcall	.+836    	; 0x74f0 <__fp_split3>
    71ac:	80 f3       	brcs	.-32     	; 0x718e <__addsf3+0x8>
    71ae:	ba 17       	cp	r27, r26
    71b0:	62 07       	cpc	r22, r18
    71b2:	73 07       	cpc	r23, r19
    71b4:	84 07       	cpc	r24, r20
    71b6:	95 07       	cpc	r25, r21
    71b8:	18 f0       	brcs	.+6      	; 0x71c0 <__addsf3x+0x18>
    71ba:	71 f4       	brne	.+28     	; 0x71d8 <__addsf3x+0x30>
    71bc:	9e f5       	brtc	.+102    	; 0x7224 <__addsf3x+0x7c>
    71be:	ba c1       	rjmp	.+884    	; 0x7534 <__fp_zero>
    71c0:	0e f4       	brtc	.+2      	; 0x71c4 <__addsf3x+0x1c>
    71c2:	e0 95       	com	r30
    71c4:	0b 2e       	mov	r0, r27
    71c6:	ba 2f       	mov	r27, r26
    71c8:	a0 2d       	mov	r26, r0
    71ca:	0b 01       	movw	r0, r22
    71cc:	b9 01       	movw	r22, r18
    71ce:	90 01       	movw	r18, r0
    71d0:	0c 01       	movw	r0, r24
    71d2:	ca 01       	movw	r24, r20
    71d4:	a0 01       	movw	r20, r0
    71d6:	11 24       	eor	r1, r1
    71d8:	ff 27       	eor	r31, r31
    71da:	59 1b       	sub	r21, r25
    71dc:	99 f0       	breq	.+38     	; 0x7204 <__addsf3x+0x5c>
    71de:	59 3f       	cpi	r21, 0xF9	; 249
    71e0:	50 f4       	brcc	.+20     	; 0x71f6 <__addsf3x+0x4e>
    71e2:	50 3e       	cpi	r21, 0xE0	; 224
    71e4:	68 f1       	brcs	.+90     	; 0x7240 <__addsf3x+0x98>
    71e6:	1a 16       	cp	r1, r26
    71e8:	f0 40       	sbci	r31, 0x00	; 0
    71ea:	a2 2f       	mov	r26, r18
    71ec:	23 2f       	mov	r18, r19
    71ee:	34 2f       	mov	r19, r20
    71f0:	44 27       	eor	r20, r20
    71f2:	58 5f       	subi	r21, 0xF8	; 248
    71f4:	f3 cf       	rjmp	.-26     	; 0x71dc <__addsf3x+0x34>
    71f6:	46 95       	lsr	r20
    71f8:	37 95       	ror	r19
    71fa:	27 95       	ror	r18
    71fc:	a7 95       	ror	r26
    71fe:	f0 40       	sbci	r31, 0x00	; 0
    7200:	53 95       	inc	r21
    7202:	c9 f7       	brne	.-14     	; 0x71f6 <__addsf3x+0x4e>
    7204:	7e f4       	brtc	.+30     	; 0x7224 <__addsf3x+0x7c>
    7206:	1f 16       	cp	r1, r31
    7208:	ba 0b       	sbc	r27, r26
    720a:	62 0b       	sbc	r22, r18
    720c:	73 0b       	sbc	r23, r19
    720e:	84 0b       	sbc	r24, r20
    7210:	ba f0       	brmi	.+46     	; 0x7240 <__addsf3x+0x98>
    7212:	91 50       	subi	r25, 0x01	; 1
    7214:	a1 f0       	breq	.+40     	; 0x723e <__addsf3x+0x96>
    7216:	ff 0f       	add	r31, r31
    7218:	bb 1f       	adc	r27, r27
    721a:	66 1f       	adc	r22, r22
    721c:	77 1f       	adc	r23, r23
    721e:	88 1f       	adc	r24, r24
    7220:	c2 f7       	brpl	.-16     	; 0x7212 <__addsf3x+0x6a>
    7222:	0e c0       	rjmp	.+28     	; 0x7240 <__addsf3x+0x98>
    7224:	ba 0f       	add	r27, r26
    7226:	62 1f       	adc	r22, r18
    7228:	73 1f       	adc	r23, r19
    722a:	84 1f       	adc	r24, r20
    722c:	48 f4       	brcc	.+18     	; 0x7240 <__addsf3x+0x98>
    722e:	87 95       	ror	r24
    7230:	77 95       	ror	r23
    7232:	67 95       	ror	r22
    7234:	b7 95       	ror	r27
    7236:	f7 95       	ror	r31
    7238:	9e 3f       	cpi	r25, 0xFE	; 254
    723a:	08 f0       	brcs	.+2      	; 0x723e <__addsf3x+0x96>
    723c:	b3 cf       	rjmp	.-154    	; 0x71a4 <__addsf3+0x1e>
    723e:	93 95       	inc	r25
    7240:	88 0f       	add	r24, r24
    7242:	08 f0       	brcs	.+2      	; 0x7246 <__addsf3x+0x9e>
    7244:	99 27       	eor	r25, r25
    7246:	ee 0f       	add	r30, r30
    7248:	97 95       	ror	r25
    724a:	87 95       	ror	r24
    724c:	08 95       	ret

0000724e <__cmpsf2>:
    724e:	f6 d0       	rcall	.+492    	; 0x743c <__fp_cmp>
    7250:	08 f4       	brcc	.+2      	; 0x7254 <__cmpsf2+0x6>
    7252:	81 e0       	ldi	r24, 0x01	; 1
    7254:	08 95       	ret

00007256 <__divsf3>:
    7256:	0c d0       	rcall	.+24     	; 0x7270 <__divsf3x>
    7258:	3a c1       	rjmp	.+628    	; 0x74ce <__fp_round>
    725a:	32 d1       	rcall	.+612    	; 0x74c0 <__fp_pscB>
    725c:	40 f0       	brcs	.+16     	; 0x726e <__divsf3+0x18>
    725e:	29 d1       	rcall	.+594    	; 0x74b2 <__fp_pscA>
    7260:	30 f0       	brcs	.+12     	; 0x726e <__divsf3+0x18>
    7262:	21 f4       	brne	.+8      	; 0x726c <__divsf3+0x16>
    7264:	5f 3f       	cpi	r21, 0xFF	; 255
    7266:	19 f0       	breq	.+6      	; 0x726e <__divsf3+0x18>
    7268:	0d c1       	rjmp	.+538    	; 0x7484 <__fp_inf>
    726a:	51 11       	cpse	r21, r1
    726c:	64 c1       	rjmp	.+712    	; 0x7536 <__fp_szero>
    726e:	1e c1       	rjmp	.+572    	; 0x74ac <__fp_nan>

00007270 <__divsf3x>:
    7270:	3f d1       	rcall	.+638    	; 0x74f0 <__fp_split3>
    7272:	98 f3       	brcs	.-26     	; 0x725a <__divsf3+0x4>

00007274 <__divsf3_pse>:
    7274:	99 23       	and	r25, r25
    7276:	c9 f3       	breq	.-14     	; 0x726a <__divsf3+0x14>
    7278:	55 23       	and	r21, r21
    727a:	b1 f3       	breq	.-20     	; 0x7268 <__divsf3+0x12>
    727c:	95 1b       	sub	r25, r21
    727e:	55 0b       	sbc	r21, r21
    7280:	bb 27       	eor	r27, r27
    7282:	aa 27       	eor	r26, r26
    7284:	62 17       	cp	r22, r18
    7286:	73 07       	cpc	r23, r19
    7288:	84 07       	cpc	r24, r20
    728a:	38 f0       	brcs	.+14     	; 0x729a <__divsf3_pse+0x26>
    728c:	9f 5f       	subi	r25, 0xFF	; 255
    728e:	5f 4f       	sbci	r21, 0xFF	; 255
    7290:	22 0f       	add	r18, r18
    7292:	33 1f       	adc	r19, r19
    7294:	44 1f       	adc	r20, r20
    7296:	aa 1f       	adc	r26, r26
    7298:	a9 f3       	breq	.-22     	; 0x7284 <__divsf3_pse+0x10>
    729a:	33 d0       	rcall	.+102    	; 0x7302 <__divsf3_pse+0x8e>
    729c:	0e 2e       	mov	r0, r30
    729e:	3a f0       	brmi	.+14     	; 0x72ae <__divsf3_pse+0x3a>
    72a0:	e0 e8       	ldi	r30, 0x80	; 128
    72a2:	30 d0       	rcall	.+96     	; 0x7304 <__divsf3_pse+0x90>
    72a4:	91 50       	subi	r25, 0x01	; 1
    72a6:	50 40       	sbci	r21, 0x00	; 0
    72a8:	e6 95       	lsr	r30
    72aa:	00 1c       	adc	r0, r0
    72ac:	ca f7       	brpl	.-14     	; 0x72a0 <__divsf3_pse+0x2c>
    72ae:	29 d0       	rcall	.+82     	; 0x7302 <__divsf3_pse+0x8e>
    72b0:	fe 2f       	mov	r31, r30
    72b2:	27 d0       	rcall	.+78     	; 0x7302 <__divsf3_pse+0x8e>
    72b4:	66 0f       	add	r22, r22
    72b6:	77 1f       	adc	r23, r23
    72b8:	88 1f       	adc	r24, r24
    72ba:	bb 1f       	adc	r27, r27
    72bc:	26 17       	cp	r18, r22
    72be:	37 07       	cpc	r19, r23
    72c0:	48 07       	cpc	r20, r24
    72c2:	ab 07       	cpc	r26, r27
    72c4:	b0 e8       	ldi	r27, 0x80	; 128
    72c6:	09 f0       	breq	.+2      	; 0x72ca <__divsf3_pse+0x56>
    72c8:	bb 0b       	sbc	r27, r27
    72ca:	80 2d       	mov	r24, r0
    72cc:	bf 01       	movw	r22, r30
    72ce:	ff 27       	eor	r31, r31
    72d0:	93 58       	subi	r25, 0x83	; 131
    72d2:	5f 4f       	sbci	r21, 0xFF	; 255
    72d4:	2a f0       	brmi	.+10     	; 0x72e0 <__divsf3_pse+0x6c>
    72d6:	9e 3f       	cpi	r25, 0xFE	; 254
    72d8:	51 05       	cpc	r21, r1
    72da:	68 f0       	brcs	.+26     	; 0x72f6 <__divsf3_pse+0x82>
    72dc:	d3 c0       	rjmp	.+422    	; 0x7484 <__fp_inf>
    72de:	2b c1       	rjmp	.+598    	; 0x7536 <__fp_szero>
    72e0:	5f 3f       	cpi	r21, 0xFF	; 255
    72e2:	ec f3       	brlt	.-6      	; 0x72de <__divsf3_pse+0x6a>
    72e4:	98 3e       	cpi	r25, 0xE8	; 232
    72e6:	dc f3       	brlt	.-10     	; 0x72de <__divsf3_pse+0x6a>
    72e8:	86 95       	lsr	r24
    72ea:	77 95       	ror	r23
    72ec:	67 95       	ror	r22
    72ee:	b7 95       	ror	r27
    72f0:	f7 95       	ror	r31
    72f2:	9f 5f       	subi	r25, 0xFF	; 255
    72f4:	c9 f7       	brne	.-14     	; 0x72e8 <__divsf3_pse+0x74>
    72f6:	88 0f       	add	r24, r24
    72f8:	91 1d       	adc	r25, r1
    72fa:	96 95       	lsr	r25
    72fc:	87 95       	ror	r24
    72fe:	97 f9       	bld	r25, 7
    7300:	08 95       	ret
    7302:	e1 e0       	ldi	r30, 0x01	; 1
    7304:	66 0f       	add	r22, r22
    7306:	77 1f       	adc	r23, r23
    7308:	88 1f       	adc	r24, r24
    730a:	bb 1f       	adc	r27, r27
    730c:	62 17       	cp	r22, r18
    730e:	73 07       	cpc	r23, r19
    7310:	84 07       	cpc	r24, r20
    7312:	ba 07       	cpc	r27, r26
    7314:	20 f0       	brcs	.+8      	; 0x731e <__divsf3_pse+0xaa>
    7316:	62 1b       	sub	r22, r18
    7318:	73 0b       	sbc	r23, r19
    731a:	84 0b       	sbc	r24, r20
    731c:	ba 0b       	sbc	r27, r26
    731e:	ee 1f       	adc	r30, r30
    7320:	88 f7       	brcc	.-30     	; 0x7304 <__divsf3_pse+0x90>
    7322:	e0 95       	com	r30
    7324:	08 95       	ret

00007326 <__floatunsisf>:
    7326:	e8 94       	clt
    7328:	09 c0       	rjmp	.+18     	; 0x733c <__floatsisf+0x12>

0000732a <__floatsisf>:
    732a:	97 fb       	bst	r25, 7
    732c:	3e f4       	brtc	.+14     	; 0x733c <__floatsisf+0x12>
    732e:	90 95       	com	r25
    7330:	80 95       	com	r24
    7332:	70 95       	com	r23
    7334:	61 95       	neg	r22
    7336:	7f 4f       	sbci	r23, 0xFF	; 255
    7338:	8f 4f       	sbci	r24, 0xFF	; 255
    733a:	9f 4f       	sbci	r25, 0xFF	; 255
    733c:	99 23       	and	r25, r25
    733e:	a9 f0       	breq	.+42     	; 0x736a <__floatsisf+0x40>
    7340:	f9 2f       	mov	r31, r25
    7342:	96 e9       	ldi	r25, 0x96	; 150
    7344:	bb 27       	eor	r27, r27
    7346:	93 95       	inc	r25
    7348:	f6 95       	lsr	r31
    734a:	87 95       	ror	r24
    734c:	77 95       	ror	r23
    734e:	67 95       	ror	r22
    7350:	b7 95       	ror	r27
    7352:	f1 11       	cpse	r31, r1
    7354:	f8 cf       	rjmp	.-16     	; 0x7346 <__floatsisf+0x1c>
    7356:	fa f4       	brpl	.+62     	; 0x7396 <__floatsisf+0x6c>
    7358:	bb 0f       	add	r27, r27
    735a:	11 f4       	brne	.+4      	; 0x7360 <__floatsisf+0x36>
    735c:	60 ff       	sbrs	r22, 0
    735e:	1b c0       	rjmp	.+54     	; 0x7396 <__floatsisf+0x6c>
    7360:	6f 5f       	subi	r22, 0xFF	; 255
    7362:	7f 4f       	sbci	r23, 0xFF	; 255
    7364:	8f 4f       	sbci	r24, 0xFF	; 255
    7366:	9f 4f       	sbci	r25, 0xFF	; 255
    7368:	16 c0       	rjmp	.+44     	; 0x7396 <__floatsisf+0x6c>
    736a:	88 23       	and	r24, r24
    736c:	11 f0       	breq	.+4      	; 0x7372 <__floatsisf+0x48>
    736e:	96 e9       	ldi	r25, 0x96	; 150
    7370:	11 c0       	rjmp	.+34     	; 0x7394 <__floatsisf+0x6a>
    7372:	77 23       	and	r23, r23
    7374:	21 f0       	breq	.+8      	; 0x737e <__floatsisf+0x54>
    7376:	9e e8       	ldi	r25, 0x8E	; 142
    7378:	87 2f       	mov	r24, r23
    737a:	76 2f       	mov	r23, r22
    737c:	05 c0       	rjmp	.+10     	; 0x7388 <__floatsisf+0x5e>
    737e:	66 23       	and	r22, r22
    7380:	71 f0       	breq	.+28     	; 0x739e <__floatsisf+0x74>
    7382:	96 e8       	ldi	r25, 0x86	; 134
    7384:	86 2f       	mov	r24, r22
    7386:	70 e0       	ldi	r23, 0x00	; 0
    7388:	60 e0       	ldi	r22, 0x00	; 0
    738a:	2a f0       	brmi	.+10     	; 0x7396 <__floatsisf+0x6c>
    738c:	9a 95       	dec	r25
    738e:	66 0f       	add	r22, r22
    7390:	77 1f       	adc	r23, r23
    7392:	88 1f       	adc	r24, r24
    7394:	da f7       	brpl	.-10     	; 0x738c <__floatsisf+0x62>
    7396:	88 0f       	add	r24, r24
    7398:	96 95       	lsr	r25
    739a:	87 95       	ror	r24
    739c:	97 f9       	bld	r25, 7
    739e:	08 95       	ret
    73a0:	88 d0       	rcall	.+272    	; 0x74b2 <__fp_pscA>
    73a2:	18 f0       	brcs	.+6      	; 0x73aa <__floatsisf+0x80>
    73a4:	11 f0       	breq	.+4      	; 0x73aa <__floatsisf+0x80>
    73a6:	8c d0       	rcall	.+280    	; 0x74c0 <__fp_pscB>
    73a8:	38 f4       	brcc	.+14     	; 0x73b8 <fmod+0xa>
    73aa:	80 c0       	rjmp	.+256    	; 0x74ac <__fp_nan>
    73ac:	c4 c0       	rjmp	.+392    	; 0x7536 <__fp_szero>

000073ae <fmod>:
    73ae:	e9 2f       	mov	r30, r25
    73b0:	9f d0       	rcall	.+318    	; 0x74f0 <__fp_split3>
    73b2:	b0 f3       	brcs	.-20     	; 0x73a0 <__floatsisf+0x76>
    73b4:	55 23       	and	r21, r21
    73b6:	c9 f3       	breq	.-14     	; 0x73aa <__floatsisf+0x80>
    73b8:	e7 fb       	bst	r30, 7
    73ba:	62 17       	cp	r22, r18
    73bc:	73 07       	cpc	r23, r19
    73be:	84 07       	cpc	r24, r20
    73c0:	95 07       	cpc	r25, r21
    73c2:	a8 f1       	brcs	.+106    	; 0x742e <fmod+0x80>
    73c4:	99 f3       	breq	.-26     	; 0x73ac <__floatsisf+0x82>
    73c6:	e9 2f       	mov	r30, r25
    73c8:	ff 27       	eor	r31, r31
    73ca:	88 23       	and	r24, r24
    73cc:	2a f0       	brmi	.+10     	; 0x73d8 <fmod+0x2a>
    73ce:	31 97       	sbiw	r30, 0x01	; 1
    73d0:	66 0f       	add	r22, r22
    73d2:	77 1f       	adc	r23, r23
    73d4:	88 1f       	adc	r24, r24
    73d6:	da f7       	brpl	.-10     	; 0x73ce <fmod+0x20>
    73d8:	95 2f       	mov	r25, r21
    73da:	55 27       	eor	r21, r21
    73dc:	44 23       	and	r20, r20
    73de:	32 f0       	brmi	.+12     	; 0x73ec <fmod+0x3e>
    73e0:	91 50       	subi	r25, 0x01	; 1
    73e2:	50 40       	sbci	r21, 0x00	; 0
    73e4:	22 0f       	add	r18, r18
    73e6:	33 1f       	adc	r19, r19
    73e8:	44 1f       	adc	r20, r20
    73ea:	d2 f7       	brpl	.-12     	; 0x73e0 <fmod+0x32>
    73ec:	bb 27       	eor	r27, r27
    73ee:	e9 1b       	sub	r30, r25
    73f0:	f5 0b       	sbc	r31, r21
    73f2:	62 1b       	sub	r22, r18
    73f4:	73 0b       	sbc	r23, r19
    73f6:	84 0b       	sbc	r24, r20
    73f8:	b1 09       	sbc	r27, r1
    73fa:	c1 f2       	breq	.-80     	; 0x73ac <__floatsisf+0x82>
    73fc:	22 f4       	brpl	.+8      	; 0x7406 <fmod+0x58>
    73fe:	62 0f       	add	r22, r18
    7400:	73 1f       	adc	r23, r19
    7402:	84 1f       	adc	r24, r20
    7404:	b1 1d       	adc	r27, r1
    7406:	31 97       	sbiw	r30, 0x01	; 1
    7408:	2a f0       	brmi	.+10     	; 0x7414 <fmod+0x66>
    740a:	66 0f       	add	r22, r22
    740c:	77 1f       	adc	r23, r23
    740e:	88 1f       	adc	r24, r24
    7410:	bb 1f       	adc	r27, r27
    7412:	ef cf       	rjmp	.-34     	; 0x73f2 <fmod+0x44>
    7414:	91 50       	subi	r25, 0x01	; 1
    7416:	50 40       	sbci	r21, 0x00	; 0
    7418:	5a f0       	brmi	.+22     	; 0x7430 <fmod+0x82>
    741a:	41 f0       	breq	.+16     	; 0x742c <fmod+0x7e>
    741c:	88 23       	and	r24, r24
    741e:	32 f0       	brmi	.+12     	; 0x742c <fmod+0x7e>
    7420:	66 0f       	add	r22, r22
    7422:	77 1f       	adc	r23, r23
    7424:	88 1f       	adc	r24, r24
    7426:	91 50       	subi	r25, 0x01	; 1
    7428:	50 40       	sbci	r21, 0x00	; 0
    742a:	c1 f7       	brne	.-16     	; 0x741c <fmod+0x6e>
    742c:	93 95       	inc	r25
    742e:	30 c0       	rjmp	.+96     	; 0x7490 <__fp_mpack>
    7430:	86 95       	lsr	r24
    7432:	77 95       	ror	r23
    7434:	67 95       	ror	r22
    7436:	9f 5f       	subi	r25, 0xFF	; 255
    7438:	d9 f7       	brne	.-10     	; 0x7430 <fmod+0x82>
    743a:	f8 cf       	rjmp	.-16     	; 0x742c <fmod+0x7e>

0000743c <__fp_cmp>:
    743c:	99 0f       	add	r25, r25
    743e:	00 08       	sbc	r0, r0
    7440:	55 0f       	add	r21, r21
    7442:	aa 0b       	sbc	r26, r26
    7444:	e0 e8       	ldi	r30, 0x80	; 128
    7446:	fe ef       	ldi	r31, 0xFE	; 254
    7448:	16 16       	cp	r1, r22
    744a:	17 06       	cpc	r1, r23
    744c:	e8 07       	cpc	r30, r24
    744e:	f9 07       	cpc	r31, r25
    7450:	c0 f0       	brcs	.+48     	; 0x7482 <__fp_cmp+0x46>
    7452:	12 16       	cp	r1, r18
    7454:	13 06       	cpc	r1, r19
    7456:	e4 07       	cpc	r30, r20
    7458:	f5 07       	cpc	r31, r21
    745a:	98 f0       	brcs	.+38     	; 0x7482 <__fp_cmp+0x46>
    745c:	62 1b       	sub	r22, r18
    745e:	73 0b       	sbc	r23, r19
    7460:	84 0b       	sbc	r24, r20
    7462:	95 0b       	sbc	r25, r21
    7464:	39 f4       	brne	.+14     	; 0x7474 <__fp_cmp+0x38>
    7466:	0a 26       	eor	r0, r26
    7468:	61 f0       	breq	.+24     	; 0x7482 <__fp_cmp+0x46>
    746a:	23 2b       	or	r18, r19
    746c:	24 2b       	or	r18, r20
    746e:	25 2b       	or	r18, r21
    7470:	21 f4       	brne	.+8      	; 0x747a <__fp_cmp+0x3e>
    7472:	08 95       	ret
    7474:	0a 26       	eor	r0, r26
    7476:	09 f4       	brne	.+2      	; 0x747a <__fp_cmp+0x3e>
    7478:	a1 40       	sbci	r26, 0x01	; 1
    747a:	a6 95       	lsr	r26
    747c:	8f ef       	ldi	r24, 0xFF	; 255
    747e:	81 1d       	adc	r24, r1
    7480:	81 1d       	adc	r24, r1
    7482:	08 95       	ret

00007484 <__fp_inf>:
    7484:	97 f9       	bld	r25, 7
    7486:	9f 67       	ori	r25, 0x7F	; 127
    7488:	80 e8       	ldi	r24, 0x80	; 128
    748a:	70 e0       	ldi	r23, 0x00	; 0
    748c:	60 e0       	ldi	r22, 0x00	; 0
    748e:	08 95       	ret

00007490 <__fp_mpack>:
    7490:	9f 3f       	cpi	r25, 0xFF	; 255
    7492:	31 f0       	breq	.+12     	; 0x74a0 <__fp_mpack_finite+0xc>

00007494 <__fp_mpack_finite>:
    7494:	91 50       	subi	r25, 0x01	; 1
    7496:	20 f4       	brcc	.+8      	; 0x74a0 <__fp_mpack_finite+0xc>
    7498:	87 95       	ror	r24
    749a:	77 95       	ror	r23
    749c:	67 95       	ror	r22
    749e:	b7 95       	ror	r27
    74a0:	88 0f       	add	r24, r24
    74a2:	91 1d       	adc	r25, r1
    74a4:	96 95       	lsr	r25
    74a6:	87 95       	ror	r24
    74a8:	97 f9       	bld	r25, 7
    74aa:	08 95       	ret

000074ac <__fp_nan>:
    74ac:	9f ef       	ldi	r25, 0xFF	; 255
    74ae:	80 ec       	ldi	r24, 0xC0	; 192
    74b0:	08 95       	ret

000074b2 <__fp_pscA>:
    74b2:	00 24       	eor	r0, r0
    74b4:	0a 94       	dec	r0
    74b6:	16 16       	cp	r1, r22
    74b8:	17 06       	cpc	r1, r23
    74ba:	18 06       	cpc	r1, r24
    74bc:	09 06       	cpc	r0, r25
    74be:	08 95       	ret

000074c0 <__fp_pscB>:
    74c0:	00 24       	eor	r0, r0
    74c2:	0a 94       	dec	r0
    74c4:	12 16       	cp	r1, r18
    74c6:	13 06       	cpc	r1, r19
    74c8:	14 06       	cpc	r1, r20
    74ca:	05 06       	cpc	r0, r21
    74cc:	08 95       	ret

000074ce <__fp_round>:
    74ce:	09 2e       	mov	r0, r25
    74d0:	03 94       	inc	r0
    74d2:	00 0c       	add	r0, r0
    74d4:	11 f4       	brne	.+4      	; 0x74da <__fp_round+0xc>
    74d6:	88 23       	and	r24, r24
    74d8:	52 f0       	brmi	.+20     	; 0x74ee <__fp_round+0x20>
    74da:	bb 0f       	add	r27, r27
    74dc:	40 f4       	brcc	.+16     	; 0x74ee <__fp_round+0x20>
    74de:	bf 2b       	or	r27, r31
    74e0:	11 f4       	brne	.+4      	; 0x74e6 <__fp_round+0x18>
    74e2:	60 ff       	sbrs	r22, 0
    74e4:	04 c0       	rjmp	.+8      	; 0x74ee <__fp_round+0x20>
    74e6:	6f 5f       	subi	r22, 0xFF	; 255
    74e8:	7f 4f       	sbci	r23, 0xFF	; 255
    74ea:	8f 4f       	sbci	r24, 0xFF	; 255
    74ec:	9f 4f       	sbci	r25, 0xFF	; 255
    74ee:	08 95       	ret

000074f0 <__fp_split3>:
    74f0:	57 fd       	sbrc	r21, 7
    74f2:	90 58       	subi	r25, 0x80	; 128
    74f4:	44 0f       	add	r20, r20
    74f6:	55 1f       	adc	r21, r21
    74f8:	59 f0       	breq	.+22     	; 0x7510 <__fp_splitA+0x10>
    74fa:	5f 3f       	cpi	r21, 0xFF	; 255
    74fc:	71 f0       	breq	.+28     	; 0x751a <__fp_splitA+0x1a>
    74fe:	47 95       	ror	r20

00007500 <__fp_splitA>:
    7500:	88 0f       	add	r24, r24
    7502:	97 fb       	bst	r25, 7
    7504:	99 1f       	adc	r25, r25
    7506:	61 f0       	breq	.+24     	; 0x7520 <__fp_splitA+0x20>
    7508:	9f 3f       	cpi	r25, 0xFF	; 255
    750a:	79 f0       	breq	.+30     	; 0x752a <__fp_splitA+0x2a>
    750c:	87 95       	ror	r24
    750e:	08 95       	ret
    7510:	12 16       	cp	r1, r18
    7512:	13 06       	cpc	r1, r19
    7514:	14 06       	cpc	r1, r20
    7516:	55 1f       	adc	r21, r21
    7518:	f2 cf       	rjmp	.-28     	; 0x74fe <__fp_split3+0xe>
    751a:	46 95       	lsr	r20
    751c:	f1 df       	rcall	.-30     	; 0x7500 <__fp_splitA>
    751e:	08 c0       	rjmp	.+16     	; 0x7530 <__fp_splitA+0x30>
    7520:	16 16       	cp	r1, r22
    7522:	17 06       	cpc	r1, r23
    7524:	18 06       	cpc	r1, r24
    7526:	99 1f       	adc	r25, r25
    7528:	f1 cf       	rjmp	.-30     	; 0x750c <__fp_splitA+0xc>
    752a:	86 95       	lsr	r24
    752c:	71 05       	cpc	r23, r1
    752e:	61 05       	cpc	r22, r1
    7530:	08 94       	sec
    7532:	08 95       	ret

00007534 <__fp_zero>:
    7534:	e8 94       	clt

00007536 <__fp_szero>:
    7536:	bb 27       	eor	r27, r27
    7538:	66 27       	eor	r22, r22
    753a:	77 27       	eor	r23, r23
    753c:	cb 01       	movw	r24, r22
    753e:	97 f9       	bld	r25, 7
    7540:	08 95       	ret

00007542 <__gesf2>:
    7542:	7c df       	rcall	.-264    	; 0x743c <__fp_cmp>
    7544:	08 f4       	brcc	.+2      	; 0x7548 <__gesf2+0x6>
    7546:	8f ef       	ldi	r24, 0xFF	; 255
    7548:	08 95       	ret

0000754a <__mulsf3>:
    754a:	0b d0       	rcall	.+22     	; 0x7562 <__mulsf3x>
    754c:	c0 cf       	rjmp	.-128    	; 0x74ce <__fp_round>
    754e:	b1 df       	rcall	.-158    	; 0x74b2 <__fp_pscA>
    7550:	28 f0       	brcs	.+10     	; 0x755c <__mulsf3+0x12>
    7552:	b6 df       	rcall	.-148    	; 0x74c0 <__fp_pscB>
    7554:	18 f0       	brcs	.+6      	; 0x755c <__mulsf3+0x12>
    7556:	95 23       	and	r25, r21
    7558:	09 f0       	breq	.+2      	; 0x755c <__mulsf3+0x12>
    755a:	94 cf       	rjmp	.-216    	; 0x7484 <__fp_inf>
    755c:	a7 cf       	rjmp	.-178    	; 0x74ac <__fp_nan>
    755e:	11 24       	eor	r1, r1
    7560:	ea cf       	rjmp	.-44     	; 0x7536 <__fp_szero>

00007562 <__mulsf3x>:
    7562:	c6 df       	rcall	.-116    	; 0x74f0 <__fp_split3>
    7564:	a0 f3       	brcs	.-24     	; 0x754e <__mulsf3+0x4>

00007566 <__mulsf3_pse>:
    7566:	95 9f       	mul	r25, r21
    7568:	d1 f3       	breq	.-12     	; 0x755e <__mulsf3+0x14>
    756a:	95 0f       	add	r25, r21
    756c:	50 e0       	ldi	r21, 0x00	; 0
    756e:	55 1f       	adc	r21, r21
    7570:	62 9f       	mul	r22, r18
    7572:	f0 01       	movw	r30, r0
    7574:	72 9f       	mul	r23, r18
    7576:	bb 27       	eor	r27, r27
    7578:	f0 0d       	add	r31, r0
    757a:	b1 1d       	adc	r27, r1
    757c:	63 9f       	mul	r22, r19
    757e:	aa 27       	eor	r26, r26
    7580:	f0 0d       	add	r31, r0
    7582:	b1 1d       	adc	r27, r1
    7584:	aa 1f       	adc	r26, r26
    7586:	64 9f       	mul	r22, r20
    7588:	66 27       	eor	r22, r22
    758a:	b0 0d       	add	r27, r0
    758c:	a1 1d       	adc	r26, r1
    758e:	66 1f       	adc	r22, r22
    7590:	82 9f       	mul	r24, r18
    7592:	22 27       	eor	r18, r18
    7594:	b0 0d       	add	r27, r0
    7596:	a1 1d       	adc	r26, r1
    7598:	62 1f       	adc	r22, r18
    759a:	73 9f       	mul	r23, r19
    759c:	b0 0d       	add	r27, r0
    759e:	a1 1d       	adc	r26, r1
    75a0:	62 1f       	adc	r22, r18
    75a2:	83 9f       	mul	r24, r19
    75a4:	a0 0d       	add	r26, r0
    75a6:	61 1d       	adc	r22, r1
    75a8:	22 1f       	adc	r18, r18
    75aa:	74 9f       	mul	r23, r20
    75ac:	33 27       	eor	r19, r19
    75ae:	a0 0d       	add	r26, r0
    75b0:	61 1d       	adc	r22, r1
    75b2:	23 1f       	adc	r18, r19
    75b4:	84 9f       	mul	r24, r20
    75b6:	60 0d       	add	r22, r0
    75b8:	21 1d       	adc	r18, r1
    75ba:	82 2f       	mov	r24, r18
    75bc:	76 2f       	mov	r23, r22
    75be:	6a 2f       	mov	r22, r26
    75c0:	11 24       	eor	r1, r1
    75c2:	9f 57       	subi	r25, 0x7F	; 127
    75c4:	50 40       	sbci	r21, 0x00	; 0
    75c6:	8a f0       	brmi	.+34     	; 0x75ea <__mulsf3_pse+0x84>
    75c8:	e1 f0       	breq	.+56     	; 0x7602 <__mulsf3_pse+0x9c>
    75ca:	88 23       	and	r24, r24
    75cc:	4a f0       	brmi	.+18     	; 0x75e0 <__mulsf3_pse+0x7a>
    75ce:	ee 0f       	add	r30, r30
    75d0:	ff 1f       	adc	r31, r31
    75d2:	bb 1f       	adc	r27, r27
    75d4:	66 1f       	adc	r22, r22
    75d6:	77 1f       	adc	r23, r23
    75d8:	88 1f       	adc	r24, r24
    75da:	91 50       	subi	r25, 0x01	; 1
    75dc:	50 40       	sbci	r21, 0x00	; 0
    75de:	a9 f7       	brne	.-22     	; 0x75ca <__mulsf3_pse+0x64>
    75e0:	9e 3f       	cpi	r25, 0xFE	; 254
    75e2:	51 05       	cpc	r21, r1
    75e4:	70 f0       	brcs	.+28     	; 0x7602 <__mulsf3_pse+0x9c>
    75e6:	4e cf       	rjmp	.-356    	; 0x7484 <__fp_inf>
    75e8:	a6 cf       	rjmp	.-180    	; 0x7536 <__fp_szero>
    75ea:	5f 3f       	cpi	r21, 0xFF	; 255
    75ec:	ec f3       	brlt	.-6      	; 0x75e8 <__mulsf3_pse+0x82>
    75ee:	98 3e       	cpi	r25, 0xE8	; 232
    75f0:	dc f3       	brlt	.-10     	; 0x75e8 <__mulsf3_pse+0x82>
    75f2:	86 95       	lsr	r24
    75f4:	77 95       	ror	r23
    75f6:	67 95       	ror	r22
    75f8:	b7 95       	ror	r27
    75fa:	f7 95       	ror	r31
    75fc:	e7 95       	ror	r30
    75fe:	9f 5f       	subi	r25, 0xFF	; 255
    7600:	c1 f7       	brne	.-16     	; 0x75f2 <__mulsf3_pse+0x8c>
    7602:	fe 2b       	or	r31, r30
    7604:	88 0f       	add	r24, r24
    7606:	91 1d       	adc	r25, r1
    7608:	96 95       	lsr	r25
    760a:	87 95       	ror	r24
    760c:	97 f9       	bld	r25, 7
    760e:	08 95       	ret

00007610 <__muluhisi3>:
    7610:	0e 94 7b 3b 	call	0x76f6	; 0x76f6 <__umulhisi3>
    7614:	a5 9f       	mul	r26, r21
    7616:	90 0d       	add	r25, r0
    7618:	b4 9f       	mul	r27, r20
    761a:	90 0d       	add	r25, r0
    761c:	a4 9f       	mul	r26, r20
    761e:	80 0d       	add	r24, r0
    7620:	91 1d       	adc	r25, r1
    7622:	11 24       	eor	r1, r1
    7624:	08 95       	ret

00007626 <__mulshisi3>:
    7626:	b7 ff       	sbrs	r27, 7
    7628:	0c 94 08 3b 	jmp	0x7610	; 0x7610 <__muluhisi3>

0000762c <__mulohisi3>:
    762c:	0e 94 08 3b 	call	0x7610	; 0x7610 <__muluhisi3>
    7630:	82 1b       	sub	r24, r18
    7632:	93 0b       	sbc	r25, r19
    7634:	08 95       	ret

00007636 <__mulsi3>:
    7636:	db 01       	movw	r26, r22
    7638:	8f 93       	push	r24
    763a:	9f 93       	push	r25
    763c:	0e 94 08 3b 	call	0x7610	; 0x7610 <__muluhisi3>
    7640:	bf 91       	pop	r27
    7642:	af 91       	pop	r26
    7644:	a2 9f       	mul	r26, r18
    7646:	80 0d       	add	r24, r0
    7648:	91 1d       	adc	r25, r1
    764a:	a3 9f       	mul	r26, r19
    764c:	90 0d       	add	r25, r0
    764e:	b2 9f       	mul	r27, r18
    7650:	90 0d       	add	r25, r0
    7652:	11 24       	eor	r1, r1
    7654:	08 95       	ret

00007656 <__udivmodsi4>:
    7656:	a1 e2       	ldi	r26, 0x21	; 33
    7658:	1a 2e       	mov	r1, r26
    765a:	aa 1b       	sub	r26, r26
    765c:	bb 1b       	sub	r27, r27
    765e:	fd 01       	movw	r30, r26
    7660:	0d c0       	rjmp	.+26     	; 0x767c <__udivmodsi4_ep>

00007662 <__udivmodsi4_loop>:
    7662:	aa 1f       	adc	r26, r26
    7664:	bb 1f       	adc	r27, r27
    7666:	ee 1f       	adc	r30, r30
    7668:	ff 1f       	adc	r31, r31
    766a:	a2 17       	cp	r26, r18
    766c:	b3 07       	cpc	r27, r19
    766e:	e4 07       	cpc	r30, r20
    7670:	f5 07       	cpc	r31, r21
    7672:	20 f0       	brcs	.+8      	; 0x767c <__udivmodsi4_ep>
    7674:	a2 1b       	sub	r26, r18
    7676:	b3 0b       	sbc	r27, r19
    7678:	e4 0b       	sbc	r30, r20
    767a:	f5 0b       	sbc	r31, r21

0000767c <__udivmodsi4_ep>:
    767c:	66 1f       	adc	r22, r22
    767e:	77 1f       	adc	r23, r23
    7680:	88 1f       	adc	r24, r24
    7682:	99 1f       	adc	r25, r25
    7684:	1a 94       	dec	r1
    7686:	69 f7       	brne	.-38     	; 0x7662 <__udivmodsi4_loop>
    7688:	60 95       	com	r22
    768a:	70 95       	com	r23
    768c:	80 95       	com	r24
    768e:	90 95       	com	r25
    7690:	9b 01       	movw	r18, r22
    7692:	ac 01       	movw	r20, r24
    7694:	bd 01       	movw	r22, r26
    7696:	cf 01       	movw	r24, r30
    7698:	08 95       	ret

0000769a <__divmodsi4>:
    769a:	05 2e       	mov	r0, r21
    769c:	97 fb       	bst	r25, 7
    769e:	16 f4       	brtc	.+4      	; 0x76a4 <__divmodsi4+0xa>
    76a0:	00 94       	com	r0
    76a2:	07 d0       	rcall	.+14     	; 0x76b2 <__divmodsi4_neg1>
    76a4:	57 fd       	sbrc	r21, 7
    76a6:	0d d0       	rcall	.+26     	; 0x76c2 <__divmodsi4_neg2>
    76a8:	0e 94 2b 3b 	call	0x7656	; 0x7656 <__udivmodsi4>
    76ac:	07 fc       	sbrc	r0, 7
    76ae:	09 d0       	rcall	.+18     	; 0x76c2 <__divmodsi4_neg2>
    76b0:	7e f4       	brtc	.+30     	; 0x76d0 <__divmodsi4_exit>

000076b2 <__divmodsi4_neg1>:
    76b2:	90 95       	com	r25
    76b4:	80 95       	com	r24
    76b6:	70 95       	com	r23
    76b8:	61 95       	neg	r22
    76ba:	7f 4f       	sbci	r23, 0xFF	; 255
    76bc:	8f 4f       	sbci	r24, 0xFF	; 255
    76be:	9f 4f       	sbci	r25, 0xFF	; 255
    76c0:	08 95       	ret

000076c2 <__divmodsi4_neg2>:
    76c2:	50 95       	com	r21
    76c4:	40 95       	com	r20
    76c6:	30 95       	com	r19
    76c8:	21 95       	neg	r18
    76ca:	3f 4f       	sbci	r19, 0xFF	; 255
    76cc:	4f 4f       	sbci	r20, 0xFF	; 255
    76ce:	5f 4f       	sbci	r21, 0xFF	; 255

000076d0 <__divmodsi4_exit>:
    76d0:	08 95       	ret

000076d2 <__tablejump2__>:
    76d2:	ee 0f       	add	r30, r30
    76d4:	ff 1f       	adc	r31, r31

000076d6 <__tablejump__>:
    76d6:	05 90       	lpm	r0, Z+
    76d8:	f4 91       	lpm	r31, Z+
    76da:	e0 2d       	mov	r30, r0
    76dc:	19 94       	eijmp

000076de <__cmpdi2_s8>:
    76de:	00 24       	eor	r0, r0
    76e0:	a7 fd       	sbrc	r26, 7
    76e2:	00 94       	com	r0
    76e4:	2a 17       	cp	r18, r26
    76e6:	30 05       	cpc	r19, r0
    76e8:	40 05       	cpc	r20, r0
    76ea:	50 05       	cpc	r21, r0
    76ec:	60 05       	cpc	r22, r0
    76ee:	70 05       	cpc	r23, r0
    76f0:	80 05       	cpc	r24, r0
    76f2:	90 05       	cpc	r25, r0
    76f4:	08 95       	ret

000076f6 <__umulhisi3>:
    76f6:	a2 9f       	mul	r26, r18
    76f8:	b0 01       	movw	r22, r0
    76fa:	b3 9f       	mul	r27, r19
    76fc:	c0 01       	movw	r24, r0
    76fe:	a3 9f       	mul	r26, r19
    7700:	01 d0       	rcall	.+2      	; 0x7704 <__umulhisi3+0xe>
    7702:	b2 9f       	mul	r27, r18
    7704:	70 0d       	add	r23, r0
    7706:	81 1d       	adc	r24, r1
    7708:	11 24       	eor	r1, r1
    770a:	91 1d       	adc	r25, r1
    770c:	08 95       	ret

0000770e <calloc>:
    770e:	0f 93       	push	r16
    7710:	1f 93       	push	r17
    7712:	cf 93       	push	r28
    7714:	df 93       	push	r29
    7716:	68 9f       	mul	r22, r24
    7718:	80 01       	movw	r16, r0
    771a:	69 9f       	mul	r22, r25
    771c:	10 0d       	add	r17, r0
    771e:	78 9f       	mul	r23, r24
    7720:	10 0d       	add	r17, r0
    7722:	11 24       	eor	r1, r1
    7724:	c8 01       	movw	r24, r16
    7726:	0e 94 a5 3b 	call	0x774a	; 0x774a <malloc>
    772a:	c8 2f       	mov	r28, r24
    772c:	d9 2f       	mov	r29, r25
    772e:	20 97       	sbiw	r28, 0x00	; 0
    7730:	31 f0       	breq	.+12     	; 0x773e <calloc+0x30>
    7732:	a8 01       	movw	r20, r16
    7734:	60 e0       	ldi	r22, 0x00	; 0
    7736:	70 e0       	ldi	r23, 0x00	; 0
    7738:	8c 2f       	mov	r24, r28
    773a:	0e 94 35 3e 	call	0x7c6a	; 0x7c6a <memset>
    773e:	ce 01       	movw	r24, r28
    7740:	df 91       	pop	r29
    7742:	cf 91       	pop	r28
    7744:	1f 91       	pop	r17
    7746:	0f 91       	pop	r16
    7748:	08 95       	ret

0000774a <malloc>:
    774a:	0f 93       	push	r16
    774c:	1f 93       	push	r17
    774e:	cf 93       	push	r28
    7750:	df 93       	push	r29
    7752:	82 30       	cpi	r24, 0x02	; 2
    7754:	91 05       	cpc	r25, r1
    7756:	10 f4       	brcc	.+4      	; 0x775c <malloc+0x12>
    7758:	82 e0       	ldi	r24, 0x02	; 2
    775a:	90 e0       	ldi	r25, 0x00	; 0
    775c:	e0 91 81 2f 	lds	r30, 0x2F81
    7760:	f0 91 82 2f 	lds	r31, 0x2F82
    7764:	20 e0       	ldi	r18, 0x00	; 0
    7766:	30 e0       	ldi	r19, 0x00	; 0
    7768:	c0 e0       	ldi	r28, 0x00	; 0
    776a:	d0 e0       	ldi	r29, 0x00	; 0
    776c:	23 c0       	rjmp	.+70     	; 0x77b4 <malloc+0x6a>
    776e:	40 81       	ld	r20, Z
    7770:	51 81       	ldd	r21, Z+1	; 0x01
    7772:	48 17       	cp	r20, r24
    7774:	59 07       	cpc	r21, r25
    7776:	a8 f0       	brcs	.+42     	; 0x77a2 <malloc+0x58>
    7778:	48 17       	cp	r20, r24
    777a:	59 07       	cpc	r21, r25
    777c:	61 f4       	brne	.+24     	; 0x7796 <malloc+0x4c>
    777e:	82 81       	ldd	r24, Z+2	; 0x02
    7780:	93 81       	ldd	r25, Z+3	; 0x03
    7782:	20 97       	sbiw	r28, 0x00	; 0
    7784:	19 f0       	breq	.+6      	; 0x778c <malloc+0x42>
    7786:	8a 83       	std	Y+2, r24	; 0x02
    7788:	9b 83       	std	Y+3, r25	; 0x03
    778a:	2e c0       	rjmp	.+92     	; 0x77e8 <malloc+0x9e>
    778c:	80 93 81 2f 	sts	0x2F81, r24
    7790:	90 93 82 2f 	sts	0x2F82, r25
    7794:	29 c0       	rjmp	.+82     	; 0x77e8 <malloc+0x9e>
    7796:	21 15       	cp	r18, r1
    7798:	31 05       	cpc	r19, r1
    779a:	29 f0       	breq	.+10     	; 0x77a6 <malloc+0x5c>
    779c:	42 17       	cp	r20, r18
    779e:	53 07       	cpc	r21, r19
    77a0:	10 f0       	brcs	.+4      	; 0x77a6 <malloc+0x5c>
    77a2:	a9 01       	movw	r20, r18
    77a4:	02 c0       	rjmp	.+4      	; 0x77aa <malloc+0x60>
    77a6:	be 01       	movw	r22, r28
    77a8:	df 01       	movw	r26, r30
    77aa:	02 81       	ldd	r16, Z+2	; 0x02
    77ac:	13 81       	ldd	r17, Z+3	; 0x03
    77ae:	ef 01       	movw	r28, r30
    77b0:	9a 01       	movw	r18, r20
    77b2:	f8 01       	movw	r30, r16
    77b4:	30 97       	sbiw	r30, 0x00	; 0
    77b6:	d9 f6       	brne	.-74     	; 0x776e <malloc+0x24>
    77b8:	21 15       	cp	r18, r1
    77ba:	31 05       	cpc	r19, r1
    77bc:	09 f1       	breq	.+66     	; 0x7800 <malloc+0xb6>
    77be:	28 1b       	sub	r18, r24
    77c0:	39 0b       	sbc	r19, r25
    77c2:	24 30       	cpi	r18, 0x04	; 4
    77c4:	31 05       	cpc	r19, r1
    77c6:	90 f4       	brcc	.+36     	; 0x77ec <malloc+0xa2>
    77c8:	12 96       	adiw	r26, 0x02	; 2
    77ca:	8d 91       	ld	r24, X+
    77cc:	9c 91       	ld	r25, X
    77ce:	13 97       	sbiw	r26, 0x03	; 3
    77d0:	61 15       	cp	r22, r1
    77d2:	71 05       	cpc	r23, r1
    77d4:	21 f0       	breq	.+8      	; 0x77de <malloc+0x94>
    77d6:	fb 01       	movw	r30, r22
    77d8:	82 83       	std	Z+2, r24	; 0x02
    77da:	93 83       	std	Z+3, r25	; 0x03
    77dc:	04 c0       	rjmp	.+8      	; 0x77e6 <malloc+0x9c>
    77de:	80 93 81 2f 	sts	0x2F81, r24
    77e2:	90 93 82 2f 	sts	0x2F82, r25
    77e6:	fd 01       	movw	r30, r26
    77e8:	32 96       	adiw	r30, 0x02	; 2
    77ea:	44 c0       	rjmp	.+136    	; 0x7874 <malloc+0x12a>
    77ec:	fd 01       	movw	r30, r26
    77ee:	e2 0f       	add	r30, r18
    77f0:	f3 1f       	adc	r31, r19
    77f2:	81 93       	st	Z+, r24
    77f4:	91 93       	st	Z+, r25
    77f6:	22 50       	subi	r18, 0x02	; 2
    77f8:	31 09       	sbc	r19, r1
    77fa:	2d 93       	st	X+, r18
    77fc:	3c 93       	st	X, r19
    77fe:	3a c0       	rjmp	.+116    	; 0x7874 <malloc+0x12a>
    7800:	20 91 7f 2f 	lds	r18, 0x2F7F
    7804:	30 91 80 2f 	lds	r19, 0x2F80
    7808:	23 2b       	or	r18, r19
    780a:	41 f4       	brne	.+16     	; 0x781c <malloc+0xd2>
    780c:	20 91 4e 20 	lds	r18, 0x204E
    7810:	30 91 4f 20 	lds	r19, 0x204F
    7814:	20 93 7f 2f 	sts	0x2F7F, r18
    7818:	30 93 80 2f 	sts	0x2F80, r19
    781c:	20 91 4c 20 	lds	r18, 0x204C
    7820:	30 91 4d 20 	lds	r19, 0x204D
    7824:	21 15       	cp	r18, r1
    7826:	31 05       	cpc	r19, r1
    7828:	41 f4       	brne	.+16     	; 0x783a <malloc+0xf0>
    782a:	2d b7       	in	r18, 0x3d	; 61
    782c:	3e b7       	in	r19, 0x3e	; 62
    782e:	40 91 50 20 	lds	r20, 0x2050
    7832:	50 91 51 20 	lds	r21, 0x2051
    7836:	24 1b       	sub	r18, r20
    7838:	35 0b       	sbc	r19, r21
    783a:	e0 91 7f 2f 	lds	r30, 0x2F7F
    783e:	f0 91 80 2f 	lds	r31, 0x2F80
    7842:	e2 17       	cp	r30, r18
    7844:	f3 07       	cpc	r31, r19
    7846:	a0 f4       	brcc	.+40     	; 0x7870 <malloc+0x126>
    7848:	2e 1b       	sub	r18, r30
    784a:	3f 0b       	sbc	r19, r31
    784c:	28 17       	cp	r18, r24
    784e:	39 07       	cpc	r19, r25
    7850:	78 f0       	brcs	.+30     	; 0x7870 <malloc+0x126>
    7852:	ac 01       	movw	r20, r24
    7854:	4e 5f       	subi	r20, 0xFE	; 254
    7856:	5f 4f       	sbci	r21, 0xFF	; 255
    7858:	24 17       	cp	r18, r20
    785a:	35 07       	cpc	r19, r21
    785c:	48 f0       	brcs	.+18     	; 0x7870 <malloc+0x126>
    785e:	4e 0f       	add	r20, r30
    7860:	5f 1f       	adc	r21, r31
    7862:	40 93 7f 2f 	sts	0x2F7F, r20
    7866:	50 93 80 2f 	sts	0x2F80, r21
    786a:	81 93       	st	Z+, r24
    786c:	91 93       	st	Z+, r25
    786e:	02 c0       	rjmp	.+4      	; 0x7874 <malloc+0x12a>
    7870:	e0 e0       	ldi	r30, 0x00	; 0
    7872:	f0 e0       	ldi	r31, 0x00	; 0
    7874:	cf 01       	movw	r24, r30
    7876:	df 91       	pop	r29
    7878:	cf 91       	pop	r28
    787a:	1f 91       	pop	r17
    787c:	0f 91       	pop	r16
    787e:	08 95       	ret

00007880 <free>:
    7880:	ef 92       	push	r14
    7882:	ff 92       	push	r15
    7884:	0f 93       	push	r16
    7886:	1f 93       	push	r17
    7888:	cf 93       	push	r28
    788a:	df 93       	push	r29
    788c:	00 97       	sbiw	r24, 0x00	; 0
    788e:	09 f4       	brne	.+2      	; 0x7892 <free+0x12>
    7890:	8e c0       	rjmp	.+284    	; 0x79ae <free+0x12e>
    7892:	dc 01       	movw	r26, r24
    7894:	12 97       	sbiw	r26, 0x02	; 2
    7896:	12 96       	adiw	r26, 0x02	; 2
    7898:	1d 92       	st	X+, r1
    789a:	1c 92       	st	X, r1
    789c:	13 97       	sbiw	r26, 0x03	; 3
    789e:	e0 90 81 2f 	lds	r14, 0x2F81
    78a2:	f0 90 82 2f 	lds	r15, 0x2F82
    78a6:	e1 14       	cp	r14, r1
    78a8:	f1 04       	cpc	r15, r1
    78aa:	89 f4       	brne	.+34     	; 0x78ce <free+0x4e>
    78ac:	2d 91       	ld	r18, X+
    78ae:	3c 91       	ld	r19, X
    78b0:	11 97       	sbiw	r26, 0x01	; 1
    78b2:	28 0f       	add	r18, r24
    78b4:	39 1f       	adc	r19, r25
    78b6:	80 91 7f 2f 	lds	r24, 0x2F7F
    78ba:	90 91 80 2f 	lds	r25, 0x2F80
    78be:	82 17       	cp	r24, r18
    78c0:	93 07       	cpc	r25, r19
    78c2:	89 f5       	brne	.+98     	; 0x7926 <free+0xa6>
    78c4:	a0 93 7f 2f 	sts	0x2F7F, r26
    78c8:	b0 93 80 2f 	sts	0x2F80, r27
    78cc:	70 c0       	rjmp	.+224    	; 0x79ae <free+0x12e>
    78ce:	e7 01       	movw	r28, r14
    78d0:	20 e0       	ldi	r18, 0x00	; 0
    78d2:	30 e0       	ldi	r19, 0x00	; 0
    78d4:	01 c0       	rjmp	.+2      	; 0x78d8 <free+0x58>
    78d6:	ea 01       	movw	r28, r20
    78d8:	ca 17       	cp	r28, r26
    78da:	db 07       	cpc	r29, r27
    78dc:	38 f4       	brcc	.+14     	; 0x78ec <free+0x6c>
    78de:	4a 81       	ldd	r20, Y+2	; 0x02
    78e0:	5b 81       	ldd	r21, Y+3	; 0x03
    78e2:	9e 01       	movw	r18, r28
    78e4:	41 15       	cp	r20, r1
    78e6:	51 05       	cpc	r21, r1
    78e8:	b1 f7       	brne	.-20     	; 0x78d6 <free+0x56>
    78ea:	22 c0       	rjmp	.+68     	; 0x7930 <free+0xb0>
    78ec:	ac 01       	movw	r20, r24
    78ee:	42 50       	subi	r20, 0x02	; 2
    78f0:	51 09       	sbc	r21, r1
    78f2:	fa 01       	movw	r30, r20
    78f4:	c2 83       	std	Z+2, r28	; 0x02
    78f6:	d3 83       	std	Z+3, r29	; 0x03
    78f8:	00 81       	ld	r16, Z
    78fa:	11 81       	ldd	r17, Z+1	; 0x01
    78fc:	bc 01       	movw	r22, r24
    78fe:	60 0f       	add	r22, r16
    7900:	71 1f       	adc	r23, r17
    7902:	6c 17       	cp	r22, r28
    7904:	7d 07       	cpc	r23, r29
    7906:	61 f4       	brne	.+24     	; 0x7920 <free+0xa0>
    7908:	68 81       	ld	r22, Y
    790a:	79 81       	ldd	r23, Y+1	; 0x01
    790c:	60 0f       	add	r22, r16
    790e:	71 1f       	adc	r23, r17
    7910:	6e 5f       	subi	r22, 0xFE	; 254
    7912:	7f 4f       	sbci	r23, 0xFF	; 255
    7914:	60 83       	st	Z, r22
    7916:	71 83       	std	Z+1, r23	; 0x01
    7918:	6a 81       	ldd	r22, Y+2	; 0x02
    791a:	7b 81       	ldd	r23, Y+3	; 0x03
    791c:	62 83       	std	Z+2, r22	; 0x02
    791e:	73 83       	std	Z+3, r23	; 0x03
    7920:	21 15       	cp	r18, r1
    7922:	31 05       	cpc	r19, r1
    7924:	29 f4       	brne	.+10     	; 0x7930 <free+0xb0>
    7926:	a0 93 81 2f 	sts	0x2F81, r26
    792a:	b0 93 82 2f 	sts	0x2F82, r27
    792e:	3f c0       	rjmp	.+126    	; 0x79ae <free+0x12e>
    7930:	f9 01       	movw	r30, r18
    7932:	a2 83       	std	Z+2, r26	; 0x02
    7934:	b3 83       	std	Z+3, r27	; 0x03
    7936:	e9 01       	movw	r28, r18
    7938:	49 91       	ld	r20, Y+
    793a:	59 91       	ld	r21, Y+
    793c:	c4 0f       	add	r28, r20
    793e:	d5 1f       	adc	r29, r21
    7940:	ac 17       	cp	r26, r28
    7942:	bd 07       	cpc	r27, r29
    7944:	71 f4       	brne	.+28     	; 0x7962 <free+0xe2>
    7946:	dc 01       	movw	r26, r24
    7948:	9e 91       	ld	r25, -X
    794a:	8e 91       	ld	r24, -X
    794c:	84 0f       	add	r24, r20
    794e:	95 1f       	adc	r25, r21
    7950:	02 96       	adiw	r24, 0x02	; 2
    7952:	80 83       	st	Z, r24
    7954:	91 83       	std	Z+1, r25	; 0x01
    7956:	12 96       	adiw	r26, 0x02	; 2
    7958:	8d 91       	ld	r24, X+
    795a:	9c 91       	ld	r25, X
    795c:	13 97       	sbiw	r26, 0x03	; 3
    795e:	82 83       	std	Z+2, r24	; 0x02
    7960:	93 83       	std	Z+3, r25	; 0x03
    7962:	a0 e0       	ldi	r26, 0x00	; 0
    7964:	b0 e0       	ldi	r27, 0x00	; 0
    7966:	02 c0       	rjmp	.+4      	; 0x796c <free+0xec>
    7968:	d7 01       	movw	r26, r14
    796a:	7c 01       	movw	r14, r24
    796c:	f7 01       	movw	r30, r14
    796e:	82 81       	ldd	r24, Z+2	; 0x02
    7970:	93 81       	ldd	r25, Z+3	; 0x03
    7972:	00 97       	sbiw	r24, 0x00	; 0
    7974:	c9 f7       	brne	.-14     	; 0x7968 <free+0xe8>
    7976:	c7 01       	movw	r24, r14
    7978:	02 96       	adiw	r24, 0x02	; 2
    797a:	20 81       	ld	r18, Z
    797c:	31 81       	ldd	r19, Z+1	; 0x01
    797e:	82 0f       	add	r24, r18
    7980:	93 1f       	adc	r25, r19
    7982:	20 91 7f 2f 	lds	r18, 0x2F7F
    7986:	30 91 80 2f 	lds	r19, 0x2F80
    798a:	28 17       	cp	r18, r24
    798c:	39 07       	cpc	r19, r25
    798e:	79 f4       	brne	.+30     	; 0x79ae <free+0x12e>
    7990:	10 97       	sbiw	r26, 0x00	; 0
    7992:	29 f4       	brne	.+10     	; 0x799e <free+0x11e>
    7994:	10 92 81 2f 	sts	0x2F81, r1
    7998:	10 92 82 2f 	sts	0x2F82, r1
    799c:	04 c0       	rjmp	.+8      	; 0x79a6 <free+0x126>
    799e:	12 96       	adiw	r26, 0x02	; 2
    79a0:	1d 92       	st	X+, r1
    79a2:	1c 92       	st	X, r1
    79a4:	13 97       	sbiw	r26, 0x03	; 3
    79a6:	e0 92 7f 2f 	sts	0x2F7F, r14
    79aa:	f0 92 80 2f 	sts	0x2F80, r15
    79ae:	df 91       	pop	r29
    79b0:	cf 91       	pop	r28
    79b2:	1f 91       	pop	r17
    79b4:	0f 91       	pop	r16
    79b6:	ff 90       	pop	r15
    79b8:	ef 90       	pop	r14
    79ba:	08 95       	ret

000079bc <do_random>:
    79bc:	8f 92       	push	r8
    79be:	9f 92       	push	r9
    79c0:	af 92       	push	r10
    79c2:	bf 92       	push	r11
    79c4:	cf 92       	push	r12
    79c6:	df 92       	push	r13
    79c8:	ef 92       	push	r14
    79ca:	ff 92       	push	r15
    79cc:	cf 93       	push	r28
    79ce:	df 93       	push	r29
    79d0:	ec 01       	movw	r28, r24
    79d2:	68 81       	ld	r22, Y
    79d4:	79 81       	ldd	r23, Y+1	; 0x01
    79d6:	8a 81       	ldd	r24, Y+2	; 0x02
    79d8:	9b 81       	ldd	r25, Y+3	; 0x03
    79da:	61 15       	cp	r22, r1
    79dc:	71 05       	cpc	r23, r1
    79de:	81 05       	cpc	r24, r1
    79e0:	91 05       	cpc	r25, r1
    79e2:	21 f4       	brne	.+8      	; 0x79ec <do_random+0x30>
    79e4:	64 e2       	ldi	r22, 0x24	; 36
    79e6:	79 ed       	ldi	r23, 0xD9	; 217
    79e8:	8b e5       	ldi	r24, 0x5B	; 91
    79ea:	97 e0       	ldi	r25, 0x07	; 7
    79ec:	2d e1       	ldi	r18, 0x1D	; 29
    79ee:	33 ef       	ldi	r19, 0xF3	; 243
    79f0:	41 e0       	ldi	r20, 0x01	; 1
    79f2:	50 e0       	ldi	r21, 0x00	; 0
    79f4:	0e 94 4d 3b 	call	0x769a	; 0x769a <__divmodsi4>
    79f8:	49 01       	movw	r8, r18
    79fa:	5a 01       	movw	r10, r20
    79fc:	9b 01       	movw	r18, r22
    79fe:	ac 01       	movw	r20, r24
    7a00:	a7 ea       	ldi	r26, 0xA7	; 167
    7a02:	b1 e4       	ldi	r27, 0x41	; 65
    7a04:	0e 94 08 3b 	call	0x7610	; 0x7610 <__muluhisi3>
    7a08:	6b 01       	movw	r12, r22
    7a0a:	7c 01       	movw	r14, r24
    7a0c:	ac ee       	ldi	r26, 0xEC	; 236
    7a0e:	b4 ef       	ldi	r27, 0xF4	; 244
    7a10:	a5 01       	movw	r20, r10
    7a12:	94 01       	movw	r18, r8
    7a14:	0e 94 16 3b 	call	0x762c	; 0x762c <__mulohisi3>
    7a18:	c6 0e       	add	r12, r22
    7a1a:	d7 1e       	adc	r13, r23
    7a1c:	e8 1e       	adc	r14, r24
    7a1e:	f9 1e       	adc	r15, r25
    7a20:	f7 fe       	sbrs	r15, 7
    7a22:	06 c0       	rjmp	.+12     	; 0x7a30 <do_random+0x74>
    7a24:	81 e0       	ldi	r24, 0x01	; 1
    7a26:	c8 1a       	sub	r12, r24
    7a28:	d1 08       	sbc	r13, r1
    7a2a:	e1 08       	sbc	r14, r1
    7a2c:	80 e8       	ldi	r24, 0x80	; 128
    7a2e:	f8 0a       	sbc	r15, r24
    7a30:	c8 82       	st	Y, r12
    7a32:	d9 82       	std	Y+1, r13	; 0x01
    7a34:	ea 82       	std	Y+2, r14	; 0x02
    7a36:	fb 82       	std	Y+3, r15	; 0x03
    7a38:	e8 94       	clt
    7a3a:	f7 f8       	bld	r15, 7
    7a3c:	b6 01       	movw	r22, r12
    7a3e:	c7 01       	movw	r24, r14
    7a40:	df 91       	pop	r29
    7a42:	cf 91       	pop	r28
    7a44:	ff 90       	pop	r15
    7a46:	ef 90       	pop	r14
    7a48:	df 90       	pop	r13
    7a4a:	cf 90       	pop	r12
    7a4c:	bf 90       	pop	r11
    7a4e:	af 90       	pop	r10
    7a50:	9f 90       	pop	r9
    7a52:	8f 90       	pop	r8
    7a54:	08 95       	ret

00007a56 <random_r>:
    7a56:	0c 94 de 3c 	jmp	0x79bc	; 0x79bc <do_random>

00007a5a <random>:
    7a5a:	82 e5       	ldi	r24, 0x52	; 82
    7a5c:	90 e2       	ldi	r25, 0x20	; 32
    7a5e:	0c 94 de 3c 	jmp	0x79bc	; 0x79bc <do_random>

00007a62 <srandom>:
    7a62:	60 93 52 20 	sts	0x2052, r22
    7a66:	70 93 53 20 	sts	0x2053, r23
    7a6a:	80 93 54 20 	sts	0x2054, r24
    7a6e:	90 93 55 20 	sts	0x2055, r25
    7a72:	08 95       	ret

00007a74 <realloc>:
    7a74:	8f 92       	push	r8
    7a76:	9f 92       	push	r9
    7a78:	af 92       	push	r10
    7a7a:	bf 92       	push	r11
    7a7c:	cf 92       	push	r12
    7a7e:	df 92       	push	r13
    7a80:	ef 92       	push	r14
    7a82:	ff 92       	push	r15
    7a84:	0f 93       	push	r16
    7a86:	1f 93       	push	r17
    7a88:	cf 93       	push	r28
    7a8a:	df 93       	push	r29
    7a8c:	ec 01       	movw	r28, r24
    7a8e:	00 97       	sbiw	r24, 0x00	; 0
    7a90:	79 f4       	brne	.+30     	; 0x7ab0 <realloc+0x3c>
    7a92:	cb 01       	movw	r24, r22
    7a94:	df 91       	pop	r29
    7a96:	cf 91       	pop	r28
    7a98:	1f 91       	pop	r17
    7a9a:	0f 91       	pop	r16
    7a9c:	ff 90       	pop	r15
    7a9e:	ef 90       	pop	r14
    7aa0:	df 90       	pop	r13
    7aa2:	cf 90       	pop	r12
    7aa4:	bf 90       	pop	r11
    7aa6:	af 90       	pop	r10
    7aa8:	9f 90       	pop	r9
    7aaa:	8f 90       	pop	r8
    7aac:	0c 94 a5 3b 	jmp	0x774a	; 0x774a <malloc>
    7ab0:	dc 01       	movw	r26, r24
    7ab2:	a6 0f       	add	r26, r22
    7ab4:	b7 1f       	adc	r27, r23
    7ab6:	fc 01       	movw	r30, r24
    7ab8:	32 97       	sbiw	r30, 0x02	; 2
    7aba:	ae 17       	cp	r26, r30
    7abc:	bf 07       	cpc	r27, r31
    7abe:	18 f4       	brcc	.+6      	; 0x7ac6 <realloc+0x52>
    7ac0:	c0 e0       	ldi	r28, 0x00	; 0
    7ac2:	d0 e0       	ldi	r29, 0x00	; 0
    7ac4:	a9 c0       	rjmp	.+338    	; 0x7c18 <realloc+0x1a4>
    7ac6:	00 81       	ld	r16, Z
    7ac8:	11 81       	ldd	r17, Z+1	; 0x01
    7aca:	06 17       	cp	r16, r22
    7acc:	17 07       	cpc	r17, r23
    7ace:	b0 f0       	brcs	.+44     	; 0x7afc <realloc+0x88>
    7ad0:	05 30       	cpi	r16, 0x05	; 5
    7ad2:	11 05       	cpc	r17, r1
    7ad4:	08 f4       	brcc	.+2      	; 0x7ad8 <realloc+0x64>
    7ad6:	a0 c0       	rjmp	.+320    	; 0x7c18 <realloc+0x1a4>
    7ad8:	c8 01       	movw	r24, r16
    7ada:	04 97       	sbiw	r24, 0x04	; 4
    7adc:	86 17       	cp	r24, r22
    7ade:	97 07       	cpc	r25, r23
    7ae0:	08 f4       	brcc	.+2      	; 0x7ae4 <realloc+0x70>
    7ae2:	9a c0       	rjmp	.+308    	; 0x7c18 <realloc+0x1a4>
    7ae4:	02 50       	subi	r16, 0x02	; 2
    7ae6:	11 09       	sbc	r17, r1
    7ae8:	06 1b       	sub	r16, r22
    7aea:	17 0b       	sbc	r17, r23
    7aec:	0d 93       	st	X+, r16
    7aee:	1d 93       	st	X+, r17
    7af0:	60 83       	st	Z, r22
    7af2:	71 83       	std	Z+1, r23	; 0x01
    7af4:	cd 01       	movw	r24, r26
    7af6:	0e 94 40 3c 	call	0x7880	; 0x7880 <free>
    7afa:	8e c0       	rjmp	.+284    	; 0x7c18 <realloc+0x1a4>
    7afc:	6b 01       	movw	r12, r22
    7afe:	c0 1a       	sub	r12, r16
    7b00:	d1 0a       	sbc	r13, r17
    7b02:	7c 01       	movw	r14, r24
    7b04:	e0 0e       	add	r14, r16
    7b06:	f1 1e       	adc	r15, r17
    7b08:	e0 91 81 2f 	lds	r30, 0x2F81
    7b0c:	f0 91 82 2f 	lds	r31, 0x2F82
    7b10:	20 e0       	ldi	r18, 0x00	; 0
    7b12:	30 e0       	ldi	r19, 0x00	; 0
    7b14:	80 e0       	ldi	r24, 0x00	; 0
    7b16:	90 e0       	ldi	r25, 0x00	; 0
    7b18:	48 c0       	rjmp	.+144    	; 0x7baa <realloc+0x136>
    7b1a:	ee 15       	cp	r30, r14
    7b1c:	ff 05       	cpc	r31, r15
    7b1e:	d1 f5       	brne	.+116    	; 0x7b94 <realloc+0x120>
    7b20:	80 80       	ld	r8, Z
    7b22:	91 80       	ldd	r9, Z+1	; 0x01
    7b24:	54 01       	movw	r10, r8
    7b26:	42 e0       	ldi	r20, 0x02	; 2
    7b28:	a4 0e       	add	r10, r20
    7b2a:	b1 1c       	adc	r11, r1
    7b2c:	ac 14       	cp	r10, r12
    7b2e:	bd 04       	cpc	r11, r13
    7b30:	88 f1       	brcs	.+98     	; 0x7b94 <realloc+0x120>
    7b32:	74 01       	movw	r14, r8
    7b34:	ec 18       	sub	r14, r12
    7b36:	fd 08       	sbc	r15, r13
    7b38:	67 01       	movw	r12, r14
    7b3a:	22 e0       	ldi	r18, 0x02	; 2
    7b3c:	c2 0e       	add	r12, r18
    7b3e:	d1 1c       	adc	r13, r1
    7b40:	9e 01       	movw	r18, r28
    7b42:	22 50       	subi	r18, 0x02	; 2
    7b44:	31 09       	sbc	r19, r1
    7b46:	45 e0       	ldi	r20, 0x05	; 5
    7b48:	c4 16       	cp	r12, r20
    7b4a:	d1 04       	cpc	r13, r1
    7b4c:	78 f0       	brcs	.+30     	; 0x7b6c <realloc+0xf8>
    7b4e:	42 81       	ldd	r20, Z+2	; 0x02
    7b50:	53 81       	ldd	r21, Z+3	; 0x03
    7b52:	12 96       	adiw	r26, 0x02	; 2
    7b54:	4d 93       	st	X+, r20
    7b56:	5c 93       	st	X, r21
    7b58:	13 97       	sbiw	r26, 0x03	; 3
    7b5a:	ed 92       	st	X+, r14
    7b5c:	fc 92       	st	X, r15
    7b5e:	11 97       	sbiw	r26, 0x01	; 1
    7b60:	f9 01       	movw	r30, r18
    7b62:	60 83       	st	Z, r22
    7b64:	71 83       	std	Z+1, r23	; 0x01
    7b66:	3a 2f       	mov	r19, r26
    7b68:	2b 2f       	mov	r18, r27
    7b6a:	09 c0       	rjmp	.+18     	; 0x7b7e <realloc+0x10a>
    7b6c:	0e 5f       	subi	r16, 0xFE	; 254
    7b6e:	1f 4f       	sbci	r17, 0xFF	; 255
    7b70:	08 0d       	add	r16, r8
    7b72:	19 1d       	adc	r17, r9
    7b74:	d9 01       	movw	r26, r18
    7b76:	0d 93       	st	X+, r16
    7b78:	1c 93       	st	X, r17
    7b7a:	32 81       	ldd	r19, Z+2	; 0x02
    7b7c:	23 81       	ldd	r18, Z+3	; 0x03
    7b7e:	00 97       	sbiw	r24, 0x00	; 0
    7b80:	21 f0       	breq	.+8      	; 0x7b8a <realloc+0x116>
    7b82:	fc 01       	movw	r30, r24
    7b84:	32 83       	std	Z+2, r19	; 0x02
    7b86:	23 83       	std	Z+3, r18	; 0x03
    7b88:	47 c0       	rjmp	.+142    	; 0x7c18 <realloc+0x1a4>
    7b8a:	30 93 81 2f 	sts	0x2F81, r19
    7b8e:	20 93 82 2f 	sts	0x2F82, r18
    7b92:	42 c0       	rjmp	.+132    	; 0x7c18 <realloc+0x1a4>
    7b94:	80 81       	ld	r24, Z
    7b96:	91 81       	ldd	r25, Z+1	; 0x01
    7b98:	28 17       	cp	r18, r24
    7b9a:	39 07       	cpc	r19, r25
    7b9c:	08 f4       	brcc	.+2      	; 0x7ba0 <realloc+0x12c>
    7b9e:	9c 01       	movw	r18, r24
    7ba0:	52 81       	ldd	r21, Z+2	; 0x02
    7ba2:	43 81       	ldd	r20, Z+3	; 0x03
    7ba4:	cf 01       	movw	r24, r30
    7ba6:	e5 2f       	mov	r30, r21
    7ba8:	f4 2f       	mov	r31, r20
    7baa:	30 97       	sbiw	r30, 0x00	; 0
    7bac:	09 f0       	breq	.+2      	; 0x7bb0 <realloc+0x13c>
    7bae:	b5 cf       	rjmp	.-150    	; 0x7b1a <realloc+0xa6>
    7bb0:	80 91 7f 2f 	lds	r24, 0x2F7F
    7bb4:	90 91 80 2f 	lds	r25, 0x2F80
    7bb8:	8e 15       	cp	r24, r14
    7bba:	9f 05       	cpc	r25, r15
    7bbc:	f1 f4       	brne	.+60     	; 0x7bfa <realloc+0x186>
    7bbe:	26 17       	cp	r18, r22
    7bc0:	37 07       	cpc	r19, r23
    7bc2:	d8 f4       	brcc	.+54     	; 0x7bfa <realloc+0x186>
    7bc4:	80 91 4c 20 	lds	r24, 0x204C
    7bc8:	90 91 4d 20 	lds	r25, 0x204D
    7bcc:	00 97       	sbiw	r24, 0x00	; 0
    7bce:	41 f4       	brne	.+16     	; 0x7be0 <realloc+0x16c>
    7bd0:	8d b7       	in	r24, 0x3d	; 61
    7bd2:	9e b7       	in	r25, 0x3e	; 62
    7bd4:	20 91 50 20 	lds	r18, 0x2050
    7bd8:	30 91 51 20 	lds	r19, 0x2051
    7bdc:	82 1b       	sub	r24, r18
    7bde:	93 0b       	sbc	r25, r19
    7be0:	a8 17       	cp	r26, r24
    7be2:	b9 07       	cpc	r27, r25
    7be4:	08 f0       	brcs	.+2      	; 0x7be8 <realloc+0x174>
    7be6:	6c cf       	rjmp	.-296    	; 0x7ac0 <realloc+0x4c>
    7be8:	a0 93 7f 2f 	sts	0x2F7F, r26
    7bec:	b0 93 80 2f 	sts	0x2F80, r27
    7bf0:	fe 01       	movw	r30, r28
    7bf2:	32 97       	sbiw	r30, 0x02	; 2
    7bf4:	60 83       	st	Z, r22
    7bf6:	71 83       	std	Z+1, r23	; 0x01
    7bf8:	0f c0       	rjmp	.+30     	; 0x7c18 <realloc+0x1a4>
    7bfa:	cb 01       	movw	r24, r22
    7bfc:	0e 94 a5 3b 	call	0x774a	; 0x774a <malloc>
    7c00:	7c 01       	movw	r14, r24
    7c02:	00 97       	sbiw	r24, 0x00	; 0
    7c04:	09 f4       	brne	.+2      	; 0x7c08 <realloc+0x194>
    7c06:	5c cf       	rjmp	.-328    	; 0x7ac0 <realloc+0x4c>
    7c08:	a8 01       	movw	r20, r16
    7c0a:	be 01       	movw	r22, r28
    7c0c:	0e 94 2c 3e 	call	0x7c58	; 0x7c58 <memcpy>
    7c10:	ce 01       	movw	r24, r28
    7c12:	0e 94 40 3c 	call	0x7880	; 0x7880 <free>
    7c16:	e7 01       	movw	r28, r14
    7c18:	ce 01       	movw	r24, r28
    7c1a:	df 91       	pop	r29
    7c1c:	cf 91       	pop	r28
    7c1e:	1f 91       	pop	r17
    7c20:	0f 91       	pop	r16
    7c22:	ff 90       	pop	r15
    7c24:	ef 90       	pop	r14
    7c26:	df 90       	pop	r13
    7c28:	cf 90       	pop	r12
    7c2a:	bf 90       	pop	r11
    7c2c:	af 90       	pop	r10
    7c2e:	9f 90       	pop	r9
    7c30:	8f 90       	pop	r8
    7c32:	08 95       	ret

00007c34 <abort>:
    7c34:	81 e0       	ldi	r24, 0x01	; 1
    7c36:	90 e0       	ldi	r25, 0x00	; 0
    7c38:	f8 94       	cli
    7c3a:	0c 94 73 41 	jmp	0x82e6	; 0x82e6 <_exit>

00007c3e <memcmp>:
    7c3e:	fb 01       	movw	r30, r22
    7c40:	dc 01       	movw	r26, r24
    7c42:	04 c0       	rjmp	.+8      	; 0x7c4c <memcmp+0xe>
    7c44:	8d 91       	ld	r24, X+
    7c46:	01 90       	ld	r0, Z+
    7c48:	80 19       	sub	r24, r0
    7c4a:	21 f4       	brne	.+8      	; 0x7c54 <memcmp+0x16>
    7c4c:	41 50       	subi	r20, 0x01	; 1
    7c4e:	50 40       	sbci	r21, 0x00	; 0
    7c50:	c8 f7       	brcc	.-14     	; 0x7c44 <memcmp+0x6>
    7c52:	88 1b       	sub	r24, r24
    7c54:	99 0b       	sbc	r25, r25
    7c56:	08 95       	ret

00007c58 <memcpy>:
    7c58:	fb 01       	movw	r30, r22
    7c5a:	dc 01       	movw	r26, r24
    7c5c:	02 c0       	rjmp	.+4      	; 0x7c62 <memcpy+0xa>
    7c5e:	01 90       	ld	r0, Z+
    7c60:	0d 92       	st	X+, r0
    7c62:	41 50       	subi	r20, 0x01	; 1
    7c64:	50 40       	sbci	r21, 0x00	; 0
    7c66:	d8 f7       	brcc	.-10     	; 0x7c5e <memcpy+0x6>
    7c68:	08 95       	ret

00007c6a <memset>:
    7c6a:	dc 01       	movw	r26, r24
    7c6c:	01 c0       	rjmp	.+2      	; 0x7c70 <memset+0x6>
    7c6e:	6d 93       	st	X+, r22
    7c70:	41 50       	subi	r20, 0x01	; 1
    7c72:	50 40       	sbci	r21, 0x00	; 0
    7c74:	e0 f7       	brcc	.-8      	; 0x7c6e <memset+0x4>
    7c76:	08 95       	ret

00007c78 <strcmp>:
    7c78:	fb 01       	movw	r30, r22
    7c7a:	dc 01       	movw	r26, r24
    7c7c:	8d 91       	ld	r24, X+
    7c7e:	01 90       	ld	r0, Z+
    7c80:	80 19       	sub	r24, r0
    7c82:	01 10       	cpse	r0, r1
    7c84:	d9 f3       	breq	.-10     	; 0x7c7c <strcmp+0x4>
    7c86:	99 0b       	sbc	r25, r25
    7c88:	08 95       	ret

00007c8a <fprintf>:
    7c8a:	cf 93       	push	r28
    7c8c:	df 93       	push	r29
    7c8e:	1f 92       	push	r1
    7c90:	1f 92       	push	r1
    7c92:	cd b7       	in	r28, 0x3d	; 61
    7c94:	de b7       	in	r29, 0x3e	; 62
    7c96:	ae 01       	movw	r20, r28
    7c98:	44 5f       	subi	r20, 0xF4	; 244
    7c9a:	5f 4f       	sbci	r21, 0xFF	; 255
    7c9c:	49 83       	std	Y+1, r20	; 0x01
    7c9e:	5a 83       	std	Y+2, r21	; 0x02
    7ca0:	6a 85       	ldd	r22, Y+10	; 0x0a
    7ca2:	7b 85       	ldd	r23, Y+11	; 0x0b
    7ca4:	88 85       	ldd	r24, Y+8	; 0x08
    7ca6:	99 85       	ldd	r25, Y+9	; 0x09
    7ca8:	0e 94 ff 3e 	call	0x7dfe	; 0x7dfe <vfprintf>
    7cac:	0f 90       	pop	r0
    7cae:	0f 90       	pop	r0
    7cb0:	df 91       	pop	r29
    7cb2:	cf 91       	pop	r28
    7cb4:	08 95       	ret

00007cb6 <fputc>:
    7cb6:	0f 93       	push	r16
    7cb8:	1f 93       	push	r17
    7cba:	cf 93       	push	r28
    7cbc:	df 93       	push	r29
    7cbe:	8c 01       	movw	r16, r24
    7cc0:	eb 01       	movw	r28, r22
    7cc2:	8b 81       	ldd	r24, Y+3	; 0x03
    7cc4:	81 fd       	sbrc	r24, 1
    7cc6:	03 c0       	rjmp	.+6      	; 0x7cce <fputc+0x18>
    7cc8:	0f ef       	ldi	r16, 0xFF	; 255
    7cca:	1f ef       	ldi	r17, 0xFF	; 255
    7ccc:	1a c0       	rjmp	.+52     	; 0x7d02 <fputc+0x4c>
    7cce:	82 ff       	sbrs	r24, 2
    7cd0:	0d c0       	rjmp	.+26     	; 0x7cec <fputc+0x36>
    7cd2:	2e 81       	ldd	r18, Y+6	; 0x06
    7cd4:	3f 81       	ldd	r19, Y+7	; 0x07
    7cd6:	8c 81       	ldd	r24, Y+4	; 0x04
    7cd8:	9d 81       	ldd	r25, Y+5	; 0x05
    7cda:	28 17       	cp	r18, r24
    7cdc:	39 07       	cpc	r19, r25
    7cde:	64 f4       	brge	.+24     	; 0x7cf8 <fputc+0x42>
    7ce0:	e8 81       	ld	r30, Y
    7ce2:	f9 81       	ldd	r31, Y+1	; 0x01
    7ce4:	01 93       	st	Z+, r16
    7ce6:	e8 83       	st	Y, r30
    7ce8:	f9 83       	std	Y+1, r31	; 0x01
    7cea:	06 c0       	rjmp	.+12     	; 0x7cf8 <fputc+0x42>
    7cec:	e8 85       	ldd	r30, Y+8	; 0x08
    7cee:	f9 85       	ldd	r31, Y+9	; 0x09
    7cf0:	80 2f       	mov	r24, r16
    7cf2:	19 95       	eicall
    7cf4:	89 2b       	or	r24, r25
    7cf6:	41 f7       	brne	.-48     	; 0x7cc8 <fputc+0x12>
    7cf8:	8e 81       	ldd	r24, Y+6	; 0x06
    7cfa:	9f 81       	ldd	r25, Y+7	; 0x07
    7cfc:	01 96       	adiw	r24, 0x01	; 1
    7cfe:	8e 83       	std	Y+6, r24	; 0x06
    7d00:	9f 83       	std	Y+7, r25	; 0x07
    7d02:	c8 01       	movw	r24, r16
    7d04:	df 91       	pop	r29
    7d06:	cf 91       	pop	r28
    7d08:	1f 91       	pop	r17
    7d0a:	0f 91       	pop	r16
    7d0c:	08 95       	ret

00007d0e <fputs>:
    7d0e:	ef 92       	push	r14
    7d10:	ff 92       	push	r15
    7d12:	0f 93       	push	r16
    7d14:	1f 93       	push	r17
    7d16:	cf 93       	push	r28
    7d18:	df 93       	push	r29
    7d1a:	7c 01       	movw	r14, r24
    7d1c:	8b 01       	movw	r16, r22
    7d1e:	db 01       	movw	r26, r22
    7d20:	13 96       	adiw	r26, 0x03	; 3
    7d22:	8c 91       	ld	r24, X
    7d24:	81 ff       	sbrs	r24, 1
    7d26:	14 c0       	rjmp	.+40     	; 0x7d50 <fputs+0x42>
    7d28:	c0 e0       	ldi	r28, 0x00	; 0
    7d2a:	d0 e0       	ldi	r29, 0x00	; 0
    7d2c:	0b c0       	rjmp	.+22     	; 0x7d44 <fputs+0x36>
    7d2e:	d8 01       	movw	r26, r16
    7d30:	18 96       	adiw	r26, 0x08	; 8
    7d32:	ed 91       	ld	r30, X+
    7d34:	fc 91       	ld	r31, X
    7d36:	19 97       	sbiw	r26, 0x09	; 9
    7d38:	b8 01       	movw	r22, r16
    7d3a:	19 95       	eicall
    7d3c:	89 2b       	or	r24, r25
    7d3e:	11 f0       	breq	.+4      	; 0x7d44 <fputs+0x36>
    7d40:	cf ef       	ldi	r28, 0xFF	; 255
    7d42:	df ef       	ldi	r29, 0xFF	; 255
    7d44:	f7 01       	movw	r30, r14
    7d46:	81 91       	ld	r24, Z+
    7d48:	7f 01       	movw	r14, r30
    7d4a:	81 11       	cpse	r24, r1
    7d4c:	f0 cf       	rjmp	.-32     	; 0x7d2e <fputs+0x20>
    7d4e:	02 c0       	rjmp	.+4      	; 0x7d54 <fputs+0x46>
    7d50:	cf ef       	ldi	r28, 0xFF	; 255
    7d52:	df ef       	ldi	r29, 0xFF	; 255
    7d54:	ce 01       	movw	r24, r28
    7d56:	df 91       	pop	r29
    7d58:	cf 91       	pop	r28
    7d5a:	1f 91       	pop	r17
    7d5c:	0f 91       	pop	r16
    7d5e:	ff 90       	pop	r15
    7d60:	ef 90       	pop	r14
    7d62:	08 95       	ret

00007d64 <printf>:
    7d64:	cf 93       	push	r28
    7d66:	df 93       	push	r29
    7d68:	1f 92       	push	r1
    7d6a:	1f 92       	push	r1
    7d6c:	cd b7       	in	r28, 0x3d	; 61
    7d6e:	de b7       	in	r29, 0x3e	; 62
    7d70:	fe 01       	movw	r30, r28
    7d72:	38 96       	adiw	r30, 0x08	; 8
    7d74:	61 91       	ld	r22, Z+
    7d76:	71 91       	ld	r23, Z+
    7d78:	e9 83       	std	Y+1, r30	; 0x01
    7d7a:	fa 83       	std	Y+2, r31	; 0x02
    7d7c:	af 01       	movw	r20, r30
    7d7e:	80 91 85 2f 	lds	r24, 0x2F85
    7d82:	90 91 86 2f 	lds	r25, 0x2F86
    7d86:	0e 94 ff 3e 	call	0x7dfe	; 0x7dfe <vfprintf>
    7d8a:	0f 90       	pop	r0
    7d8c:	0f 90       	pop	r0
    7d8e:	df 91       	pop	r29
    7d90:	cf 91       	pop	r28
    7d92:	08 95       	ret

00007d94 <putchar>:
    7d94:	60 91 85 2f 	lds	r22, 0x2F85
    7d98:	70 91 86 2f 	lds	r23, 0x2F86
    7d9c:	0c 94 5b 3e 	jmp	0x7cb6	; 0x7cb6 <fputc>

00007da0 <puts>:
    7da0:	0f 93       	push	r16
    7da2:	1f 93       	push	r17
    7da4:	cf 93       	push	r28
    7da6:	df 93       	push	r29
    7da8:	8c 01       	movw	r16, r24
    7daa:	e0 91 85 2f 	lds	r30, 0x2F85
    7dae:	f0 91 86 2f 	lds	r31, 0x2F86
    7db2:	83 81       	ldd	r24, Z+3	; 0x03
    7db4:	81 ff       	sbrs	r24, 1
    7db6:	1b c0       	rjmp	.+54     	; 0x7dee <puts+0x4e>
    7db8:	c0 e0       	ldi	r28, 0x00	; 0
    7dba:	d0 e0       	ldi	r29, 0x00	; 0
    7dbc:	05 c0       	rjmp	.+10     	; 0x7dc8 <puts+0x28>
    7dbe:	19 95       	eicall
    7dc0:	89 2b       	or	r24, r25
    7dc2:	11 f0       	breq	.+4      	; 0x7dc8 <puts+0x28>
    7dc4:	cf ef       	ldi	r28, 0xFF	; 255
    7dc6:	df ef       	ldi	r29, 0xFF	; 255
    7dc8:	f8 01       	movw	r30, r16
    7dca:	81 91       	ld	r24, Z+
    7dcc:	8f 01       	movw	r16, r30
    7dce:	60 91 85 2f 	lds	r22, 0x2F85
    7dd2:	70 91 86 2f 	lds	r23, 0x2F86
    7dd6:	db 01       	movw	r26, r22
    7dd8:	18 96       	adiw	r26, 0x08	; 8
    7dda:	ed 91       	ld	r30, X+
    7ddc:	fc 91       	ld	r31, X
    7dde:	19 97       	sbiw	r26, 0x09	; 9
    7de0:	81 11       	cpse	r24, r1
    7de2:	ed cf       	rjmp	.-38     	; 0x7dbe <puts+0x1e>
    7de4:	8a e0       	ldi	r24, 0x0A	; 10
    7de6:	19 95       	eicall
    7de8:	89 2b       	or	r24, r25
    7dea:	09 f4       	brne	.+2      	; 0x7dee <puts+0x4e>
    7dec:	02 c0       	rjmp	.+4      	; 0x7df2 <puts+0x52>
    7dee:	cf ef       	ldi	r28, 0xFF	; 255
    7df0:	df ef       	ldi	r29, 0xFF	; 255
    7df2:	ce 01       	movw	r24, r28
    7df4:	df 91       	pop	r29
    7df6:	cf 91       	pop	r28
    7df8:	1f 91       	pop	r17
    7dfa:	0f 91       	pop	r16
    7dfc:	08 95       	ret

00007dfe <vfprintf>:
    7dfe:	2f 92       	push	r2
    7e00:	3f 92       	push	r3
    7e02:	4f 92       	push	r4
    7e04:	5f 92       	push	r5
    7e06:	6f 92       	push	r6
    7e08:	7f 92       	push	r7
    7e0a:	8f 92       	push	r8
    7e0c:	9f 92       	push	r9
    7e0e:	af 92       	push	r10
    7e10:	bf 92       	push	r11
    7e12:	cf 92       	push	r12
    7e14:	df 92       	push	r13
    7e16:	ef 92       	push	r14
    7e18:	ff 92       	push	r15
    7e1a:	0f 93       	push	r16
    7e1c:	1f 93       	push	r17
    7e1e:	cf 93       	push	r28
    7e20:	df 93       	push	r29
    7e22:	cd b7       	in	r28, 0x3d	; 61
    7e24:	de b7       	in	r29, 0x3e	; 62
    7e26:	2c 97       	sbiw	r28, 0x0c	; 12
    7e28:	cd bf       	out	0x3d, r28	; 61
    7e2a:	de bf       	out	0x3e, r29	; 62
    7e2c:	7c 01       	movw	r14, r24
    7e2e:	6b 01       	movw	r12, r22
    7e30:	8a 01       	movw	r16, r20
    7e32:	fc 01       	movw	r30, r24
    7e34:	16 82       	std	Z+6, r1	; 0x06
    7e36:	17 82       	std	Z+7, r1	; 0x07
    7e38:	83 81       	ldd	r24, Z+3	; 0x03
    7e3a:	81 ff       	sbrs	r24, 1
    7e3c:	c7 c1       	rjmp	.+910    	; 0x81cc <vfprintf+0x3ce>
    7e3e:	88 24       	eor	r8, r8
    7e40:	83 94       	inc	r8
    7e42:	91 2c       	mov	r9, r1
    7e44:	8c 0e       	add	r8, r28
    7e46:	9d 1e       	adc	r9, r29
    7e48:	f7 01       	movw	r30, r14
    7e4a:	93 81       	ldd	r25, Z+3	; 0x03
    7e4c:	f6 01       	movw	r30, r12
    7e4e:	93 fd       	sbrc	r25, 3
    7e50:	85 91       	lpm	r24, Z+
    7e52:	93 ff       	sbrs	r25, 3
    7e54:	81 91       	ld	r24, Z+
    7e56:	6f 01       	movw	r12, r30
    7e58:	88 23       	and	r24, r24
    7e5a:	09 f4       	brne	.+2      	; 0x7e5e <vfprintf+0x60>
    7e5c:	b3 c1       	rjmp	.+870    	; 0x81c4 <vfprintf+0x3c6>
    7e5e:	85 32       	cpi	r24, 0x25	; 37
    7e60:	39 f4       	brne	.+14     	; 0x7e70 <vfprintf+0x72>
    7e62:	93 fd       	sbrc	r25, 3
    7e64:	85 91       	lpm	r24, Z+
    7e66:	93 ff       	sbrs	r25, 3
    7e68:	81 91       	ld	r24, Z+
    7e6a:	6f 01       	movw	r12, r30
    7e6c:	85 32       	cpi	r24, 0x25	; 37
    7e6e:	29 f4       	brne	.+10     	; 0x7e7a <vfprintf+0x7c>
    7e70:	b7 01       	movw	r22, r14
    7e72:	90 e0       	ldi	r25, 0x00	; 0
    7e74:	0e 94 5b 3e 	call	0x7cb6	; 0x7cb6 <fputc>
    7e78:	e7 cf       	rjmp	.-50     	; 0x7e48 <vfprintf+0x4a>
    7e7a:	71 2c       	mov	r7, r1
    7e7c:	31 2c       	mov	r3, r1
    7e7e:	20 e0       	ldi	r18, 0x00	; 0
    7e80:	20 32       	cpi	r18, 0x20	; 32
    7e82:	a8 f4       	brcc	.+42     	; 0x7eae <vfprintf+0xb0>
    7e84:	8b 32       	cpi	r24, 0x2B	; 43
    7e86:	61 f0       	breq	.+24     	; 0x7ea0 <vfprintf+0xa2>
    7e88:	28 f4       	brcc	.+10     	; 0x7e94 <vfprintf+0x96>
    7e8a:	80 32       	cpi	r24, 0x20	; 32
    7e8c:	51 f0       	breq	.+20     	; 0x7ea2 <vfprintf+0xa4>
    7e8e:	83 32       	cpi	r24, 0x23	; 35
    7e90:	71 f4       	brne	.+28     	; 0x7eae <vfprintf+0xb0>
    7e92:	0b c0       	rjmp	.+22     	; 0x7eaa <vfprintf+0xac>
    7e94:	8d 32       	cpi	r24, 0x2D	; 45
    7e96:	39 f0       	breq	.+14     	; 0x7ea6 <vfprintf+0xa8>
    7e98:	80 33       	cpi	r24, 0x30	; 48
    7e9a:	49 f4       	brne	.+18     	; 0x7eae <vfprintf+0xb0>
    7e9c:	21 60       	ori	r18, 0x01	; 1
    7e9e:	28 c0       	rjmp	.+80     	; 0x7ef0 <vfprintf+0xf2>
    7ea0:	22 60       	ori	r18, 0x02	; 2
    7ea2:	24 60       	ori	r18, 0x04	; 4
    7ea4:	25 c0       	rjmp	.+74     	; 0x7ef0 <vfprintf+0xf2>
    7ea6:	28 60       	ori	r18, 0x08	; 8
    7ea8:	23 c0       	rjmp	.+70     	; 0x7ef0 <vfprintf+0xf2>
    7eaa:	20 61       	ori	r18, 0x10	; 16
    7eac:	21 c0       	rjmp	.+66     	; 0x7ef0 <vfprintf+0xf2>
    7eae:	27 fd       	sbrc	r18, 7
    7eb0:	27 c0       	rjmp	.+78     	; 0x7f00 <vfprintf+0x102>
    7eb2:	38 2f       	mov	r19, r24
    7eb4:	30 53       	subi	r19, 0x30	; 48
    7eb6:	3a 30       	cpi	r19, 0x0A	; 10
    7eb8:	78 f4       	brcc	.+30     	; 0x7ed8 <vfprintf+0xda>
    7eba:	26 ff       	sbrs	r18, 6
    7ebc:	06 c0       	rjmp	.+12     	; 0x7eca <vfprintf+0xcc>
    7ebe:	fa e0       	ldi	r31, 0x0A	; 10
    7ec0:	7f 9e       	mul	r7, r31
    7ec2:	30 0d       	add	r19, r0
    7ec4:	11 24       	eor	r1, r1
    7ec6:	73 2e       	mov	r7, r19
    7ec8:	13 c0       	rjmp	.+38     	; 0x7ef0 <vfprintf+0xf2>
    7eca:	8a e0       	ldi	r24, 0x0A	; 10
    7ecc:	38 9e       	mul	r3, r24
    7ece:	30 0d       	add	r19, r0
    7ed0:	11 24       	eor	r1, r1
    7ed2:	33 2e       	mov	r3, r19
    7ed4:	20 62       	ori	r18, 0x20	; 32
    7ed6:	0c c0       	rjmp	.+24     	; 0x7ef0 <vfprintf+0xf2>
    7ed8:	8e 32       	cpi	r24, 0x2E	; 46
    7eda:	21 f4       	brne	.+8      	; 0x7ee4 <vfprintf+0xe6>
    7edc:	26 fd       	sbrc	r18, 6
    7ede:	72 c1       	rjmp	.+740    	; 0x81c4 <vfprintf+0x3c6>
    7ee0:	20 64       	ori	r18, 0x40	; 64
    7ee2:	06 c0       	rjmp	.+12     	; 0x7ef0 <vfprintf+0xf2>
    7ee4:	8c 36       	cpi	r24, 0x6C	; 108
    7ee6:	11 f4       	brne	.+4      	; 0x7eec <vfprintf+0xee>
    7ee8:	20 68       	ori	r18, 0x80	; 128
    7eea:	02 c0       	rjmp	.+4      	; 0x7ef0 <vfprintf+0xf2>
    7eec:	88 36       	cpi	r24, 0x68	; 104
    7eee:	41 f4       	brne	.+16     	; 0x7f00 <vfprintf+0x102>
    7ef0:	f6 01       	movw	r30, r12
    7ef2:	93 fd       	sbrc	r25, 3
    7ef4:	85 91       	lpm	r24, Z+
    7ef6:	93 ff       	sbrs	r25, 3
    7ef8:	81 91       	ld	r24, Z+
    7efa:	6f 01       	movw	r12, r30
    7efc:	81 11       	cpse	r24, r1
    7efe:	c0 cf       	rjmp	.-128    	; 0x7e80 <vfprintf+0x82>
    7f00:	98 2f       	mov	r25, r24
    7f02:	95 54       	subi	r25, 0x45	; 69
    7f04:	93 30       	cpi	r25, 0x03	; 3
    7f06:	18 f0       	brcs	.+6      	; 0x7f0e <vfprintf+0x110>
    7f08:	90 52       	subi	r25, 0x20	; 32
    7f0a:	93 30       	cpi	r25, 0x03	; 3
    7f0c:	28 f4       	brcc	.+10     	; 0x7f18 <vfprintf+0x11a>
    7f0e:	0c 5f       	subi	r16, 0xFC	; 252
    7f10:	1f 4f       	sbci	r17, 0xFF	; 255
    7f12:	ff e3       	ldi	r31, 0x3F	; 63
    7f14:	f9 83       	std	Y+1, r31	; 0x01
    7f16:	0d c0       	rjmp	.+26     	; 0x7f32 <vfprintf+0x134>
    7f18:	83 36       	cpi	r24, 0x63	; 99
    7f1a:	31 f0       	breq	.+12     	; 0x7f28 <vfprintf+0x12a>
    7f1c:	83 37       	cpi	r24, 0x73	; 115
    7f1e:	71 f0       	breq	.+28     	; 0x7f3c <vfprintf+0x13e>
    7f20:	83 35       	cpi	r24, 0x53	; 83
    7f22:	09 f0       	breq	.+2      	; 0x7f26 <vfprintf+0x128>
    7f24:	5e c0       	rjmp	.+188    	; 0x7fe2 <vfprintf+0x1e4>
    7f26:	23 c0       	rjmp	.+70     	; 0x7f6e <vfprintf+0x170>
    7f28:	f8 01       	movw	r30, r16
    7f2a:	80 81       	ld	r24, Z
    7f2c:	89 83       	std	Y+1, r24	; 0x01
    7f2e:	0e 5f       	subi	r16, 0xFE	; 254
    7f30:	1f 4f       	sbci	r17, 0xFF	; 255
    7f32:	66 24       	eor	r6, r6
    7f34:	63 94       	inc	r6
    7f36:	71 2c       	mov	r7, r1
    7f38:	54 01       	movw	r10, r8
    7f3a:	15 c0       	rjmp	.+42     	; 0x7f66 <vfprintf+0x168>
    7f3c:	28 01       	movw	r4, r16
    7f3e:	f2 e0       	ldi	r31, 0x02	; 2
    7f40:	4f 0e       	add	r4, r31
    7f42:	51 1c       	adc	r5, r1
    7f44:	f8 01       	movw	r30, r16
    7f46:	a0 80       	ld	r10, Z
    7f48:	b1 80       	ldd	r11, Z+1	; 0x01
    7f4a:	26 ff       	sbrs	r18, 6
    7f4c:	03 c0       	rjmp	.+6      	; 0x7f54 <vfprintf+0x156>
    7f4e:	67 2d       	mov	r22, r7
    7f50:	70 e0       	ldi	r23, 0x00	; 0
    7f52:	02 c0       	rjmp	.+4      	; 0x7f58 <vfprintf+0x15a>
    7f54:	6f ef       	ldi	r22, 0xFF	; 255
    7f56:	7f ef       	ldi	r23, 0xFF	; 255
    7f58:	c5 01       	movw	r24, r10
    7f5a:	2c 87       	std	Y+12, r18	; 0x0c
    7f5c:	0e 94 0a 41 	call	0x8214	; 0x8214 <strnlen>
    7f60:	3c 01       	movw	r6, r24
    7f62:	82 01       	movw	r16, r4
    7f64:	2c 85       	ldd	r18, Y+12	; 0x0c
    7f66:	6f e7       	ldi	r22, 0x7F	; 127
    7f68:	26 2e       	mov	r2, r22
    7f6a:	22 22       	and	r2, r18
    7f6c:	18 c0       	rjmp	.+48     	; 0x7f9e <vfprintf+0x1a0>
    7f6e:	28 01       	movw	r4, r16
    7f70:	f2 e0       	ldi	r31, 0x02	; 2
    7f72:	4f 0e       	add	r4, r31
    7f74:	51 1c       	adc	r5, r1
    7f76:	f8 01       	movw	r30, r16
    7f78:	a0 80       	ld	r10, Z
    7f7a:	b1 80       	ldd	r11, Z+1	; 0x01
    7f7c:	26 ff       	sbrs	r18, 6
    7f7e:	03 c0       	rjmp	.+6      	; 0x7f86 <vfprintf+0x188>
    7f80:	67 2d       	mov	r22, r7
    7f82:	70 e0       	ldi	r23, 0x00	; 0
    7f84:	02 c0       	rjmp	.+4      	; 0x7f8a <vfprintf+0x18c>
    7f86:	6f ef       	ldi	r22, 0xFF	; 255
    7f88:	7f ef       	ldi	r23, 0xFF	; 255
    7f8a:	c5 01       	movw	r24, r10
    7f8c:	2c 87       	std	Y+12, r18	; 0x0c
    7f8e:	0e 94 ff 40 	call	0x81fe	; 0x81fe <strnlen_P>
    7f92:	3c 01       	movw	r6, r24
    7f94:	2c 85       	ldd	r18, Y+12	; 0x0c
    7f96:	50 e8       	ldi	r21, 0x80	; 128
    7f98:	25 2e       	mov	r2, r21
    7f9a:	22 2a       	or	r2, r18
    7f9c:	82 01       	movw	r16, r4
    7f9e:	23 fc       	sbrc	r2, 3
    7fa0:	1c c0       	rjmp	.+56     	; 0x7fda <vfprintf+0x1dc>
    7fa2:	06 c0       	rjmp	.+12     	; 0x7fb0 <vfprintf+0x1b2>
    7fa4:	b7 01       	movw	r22, r14
    7fa6:	80 e2       	ldi	r24, 0x20	; 32
    7fa8:	90 e0       	ldi	r25, 0x00	; 0
    7faa:	0e 94 5b 3e 	call	0x7cb6	; 0x7cb6 <fputc>
    7fae:	3a 94       	dec	r3
    7fb0:	83 2d       	mov	r24, r3
    7fb2:	90 e0       	ldi	r25, 0x00	; 0
    7fb4:	68 16       	cp	r6, r24
    7fb6:	79 06       	cpc	r7, r25
    7fb8:	a8 f3       	brcs	.-22     	; 0x7fa4 <vfprintf+0x1a6>
    7fba:	0f c0       	rjmp	.+30     	; 0x7fda <vfprintf+0x1dc>
    7fbc:	f5 01       	movw	r30, r10
    7fbe:	27 fc       	sbrc	r2, 7
    7fc0:	85 91       	lpm	r24, Z+
    7fc2:	27 fe       	sbrs	r2, 7
    7fc4:	81 91       	ld	r24, Z+
    7fc6:	5f 01       	movw	r10, r30
    7fc8:	b7 01       	movw	r22, r14
    7fca:	90 e0       	ldi	r25, 0x00	; 0
    7fcc:	0e 94 5b 3e 	call	0x7cb6	; 0x7cb6 <fputc>
    7fd0:	31 10       	cpse	r3, r1
    7fd2:	3a 94       	dec	r3
    7fd4:	f1 e0       	ldi	r31, 0x01	; 1
    7fd6:	6f 1a       	sub	r6, r31
    7fd8:	71 08       	sbc	r7, r1
    7fda:	61 14       	cp	r6, r1
    7fdc:	71 04       	cpc	r7, r1
    7fde:	71 f7       	brne	.-36     	; 0x7fbc <vfprintf+0x1be>
    7fe0:	ee c0       	rjmp	.+476    	; 0x81be <vfprintf+0x3c0>
    7fe2:	84 36       	cpi	r24, 0x64	; 100
    7fe4:	11 f0       	breq	.+4      	; 0x7fea <vfprintf+0x1ec>
    7fe6:	89 36       	cpi	r24, 0x69	; 105
    7fe8:	41 f5       	brne	.+80     	; 0x803a <vfprintf+0x23c>
    7fea:	f8 01       	movw	r30, r16
    7fec:	27 ff       	sbrs	r18, 7
    7fee:	07 c0       	rjmp	.+14     	; 0x7ffe <vfprintf+0x200>
    7ff0:	60 81       	ld	r22, Z
    7ff2:	71 81       	ldd	r23, Z+1	; 0x01
    7ff4:	82 81       	ldd	r24, Z+2	; 0x02
    7ff6:	93 81       	ldd	r25, Z+3	; 0x03
    7ff8:	0c 5f       	subi	r16, 0xFC	; 252
    7ffa:	1f 4f       	sbci	r17, 0xFF	; 255
    7ffc:	08 c0       	rjmp	.+16     	; 0x800e <vfprintf+0x210>
    7ffe:	60 81       	ld	r22, Z
    8000:	71 81       	ldd	r23, Z+1	; 0x01
    8002:	88 27       	eor	r24, r24
    8004:	77 fd       	sbrc	r23, 7
    8006:	80 95       	com	r24
    8008:	98 2f       	mov	r25, r24
    800a:	0e 5f       	subi	r16, 0xFE	; 254
    800c:	1f 4f       	sbci	r17, 0xFF	; 255
    800e:	4f e6       	ldi	r20, 0x6F	; 111
    8010:	64 2e       	mov	r6, r20
    8012:	62 22       	and	r6, r18
    8014:	97 ff       	sbrs	r25, 7
    8016:	09 c0       	rjmp	.+18     	; 0x802a <vfprintf+0x22c>
    8018:	90 95       	com	r25
    801a:	80 95       	com	r24
    801c:	70 95       	com	r23
    801e:	61 95       	neg	r22
    8020:	7f 4f       	sbci	r23, 0xFF	; 255
    8022:	8f 4f       	sbci	r24, 0xFF	; 255
    8024:	9f 4f       	sbci	r25, 0xFF	; 255
    8026:	f0 e8       	ldi	r31, 0x80	; 128
    8028:	6f 2a       	or	r6, r31
    802a:	2a e0       	ldi	r18, 0x0A	; 10
    802c:	30 e0       	ldi	r19, 0x00	; 0
    802e:	a4 01       	movw	r20, r8
    8030:	0e 94 15 41 	call	0x822a	; 0x822a <__ultoa_invert>
    8034:	a8 2e       	mov	r10, r24
    8036:	a8 18       	sub	r10, r8
    8038:	44 c0       	rjmp	.+136    	; 0x80c2 <vfprintf+0x2c4>
    803a:	85 37       	cpi	r24, 0x75	; 117
    803c:	31 f4       	brne	.+12     	; 0x804a <vfprintf+0x24c>
    803e:	3f ee       	ldi	r19, 0xEF	; 239
    8040:	b3 2e       	mov	r11, r19
    8042:	b2 22       	and	r11, r18
    8044:	2a e0       	ldi	r18, 0x0A	; 10
    8046:	30 e0       	ldi	r19, 0x00	; 0
    8048:	24 c0       	rjmp	.+72     	; 0x8092 <vfprintf+0x294>
    804a:	99 ef       	ldi	r25, 0xF9	; 249
    804c:	b9 2e       	mov	r11, r25
    804e:	b2 22       	and	r11, r18
    8050:	8f 36       	cpi	r24, 0x6F	; 111
    8052:	b9 f0       	breq	.+46     	; 0x8082 <vfprintf+0x284>
    8054:	20 f4       	brcc	.+8      	; 0x805e <vfprintf+0x260>
    8056:	88 35       	cpi	r24, 0x58	; 88
    8058:	09 f0       	breq	.+2      	; 0x805c <vfprintf+0x25e>
    805a:	b4 c0       	rjmp	.+360    	; 0x81c4 <vfprintf+0x3c6>
    805c:	0d c0       	rjmp	.+26     	; 0x8078 <vfprintf+0x27a>
    805e:	80 37       	cpi	r24, 0x70	; 112
    8060:	21 f0       	breq	.+8      	; 0x806a <vfprintf+0x26c>
    8062:	88 37       	cpi	r24, 0x78	; 120
    8064:	09 f0       	breq	.+2      	; 0x8068 <vfprintf+0x26a>
    8066:	ae c0       	rjmp	.+348    	; 0x81c4 <vfprintf+0x3c6>
    8068:	02 c0       	rjmp	.+4      	; 0x806e <vfprintf+0x270>
    806a:	20 e1       	ldi	r18, 0x10	; 16
    806c:	b2 2a       	or	r11, r18
    806e:	b4 fe       	sbrs	r11, 4
    8070:	0b c0       	rjmp	.+22     	; 0x8088 <vfprintf+0x28a>
    8072:	84 e0       	ldi	r24, 0x04	; 4
    8074:	b8 2a       	or	r11, r24
    8076:	08 c0       	rjmp	.+16     	; 0x8088 <vfprintf+0x28a>
    8078:	24 ff       	sbrs	r18, 4
    807a:	09 c0       	rjmp	.+18     	; 0x808e <vfprintf+0x290>
    807c:	e6 e0       	ldi	r30, 0x06	; 6
    807e:	be 2a       	or	r11, r30
    8080:	06 c0       	rjmp	.+12     	; 0x808e <vfprintf+0x290>
    8082:	28 e0       	ldi	r18, 0x08	; 8
    8084:	30 e0       	ldi	r19, 0x00	; 0
    8086:	05 c0       	rjmp	.+10     	; 0x8092 <vfprintf+0x294>
    8088:	20 e1       	ldi	r18, 0x10	; 16
    808a:	30 e0       	ldi	r19, 0x00	; 0
    808c:	02 c0       	rjmp	.+4      	; 0x8092 <vfprintf+0x294>
    808e:	20 e1       	ldi	r18, 0x10	; 16
    8090:	32 e0       	ldi	r19, 0x02	; 2
    8092:	f8 01       	movw	r30, r16
    8094:	b7 fe       	sbrs	r11, 7
    8096:	07 c0       	rjmp	.+14     	; 0x80a6 <vfprintf+0x2a8>
    8098:	60 81       	ld	r22, Z
    809a:	71 81       	ldd	r23, Z+1	; 0x01
    809c:	82 81       	ldd	r24, Z+2	; 0x02
    809e:	93 81       	ldd	r25, Z+3	; 0x03
    80a0:	0c 5f       	subi	r16, 0xFC	; 252
    80a2:	1f 4f       	sbci	r17, 0xFF	; 255
    80a4:	06 c0       	rjmp	.+12     	; 0x80b2 <vfprintf+0x2b4>
    80a6:	60 81       	ld	r22, Z
    80a8:	71 81       	ldd	r23, Z+1	; 0x01
    80aa:	80 e0       	ldi	r24, 0x00	; 0
    80ac:	90 e0       	ldi	r25, 0x00	; 0
    80ae:	0e 5f       	subi	r16, 0xFE	; 254
    80b0:	1f 4f       	sbci	r17, 0xFF	; 255
    80b2:	a4 01       	movw	r20, r8
    80b4:	0e 94 15 41 	call	0x822a	; 0x822a <__ultoa_invert>
    80b8:	a8 2e       	mov	r10, r24
    80ba:	a8 18       	sub	r10, r8
    80bc:	8f e7       	ldi	r24, 0x7F	; 127
    80be:	68 2e       	mov	r6, r24
    80c0:	6b 20       	and	r6, r11
    80c2:	66 fe       	sbrs	r6, 6
    80c4:	0b c0       	rjmp	.+22     	; 0x80dc <vfprintf+0x2de>
    80c6:	36 2d       	mov	r19, r6
    80c8:	3e 7f       	andi	r19, 0xFE	; 254
    80ca:	a7 14       	cp	r10, r7
    80cc:	50 f4       	brcc	.+20     	; 0x80e2 <vfprintf+0x2e4>
    80ce:	64 fe       	sbrs	r6, 4
    80d0:	0a c0       	rjmp	.+20     	; 0x80e6 <vfprintf+0x2e8>
    80d2:	62 fc       	sbrc	r6, 2
    80d4:	08 c0       	rjmp	.+16     	; 0x80e6 <vfprintf+0x2e8>
    80d6:	36 2d       	mov	r19, r6
    80d8:	3e 7e       	andi	r19, 0xEE	; 238
    80da:	05 c0       	rjmp	.+10     	; 0x80e6 <vfprintf+0x2e8>
    80dc:	ba 2c       	mov	r11, r10
    80de:	36 2d       	mov	r19, r6
    80e0:	03 c0       	rjmp	.+6      	; 0x80e8 <vfprintf+0x2ea>
    80e2:	ba 2c       	mov	r11, r10
    80e4:	01 c0       	rjmp	.+2      	; 0x80e8 <vfprintf+0x2ea>
    80e6:	b7 2c       	mov	r11, r7
    80e8:	34 ff       	sbrs	r19, 4
    80ea:	0d c0       	rjmp	.+26     	; 0x8106 <vfprintf+0x308>
    80ec:	fe 01       	movw	r30, r28
    80ee:	ea 0d       	add	r30, r10
    80f0:	f1 1d       	adc	r31, r1
    80f2:	80 81       	ld	r24, Z
    80f4:	80 33       	cpi	r24, 0x30	; 48
    80f6:	11 f4       	brne	.+4      	; 0x80fc <vfprintf+0x2fe>
    80f8:	39 7e       	andi	r19, 0xE9	; 233
    80fa:	09 c0       	rjmp	.+18     	; 0x810e <vfprintf+0x310>
    80fc:	32 ff       	sbrs	r19, 2
    80fe:	06 c0       	rjmp	.+12     	; 0x810c <vfprintf+0x30e>
    8100:	b3 94       	inc	r11
    8102:	b3 94       	inc	r11
    8104:	04 c0       	rjmp	.+8      	; 0x810e <vfprintf+0x310>
    8106:	83 2f       	mov	r24, r19
    8108:	86 78       	andi	r24, 0x86	; 134
    810a:	09 f0       	breq	.+2      	; 0x810e <vfprintf+0x310>
    810c:	b3 94       	inc	r11
    810e:	33 fd       	sbrc	r19, 3
    8110:	14 c0       	rjmp	.+40     	; 0x813a <vfprintf+0x33c>
    8112:	30 ff       	sbrs	r19, 0
    8114:	0f c0       	rjmp	.+30     	; 0x8134 <vfprintf+0x336>
    8116:	7a 2c       	mov	r7, r10
    8118:	b3 14       	cp	r11, r3
    811a:	60 f4       	brcc	.+24     	; 0x8134 <vfprintf+0x336>
    811c:	73 0c       	add	r7, r3
    811e:	7b 18       	sub	r7, r11
    8120:	b3 2c       	mov	r11, r3
    8122:	08 c0       	rjmp	.+16     	; 0x8134 <vfprintf+0x336>
    8124:	b7 01       	movw	r22, r14
    8126:	80 e2       	ldi	r24, 0x20	; 32
    8128:	90 e0       	ldi	r25, 0x00	; 0
    812a:	3c 87       	std	Y+12, r19	; 0x0c
    812c:	0e 94 5b 3e 	call	0x7cb6	; 0x7cb6 <fputc>
    8130:	b3 94       	inc	r11
    8132:	3c 85       	ldd	r19, Y+12	; 0x0c
    8134:	b3 14       	cp	r11, r3
    8136:	b0 f3       	brcs	.-20     	; 0x8124 <vfprintf+0x326>
    8138:	04 c0       	rjmp	.+8      	; 0x8142 <vfprintf+0x344>
    813a:	b3 14       	cp	r11, r3
    813c:	10 f4       	brcc	.+4      	; 0x8142 <vfprintf+0x344>
    813e:	3b 18       	sub	r3, r11
    8140:	01 c0       	rjmp	.+2      	; 0x8144 <vfprintf+0x346>
    8142:	31 2c       	mov	r3, r1
    8144:	34 ff       	sbrs	r19, 4
    8146:	12 c0       	rjmp	.+36     	; 0x816c <vfprintf+0x36e>
    8148:	b7 01       	movw	r22, r14
    814a:	80 e3       	ldi	r24, 0x30	; 48
    814c:	90 e0       	ldi	r25, 0x00	; 0
    814e:	3c 87       	std	Y+12, r19	; 0x0c
    8150:	0e 94 5b 3e 	call	0x7cb6	; 0x7cb6 <fputc>
    8154:	3c 85       	ldd	r19, Y+12	; 0x0c
    8156:	32 ff       	sbrs	r19, 2
    8158:	1e c0       	rjmp	.+60     	; 0x8196 <vfprintf+0x398>
    815a:	31 ff       	sbrs	r19, 1
    815c:	03 c0       	rjmp	.+6      	; 0x8164 <vfprintf+0x366>
    815e:	88 e5       	ldi	r24, 0x58	; 88
    8160:	90 e0       	ldi	r25, 0x00	; 0
    8162:	02 c0       	rjmp	.+4      	; 0x8168 <vfprintf+0x36a>
    8164:	88 e7       	ldi	r24, 0x78	; 120
    8166:	90 e0       	ldi	r25, 0x00	; 0
    8168:	b7 01       	movw	r22, r14
    816a:	0c c0       	rjmp	.+24     	; 0x8184 <vfprintf+0x386>
    816c:	83 2f       	mov	r24, r19
    816e:	86 78       	andi	r24, 0x86	; 134
    8170:	91 f0       	breq	.+36     	; 0x8196 <vfprintf+0x398>
    8172:	31 fd       	sbrc	r19, 1
    8174:	02 c0       	rjmp	.+4      	; 0x817a <vfprintf+0x37c>
    8176:	80 e2       	ldi	r24, 0x20	; 32
    8178:	01 c0       	rjmp	.+2      	; 0x817c <vfprintf+0x37e>
    817a:	8b e2       	ldi	r24, 0x2B	; 43
    817c:	37 fd       	sbrc	r19, 7
    817e:	8d e2       	ldi	r24, 0x2D	; 45
    8180:	b7 01       	movw	r22, r14
    8182:	90 e0       	ldi	r25, 0x00	; 0
    8184:	0e 94 5b 3e 	call	0x7cb6	; 0x7cb6 <fputc>
    8188:	06 c0       	rjmp	.+12     	; 0x8196 <vfprintf+0x398>
    818a:	b7 01       	movw	r22, r14
    818c:	80 e3       	ldi	r24, 0x30	; 48
    818e:	90 e0       	ldi	r25, 0x00	; 0
    8190:	0e 94 5b 3e 	call	0x7cb6	; 0x7cb6 <fputc>
    8194:	7a 94       	dec	r7
    8196:	a7 14       	cp	r10, r7
    8198:	c0 f3       	brcs	.-16     	; 0x818a <vfprintf+0x38c>
    819a:	aa 94       	dec	r10
    819c:	f4 01       	movw	r30, r8
    819e:	ea 0d       	add	r30, r10
    81a0:	f1 1d       	adc	r31, r1
    81a2:	b7 01       	movw	r22, r14
    81a4:	80 81       	ld	r24, Z
    81a6:	90 e0       	ldi	r25, 0x00	; 0
    81a8:	0e 94 5b 3e 	call	0x7cb6	; 0x7cb6 <fputc>
    81ac:	a1 10       	cpse	r10, r1
    81ae:	f5 cf       	rjmp	.-22     	; 0x819a <vfprintf+0x39c>
    81b0:	06 c0       	rjmp	.+12     	; 0x81be <vfprintf+0x3c0>
    81b2:	b7 01       	movw	r22, r14
    81b4:	80 e2       	ldi	r24, 0x20	; 32
    81b6:	90 e0       	ldi	r25, 0x00	; 0
    81b8:	0e 94 5b 3e 	call	0x7cb6	; 0x7cb6 <fputc>
    81bc:	3a 94       	dec	r3
    81be:	31 10       	cpse	r3, r1
    81c0:	f8 cf       	rjmp	.-16     	; 0x81b2 <vfprintf+0x3b4>
    81c2:	42 ce       	rjmp	.-892    	; 0x7e48 <vfprintf+0x4a>
    81c4:	f7 01       	movw	r30, r14
    81c6:	26 81       	ldd	r18, Z+6	; 0x06
    81c8:	37 81       	ldd	r19, Z+7	; 0x07
    81ca:	02 c0       	rjmp	.+4      	; 0x81d0 <vfprintf+0x3d2>
    81cc:	2f ef       	ldi	r18, 0xFF	; 255
    81ce:	3f ef       	ldi	r19, 0xFF	; 255
    81d0:	c9 01       	movw	r24, r18
    81d2:	2c 96       	adiw	r28, 0x0c	; 12
    81d4:	cd bf       	out	0x3d, r28	; 61
    81d6:	de bf       	out	0x3e, r29	; 62
    81d8:	df 91       	pop	r29
    81da:	cf 91       	pop	r28
    81dc:	1f 91       	pop	r17
    81de:	0f 91       	pop	r16
    81e0:	ff 90       	pop	r15
    81e2:	ef 90       	pop	r14
    81e4:	df 90       	pop	r13
    81e6:	cf 90       	pop	r12
    81e8:	bf 90       	pop	r11
    81ea:	af 90       	pop	r10
    81ec:	9f 90       	pop	r9
    81ee:	8f 90       	pop	r8
    81f0:	7f 90       	pop	r7
    81f2:	6f 90       	pop	r6
    81f4:	5f 90       	pop	r5
    81f6:	4f 90       	pop	r4
    81f8:	3f 90       	pop	r3
    81fa:	2f 90       	pop	r2
    81fc:	08 95       	ret

000081fe <strnlen_P>:
    81fe:	fc 01       	movw	r30, r24
    8200:	05 90       	lpm	r0, Z+
    8202:	61 50       	subi	r22, 0x01	; 1
    8204:	70 40       	sbci	r23, 0x00	; 0
    8206:	01 10       	cpse	r0, r1
    8208:	d8 f7       	brcc	.-10     	; 0x8200 <strnlen_P+0x2>
    820a:	80 95       	com	r24
    820c:	90 95       	com	r25
    820e:	8e 0f       	add	r24, r30
    8210:	9f 1f       	adc	r25, r31
    8212:	08 95       	ret

00008214 <strnlen>:
    8214:	fc 01       	movw	r30, r24
    8216:	61 50       	subi	r22, 0x01	; 1
    8218:	70 40       	sbci	r23, 0x00	; 0
    821a:	01 90       	ld	r0, Z+
    821c:	01 10       	cpse	r0, r1
    821e:	d8 f7       	brcc	.-10     	; 0x8216 <strnlen+0x2>
    8220:	80 95       	com	r24
    8222:	90 95       	com	r25
    8224:	8e 0f       	add	r24, r30
    8226:	9f 1f       	adc	r25, r31
    8228:	08 95       	ret

0000822a <__ultoa_invert>:
    822a:	fa 01       	movw	r30, r20
    822c:	aa 27       	eor	r26, r26
    822e:	28 30       	cpi	r18, 0x08	; 8
    8230:	51 f1       	breq	.+84     	; 0x8286 <__ultoa_invert+0x5c>
    8232:	20 31       	cpi	r18, 0x10	; 16
    8234:	81 f1       	breq	.+96     	; 0x8296 <__ultoa_invert+0x6c>
    8236:	e8 94       	clt
    8238:	6f 93       	push	r22
    823a:	6e 7f       	andi	r22, 0xFE	; 254
    823c:	6e 5f       	subi	r22, 0xFE	; 254
    823e:	7f 4f       	sbci	r23, 0xFF	; 255
    8240:	8f 4f       	sbci	r24, 0xFF	; 255
    8242:	9f 4f       	sbci	r25, 0xFF	; 255
    8244:	af 4f       	sbci	r26, 0xFF	; 255
    8246:	b1 e0       	ldi	r27, 0x01	; 1
    8248:	3e d0       	rcall	.+124    	; 0x82c6 <__ultoa_invert+0x9c>
    824a:	b4 e0       	ldi	r27, 0x04	; 4
    824c:	3c d0       	rcall	.+120    	; 0x82c6 <__ultoa_invert+0x9c>
    824e:	67 0f       	add	r22, r23
    8250:	78 1f       	adc	r23, r24
    8252:	89 1f       	adc	r24, r25
    8254:	9a 1f       	adc	r25, r26
    8256:	a1 1d       	adc	r26, r1
    8258:	68 0f       	add	r22, r24
    825a:	79 1f       	adc	r23, r25
    825c:	8a 1f       	adc	r24, r26
    825e:	91 1d       	adc	r25, r1
    8260:	a1 1d       	adc	r26, r1
    8262:	6a 0f       	add	r22, r26
    8264:	71 1d       	adc	r23, r1
    8266:	81 1d       	adc	r24, r1
    8268:	91 1d       	adc	r25, r1
    826a:	a1 1d       	adc	r26, r1
    826c:	20 d0       	rcall	.+64     	; 0x82ae <__ultoa_invert+0x84>
    826e:	09 f4       	brne	.+2      	; 0x8272 <__ultoa_invert+0x48>
    8270:	68 94       	set
    8272:	3f 91       	pop	r19
    8274:	2a e0       	ldi	r18, 0x0A	; 10
    8276:	26 9f       	mul	r18, r22
    8278:	11 24       	eor	r1, r1
    827a:	30 19       	sub	r19, r0
    827c:	30 5d       	subi	r19, 0xD0	; 208
    827e:	31 93       	st	Z+, r19
    8280:	de f6       	brtc	.-74     	; 0x8238 <__ultoa_invert+0xe>
    8282:	cf 01       	movw	r24, r30
    8284:	08 95       	ret
    8286:	46 2f       	mov	r20, r22
    8288:	47 70       	andi	r20, 0x07	; 7
    828a:	40 5d       	subi	r20, 0xD0	; 208
    828c:	41 93       	st	Z+, r20
    828e:	b3 e0       	ldi	r27, 0x03	; 3
    8290:	0f d0       	rcall	.+30     	; 0x82b0 <__ultoa_invert+0x86>
    8292:	c9 f7       	brne	.-14     	; 0x8286 <__ultoa_invert+0x5c>
    8294:	f6 cf       	rjmp	.-20     	; 0x8282 <__ultoa_invert+0x58>
    8296:	46 2f       	mov	r20, r22
    8298:	4f 70       	andi	r20, 0x0F	; 15
    829a:	40 5d       	subi	r20, 0xD0	; 208
    829c:	4a 33       	cpi	r20, 0x3A	; 58
    829e:	18 f0       	brcs	.+6      	; 0x82a6 <__ultoa_invert+0x7c>
    82a0:	49 5d       	subi	r20, 0xD9	; 217
    82a2:	31 fd       	sbrc	r19, 1
    82a4:	40 52       	subi	r20, 0x20	; 32
    82a6:	41 93       	st	Z+, r20
    82a8:	02 d0       	rcall	.+4      	; 0x82ae <__ultoa_invert+0x84>
    82aa:	a9 f7       	brne	.-22     	; 0x8296 <__ultoa_invert+0x6c>
    82ac:	ea cf       	rjmp	.-44     	; 0x8282 <__ultoa_invert+0x58>
    82ae:	b4 e0       	ldi	r27, 0x04	; 4
    82b0:	a6 95       	lsr	r26
    82b2:	97 95       	ror	r25
    82b4:	87 95       	ror	r24
    82b6:	77 95       	ror	r23
    82b8:	67 95       	ror	r22
    82ba:	ba 95       	dec	r27
    82bc:	c9 f7       	brne	.-14     	; 0x82b0 <__ultoa_invert+0x86>
    82be:	00 97       	sbiw	r24, 0x00	; 0
    82c0:	61 05       	cpc	r22, r1
    82c2:	71 05       	cpc	r23, r1
    82c4:	08 95       	ret
    82c6:	9b 01       	movw	r18, r22
    82c8:	ac 01       	movw	r20, r24
    82ca:	0a 2e       	mov	r0, r26
    82cc:	06 94       	lsr	r0
    82ce:	57 95       	ror	r21
    82d0:	47 95       	ror	r20
    82d2:	37 95       	ror	r19
    82d4:	27 95       	ror	r18
    82d6:	ba 95       	dec	r27
    82d8:	c9 f7       	brne	.-14     	; 0x82cc <__ultoa_invert+0xa2>
    82da:	62 0f       	add	r22, r18
    82dc:	73 1f       	adc	r23, r19
    82de:	84 1f       	adc	r24, r20
    82e0:	95 1f       	adc	r25, r21
    82e2:	a0 1d       	adc	r26, r0
    82e4:	08 95       	ret

000082e6 <_exit>:
    82e6:	f8 94       	cli

000082e8 <__stop_program>:
    82e8:	ff cf       	rjmp	.-2      	; 0x82e8 <__stop_program>
