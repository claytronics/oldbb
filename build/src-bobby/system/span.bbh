#ifndef __SPAN_H__
#define ___SPAN_H__
// spanning tree api
#include "block.bbh"

typedef enum { STARTED, DONE, HAVEPARENT, WAITING } SpanTreeState;
typedef enum { COMPLETED, TIMEDOUT, WAIT } SpanningTreeStatus;
threadtype typedef struct _spanningtree SpanningTree;
typedef void (*SpanningTreeHandler)(SpanningTree* tree, SpanningTreeStatus status);

struct _spanningtree{
  PRef parent;			/* port for my parent if there is on, else 255 == I am root  */
  byte numchildren;		/* number of children I have */
  PRef children[NUM_PORTS];	/* ports for my children, if there are any */
  byte spantreeid;		/* the id of this spanning tree */
  SpanTreeState state;			/* state i am in in forming the spanning tree */
  uint16_t value;				/* used in the creation of spanning trees, the name of the root */
  int outstanding;			/* used to count messages */
  SpanningTreeHandler mydonefunc;
  SpanningTreeStatus status;
  MsgHandler broadcasthandler;
  Timeout spantimeout;
}; 





// for debugging to have some determinism
// 0 -> no debugging, random ids
// 1 -> above + colors for states
// 2 -> above + send log msgs back to host
void setSpanningTreeDebug(int val);

// allocate a set of num spanning trees.  If num is 0, use system default.
// returns the base of num spanning tree to be used ids.
int initSpanningTrees(int num);

// get a new spanning tree structure for tree with id, id.
// if id == 0 -> get me next legal spanning tree
SpanningTree* allocateSpanningTree(int id);

// start a spanning tree with id#, id, where I am the root.  Must be starte by only one node.
// if timeout == 0, never time out
void startTreeByParent(SpanningTree* tree,int id, SpanningTreeHandler donefunc, int timeout);

// start a spanning tree with a random root, more than one node can initiate this.  
// if timeout == 0, never time out
void createSpanningTree(SpanningTree* tree, SpanningTreeHandler donefunc, int timeout);

// send msg in data to everyone in the spanning tree, call handler when everyone has gotten the msg
void treeBroadcast(SpanningTree* tree, byte* data, byte size, MsgHandler handler);

// wait til everyone gets to a barrier.  I.e., every node in spanning
// tree calls this function with the same id.  Will not return until
// done or timeout secs have elapsed.  If timeout is 0, never timeout.
// return 1 if timedout, 0 if ok.
int treeBarrier(SpanningTree* tree, byte id, int timeout);

// find out if I am root
byte isSpanningTreeRoot(SpanningTree* tree);

//return a tree updated 
SpanningTree* get(SpanningTree* tree,byte id);

#endif
