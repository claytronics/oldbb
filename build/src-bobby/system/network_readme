////////////////////////////////////////////////////////////////////////////
//     Network Usage (as of 10/1/10):                                     //
////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////
// Sending messages (message.bbh)                                         //
////////////////////////////////////////////////////////////////////////////

//  Takes a dest as either UID or Port (broadcast not allowed).
//  msg is a char array of length Length which will be copied into a chunk and sent.
//  WARNING: Don't BROADCAST - you MUST do this manually by sending to all 6 faces
//           since it requires 6 memory chunks
//
//  inputs: c - pointer to a memory chunk (1 per message required)
//          dest - destination of the message (ie. to what UID/through which face)
//          msg - byte array of message data
//          length - length of your message
//          mh - handler receive block is to call on receipt of this message
//          cb - (optional) handler send block is to call on unsuccessful send
// returns: 1 - message formatted and queued for sending
//          0 - format error or unable to queue message
byte sendMessageToUid(Chunk* c, Uid dest, char * msg, byte length, MsgHandler mh, GenericHandler cb)
byte sendMessageToPort(Chunk* c, PRef dest, char * msg, byte length, MsgHandler mh, GenericHandler cb)


////////////////////////////////////////////////////////////////////////////
// Message chunk format (memory.bbh)                                      //
////////////////////////////////////////////////////////////////////////////

typedef struct _chunk Chunk;
struct _chunk
{
    byte data[DATA_SIZE];     // data (17 bytes)
    byte status;              // see below
    Chunk*  next;             // next chunk in queue
    MsgHandler handler;       // active messaging handler
    GenericHandler callback;  // used to set a callback for a failed sending packet
};


////////////////////////////////////////////////////////////////////////////
// Extracting chunk data -  use the following macros (memory.bbh):        //
////////////////////////////////////////////////////////////////////////////

byte chunkInUse(Chunk* c)    // determines if the chunk is marked as in use (1 in use / 0 free)
byte faceNum(Chunk* c)       // determines what port the chunk will be sent on / received from


////////////////////////////////////////////////////////////////////////////
// Handlers format (handler.bbh)                                          //
////////////////////////////////////////////////////////////////////////////

// message handler (access to the chunk which invoked this handler available via the global chunk* thisChunk)
// anything can be done in this handler but must guarantee execution takes no longer than (5?) ms
// data must be deep copied if later access is required
// inputs:  none
// outputs: 0 - handler error
//          non-zero - handler success (status can be defined later)
//          (ie. 1 - success, no reply sent; 2 - success, reply sent)
byte(*MsgHandler)(void);

// any type of handler (useful for callbacks)
// access to chunk invoking this handler is via the global chunk* thisChunk
void(*GenericHandler)(void);



// Example handler that returns the first byte of chunk data
byte accessData(void)
{
    if( thisChunk == NULL)
    {
        return 0;
    }

    return thisChunk->data[0];
}
