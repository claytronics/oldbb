typedef uint8_t  byte;
typedef uint16_t  NodeID;
typedef int8_t  Angle;
typedef struct accel_data_struct { Angle x,y,z; byte status; }  AccelData;
typedef void(*GenericHandler)(void);
typedef byte(*MsgHandler)(void);
typedef byte  Event;
typedef uint64_t  HandleMask;
typedef uint32_t  Time;
typedef uint8_t  Flag;
typedef struct _timeout { struct _timeout * next; Time calltime; GenericHandler callback; Flag state; byte arg;}  Timeout;
typedef struct _timer { struct _timer * next; Timeout t; Time period; Flag state; }  Timer;
typedef uint8_t  Color;
typedef uint8_t  Intensity;
typedef int16_t  MicData;
typedef struct _circ_buf_t { byte buf[CIRC_BUF_LEN]; byte start; byte end; }  CircBuf;
typedef struct _blockConf { uint16_t UID; uint8_t conf; uint8_t accel_thresh; }  blockConf;
typedef struct _chunk {byte data[DATA_SIZE]; byte status; struct _chunk* next; byte handler[POINTER_SIZE]; GenericHandler callback; }  Chunk;
typedef struct _sq_timeout { Timeout tout; void *sq; }  SQTimeout;
typedef struct _send_chunk_queue{ SQTimeout qtout; byte retry; byte flags; Chunk* head; Chunk* tail; }  SendChunkQueue;
typedef struct _receive_chunk_queue { byte index; byte checksum; byte flags; Chunk* curr; }  ReceiveChunkQueue;
typedef struct _receive_packet_queue { Chunk* head; Chunk* tail; byte flags; }  ReceivePacketQueue;
typedef uint8_t  PRef;
/*  */ typedef enum portReferences { DOWN, NORTH, EAST, WEST, SOUTH, UP, NUM_PORTS }  enum___portReferences;
typedef struct _port_t { PRef pnum; SendChunkQueue sq; ReceiveChunkQueue rq; CircBuf rx; CircBuf tx; }  Port;
typedef uint16_t  Uid;
typedef struct _neighbor_t { Uid n[NUM_PORTS]; }  Neighborhood;
typedef struct _syncData { Time globalTime; Time localTime;}  syncData_t;
typedef struct _systemhandler { HandleMask HandlerMask; GenericHandler HandlerTable[NUM_HANDLERS]; }  SystemHandler;
typedef enum { INITED = 0, MAYBESTABLE, STABLE, WAITING, CANCELED }  SpanTreeState;
typedef enum { Root, Interior, Leaf }  SpanTreeKind;
typedef enum { Vacant, Parent, Child, NoLink, Unknown, Slow }  SpanTreeNeighborKind;
typedef struct _spanningtree  SpanningTree;
typedef void (*SpanningTreeHandler)(SpanningTree* treee, SpanTreeState kind);
