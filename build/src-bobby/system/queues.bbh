// queues.h
//
// defines different types of queues

#ifndef _QUEUES_H_
#define _QUEUES_H_

#include "memory.bbh"

#ifndef HOST
#include "hardwaretime.bbh"
#endif

// global receive queue defs
#define PACKET_READY    0x80
#define NO_PACKET_READY 0x00

// send/receive queue common defs
#define CHUNK_READY     0x80
#define NO_CHUNK_READY  0x00

#define ESCAPE_NEXT     0x04
#define ACK_ODD         0x02
#define ACK_EVEN        0x01    
#define ACK_NONE        0x00    

// send queue defs
#define CLEAR_TO_SEND   0x40
#define SEND_ODD_ACK    0x02
#define SEND_EVEN_ACK   0x01

// parity bits
#define EVEN            0x00
#define ODD             0x01

// frame delimeters
#define FD_MASK         0xFE
#define FD              0x12
//#define FD_SYSTEM       0x12
//#define FD_SINGLE       0x14
//#define FD_SMC          0x14
//#define FD_CMC          0x16

// misc
#define ACK             0x08
#define ACK_MASK        0xFE
#define NACK            0x0A
#define ESCAPE          0x7D
#define ESCAPE_CHAR     0x20

// send protocols
#define ALL_NEIGHBORS   ~0

// useful common send/receive queue status flag functions
#define chunkReady(x)   ((x.flags >> 7) & 0x1)

// useful send queue status flag functions
#define clearToSend(x)        ((x.flags >> 6) & 0x1)
#define sendParity(x)          ((x.flags >> 2) & 0x1)
#define flipParity(x)          (x.flags ^= 0x4)
#define shouldSendOddAck(x)  ((x.flags >> 1) & 0x1)
#define shouldSendEvenAck(x) (x.flags & 0x1)
#define clearSendAcks(x)      (x.flags &= 0xFC)

#define setAck(x)              (1 << chunkParity(x))

// useful receive queue status flag functions
#define gotOddAck(x)          ((x.flags >> 1) & 0x1)
#define gotEvenAck(x)         (x.flags & 0x1)
#define clearReceivedAcks(x)  (x.flags &= 0xFC)
#define parityLastChunk(x)    ((x.flags >> 6) &0x1)
#define flipParityLast(x)     (x.flags ^= 0x40)

// useful global queue status flag function
#define packetReady(x)    ((x.flags >> 7) & 0x1)

#ifndef HOST
// changed to "thread_type" since bb compiler doesn't notice comments
//thread_type typedef struct _send_chunk_queue SendChunkQueue;

// timeout timer for send queues
threadtype typedef struct _sq_timeout { Timeout tout; void *sq; } SQTimeout;


// queue of chunks to send (6 per cube)
threadtype typedef struct _send_chunk_queue{ SQTimeout qtout; byte retry; byte flags; Chunk* head; Chunk* tail; } SendChunkQueue;
/* Flags:
    [7]   chunk ready
    [6]   able to send (ack received)
    [3]   send a nack
    [2]   send next chunk with even (0) / odd (1) parity
    [1]   send an odd parity ack
    [0]   send an even parity ack
*/


// queue of chunks received (6 per cube)
threadtype typedef struct _receive_chunk_queue { byte index; byte checksum; byte flags; Chunk* curr; } ReceiveChunkQueue;
/* Flags:
    [7] chunk ready
    [6] parity of last received chunk
    [1] got odd parity ACK
    [0] got even parity ACK
*/

threadtype typedef struct _receive_packet_queue { Chunk* head; Chunk* tail; byte flags; } ReceivePacketQueue;
/* Flags:
    [7] has new packet
*/

// retry handler
void retrySend(void);

#endif // #ifndef HOST

#endif // #ifndef _QUEUES_H_
