#ifndef __CLOCK_H__
#define __CLOCK_H__

#include <stdint.h>
#include "serial.bbh"
#include "hardwaretime.bbh"
#include "handler.bbh"

#define ESTIMATED_TRANSMISSION_DELAY 6
#define NUM_CALIBRATION	5
#define NUM_SYNC_DATA NUM_CALIBRATION
#define CALIBRATION_PERIOD (2000)
#define CRUISE_PERIOD (5000)
#define LEADER_ELECTION_TIMEOUT 600

//#define CLOCK_VALIDITY_PERIOD (5*1000)

// L : 330
// line 3: 100 

// clock message format: 

// <CLOCK_SYNC_MSG> <CLOCK_INFO> <Send Time> <Receive Time>

//Clock sync: 0
//clock info: 1
//Send time: 2-5
//receive time: 6-9
//id: 10-11
//level: 12-13
//max clock: 14-17

#define SEND_TIME_INDEX 2
#define RECEIVE_TIME_INDEX 6

#define TIME_LEADER_ELECTION_GO_MSG 1
#define TIME_LEADER_ELECTION_BACK_MSG 2
#define ID_INDEX 10
#define LEVEL_INDEX 12
#define ANSWER_INDEX 12
#define MAX_CLOCK_INDEX 14

#define CLOCK_INFO 3

void initClock(void);

Time getClock(void);

byte handleClockSyncMessage(void);

byte handleNeighborChange(PRef p);

byte isAClockSyncMessage(Chunk *c);

void insertReceiveTime(Chunk *c);

void insertSendTime(Chunk *c);

void insertTimeStamp(byte *d, Time t, byte i);
Time getTimeStamp(byte *d, byte i);

byte isTimeLeader(void);

byte isSynchronized(void);

void printSlope(void);

uint16_t getDistanceToTimeLeader(void);

//DEBUG
byte isElecting(void);
#endif
