   1               		.file	"hwTime.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__CCP__ = 0x34
   7               	__tmp_reg__ = 0
   8               	__zero_reg__ = 1
   9               		.text
  10               	.Ltext0:
  11               	.global	getHWTime
  13               	getHWTime:
  14               	.LFB5:
  15               		.file 1 "/home/pthalamy/CMU/oldbb/build/src-bobby/hw-block/hwTime.c"
   1:/home/pthalamy/CMU/oldbb/build/src-bobby/hw-block/hwTime.c **** #include <util/atomic.h>
   2:/home/pthalamy/CMU/oldbb/build/src-bobby/hw-block/hwTime.c **** #include <avr/io.h>
   3:/home/pthalamy/CMU/oldbb/build/src-bobby/hw-block/hwTime.c **** #include <avr/interrupt.h>
   4:/home/pthalamy/CMU/oldbb/build/src-bobby/hw-block/hwTime.c **** #include "../hw-api/hwTime.h"
   5:/home/pthalamy/CMU/oldbb/build/src-bobby/hw-block/hwTime.c **** #include "../system/hardwaretime.h"
   6:/home/pthalamy/CMU/oldbb/build/src-bobby/hw-block/hwTime.c **** 
   7:/home/pthalamy/CMU/oldbb/build/src-bobby/hw-block/hwTime.c **** #define PRECISE_RTC
   8:/home/pthalamy/CMU/oldbb/build/src-bobby/hw-block/hwTime.c **** 
   9:/home/pthalamy/CMU/oldbb/build/src-bobby/hw-block/hwTime.c **** uint16_t timeHi;			// semi-private data, do not modify outside of this file
  10:/home/pthalamy/CMU/oldbb/build/src-bobby/hw-block/hwTime.c **** 
  11:/home/pthalamy/CMU/oldbb/build/src-bobby/hw-block/hwTime.c **** // Time in ms
  12:/home/pthalamy/CMU/oldbb/build/src-bobby/hw-block/hwTime.c **** Time getHWTime()
  13:/home/pthalamy/CMU/oldbb/build/src-bobby/hw-block/hwTime.c **** {
  16               		.loc 1 13 0
  17 0000 0F93      		push r16
  18               	.LCFI0:
  19 0002 1F93      		push r17
  20               	.LCFI1:
  21               	/* prologue: function */
  22               	/* frame size = 0 */
  23               	/* stack size = 2 */
  24               	.L__stack_usage = 2
  25               	.LVL0:
  26               	.LBB7:
  27               	.LBB8:
  28               	.LBB9:
  29               		.file 2 "/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/atomic.h"
   1:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/atomic.h **** /* Copyright (c) 2007 Dean Camera
   2:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/atomic.h ****    All rights reserved.
   3:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/atomic.h **** 
   4:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/atomic.h ****    Redistribution and use in source and binary forms, with or without
   5:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/atomic.h ****    modification, are permitted provided that the following conditions are met:
   6:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/atomic.h **** 
   7:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/atomic.h ****    * Redistributions of source code must retain the above copyright
   8:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/atomic.h ****      notice, this list of conditions and the following disclaimer.
   9:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/atomic.h **** 
  10:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/atomic.h ****    * Redistributions in binary form must reproduce the above copyright
  11:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/atomic.h ****      notice, this list of conditions and the following disclaimer in
  12:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/atomic.h ****      the documentation and/or other materials provided with the
  13:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/atomic.h ****      distribution.
  14:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/atomic.h **** 
  15:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/atomic.h ****    * Neither the name of the copyright holders nor the names of
  16:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/atomic.h ****      contributors may be used to endorse or promote products derived
  17:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/atomic.h ****      from this software without specific prior written permission.
  18:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/atomic.h **** 
  19:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/atomic.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  20:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/atomic.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  21:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/atomic.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  22:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/atomic.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  23:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/atomic.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  24:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/atomic.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  25:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/atomic.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  26:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/atomic.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  27:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/atomic.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  28:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/atomic.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  29:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/atomic.h ****   POSSIBILITY OF SUCH DAMAGE.
  30:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/atomic.h **** */
  31:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/atomic.h **** 
  32:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/atomic.h **** /* $Id: atomic.h 2158 2010-06-10 15:48:28Z joerg_wunsch $ */
  33:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/atomic.h **** 
  34:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/atomic.h **** #ifndef _UTIL_ATOMIC_H_
  35:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/atomic.h **** #define _UTIL_ATOMIC_H_ 1
  36:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/atomic.h **** 
  37:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/atomic.h **** #include <avr/io.h>
  38:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/atomic.h **** #include <avr/interrupt.h>
  39:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/atomic.h **** 
  40:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/atomic.h **** #if !defined(__DOXYGEN__)
  41:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/atomic.h **** /* Internal helper functions. */
  42:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/atomic.h **** static __inline__ uint8_t __iSeiRetVal(void)
  43:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/atomic.h **** {
  44:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/atomic.h ****     sei();
  45:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/atomic.h ****     return 1;
  46:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/atomic.h **** }
  47:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/atomic.h **** 
  48:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/atomic.h **** static __inline__ uint8_t __iCliRetVal(void)
  49:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/atomic.h **** {
  50:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/atomic.h ****     cli();
  30               		.loc 2 50 0
  31               	/* #APP */
  32               	 ;  50 "/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/atomic.h" 1
  33 0004 F894      		cli
  34               	 ;  0 "" 2
  35               	.LVL1:
  36               	/* #NOAPP */
  37               	.LBE9:
  38               	.LBE8:
  14:/home/pthalamy/CMU/oldbb/build/src-bobby/hw-block/hwTime.c **** 	Time tmp;
  15:/home/pthalamy/CMU/oldbb/build/src-bobby/hw-block/hwTime.c **** 	// prevents ISRs from corrupting multibyte write
  16:/home/pthalamy/CMU/oldbb/build/src-bobby/hw-block/hwTime.c **** 	ATOMIC_BLOCK(ATOMIC_FORCEON)
  17:/home/pthalamy/CMU/oldbb/build/src-bobby/hw-block/hwTime.c ****     {
  18:/home/pthalamy/CMU/oldbb/build/src-bobby/hw-block/hwTime.c **** 		tmp = (((Time)timeHi) << 16) | RTC.CNT;
  39               		.loc 1 18 0
  40 0006 E0E0      		ldi r30,0
  41 0008 F4E0      		ldi r31,lo8(4)
  42 000a 8085      		ldd r24,Z+8
  43 000c 9185      		ldd r25,Z+9
  44 000e 0091 0000 		lds r16,timeHi
  45 0012 1091 0000 		lds r17,timeHi+1
  46 0016 20E0      		ldi r18,0
  47 0018 30E0      		ldi r19,0
  48 001a 9801      		movw r18,r16
  49 001c 1127      		clr r17
  50 001e 0027      		clr r16
  51 0020 A0E0      		ldi r26,0
  52 0022 B0E0      		ldi r27,0
  53 0024 082B      		or r16,r24
  54 0026 192B      		or r17,r25
  55 0028 2A2B      		or r18,r26
  56 002a 3B2B      		or r19,r27
  57               	.LVL2:
  58               	.LBB10:
  59               	.LBB11:
  51:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/atomic.h ****     return 1;
  52:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/atomic.h **** }
  53:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/atomic.h **** 
  54:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/atomic.h **** static __inline__ void __iSeiParam(const uint8_t *__s)
  55:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/atomic.h **** {
  56:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/atomic.h ****     sei();
  60               		.loc 2 56 0
  61               	/* #APP */
  62               	 ;  56 "/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/atomic.h" 1
  63 002c 7894      		sei
  64               	 ;  0 "" 2
  57:/usr/lib/gcc/avr/4.7.2/../../../avr/include/util/atomic.h ****     __asm__ volatile ("" ::: "memory");
  65               		.loc 2 57 0
  66               	/* #NOAPP */
  67               	.LBE11:
  68               	.LBE10:
  69               	.LBE7:
  19:/home/pthalamy/CMU/oldbb/build/src-bobby/hw-block/hwTime.c **** 	}
  20:/home/pthalamy/CMU/oldbb/build/src-bobby/hw-block/hwTime.c **** 	
  21:/home/pthalamy/CMU/oldbb/build/src-bobby/hw-block/hwTime.c **** 	return tmp;
  22:/home/pthalamy/CMU/oldbb/build/src-bobby/hw-block/hwTime.c **** }
  70               		.loc 1 22 0
  71 002e B801      		movw r22,r16
  72 0030 C901      		movw r24,r18
  73               	/* epilogue start */
  74 0032 1F91      		pop r17
  75 0034 0F91      		pop r16
  76               	.LVL3:
  77 0036 0895      		ret
  78               	.LFE5:
  80               	.global	initHWClock
  82               	initHWClock:
  83               	.LFB6:
  23:/home/pthalamy/CMU/oldbb/build/src-bobby/hw-block/hwTime.c **** 
  24:/home/pthalamy/CMU/oldbb/build/src-bobby/hw-block/hwTime.c **** void initHWClock(void)
  25:/home/pthalamy/CMU/oldbb/build/src-bobby/hw-block/hwTime.c **** {
  84               		.loc 1 25 0
  85               	/* prologue: function */
  86               	/* frame size = 0 */
  87               	/* stack size = 0 */
  88               	.L__stack_usage = 0
  26:/home/pthalamy/CMU/oldbb/build/src-bobby/hw-block/hwTime.c **** 	OSC.CTRL |= _BV(OSC_RC32MEN_bp);			// turn on 32MHz internal RC oscillator
  89               		.loc 1 26 0
  90 0038 8091 5000 		lds r24,80
  91 003c 8260      		ori r24,lo8(2)
  92 003e 8093 5000 		sts 80,r24
  93               	.L3:
  27:/home/pthalamy/CMU/oldbb/build/src-bobby/hw-block/hwTime.c **** 	while(!(OSC.STATUS & OSC_RC32MRDY_bm));  	// wait for it to be ready
  94               		.loc 1 27 0 discriminator 1
  95 0042 8091 5100 		lds r24,81
  96 0046 81FF      		sbrs r24,1
  97 0048 00C0      		rjmp .L3
  28:/home/pthalamy/CMU/oldbb/build/src-bobby/hw-block/hwTime.c **** 
  29:/home/pthalamy/CMU/oldbb/build/src-bobby/hw-block/hwTime.c **** 	CCP=0xD8;							// allow modification of protected register
  98               		.loc 1 29 0
  99 004a 88ED      		ldi r24,lo8(-40)
 100 004c 84BF      		out __CCP__,r24
  30:/home/pthalamy/CMU/oldbb/build/src-bobby/hw-block/hwTime.c **** 	CLK.CTRL = CLK_SCLKSEL_RC32M_gc;	// change from 2MHz to 32MHz
 101               		.loc 1 30 0
 102 004e 81E0      		ldi r24,lo8(1)
 103 0050 8093 4000 		sts 64,r24
 104 0054 0895      		ret
 105               	.LFE6:
 107               	.global	initHWRTC
 109               	initHWRTC:
 110               	.LFB7:
  31:/home/pthalamy/CMU/oldbb/build/src-bobby/hw-block/hwTime.c **** }
  32:/home/pthalamy/CMU/oldbb/build/src-bobby/hw-block/hwTime.c **** 
  33:/home/pthalamy/CMU/oldbb/build/src-bobby/hw-block/hwTime.c **** #ifndef PRECISE_RTC
  34:/home/pthalamy/CMU/oldbb/build/src-bobby/hw-block/hwTime.c **** void initHWRTC(void)
  35:/home/pthalamy/CMU/oldbb/build/src-bobby/hw-block/hwTime.c **** {
  36:/home/pthalamy/CMU/oldbb/build/src-bobby/hw-block/hwTime.c **** 	RTC.CTRL = RTC_PRESCALER_DIV1_gc;
  37:/home/pthalamy/CMU/oldbb/build/src-bobby/hw-block/hwTime.c **** 	CLK.RTCCTRL = CLK_RTCSRC_ULP_gc | CLK_RTCEN_bm; 
  38:/home/pthalamy/CMU/oldbb/build/src-bobby/hw-block/hwTime.c **** 
  39:/home/pthalamy/CMU/oldbb/build/src-bobby/hw-block/hwTime.c **** 	RTC.INTCTRL = RTC_OVFINTLVL_HI_gc;
  40:/home/pthalamy/CMU/oldbb/build/src-bobby/hw-block/hwTime.c **** 	// initalise the RTC as zero
  41:/home/pthalamy/CMU/oldbb/build/src-bobby/hw-block/hwTime.c **** 	RTC.CNT = 0;
  42:/home/pthalamy/CMU/oldbb/build/src-bobby/hw-block/hwTime.c **** }
  43:/home/pthalamy/CMU/oldbb/build/src-bobby/hw-block/hwTime.c **** #else
  44:/home/pthalamy/CMU/oldbb/build/src-bobby/hw-block/hwTime.c **** void initHWRTC(void)
  45:/home/pthalamy/CMU/oldbb/build/src-bobby/hw-block/hwTime.c **** {
 111               		.loc 1 45 0
 112               	/* prologue: function */
 113               	/* frame size = 0 */
 114               	/* stack size = 0 */
 115               	.L__stack_usage = 0
  46:/home/pthalamy/CMU/oldbb/build/src-bobby/hw-block/hwTime.c **** 	//OSC_RC32KCAL = 80;
  47:/home/pthalamy/CMU/oldbb/build/src-bobby/hw-block/hwTime.c **** 	OSC.CTRL |= OSC_RC32KEN_bm;
 116               		.loc 1 47 0
 117 0056 8091 5000 		lds r24,80
 118 005a 8460      		ori r24,lo8(4)
 119 005c 8093 5000 		sts 80,r24
 120               	.L9:
  48:/home/pthalamy/CMU/oldbb/build/src-bobby/hw-block/hwTime.c **** 	do {/* Wait for the 32kHz oscillator to stabilize. */} while ( ( OSC.STATUS & OSC_RC32KRDY_bm ) ==
 121               		.loc 1 48 0 discriminator 1
 122 0060 8091 5100 		lds r24,81
 123 0064 82FF      		sbrs r24,2
 124 0066 00C0      		rjmp .L9
  49:/home/pthalamy/CMU/oldbb/build/src-bobby/hw-block/hwTime.c **** 	RTC.CTRL = RTC_PRESCALER_DIV1_gc;
 125               		.loc 1 49 0
 126 0068 81E0      		ldi r24,lo8(1)
 127 006a 8093 0004 		sts 1024,r24
  50:/home/pthalamy/CMU/oldbb/build/src-bobby/hw-block/hwTime.c **** 	CLK.RTCCTRL = CLK_RTCSRC_RCOSC_gc | CLK_RTCEN_bm;
 128               		.loc 1 50 0
 129 006e 85E0      		ldi r24,lo8(5)
 130 0070 8093 4300 		sts 67,r24
  51:/home/pthalamy/CMU/oldbb/build/src-bobby/hw-block/hwTime.c **** 	//RTC.INTCTRL = RTC_OVFINTLVL_LO_gc;
  52:/home/pthalamy/CMU/oldbb/build/src-bobby/hw-block/hwTime.c **** 	RTC.INTCTRL = RTC_OVFINTLVL_HI_gc;
 131               		.loc 1 52 0
 132 0074 83E0      		ldi r24,lo8(3)
 133 0076 8093 0204 		sts 1026,r24
  53:/home/pthalamy/CMU/oldbb/build/src-bobby/hw-block/hwTime.c **** 	// initalise the RTC as zero
  54:/home/pthalamy/CMU/oldbb/build/src-bobby/hw-block/hwTime.c **** 	RTC.CNT = 0;
 134               		.loc 1 54 0
 135 007a 1092 0804 		sts 1032,__zero_reg__
 136 007e 1092 0904 		sts 1032+1,__zero_reg__
 137 0082 0895      		ret
 138               	.LFE7:
 140               	.global	initHWTime
 142               	initHWTime:
 143               	.LFB8:
  55:/home/pthalamy/CMU/oldbb/build/src-bobby/hw-block/hwTime.c **** }
  56:/home/pthalamy/CMU/oldbb/build/src-bobby/hw-block/hwTime.c **** #endif
  57:/home/pthalamy/CMU/oldbb/build/src-bobby/hw-block/hwTime.c **** 
  58:/home/pthalamy/CMU/oldbb/build/src-bobby/hw-block/hwTime.c **** /*
  59:/home/pthalamy/CMU/oldbb/build/src-bobby/hw-block/hwTime.c **** void initClock(void)
  60:/home/pthalamy/CMU/oldbb/build/src-bobby/hw-block/hwTime.c **** {
  61:/home/pthalamy/CMU/oldbb/build/src-bobby/hw-block/hwTime.c **** 	OSC.CTRL |= _BV(OSC_RC32KEN_bp);			// turn on 32MHz internal RC oscillator
  62:/home/pthalamy/CMU/oldbb/build/src-bobby/hw-block/hwTime.c **** 	while(!(OSC.STATUS & OSC_RC32KRDY_bm));  	// wait for it to be ready
  63:/home/pthalamy/CMU/oldbb/build/src-bobby/hw-block/hwTime.c **** 
  64:/home/pthalamy/CMU/oldbb/build/src-bobby/hw-block/hwTime.c **** 	CCP=0xD8;							// allow modification of protected register
  65:/home/pthalamy/CMU/oldbb/build/src-bobby/hw-block/hwTime.c **** 	CLK.CTRL = CLK_SCLKSEL_RC32K_gc;	// change from 2MHz to 32MHz
  66:/home/pthalamy/CMU/oldbb/build/src-bobby/hw-block/hwTime.c **** }
  67:/home/pthalamy/CMU/oldbb/build/src-bobby/hw-block/hwTime.c **** 
  68:/home/pthalamy/CMU/oldbb/build/src-bobby/hw-block/hwTime.c **** 
  69:/home/pthalamy/CMU/oldbb/build/src-bobby/hw-block/hwTime.c **** void initRTC(void)
  70:/home/pthalamy/CMU/oldbb/build/src-bobby/hw-block/hwTime.c **** {
  71:/home/pthalamy/CMU/oldbb/build/src-bobby/hw-block/hwTime.c **** 	RTC.CTRL = RTC_PRESCALER_DIV1_gc;
  72:/home/pthalamy/CMU/oldbb/build/src-bobby/hw-block/hwTime.c **** 	//CLK.RTCCTRL = CLK_RTCSRC_ULP_gc | CLK_RTCEN_bm; 
  73:/home/pthalamy/CMU/oldbb/build/src-bobby/hw-block/hwTime.c **** 	CLK.RTCCTRL = CLK_RTCSRC_RCOSC_gc | CLK_RTCEN_bm;
  74:/home/pthalamy/CMU/oldbb/build/src-bobby/hw-block/hwTime.c **** 	
  75:/home/pthalamy/CMU/oldbb/build/src-bobby/hw-block/hwTime.c **** 	RTC.INTCTRL = RTC_OVFINTLVL_HI_gc;
  76:/home/pthalamy/CMU/oldbb/build/src-bobby/hw-block/hwTime.c **** }
  77:/home/pthalamy/CMU/oldbb/build/src-bobby/hw-block/hwTime.c **** */
  78:/home/pthalamy/CMU/oldbb/build/src-bobby/hw-block/hwTime.c **** 
  79:/home/pthalamy/CMU/oldbb/build/src-bobby/hw-block/hwTime.c **** /* src: http://hardware-ntp.googlecode.com/svn-../branches/xmega-test/pcb-1/rtc.c */
  80:/home/pthalamy/CMU/oldbb/build/src-bobby/hw-block/hwTime.c **** /*
  81:/home/pthalamy/CMU/oldbb/build/src-bobby/hw-block/hwTime.c **** void initClock(void)
  82:/home/pthalamy/CMU/oldbb/build/src-bobby/hw-block/hwTime.c **** {
  83:/home/pthalamy/CMU/oldbb/build/src-bobby/hw-block/hwTime.c **** 	OSC.CTRL |= OSC_RC32KEN_bm;			// turn on 32MHz internal RC oscillator
  84:/home/pthalamy/CMU/oldbb/build/src-bobby/hw-block/hwTime.c **** 	while(!(OSC.STATUS & OSC_RC32KRDY_bm));  	// wait for it to be ready
  85:/home/pthalamy/CMU/oldbb/build/src-bobby/hw-block/hwTime.c **** 
  86:/home/pthalamy/CMU/oldbb/build/src-bobby/hw-block/hwTime.c **** 	CCP=0xD8;							// allow modification of protected register
  87:/home/pthalamy/CMU/oldbb/build/src-bobby/hw-block/hwTime.c **** 	CLK.CTRL = CLK_SCLKSEL_RC32K_gc;	// change from 2MHz to 32MHz
  88:/home/pthalamy/CMU/oldbb/build/src-bobby/hw-block/hwTime.c **** }
  89:/home/pthalamy/CMU/oldbb/build/src-bobby/hw-block/hwTime.c **** 
  90:/home/pthalamy/CMU/oldbb/build/src-bobby/hw-block/hwTime.c **** 
  91:/home/pthalamy/CMU/oldbb/build/src-bobby/hw-block/hwTime.c **** void initRTC(void)
  92:/home/pthalamy/CMU/oldbb/build/src-bobby/hw-block/hwTime.c **** {
  93:/home/pthalamy/CMU/oldbb/build/src-bobby/hw-block/hwTime.c **** 	CLK.RTCCTRL = (CLK.RTCCTRL & ~(CLK_RTCSRC_gm)) | CLK_RTCSRC_RCOSC_gc;
  94:/home/pthalamy/CMU/oldbb/build/src-bobby/hw-block/hwTime.c **** 	CLK.RTCCTRL |= CLK_RTCEN_bm;
  95:/home/pthalamy/CMU/oldbb/build/src-bobby/hw-block/hwTime.c **** 	while (RTC.STATUS & RTC_SYNCBUSY_bm);
  96:/home/pthalamy/CMU/oldbb/build/src-bobby/hw-block/hwTime.c **** 	// initalise the RTC as zero
  97:/home/pthalamy/CMU/oldbb/build/src-bobby/hw-block/hwTime.c **** 	RTC.CNT = 0;
  98:/home/pthalamy/CMU/oldbb/build/src-bobby/hw-block/hwTime.c **** 	while (RTC.STATUS & RTC_SYNCBUSY_bm);
  99:/home/pthalamy/CMU/oldbb/build/src-bobby/hw-block/hwTime.c **** 	// set period to 1023, since internal 32kHz RC osc is divided down to 1024Hz
 100:/home/pthalamy/CMU/oldbb/build/src-bobby/hw-block/hwTime.c **** 	RTC.PER = 1023;
 101:/home/pthalamy/CMU/oldbb/build/src-bobby/hw-block/hwTime.c **** 	// start clock running, 1:1 prescaler
 102:/home/pthalamy/CMU/oldbb/build/src-bobby/hw-block/hwTime.c **** 	RTC.CTRL = RTC_PRESCALER_DIV1_gc;
 103:/home/pthalamy/CMU/oldbb/build/src-bobby/hw-block/hwTime.c **** 	
 104:/home/pthalamy/CMU/oldbb/build/src-bobby/hw-block/hwTime.c **** 	// select low-level interrupt for overflows. It's only the 1Hz tick for the main loop, so low prio
 105:/home/pthalamy/CMU/oldbb/build/src-bobby/hw-block/hwTime.c **** 	RTC.INTCTRL = (RTC.INTCTRL & ~(RTC_OVFINTLVL_gm)) | RTC_OVFINTLVL_LO_gc;
 106:/home/pthalamy/CMU/oldbb/build/src-bobby/hw-block/hwTime.c **** } */
 107:/home/pthalamy/CMU/oldbb/build/src-bobby/hw-block/hwTime.c **** 
 108:/home/pthalamy/CMU/oldbb/build/src-bobby/hw-block/hwTime.c **** 
 109:/home/pthalamy/CMU/oldbb/build/src-bobby/hw-block/hwTime.c **** void initHWTime()
 110:/home/pthalamy/CMU/oldbb/build/src-bobby/hw-block/hwTime.c **** {
 144               		.loc 1 110 0
 145               	/* prologue: function */
 146               	/* frame size = 0 */
 147               	/* stack size = 0 */
 148               	.L__stack_usage = 0
 111:/home/pthalamy/CMU/oldbb/build/src-bobby/hw-block/hwTime.c **** 	initHWClock();
 149               		.loc 1 111 0
 150 0084 0E94 0000 		call initHWClock
 151               	.LVL4:
 112:/home/pthalamy/CMU/oldbb/build/src-bobby/hw-block/hwTime.c **** 	initHWRTC();
 152               		.loc 1 112 0
 153 0088 0C94 0000 		jmp initHWRTC
 154               	.LVL5:
 155               	.LFE8:
 157               	.global	__vector_10
 159               	__vector_10:
 160               	.LFB9:
 113:/home/pthalamy/CMU/oldbb/build/src-bobby/hw-block/hwTime.c **** }
 114:/home/pthalamy/CMU/oldbb/build/src-bobby/hw-block/hwTime.c **** 
 115:/home/pthalamy/CMU/oldbb/build/src-bobby/hw-block/hwTime.c **** ISR(RTC_OVF_vect)
 116:/home/pthalamy/CMU/oldbb/build/src-bobby/hw-block/hwTime.c **** {
 161               		.loc 1 116 0
 162 008c 1F92      		push r1
 163               	.LCFI2:
 164 008e 0F92      		push r0
 165               	.LCFI3:
 166 0090 0FB6      		in r0,__SREG__
 167 0092 0F92      		push r0
 168 0094 1124      		clr __zero_reg__
 169 0096 8F93      		push r24
 170               	.LCFI4:
 171 0098 9F93      		push r25
 172               	.LCFI5:
 173               	/* prologue: Signal */
 174               	/* frame size = 0 */
 175               	/* stack size = 5 */
 176               	.L__stack_usage = 5
 117:/home/pthalamy/CMU/oldbb/build/src-bobby/hw-block/hwTime.c **** 	timeHi++;
 177               		.loc 1 117 0
 178 009a 8091 0000 		lds r24,timeHi
 179 009e 9091 0000 		lds r25,timeHi+1
 180 00a2 0196      		adiw r24,1
 181 00a4 8093 0000 		sts timeHi,r24
 182 00a8 9093 0000 		sts timeHi+1,r25
 183               	/* epilogue start */
 118:/home/pthalamy/CMU/oldbb/build/src-bobby/hw-block/hwTime.c **** }
 184               		.loc 1 118 0
 185 00ac 9F91      		pop r25
 186 00ae 8F91      		pop r24
 187 00b0 0F90      		pop r0
 188 00b2 0FBE      		out __SREG__,r0
 189 00b4 0F90      		pop r0
 190 00b6 1F90      		pop r1
 191 00b8 1895      		reti
 192               	.LFE9:
 194               		.comm	timeHi,2,1
 289               	.Letext0:
 290               		.file 3 "/usr/lib/gcc/avr/4.7.2/../../../avr/include/stdint.h"
 291               		.file 4 "/usr/lib/gcc/avr/4.7.2/../../../avr/include/avr/iox256a3.h"
 292               		.file 5 "/home/pthalamy/CMU/oldbb/build/src-bobby/system/hardwaretime.bbh"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 hwTime.c
     /tmp/ccMTK16V.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccMTK16V.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccMTK16V.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccMTK16V.s:5      *ABS*:000000000000003b __RAMPZ__
     /tmp/ccMTK16V.s:6      *ABS*:0000000000000034 __CCP__
     /tmp/ccMTK16V.s:7      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccMTK16V.s:8      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccMTK16V.s:13     .text:0000000000000000 getHWTime
                            *COM*:0000000000000002 timeHi
     /tmp/ccMTK16V.s:82     .text:0000000000000038 initHWClock
     /tmp/ccMTK16V.s:109    .text:0000000000000056 initHWRTC
     /tmp/ccMTK16V.s:142    .text:0000000000000084 initHWTime
     /tmp/ccMTK16V.s:159    .text:000000000000008c __vector_10

UNDEFINED SYMBOLS
__do_clear_bss
