(* SIMPLE Compiler
 * SIMPLE grammar
 *)

structure A = Ast
structure T = Types
open Mark

fun marksmap f s = List.map (Mark.map f) s
fun marksmap' f s = List.map (Mark.map' f) s

fun mark (e, (lft, rght)) = Mark.mark' (e, ParseState.ext (lft, rght))

val consts = ref ([] : (string * T.const) list)

fun wrapVar name =
  let
    fun checkVar [] = A.ExpVar (A.Var name)
      | checkVar ((name', const)::l) = if name = name' then A.ExpConst const else checkVar l
  in
    checkVar (!consts)
  end

fun isVar name =
	let
		val found = List.find (fn (name', _) => name = name') (!consts)
	in
		case found of
			  SOME _ => false
			| _ => true
	end

fun findArgument (locateVar, explist') =
	let
		val explist = List.map Mark.data explist'
		val _ = case (isVar locateVar) of false => raise (Fail "delta argument is not a variable") | true => ()
		val counter = ref 0
		val found = List.find (fn exp => let
							val _ = counter := !counter + 1
						in
							case exp of
							 		A.ExpVar (A.Var name) => name = locateVar
								| _ => false
						end) explist
	in
		case found of
			  SOME result => !counter - 1
			| _ => raise (Fail "argument not found")
	end

val nextProvedId = ref (0 : int)

fun generateNewVar tuple =
   let
      val _ = (nextProvedId := !nextProvedId + 1)
   in
      A.ExpVar (A.Var ("__proved__" ^ tuple ^ (Int.toString (!nextProvedId))))
   end

%%
%header (functor SimpleLrValsFn (structure Token : TOKEN))

%term 
   EOF
 | SEMI
 | INTNUM of Int32.int
 | FLOATNUM of real
 | STR of string | USE
 | IDENT of string
 | RETURN
 | DIVIDE | TIMES | PLUS | MINUS | MOD | CONS | NIL | EXP | DOTPROD
 | DOT | PROVES | COMMA
 | AT | HASH
 | EQUAL | NEQUAL | LESS | GREATER | LESSEQ | GREATEREQ
 | LPAREN | RPAREN
 | LBRACKET | RBRACKET
 | TYPE | INT | FLOAT | ADDR | LIST
 | MAX | MIN | TRASH | FIRST | APPEND
 | ARROW
 | ANY
 | TILDE | MANUAL
 | UNARY | ASNOP (* dummy *)
 | EXTERN | CONST
 | FORALL
 | VIRTUALNEIGHBOR | LINEAR | BANG
 | PERSISTENT
 | SECS | MILLISECS
 | SET_UNION | SET
 | DELTA | SCHEDULE | DELETE
 | PROVED


%nonterm 
   program of string list * A.program
 | uses of string list
 | parts of T.decl marked list * A.rule list
 | decls of T.decl marked list
 | decl of T.decl marked
 | aggtyp of T.agg * T.typ
 | aggtyps of (T.agg * T.typ) list
 | typ of T.typ
 | typs of T.typ list
 | rules of A.rule list
 | rule of A.rule
 | thm of A.thm
 | thms of A.thm list
 | deltathm of A.exp * A.thm
 | deltavar of string
 | exp of A.exp
 | exps of A.exp list
 | binop of T.binop
 | constraint of A.clause
 | cmpop of T.compare
 | var of A.var
 | deltaexp of A.clause list
 | provedexp of A.clause list
 | clause of A.clause list
 | clauses of A.clause list
 | const of T.const
 | theorem of T.theorem
 | constdecl of unit
 | time of T.time
 | thmTime of A.thm * T.time
 | thmTimes of (A.thm * T.time) list
 | intval of Int32.int
 | floatval of real
 | tuple of string

%verbose                                (* print summary of errors *)
%pos int                                (* positions *)
%start program
%pure
%eop EOF
%noshift EOF

%name Simple

%right CONS
%left PLUS MINUS
%left TIMES DIVIDE MOD
%right UNARY
%left LPAREN
%right AT HASH

%right LIST

%%

program    : uses parts EOF                    ((uses, A.Program (!consts, #1 parts, #2 parts)))

uses       : USE STR uses                      ((STR::uses))
           |                                   (([]))

parts      : decl parts                        ((decl::(#1 parts), #2 parts))
           | constdecl parts                   (parts)
           | rule parts                        ((#1 parts, rule::(#2 parts)))
           |                                   (([],[]))


decls      : decl                              ([decl])
           | decl decls                        (decl::decls)

decl       : TYPE theorem LPAREN aggtyps RPAREN DOT 	(mark (T.Decl (theorem, aggtyps, T.NotPersistent), (TYPEleft, DOTright)))
           | TYPE PERSISTENT theorem LPAREN aggtyps RPAREN DOT (mark (T.Decl (theorem, aggtyps, T.Persistent), (TYPEleft, DOTright)))
           | EXTERN typ IDENT LPAREN typs RPAREN DOT 	(mark (T.Extern (IDENT, typ, typs), (EXTERNleft, DOTright)))
           | EXTERN typ IDENT LPAREN RPAREN DOT 		(mark (T.Extern (IDENT, typ, []), (EXTERNleft, DOTright)))
           | EXTERN TYPE IDENT DOT             			(mark (T.Type IDENT, (EXTERNleft, DOTright)))

theorem    : IDENT									  (T.Regular IDENT)
           | VIRTUALNEIGHBOR IDENT             (T.Routing IDENT)
           | LINEAR IDENT                      (T.Linear IDENT)

aggtyps    : aggtyp                            ([aggtyp])
           | aggtyp COMMA aggtyps              (aggtyp::aggtyps)

typs       : typ                               ([typ])
           | typ COMMA typs                    (typ::typs)

aggtyp     : typ                               ((T.AggNone, typ))
           | IDENT typ                         ((T.AggDefined (IDENT, typ), typ))
           | typ IDENT typ                     ((T.AggDefined (IDENT, typ2), typ1))

typ        : INT                               (T.TypInt)
           | ADDR                              (T.TypAddr)
           | typ LIST                          (T.TypList typ)
           | typ SET                           (T.TypSet typ)
           | FLOAT                             (T.TypFloat)
           | LPAREN typs RPAREN                (T.TypTuple typs)
           | IDENT                             (T.TypUserDefined IDENT)

rules      : rule                              ([rule])
           | rule rules                        (rule::rules)

rule       : thmTimes PROVES clauses DOT       (mark (A.Rule (thmTimes, clauses), (thmTimesleft, DOTright)))
           | thmTimes DOT                      (mark (A.Rule (thmTimes, []), (thmTimesleft, DOTright)))


thmTimes   : thmTime                           ([thmTime])
           | thmTime COMMA thmTimes            (thmTime::thmTimes)

thmTime    : thm AT time                       ((thm, time))
           | thm                               ((thm, T.TimeNow))

time       : PLUS intval MILLISECS             (T.TimeInMS intval)
           | PLUS intval SECS                  (T.TimeInMS (intval * 1000))

deltaexp   : DELTA LPAREN deltathm RPAREN cmpop exp 	([mark (A.ThmClause (#2 deltathm), (DELTAleft, RPARENright)),
																mark (A.Constraint (cmpop, #1 deltathm, exp), (DELTAleft, expright))])

deltathm   : deltavar SEMI IDENT LPAREN exps RPAREN 	((mark (A.ExpVar (A.Var deltavar), (deltavarleft, deltavarright)),
																													mark (A.Thm(T.Delta (IDENT, findArgument (deltavar, exps)), exps), (IDENTleft, RPARENright))))

deltavar	 : IDENT										  (IDENT)

provedexp  : PROVED LPAREN exp COMMA tuple RPAREN cmpop exp (let
                                                               val generatedVar = generateNewVar tuple
                                                               val generatedVar = mark (generatedVar, (tupleleft, tupleright))
                                                             in
                                                               [
                                                                     mark (A.ThmClause
                                                                              (mark (A.Thm(T.Proved tuple,
                                                                                    [exp1, mark (A.ExpType tuple, (tupleleft, tupleright)),
                                                                                       generatedVar]),
                                                                                          (PROVEDleft, exp2right))),
                                                                                          (PROVEDleft, exp2right)),
                                                                     mark (A.Constraint (cmpop, generatedVar, exp2), (PROVEDleft, exp2right))]
                                                             end)

thm        : SCHEDULE LPAREN exp COMMA tuple COMMA exp RPAREN (mark (A.Thm(T.Schedule tuple,
												[exp1, mark (A.ExpType tuple, (tupleleft, tupleright)), exp2]), (SCHEDULEleft, RPARENright)))
			  | DELETE LPAREN exp COMMA tuple RPAREN  (mark (A.Thm(T.Delete tuple,
			                           [exp, mark (A.ExpType tuple, (tupleleft, tupleright))]), (DELETEleft, RPARENright)))
			  | IDENT LPAREN exps RPAREN          								(mark (A.Thm(T.Regular IDENT, exps), (IDENTleft, RPARENright)))
           | BANG IDENT LPAREN exps RPAREN     								(mark (A.Thm(T.Linear IDENT, exps), (IDENTleft, RPARENright)))

thms       : thm                               ([thm])
           | thm COMMA thms                    (thm::thms)

tuple      : IDENT									  (IDENT)

constdecl  : CONST IDENT EQUAL const DOT       (consts := (IDENT, const)::(!consts))

const      : intval                            (T.ConstInt(intval))
           | floatval                          (T.ConstFloat(floatval))
           | HASH INTNUM                       (T.ConstAddr INTNUM)

intval     : INTNUM                            (INTNUM)
           | MINUS INTNUM                      (~INTNUM)

floatval   : FLOATNUM                          (FLOATNUM)
           | MINUS FLOATNUM                    (~FLOATNUM)

clauses    : clause                            (clause)
           | clause COMMA clauses              (clause@clauses)

clause     : thm                               		([mark (A.ThmClause (thm), (thmleft, thmright))])
           | FORALL thm LBRACKET clauses RBRACKET ([mark (A.Forall (thm, clauses), (FORALLleft, RBRACKETright))])
           | constraint                        		([constraint])
			  | deltaexp                          		(deltaexp)
			  | provedexp                             (provedexp)

constraint : exp cmpop exp                     (mark (A.Constraint (cmpop, exp1, exp2), (exp1left, exp2right)))

cmpop			 : EQUAL														 (T.EQ)
					 | NEQUAL														 (T.NEQ)
					 | LESS															 (T.LESS)
					 | GREATER													 (T.GREATER)
					 | LESSEQ 													 (T.LESSEQ)
					 | GREATEREQ												 (T.GREATEREQ)

exp        : IDENT                             (mark (wrapVar IDENT, (IDENTleft, IDENTright)))
           | ANY                               (mark (A.ExpVar A.VarAny, (ANYleft, ANYright)))
           | const                             (mark (A.ExpConst(const), (constleft, constright)))
		       | NIL                               (mark (A.ExpNil, (NILleft, NILright)))
		       | exp binop exp                     (mark (A.ExpBinop(binop, exp1, exp2), (exp1left, exp2right)))
           | IDENT LPAREN exps RPAREN          (mark (A.ExpExtern(IDENT, exps), (IDENTleft, RPARENright)))
           | IDENT LPAREN RPAREN               (mark (A.ExpExtern(IDENT, []), (IDENTleft, RPARENright)))
           | LPAREN exp RPAREN                 (exp) 
           | LPAREN exps RPAREN                (mark ((A.ExpTuple exps), (LPARENleft, RPARENright)))

exps       : exp                               ([exp])
           | exp COMMA exps                    (exp::exps)

binop			 : CONS 														 (T.CONS)
					 | DIVIDE														 (T.DIVIDE)
					 | TIMES														 (T.TIMES)
					 | PLUS															 (T.PLUS)
					 | MINUS														 (T.MINUS)
					 | MOD															 (T.MOD)
					 | EXP															 (T.EXP)
					 | DOTPROD													 (T.DOTPROD)
