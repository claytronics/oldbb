/* BYTECODE TEMPLATE GENERATED USING RAINBOW.MELD PROGRAM */

const unsigned char meld_prog[] = {
0x12, 				/* number of types */
/* Offset to each type's descriptor */
0x13, 0x1E, 0x27, 0x30, 0x3C, 0x45, 0x50, 0x58, 0x62, 0x6C, 0x74, 0x7E, 0x88, 0x92, 0x9C, 0xA5, 0xAE, 0xB7,                      

/* Type 0 descriptor: */
0xC0, 0x0, 			/* Offset to bytecode instructions - here: 0x00C0 / 192 */
0x20, 				/* Type properties (linear / persistent...) */
0x0, 				/* If aggregate, type of agg, else 0x00 */
0x1, 				/* Stratification round */
0x4, 				/* Number of arguments */
0x0,  				/* Number of deltas */
/* end of Type 0 desc */

0x2,				      /* Type 0: first arg type */
0x2,				      /* Type 0: 2nd arg type */
0x0,				      /* Type 0: 3rd arg type */
0x5,				      /* Type 0: 4th arg type */
/* Type of deltas if any */
0x5F, 0x1, 0x0, 0x0, 0x4, 0x2, 0x0,   /* Type 1 desc */
0x2, 
0x0, 
0x60, 0x1, 0x0, 0x0, 0x3, 0x2, 0x0, /* Type 2 desc */
0x2,
0x0,
0x7E, 0x1, 0x0, 0x0, 0x5, 0x5, 0x0, /* Type 3 desc */
0x2,
0x0,
0x0,
0x0,
0x0,
0x7F, 0x1, 0x0, 0x0, 0xF, 0x2, 0x0, /* Type 4 desc */
0x2,
0x0,
0x80, 0x1, 0x20, 0x0, 0x2, 0x4, 0x0, /* Type 5 desc */
0x2,
0x2,
0x0,
0x5,
0x81, 0x1, 0x4, 0x0, 0x6, 0x1, 0x0, /* Type 6 desc */
0x2,
0x82, 0x1, 0x20, 0x0, 0x7, 0x3, 0x0, /* Type 7 desc */
0x2, 
0x2, 
0x5, 
0xA6, 0x1, 0x20, 0x0, 0x8, 0x3, 0x0, /* Type 8 desc */
0x2, 
0x2, 
0x5, 
0xCD, 0x1, 0x0, 0x0, 0x9, 0x1, 0x0, /* Type 9 desc */
0x2, 
0xE9, 0x1, 0x20, 0x0, 0xA, 0x3, 0x0, /* Type 10 desc */
0x2, 
0x2, 
0x5, 
0xD, 0x2, 0x20, 0x0, 0xB, 0x3, 0x0, /* Type 11 desc */
0x2, 
0x2, 
0x5, 
0x34, 0x2, 0x20, 0x0, 0xC, 0x3, 0x0, /* Type 12 desc */
0x2, 
0x2, 
0x5, 
0x58, 0x2, 0x20, 0x0, 0xD, 0x3, 0x0, /* Type 13 desc */
0x2, 
0x2, 
0x5, 
0x7F, 0x2, 0x1, 0x21, 0xE, 0x2, 0x0, /* Type 14 desc */
0x2, 
0x0, 
0x9, 0x3, 0x0, 0x0, 0x10, 0x2, 0x0, /* Type 15 desc */
0x2, 
0x0, 
0x2A, 0x3, 0x0, 0x0, 0x11, 0x2, 0x0, /* Type 16 desc */
0x2, 
0x0, 
0x4B, 0x3, 0x0, 0x0, 0x12, 0x2, 0x0, /* Type 17 desc */
0x2, 
0x0, 
/* BYTECODE INSTRUCTIONS: meldprog + 192 */
/* PROCESS neighbor  -- off: 192 */
0x37, 0xE0, 0x31, 0x21, 0x3, 0x0, 0x41, 0x62, 0x30, 0x82, 0x1, 0x0, 0x0, 0x2, 0x30, 0x82, 0x0, 0x0, 0x1, 0x2, 0x30, 0x82, 0x2, 0x0, 0x2, 0x2, 0x38, 0x42, 0x3, 0x2, 0x30, 0xA3, 0x3, 0x0, 0x8, 0x43, 0x1, 0x0, 0x0, 0x0, 0x0, 0x37, 0xE0, 0xC2, 0x4, 0x23, 0x2, 0x0, 0x5, 0x0, 0x0, 0x0, 0x61, 0x18, 0x0, 0x41, 0xE2, 0x30, 0x82, 0x0, 0x0, 0x0, 0x2, 0x30, 0x82, 0x1, 0x0, 0x1, 0x2, 0x8, 0x42, 0x1, 0x0, 0x0, 0x0, 0x0, 0x37, 0xE0, 0xC2, 0x4, 0x23, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x61, 0x18, 0x0, 0x42, 0xA2, 0x30, 0x82, 0x0, 0x0, 0x0, 0x2, 0x30, 0x82, 0x1, 0x0, 0x1, 0x2, 0x8, 0x42, 0x1, 0x0, 0x0, 0x0, 0x0, 0x37, 0xE0, 0xC2, 0x4, 0x21, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x61, 0x24, 0x0, 0xC2, 0x4, 0x41, 0x2, 0x0, 0x5, 0x0, 0x0, 0x0, 0x62, 0x18, 0x0, 0x43, 0x23, 0x30, 0x82, 0x0, 0x0, 0x0, 0x3, 0x30, 0x82, 0x1, 0x0, 0x1, 0x3, 0x8, 0x63, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0,  
/* PROCESS neighborCount -- off: 351 */
0x0, 
/* PROCESS vacant -- off: 352 */
0x37, 0xE0, 0xC2, 0x4, 0x23, 0x1, 0x0, 0x5, 0x0, 0x0, 0x0, 0x61, 0x12, 0x0, 0x42, 0x62, 0x30, 0x82, 0x0, 0x0, 0x0, 0x2, 0x8, 0x42, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0,
/* PROCESS setColor -- off: 382 */
0x0, 
/* PROCESS setColor2  -- off: 383 */
0x0, 
/* PROCESS ____robhgien  -- off: 384 */
0x0, 
/* PROCESS TAP  -- off: 385 */
0x0, 
/* PROCESS bottomNeighbor  -- off: 386 */
0x37, 0xE0, 0x31, 0x21, 0x2, 0x0, 0x42, 0x22, 0x30, 0x82, 0x1, 0x0, 0x0, 0x2, 0x30, 0x82, 0x0, 0x0, 0x1, 0x2, 0x38, 0x42, 0x2, 0x2, 0x30, 0xA3, 0x2, 0x0, 0x8, 0x43, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 
/* PROCESS ____robhgieNmottob -- off: 422 */
0x37, 0xE0, 0xA0, 0xE, 0x24, 0x0, 0x0, 0x42, 0x0, 0x0, 0x37, 0xE1, 0x44, 0x22, 0x30, 0x82, 0x1, 0x0, 0x0, 0x2, 0x30, 0x82, 0x1, 0x1, 0x1, 0x2, 0x30, 0xA3, 0x2, 0x0, 0x8, 0x43, 0x1, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 
/* PROCESS noBottomNeighbor -- off: 461 */
0x37, 0xE0, 0x30, 0x61, 0x0, 0x0, 0x0, 0x0, 0x43, 0xA2, 0x30, 0x82, 0x0, 0x0, 0x0, 0x2, 0x38, 0x42, 0x1, 0x2, 0x8, 0x42, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 
/* PROCESS topNeighbor -- off: 489 */
0x37, 0xE0, 0x31, 0x21, 0x2, 0x0, 0x42, 0xE2, 0x30, 0x82, 0x1, 0x0, 0x0, 0x2, 0x30, 0x82, 0x0, 0x0, 0x1, 0x2, 0x38, 0x42, 0x2, 0x2, 0x30, 0xA3, 0x2, 0x0, 0x8, 0x43, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 
/* PROCESS ____robhgieNpot -- off: 525 */
0x37, 0xE0, 0xA0, 0xE, 0x24, 0x0, 0x0, 0x42, 0x0, 0x0, 0x37, 0xE1, 0x43, 0xE2, 0x30, 0x82, 0x1, 0x0, 0x0, 0x2, 0x30, 0x82, 0x1, 0x1, 0x1, 0x2, 0x30, 0xA3, 0x2, 0x0, 0x8, 0x43, 0x1, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 
/* PROCESS sideNeighbor -- off: 564 */
0x37, 0xE0, 0x31, 0x21, 0x2, 0x0, 0x43, 0x62, 0x30, 0x82, 0x1, 0x0, 0x0, 0x2, 0x30, 0x82, 0x0, 0x0, 0x1, 0x2, 0x38, 0x42, 0x2, 0x2, 0x30, 0xA3, 0x2, 0x0, 0x8, 0x43, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 
/* PROCESS ____robhgieNedis -- off: 600 */
0x37, 0xE0, 0xA0, 0xE, 0x24, 0x0, 0x0, 0x42, 0x0, 0x0, 0x37, 0xE1, 0x44, 0x62, 0x30, 0x82, 0x1, 0x0, 0x0, 0x2, 0x30, 0x82, 0x1, 0x1, 0x1, 0x2, 0x30, 0xA3, 0x2, 0x0, 0x8, 0x43, 0x1, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 
/* PROCESS level -- off: 639 */
0x37, 0xE0, 0xA0, 0xD, 0x24, 0x0, 0x0, 0x42, 0x0, 0x0, 0x37, 0xE1, 0x44, 0x62, 0x30, 0x82, 0x1, 0x1, 0x0, 0x2, 0x30, 0x82, 0x1, 0x0, 0x1, 0x2, 0x30, 0xA3, 0x2, 0x1, 0x8, 0x43, 0x1, 0x0, 0x0, 0x0, 0x0, 0x1, 0x37, 0xE0, 0xA0, 0x8, 0x24, 0x0, 0x0, 0x42, 0x0, 0x0, 0x37, 0xE1, 0x44, 0x22, 0x30, 0x82, 0x1, 0x1, 0x0, 0x2, 0x30, 0x82, 0x1, 0x0, 0x1, 0x2, 0x30, 0xA3, 0x2, 0x1, 0x8, 0x43, 0x1, 0x0, 0x0, 0x0, 0x0, 0x1, 0x37, 0xE0, 0xA0, 0xB, 0x24, 0x0, 0x0, 0x42, 0x0, 0x0, 0x37, 0xE1, 0x43, 0xE2, 0x30, 0x82, 0x1, 0x1, 0x0, 0x2, 0x30, 0x82, 0x1, 0x0, 0x1, 0x2, 0x30, 0xA3, 0x2, 0x1, 0x8, 0x43, 0x1, 0x0, 0x0, 0x0, 0x0, 0x1, 0x37, 0xE0, 0x41, 0x21, 0x30, 0x82, 0x0, 0x0, 0x0, 0x1, 0x30, 0x82, 0x1, 0x0, 0x1, 0x1, 0x8, 0x21, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 
/* PROCESS __fact3 -- off: 777 */
0x37, 0xE0, 0xC2, 0x4, 0x31, 0x1, 0x0, 0x1, 0x0, 0x0, 0x0, 0x38, 0x62, 0x43, 0xA3, 0x30, 0x82, 0x0, 0x0, 0x0, 0x3, 0x38, 0x82, 0x1, 0x3, 0x8, 0x63, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 
/* PROCESS __fact2 -- off: 810 */
0x37, 0xE0, 0xC2, 0x4, 0x2F, 0x1, 0x0, 0x1, 0x0, 0x0, 0x0, 0x38, 0x62, 0x43, 0xA3, 0x30, 0x82, 0x0, 0x0, 0x0, 0x3, 0x38, 0x82, 0x1, 0x3, 0x8, 0x63, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 
/* PROCESS __fact1 -- off: 843 */
0x37, 0xE0, 0x43, 0xA1, 0x30, 0x82, 0x0, 0x0, 0x0, 0x1, 0x30, 0x82, 0x1, 0x0, 0x1, 0x1, 0x8, 0x21, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, };


char *tuple_names[] = {"neighbor", "neighborCount", "vacant", "setColor", "setColor2", "____robhgien", "tap", "bottomNeighbor", "____robhgieNmottob", "noBottomNeighbor", "topNeighbor", "____robhgieNpot", "sideNeighbor", "____robhgieNedis", "level", "__fact3", "__fact2", "__fact1", };

#include "extern_functions.bbh"
Register (*extern_functs[])() = {};

int extern_functs_args[] = {};



/* Generated by: build/src-bobby/meldinterp/compiler-src/src/trees/printvm.sml

PROCESS neighbor:
MOVE tuple TO reg 0
MOVE reverse[0.3] TO reg 1
ALLOC ____robhgien TO reg 2
MOVE 0.1 TO 2.0
MOVE 0.0 TO 2.1
MOVE 0.2 TO 2.2
MOVE reg 1 TO 2.3
MOVE 0.3 TO reg 3
SEND reg 2 TO reg 3 IN 0ms
MOVE tuple TO reg 0
SET reg 1 TO 0.2 INT EQUAL 5
IF (1) THEN
ALLOC bottomNeighbor TO reg 2
MOVE 0.0 TO 2.0
MOVE 0.1 TO 2.1
SEND reg 2 TO reg 2 IN 0ms
ENDIF
MOVE tuple TO reg 0
SET reg 1 TO 0.2 INT EQUAL 0
IF (1) THEN
ALLOC topNeighbor TO reg 2
MOVE 0.0 TO 2.0
MOVE 0.1 TO 2.1
SEND reg 2 TO reg 2 IN 0ms
ENDIF
MOVE tuple TO reg 0
SET reg 1 TO 0.2 INT NOT EQUAL 0
IF (1) THEN
SET reg 2 TO 0.2 INT NOT EQUAL 5
IF (2) THEN
ALLOC sideNeighbor TO reg 3
MOVE 0.0 TO 3.0
MOVE 0.1 TO 3.1
SEND reg 3 TO reg 3 IN 0ms
ENDIF
ENDIF
RETURN


PROCESS neighborCount:
RETURN


PROCESS vacant:
MOVE tuple TO reg 0
SET reg 1 TO 0.1 INT EQUAL 5
IF (1) THEN
ALLOC noBottomNeighbor TO reg 2
MOVE 0.0 TO 2.0
SEND reg 2 TO reg 2 IN 0ms
ENDIF
RETURN


PROCESS setColor:
RETURN


PROCESS setColor2:
RETURN


PROCESS ____robhgien:
RETURN


PROCESS tap:
RETURN


PROCESS bottomNeighbor:
MOVE tuple TO reg 0
MOVE reverse[0.2] TO reg 1
ALLOC ____robhgieNmottob TO reg 2
MOVE 0.1 TO 2.0
MOVE 0.0 TO 2.1
MOVE reg 1 TO 2.2
MOVE 0.2 TO reg 3
SEND reg 2 TO reg 3 IN 0ms
RETURN


PROCESS ____robhgieNmottob:
MOVE tuple TO reg 0
ITERATE OVER level MATCHING 
  (match).0=0.0
MOVE tuple TO reg 1
ALLOC __fact2 TO reg 2
MOVE 0.1 TO 2.0
MOVE 1.1 TO 2.1
MOVE 0.2 TO reg 3
SEND reg 2 TO reg 3 IN 0ms
NEXT
RETURN


PROCESS noBottomNeighbor:
MOVE tuple TO reg 0
MOVE 0 TO reg 1
ALLOC level TO reg 2
MOVE 0.0 TO 2.0
MOVE reg 1 TO 2.1
SEND reg 2 TO reg 2 IN 0ms
RETURN


PROCESS topNeighbor:
MOVE tuple TO reg 0
MOVE reverse[0.2] TO reg 1
ALLOC ____robhgieNpot TO reg 2
MOVE 0.1 TO 2.0
MOVE 0.0 TO 2.1
MOVE reg 1 TO 2.2
MOVE 0.2 TO reg 3
SEND reg 2 TO reg 3 IN 0ms
RETURN


PROCESS ____robhgieNpot:
MOVE tuple TO reg 0
ITERATE OVER level MATCHING 
  (match).0=0.0
MOVE tuple TO reg 1
ALLOC __fact3 TO reg 2
MOVE 0.1 TO 2.0
MOVE 1.1 TO 2.1
MOVE 0.2 TO reg 3
SEND reg 2 TO reg 3 IN 0ms
NEXT
RETURN


PROCESS sideNeighbor:
MOVE tuple TO reg 0
MOVE reverse[0.2] TO reg 1
ALLOC ____robhgieNedis TO reg 2
MOVE 0.1 TO 2.0
MOVE 0.0 TO 2.1
MOVE reg 1 TO 2.2
MOVE 0.2 TO reg 3
SEND reg 2 TO reg 3 IN 0ms
RETURN


PROCESS ____robhgieNedis:
MOVE tuple TO reg 0
ITERATE OVER level MATCHING 
  (match).0=0.0
MOVE tuple TO reg 1
ALLOC __fact1 TO reg 2
MOVE 0.1 TO 2.0
MOVE 1.1 TO 2.1
MOVE 0.2 TO reg 3
SEND reg 2 TO reg 3 IN 0ms
NEXT
RETURN


PROCESS level (max 1) :
MOVE tuple TO reg 0
ITERATE OVER ____robhgieNedis MATCHING 
  (match).0=0.0
MOVE tuple TO reg 1
ALLOC __fact1 TO reg 2
MOVE 1.1 TO 2.0
MOVE 0.1 TO 2.1
MOVE 1.2 TO reg 3
SEND reg 2 TO reg 3 IN 0ms
NEXT
MOVE tuple TO reg 0
ITERATE OVER ____robhgieNmottob MATCHING 
  (match).0=0.0
MOVE tuple TO reg 1
ALLOC __fact2 TO reg 2
MOVE 1.1 TO 2.0
MOVE 0.1 TO 2.1
MOVE 1.2 TO reg 3
SEND reg 2 TO reg 3 IN 0ms
NEXT
MOVE tuple TO reg 0
ITERATE OVER ____robhgieNpot MATCHING 
  (match).0=0.0
MOVE tuple TO reg 1
ALLOC __fact3 TO reg 2
MOVE 1.1 TO 2.0
MOVE 0.1 TO 2.1
MOVE 1.2 TO reg 3
SEND reg 2 TO reg 3 IN 0ms
NEXT
MOVE tuple TO reg 0
ALLOC setColor2 TO reg 1
MOVE 0.0 TO 1.0
MOVE 0.1 TO 1.1
SEND reg 1 TO reg 1 IN 0ms
RETURN


PROCESS __fact3:
MOVE tuple TO reg 0
SET reg 1 TO 0.1 INT_MINUS 1
MOVE reg 1 TO reg 2
ALLOC level TO reg 3
MOVE 0.0 TO 3.0
MOVE reg 2 TO 3.1
SEND reg 3 TO reg 3 IN 0ms
RETURN


PROCESS __fact2:
MOVE tuple TO reg 0
SET reg 1 TO 0.1 INT_PLUS 1
MOVE reg 1 TO reg 2
ALLOC level TO reg 3
MOVE 0.0 TO 3.0
MOVE reg 2 TO 3.1
SEND reg 3 TO reg 3 IN 0ms
RETURN


PROCESS __fact1:
MOVE tuple TO reg 0
ALLOC level TO reg 1
MOVE 0.0 TO 1.0
MOVE 0.1 TO 1.1
SEND reg 1 TO reg 1 IN 0ms
RETURN


*/

