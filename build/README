9/29/10 --- updated on 06/09/14

Firstly, if running on linux, make sure that you have the following tools and librairies installed on your system:
 - sudo apt-get install avr-libc gcc-avr g++ avrdude
if you will be working with the meld-compiler, you may also need these packages:
 - sudo apt-get install bison mlton ml-yacc ml-lex flex

 If you are using Mac OS X, here is a solution to install the complete AVR toolchain on your system:
 - Install homebrew if you don't have it yet: 
 ruby -e "$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)"
 - Then type in a terminal:
 sudo chown -R `whoami` /usr/local (To ensure that homebrew can link your files)
 brew tap larsimmisch/avr
 brew install avr-libc
 brew install avrdude
 - Voila! However, reprogramming from Mac OS X is not supported yet.

This directory tree contains the code used to develop applications for
the blinkyblocks.  At this point it has a reasonable makefile for meld
and has been tested on Windows 7 + Cygwin and Ubuntu 12+. 

- we recommend the bash shell
- run ". ./initbb.sh"
  this sets BBASE, ARCH, and your PATH. If you don't use bash or want to do it yourself
  - set BBASE to this directory
  - set ARCH to `uname -m`-`uname -s` , e.g., export ARCH=`uname -m`-`uname -s`
  - add $BBASE/bin and $BBASE/bin/$ARCH to your path
- check that there exists a bin/$(ARCH) directory.  If not, create one and fix everything, 
  or try one of the ones that exists. (and, let us know??)
- chdir to $BBASE/src-bobby
- run make build
- run make install

Now you are set to compile for either the simulator or the block
hardware.  If you are going to do this for meld programs, look in
$BBASE/apps/sample-meld to see some sample meld applications and a
basic Makefile.  Basically, you should only have to change the source
you want to compile and run make.
If you modifiy the system API, you can run `make wipeout && make` to recompile it at the same time has the user program. 

If you want to add Log messages to your program you have to uncomment 
the -DLOG_DEBUG line of the Makefile and run `make wipeout && make`. You can find the host program in /src-bobby/logger.

To run the resulting executable:

arch-$ARCH/source-name.exe will invoke the simulator
arch-blocks/source-name.hex is the file to load onto the blocks

If you want to compile for the simulator you should set BB=SIM.
If you want to compile for the blocks you should set BB=block.

The reprogrammer in $BBASE/bin-$ARCH will load the .hex file onto the
blocks.  It takes two important arguments -p <serial-device-name> -f
<hex-file-name>.  <serial-device-name> is probably something like
/dev/com4.  If the reprogrammer doesn't seem to work, then try running
stty before you run the reprogrammer.  For example, if you are
compiling ends.meld, then you might do the following from $BBASE/apps/sample-meld:

stty /dev/com4 38400
reprogrammer -p /dev/com4 -f arch-blocks/ends.hex

Good Luck!

NOTE: If you can't compile because bbcompiler.pl prints "make: *** No rule to make target `.allbbobj'", check that you have not mistyped the name of your program in the Makefile.
If the problem persists, make sure that you have the AVR Toolchain installed on your system, refer to the top of this README for instructions.
Sometimes, running `make wipeout && make` instead of `make` alone will solve your issue.

+ Compiling does not seem possible inside an Emacs shell on Mac OS X.
